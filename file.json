{"workspaces":[{"id":"4ed85d6e-e750-4d01-892f-78fc79993e0c","name":"Distribution Performance Reporting","description":"Production ready, certified and secured workspace for field reporting and analytics.Owner: Mary SteeleContact: boxfieldperformancereporting@thrivent.com","type":"Workspace","state":"Active","isOnDedicatedCapacity":true,"capacityId":"E3FC39D4-2216-44DF-A023-9AB59FEA814B","defaultDatasetStorageFormat":"Small","reports":[{"reportType":"PowerBIReport","id":"8c8bd825-b5b5-43a7-93f2-33e28b787a18","name":"Usage Metrics Report","datasetId":"582538fa-5582-4571-9cb8-4a56115cc627","createdDateTime":"2020-04-14T18:33:47.567","modifiedDateTime":"2021-06-14T20:18:18.677","modifiedBy":"david.bowman@thrivent.com","modifiedById":"ffed1576-b128-448d-927e-1d187d9d95ce"},{"reportType":"PowerBIReport","id":"6eb864b9-11fd-4bf1-bf76-57c399f0c9f8","name":"Capacity Dashboard","datasetId":"9eb9b908-923c-4b40-a72a-c1956845be0f","createdDateTime":"2020-07-02T15:23:33.57","modifiedDateTime":"2024-03-07T21:04:54.99","modifiedBy":"omkar.ehani@thrivent.com","modifiedById":"98085fdc-acdf-4e34-9fd9-6e77a3352a74"},{"reportType":"PowerBIReport","id":"68b18698-cfbf-4385-85d1-53546e36640a","name":"LIfe Volume Report Old","datasetId":"f1a550a6-bd71-4ce1-a0d6-8c852e9ad587","createdDateTime":"2022-03-22T19:47:47.587","modifiedDateTime":"2023-01-24T18:44:30.63","modifiedBy":"xPowerBi_Prod@thrivent.com","createdBy":"harini.baireddy@thrivent.com","modifiedById":"5aab6987-e004-43c0-b69a-09c27972e0f9","createdById":"58863814-9707-455a-8777-fbcc10149908"},{"reportType":"PowerBIReport","id":"50abf24e-5b32-4121-b6c6-df3836453948","name":"PGCOE Teaming Report","datasetId":"35012b09-889c-4cab-b6d2-1add160a7294","createdDateTime":"2022-10-20T16:54:04.977","modifiedDateTime":"2024-04-23T17:24:57.96","modifiedBy":"Lori.ZovarLanser@Thrivent.com","createdBy":"ravi.sembeti@thrivent.com","modifiedById":"1bc11d78-86b7-4181-9cff-cd1c751c4ac4","createdById":"79b17600-c299-431a-9821-8fcbd0c38109"},{"reportType":"PowerBIReport","id":"405d85ce-931b-4991-8cbe-3774edba8be7","name":"Applications Dashboard","datasetId":"6e72563c-394d-417f-b900-955b07f38417","createdDateTime":"2022-12-08T17:10:47.47","modifiedDateTime":"2024-02-29T16:51:07.61","modifiedBy":"Lori.ZovarLanser@Thrivent.com","createdBy":"Arianna.Cismoski@thrivent.com","modifiedById":"1bc11d78-86b7-4181-9cff-cd1c751c4ac4","createdById":"dd9190e6-f8ef-4fdc-8e2a-44dea311b6f0"},{"reportType":"PowerBIReport","id":"c5317841-7ff9-4520-91e2-6064a425d9b7","name":"Financial Advisor and Team Performance Dashboard","datasetId":"5bf58242-e933-488c-a92f-a944cc7324c1","createdDateTime":"2024-03-06T17:17:03.217","modifiedDateTime":"2024-04-17T00:17:36.367","modifiedBy":"Tina.Timmer@Thrivent.com","createdBy":"xPowerBi_Prod@thrivent.com","modifiedById":"8e6dc12f-c7a1-4bb3-91f3-ea2dc014a46e","createdById":"5aab6987-e004-43c0-b69a-09c27972e0f9"},{"reportType":"PowerBIReport","id":"3b7a081a-e303-4b9a-b6c3-cc94530793a7","name":"PILOT - Referral Incentive","datasetId":"af1753f1-122f-4135-9241-74039fedc7fa","createdDateTime":"2024-02-13T21:18:25.763","modifiedDateTime":"2024-03-28T21:54:41.443","modifiedBy":"Ashley.Allen@Thrivent.com","createdBy":"xPowerBi_Prod@thrivent.com","modifiedById":"db3dc7f7-0f5a-4e78-ba27-5d10f979c10f","createdById":"5aab6987-e004-43c0-b69a-09c27972e0f9"},{"reportType":"PowerBIReport","id":"7d271d6a-dc85-45dc-9a5b-f452fefa0377","name":"Distribution Dashboard 2023 YE","datasetId":"b44bc155-4a55-4101-a4f2-ce3989d7ee04","createdDateTime":"2024-01-23T14:50:56.827","modifiedDateTime":"2024-01-23T14:50:56.827","modifiedBy":"Tina.Timmer@Thrivent.com","createdBy":"Tina.Timmer@Thrivent.com","modifiedById":"8e6dc12f-c7a1-4bb3-91f3-ea2dc014a46e","createdById":"8e6dc12f-c7a1-4bb3-91f3-ea2dc014a46e"},{"reportType":"PowerBIReport","id":"2b1ed74b-ed59-43fb-bb09-47d46c7ee0c7","name":"Leader Conference Tracker","datasetId":"6d7fcae2-ea02-4669-aa05-2025e3597f80","createdDateTime":"2023-12-22T22:15:41.227","modifiedDateTime":"2024-04-22T21:01:41.997","modifiedBy":"Lori.ZovarLanser@Thrivent.com","createdBy":"xPowerBi_Prod@thrivent.com","modifiedById":"1bc11d78-86b7-4181-9cff-cd1c751c4ac4","createdById":"5aab6987-e004-43c0-b69a-09c27972e0f9"},{"reportType":"PowerBIReport","id":"b3fce84e-90e1-46d8-9bf8-eb8c8f0fe425","name":"Advice Adoption Dashboard ","datasetId":"c0acac8b-57ef-4e56-a2ed-5387df2e3b21","createdDateTime":"2023-07-21T19:36:37.527","modifiedDateTime":"2024-04-15T18:47:41.19","modifiedBy":"Jacob.Huseby@Thrivent.com","createdBy":"xPowerBi_Prod@thrivent.com","modifiedById":"cbbe9c94-c749-416d-b041-ef927e898c15","createdById":"5aab6987-e004-43c0-b69a-09c27972e0f9"},{"reportType":"PowerBIReport","id":"a954bcf7-ebba-4751-9518-223d7a7dbcd0","name":"High Value Household Report","datasetId":"05b30f72-45ed-4595-8fbf-f5935ae0e099","createdDateTime":"2023-05-12T21:41:59.447","modifiedDateTime":"2024-03-16T16:26:09.963","modifiedBy":"Tina.Timmer@Thrivent.com","createdBy":"xPowerBi_Prod@thrivent.com","modifiedById":"8e6dc12f-c7a1-4bb3-91f3-ea2dc014a46e","createdById":"5aab6987-e004-43c0-b69a-09c27972e0f9"},{"reportType":"PowerBIReport","id":"4caa81dc-b7db-4e1d-bc63-cb27db61543a","name":"LIfe Volume Report","datasetId":"7dd1908e-2257-4d5c-9609-77bee40e500d","createdDateTime":"2023-01-24T18:47:42.343","modifiedDateTime":"2023-01-24T18:47:42.343","modifiedBy":"xPowerBi_Prod@thrivent.com","createdBy":"xPowerBi_Prod@thrivent.com","modifiedById":"5aab6987-e004-43c0-b69a-09c27972e0f9","createdById":"5aab6987-e004-43c0-b69a-09c27972e0f9"},{"reportType":"PowerBIReport","id":"2b3abb21-6b04-408f-9fa1-3c635383d21a","name":"2022 Fall Advisor Meeting Incentive Report","datasetId":"4110a40f-30f7-453b-90a3-ba34ce56f2c5","createdDateTime":"2022-09-06T19:33:00.247","modifiedDateTime":"2022-09-06T21:03:47.937","modifiedBy":"xPowerBi_Prod@thrivent.com","createdBy":"ravi.sembeti@thrivent.com","modifiedById":"5aab6987-e004-43c0-b69a-09c27972e0f9","createdById":"79b17600-c299-431a-9821-8fcbd0c38109"},{"reportType":"PowerBIReport","id":"061f5254-fcd0-40c2-bd75-49d9649934b3","name":"Pace to Performance","datasetId":"9f5cfe5a-3ed0-4df7-a49a-f02f9a5e0df9","createdDateTime":"2022-06-29T18:02:40.1","modifiedDateTime":"2024-04-08T14:13:52.513","modifiedBy":"omkar.ehani@thrivent.com","createdBy":"ravi.sembeti@thrivent.com","modifiedById":"98085fdc-acdf-4e34-9fd9-6e77a3352a74","createdById":"79b17600-c299-431a-9821-8fcbd0c38109"},{"reportType":"PowerBIReport","id":"2e718b72-5c46-4036-a82f-f6c5fb2ebf2f","name":"Advisor Metrics Detail and Best Day","datasetId":"5dd59aae-e00e-4a2f-8947-793b75d7c435","createdDateTime":"2022-06-29T18:02:39.847","modifiedDateTime":"2024-02-21T17:52:12.527","modifiedBy":"Jacob.Huseby@Thrivent.com","createdBy":"ravi.sembeti@thrivent.com","modifiedById":"cbbe9c94-c749-416d-b041-ef927e898c15","createdById":"79b17600-c299-431a-9821-8fcbd0c38109"},{"reportType":"PowerBIReport","id":"9d490cb3-b628-4095-aadd-6487b8a00e7b","name":"Experienced Advisors Report","datasetId":"a5dee350-005f-4698-af42-f00d5c06102e","createdDateTime":"2022-05-02T14:24:53.503","modifiedDateTime":"2024-01-19T17:36:45.35","modifiedBy":"Thomas.Blackman@Thrivent.com","createdBy":"david.bowman@thrivent.com","modifiedById":"2d361324-26ce-4279-90a4-26e7cf076045","createdById":"ffed1576-b128-448d-927e-1d187d9d95ce"},{"reportType":"PowerBIReport","id":"7444c7cf-0ba9-408a-bef3-98e69a0f6c78","name":"Distribution Usage Metrics","datasetId":"b0e37305-a925-4b66-abe3-51a5e3fe7729","createdDateTime":"2021-10-07T13:41:11.12","modifiedDateTime":"2021-10-07T13:43:05.09","modifiedBy":"david.bowman@thrivent.com","createdBy":"david.bowman@thrivent.com","modifiedById":"ffed1576-b128-448d-927e-1d187d9d95ce","createdById":"ffed1576-b128-448d-927e-1d187d9d95ce"},{"reportType":"PowerBIReport","id":"616d1668-7455-4542-a8e9-ea6c71835aee","name":"Sales Dashboard","datasetId":"8bc79dae-44df-4988-9cf7-b050565ad0e4","createdDateTime":"2020-10-05T12:44:50.73","modifiedDateTime":"2024-04-01T17:30:37.213","modifiedBy":"Tina.Timmer@Thrivent.com","modifiedById":"8e6dc12f-c7a1-4bb3-91f3-ea2dc014a46e"},{"reportType":"PowerBIReport","id":"b5413e25-e97d-49b2-9c26-1961ca76e1ee","name":"New Client Dashboard","datasetId":"c12af2db-2b77-449e-bb26-e79e8072fc6b","createdDateTime":"2020-09-24T23:00:10.933","modifiedDateTime":"2024-03-04T17:36:27.623","modifiedBy":"Ashley.Allen@Thrivent.com","modifiedById":"db3dc7f7-0f5a-4e78-ba27-5d10f979c10f"},{"reportType":"PowerBIReport","id":"dbec7e7f-2153-47ed-b2e4-5e8e9302cfcc","name":"Field Activity Dashboard","datasetId":"a4b9a501-5ce6-4703-992d-0ebd014d6e7f","createdDateTime":"2020-07-14T17:14:07.063","modifiedDateTime":"2024-02-16T18:19:05.563","modifiedBy":"omkar.ehani@thrivent.com","modifiedById":"98085fdc-acdf-4e34-9fd9-6e77a3352a74"},{"reportType":"PowerBIReport","id":"b4a56e99-d396-4fcc-a89e-b0224e77994b","name":"Distribution Dashboard","datasetId":"c2606678-c517-4840-b3fa-62eafcc45a3e","createdDateTime":"2020-07-06T13:01:40.847","modifiedDateTime":"2024-04-11T17:51:23.69","modifiedBy":"omkar.ehani@thrivent.com","modifiedById":"98085fdc-acdf-4e34-9fd9-6e77a3352a74"},{"reportType":"PowerBIReport","id":"96b72289-e0fd-4606-aa1a-eebf017c34cd","name":"Report Usage Metrics Report","datasetId":"b0e37305-a925-4b66-abe3-51a5e3fe7729","createdDateTime":"2019-10-30T17:36:11.097","modifiedDateTime":"2019-10-30T17:36:11.097","modifiedBy":"david.bowman@thrivent.com","createdBy":"david.bowman@thrivent.com","modifiedById":"ffed1576-b128-448d-927e-1d187d9d95ce","createdById":"ffed1576-b128-448d-927e-1d187d9d95ce"},{"reportType":"PowerBIReport","id":"80660137-53ad-4d1c-a1a7-9308d85d2a31","name":"Opportunity Analysis Tool (OAT) Report","datasetId":"3e323c60-3245-44cc-882a-fed92aa9a21d","createdDateTime":"2024-04-17T16:42:21.21","modifiedDateTime":"2024-04-17T16:42:21.21","modifiedBy":"xPowerBi_Prod@thrivent.com","createdBy":"xPowerBi_Prod@thrivent.com","modifiedById":"5aab6987-e004-43c0-b69a-09c27972e0f9","createdById":"5aab6987-e004-43c0-b69a-09c27972e0f9"},{"reportType":"PowerBIReport","id":"61116935-cf46-4534-992f-db7a122465ff","name":"Associate Rep Dashboard","datasetId":"e63c5f8f-0124-46ba-8291-6984d3a11278","createdDateTime":"2024-03-27T20:53:28.36","modifiedDateTime":"2024-04-18T18:04:35.61","modifiedBy":"Brian.Houghton@Thrivent.com","createdBy":"Brian.Houghton@Thrivent.com","modifiedById":"c23084c3-3890-4d73-8268-c18558782893","createdById":"c23084c3-3890-4d73-8268-c18558782893"}],"dashboards":[],"datasets":[{"id":"b0e37305-a925-4b66-abe3-51a5e3fe7729","name":"Report Usage Metrics Model","tables":[],"configuredBy":"david.bowman@thrivent.com","configuredById":"ffed1576-b128-448d-927e-1d187d9d95ce","isEffectiveIdentityRequired":false,"isEffectiveIdentityRolesRequired":false,"directQueryRefreshSchedule":{"frequency":120,"days":[],"times":[],"localTimeZoneId":"UTC"},"targetStorageMode":"Abf","createdDate":"2019-10-30T17:36:09.103","contentProviderType":"UsageMetricsUserReport"},{"id":"582538fa-5582-4571-9cb8-4a56115cc627","name":"Usage Metrics Report","tables":[{"name":"Report views","isHidden":false,"columns":[{"name":"ReportId","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ReportType","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ReportName","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"AppName","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"UserKey","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"UserId","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"UserAgent","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DatasetName","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CapacityId","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CapacityName","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Date","dataType":"String","isHidden":false,"expression":"DATE(YEAR(\u0027Report views\u0027[CreationTime]), MONTH(\u0027Report views\u0027[CreationTime]), DAY(\u0027Report views\u0027[CreationTime]))","columnType":"Calculated"},{"name":"CreationTime","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"DistributionMethod","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"OriginalConsumptionMethod","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ConsumptionMethod","dataType":"String","isHidden":false,"expression":"SWITCH(\u0027Report views\u0027[OriginalConsumptionMethod],    'Embedding for your customers', 'Embedded',    'Embedding for your organization', 'Embedded',    'Power BI mobile', 'Mobile',    'Power BI web', 'PowerBI.com',    'Simplified embedding', 'Embedded',    '', 'Not specified',    BLANK(), 'Not specified',    'Other')","columnType":"Calculated"}],"measures":[],"source":[{"expression":"let    Source = UsageMetricsDataConnector.GetMetricsData(BaseUrl \u0026 '/metadata/v201906/metrics/workspace/' \u0026 WorkspaceId \u0026 '/reportviews'),    metricsTable = Table.FromRecords(Source),    checkForEmptyTable = if Table.IsEmpty(metricsTable) then                        Table.FromRows                        (                            {                            },                            {                                'ReportId', 'ReportType', 'ReportName', 'AppName', 'UserKey', 'UserId', 'UserAgent', 'DatasetName', 'DistributionMethod', 'CapacityId', 'CapacityName', 'CreationTime', 'ConsumptionMethod'                            }                        )                        else                        metricsTable,    finalTable = Table.TransformColumnTypes(checkForEmptyTable, {{'CreationTime', type datetime}}),    #'Renamed Columns' = Table.RenameColumns(finalTable,{{'ConsumptionMethod', 'OriginalConsumptionMethod'}}),    #'Replaced Value' = Table.ReplaceValue(#'Renamed Columns','Apps','App',Replacer.ReplaceText,{'DistributionMethod'})in    #'Replaced Value'"}]},{"name":"Model measures","isHidden":false,"columns":[],"measures":[{"name":"Report views","expression":"COUNTROWS(\u0027Report views\u0027) + 0","isHidden":false},{"name":"Report viewers","expression":"DISTINCTCOUNT(\u0027Report views\u0027[UserKey]) + 0","isHidden":false},{"name":"Page view share","expression":"DIVIDE(COUNTROWS(\u0027Report page views\u0027), CALCULATE(COUNTROWS(\u0027Report page views\u0027), ALL(\u0027Report pages\u0027[SectionName])), 0)","isHidden":false},{"name":"View trend","expression":"var numberOfDays = DATEDIFF(MIN(\u0027Report views\u0027[Date]), MAX(\u0027Report views\u0027[Date]),DAY) + 1var periodLength = INT(numberOfDays/2) - 1var firstPeriod = CALCULATE([Report views], DATESBETWEEN(\u0027Report views\u0027[Date], MIN(\u0027Report views\u0027[Date]), MIN(\u0027Report views\u0027[Date]) + periodLength))var secondPeriod = CALCULATE([Report views], DATESBETWEEN(\u0027Report views\u0027[Date], MAX(\u0027Report views\u0027[Date]) - periodLength, MAX(\u0027Report views\u0027[Date])))return DIVIDE(secondPeriod - firstPeriod, firstPeriod)  + 0","isHidden":false},{"name":"P-50","expression":"PERCENTILE.INC(\u0027Report load times\u0027[loadTime], 0.5) + 0","isHidden":false},{"name":"P-50 7d","expression":"CALCULATE([P-50], ALL(Dates), DATESINPERIOD(\u0027Report load times\u0027[Date], max(\u0027Report load times\u0027[Date]), -7, DAY)) + 0","isHidden":false},{"name":"P-25","expression":"PERCENTILE.INC(\u0027Report load times\u0027[loadTime], 0.25) + 0","isHidden":false},{"name":"P-10","expression":"PERCENTILE.INC(\u0027Report load times\u0027[loadTime], 0.1) + 0","isHidden":false},{"name":"P-90 7d","expression":"CALCULATE([P-90], ALL(Dates), DATESINPERIOD(\u0027Report load times\u0027[Date], max(\u0027Report load times\u0027[Date]), -7, DAY)) + 0","isHidden":false},{"name":"P-10 7d","expression":"CALCULATE([P-10], DATESINPERIOD(\u0027Report load times\u0027[Date], max(\u0027Report load times\u0027[Date]), -7, DAY)) + 0","isHidden":false},{"name":"Typical report opening interval","expression":"IF(ISBLANK(MAX(\u0027Report load times\u0027[loadTime]) ),     'This report has no performance measurements.',    IF(HASONEVALUE(\u0027Report load times\u0027[loadTime]),         'This report only has a single performance measurement. The load time was ' \u0026 MAX(\u0027Report load times\u0027[loadTime]) \u0026 ' seconds.',         IF([P-10] = [P-50] = [P-25],             'Across all measurements, this report loaded in  ' \u0026 MAX(\u0027Report load times\u0027[loadTime]) \u0026 ' seconds.',             'For most of the users your report opens within ' \u0026 INT([P-10 7d]) \u0026 ' and ' \u0026 INT([P-90 7d]) \u0026 ' seconds.' )))","isHidden":false},{"name":"Rank string","expression":"IF(HASONEVALUE(Reports[ReportGuid]), IF(ISBLANK(MAX(\u0027Report rank\u0027[ReportRank])), '', 'Rank ' \u0026 MAX(\u0027Report rank\u0027[ReportRank]) \u0026 ' across '\u0026 [Total Org Report Count] \u0026 ' reports in the organization'), '')","isHidden":false},{"name":"Performance trend","expression":"var numberOfDays = DATEDIFF(MIN(\u0027Report views\u0027[Date]), MAX(\u0027Report views\u0027[Date]),DAY) + 1var periodLength = INT(numberOfDays/2) - 1var firstPeriod = CALCULATE([P-50], DATESBETWEEN(\u0027Report load times\u0027[Date], MIN(\u0027Report load times\u0027[Date]), MIN(\u0027Report load times\u0027[Date]) + periodLength))var secondPeriod = CALCULATE([P-50], DATESBETWEEN(\u0027Report load times\u0027[Date], MAX(\u0027Report load times\u0027[Date]) - periodLength, MAX(\u0027Report load times\u0027[Date])))return DIVIDE(secondPeriod - firstPeriod, firstPeriod) + 0 * -1","isHidden":false},{"name":"Typical report opening time","expression":"[P-50] \u0026 ' sec'","isHidden":false},{"name":"Workspace report viewers","expression":"DISTINCTCOUNT(\u0027Workspace views\u0027[UserKey]) + 0","description":"Total number of unique viewers of all reports in the workspace","isHidden":false},{"name":"Workspace inactive reports","expression":"CALCULATE(DISTINCTCOUNT(\u0027Workspace reports\u0027[ReportGuid]), \u0027Workspace reports\u0027[Days with usage] = 0) + 0","isHidden":false},{"name":"Workspace views","expression":"SUM(\u0027Workspace views\u0027[Views]) + 0","isHidden":false},{"name":"Workspace active days per report","expression":"DISTINCTCOUNT(\u0027Report views\u0027[Date]) + 0","isHidden":false},{"name":"Workspace reports","expression":"DISTINCTCOUNT(\u0027Report views\u0027[ReportId])","isHidden":false},{"name":"Workspace active reports","expression":"DISTINCTCOUNT(\u0027Workspace views\u0027[ReportId]) + 0","description":"Number of reports with views in the last 30 days","isHidden":false},{"name":"Workspace report view %","expression":"DIVIDE([Workspace views], CALCULATE([Workspace views], ALL(\u0027Workspace views\u0027)))","isHidden":false},{"name":"Covered time display string","expression":"IF(ISBLANK(MAX(\u0027Report views\u0027[CreationTime])), 'No usage data', 'Report usage based on data from ' \u0026 DATE(  YEAR(MIN(\u0027Report views\u0027[CreationTime])),  MONTH(MIN(\u0027Report views\u0027[CreationTime])),  DAY(MIN(\u0027Report views\u0027[CreationTime]))) \u0026 ' to ' \u0026 DATE(  YEAR(MAX(\u0027Report views\u0027[CreationTime])),  MONTH(MAX(\u0027Report views\u0027[CreationTime])),  DAY(MAX(\u0027Report views\u0027[CreationTime]))))","isHidden":false},{"name":"Embedding for your organziation","expression":"CALCULATE([Report views], \u0027Report views\u0027[OriginalConsumptionMethod] = 'Embedding for your organization')","isHidden":false},{"name":"Embedding for your customers","expression":"CALCULATE([Report views], \u0027Report views\u0027[OriginalConsumptionMethod] = 'Embedding for your customers')","isHidden":false},{"name":"Simplified embedding","expression":"CALCULATE([Report views], \u0027Report views\u0027[OriginalConsumptionMethod] = 'Simplified embedding')","isHidden":false},{"name":"Workspace view trend","expression":"var startDate = CALCULATE(MIN(\u0027Dates\u0027[Date]), ALL(\u0027Dates\u0027))var endDate = CALCULATE(MAX(\u0027Dates\u0027[Date]), ALL(\u0027Dates\u0027))var numberOfDays = DATEDIFF(startDate, endDate, DAY) + 1var periodLength = INT(numberOfDays/2) - 1var middleDate1 =  CALCULATE(LASTDATE(DATESBETWEEN(\u0027Dates\u0027[Date], startDate, startDate + periodLength)) , ALL(\u0027Dates\u0027))var middleDate2 =  CALCULATE(FIRSTDATE(DATESBETWEEN(\u0027Report views\u0027[Date], endDate - periodLength, endDate)), ALL(\u0027Dates\u0027))var firstPeriod = CALCULATE([Report views], ALL(\u0027Dates\u0027), DATESBETWEEN(\u0027Report views\u0027[Date], startDate, middleDate1))var secondPeriod = CALCULATE([Report views], ALL(\u0027Dates\u0027), DATESBETWEEN(\u0027Report views\u0027[Date], middleDate2, endDate))//return startDate \u0026 '  ' \u0026 middleDate1 \u0026 ' ' \u0026 middleDate2 \u0026 '  ' \u0026 numberOfDays \u0026 ', ' \u0026 periodLength \u0026 ': ' \u0026 firstPeriod \u0026 '  ' \u0026 secondPeriodreturn DIVIDE(secondPeriod - firstPeriod, firstPeriod, 0)","isHidden":false},{"name":"Last refresh time display string","expression":"IF(ISBLANK(MAX(\u0027Refresh Stats\u0027[Last Refresh])), \\t'Usage data has not been imported yet. Check the refresh history and data source credentials in the Usage Metrics Report dataset settings.', \\tIF(DATEVALUE(MAX(\u0027Refresh Stats\u0027[Last Refresh])) \u003c DATE(2019,11,20),\\t'Usage data has not been imported yet. Check the refresh history and data source credentials in the Usage Metrics Report dataset settings.', \\tIF(DATEDIFF(MAX(\u0027Refresh Stats\u0027[Last Refresh]), TODAY(), day ) \u003e 4, \\t\\t'The usage data is outdated. Check the refresh history and data source credentials in the Usage Metrics Report dataset settings.', \\t\\t'Dataset last refreshed: ' \u0026 MAX(\u0027Refresh Stats\u0027[Last Refresh]) \u0026 ' (UTC)')))","isHidden":false},{"name":"Report title","expression":"'Usage Metrics' \u0026 IF(HASONEVALUE(Reports[ReportGuid]), ': ' \u0026 MAX(\u0027Reports\u0027[ReportName]), ' (Multiple reports selected)')","isHidden":false},{"name":"Report Id","expression":"IF(HASONEVALUE(Reports[ReportGuid]), MAX(\u0027Reports\u0027[ReportGuid]), IF(DISTINCTCOUNT(Reports[ReportGuid]) = 0, 'No reports selected', 'Multiple reports selected'))","isHidden":false},{"name":"Covered perf time display string","expression":"IF(ISBLANK(MAX(\u0027Report load times\u0027[Timestamp])), 'No open report performance data', 'Report performance based on data from ' \u0026 DATE(  YEAR(MIN(\u0027Report load times\u0027[Timestamp])),  MONTH(MIN(\u0027Report load times\u0027[Timestamp])),  DAY(MIN(\u0027Report load times\u0027[Timestamp]))) \u0026 ' to ' \u0026 DATE(  YEAR(MAX(\u0027Report load times\u0027[Timestamp])),  MONTH(MAX(\u0027Report load times\u0027[Timestamp])),  DAY(MAX(\u0027Report load times\u0027[Timestamp]))))","isHidden":false},{"name":"P-25 7d","expression":"CALCULATE([P-25], ALL(Dates), DATESINPERIOD(\u0027Report load times\u0027[Date], max(\u0027Report load times\u0027[Date]), -7, DAY)) + 0","isHidden":false},{"name":"P-90","expression":"PERCENTILE.INC(\u0027Report load times\u0027[loadTime], 0.9) + 0","isHidden":false},{"name":"P-75","expression":"PERCENTILE.INC(\u0027Report load times\u0027[loadTime], 0.75) + 0","isHidden":false},{"name":"P-75 7d","expression":"CALCULATE([P-75], ALL(Dates), DATESINPERIOD(\u0027Report load times\u0027[Date], max(\u0027Report load times\u0027[Date]), -7, DAY)) + 0","isHidden":false},{"name":"Total page views","expression":"COUNTROWS(\u0027Report page views\u0027)","isHidden":false},{"name":"Total page users","expression":"DISTINCTCOUNT(\u0027Report page views\u0027[UserKey])","isHidden":false},{"name":"Weekly Viewers","expression":"    var sop = CALCULATE(MIN(\u0027Dates\u0027[Date]), ALL(\u0027Dates\u0027), Dates[DoW] = 1)    var eop = CALCULATE(MAX(\u0027Dates\u0027[Date]), ALL(\u0027Dates\u0027), Dates[DoW] = 7)return    IF(AND(MIN(\u0027Dates\u0027[Date]) \u003e= sop, MAX(\u0027Dates\u0027[Date]) \u003c= eop),    CALCULATE(DISTINCTCOUNT(\u0027Report views\u0027[UserKey]), DATESBETWEEN(Dates[Date], Min(Dates[fDoW]), MAX(Dates[lDoW]))),    BLANK())","isHidden":false},{"name":"Weekly Views","expression":"    var sop = CALCULATE(MIN(\u0027Dates\u0027[Date]), ALL(\u0027Dates\u0027), Dates[DoW] = 1)    var eop = CALCULATE(MAX(\u0027Dates\u0027[Date]), ALL(\u0027Dates\u0027), Dates[DoW] = 7)return    IF(AND(MIN(\u0027Dates\u0027[Date]) \u003e= sop, MAX(\u0027Dates\u0027[Date]) \u003c= eop),    CALCULATE(COUNTROWS(\u0027Report views\u0027), DATESBETWEEN(Dates[Date], Min(Dates[fDoW]), MAX(Dates[lDoW]))),    BLANK())","isHidden":false},{"name":"P-10 trend","expression":"var numberOfDays = DATEDIFF(MIN(\u0027Report views\u0027[Date]), MAX(\u0027Report views\u0027[Date]),DAY) + 1var periodLength = INT(numberOfDays/2) - 1var firstPeriod = CALCULATE([P-10], DATESBETWEEN(\u0027Report load times\u0027[Date], MIN(\u0027Report load times\u0027[Date]), MIN(\u0027Report load times\u0027[Date]) + periodLength))var secondPeriod = CALCULATE([P-10], DATESBETWEEN(\u0027Report load times\u0027[Date], MAX(\u0027Report load times\u0027[Date]) - periodLength, MAX(\u0027Report load times\u0027[Date])))return DIVIDE(secondPeriod - firstPeriod, firstPeriod) + 0 * -1","isHidden":false},{"name":"P-25 trend","expression":"var numberOfDays = DATEDIFF(MIN(\u0027Report views\u0027[Date]), MAX(\u0027Report views\u0027[Date]),DAY) + 1var periodLength = INT(numberOfDays/2) - 1var firstPeriod = CALCULATE([P-25], DATESBETWEEN(\u0027Report load times\u0027[Date], MIN(\u0027Report load times\u0027[Date]), MIN(\u0027Report load times\u0027[Date]) + periodLength))var secondPeriod = CALCULATE([P-25], DATESBETWEEN(\u0027Report load times\u0027[Date], MAX(\u0027Report load times\u0027[Date]) - periodLength, MAX(\u0027Report load times\u0027[Date])))return DIVIDE(secondPeriod - firstPeriod, firstPeriod) + 0 * -1","isHidden":false},{"name":"P-75 trend","expression":"var numberOfDays = DATEDIFF(MIN(\u0027Report views\u0027[Date]), MAX(\u0027Report views\u0027[Date]),DAY) + 1var periodLength = INT(numberOfDays/2) - 1var firstPeriod = CALCULATE([P-75], DATESBETWEEN(\u0027Report load times\u0027[Date], MIN(\u0027Report load times\u0027[Date]), MIN(\u0027Report load times\u0027[Date]) + periodLength))var secondPeriod = CALCULATE([P-75], DATESBETWEEN(\u0027Report load times\u0027[Date], MAX(\u0027Report load times\u0027[Date]) - periodLength, MAX(\u0027Report load times\u0027[Date])))return DIVIDE(secondPeriod - firstPeriod, firstPeriod) + 0 * -1","isHidden":false},{"name":"P-90 trend","expression":"var numberOfDays = DATEDIFF(MIN(\u0027Report views\u0027[Date]), MAX(\u0027Report views\u0027[Date]),DAY) + 1var periodLength = INT(numberOfDays/2) - 1var firstPeriod = CALCULATE([P-90], DATESBETWEEN(\u0027Report load times\u0027[Date], MIN(\u0027Report load times\u0027[Date]), MIN(\u0027Report load times\u0027[Date]) + periodLength))var secondPeriod = CALCULATE([P-90], DATESBETWEEN(\u0027Report load times\u0027[Date], MAX(\u0027Report load times\u0027[Date]) - periodLength, MAX(\u0027Report load times\u0027[Date])))return DIVIDE(secondPeriod - firstPeriod, firstPeriod) + 0 * -1","isHidden":false},{"name":"Report view share","expression":"DIVIDE(COUNTROWS(\u0027Report views\u0027), CALCULATE(COUNTROWS(\u0027Report views\u0027), ALL(\u0027Report views\u0027)), 0)","isHidden":false},{"name":"Workspace report days with usage","expression":"SUM(\u0027Workspace reports\u0027[Days with usage]) + 0","isHidden":false},{"name":"Workspace viewed reports","expression":"DISTINCTCOUNT(\u0027Workspace views\u0027[ReportId]) + 0","isHidden":false},{"name":"Page views","expression":"COUNTROWS(\u0027Report page views\u0027) + 0","isHidden":false}],"source":[{"expression":"let    Source = Table.FromList({}),    AddWorkspaceId = Table.AddColumn(Source, 'WorkspaceId', each WorkspaceId),    AddBaseUrl = Table.AddColumn(AddWorkspaceId, 'BaseUrl', each BaseUrl),    #'Removed Columns' = Table.RemoveColumns(AddBaseUrl,{'WorkspaceId', 'BaseUrl'})in    #'Removed Columns'"}]},{"name":"Report rank","isHidden":false,"columns":[{"name":"ReportId","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"WorkspaceId","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"ReportViewCount","dataType":"Int64","isHidden":true,"columnType":"Data"},{"name":"ReportRank","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"TotalReportCount","dataType":"Int64","isHidden":true,"columnType":"Data"},{"name":"TenantId","dataType":"String","isHidden":true,"columnType":"Data"}],"measures":[{"name":"Total Org Report Count","expression":"IF(COUNTROWS(\u0027Report rank\u0027) = 0, 0, FIRSTNONBLANK(\u0027Report rank\u0027[TotalReportCount], 0))","isHidden":false}],"source":[{"expression":"let    Source = UsageMetricsDataConnector.GetMetricsData(BaseUrl \u0026 '/metadata/v201906/metrics/workspace/' \u0026 WorkspaceId \u0026 '/reportrank'),    metricsTable = Table.FromRecords(Source),    checkForEmptyTable = if Table.IsEmpty(metricsTable) then                            Table.FromRows                            (                                {                                },                                {                                    'ReportId', 'WorkspaceId', 'ReportViewCount', 'ReportRank', 'TotalReportCount', 'TenantId'                                }                            )                         else                            metricsTable,    finalTable = Table.TransformColumnTypes(checkForEmptyTable,{{'ReportRank', Int64.Type}, {'TotalReportCount', Int64.Type}, {'ReportViewCount', Int64.Type}})in    finalTable"}]},{"name":"Report page views","isHidden":false,"columns":[{"name":"AppName","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"UserId","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"ReportId","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Date","dataType":"String","isHidden":false,"expression":"DATE(YEAR(\u0027Report page views\u0027[Timestamp]), MONTH(\u0027Report page views\u0027[Timestamp]), DAY(\u0027Report page views\u0027[Timestamp]))","columnType":"Calculated"},{"name":"Timestamp","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"AppGuid","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Client","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DeviceBrowserVersion","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DeviceOSVersion","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"WorkspaceId","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"OriginalWorkspaceId","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"OriginalReportId","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SectionId","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TenantId","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SessionSource","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"UserKey","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = UsageMetricsDataConnector.GetMetricsData(BaseUrl \u0026 '/metadata/v201906/metrics/workspace/' \u0026 WorkspaceId \u0026 '/reportpagesectionviews'),    #'metricsTable' = Table.FromRecords(Source),    checkForEmptyTable = if Table.IsEmpty(#'metricsTable') then                            Table.FromRows                            (                                {                                },                                {                                    'Timestamp', 'PbiCluster', 'AppName', 'TenantId', 'UserId', 'ReportId', 'OriginalReportId', 'GroupId', 'OriginalGroupId', 'AppGuid', 'SectionId', 'Client', 'SessionSource', 'DeviceOSVersion', 'DeviceBrowserVersion', 'UserKey'                                }                            )                         else                            #'metricsTable',    #'Removed Columns' = Table.RemoveColumns(checkForEmptyTable,{'PbiCluster'}),    finalTable = Table.TransformColumnTypes(#'Removed Columns', {{'Timestamp', type datetime}}),    #'Renamed Columns' = Table.RenameColumns(finalTable,{{'GroupId', 'WorkspaceId'}, {'OriginalGroupId', 'OriginalWorkspaceId'}})in    #'Renamed Columns'"}]},{"name":"Report load times","isHidden":false,"columns":[{"name":"Timestamp","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"PbiCluster","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"AppName","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TenantId","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"UserId","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ReportId","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"GroupId","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Client","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"StartTime","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"EndTime","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"DeviceOSVersion","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LocationCity","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Country","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"loadTime","dataType":"String","isHidden":false,"expression":"DATEDIFF(\u0027Report load times\u0027[StartTime], \u0027Report load times\u0027[EndTime], SECOND)","columnType":"Calculated"},{"name":"Date","dataType":"String","isHidden":false,"expression":"DATE(YEAR(\u0027Report load times\u0027[Timestamp]), MONTH(\u0027Report load times\u0027[Timestamp]), DAY(\u0027Report load times\u0027[Timestamp]))","columnType":"Calculated"},{"name":"OriginalReportId","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"OriginalGroupId","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DeviceBrowserVersion","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Browser","dataType":"String","isHidden":false,"expression":"SWITCH(TRUE(),        LEFT(\u0027Report load times\u0027[DeviceBrowserVersion], 4) = 'Edge', 'Edge Classic',        LEFT(\u0027Report load times\u0027[DeviceBrowserVersion], 3) = 'Edg', 'Edge Chromium',        LEFT(\u0027Report load times\u0027[DeviceBrowserVersion], 21) = 'Chrome Mobile Webview', 'Chrome Mobile Webview',        LEFT(\u0027Report load times\u0027[DeviceBrowserVersion], 13) = 'Chrome Mobile', 'Chrome Mobile',        LEFT(\u0027Report load times\u0027[DeviceBrowserVersion], 6) = 'Chrome', 'Chrome',        LEFT(\u0027Report load times\u0027[DeviceBrowserVersion], 7) = 'Firefox', 'Firefox',        LEFT(\u0027Report load times\u0027[DeviceBrowserVersion], 17) = 'Internet Explorer', 'Internet Explorer',        LEFT(\u0027Report load times\u0027[DeviceBrowserVersion], 13) = 'Mobile Safari', 'Mobile Safari',        LEFT(\u0027Report load times\u0027[DeviceBrowserVersion], 3) = 'Safari', 'Safari',        LEFT(\u0027Report load times\u0027[DeviceBrowserVersion], 8) = 'Electron', 'Electron',        LEFT(\u0027Report load times\u0027[DeviceBrowserVersion], 16) = 'Samsung Internet', 'Samsung Internet',        'other')","columnType":"Calculated"},{"name":"AppGuid","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SessionSource","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let     Source = UsageMetricsDataConnector.GetMetricsData(BaseUrl \u0026 '/metadata/v201906/metrics/workspace/' \u0026 WorkspaceId \u0026 '/reportloads'),    metricsTable = Table.FromRecords(Source),    checkForEmptyTable = if Table.IsEmpty(metricsTable) then                            Table.FromRows                            (                                {                                },                                {                                    'AppGuid','AppName','Client','DeviceBrowserVersion','DeviceOSVersion','EndTime','GroupId','LocationCity','LocationCountry','OriginalGroupId','OriginalReportId','PbiCluster','ReportId','StartTime','TenantId','Timestamp','UserId','SessionSource'                                }                            )                         else                            metricsTable,    finalTable = Table.TransformColumnTypes(checkForEmptyTable, {{'Timestamp', type datetimezone}, {'StartTime', type datetimezone}, {'EndTime', type datetimezone}}),    #'Renamed Columns' = Table.RenameColumns(finalTable,{{'LocationCountry', 'Country'}})in    #'Renamed Columns'"}]},{"name":"Report pages","isHidden":false,"columns":[{"name":"ReportId","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SectionId","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SectionName","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"WorkspaceId","dataType":"String","isHidden":true,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = UsageMetricsDataConnector.GetMetricsData(BaseUrl \u0026 '/metadata/v201906/metrics/workspace/' \u0026 WorkspaceId \u0026 '/reportpagesectionmetadata'),    #'metricsTable' = Table.FromRecords(Source),    checkForEmptyTable = if Table.IsEmpty(#'metricsTable') then                            Table.FromRows                            (                                {                                },                                {                                    'ReportId', 'SectionId', 'SectionName', 'WorkspaceId'                                }                            )                         else                            #'metricsTable',    #'Filtered Rows1' = Table.SelectRows(checkForEmptyTable, each ([SectionId] \u003c\u003e null)),    #'Filtered Rows' = Table.SelectRows(#'Filtered Rows1', each ([ReportId] \u003c\u003e null))in    #'Filtered Rows'"}]},{"name":"Reports","isHidden":false,"columns":[{"name":"OrganizationId","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"ReportGuid","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ReportName","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"WorkspaceId","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"IsUsageMetricsReport","dataType":"Boolean","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = UsageMetricsDataConnector.GetMetricsData(BaseUrl \u0026 '/metadata/v201906/metrics/workspace/' \u0026 WorkspaceId \u0026 '/reportmetadata'),    #'metricsTable' = Table.FromRecords(Source),    checkForEmptyTable = if Table.IsEmpty(metricsTable) then                            Table.FromRows                            (                                {                                },                                {                                    'OrganizationId', 'ReportId', 'ReportName', 'WorkspaceId', 'IsUsageMetricsReport'                                }                            )                         else                            metricsTable,    #'Filtered Rows' = Table.SelectRows(checkForEmptyTable, each [ReportId] \u003c\u003e null and [ReportId] \u003c\u003e ''),    #'Renamed Columns' = Table.RenameColumns(#'Filtered Rows',{{'ReportId', 'ReportGuid'}}),    #'Changed Type' = Table.TransformColumnTypes(#'Renamed Columns',{{'IsUsageMetricsReport', type logical}})in    #'Changed Type'"}]},{"name":"Refresh Stats","isHidden":true,"columns":[{"name":"Last Refresh","dataType":"String","isHidden":true,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = DateTime.LocalNow() // DateTime.LocalNow(),    #'Converted to Table' = #table(1, {{Source}}),    #'Renamed Columns' = Table.RenameColumns(#'Converted to Table',{{'Column1', 'Last Refresh'}})in    #'Renamed Columns'"}]},{"name":"Dates","isHidden":false,"columns":[{"name":"Date","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"DoW","dataType":"String","isHidden":false,"expression":"WEEKDAY(\u0027Dates\u0027[Date])","columnType":"Calculated"},{"name":"fDoW","dataType":"String","isHidden":false,"expression":"\u0027Dates\u0027[Date] - \u0027Dates\u0027[DoW] + 1","columnType":"Calculated"},{"name":"lDoW","dataType":"String","isHidden":false,"expression":"\u0027Dates\u0027[fDoW] + 6","columnType":"Calculated"}],"measures":[],"source":[{"expression":"    var startDate = TODAY() - 31    var lastRefreshDate = DATEVALUE(MAX(\u0027Refresh Stats\u0027[Last Refresh]))return    CALENDAR(startDate, IF(OR(ISBLANK(lastRefreshDate), lastRefreshDate \u003c= startDate), TODAY(), lastRefreshDate))"}]},{"name":"Workspace views","isHidden":false,"columns":[{"name":"ReportId","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"UserId","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"DistributionMethod","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"ConsumptionMethod","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"Views","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"UserKey","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"UniqueUser","dataType":"String","isHidden":false,"expression":"IF(\u0027Workspace views\u0027[UserId] = 'Unnamed User', 'Unnamed User ' \u0026 \u0027Workspace views\u0027[UserKey], \u0027Workspace views\u0027[UserId])","columnType":"Calculated"}],"measures":[],"source":[{"expression":"SUMMARIZE(\u0027Report views\u0027, \u0027Report views\u0027[ReportId], \u0027Report views\u0027[UserKey], \u0027Report views\u0027[UserId], \u0027Report views\u0027[DistributionMethod], \u0027Report views\u0027[ConsumptionMethod], 'Views', [Report views])"}]},{"name":"Workspace reports","isHidden":false,"columns":[{"name":"ReportGuid","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"trend","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"Days with usage","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"ReportName","dataType":"String","isHidden":false,"expression":"LOOKUPVALUE(Reports[ReportName], Reports[ReportGuid], \u0027Workspace reports\u0027[ReportGuid])","columnType":"Calculated"},{"name":"IsUsageMetricsReportWS","dataType":"String","isHidden":false,"expression":"LOOKUPVALUE(Reports[IsUsageMetricsReport], Reports[ReportGuid], \u0027Workspace reports\u0027[ReportGuid])","columnType":"Calculated"}],"measures":[{"name":"IsSelectedReport","expression":"IF(SELECTEDVALUE(\u0027Workspace reports\u0027[ReportGuid]) = SELECTEDVALUE(Reports[ReportGuid]), 1, 0)","isHidden":false}],"source":[{"expression":"ADDCOLUMNS(DISTINCT(Reports[ReportGuid]),                             'trend', [Workspace view trend],                             'active days', [Workspace active days per report])"}]},{"name":"Users","isHidden":false,"columns":[{"name":"UserId","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"UserKey","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"UserGuid","dataType":"String","isHidden":true,"expression":"LOOKUPVALUE(Users_ReportPageView[UserId], Users_ReportPageView[UserKey], Users[UserKey], Users[UserID])","columnType":"Calculated"},{"name":"UniqueUser","dataType":"String","isHidden":false,"expression":"IF(Users[UserId] = 'Unnamed User', 'Unnamed User ' \u0026 Users[UserKey], Users[UserId])","columnType":"Calculated"}],"measures":[],"source":[{"expression":"SUMMARIZE(\u0027Report views\u0027, \u0027Report views\u0027[UserId], \u0027Report views\u0027[UserKey])"}]},{"name":"Users_ReportPageView","isHidden":true,"columns":[{"name":"UserId","dataType":"String","isHidden":true,"columnType":"CalculatedTableColumn"},{"name":"UserKey","dataType":"String","isHidden":true,"columnType":"CalculatedTableColumn"}],"measures":[],"source":[{"expression":"SUMMARIZE(\u0027Report page views\u0027, \u0027Report page views\u0027[UserId], \u0027Report page views\u0027[UserKey])"}]}],"expressions":[{"name":"WorkspaceId","expression":"'4ed85d6e-e750-4d01-892f-78fc79993e0c' meta [IsParameterQuery=true, Type='Text', IsParameterQueryRequired=false]"},{"name":"BaseUrl","expression":"'https://WABI-US-WEST2-redirect.analysis.windows.net' meta [IsParameterQuery=true, Type='Text', IsParameterQueryRequired=true]"}],"configuredBy":"david.bowman@thrivent.com","configuredById":"ffed1576-b128-448d-927e-1d187d9d95ce","isEffectiveIdentityRequired":false,"isEffectiveIdentityRolesRequired":false,"targetStorageMode":"Abf","createdDate":"2020-04-14T18:33:46.027","contentProviderType":"PbixInImportMode","schemaMayNotBeUpToDate":true},{"id":"9eb9b908-923c-4b40-a72a-c1956845be0f","name":"Capacity Dashboard","tables":[{"name":"RFO-Mkt-Wk","isHidden":false,"description":"This is the Master List of RFO\u0027s, Markets, Years, and Weeks.","storageMode":"Import","columns":[{"name":"JOIN VALUE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_Mkt","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Year","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Week","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Region","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Division","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Current Wk","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"MVP Filter","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market Filter","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Advisor Group","dataType":"String","isHidden":false,"expression":"RELATED(\u0027RFO_NM\u0027[NM])","columnType":"Calculated"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//SHARED//Public//DI and BI//Capacity Dashboard//RFO-MKT-WK.xlsx'), null, true),    Sheet1_Sheet = Source{[Item='Sheet1',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'JOIN VALUE', type text}, {'RFO_ID', Int64.Type}, {'ZONE_ID', type text}, {'RFO_Mkt', type text}, {'Year', Int64.Type}, {'Week', Int64.Type}}),    #'Renamed Columns' = Table.RenameColumns(#'Changed Type',{{'ZONE_ID', 'Market'}}),    #'Changed Type1' = Table.TransformColumnTypes(#'Renamed Columns',{{'RFO_ID', type text}, {'Market', type text}, {'Year', type text}, {'Week', Int64.Type}, {'Current Wk', Int64.Type}}),    #'Renamed Columns1' = Table.RenameColumns(#'Changed Type1',{{'RFO_ID', 'RFO'}})in    #'Renamed Columns1'"}]},{"name":"FP Capacity","isHidden":false,"description":"This is the weekly headcount of FPs.","storageMode":"Import","columns":[{"name":"JOIN VALUE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_Mkt","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Year","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Week","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"FP Capacity","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"NFR Capacity","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Vet Capacity","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Current Wk","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Curr Cap","expression":"VAR current_year = MAX(\u0027FP Capacity\u0027[Year])RETURNCALCULATE(SUM(\u0027FP Capacity\u0027[FP Capacity]),FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]=\u0027RFO-Mkt-Wk\u0027[Current Wk]),FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Year]=current_year))","isHidden":false},{"name":"PYTD Cap","expression":"VAR previous_year = MAX(\u0027FP Capacity\u0027[Year])-1RETURNCALCULATE(SUM(\u0027FP Capacity\u0027[FP Capacity]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]=\u0027RFO-Mkt-Wk\u0027[Current Wk]),    FILTER(\u0027RFO-Mkt-Wk\u0027,VALUE(\u0027RFO-Mkt-Wk\u0027[Year])=previous_year))","isHidden":false},{"name":"PYE Cap","expression":"VAR previous_year = MAX(\u0027CP+\u0027[Year])-1RETURNCALCULATE(SUM(\u0027FP Capacity\u0027[FP Capacity]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]=52),    FILTER(\u0027RFO-Mkt-Wk\u0027,VALUE(\u0027RFO-Mkt-Wk\u0027[Year])=previous_year))","isHidden":false},{"name":"PYTD Var","expression":"CALCULATE((\u0027FP Capacity\u0027[Curr Cap]-\u0027FP Capacity\u0027[PYTD Cap])/\u0027FP Capacity\u0027[PYTD Cap])","isHidden":false},{"name":"PYE Var","expression":"CALCULATE((\u0027FP Capacity\u0027[Curr Cap]-\u0027FP Capacity\u0027[PYE Cap])/\u0027FP Capacity\u0027[PYE Cap])","isHidden":false},{"name":"Curr NFP Cap","expression":"VAR current_year = MAX(\u0027FP Capacity\u0027[Year])RETURNCALCULATE(SUM(\u0027FP Capacity\u0027[NFR Capacity]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]=\u0027RFO-Mkt-Wk\u0027[Current Wk]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Year]=current_year))","isHidden":false},{"name":"PYTD NFR Cap","expression":"var previous_year = MAX(\u0027FP Capacity\u0027[Year])-1RETURNCALCULATE(SUM(\u0027FP Capacity\u0027[NFR Capacity]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]=\u0027RFO-Mkt-Wk\u0027[Current Wk]),    FILTER(\u0027RFO-Mkt-Wk\u0027,VALUE(\u0027RFO-Mkt-Wk\u0027[Year])=previous_year))","isHidden":false},{"name":"PYTD NFR Var","expression":"CALCULATE((\u0027FP Capacity\u0027[Curr NFP Cap]-\u0027FP Capacity\u0027[PYTD NFR Cap])/\u0027FP Capacity\u0027[PYTD NFR Cap])","isHidden":false},{"name":"PYE NFR Cap","expression":"var previous_year=MAX(\u0027FP Capacity\u0027[Year])-1RETURNCALCULATE(SUM(\u0027FP Capacity\u0027[NFR Capacity]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]=52),    FILTER(\u0027RFO-Mkt-Wk\u0027,VALUE(\u0027RFO-Mkt-Wk\u0027[Year])=previous_year))","isHidden":false},{"name":"PYE NFR Var","expression":"CALCULATE((\u0027FP Capacity\u0027[Curr NFP Cap]-\u0027FP Capacity\u0027[PYE NFR Cap])/\u0027FP Capacity\u0027[PYE NFR Cap])","isHidden":false},{"name":"Curr Vet Cap","expression":"var current_year=MAX(\u0027FP Capacity\u0027[Year])RETURNCALCULATE(SUM(\u0027FP Capacity\u0027[Vet Capacity]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]=\u0027RFO-Mkt-Wk\u0027[Current Wk]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Year]=current_year))","isHidden":false},{"name":"PYTD Vet Cap","expression":"var previous_year=MAX(\u0027FP Capacity\u0027[Year])-1RETURNCALCULATE(SUM(\u0027FP Capacity\u0027[Vet Capacity]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]=\u0027RFO-Mkt-Wk\u0027[Current Wk]),    FILTER(\u0027RFO-Mkt-Wk\u0027,VALUE(\u0027RFO-Mkt-Wk\u0027[Year])=previous_year))","isHidden":false},{"name":"PYE Vet Cap","expression":"var previous_year=MAX(\u0027FP Capacity\u0027[Year])-1RETURNCALCULATE(SUM(\u0027FP Capacity\u0027[Vet Capacity]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]=52),    FILTER(\u0027RFO-Mkt-Wk\u0027,VALUE(\u0027RFO-Mkt-Wk\u0027[Year])=previous_year))","isHidden":false},{"name":"PYTD Vet Cap Var","expression":"CALCULATE((\u0027FP Capacity\u0027[Curr Vet Cap]-\u0027FP Capacity\u0027[PYTD Vet Cap])/\u0027FP Capacity\u0027[PYTD Vet Cap])","isHidden":false},{"name":"PYE Vet Cap Var","expression":"CALCULATE((\u0027FP Capacity\u0027[Curr Vet Cap]-\u0027FP Capacity\u0027[PYE Vet Cap])/\u0027FP Capacity\u0027[PYE Vet Cap])","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//SHARED//Public//DI and BI//Capacity Dashboard//Capacity Dashboard-FP_Capacity.xlsx'), null, true),    Sheet1_Sheet = Source{[Item='Sheet1',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'JOIN VALUE', type text}, {'RFO_ID', Int64.Type}, {'ZONE_ID', type text}, {'RFO_Mkt', type text}, {'Type', type text}, {'Year', Int64.Type}, {'Week', Int64.Type}, {'Count', Int64.Type}, {'Column9', type any}}),    #'Removed Columns' = Table.RemoveColumns(#'Changed Type',{'Column9'}),    #'Renamed Columns' = Table.RenameColumns(#'Removed Columns',{{'Count', 'FP Capacity'}}),    #'Changed Type1' = Table.TransformColumnTypes(#'Renamed Columns',{{'RFO_ID', type text}, {'ZONE_ID', type text}, {'Year', type text}, {'Week', Int64.Type}}),    #'Renamed Columns1' = Table.RenameColumns(#'Changed Type1',{{'ZONE_ID', 'Market'}}),    #'Reordered Columns' = Table.ReorderColumns(#'Renamed Columns1',{'JOIN VALUE', 'RFO_ID', 'Market', 'RFO_Mkt', 'Type', 'Year', 'Week', 'FP Capacity'}),    #'Added Conditional Column' = Table.AddColumn(#'Reordered Columns', 'NFR Capacity', each if [Type] = 'NFR' then [FP Capacity] else 0),    #'Added Conditional Column1' = Table.AddColumn(#'Added Conditional Column', 'VET Capacity', each if [Type] = 'VET' then [FP Capacity] else 0),    #'Changed Type2' = Table.TransformColumnTypes(#'Added Conditional Column1',{{'VET Capacity', Int64.Type}, {'NFR Capacity', Int64.Type}}),    #'Added Conditional Column2' = Table.AddColumn(#'Changed Type2', 'NFR Cap', each if [Type] = 'NFR' then [FP Capacity] else ''''''),    #'Added Conditional Column3' = Table.AddColumn(#'Added Conditional Column2', 'Custom', each if [Type] = 'VET' then [FP Capacity] else ''''''),    #'Removed Columns1' = Table.RemoveColumns(#'Added Conditional Column3',{'VET Capacity', 'NFR Capacity'}),    #'Renamed Columns2' = Table.RenameColumns(#'Removed Columns1',{{'NFR Cap', 'NFR Capacity'}, {'Custom', 'Vet Capacity'}}),    #'Changed Type3' = Table.TransformColumnTypes(#'Renamed Columns2',{{'NFR Capacity', Int64.Type}, {'Vet Capacity', Int64.Type}}),    #'Removed Columns2' = Table.RemoveColumns(#'Changed Type3',{'Vet Capacity', 'NFR Capacity'}),    #'Added Conditional Column4' = Table.AddColumn(#'Removed Columns2', 'Vet Capacity', each if [Type] = 'VET' then [FP Capacity] else null),    #'Changed Type4' = Table.TransformColumnTypes(#'Added Conditional Column4',{{'Vet Capacity', Int64.Type}}),    #'Added Conditional Column5' = Table.AddColumn(#'Changed Type4', 'NFR Capacity', each if [Type] = 'NFR' then [FP Capacity] else null),    #'Changed Type5' = Table.TransformColumnTypes(#'Added Conditional Column5',{{'NFR Capacity', Int64.Type}}),    #'Reordered Columns1' = Table.ReorderColumns(#'Changed Type5',{'JOIN VALUE', 'RFO_ID', 'Market', 'RFO_Mkt', 'Type', 'Year', 'Week', 'FP Capacity', 'NFR Capacity', 'Vet Capacity'}),    #'Changed Type6' = Table.TransformColumnTypes(#'Reordered Columns1',{{'Current Wk', Int64.Type}}),    #'Renamed Columns3' = Table.RenameColumns(#'Changed Type6',{{'RFO_ID', 'RFO'}})in    #'Renamed Columns3'"}]},{"name":"FP Contracts","isHidden":false,"description":" This a weekly, cumulative count of new FP contracts each year.","storageMode":"Import","columns":[{"name":"JOIN VALUE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_Mkt","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Year","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Week","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"FP Contracts","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Current Wk","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[{"name":"YTD FA Contracts","expression":"VAR current_year = MAX(\u0027FP Contracts\u0027[Year])RETURNCALCULATE(SUM(\u0027FP Contracts\u0027[FP Contracts]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]=\u0027RFO-Mkt-Wk\u0027[Current Wk]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Year]=current_year))","isHidden":false},{"name":"PYTD FA Contracts","expression":"VAR previous_year = MAX(\u0027FP Contracts\u0027[Year])-1RETURNCALCULATE(SUM(\u0027FP Contracts\u0027[FP Contracts]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]=\u0027RFO-Mkt-Wk\u0027[Current Wk]),    FILTER(\u0027RFO-Mkt-Wk\u0027,VALUE(\u0027RFO-Mkt-Wk\u0027[Year])=previous_year))","isHidden":false},{"name":"PYTD FA Contracts Var","expression":"CALCULATE((\u0027FP Contracts\u0027[YTD FA Contracts]-\u0027FP Contracts\u0027[PYTD FA Contracts])/\u0027FP Contracts\u0027[PYTD FA Contracts])","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//SHARED//Public//DI and BI//Capacity Dashboard//Capacity Dashboard-FP_Contracts.xlsx'), null, true),    Sheet1_Sheet = Source{[Item='Sheet1',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'JOIN VALUE', type text}, {'RFO_ID', type text}, {'ZONE_ID', type text}, {'RFO_Mkt', type text}, {'Type', type text}, {'Year', type text}, {'Week', Int64.Type}, {'Count', Int64.Type}}),    #'Renamed Columns' = Table.RenameColumns(#'Changed Type',{{'ZONE_ID', 'Market'}, {'Count', 'FP Contracts'}}),    #'Changed Type1' = Table.TransformColumnTypes(#'Renamed Columns',{{'Current Wk', Int64.Type}}),    #'Renamed Columns1' = Table.RenameColumns(#'Changed Type1',{{'RFO_ID', 'RFO'}})in    #'Renamed Columns1'"}]},{"name":"FP Terminations","isHidden":false,"description":"This is a weekly, cumulative list of FP terminations each year.","storageMode":"Import","columns":[{"name":"JOIN VALUE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_Mkt","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Year","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Week","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"FP Terminations","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Current Wk","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[{"name":"YTD FA Terminations","expression":"VAR current_year = MAX(\u0027FP Terminations\u0027[Year])RETURNCALCULATE(SUM(\u0027FP Terminations\u0027[FP Terminations]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]=\u0027RFO-Mkt-Wk\u0027[Current Wk]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Year]=current_year))","isHidden":false},{"name":"PYTD FA Terminations","expression":"VAR previous_year = MAX(\u0027FP Terminations\u0027[Year])-1RETURNCALCULATE(SUM(\u0027FP Terminations\u0027[FP Terminations]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]=\u0027RFO-Mkt-Wk\u0027[Current Wk]),    FILTER(\u0027RFO-Mkt-Wk\u0027,VALUE(\u0027RFO-Mkt-Wk\u0027[Year])=previous_year))","isHidden":false},{"name":"PYTD FA Terminations Var","expression":"CALCULATE((\u0027FP Terminations\u0027[YTD FA Terminations]-\u0027FP Terminations\u0027[PYTD FA Terminations])/\u0027FP Terminations\u0027[PYTD FA Terminations])","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//SHARED//Public//DI and BI//Capacity Dashboard//Capacity Dashboard-FP_Terminations.xlsx'), null, true),    Sheet1_Sheet = Source{[Item='Sheet1',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'JOIN VALUE', type text}, {'RFO_ID', type text}, {'ZONE_ID', type text}, {'RFO_Mkt', type text}, {'Type', type text}, {'Year', type text}, {'Week', Int64.Type}, {'Count', Int64.Type}}),    #'Renamed Columns' = Table.RenameColumns(#'Changed Type',{{'ZONE_ID', 'Market'}, {'Count', 'FP Terminations'}}),    #'Changed Type1' = Table.TransformColumnTypes(#'Renamed Columns',{{'Current Wk', Int64.Type}}),    #'Renamed Columns1' = Table.RenameColumns(#'Changed Type1',{{'RFO_ID', 'RFO'}})in    #'Renamed Columns1'"}]},{"name":"RR Capacity","isHidden":false,"description":"This is a weekly headcount of Red Role capacity.","storageMode":"Import","columns":[{"name":"JOIN VALUE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_Mkt","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Year","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Week","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Red Role Capacity","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Current Wk","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Curr Red Role Cap","expression":"var current_year=MAX(\u0027RR Capacity\u0027[Year])RETURNCALCULATE(SUM(\u0027RR Capacity\u0027[Red Role Capacity]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]=\u0027RFO-Mkt-Wk\u0027[Current Wk]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Year]=current_year))","isHidden":false},{"name":"PYTD Red Role Cap","expression":"var previous_year=MAX(\u0027RR Capacity\u0027[Year])-1RETURNCALCULATE(SUM(\u0027RR Capacity\u0027[Red Role Capacity]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]=\u0027RFO-Mkt-Wk\u0027[Current Wk]),    FILTER(\u0027RFO-Mkt-Wk\u0027,VALUE(\u0027RFO-Mkt-Wk\u0027[Year])=previous_year))","isHidden":false},{"name":"PYTD Red Role Var","expression":"CALCULATE((\u0027RR Capacity\u0027[Curr Red Role Cap]-\u0027RR Capacity\u0027[PYTD Red Role Cap])/\u0027RR Capacity\u0027[PYTD Red Role Cap])","isHidden":false},{"name":"PYE Red Role Cap","expression":"VAR previous_year = MAX(\u0027CP+\u0027[Year])-1RETURNCALCULATE(SUM(\u0027RR Capacity\u0027[Red Role Capacity]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]=52),    FILTER(\u0027RFO-Mkt-Wk\u0027,VALUE(\u0027RFO-Mkt-Wk\u0027[Year])=previous_year))","isHidden":false},{"name":"PYE Red Role Var","expression":"CALCULATE((\u0027RR Capacity\u0027[Curr Red Role Cap]-\u0027RR Capacity\u0027[PYE Red Role Cap])/\u0027RR Capacity\u0027[PYE Red Role Cap])","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//SHARED//Public//DI and BI//Capacity Dashboard//Capacity Dashboard-RR_Capacity.xlsx'), null, true),    Sheet1_Sheet = Source{[Item='Sheet1',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'JOIN VALUE', type text}, {'RFO_ID', type text}, {'ZONE_ID', type text}, {'RFO_Mkt', type text}, {'Type', type text}, {'Year', type text}, {'Week', Int64.Type}, {'Count', Int64.Type}}),    #'Renamed Columns' = Table.RenameColumns(#'Changed Type',{{'ZONE_ID', 'Market'}, {'Count', 'Red Role Capacity'}}),    #'Changed Type1' = Table.TransformColumnTypes(#'Renamed Columns',{{'Current Wk', Int64.Type}}),    #'Renamed Columns1' = Table.RenameColumns(#'Changed Type1',{{'RFO_ID', 'RFO'}})in    #'Renamed Columns1'"}]},{"name":"Licensing","isHidden":false,"description":"This is a weekly headcount of candidates in Licensing (by RFO).","storageMode":"Import","columns":[{"name":"JOIN VALUE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_Mkt","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Year","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Week","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Licensing Count","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Current Wk","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Curr Licensing","expression":"var current_year = MAX(Licensing[Year])RETURN CALCULATE(SUM(Licensing[Licensing Count]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]=\u0027RFO-Mkt-Wk\u0027[Current Wk]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Year]=current_year))","isHidden":false},{"name":"PYTD Licensing","expression":"var previous_year = MAX(Licensing[Year])-1RETURNCALCULATE(SUM(Licensing[Licensing Count]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]=\u0027RFO-Mkt-Wk\u0027[Current Wk]),    FILTER(\u0027RFO-Mkt-Wk\u0027,VALUE(\u0027RFO-Mkt-Wk\u0027[Year])=previous_year))","isHidden":false},{"name":"PYTD Licensing Var","expression":"CALCULATE((Licensing[Curr Licensing]-Licensing[PYTD Licensing])/Licensing[PYTD Licensing])","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//SHARED//Public//DI and BI//Capacity Dashboard//Capacity Dashboard-Licensing.xlsx'), null, true),    Sheet1_Sheet = Source{[Item='Sheet1',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'JOIN VALUE', type text}, {'RFO_ID', type text}, {'ZONE_ID', type text}, {'RFO_Mkt', type text}, {'Type', type text}, {'Year', type text}, {'Week', Int64.Type}, {'Count', Int64.Type}}),    #'Renamed Columns' = Table.RenameColumns(#'Changed Type',{{'ZONE_ID', 'Market'}, {'Count', 'Licensing Count'}}),    #'Changed Type1' = Table.TransformColumnTypes(#'Renamed Columns',{{'Current Wk', Int64.Type}}),    #'Renamed Columns1' = Table.RenameColumns(#'Changed Type1',{{'RFO_ID', 'RFO'}})in    #'Renamed Columns1'"}]},{"name":"Selection","isHidden":false,"description":"This is a weekly headcount of candidates in Selection (by RFO).","storageMode":"Import","columns":[{"name":"JOIN VALUE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_Mkt","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Year","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Week","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Selection Count","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Current Wk","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Curr Selection","expression":"var current_year = MAX(Selection[Year])RETURNCALCULATE(SUM(Selection[Selection Count]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]=\u0027RFO-Mkt-Wk\u0027[Current Wk]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Year]=current_year))","isHidden":false},{"name":"PYTD Selection","expression":"var previous_year = MAX(Selection[Year])-1RETURN CALCULATE(SUM(Selection[Selection Count]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]=\u0027RFO-Mkt-Wk\u0027[Current Wk]),    FILTER(\u0027RFO-Mkt-Wk\u0027,VALUE(\u0027RFO-Mkt-Wk\u0027[Year])=previous_year))","isHidden":false},{"name":"PYTD Selection Var","expression":"CALCULATE((Selection[Curr Selection]-Selection[PYTD Selection])/Selection[PYTD Selection])","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//SHARED//Public//DI and BI//Capacity Dashboard//Capacity Dashboard-Selection.xlsx'), null, true),    Sheet1_Sheet = Source{[Item='Sheet1',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'JOIN VALUE', type text}, {'RFO_ID', type text}, {'ZONE_ID', type text}, {'RFO_Mkt', type text}, {'Type', type text}, {'Year', type text}, {'Week', Int64.Type}, {'Count', Int64.Type}}),    #'Renamed Columns' = Table.RenameColumns(#'Changed Type',{{'ZONE_ID', 'Market'}, {'Count', 'Selection Count'}}),    #'Changed Type1' = Table.TransformColumnTypes(#'Renamed Columns',{{'Current Wk', Int64.Type}}),    #'Renamed Columns1' = Table.RenameColumns(#'Changed Type1',{{'RFO_ID', 'RFO'}})in    #'Renamed Columns1'"}]},{"name":"CP+","isHidden":false,"description":"This is a weekly headcount of the individuals who completed a CP+ exam during that week.","storageMode":"Import","columns":[{"name":"JOIN VALUE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_Mkt","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Year","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Week","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"CP+ Exams","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Current Wk","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"12+ CP+ Scores","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Cumulative CP+ Above","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"YTD Cumulative CP+ Counts","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[{"name":"% YTD 12+","expression":"SUM(\u0027CP+\u0027[12+ CP+ Scores])/SUM(\u0027CP+\u0027[CP+ Exams])","isHidden":false},{"name":"Curr Wk CP+","expression":"var current_year = MAX(\u0027CP+\u0027[Year])RETURNCALCULATE(SUM(\u0027CP+\u0027[CP+ Exams]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]=\u0027RFO-Mkt-Wk\u0027[Current Wk]),    FILTER(\u0027RFO-Mkt-Wk\u0027,VALUE(\u0027RFO-Mkt-Wk\u0027[Year])=current_year))","isHidden":false},{"name":"PY Wk CP+","expression":"var previous_year = MAX(\u0027CP+\u0027[Year])-1RETURNCALCULATE(SUM(\u0027CP+\u0027[CP+ Exams]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]=\u0027RFO-Mkt-Wk\u0027[Current Wk]),    FILTER(\u0027RFO-Mkt-Wk\u0027,VALUE(\u0027RFO-Mkt-Wk\u0027[Year])=previous_year))","isHidden":false},{"name":"PYE CP+ Exams","expression":"VAR previous_year = MAX(\u0027CP+\u0027[Year])-1RETURNCALCULATE(SUM(\u0027CP+\u0027[CP+ Exams]),    FILTER(\u0027RFO-Mkt-Wk\u0027,VALUE(\u0027RFO-Mkt-Wk\u0027[Year])=previous_year))","isHidden":false},{"name":"Cumulative PYTD CP+ Exams","expression":"var previous_year = MAX(\u0027CP+\u0027[Year])-1RETURNCALCULATE(SUM(\u0027CP+\u0027[YTD Cumulative CP+ Counts]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]=\u0027RFO-Mkt-Wk\u0027[Current Wk]),    FILTER(\u0027RFO-Mkt-Wk\u0027,VALUE(\u0027RFO-Mkt-Wk\u0027[Year])=previous_year))","isHidden":false},{"name":"Cumulative YTD CP+ Exams","expression":"var current_year = MAX(\u0027CP+\u0027[Year])RETURNCALCULATE(SUM(\u0027CP+\u0027[YTD Cumulative CP+ Counts]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]=\u0027RFO-Mkt-Wk\u0027[Current Wk]),    FILTER(\u0027RFO-Mkt-Wk\u0027,VALUE(\u0027RFO-Mkt-Wk\u0027[Year])=current_year))","isHidden":false},{"name":"Cumulative PYTD CP+ Above","expression":"var previous_year = MAX(\u0027CP+\u0027[Year])-1RETURNCALCULATE(SUM(\u0027CP+\u0027[Cumulative CP+ Above]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]=\u0027RFO-Mkt-Wk\u0027[Current Wk]),    FILTER(\u0027RFO-Mkt-Wk\u0027,VALUE(\u0027RFO-Mkt-Wk\u0027[Year])=previous_year))","isHidden":false},{"name":"PYE CP+ Above","expression":"VAR previous_year = MAX(\u0027CP+\u0027[Year])-1RETURNCALCULATE(SUM(\u0027CP+\u0027[12+ CP+ Scores]),    FILTER(\u0027RFO-Mkt-Wk\u0027,VALUE(\u0027RFO-Mkt-Wk\u0027[Year])=previous_year))","isHidden":false},{"name":"YTD % CP+ Above","expression":"CALCULATE([Cumulative YTD CP+ Above]/[Cumulative YTD CP+ Exams])","isHidden":false},{"name":"Cumulative YTD CP+ Above","expression":"var current_year = MAX(\u0027CP+\u0027[Year])RETURNCALCULATE(SUM(\u0027CP+\u0027[Cumulative CP+ Above]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]=\u0027RFO-Mkt-Wk\u0027[Current Wk]),    FILTER(\u0027RFO-Mkt-Wk\u0027,VALUE(\u0027RFO-Mkt-Wk\u0027[Year])=current_year))","isHidden":false},{"name":"Cumulative % YTD Above","expression":"CALCULATE(\u0027CP+\u0027[Cumulative YTD CP+ Above]/\u0027CP+\u0027[Cumulative YTD CP+ Exams])","isHidden":false},{"name":"Cumulative % PYTD Above","expression":"CALCULATE(\u0027CP+\u0027[Cumulative PYTD CP+ Above]/\u0027CP+\u0027[Cumulative PYTD CP+ Exams])","isHidden":false},{"name":"Cumulative PYE CP+ Above","expression":"VAR previous_year = MAX(\u0027CP+\u0027[Year])-1RETURNCALCULATE(SUM(\u0027CP+\u0027[Cumulative CP+ Above]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]=52),    FILTER(\u0027RFO-Mkt-Wk\u0027,VALUE(\u0027RFO-Mkt-Wk\u0027[Year])=previous_year))","isHidden":false},{"name":"Cumulative PYE CP+ Exams","expression":"VAR previous_year = MAX(\u0027CP+\u0027[Year])-1RETURNCALCULATE(SUM(\u0027CP+\u0027[YTD Cumulative CP+ Counts]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]=52),    FILTER(\u0027RFO-Mkt-Wk\u0027,VALUE(\u0027RFO-Mkt-Wk\u0027[Year])=previous_year))","isHidden":false},{"name":"Cumulative % PYE Above","expression":"CALCULATE(\u0027CP+\u0027[Cumulative PYE CP+ Above]/\u0027CP+\u0027[Cumulative PYE CP+ Exams])","isHidden":false},{"name":"Curr Wk CP+ Above","expression":"var current_year = MAX(\u0027CP+\u0027[Year])RETURNCALCULATE(SUM(\u0027CP+\u0027[12+ CP+ Scores]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]=\u0027RFO-Mkt-Wk\u0027[Current Wk]),    FILTER(\u0027RFO-Mkt-Wk\u0027,VALUE(\u0027RFO-Mkt-Wk\u0027[Year])=current_year))","isHidden":false},{"name":"PY Wk CP+ Above","expression":"var previous_year = MAX(\u0027CP+\u0027[Year])-1RETURNCALCULATE(SUM(\u0027CP+\u0027[12+ CP+ Scores]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]=\u0027RFO-Mkt-Wk\u0027[Current Wk]),    FILTER(\u0027RFO-Mkt-Wk\u0027,VALUE(\u0027RFO-Mkt-Wk\u0027[Year])=previous_year))","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//SHARED//Public//DI and BI//Capacity Dashboard//Capacity Dashboard-CP+.xlsx'), null, true),    Sheet1_Sheet = Source{[Item='Sheet1',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'JOIN VALUE', type text}, {'RFO_ID', Int64.Type}, {'ZONE_ID', type text}, {'RFO_Mkt', type text}, {'Type', type text}, {'Year', Int64.Type}, {'Week', Int64.Type}, {'Count', Int64.Type}}),    #'Renamed Columns' = Table.RenameColumns(#'Changed Type',{{'ZONE_ID', 'Market'}, {'Count', 'Count'}}),    #'Added Conditional Column' = Table.AddColumn(#'Renamed Columns', 'CP+ Exams', each if [Type] = 'CP+' then [Count] else null),    #'Changed Type1' = Table.TransformColumnTypes(#'Added Conditional Column',{{'CP+ Exams', Int64.Type}}),    #'Changed Type2' = Table.TransformColumnTypes(#'Changed Type1',{{'CP+ Above', Int64.Type}, {'CP+ Scores Above', Int64.Type}}),    #'Added Custom' = Table.AddColumn(#'Changed Type2', 'Percent CP+ Above', each [#'CP+ Above']/[#'CP+ Exams']),    #'Changed Type3' = Table.TransformColumnTypes(#'Added Custom',{{'Percent CP+ Above', Percentage.Type}}),    #'Removed Columns' = Table.RemoveColumns(#'Changed Type3',{'CP+ Exams', 'Percent CP+ Above', 'CP+ Above'}),    #'Renamed Columns1' = Table.RenameColumns(#'Removed Columns',{{'Count', 'CP+ Exams'}, {'CP+ Scores Above', '12+ CP+ Scores'}}),    #'Changed Type4' = Table.TransformColumnTypes(#'Renamed Columns1',{{'Current Wk', Int64.Type}, {'Cumulative Counts', Int64.Type}, {'Cumulative CP+ Above', Int64.Type}}),    #'Renamed Columns2' = Table.RenameColumns(#'Changed Type4',{{'Cumulative Counts', 'YTD Cumulative CP+ Counts'}, {'RFO_ID', 'RFO'}})in    #'Renamed Columns2'"}]},{"name":"Update Date","isHidden":false,"storageMode":"Import","columns":[{"name":"As of Date","dataType":"DateTime","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//SHARED//Public//DI and BI//Capacity Dashboard//As of Date.xlsx'), null, true),    Sheet1_Sheet = Source{[Item='Sheet1',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'As of Date', type date}})in    #'Changed Type'"}]},{"name":"RR Detail","isHidden":false,"storageMode":"Import","columns":[{"name":"JOIN VALUE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Division_Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Zone_Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market Leader Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Title Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Title Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Red Role Hire Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Tenure","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"MVP-Mkt","dataType":"String","isHidden":false,"expression":"MID(\u0027RR Detail\u0027[JOIN VALUE],6,5)","columnType":"Calculated"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//SHARED//Public//DI and BI//Capacity Dashboard//Detail Files.xlsx'), null, true),    #'RR Detail_Sheet' = Source{[Item='RR Detail',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'RR Detail_Sheet', [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'JOIN VALUE', type text}, {'Division_Description', type text}, {'RFO', type text}, {'RFO_Description', type text}, {'Market', type text}, {'Zone_Description', type text}, {'Market Leader Name', type text}, {'TSID', type text}, {'Employee Name', type text}, {'Job Title Code', type text}, {'Job Title Name', type text}, {'Adj Svc Date', type date}, {'Tenure', type number}}),    #'Renamed Columns' = Table.RenameColumns(#'Changed Type',{{'Employee Name', 'Name'}, {'Adj Svc Date', 'Red Role Hire Date'}})in    #'Renamed Columns'"}]},{"name":"Leaders Detail","isHidden":false,"storageMode":"Import","columns":[{"name":"JOIN VALUE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Category","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Title Name","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//SHARED//Public//DI and BI//Capacity Dashboard//Detail Files.xlsx'), null, true),    #'Leaders Detail_Sheet' = Source{[Item='Leaders Detail',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'Leaders Detail_Sheet', [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'JOIN VALUE', type text}, {'Category', type text}, {'RFO', type text}, {'TSID', type text}, {'Name', type text}, {'Job Title Name', type text}})in    #'Changed Type'"}]},{"name":"WMFC_CD","isHidden":false,"storageMode":"Import","columns":[{"name":"RFO","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Zone_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Category","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Perfyear","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Perfweek","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"WMFC","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"RFO_MKT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Join_Value","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Type","dataType":"String","isHidden":false,"expression":"SWITCH(WMFC_CD[Category],'FR', 'FAs and Associate Reps','FR-WA', 'FAs and Associate Reps','FR-FC', 'FAs and Associate Reps', 'Associate Representative', 'FAs and Associate Reps','Associate-Regular', 'Associates','Associate-Insurance', 'Associates','Associate-Securities', 'Associates', 'Support Associate', 'Associates', 'Other Associates', 'Associates','Insurance Producer', 'Insurance Prod.','OP-Licensed', 'Office Professionals','OP-Unlicensed', 'Office Professionals','Field Leader', 'Field Leaders', 'TFGT-Licensed', 'Virtual Advice', 'TFGT-Unlicensed', 'Virtual Advice')","columnType":"Calculated"},{"name":"MFC","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Category Desc","dataType":"String","isHidden":false,"expression":"SWITCH(WMFC_CD[Category],'FR', 'FA','FR-WA', 'FA-WA','FR-FC', 'FA-FC', 'Associate Representative', 'Associate Representative','Associate-Regular', 'Associate-Regular','Associate-Insurance', 'Associate-Insurance','Associate-Securities', 'Associate-Securities', 'Support Associate', 'Support Associate', 'Other Associates', 'Other Associates','Insurance Producer', 'Insurance Producer','OP-Licensed', 'OP-Licensed','OP-Unlicensed', 'OP-Unlicensed','Field Leader', 'Field Leader', 'TFGT-Licensed', 'VA-Licensed', 'TFGT-Unlicensed', 'VA-Unlicensed')","columnType":"Calculated"}],"measures":[{"name":"PYE","expression":"VAR previous_year = MAX(\u0027RFO-Mkt-Wk\u0027[Year])-1RETURNCALCULATE(SUM(WMFC_CD[WMFC]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]=52),    FILTER(\u0027RFO-Mkt-Wk\u0027,VALUE(\u0027RFO-Mkt-Wk\u0027[Year])=previous_year))","isHidden":false},{"name":"PY2E","expression":"VAR previous_year2 = MAX(\u0027RFO-Mkt-Wk\u0027[Year])-2RETURNCALCULATE(SUM(WMFC_CD[WMFC]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]=52),    FILTER(\u0027RFO-Mkt-Wk\u0027,VALUE(\u0027RFO-Mkt-Wk\u0027[Year])=previous_year2))","isHidden":false},{"name":"Curr","expression":"VAR current_year = MAX(\u0027RFO-Mkt-Wk\u0027[Year])RETURNCALCULATE(SUM(WMFC_CD[WMFC]),FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]=\u0027RFO-Mkt-Wk\u0027[Current Wk]),FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Year]=current_year))","isHidden":false},{"name":"PYTD","expression":"VAR previous_year = MAX(\u0027RFO-Mkt-Wk\u0027[Year])-1RETURNCALCULATE(SUM(WMFC_CD[WMFC]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]=\u0027RFO-Mkt-Wk\u0027[Current Wk]),    FILTER(\u0027RFO-Mkt-Wk\u0027,VALUE(\u0027RFO-Mkt-Wk\u0027[Year])=previous_year))","isHidden":false},{"name":"Var PYE","expression":"VAR __BASELINE_VALUE = [PYE]VAR __VALUE_TO_COMPARE = [Curr]RETURN\\tDIVIDE(__VALUE_TO_COMPARE - __BASELINE_VALUE, __BASELINE_VALUE)","isHidden":false},{"name":"Var PYTD","expression":"VAR __BASELINE_VALUE = [PYTD]VAR __VALUE_TO_COMPARE = [Curr]RETURN\\tIF(\\t\\tNOT ISBLANK(__VALUE_TO_COMPARE),\\t\\tDIVIDE(__VALUE_TO_COMPARE - __BASELINE_VALUE, __BASELINE_VALUE)\\t)","isHidden":false},{"name":"Curr-Unwtd","expression":"VAR current_year = MAX(\u0027RFO-Mkt-Wk\u0027[Year])RETURNCALCULATE(SUM(WMFC_CD[MFC]),FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]=\u0027RFO-Mkt-Wk\u0027[Current Wk]),FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Year]=current_year))","isHidden":false},{"name":"PYTD-Unwtd","expression":"VAR previous_year = MAX(\u0027RFO-Mkt-Wk\u0027[Year])-1RETURNCALCULATE(SUM(WMFC_CD[MFC]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]=\u0027RFO-Mkt-Wk\u0027[Current Wk]),    FILTER(\u0027RFO-Mkt-Wk\u0027,VALUE(\u0027RFO-Mkt-Wk\u0027[Year])=previous_year))","isHidden":false},{"name":"Var PYTD-Unwtd","expression":"VAR __BASELINE_VALUE = [PYTD-Unwtd]VAR __VALUE_TO_COMPARE = [Curr-Unwtd]RETURN\\tIF(\\t\\tNOT ISBLANK(__VALUE_TO_COMPARE),\\t\\tDIVIDE(__VALUE_TO_COMPARE - __BASELINE_VALUE, __BASELINE_VALUE)\\t)","isHidden":false},{"name":"PYE-Unwtd","expression":"VAR previous_year = MAX(\u0027RFO-Mkt-Wk\u0027[Year])-1RETURNCALCULATE(SUM(WMFC_CD[MFC]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]=52),    FILTER(\u0027RFO-Mkt-Wk\u0027,VALUE(\u0027RFO-Mkt-Wk\u0027[Year])=previous_year))","isHidden":false},{"name":"Var PYE-Unwtd","expression":"VAR __BASELINE_VALUE = [PYE-Unwtd]VAR __VALUE_TO_COMPARE = [Curr-Unwtd]RETURN\\tDIVIDE(__VALUE_TO_COMPARE - __BASELINE_VALUE, __BASELINE_VALUE)","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Capacity Dashboard//WMFC_CD.XLSX'), null, true),    WMFC_CD_Sheet = Source{[Item='WMFC_CD',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(WMFC_CD_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'RFO', Int64.Type}, {'Zone_ID', type text}, {'Category', type text}, {'Perfyear', Int64.Type}, {'Perfweek', Int64.Type}, {'WMFC', type number}, {'RFO_MKT', type text}, {'Join_Value', type text}, {'MFC', type number}})in    #'Changed Type'"}]},{"name":"WMFC Detail","isHidden":false,"storageMode":"Import","columns":[{"name":"JOIN VALUE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Title","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Segment","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Tenure Year","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Category","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Report to TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Report to Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP-Market","dataType":"String","isHidden":false,"expression":"MID(\u0027WMFC Detail\u0027[JOIN VALUE],6,5)","columnType":"Calculated"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Capacity Dashboard//WMFC Information.xlsx'), null, true),    #'WMFC Detail_Sheet' = Source{[Item='WMFC Detail',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'WMFC Detail_Sheet', [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'JOIN VALUE', type text}, {'RFO', type text}, {'Market', type text}, {'TSID', type text}, {'Name', type text}, {'Job Code', type text}, {'Job Title', type text}, {'Segment', type text}, {'Tenure Year', type text}, {'Job Type', type text}, {'Category', type text}, {'Report to TSID', type text}, {'Report to Name', type text}})in    #'Changed Type'"}]},{"name":"WMFC Definitions","isHidden":false,"storageMode":"Import","columns":[{"name":"Category","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Weight","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Capacity Dashboard//WMFC Information.xlsx'), null, true),    #'WMFC Definitions_Sheet' = Source{[Item='WMFC Definitions',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'WMFC Definitions_Sheet', [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Category', type text}, {'Job Code', type text}, {'Job Name', type text}, {'Weight', type number}})in    #'Changed Type'"}]},{"name":"Scorecard","isHidden":false,"storageMode":"Import","columns":[{"name":"RFO_ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"ZONE_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_Mkt","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Year","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"JOIN VALUE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CP+ Week","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"CP+ YTD","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Selection","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Licensing","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Red Role","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Weekly New Contracts","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"YTD New Contracts","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Year-End Contract Goal","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"YTD Gender Contracts","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Contracts Meeting Assessment Standards","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Pct Contracts Meeting Assessment Standards","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Warm Sourced Contracts YTD","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Pct Warm Sourced Contracts YTD","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Weekly FPs Lost to Attrition","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"YTD FRs Lost to Attrition","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"RFO Transfers","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Other Transfers","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Baseline","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Current Capacity","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"%  Change","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Net Change","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Year-End Goal","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Tag - Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Current NFA Capacity","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Current VET Capacity","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Cntrcts Meeting Assessment Standards","expression":"DIVIDE(SUM(Scorecard[Contracts Meeting Assessment Standards]), SUM(Scorecard[YTD New Contracts]),0)","isHidden":false},{"name":"YTD Warm Sourced Contracts","expression":"DIVIDE(SUM(Scorecard[Warm Sourced Contracts YTD]), SUM(Scorecard[YTD New Contracts]),0)","isHidden":false},{"name":"Curr Capacity","expression":"CALCULATE(SUM(Scorecard[Current Capacity]))","isHidden":false},{"name":"% Net Change","expression":"CALCULATE(SUM(Scorecard[Net Change]) / SUM(Scorecard[Baseline]))","isHidden":false},{"name":"NFP Capacity","expression":"sum(\u0027FP Capacity\u0027[NFR Capacity])","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//Shared//Public//DI and BI//Capacity Dashboard//Capacity Dashboard-Scorecard.xlsx'), null, true),    Scorecard_Sheet = Source{[Item='Scorecard',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Scorecard_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'RFO_ID', type text}, {'ZONE_ID', type text}, {'RFO_Mkt', type text}, {'Year', Int64.Type}, {'JOIN VALUE', type text}, {'CP+ Week', Int64.Type}, {'CP+ YTD', Int64.Type}, {'Selection', Int64.Type}, {'Licensing', Int64.Type}, {'Red Role', Int64.Type}, {'Weekly New Contracts', Int64.Type}, {'YTD New Contracts', Int64.Type}, {'Year-End Contract Goal', Int64.Type}, {'YTD Gender Contracts', Int64.Type}, {'Contracts Meeting Assessment Standards', Int64.Type}, {'Pct Contracts Meeting Assessment Standards', Percentage.Type}, {'Warm Sourced Contracts YTD', Int64.Type}, {'Pct Warm Sourced Contracts YTD', Percentage.Type}, {'Weekly FRs Lost to Attrition', Int64.Type}, {'YTD FRs Lost to Attrition', Int64.Type}, {'RFO Transfers', Int64.Type}, {'Other Transfers', Int64.Type}, {'12/16/19 Baseline', Int64.Type}, {'Current Capacity', Int64.Type}, {'%  Change', Percentage.Type}, {'Net Change', Int64.Type}, {'Year-End Goal', Int64.Type}}),    #'Renamed Columns' = Table.RenameColumns(#'Changed Type',{{'Weekly FRs Lost to Attrition', 'Weekly FPs Lost to Attrition'}, {'12/16/19 Baseline', 'Baseline'}}),    #'Filtered Rows' = Table.SelectRows(#'Renamed Columns', each ([RFO_ID] \u003c\u003e null)),    #'Changed Type3' = Table.TransformColumnTypes(#'Filtered Rows',{{'RFO_ID', Int64.Type}, {'ZONE_ID', type text}, {'RFO_Mkt', type text}, {'Year', Int64.Type}, {'JOIN VALUE', type text}, {'CP+ Week', Int64.Type}, {'CP+ YTD', Int64.Type}, {'Selection', Int64.Type}, {'Licensing', Int64.Type}, {'Red Role', Int64.Type}, {'Weekly New Contracts', Int64.Type}, {'YTD New Contracts', Int64.Type}, {'Year-End Contract Goal', Int64.Type}, {'YTD Gender Contracts', Int64.Type}, {'Contracts Meeting Assessment Standards', Int64.Type}, {'Pct Contracts Meeting Assessment Standards', Int64.Type}, {'Warm Sourced Contracts YTD', Int64.Type}, {'Pct Warm Sourced Contracts YTD', Int64.Type}, {'Weekly FPs Lost to Attrition', Int64.Type}, {'YTD FRs Lost to Attrition', Int64.Type}, {'RFO Transfers', Int64.Type}, {'Other Transfers', Int64.Type}, {'Baseline', Int64.Type}, {'Current Capacity', Int64.Type}, {'%  Change', type number}, {'Net Change', Int64.Type}, {'Year-End Goal', Int64.Type}})in    #'Changed Type3'"}]},{"name":"Weight","isHidden":false,"storageMode":"Import","columns":[{"name":"FR","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"FR-FC","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"FR-WA","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Associate-Insurance","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Associate-Regular","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Associate Securities","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"insurance Producer","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"OP-Licensed","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"OP-Unlicensed","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Field Leader","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Associate Representatives","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Support Associates","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Other Associates","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"VA-Licensed","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"VA-Unlicensed","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Capacity Dashboard//WMFC Information.xlsx'), null, true),    Weight_Sheet = Source{[Item='Weight',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Weight_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'FR', type number}, {'FR-FC', type number}, {'FR-WA', type number}, {'Associate-Insurance', type number}, {'Associate-Regular', type number}, {'Associate Securities', type number}, {'insurance Producer', type number}, {'OP-Licensed', type number}, {'OP-Unlicensed', type number}, {'Field Leader', type number}, {'Associate Representatives', type number}, {'Support Associates', type number}, {'Other Associates', type number}, {'VA-Licensed', type number}, {'VA-Unlicensed', type number}})in    #'Changed Type'"}]},{"name":"Leader Counts","isHidden":false,"storageMode":"Import","columns":[{"name":"JOIN VALUE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"ZONE_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_Mkt","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Year","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Week","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"TAG Leader","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"TAG Leader PYE","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Market Vice President","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Market Vice President PYE","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Market Leader","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Market Leader PYE","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Market Developer","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Market Developer PYE","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Regional Market Leader","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Regional Market Leader PYE","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Practice Developer","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Practice Developer PYE","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Field Leaders in Training","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Field Leaders in Training PYE","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Field Vice President","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Field Vice President PYE","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"COE Leaders","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"COE Leaders PYE","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Capacity Dashboard//Leaders - Current and YE.xlsx'), null, true),    Sheet1_Sheet = Source{[Item='Sheet1',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'JOIN VALUE', type text}, {'RFO_ID', Int64.Type}, {'ZONE_ID', type text}, {'RFO_Mkt', type text}, {'Year', Int64.Type}, {'Week', Int64.Type}, {'TAG Leader', Int64.Type}, {'TAG Leader PYE', Int64.Type}, {'Market Vice President', Int64.Type}, {'Market Vice President PYE', Int64.Type}, {'Market Leader', Int64.Type}, {'Market Leader PYE', Int64.Type}, {'Market Developer', Int64.Type}, {'Market Developer PYE', Int64.Type}, {'Regional Market Leader', Int64.Type}, {'Regional Market Leader PYE', Int64.Type}, {'Practice Developer', Int64.Type}, {'Practice Developer PYE', Int64.Type}, {'Field Leaders in Training', Int64.Type}, {'Field Leaders in Training PYE', Int64.Type}, {'Field Vice President', Int64.Type}, {'Field Vice President PYE', Int64.Type}, {'COE Leaders', Int64.Type}, {'COE Leaders PYE', Int64.Type}})in    #'Changed Type'"}]},{"name":"RR Hires","isHidden":false,"storageMode":"Import","columns":[{"name":"JOIN VALUE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"ZONE_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_Mkt","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Year","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Week","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Current Wk","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"RR Hires","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[{"name":"YTD Hires","expression":"VAR current_year = MAX(\u0027RR Hires\u0027[Year])RETURNCALCULATE(SUM(\u0027RR Hires\u0027[RR Hires]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]=\u0027RFO-Mkt-Wk\u0027[Current Wk]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Year]=current_year))","isHidden":false},{"name":"PYTD Hires","expression":"VAR previous_year = MAX(\u0027RR Hires\u0027[Year])-1RETURNCALCULATE(SUM(\u0027RR Hires\u0027[RR Hires]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]=\u0027RFO-Mkt-Wk\u0027[Current Wk]),    FILTER(\u0027RFO-Mkt-Wk\u0027,VALUE(\u0027RFO-Mkt-Wk\u0027[Year])=previous_year))","isHidden":false},{"name":"PYTD Hires Var","expression":"CALCULATE((\u0027RR Hires\u0027[YTD Hires]-\u0027RR Hires\u0027[PYTD Hires])/\u0027RR Hires\u0027[PYTD Hires])","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Capacity Dashboard//Capacity Dashboard-RR_Hires.xlsx'), null, true),    Sheet1_Sheet = Source{[Item='Sheet1',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'JOIN VALUE', type text}, {'RFO_ID', Int64.Type}, {'ZONE_ID', type text}, {'RFO_Mkt', type text}, {'Type', type text}, {'Year', Int64.Type}, {'Week', Int64.Type}, {'Current Wk', Int64.Type}, {'Count', Int64.Type}}),    #'Renamed Columns' = Table.RenameColumns(#'Changed Type',{{'Count', 'RR Hires'}})in    #'Renamed Columns'"}]},{"name":"RR Terminations","isHidden":false,"storageMode":"Import","columns":[{"name":"JOIN VALUE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"ZONE_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_Mkt","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Year","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Week","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Current Wk","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"RR Terminations","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[{"name":"YTD RR Terminations","expression":"VAR current_year = MAX(\u0027RR Terminations\u0027[Year])RETURNCALCULATE(SUM(\u0027RR Terminations\u0027[RR Terminations]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]=\u0027RFO-Mkt-Wk\u0027[Current Wk]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Year]=current_year))","isHidden":false},{"name":"PYTD RR Terminations","expression":"VAR previous_year = MAX(\u0027RR Terminations\u0027[Year])-1RETURNCALCULATE(SUM(\u0027RR Terminations\u0027[RR Terminations]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]=\u0027RFO-Mkt-Wk\u0027[Current Wk]),    FILTER(\u0027RFO-Mkt-Wk\u0027,VALUE(\u0027RFO-Mkt-Wk\u0027[Year])=previous_year))","isHidden":false},{"name":"PYTD RR Terminations Var","expression":"CALCULATE((\u0027RR Terminations\u0027[YTD RR Terminations]-\u0027RR Terminations\u0027[PYTD RR Terminations])/\u0027RR Terminations\u0027[PYTD RR Terminations])","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Capacity Dashboard//Capacity Dashboard-RR_Terminations.xlsx'), null, true),    Sheet1_Sheet = Source{[Item='Sheet1',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'JOIN VALUE', type text}, {'RFO_ID', Int64.Type}, {'ZONE_ID', type text}, {'RFO_Mkt', type text}, {'Type', type text}, {'Year', Int64.Type}, {'Week', Int64.Type}, {'Current Wk', Int64.Type}, {'Count', Int64.Type}}),    #'Renamed Columns' = Table.RenameColumns(#'Changed Type',{{'Count', 'RR Terminations'}})in    #'Renamed Columns'"}]},{"name":"RR Hires Detail","isHidden":false,"storageMode":"Import","columns":[{"name":"JOIN VALUE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Division","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"RFO Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market Leader Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Hire Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Job Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Hire Status","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Previous Job Code","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"YTD CCs","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"YTD GDCs","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"S6 License","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S7 License","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S63 License","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S65 License","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S66 License","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"INVS_ADVR_REPR_IND","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Capacity Dashboard//Detail Files.xlsx'), null, true),    #'RR Hires_Sheet' = Source{[Item='RR Hires',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'RR Hires_Sheet', [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'JOIN VALUE', type text}, {'Division', type text}, {'RFO', Int64.Type}, {'RFO Name', type text}, {'Market ID', type text}, {'Market Name', type text}, {'Market Leader Name', type text}, {'TSID', type text}, {'Employee Name', type text}, {'Begin Date', type date}, {'Job Code', Int64.Type}, {'Job Name', type text}, {'Hire Status', type text}, {'Previous Job Code', Int64.Type}, {'YTD CCs', Int64.Type}, {'YTD GDCs', Int64.Type}, {'S6 License', type text}, {'S7 License', type text}, {'S63 License', type text}, {'S65 License', type text}, {'S66 License', type text}, {'INVS_ADVR_REPR_IND', type text}}),    #'Renamed Columns' = Table.RenameColumns(#'Changed Type',{{'Begin Date', 'Hire Date'}})in    #'Renamed Columns'"}]},{"name":"RR Terms Detail","isHidden":false,"storageMode":"Import","columns":[{"name":"JOIN VALUE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Division","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"RFO Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market Leader Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"End Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Adjusted Service Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Tenure","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"FR Seg","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FR Year","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Term/Transfer Status","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Term/Transfer Code","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Job Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"YTD_NSC","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"YTD_GDC","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"YTD_NMPs_Juv","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"PYTD_NSC","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"PYTD_GDC","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"PYTD_NMPs_Juv","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"PY2TD_NSC","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"PY2TD_GDC","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"PY2TD_NMPs_Juv","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"PYEND_NSC","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"PYEND_GDC","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"PYEND_NMPs_Juv","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"PY2END_NSC","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"PY2END_GDC","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"PY2END_NMPs_Juv","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"M12_NSC","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"M12_GDC","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"M12_NMPs_Juv","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"M24_NSC","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"M24_GDC","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"M24_NMPs_Juv","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Conference_YE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S7_65_66","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S6_LIC_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S7_LIC_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S63_LIC_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S65_LIC_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S66_LIC_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"INVS_ADVR_REPR_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"expression":"MID(\u0027RR Terms Detail\u0027[Market Name],6,5)","columnType":"Calculated"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Capacity Dashboard//Detail Files.xlsx'), null, true),    #'RR Terms_Sheet' = Source{[Item='RR Terms',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'RR Terms_Sheet', [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'JOIN VALUE', type text}, {'Division', type text}, {'RFO', Int64.Type}, {'RFO Name', type text}, {'Market ID', type text}, {'Market Name', type text}, {'Market Leader Name', type text}, {'TSID', type text}, {'Employee Name', type text}, {'End Date', type date}, {'Adjusted Service Date', type date}, {'Tenure', type number}, {'FR Seg', type text}, {'FR Year', type text}, {'Term/Transfer Status', type text}, {'Term/Transfer Code', Int64.Type}, {'Job Code', Int64.Type}, {'Job Name', type text}, {'YTD_NSC', Int64.Type}, {'YTD_GDC', Int64.Type}, {'YTD_NMPs_Juv', Int64.Type}, {'PYTD_NSC', Int64.Type}, {'PYTD_GDC', Int64.Type}, {'PYTD_NMPs_Juv', Int64.Type}, {'PY2TD_NSC', Int64.Type}, {'PY2TD_GDC', Int64.Type}, {'PY2TD_NMPs_Juv', Int64.Type}, {'PYEND_NSC', Int64.Type}, {'PYEND_GDC', Int64.Type}, {'PYEND_NMPs_Juv', Int64.Type}, {'PY2END_NSC', Int64.Type}, {'PY2END_GDC', Int64.Type}, {'PY2END_NMPs_Juv', Int64.Type}, {'M12_NSC', Int64.Type}, {'M12_GDC', Int64.Type}, {'M12_NMPs_Juv', Int64.Type}, {'M24_NSC', Int64.Type}, {'M24_GDC', Int64.Type}, {'M24_NMPs_Juv', Int64.Type}, {'Conference_YE', type text}, {'S7_65_66', type text}, {'S6_LIC_STS_CDE', type text}, {'S7_LIC_STS_CDE', type text}, {'S63_LIC_STS_CDE', type text}, {'S65_LIC_STS_CDE', type text}, {'S66_LIC_STS_CDE', type text}, {'INVS_ADVR_REPR_IND', type text}})in    #'Changed Type'"}]},{"name":"Active Red Role plus FP Contracts","isHidden":false,"storageMode":"Import","columns":[{"name":"JOIN VALUE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"ZONE_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_Mkt","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Year","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Week","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Current Wk","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Active RR plus FP Contracts","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Contract Count","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RR Count","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Curr Combined Cap","expression":"VAR current_year = MAX(\u0027Active Red Role plus FP Contracts\u0027[Year])RETURNCALCULATE(SUM(\u0027Active Red Role plus FP Contracts\u0027[Active RR plus FP Contracts]),FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]=\u0027RFO-Mkt-Wk\u0027[Current Wk]),FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Year]=current_year))","isHidden":false},{"name":"PYE Combined Cap","expression":"VAR previous_year = MAX(\u0027CP+\u0027[Year])-1RETURNCALCULATE(SUM(\u0027Active Red Role plus FP Contracts\u0027[Active RR plus FP Contracts]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]=52),    FILTER(\u0027RFO-Mkt-Wk\u0027,VALUE(\u0027RFO-Mkt-Wk\u0027[Year])=previous_year))","isHidden":false},{"name":"PYTD Combined Cap","expression":"VAR previous_year = MAX(\u0027CP+\u0027[Year])-1RETURNCALCULATE(SUM(\u0027Active Red Role plus FP Contracts\u0027[Active RR plus FP Contracts]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]=\u0027RFO-Mkt-Wk\u0027[Current Wk]),    FILTER(\u0027RFO-Mkt-Wk\u0027,VALUE(\u0027RFO-Mkt-Wk\u0027[Year])=previous_year))","isHidden":false},{"name":"PYE Combined Var","expression":"CALCULATE((\u0027Active Red Role plus FP Contracts\u0027[Curr Combined Cap]-\u0027Active Red Role plus FP Contracts\u0027[PYE Combined Cap])/\u0027Active Red Role plus FP Contracts\u0027[PYE Combined Cap])","isHidden":false},{"name":"PYTD Combined Var","expression":"CALCULATE((\u0027Active Red Role plus FP Contracts\u0027[Curr Combined Cap]-\u0027Active Red Role plus FP Contracts\u0027[PYTD Combined Cap])/\u0027Active Red Role plus FP Contracts\u0027[PYTD Combined Cap])","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Capacity Dashboard//Capacity Dashboard-Active_RR_and_FP_Contracts.xlsx'), null, true),    Sheet1_Sheet = Source{[Item='Sheet1',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'JOIN VALUE', type text}, {'RFO_ID', Int64.Type}, {'ZONE_ID', type text}, {'RFO_Mkt', type text}, {'Year', Int64.Type}, {'Week', Int64.Type}, {'Current Wk', Int64.Type}, {'Count', Int64.Type}}),    #'Renamed Columns' = Table.RenameColumns(#'Changed Type',{{'Count', 'Active RR plus FP Contracts'}})in    #'Renamed Columns'"}]},{"name":"RR_In_and_Out-Raw Data","isHidden":false,"storageMode":"Import","columns":[{"name":"JOIN VALUE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG_MVP_Mkt","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Year IN","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Year OUT","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Hire Sts","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Term Sts","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Division_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Division_Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"RFO_Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP_ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Zone_ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Zone_Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMPL_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Zone_Leader_Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TITLE_CODE_2","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"JOB_TITLE_NM_2","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MGT_RLTN_BEG_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"MGT_RLTN_END_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Days_in_RR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"CNTRCT_HIRE_STATUS","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Recode_CNTRCT_HIRE_STATUS","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CNTRCT_TERMIN_STS","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Term_ASD_Tenure","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Term_ASD_w_BI_Tenure","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Term_Transfer_Status","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ADJ_SVC_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"EMPL_SEX_CODE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMPL_BIRTH_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Contract_Hire_Age","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Contract_Hire_Age_Group","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S6_LIC_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S7_LIC_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S63_LIC_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S65_LIC_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S66_LIC_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"INVS_ADVR_REPR_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S7_65_66","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PREV_TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PREV_JOB","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"PREV_END_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"DIFFERENCE","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"FUTURE_TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FUTURE_JOB","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"FUTURE_BEG_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"FUTURE_DIFFERENCE","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Year","dataType":"Int64","isHidden":false,"expression":"(\u0027RR_In_and_Out-Raw Data\u0027[Year IN])","columnType":"Calculated"},{"name":"YearSort","dataType":"Int64","isHidden":false,"expression":"-(\u0027RR_In_and_Out-Raw Data\u0027[Year IN])","columnType":"Calculated"},{"name":"Term Sts Sort","dataType":"String","isHidden":false,"expression":"SWITCH(\u0027RR_In_and_Out-Raw Data\u0027[Term Sts],'Active Red Role', '1-Active Red Role','Orange Role', '2-Orange Role','Lower Transfer', '3-Lower Transfer','Resign', '4-Resign','Involuntary', '5-Involuntary','Other', '6-Other')","columnType":"Calculated"},{"name":"Term Status","dataType":"String","isHidden":false,"expression":"\u0027RR_In_and_Out-Raw Data\u0027[Term Sts]","columnType":"Calculated"},{"name":"Source","dataType":"String","isHidden":false,"expression":"\u0027RR_In_and_Out-Raw Data\u0027[Hire Sts]","columnType":"Calculated"},{"name":"Hire Sts Sort","dataType":"String","isHidden":false,"expression":"SWITCH(\u0027RR_In_and_Out-Raw Data\u0027[Hire Sts],'Gray Role', '1-Gray Role','New Hire', '2-New Hire','Other', '3-Other')","columnType":"Calculated"}],"measures":[{"name":"Count","expression":"COUNT(\u0027RR_In_and_Out-Raw Data\u0027[TAG_MVP_Mkt])","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Capacity Dashboard//Capacity Dashboard-RR_In_and_Out.xlsx'), null, true),    #'RR_In_and_Out-Raw Data_Sheet' = Source{[Item='RR_In_and_Out-Raw Data',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'RR_In_and_Out-Raw Data_Sheet', [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'JOIN VALUE', type text}, {'TAG_MVP_Mkt', type text}, {'Year IN', Int64.Type}, {'Year OUT', Int64.Type}, {'Hire Sts', type text}, {'Term Sts', type text}, {'Division_ID', type text}, {'Division_Description', type text}, {'RFO_ID', Int64.Type}, {'RFO_Description', type text}, {'MVP_ID', Int64.Type}, {'Zone_ID', Int64.Type}, {'Zone_Description', type text}, {'TSID', type text}, {'EMPL_NM', type text}, {'Zone_Leader_Name', type text}, {'JOB_TITLE_CODE_2', Int64.Type}, {'JOB_TITLE_NM_2', type text}, {'MGT_RLTN_BEG_DATE', type date}, {'MGT_RLTN_END_DATE', type date}, {'Days_in_RR', Int64.Type}, {'CNTRCT_HIRE_STATUS', Int64.Type}, {'Recode_CNTRCT_HIRE_STATUS', type text}, {'CNTRCT_TERMIN_STS', Int64.Type}, {'Term_ASD_Tenure', type number}, {'Term_ASD_w_BI_Tenure', type number}, {'Term_Transfer_Status', type text}, {'ADJ_SVC_DT', type date}, {'EMPL_SEX_CODE', type text}, {'EMPL_BIRTH_DATE', type date}, {'Contract_Hire_Age', type number}, {'Contract_Hire_Age_Group', type text}, {'S6_LIC_STS_CDE', type text}, {'S7_LIC_STS_CDE', type text}, {'S63_LIC_STS_CDE', type text}, {'S65_LIC_STS_CDE', type text}, {'S66_LIC_STS_CDE', type text}, {'INVS_ADVR_REPR_IND', type text}, {'S7_65_66', type text}, {'PREV_TSID', type text}, {'PREV_JOB', Int64.Type}, {'PREV_END_DATE', type date}, {'DIFFERENCE', Int64.Type}, {'FUTURE_TSID', type text}, {'FUTURE_JOB', Int64.Type}, {'FUTURE_BEG_DATE', type date}, {'FUTURE_DIFFERENCE', Int64.Type}})in    #'Changed Type'"}]},{"name":"FA Capacity Detail","isHidden":false,"storageMode":"Import","columns":[{"name":"JOIN VALUE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Division Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market Leader Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Title Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Title Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Adjusted Service Date with BI","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Tenure","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Tenure Group","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Tenure Year","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//SHARED//Public//DI and BI//Capacity Dashboard//Detail Files.xlsx'), null, true),    #'Capacity Detail_Sheet' = Source{[Item='Capacity Detail',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'Capacity Detail_Sheet', [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'JOIN VALUE', type text}, {'Division Name', type text}, {'RFO', type text}, {'RFO Name', type text}, {'Market', type text}, {'Market Name', type text}, {'Market Leader Name', type text}, {'TSID', type text}, {'Name', type text}, {'Job Title Code', type text}, {'Job Title Name', type text}, {'Adjusted Service Date with BI', type date}, {'Tenure', type number}, {'Tenure Group', type text}, {'Tenure Year', type text}})in    #'Changed Type'"}]},{"name":"FA Contracts Detail","isHidden":false,"storageMode":"Import","columns":[{"name":"JOIN VALUE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Division_Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market_Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market_Leader_Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Contract Begin Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Job Title Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Title Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Recode_CNTRCT_HIRE_STATUS","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CNTRCT_HIRE_STATUS","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"YTD_NSC","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"YTD_GDC","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"S6_LIC_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S7_LIC_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S63_LIC_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S65_LIC_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S66_LIC_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"INVS_ADVR_REPR_IND","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//SHARED//Public//DI and BI//Capacity Dashboard//Detail Files.xlsx'), null, true),    #'Contracts Detail_Sheet' = Source{[Item='Contracts Detail',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'Contracts Detail_Sheet', [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'JOIN VALUE', type text}, {'Division_Description', type text}, {'RFO_ID', type text}, {'RFO_Description', type text}, {'Market_ID', type text}, {'Market_Description', type text}, {'Market_Leader_Name', type text}, {'TSID', type text}, {'EMPL_NM', type text}, {'MGT_RLTN_BEG_DATE', type date}, {'JOB_TITLE_CODE_2', type text}, {'JOB_TITLE_NM_2', type text}, {'Recode_CNTRCT_HIRE_STATUS', type text}, {'CNTRCT_HIRE_STATUS', Int64.Type}, {'YTD_NSC', type number}, {'YTD_GDC', type number}, {'S6_LIC_STS_CDE', type text}, {'S7_LIC_STS_CDE', type text}, {'S63_LIC_STS_CDE', type text}, {'S65_LIC_STS_CDE', type text}, {'S66_LIC_STS_CDE', type text}, {'INVS_ADVR_REPR_IND', type text}}),    #'Renamed Columns' = Table.RenameColumns(#'Changed Type',{{'RFO_ID', 'RFO'}, {'EMPL_NM', 'Name'}, {'JOB_TITLE_CODE_2', 'Job Title Code'}, {'JOB_TITLE_NM_2', 'Job Title Name'}, {'MGT_RLTN_BEG_DATE', 'Contract Begin Date'}}),    #'Changed Type1' = Table.TransformColumnTypes(#'Renamed Columns',{{'Contract Begin Date', type date}}),    #'Renamed Columns1' = Table.RenameColumns(#'Changed Type1',{{'Market_ID', 'Market'}})in    #'Renamed Columns1'"}]},{"name":"FA Terminations Detail","isHidden":false,"storageMode":"Import","columns":[{"name":"JOIN VALUE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Division_Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market_Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market_Leader_Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Termination Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"ASD_with_BI","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Term_ASD_w_BI_Tenure","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Term_ASD_w_BI_Segment","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Tenure Year","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Termination Reason","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CNTRCT_TERMIN_STS","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Job Title Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Title Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"YTD_NSC","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"YTD_GDC","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"YTD_NMPs_Juv","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"PYTD_NSC","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"PYTD_GDC","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"PYTD_NMPs_Juv","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"PY2TD_NSC","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"PY2TD_GDC","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"PY2TD_NMPs_Juv","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"PYEND_NSC","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"PYEND_GDC","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"PYEND_NMPs_Juv","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"PY2END_NSC","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"PY2END_GDC","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"PY2END_NMPs_Juv","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"M12_NSC","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"M12_GDC","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"M12_NMPs_Juv","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"M24_NSC","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"M24_GDC","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"M24_NMPs_Juv","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Conference YE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S7, 65, \u0026 66","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S6 License","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S7 License","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S63 License","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S65 License","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S66 License","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Invs Advr Repr Ind","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//SHARED//Public//DI and BI//Capacity Dashboard//Detail Files.xlsx'), null, true),    #'Terminations Detail_Sheet' = Source{[Item='Terminations Detail',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'Terminations Detail_Sheet', [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'JOIN VALUE', type text}, {'Division_Description', type text}, {'RFO_ID', type text}, {'RFO_Description', type text}, {'Market_ID', type text}, {'Market_Description', type text}, {'Market_Leader_Name', type text}, {'TSID', type text}, {'EMPL_NM', type text}, {'MGT_RLTN_END_DATE', type date}, {'ASD_with_BI', type date}, {'Term_ASD_w_BI_Tenure', type number}, {'Term_ASD_w_BI_Segment', type text}, {'Term_ASD_w_BI_byYear', type text}, {'Term_Transfer_Status', type text}, {'CNTRCT_TERMIN_STS', Int64.Type}, {'JOB_TITLE_CODE_2', type text}, {'JOB_TITLE_NM_2', type text}, {'YTD_NSC', type number}, {'YTD_GDC', type number}, {'YTD_NMPs_Juv', Int64.Type}, {'PYTD_NSC', type number}, {'PYTD_GDC', type number}, {'PYTD_NMPs_Juv', Int64.Type}, {'PY2TD_NSC', type number}, {'PY2TD_GDC', type number}, {'PY2TD_NMPs_Juv', type number}, {'PYEND_NSC', type number}, {'PYEND_GDC', type number}, {'PYEND_NMPs_Juv', Int64.Type}, {'PY2END_NSC', type number}, {'PY2END_GDC', type number}, {'PY2END_NMPs_Juv', type number}, {'M12_NSC', type number}, {'M12_GDC', type number}, {'M12_NMPs_Juv', Int64.Type}, {'M24_NSC', type number}, {'M24_GDC', type number}, {'M24_NMPs_Juv', type number}, {'Conference_YE', type text}, {'S7_65_66', type text}, {'S6_LIC_STS_CDE', type text}, {'S7_LIC_STS_CDE', type text}, {'S63_LIC_STS_CDE', type text}, {'S65_LIC_STS_CDE', type text}, {'S66_LIC_STS_CDE', type text}, {'INVS_ADVR_REPR_IND', type text}}),    #'Renamed Columns' = Table.RenameColumns(#'Changed Type',{{'RFO_ID', 'RFO'}, {'Market_ID', 'Market'}, {'EMPL_NM', 'Name'}, {'JOB_TITLE_CODE_2', 'Job Title Code'}, {'JOB_TITLE_NM_2', 'Job Title Name'}, {'MGT_RLTN_END_DATE', 'Termination Date'}, {'Term_Transfer_Status', 'Termination Reason'}, {'Term_ASD_w_BI_byYear', 'Tenure Year'}, {'Conference_YE', 'Conference YE'}, {'S6_LIC_STS_CDE', 'S6 License'}, {'S63_LIC_STS_CDE', 'S63 License'}, {'S65_LIC_STS_CDE', 'S65 License'}, {'S66_LIC_STS_CDE', 'S66 License'}, {'S7_LIC_STS_CDE', 'S7 License'}, {'S7_65_66', 'S7, 65, \u0026 66'}, {'INVS_ADVR_REPR_IND', 'Invs Advr Repr Ind'}})in    #'Renamed Columns'"}]},{"name":"RAR Contracts","isHidden":false,"description":"A weekly roll-up of RAR Contracts.","storageMode":"Import","columns":[{"name":"JOIN VALUE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"ZONE_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_Mkt","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Year","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Week","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Current Wk","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"RAR Contracts","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Contract Goals","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Cumulative Contract Goals","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TAG Contract Goals","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"MVP Contract Goals","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[{"name":"PYTD RAR Contracts","expression":"VAR previous_year = MAX(\u0027RAR Contracts\u0027[Year])-1RETURNCALCULATE(SUM(\u0027RAR Contracts\u0027[RAR Contracts]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]=\u0027RFO-Mkt-Wk\u0027[Current Wk]),    FILTER(\u0027RFO-Mkt-Wk\u0027,VALUE(\u0027RFO-Mkt-Wk\u0027[Year])=previous_year))","isHidden":false},{"name":"YTD RAR Contracts","expression":"VAR current_year = MAX(\u0027RAR Contracts\u0027[Year])RETURNCALCULATE(SUM(\u0027RAR Contracts\u0027[RAR Contracts]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]=\u0027RFO-Mkt-Wk\u0027[Current Wk]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Year]=current_year))","isHidden":false},{"name":"PYTD RAR Contracts Var","expression":"CALCULATE((\u0027RAR Contracts\u0027[YTD RAR Contracts]-\u0027RAR Contracts\u0027[PYTD RAR Contracts])/\u0027RAR Contracts\u0027[PYTD RAR Contracts])","isHidden":false},{"name":"YTD RAR Goals","expression":"VAR current_year = MAX(\u0027RAR Contracts\u0027[Year])RETURNCALCULATE(SUM(\u0027RAR Contracts\u0027[Cumulative Contract Goals]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]=\u0027RFO-Mkt-Wk\u0027[Current Wk]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Year]=current_year))","isHidden":false},{"name":"% RAR Cntrcts Goal","expression":"IFERROR(CALCULATE(\u0027RAR Contracts\u0027[YTD RAR Contracts]/\u0027RAR Contracts\u0027[YTD RAR Goals]),'0%')","isHidden":false},{"name":"YTD TAN Contracts","expression":"VAR current_year = MAX(\u0027RAR Contracts\u0027[Year])RETURNCALCULATE(SUM(\u0027RAR Contracts\u0027[RAR Contracts]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]=\u0027RFO-Mkt-Wk\u0027[Current Wk]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Year]=current_year),FILTER(\u0027RAR Contracts\u0027,\u0027RAR Contracts\u0027[RFO_ID]='716'))","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//Shared//Public//DI and BI//Capacity Dashboard//Capacity Dashboard-RAR_Contracts.xlsx'), null, true),    Sheet1_Sheet = Source{[Item='Sheet1',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'JOIN VALUE', type text}, {'RFO_ID', Int64.Type}, {'ZONE_ID', type text}, {'RFO_Mkt', type text}, {'Type', type text}, {'Year', Int64.Type}, {'Week', Int64.Type}, {'Current Wk', Int64.Type}, {'Count', Int64.Type}}),    #'Renamed Columns' = Table.RenameColumns(#'Changed Type',{{'Count', 'RAR Contracts'}}),    #'Changed Type1' = Table.TransformColumnTypes(#'Renamed Columns',{{'Contract Goals', type number}, {'Cumulative Contract Goals', type number}, {'TAG Contract Goals', type number}, {'MVP Contract Goals', type number}})in    #'Changed Type1'"}]},{"name":"RAR Terminations","isHidden":false,"description":"A weekly roll-up of RAR Terminations","storageMode":"Import","columns":[{"name":"JOIN VALUE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"ZONE_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_Mkt","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Year","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Week","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Current Wk","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"RAR Terminations","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Term Goals","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Cumulative Term Goals","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TAG Term Goals","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP Term Goals","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"YTD RAR Terminations","expression":"VAR current_year = MAX(\u0027RAR Terminations\u0027[Year])RETURNCALCULATE(SUM(\u0027RAR Terminations\u0027[RAR Terminations]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]=\u0027RFO-Mkt-Wk\u0027[Current Wk]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Year]=current_year))","isHidden":false},{"name":"PYTD RAR Terminations","expression":"VAR previous_year = MAX(\u0027RAR Terminations\u0027[Year])-1RETURNCALCULATE(SUM(\u0027RAR Terminations\u0027[RAR Terminations]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]=\u0027RFO-Mkt-Wk\u0027[Current Wk]),    FILTER(\u0027RFO-Mkt-Wk\u0027,VALUE(\u0027RFO-Mkt-Wk\u0027[Year])=previous_year))","isHidden":false},{"name":"PYTD RAR Terminations Var","expression":"CALCULATE((\u0027RAR Terminations\u0027[YTD RAR Terminations]-\u0027RAR Terminations\u0027[PYTD RAR Terminations])/\u0027RAR Terminations\u0027[PYTD RAR Terminations])","isHidden":false},{"name":"% RAR Terms Goal","expression":"IFERROR(CALCULATE(\u0027RAR Terminations\u0027[YTD RAR Terminations]/\u0027RAR Terminations\u0027[YTD RAR Term Goals]),'0%')","isHidden":false},{"name":"YTD RAR Term Goals","expression":"VAR current_year = MAX(\u0027RAR Terminations\u0027[Year])RETURNCALCULATE(SUM(\u0027RAR Terminations\u0027[Cumulative Term Goals]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]=\u0027RFO-Mkt-Wk\u0027[Current Wk]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Year]=current_year))","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//Shared//Public//DI and BI//Capacity Dashboard//Capacity Dashboard-RAR_Terminations.xlsx'), null, true),    Sheet1_Sheet = Source{[Item='Sheet1',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'JOIN VALUE', type text}, {'RFO_ID', Int64.Type}, {'ZONE_ID', type text}, {'RFO_Mkt', type text}, {'Type', type text}, {'Year', Int64.Type}, {'Week', Int64.Type}, {'Current Wk', Int64.Type}, {'Count', Int64.Type}}),    #'Renamed Columns' = Table.RenameColumns(#'Changed Type',{{'Count', 'RAR Terminations'}})in    #'Renamed Columns'"}]},{"name":"RAR Contracts Detail","isHidden":false,"storageMode":"Import","columns":[{"name":"JOIN VALUE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Division_Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Advisor Group","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market_Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market_Leader_Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Contract Begin Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Job Title Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Title Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Recode_CNTRCT_HIRE_STATUS","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CNTRCT_HIRE_STATUS","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"YTD_NSC","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"YTD_GDC","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"S6_LIC_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S7_LIC_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S63_LIC_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S65_LIC_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S66_LIC_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"INVS_ADVR_REPR_IND","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//Shared//Public//DI and BI//Capacity Dashboard//Detail Files.xlsx'), null, true),    #'RAR Contracts Detail_Sheet' = Source{[Item='RAR Contracts Detail',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'RAR Contracts Detail_Sheet', [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'JOIN VALUE', type text}, {'Division_Description', type text}, {'RFO_ID', Int64.Type}, {'RFO_Description', type text}, {'Market_ID', type text}, {'Market_Description', type text}, {'Market_Leader_Name', type text}, {'TSID', type text}, {'EMPL_NM', type text}, {'MGT_RLTN_BEG_DATE', type date}, {'JOB_TITLE_CODE_2', Int64.Type}, {'JOB_TITLE_NM_2', type text}, {'Recode_CNTRCT_HIRE_STATUS', type text}, {'CNTRCT_HIRE_STATUS', Int64.Type}, {'YTD_NSC', type number}, {'YTD_GDC', type number}, {'S6_LIC_STS_CDE', type text}, {'S7_LIC_STS_CDE', type text}, {'S63_LIC_STS_CDE', type text}, {'S65_LIC_STS_CDE', type text}, {'S66_LIC_STS_CDE', type text}, {'INVS_ADVR_REPR_IND', type text}}),    #'Renamed Columns' = Table.RenameColumns(#'Changed Type',{{'MGT_RLTN_BEG_DATE', 'Contract Begin Date'}}),    #'Changed Type1' = Table.TransformColumnTypes(#'Renamed Columns',{{'RFO_ID', type text}, {'JOB_TITLE_CODE_2', type text}}),    #'Renamed Columns1' = Table.RenameColumns(#'Changed Type1',{{'JOB_TITLE_CODE_2', 'Job Title Code'}, {'EMPL_NM', 'Name'}, {'JOB_TITLE_NM_2', 'Job Title Name'}, {'RFO_ID', 'Advisor Group'}})in    #'Renamed Columns1'"}]},{"name":"RAR Terminations Detail","isHidden":false,"storageMode":"Import","columns":[{"name":"JOIN VALUE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Division_Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market_Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market_Leader_Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMPL_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Termination Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"ASD_with_BI","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Term_ASD_w_BI_Tenure","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Term_ASD_w_BI_Segment","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Term_ASD_w_BI_byYear","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Term_Transfer_Status","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CNTRCT_TERMIN_STS","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"JOB_TITLE_CODE_2","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TITLE_NM_2","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"YTD_NSC","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"YTD_GDC","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"YTD_NMPs_Juv","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"PYTD_NSC","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"PYTD_GDC","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"PYTD_NMPs_Juv","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"PY2TD_NSC","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"PY2TD_GDC","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"PY2TD_NMPs_Juv","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"PYEND_NSC","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"PYEND_GDC","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"PYEND_NMPs_Juv","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"PY2END_NSC","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"PY2END_GDC","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"PY2END_NMPs_Juv","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"M12_NSC","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"M12_GDC","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"M12_NMPs_Juv","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"M24_NSC","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"M24_GDC","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"M24_NMPs_Juv","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Conference_YE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S7_65_66","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S6_LIC_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S7_LIC_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S63_LIC_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S65_LIC_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S66_LIC_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"INVS_ADVR_REPR_IND","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//Shared//Public//DI and BI//Capacity Dashboard//Detail Files.xlsx'), null, true),    #'RAR Terminations Detail_Sheet' = Source{[Item='RAR Terminations Detail',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'RAR Terminations Detail_Sheet', [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'JOIN VALUE', type text}, {'Division_Description', type text}, {'RFO_ID', Int64.Type}, {'RFO_Description', type text}, {'Market_ID', type text}, {'Market_Description', type text}, {'Market_Leader_Name', type text}, {'TSID', type text}, {'EMPL_NM', type text}, {'MGT_RLTN_END_DATE', type date}, {'ASD_with_BI', type date}, {'Term_ASD_w_BI_Tenure', type number}, {'Term_ASD_w_BI_Segment', type text}, {'Term_ASD_w_BI_byYear', type text}, {'Term_Transfer_Status', type text}, {'CNTRCT_TERMIN_STS', Int64.Type}, {'JOB_TITLE_CODE_2', Int64.Type}, {'JOB_TITLE_NM_2', type text}, {'YTD_NSC', type number}, {'YTD_GDC', type number}, {'YTD_NMPs_Juv', Int64.Type}, {'PYTD_NSC', type number}, {'PYTD_GDC', type number}, {'PYTD_NMPs_Juv', Int64.Type}, {'PY2TD_NSC', type number}, {'PY2TD_GDC', type number}, {'PY2TD_NMPs_Juv', Int64.Type}, {'PYEND_NSC', type number}, {'PYEND_GDC', type number}, {'PYEND_NMPs_Juv', Int64.Type}, {'PY2END_NSC', type number}, {'PY2END_GDC', type number}, {'PY2END_NMPs_Juv', Int64.Type}, {'M12_NSC', type number}, {'M12_GDC', type number}, {'M12_NMPs_Juv', Int64.Type}, {'M24_NSC', type number}, {'M24_GDC', type number}, {'M24_NMPs_Juv', Int64.Type}, {'Conference_YE', type text}, {'S7_65_66', type text}, {'S6_LIC_STS_CDE', type text}, {'S7_LIC_STS_CDE', type text}, {'S63_LIC_STS_CDE', type text}, {'S65_LIC_STS_CDE', type text}, {'S66_LIC_STS_CDE', type text}, {'INVS_ADVR_REPR_IND', type text}}),    #'Renamed Columns' = Table.RenameColumns(#'Changed Type',{{'MGT_RLTN_END_DATE', 'Termination Date'}})in    #'Renamed Columns'"}]},{"name":"Sort Order - WMFC","isHidden":false,"storageMode":"Import","columns":[{"name":"Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Order","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('Pcu7CsMwDIXhVxGaQ6HX3UuhUGjokCV4EJEMAmMXK+nzx3ah6/efM894dwaUGJxZXpRWgbd8DAc8oh9qVokMTyGW0vTU9T9udO70SLYVSovAWDIfql+6v0LQHwYx05wottO1x0nLulEEx986qnxD73c=', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Type = _t, Order = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Type', type text}, {'Order', Int64.Type}})in    #'Changed Type'"}]},{"name":"Market Leaders + Developers","isHidden":false,"storageMode":"Import","columns":[{"name":"Mkt Lookup Value","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Mkt","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Lookup","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG-MVP-MKT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market-Leader","dataType":"String","isHidden":false,"expression":"\u0027Market Leaders + Developers\u0027[Mkt Lookup Value] \u0026 '-' \u0026 \u0027Market Leaders + Developers\u0027[Name]","columnType":"Calculated"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//public//DI and BI//Field Reporting//Market Leaders + Developers.xlsx'), null, true),    #'Leader Name lookup - PBI_Sheet' = Source{[Item='Leader Name lookup - PBI',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'Leader Name lookup - PBI_Sheet', [PromoteAllScalars=true]),    #'Filtered Rows' = Table.SelectRows(#'Promoted Headers', each ([Mkt Lookup Value] \u003c\u003e null and [Mkt Lookup Value] \u003c\u003e 'n/a')),    #'Removed Columns' = Table.RemoveColumns(#'Filtered Rows',{'Count if'})in    #'Removed Columns'"}]},{"name":"RFO_NM","isHidden":false,"storageMode":"Import","columns":[{"name":"RFO_CODE","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"RFO_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"NM","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Sql.Database('dbedwdwprd', 'EnterpriseDataMart', [Query='SELECT DISTINCT#(lf)       [Department Identifier] RFO_CODE#(lf)      ,[Department Name] RFO_NM#(lf)      ,concat(trim([Department Identifier]),\u0027-\u0027,[Department Name]) as NM#(lf)#(lf) #(lf)#(lf)  FROM [EnterpriseDataMart].[DM_01].[Organization Dimension] #(lf)  where [Department Identifier] in (\u00270283\u0027, \u00270435\u0027,\u00270115\u0027, \u00270190\u0027, #(lf)                \u00270361\u0027, \u00270384\u0027,\u00270291\u0027, \u00270525\u0027,\u00270001\u0027,\u00270383\u0027,\u00270716\u0027,\u00270708\u0027)#(lf)        and [Current Row Indicator] = \u0027Y\u0027#(lf)        and [Effective Begin Date] \u003e \u00271/1/2019\u0027#(lf)        and [Effective End Date] = \u002712/31/9999\u0027']),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'RFO_CODE', Int64.Type}})in    #'Changed Type'"}]},{"name":"List of values in chart","isHidden":false,"storageMode":"Import","columns":[{"name":"Values in chart","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"}],"measures":[{"name":"Selected value","expression":"SWITCH(    SELECTEDVALUE(\u0027List of values in chart\u0027[Values in chart]),    'RC Received', sum(\u0027CP+\u0027[CP+ Exams]),    'Score Qualifying RC', sum(\u0027CP+\u0027[12+ CP+ Scores]))","isHidden":false}],"source":[{"expression":"DATATABLE(    'Values in chart', STRING, {{'RC Received'}, {'Score Qualifying RC'}})"}]},{"name":"Monthly Contracts Terms","isHidden":false,"storageMode":"Import","columns":[{"name":"JOIN VALUE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Year","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Month","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Current Month","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Month Label","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EOM Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Contracts","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Terms","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"CY Contract Goals Monthly","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CY Contract Goals Cumulative","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CY Term Goals Monthly","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CY Term Goals Cumulative","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//Shared//Public//DI and BI//Capacity Dashboard//TAG Contracts and Terms By Month.xlsx'), null, true),    #'Monthly Contracts Terms_Sheet' = Source{[Item='Monthly Contracts Terms',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'Monthly Contracts Terms_Sheet', [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'JOIN VALUE', type text}, {'TAG', Int64.Type}, {'Year', Int64.Type}, {'Month', Int64.Type}, {'Current Month', Int64.Type}, {'Month Label', type text}, {'EOM Date', type date}, {'Contracts', Int64.Type}, {'Terms', Int64.Type}, {'CY Contract Goals Monthly', type number}, {'CY Contract Goals Cumulative', type number}})in    #'Changed Type'"}]},{"name":"Summary Tab Weekly Data","isHidden":false,"storageMode":"Import","columns":[{"name":"Join Value","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG No","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"TAG","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Advisor Group","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Weekly As of Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Current Week Number","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"YTD Goal WCFC","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"WCFC","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"% of YTD Goal WCFC","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"YTD Contract Goal","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"YTD Contracts","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"% of YTD Contract Goal","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Licensing","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Selection","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"YTD CP+","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"YTD Qualifying CP+","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Sort Order","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"TAG Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PYTD WCFC","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"YOY Change","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Current NFA Cap","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Current Vet Cap","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Year-End Contract Goal","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"% of Year-End Contract Goal","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"YTD Terminations","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"YTD Term Goal","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"% of YTD TermGoal","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Year-End Term Goal","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"% of Year-End Term Goal","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[{"name":"% YTD WCFC Goal","expression":"DIVIDE(SUM(\u0027Summary Tab Weekly Data\u0027[WCFC]), SUM(\u0027Summary Tab Weekly Data\u0027[YTD Goal WCFC]),0)","isHidden":false},{"name":"% YTD Contract Goal","expression":"DIVIDE(SUM(\u0027Summary Tab Weekly Data\u0027[YTD Contracts]), SUM(\u0027Summary Tab Weekly Data\u0027[YTD Contract Goal]),0)","isHidden":false},{"name":"% EOY Contract Goal","expression":"DIVIDE(SUM(\u0027Summary Tab Weekly Data\u0027[YTD Contracts]), SUM(\u0027Summary Tab Weekly Data\u0027[Year-End Contract Goal]),0)","isHidden":false},{"name":"% YOY Change","expression":"(SUM(\u0027Summary Tab Weekly Data\u0027[WCFC])-SUM(\u0027Summary Tab Weekly Data\u0027[PYTD WCFC]))/SUM(\u0027Summary Tab Weekly Data\u0027[PYTD WCFC])","isHidden":false},{"name":"% YTD Term Goal","expression":"DIVIDE(SUM(\u0027Summary Tab Weekly Data\u0027[YTD Terminations]), SUM(\u0027Summary Tab Weekly Data\u0027[YTD Term Goal]),0)","isHidden":false},{"name":"% EOY Term Goal","expression":"DIVIDE(SUM(\u0027Summary Tab Weekly Data\u0027[YTD Terminations]), SUM(\u0027Summary Tab Weekly Data\u0027[Year-End Term Goal]),0)","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//Shared//Public//DI and BI//Capacity Dashboard//TAG Contracts and Terms By Month.xlsx'), null, true),    #'Summary Tab Weekly Data_Sheet' = Source{[Item='Summary Tab Weekly Data',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'Summary Tab Weekly Data_Sheet', [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Join Value', type text}, {'TAG No', Int64.Type}, {'TAG', type text}, {'Advisor #(lf)Group', type any}, {'Weekly As of Date', type date}, {'Current Week Number', Int64.Type}, {'YTD Goal WCFC', type number}, {'WCFC', type number}, {'% of #(lf)YTD Goal #(lf)WCFC', type number}, {'YTD Contract Goal', type number}, {'YTD Contracts', Int64.Type}, {'% of #(lf)YTD Contract #(lf)Goal', type number}, {'Licensing', Int64.Type}, {'Selection', Int64.Type}, {'YTD CP+', Int64.Type}, {'YTD Qualifying CP+', Int64.Type}, {'Terminations', Int64.Type}, {'Sort Order', Int64.Type}, {'PYTD WCFC', type number}, {'YOY Change', type number}, {'Current NFA Cap', Int64.Type}, {'Current Vet Cap', Int64.Type}, {'Year-End Contract Goal', Int64.Type}, {'% of Year-End Contract Goal', type number}}),    #'Renamed Columns' = Table.RenameColumns(#'Changed Type',{{'Terminations', 'YTD Terminations'}})in    #'Renamed Columns'"}]},{"name":"FA Out Detail","isHidden":false,"storageMode":"Import","columns":[{"name":"Join Value","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"MVP_ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Zone_ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"CNTRCT_TERMIN_STS","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Term_Transfer_Status","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMPL_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TITLE_CODE_2","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"JOB_TITLE_NM_2","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"OR_CONTRACT_TERM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"OR_CONTRACT_TERM_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"OR_CONTRACT_TERM_YEAR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"MGT_RLTN_END_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"ASD_with_BI","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Term_ASD_w_BI_Tenure","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Term_ASD_w_BI_Segment","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Term_ASD_w_BI_byYear","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FUTURE_TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FUTURE_JOB","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"FUTURE_BEG_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"FUTURE_DIFFERENCE","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DIFFERENCE","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"YearSort1","dataType":"String","isHidden":false,"expression":"-( \u0027FA Out Detail\u0027[OR_CONTRACT_TERM_YEAR])","columnType":"Calculated"},{"name":"Term Sts Sort1","dataType":"String","isHidden":false,"expression":"SWITCH(\u0027FA Out Detail\u0027[Term_Transfer_Status],'Resign', '1-Resign','Retire', '2-Retire','Lower Transfer', '3-Lower Transfer','Higher Transfer', '4-Higher Transfer','HO Transfer', '5-HO Transfer','Involuntary', '6-Involuntary','Deceased', '7-Deceased','Other', '8-Other')","columnType":"Calculated"},{"name":"Term Year","dataType":"String","isHidden":false,"expression":"(\u0027FA Out Detail\u0027[OR_CONTRACT_TERM_YEAR])","columnType":"Calculated"},{"name":"Term Status","dataType":"String","isHidden":false,"expression":"\u0027FA Out Detail\u0027[Term_Transfer_Status]","columnType":"Calculated"}],"measures":[{"name":"Count1","expression":"COUNT(\u0027FA Out Detail\u0027[TSID])","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Capacity Dashboard//Capacity Dashboard-FA_Out_Detail.xlsx'), null, true),    Sheet1_Sheet = Source{[Item='Sheet1',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Join Value', type text}, {'RFO_ID', Int64.Type}, {'MVP_ID', Int64.Type}, {'Zone_ID', Int64.Type}, {'CNTRCT_TERMIN_STS', Int64.Type}, {'Term_Transfer_Status', type text}, {'TSID', type text}, {'EMPL_NM', type text}, {'JOB_TITLE_CODE_2', Int64.Type}, {'JOB_TITLE_NM_2', type text}, {'OR_CONTRACT_TERM', type text}, {'OR_CONTRACT_TERM_DATE', type date}, {'OR_CONTRACT_TERM_YEAR', Int64.Type}, {'MGT_RLTN_END_DATE', type date}, {'ASD_with_BI', type date}, {'Term_ASD_w_BI_Tenure', type number}, {'Term_ASD_w_BI_Segment', type text}, {'Term_ASD_w_BI_byYear', type text}, {'FUTURE_TSID', type text}, {'FUTURE_JOB', Int64.Type}, {'FUTURE_BEG_DATE', type date}, {'FUTURE_DIFFERENCE', Int64.Type}, {'DIFFERENCE', Int64.Type}})in    #'Changed Type'"}]},{"name":"Offer Acepted","isHidden":false,"storageMode":"Import","columns":[{"name":"JOIN VALUE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"ZONE_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_Mkt","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Year","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Week","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Current Wk","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Count","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Curr Offer Accepted","expression":"var current_year = MAX(\u0027Offer Acepted\u0027[Year])RETURN CALCULATE(SUM(\u0027Offer Acepted\u0027[Count]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]=\u0027RFO-Mkt-Wk\u0027[Current Wk]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Year]=current_year))","isHidden":false},{"name":"PYTD Offer Accepted","expression":"var previous_year = MAX(\u0027Offer Acepted\u0027[Year])-1RETURNCALCULATE(SUM(\u0027Offer Acepted\u0027[Count]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]\u003c=(\u0027RFO-Mkt-Wk\u0027[Current Wk])),    FILTER(\u0027RFO-Mkt-Wk\u0027,VALUE(\u0027RFO-Mkt-Wk\u0027[Year])=previous_year))","isHidden":false},{"name":"PYTD Offer Accepted Var","expression":"CALCULATE((\u0027Offer Acepted\u0027[CY Offer Accepted]-\u0027Offer Acepted\u0027[PYTD Offer Accepted])/\u0027Offer Acepted\u0027[PYTD Offer Accepted])","isHidden":false},{"name":"PY CW Offer Accepted","expression":"var previous_year = MAX(\u0027Offer Acepted\u0027[Year])-1RETURNCALCULATE(SUM(\u0027Offer Acepted\u0027[Count]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Week]=\u0027RFO-Mkt-Wk\u0027[Current Wk]),    FILTER(\u0027RFO-Mkt-Wk\u0027,VALUE(\u0027RFO-Mkt-Wk\u0027[Year])=previous_year))","isHidden":false},{"name":"CY Offer Accepted","expression":"var current_year = MAX(\u0027Offer Acepted\u0027[Year])RETURN CALCULATE(SUM(\u0027Offer Acepted\u0027[Count]),    FILTER(\u0027RFO-Mkt-Wk\u0027,\u0027RFO-Mkt-Wk\u0027[Year]=current_year))","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Capacity Dashboard//Capacity Dashboard-Offer Accepted.xlsx'), null, true),    #'Offer Acepted_Sheet' = Source{[Item='Offer Acepted',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'Offer Acepted_Sheet', [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'JOIN VALUE', type text}, {'RFO_ID', Int64.Type}, {'ZONE_ID', type text}, {'RFO_Mkt', type text}, {'Type', type text}, {'Year', Int64.Type}, {'Week', Int64.Type}, {'Current Wk', Int64.Type}, {'Count', Int64.Type}})in    #'Changed Type'"}]}],"expressions":[{"name":"Errors in FP Capacity","expression":"letSource = #'FP Capacity',  #'Detected Type Mismatches' = let    tableWithOnlyPrimitiveTypes = Table.SelectColumns(Source, Table.ColumnsOfType(Source, {type nullable number, type nullable text, type nullable logical, type nullable date, type nullable datetime, type nullable datetimezone, type nullable time, type nullable duration})),    recordTypeFields = Type.RecordFields(Type.TableRow(Value.Type(tableWithOnlyPrimitiveTypes))),    fieldNames = Record.FieldNames(recordTypeFields),    fieldTypes = List.Transform(Record.ToList(recordTypeFields), each [Type]),    pairs = List.Transform(List.Positions(fieldNames), (i) =\u003e {fieldNames{i}, (v) =\u003e if Value.Is(v, fieldTypes{i}) then v else error [Message = 'The type of the value does not match the type of the column.', Detail = v], fieldTypes{i}})in    Table.TransformColumns(Source, pairs),  #'Added Index' = Table.AddIndexColumn(#'Detected Type Mismatches', 'Row Number' ,1),  #'Reordered Columns' = Table.ReorderColumns(#'Added Index', {'Row Number', 'JOIN VALUE', 'RFO_ID', 'Market', 'RFO_Mkt', 'Type', 'Year', 'Week', 'FP Capacity', 'NFR Capacity', 'Vet Capacity'})in  #'Reordered Columns'"},{"name":"Errors in Scorecard","expression":"letSource = Scorecard,  #'Detected Type Mismatches' = let    tableWithOnlyPrimitiveTypes = Table.SelectColumns(Source, Table.ColumnsOfType(Source, {type nullable number, type nullable text, type nullable logical, type nullable date, type nullable datetime, type nullable datetimezone, type nullable time, type nullable duration})),    recordTypeFields = Type.RecordFields(Type.TableRow(Value.Type(tableWithOnlyPrimitiveTypes))),    fieldNames = Record.FieldNames(recordTypeFields),    fieldTypes = List.Transform(Record.ToList(recordTypeFields), each [Type]),    pairs = List.Transform(List.Positions(fieldNames), (i) =\u003e {fieldNames{i}, (v) =\u003e if v = null or Value.Is(v, fieldTypes{i}) then v else error [Message = 'The type of the value does not match the type of the column.', Detail = v], fieldTypes{i}})in    Table.TransformColumns(Source, pairs),  #'Added Index' = Table.AddIndexColumn(#'Detected Type Mismatches', 'Row Number' ,1),  #'Kept Errors' = Table.SelectRowsWithErrors(#'Added Index', {'RFO_ID', 'ZONE_ID', 'RFO_Mkt', 'Year', 'JOIN VALUE', 'CP+ Week', 'CP+ YTD', 'Selection', 'Licensing', 'Red Role', 'Weekly New Contracts', 'YTD New Contracts', 'Year-End Contract Goal', 'YTD Gender Contracts', 'Contracts Meeting Assessment Standards', 'Pct Contracts Meeting Assessment Standards', 'Warm Sourced Contracts YTD', 'Pct Warm Sourced Contracts YTD', 'Weekly FPs Lost to Attrition', 'YTD FRs Lost to Attrition', 'RFO Transfers', 'Other Transfers', 'Baseline', 'Current Capacity', '%  Change', 'Net Change', 'Year-End Goal', '% Warm Sourced Contracts', '% Meeting Standards'}),  #'Reordered Columns' = Table.ReorderColumns(#'Kept Errors', {'Row Number', 'RFO_ID', 'ZONE_ID', 'RFO_Mkt', 'Year', 'JOIN VALUE', 'CP+ Week', 'CP+ YTD', 'Selection', 'Licensing', 'Red Role', 'Weekly New Contracts', 'YTD New Contracts', 'Year-End Contract Goal', 'YTD Gender Contracts', 'Contracts Meeting Assessment Standards', 'Pct Contracts Meeting Assessment Standards', 'Warm Sourced Contracts YTD', 'Pct Warm Sourced Contracts YTD', 'Weekly FPs Lost to Attrition', 'YTD FRs Lost to Attrition', 'RFO Transfers', 'Other Transfers', 'Baseline', 'Current Capacity', '%  Change', 'Net Change', 'Year-End Goal', '% Warm Sourced Contracts', '% Meeting Standards'})in  #'Reordered Columns'"},{"name":"Errors in Scorecard (2)","expression":"letSource = Scorecard,  #'Detected Type Mismatches' = let    tableWithOnlyPrimitiveTypes = Table.SelectColumns(Source, Table.ColumnsOfType(Source, {type nullable number, type nullable text, type nullable logical, type nullable date, type nullable datetime, type nullable datetimezone, type nullable time, type nullable duration})),    recordTypeFields = Type.RecordFields(Type.TableRow(Value.Type(tableWithOnlyPrimitiveTypes))),    fieldNames = Record.FieldNames(recordTypeFields),    fieldTypes = List.Transform(Record.ToList(recordTypeFields), each [Type]),    pairs = List.Transform(List.Positions(fieldNames), (i) =\u003e {fieldNames{i}, (v) =\u003e if v = null or Value.Is(v, fieldTypes{i}) then v else error [Message = 'The type of the value does not match the type of the column.', Detail = v], fieldTypes{i}})in    Table.TransformColumns(Source, pairs)in    #'Detected Type Mismatches'"},{"name":"Errors in RFO-Mkt-Wk","expression":"letSource = #'RFO-Mkt-Wk',  #'Detected Type Mismatches' = let    tableWithOnlyPrimitiveTypes = Table.SelectColumns(Source, Table.ColumnsOfType(Source, {type nullable number, type nullable text, type nullable logical, type nullable date, type nullable datetime, type nullable datetimezone, type nullable time, type nullable duration})),    recordTypeFields = Type.RecordFields(Type.TableRow(Value.Type(tableWithOnlyPrimitiveTypes))),    fieldNames = Record.FieldNames(recordTypeFields),    fieldTypes = List.Transform(Record.ToList(recordTypeFields), each [Type]),    pairs = List.Transform(List.Positions(fieldNames), (i) =\u003e {fieldNames{i}, (v) =\u003e if v = null or Value.Is(v, fieldTypes{i}) then v else error [Message = 'The type of the value does not match the type of the column.', Detail = v], fieldTypes{i}})in    Table.TransformColumns(Source, pairs),  #'Added Index' = Table.AddIndexColumn(#'Detected Type Mismatches', 'Row Number' ,1),  #'Kept Errors' = Table.SelectRowsWithErrors(#'Added Index', {'Region', 'Division', 'JOIN VALUE', 'RFO', 'Market', 'RFO_Mkt', 'Year', 'Week', 'Current Wk', 'MVP Filter', 'Market Filter'}),  #'Reordered Columns' = Table.ReorderColumns(#'Kept Errors', {'Row Number', 'Region', 'Division', 'JOIN VALUE', 'RFO', 'Market', 'RFO_Mkt', 'Year', 'Week', 'Current Wk', 'MVP Filter', 'Market Filter'}),    #'Removed Columns' = Table.RemoveColumns(#'Reordered Columns',{'Market'})in  #'Removed Columns'"},{"name":"Errors in FP Capacity (2)","expression":"letSource = #'FP Capacity',  #'Detected Type Mismatches' = let    tableWithOnlyPrimitiveTypes = Table.SelectColumns(Source, Table.ColumnsOfType(Source, {type nullable number, type nullable text, type nullable logical, type nullable date, type nullable datetime, type nullable datetimezone, type nullable time, type nullable duration})),    recordTypeFields = Type.RecordFields(Type.TableRow(Value.Type(tableWithOnlyPrimitiveTypes))),    fieldNames = Record.FieldNames(recordTypeFields),    fieldTypes = List.Transform(Record.ToList(recordTypeFields), each [Type]),    pairs = List.Transform(List.Positions(fieldNames), (i) =\u003e {fieldNames{i}, (v) =\u003e if v = null or Value.Is(v, fieldTypes{i}) then v else error [Message = 'The type of the value does not match the type of the column.', Detail = v], fieldTypes{i}})in    Table.TransformColumns(Source, pairs),  #'Added Index' = Table.AddIndexColumn(#'Detected Type Mismatches', 'Row Number' ,1),  #'Kept Errors' = Table.SelectRowsWithErrors(#'Added Index', {'JOIN VALUE', 'RFO', 'Market', 'RFO_Mkt', 'Type', 'Year', 'Week', 'Current Wk', 'FP Capacity', 'NFR Capacity', 'Vet Capacity'}),  #'Reordered Columns' = Table.ReorderColumns(#'Kept Errors', {'Row Number', 'JOIN VALUE', 'RFO', 'Market', 'RFO_Mkt', 'Type', 'Year', 'Week', 'Current Wk', 'FP Capacity', 'NFR Capacity', 'Vet Capacity'})in  #'Reordered Columns'"},{"name":"Errors in FP Contracts","expression":"letSource = #'FP Contracts',  #'Detected Type Mismatches' = let    tableWithOnlyPrimitiveTypes = Table.SelectColumns(Source, Table.ColumnsOfType(Source, {type nullable number, type nullable text, type nullable logical, type nullable date, type nullable datetime, type nullable datetimezone, type nullable time, type nullable duration})),    recordTypeFields = Type.RecordFields(Type.TableRow(Value.Type(tableWithOnlyPrimitiveTypes))),    fieldNames = Record.FieldNames(recordTypeFields),    fieldTypes = List.Transform(Record.ToList(recordTypeFields), each [Type]),    pairs = List.Transform(List.Positions(fieldNames), (i) =\u003e {fieldNames{i}, (v) =\u003e if v = null or Value.Is(v, fieldTypes{i}) then v else error [Message = 'The type of the value does not match the type of the column.', Detail = v], fieldTypes{i}})in    Table.TransformColumns(Source, pairs),  #'Added Index' = Table.AddIndexColumn(#'Detected Type Mismatches', 'Row Number' ,1),  #'Kept Errors' = Table.SelectRowsWithErrors(#'Added Index', {'JOIN VALUE', 'RFO', 'Market', 'RFO_Mkt', 'Type', 'Year', 'Week', 'Current Wk', 'FP Contracts'}),  #'Reordered Columns' = Table.ReorderColumns(#'Kept Errors', {'Row Number', 'JOIN VALUE', 'RFO', 'Market', 'RFO_Mkt', 'Type', 'Year', 'Week', 'Current Wk', 'FP Contracts'})in  #'Reordered Columns'"},{"name":"Errors in FP Terminations","expression":"letSource = #'FP Terminations',  #'Detected Type Mismatches' = let    tableWithOnlyPrimitiveTypes = Table.SelectColumns(Source, Table.ColumnsOfType(Source, {type nullable number, type nullable text, type nullable logical, type nullable date, type nullable datetime, type nullable datetimezone, type nullable time, type nullable duration})),    recordTypeFields = Type.RecordFields(Type.TableRow(Value.Type(tableWithOnlyPrimitiveTypes))),    fieldNames = Record.FieldNames(recordTypeFields),    fieldTypes = List.Transform(Record.ToList(recordTypeFields), each [Type]),    pairs = List.Transform(List.Positions(fieldNames), (i) =\u003e {fieldNames{i}, (v) =\u003e if v = null or Value.Is(v, fieldTypes{i}) then v else error [Message = 'The type of the value does not match the type of the column.', Detail = v], fieldTypes{i}})in    Table.TransformColumns(Source, pairs),  #'Added Index' = Table.AddIndexColumn(#'Detected Type Mismatches', 'Row Number' ,1),  #'Kept Errors' = Table.SelectRowsWithErrors(#'Added Index', {'JOIN VALUE', 'RFO', 'Market', 'RFO_Mkt', 'Type', 'Year', 'Week', 'Current Wk', 'FP Terminations'}),  #'Reordered Columns' = Table.ReorderColumns(#'Kept Errors', {'Row Number', 'JOIN VALUE', 'RFO', 'Market', 'RFO_Mkt', 'Type', 'Year', 'Week', 'Current Wk', 'FP Terminations'})in  #'Reordered Columns'"},{"name":"Errors in RR Capacity","expression":"letSource = #'RR Capacity',  #'Detected Type Mismatches' = let    tableWithOnlyPrimitiveTypes = Table.SelectColumns(Source, Table.ColumnsOfType(Source, {type nullable number, type nullable text, type nullable logical, type nullable date, type nullable datetime, type nullable datetimezone, type nullable time, type nullable duration})),    recordTypeFields = Type.RecordFields(Type.TableRow(Value.Type(tableWithOnlyPrimitiveTypes))),    fieldNames = Record.FieldNames(recordTypeFields),    fieldTypes = List.Transform(Record.ToList(recordTypeFields), each [Type]),    pairs = List.Transform(List.Positions(fieldNames), (i) =\u003e {fieldNames{i}, (v) =\u003e if v = null or Value.Is(v, fieldTypes{i}) then v else error [Message = 'The type of the value does not match the type of the column.', Detail = v], fieldTypes{i}})in    Table.TransformColumns(Source, pairs),  #'Added Index' = Table.AddIndexColumn(#'Detected Type Mismatches', 'Row Number' ,1),  #'Kept Errors' = Table.SelectRowsWithErrors(#'Added Index', {'JOIN VALUE', 'RFO', 'Market', 'RFO_Mkt', 'Type', 'Year', 'Week', 'Current Wk', 'Red Role Capacity'}),  #'Reordered Columns' = Table.ReorderColumns(#'Kept Errors', {'Row Number', 'JOIN VALUE', 'RFO', 'Market', 'RFO_Mkt', 'Type', 'Year', 'Week', 'Current Wk', 'Red Role Capacity'})in  #'Reordered Columns'"},{"name":"Errors in Licensing","expression":"letSource = Licensing,  #'Detected Type Mismatches' = let    tableWithOnlyPrimitiveTypes = Table.SelectColumns(Source, Table.ColumnsOfType(Source, {type nullable number, type nullable text, type nullable logical, type nullable date, type nullable datetime, type nullable datetimezone, type nullable time, type nullable duration})),    recordTypeFields = Type.RecordFields(Type.TableRow(Value.Type(tableWithOnlyPrimitiveTypes))),    fieldNames = Record.FieldNames(recordTypeFields),    fieldTypes = List.Transform(Record.ToList(recordTypeFields), each [Type]),    pairs = List.Transform(List.Positions(fieldNames), (i) =\u003e {fieldNames{i}, (v) =\u003e if v = null or Value.Is(v, fieldTypes{i}) then v else error [Message = 'The type of the value does not match the type of the column.', Detail = v], fieldTypes{i}})in    Table.TransformColumns(Source, pairs),  #'Added Index' = Table.AddIndexColumn(#'Detected Type Mismatches', 'Row Number' ,1),  #'Kept Errors' = Table.SelectRowsWithErrors(#'Added Index', {'JOIN VALUE', 'RFO', 'Market', 'RFO_Mkt', 'Type', 'Year', 'Week', 'Current Wk', 'Licensing Count'}),  #'Reordered Columns' = Table.ReorderColumns(#'Kept Errors', {'Row Number', 'JOIN VALUE', 'RFO', 'Market', 'RFO_Mkt', 'Type', 'Year', 'Week', 'Current Wk', 'Licensing Count'})in  #'Reordered Columns'"},{"name":"Errors in Selection","expression":"letSource = Selection,  #'Detected Type Mismatches' = let    tableWithOnlyPrimitiveTypes = Table.SelectColumns(Source, Table.ColumnsOfType(Source, {type nullable number, type nullable text, type nullable logical, type nullable date, type nullable datetime, type nullable datetimezone, type nullable time, type nullable duration})),    recordTypeFields = Type.RecordFields(Type.TableRow(Value.Type(tableWithOnlyPrimitiveTypes))),    fieldNames = Record.FieldNames(recordTypeFields),    fieldTypes = List.Transform(Record.ToList(recordTypeFields), each [Type]),    pairs = List.Transform(List.Positions(fieldNames), (i) =\u003e {fieldNames{i}, (v) =\u003e if v = null or Value.Is(v, fieldTypes{i}) then v else error [Message = 'The type of the value does not match the type of the column.', Detail = v], fieldTypes{i}})in    Table.TransformColumns(Source, pairs),  #'Added Index' = Table.AddIndexColumn(#'Detected Type Mismatches', 'Row Number' ,1),  #'Kept Errors' = Table.SelectRowsWithErrors(#'Added Index', {'JOIN VALUE', 'RFO', 'Market', 'RFO_Mkt', 'Type', 'Year', 'Week', 'Current Wk', 'Selection Count'}),  #'Reordered Columns' = Table.ReorderColumns(#'Kept Errors', {'Row Number', 'JOIN VALUE', 'RFO', 'Market', 'RFO_Mkt', 'Type', 'Year', 'Week', 'Current Wk', 'Selection Count'})in  #'Reordered Columns'"},{"name":"Errors in CP+","expression":"letSource = #'CP+',  #'Detected Type Mismatches' = let    tableWithOnlyPrimitiveTypes = Table.SelectColumns(Source, Table.ColumnsOfType(Source, {type nullable number, type nullable text, type nullable logical, type nullable date, type nullable datetime, type nullable datetimezone, type nullable time, type nullable duration})),    recordTypeFields = Type.RecordFields(Type.TableRow(Value.Type(tableWithOnlyPrimitiveTypes))),    fieldNames = Record.FieldNames(recordTypeFields),    fieldTypes = List.Transform(Record.ToList(recordTypeFields), each [Type]),    pairs = List.Transform(List.Positions(fieldNames), (i) =\u003e {fieldNames{i}, (v) =\u003e if v = null or Value.Is(v, fieldTypes{i}) then v else error [Message = 'The type of the value does not match the type of the column.', Detail = v], fieldTypes{i}})in    Table.TransformColumns(Source, pairs),  #'Added Index' = Table.AddIndexColumn(#'Detected Type Mismatches', 'Row Number' ,1),  #'Kept Errors' = Table.SelectRowsWithErrors(#'Added Index', {'JOIN VALUE', 'RFO', 'Market', 'RFO_Mkt', 'Type', 'Year', 'Week', 'Current Wk', 'CP+ Exams', '12+ CP+ Scores', 'YTD Cumulative CP+ Counts', 'Cumulative CP+ Above'}),  #'Reordered Columns' = Table.ReorderColumns(#'Kept Errors', {'Row Number', 'JOIN VALUE', 'RFO', 'Market', 'RFO_Mkt', 'Type', 'Year', 'Week', 'Current Wk', 'CP+ Exams', '12+ CP+ Scores', 'YTD Cumulative CP+ Counts', 'Cumulative CP+ Above'})in  #'Reordered Columns'"},{"name":"Errors in Contracts Detail","expression":"letSource = #'FA Contracts Detail',  #'Detected Type Mismatches' = let    tableWithOnlyPrimitiveTypes = Table.SelectColumns(Source, Table.ColumnsOfType(Source, {type nullable number, type nullable text, type nullable logical, type nullable date, type nullable datetime, type nullable datetimezone, type nullable time, type nullable duration})),    recordTypeFields = Type.RecordFields(Type.TableRow(Value.Type(tableWithOnlyPrimitiveTypes))),    fieldNames = Record.FieldNames(recordTypeFields),    fieldTypes = List.Transform(Record.ToList(recordTypeFields), each [Type]),    pairs = List.Transform(List.Positions(fieldNames), (i) =\u003e {fieldNames{i}, (v) =\u003e if v = null or Value.Is(v, fieldTypes{i}) then v else error [Message = 'The type of the value does not match the type of the column.', Detail = v], fieldTypes{i}})in    Table.TransformColumns(Source, pairs),  #'Added Index' = Table.AddIndexColumn(#'Detected Type Mismatches', 'Row Number' ,1),  #'Kept Errors' = Table.SelectRowsWithErrors(#'Added Index', {'JOIN VALUE', 'Division_Description', 'RFO', 'RFO_Description', 'Market', 'Market_Description', 'Market_Leader_Name', 'TSID', 'Name', 'Contract Begin Date', 'Job Title Code', 'Job Title Name', 'Recode_CNTRCT_HIRE_STATUS', 'CNTRCT_HIRE_STATUS', 'YTD_NSC', 'YTD_GDC', 'S6_LIC_STS_CDE', 'S7_LIC_STS_CDE', 'S63_LIC_STS_CDE', 'S65_LIC_STS_CDE', 'S66_LIC_STS_CDE', 'INVS_ADVR_REPR_IND'}),  #'Reordered Columns' = Table.ReorderColumns(#'Kept Errors', {'Row Number', 'JOIN VALUE', 'Division_Description', 'RFO', 'RFO_Description', 'Market', 'Market_Description', 'Market_Leader_Name', 'TSID', 'Name', 'Contract Begin Date', 'Job Title Code', 'Job Title Name', 'Recode_CNTRCT_HIRE_STATUS', 'CNTRCT_HIRE_STATUS', 'YTD_NSC', 'YTD_GDC', 'S6_LIC_STS_CDE', 'S7_LIC_STS_CDE', 'S63_LIC_STS_CDE', 'S65_LIC_STS_CDE', 'S66_LIC_STS_CDE', 'INVS_ADVR_REPR_IND'})in  #'Reordered Columns'"},{"name":"Errors in Terminations Detail","expression":"letSource = #'FA Terminations Detail',  #'Detected Type Mismatches' = let    tableWithOnlyPrimitiveTypes = Table.SelectColumns(Source, Table.ColumnsOfType(Source, {type nullable number, type nullable text, type nullable logical, type nullable date, type nullable datetime, type nullable datetimezone, type nullable time, type nullable duration})),    recordTypeFields = Type.RecordFields(Type.TableRow(Value.Type(tableWithOnlyPrimitiveTypes))),    fieldNames = Record.FieldNames(recordTypeFields),    fieldTypes = List.Transform(Record.ToList(recordTypeFields), each [Type]),    pairs = List.Transform(List.Positions(fieldNames), (i) =\u003e {fieldNames{i}, (v) =\u003e if v = null or Value.Is(v, fieldTypes{i}) then v else error [Message = 'The type of the value does not match the type of the column.', Detail = v], fieldTypes{i}})in    Table.TransformColumns(Source, pairs),  #'Added Index' = Table.AddIndexColumn(#'Detected Type Mismatches', 'Row Number' ,1),  #'Kept Errors' = Table.SelectRowsWithErrors(#'Added Index', {'JOIN VALUE', 'Division_Description', 'RFO', 'RFO_Description', 'Market', 'Market_Description', 'Market_Leader_Name', 'TSID', 'Name', 'Termination Date', 'ASD_with_BI', 'Term_ASD_w_BI_Tenure', 'Term_ASD_w_BI_Segment', 'Tenure Year', 'Termination Reason', 'CNTRCT_TERMIN_STS', 'Job Title Code', 'Job Title Name', 'YTD_NSC', 'YTD_GDC', 'YTD_NMPs_Juv', 'PYTD_NSC', 'PYTD_GDC', 'PYTD_NMPs_Juv', 'PY2TD_NSC', 'PY2TD_GDC', 'PY2TD_NMPs_Juv', 'PYEND_NSC', 'PYEND_GDC', 'PYEND_NMPs_Juv', 'PY2END_NSC', 'PY2END_GDC', 'PY2END_NMPs_Juv', 'M12_NSC', 'M12_GDC', 'M12_NMPs_Juv', 'M24_NSC', 'M24_GDC', 'M24_NMPs_Juv', 'Conference YE', 'S7, 65, \u0026 66', 'S6 License', 'S7 License', 'S63 License', 'S65 License', 'S66 License', 'Invs Advr Repr Ind'}),  #'Reordered Columns' = Table.ReorderColumns(#'Kept Errors', {'Row Number', 'JOIN VALUE', 'Division_Description', 'RFO', 'RFO_Description', 'Market', 'Market_Description', 'Market_Leader_Name', 'TSID', 'Name', 'Termination Date', 'ASD_with_BI', 'Term_ASD_w_BI_Tenure', 'Term_ASD_w_BI_Segment', 'Tenure Year', 'Termination Reason', 'CNTRCT_TERMIN_STS', 'Job Title Code', 'Job Title Name', 'YTD_NSC', 'YTD_GDC', 'YTD_NMPs_Juv', 'PYTD_NSC', 'PYTD_GDC', 'PYTD_NMPs_Juv', 'PY2TD_NSC', 'PY2TD_GDC', 'PY2TD_NMPs_Juv', 'PYEND_NSC', 'PYEND_GDC', 'PYEND_NMPs_Juv', 'PY2END_NSC', 'PY2END_GDC', 'PY2END_NMPs_Juv', 'M12_NSC', 'M12_GDC', 'M12_NMPs_Juv', 'M24_NSC', 'M24_GDC', 'M24_NMPs_Juv', 'Conference YE', 'S7, 65, \u0026 66', 'S6 License', 'S7 License', 'S63 License', 'S65 License', 'S66 License', 'Invs Advr Repr Ind'})in  #'Reordered Columns'"},{"name":"Errors in RR Detail","expression":"letSource = #'RR Detail',  #'Detected Type Mismatches' = let    tableWithOnlyPrimitiveTypes = Table.SelectColumns(Source, Table.ColumnsOfType(Source, {type nullable number, type nullable text, type nullable logical, type nullable date, type nullable datetime, type nullable datetimezone, type nullable time, type nullable duration})),    recordTypeFields = Type.RecordFields(Type.TableRow(Value.Type(tableWithOnlyPrimitiveTypes))),    fieldNames = Record.FieldNames(recordTypeFields),    fieldTypes = List.Transform(Record.ToList(recordTypeFields), each [Type]),    pairs = List.Transform(List.Positions(fieldNames), (i) =\u003e {fieldNames{i}, (v) =\u003e if v = null or Value.Is(v, fieldTypes{i}) then v else error [Message = 'The type of the value does not match the type of the column.', Detail = v], fieldTypes{i}})in    Table.TransformColumns(Source, pairs),  #'Added Index' = Table.AddIndexColumn(#'Detected Type Mismatches', 'Row Number' ,1),  #'Kept Errors' = Table.SelectRowsWithErrors(#'Added Index', {'JOIN VALUE', 'Division_Description', 'RFO', 'RFO_Description', 'Market', 'Zone_Description', 'Market Leader Name', 'TSID', 'Name', 'Job Title Code', 'Job Title Name', 'Red Role Hire Date', 'Tenure'}),  #'Reordered Columns' = Table.ReorderColumns(#'Kept Errors', {'Row Number', 'JOIN VALUE', 'Division_Description', 'RFO', 'RFO_Description', 'Market', 'Zone_Description', 'Market Leader Name', 'TSID', 'Name', 'Job Title Code', 'Job Title Name', 'Red Role Hire Date', 'Tenure'})in  #'Reordered Columns'"},{"name":"Errors in Scorecard (3)","expression":"letSource = Scorecard,  #'Detected Type Mismatches' = let    tableWithOnlyPrimitiveTypes = Table.SelectColumns(Source, Table.ColumnsOfType(Source, {type nullable number, type nullable text, type nullable logical, type nullable date, type nullable datetime, type nullable datetimezone, type nullable time, type nullable duration})),    recordTypeFields = Type.RecordFields(Type.TableRow(Value.Type(tableWithOnlyPrimitiveTypes))),    fieldNames = Record.FieldNames(recordTypeFields),    fieldTypes = List.Transform(Record.ToList(recordTypeFields), each [Type]),    pairs = List.Transform(List.Positions(fieldNames), (i) =\u003e {fieldNames{i}, (v) =\u003e if v = null or Value.Is(v, fieldTypes{i}) then v else error [Message = 'The type of the value does not match the type of the column.', Detail = v], fieldTypes{i}})in    Table.TransformColumns(Source, pairs),  #'Added Index' = Table.AddIndexColumn(#'Detected Type Mismatches', 'Row Number' ,1),  #'Kept Errors' = Table.SelectRowsWithErrors(#'Added Index', {'RFO_ID', 'ZONE_ID', 'RFO_Mkt', 'Year', 'JOIN VALUE', 'CP+ Week', 'CP+ YTD', 'Selection', 'Licensing', 'Red Role', 'Weekly New Contracts', 'YTD New Contracts', 'Year-End Contract Goal', 'YTD Gender Contracts', 'Contracts Meeting Assessment Standards', 'Pct Contracts Meeting Assessment Standards', 'Warm Sourced Contracts YTD', 'Pct Warm Sourced Contracts YTD', 'Weekly FPs Lost to Attrition', 'YTD FRs Lost to Attrition', 'RFO Transfers', 'Other Transfers', 'Baseline', 'Current Capacity', '%  Change', 'Net Change', 'Year-End Goal', '% Warm Sourced Contracts', '% Meeting Standards'}),  #'Reordered Columns' = Table.ReorderColumns(#'Kept Errors', {'Row Number', 'RFO_ID', 'ZONE_ID', 'RFO_Mkt', 'Year', 'JOIN VALUE', 'CP+ Week', 'CP+ YTD', 'Selection', 'Licensing', 'Red Role', 'Weekly New Contracts', 'YTD New Contracts', 'Year-End Contract Goal', 'YTD Gender Contracts', 'Contracts Meeting Assessment Standards', 'Pct Contracts Meeting Assessment Standards', 'Warm Sourced Contracts YTD', 'Pct Warm Sourced Contracts YTD', 'Weekly FPs Lost to Attrition', 'YTD FRs Lost to Attrition', 'RFO Transfers', 'Other Transfers', 'Baseline', 'Current Capacity', '%  Change', 'Net Change', 'Year-End Goal', '% Warm Sourced Contracts', '% Meeting Standards'}),    #'Changed Type' = Table.TransformColumnTypes(#'Reordered Columns',{{'ZONE_ID', type text}})in  #'Changed Type'"},{"name":"Errors in RFO-Mkt-Wk (2)","expression":"letSource = #'RFO-Mkt-Wk',  #'Detected Type Mismatches' = let    tableWithOnlyPrimitiveTypes = Table.SelectColumns(Source, Table.ColumnsOfType(Source, {type nullable number, type nullable text, type nullable logical, type nullable date, type nullable datetime, type nullable datetimezone, type nullable time, type nullable duration})),    recordTypeFields = Type.RecordFields(Type.TableRow(Value.Type(tableWithOnlyPrimitiveTypes))),    fieldNames = Record.FieldNames(recordTypeFields),    fieldTypes = List.Transform(Record.ToList(recordTypeFields), each [Type]),    pairs = List.Transform(List.Positions(fieldNames), (i) =\u003e {fieldNames{i}, (v) =\u003e if v = null or Value.Is(v, fieldTypes{i}) then v else error [Message = 'The type of the value does not match the type of the column.', Detail = v], fieldTypes{i}})in    Table.TransformColumns(Source, pairs),  #'Added Index' = Table.AddIndexColumn(#'Detected Type Mismatches', 'Row Number' ,1),  #'Kept Errors' = Table.SelectRowsWithErrors(#'Added Index', {'Region', 'Division', 'JOIN VALUE', 'RFO', 'Market', 'RFO_Mkt', 'Year', 'Week', 'Current Wk', 'MVP Filter', 'Market Filter'}),  #'Reordered Columns' = Table.ReorderColumns(#'Kept Errors', {'Row Number', 'Region', 'Division', 'JOIN VALUE', 'RFO', 'Market', 'RFO_Mkt', 'Year', 'Week', 'Current Wk', 'MVP Filter', 'Market Filter'})in  #'Reordered Columns'"},{"name":"Errors in Scorecard (4)","expression":"letSource = Scorecard,  #'Detected Type Mismatches' = let    tableWithOnlyPrimitiveTypes = Table.SelectColumns(Source, Table.ColumnsOfType(Source, {type nullable number, type nullable text, type nullable logical, type nullable date, type nullable datetime, type nullable datetimezone, type nullable time, type nullable duration})),    recordTypeFields = Type.RecordFields(Type.TableRow(Value.Type(tableWithOnlyPrimitiveTypes))),    fieldNames = Record.FieldNames(recordTypeFields),    fieldTypes = List.Transform(Record.ToList(recordTypeFields), each [Type]),    pairs = List.Transform(List.Positions(fieldNames), (i) =\u003e {fieldNames{i}, (v) =\u003e if v = null or Value.Is(v, fieldTypes{i}) then v else error [Message = 'The type of the value does not match the type of the column.', Detail = v], fieldTypes{i}})in    Table.TransformColumns(Source, pairs),  #'Added Index' = Table.AddIndexColumn(#'Detected Type Mismatches', 'Row Number' ,1),  #'Kept Errors' = Table.SelectRowsWithErrors(#'Added Index', {'RFO_ID', 'ZONE_ID', 'RFO_Mkt', 'Year', 'JOIN VALUE', 'CP+ Week', 'CP+ YTD', 'Selection', 'Licensing', 'Red Role', 'Weekly New Contracts', 'YTD New Contracts', 'Year-End Contract Goal', 'YTD Gender Contracts', 'Contracts Meeting Assessment Standards', 'Pct Contracts Meeting Assessment Standards', 'Warm Sourced Contracts YTD', 'Pct Warm Sourced Contracts YTD', 'Weekly FPs Lost to Attrition', 'YTD FRs Lost to Attrition', 'RFO Transfers', 'Other Transfers', 'Baseline', 'Current Capacity', '%  Change', 'Net Change', 'Year-End Goal', '% Warm Sourced Contracts', '% Meeting Standards'}),  #'Reordered Columns' = Table.ReorderColumns(#'Kept Errors', {'Row Number', 'RFO_ID', 'ZONE_ID', 'RFO_Mkt', 'Year', 'JOIN VALUE', 'CP+ Week', 'CP+ YTD', 'Selection', 'Licensing', 'Red Role', 'Weekly New Contracts', 'YTD New Contracts', 'Year-End Contract Goal', 'YTD Gender Contracts', 'Contracts Meeting Assessment Standards', 'Pct Contracts Meeting Assessment Standards', 'Warm Sourced Contracts YTD', 'Pct Warm Sourced Contracts YTD', 'Weekly FPs Lost to Attrition', 'YTD FRs Lost to Attrition', 'RFO Transfers', 'Other Transfers', 'Baseline', 'Current Capacity', '%  Change', 'Net Change', 'Year-End Goal', '% Warm Sourced Contracts', '% Meeting Standards'})in  #'Reordered Columns'"},{"name":"Errors in Scorecard (5)","expression":"letSource = Scorecard,  #'Detected Type Mismatches' = let    tableWithOnlyPrimitiveTypes = Table.SelectColumns(Source, Table.ColumnsOfType(Source, {type nullable number, type nullable text, type nullable logical, type nullable date, type nullable datetime, type nullable datetimezone, type nullable time, type nullable duration})),    recordTypeFields = Type.RecordFields(Type.TableRow(Value.Type(tableWithOnlyPrimitiveTypes))),    fieldNames = Record.FieldNames(recordTypeFields),    fieldTypes = List.Transform(Record.ToList(recordTypeFields), each [Type]),    pairs = List.Transform(List.Positions(fieldNames), (i) =\u003e {fieldNames{i}, (v) =\u003e if v = null or Value.Is(v, fieldTypes{i}) then v else error [Message = 'The type of the value does not match the type of the column.', Detail = v], fieldTypes{i}})in    Table.TransformColumns(Source, pairs),  #'Added Index' = Table.AddIndexColumn(#'Detected Type Mismatches', 'Row Number' ,1),  #'Kept Errors' = Table.SelectRowsWithErrors(#'Added Index', {'RFO_ID', 'ZONE_ID', 'RFO_Mkt', 'Year', 'JOIN VALUE', 'CP+ Week', 'CP+ YTD', 'Selection', 'Licensing', 'Red Role', 'Weekly New Contracts', 'YTD New Contracts', 'Year-End Contract Goal', 'YTD Gender Contracts', 'Contracts Meeting Assessment Standards', 'Pct Contracts Meeting Assessment Standards', 'Warm Sourced Contracts YTD', 'Pct Warm Sourced Contracts YTD', 'Weekly FPs Lost to Attrition', 'YTD FRs Lost to Attrition', 'RFO Transfers', 'Other Transfers', 'Baseline', 'Current Capacity', '%  Change', 'Net Change', 'Year-End Goal', '% Warm Sourced Contracts', '% Meeting Standards'}),  #'Reordered Columns' = Table.ReorderColumns(#'Kept Errors', {'Row Number', 'RFO_ID', 'ZONE_ID', 'RFO_Mkt', 'Year', 'JOIN VALUE', 'CP+ Week', 'CP+ YTD', 'Selection', 'Licensing', 'Red Role', 'Weekly New Contracts', 'YTD New Contracts', 'Year-End Contract Goal', 'YTD Gender Contracts', 'Contracts Meeting Assessment Standards', 'Pct Contracts Meeting Assessment Standards', 'Warm Sourced Contracts YTD', 'Pct Warm Sourced Contracts YTD', 'Weekly FPs Lost to Attrition', 'YTD FRs Lost to Attrition', 'RFO Transfers', 'Other Transfers', 'Baseline', 'Current Capacity', '%  Change', 'Net Change', 'Year-End Goal', '% Warm Sourced Contracts', '% Meeting Standards'})in  #'Reordered Columns'"},{"name":"Errors in Summary Tab Weekly Data","expression":"letSource = #'Summary Tab Weekly Data',  #'Detected Type Mismatches' = let    tableWithOnlyPrimitiveTypes = Table.SelectColumns(Source, Table.ColumnsOfType(Source, {type nullable number, type nullable text, type nullable logical, type nullable date, type nullable datetime, type nullable datetimezone, type nullable time, type nullable duration})),    recordTypeFields = Type.RecordFields(Type.TableRow(Value.Type(tableWithOnlyPrimitiveTypes))),    fieldNames = Record.FieldNames(recordTypeFields),    fieldTypes = List.Transform(Record.ToList(recordTypeFields), each [Type]),    pairs = List.Transform(List.Positions(fieldNames), (i) =\u003e {fieldNames{i}, (v) =\u003e if v = null or Value.Is(v, fieldTypes{i}) then v else error [Message = 'The type of the value does not match the type of the column.', Detail = v], fieldTypes{i}})in    Table.TransformColumns(Source, pairs),  #'Added Index' = Table.AddIndexColumn(#'Detected Type Mismatches', 'Row Number' ,1),  #'Kept Errors' = Table.SelectRowsWithErrors(#'Added Index', {'Join Value', 'TAG No', 'TAG', 'Advisor #(lf)Group', 'Weekly As of Date', 'Current Week Number', 'YTD Goal WCFC', 'WCFC', '% of #(lf)YTD Goal #(lf)WCFC', 'YTD Contract Goal', 'YTD Contracts', '% of #(lf)YTD Contract #(lf)Goal', 'Licensing', 'Selection', 'YTD CP+', 'YTD Qualifying CP+', 'Terminations', 'Sort Order'}),  #'Reordered Columns' = Table.ReorderColumns(#'Kept Errors', {'Row Number', 'Join Value', 'TAG No', 'TAG', 'Advisor #(lf)Group', 'Weekly As of Date', 'Current Week Number', 'YTD Goal WCFC', 'WCFC', '% of #(lf)YTD Goal #(lf)WCFC', 'YTD Contract Goal', 'YTD Contracts', '% of #(lf)YTD Contract #(lf)Goal', 'Licensing', 'Selection', 'YTD CP+', 'YTD Qualifying CP+', 'Terminations', 'Sort Order'})in  #'Reordered Columns'"},{"name":"Errors in WMFC_CD","expression":"letSource = WMFC_CD,  #'Detected Type Mismatches' = let    tableWithOnlyPrimitiveTypes = Table.SelectColumns(Source, Table.ColumnsOfType(Source, {type nullable number, type nullable text, type nullable logical, type nullable date, type nullable datetime, type nullable datetimezone, type nullable time, type nullable duration})),    recordTypeFields = Type.RecordFields(Type.TableRow(Value.Type(tableWithOnlyPrimitiveTypes))),    fieldNames = Record.FieldNames(recordTypeFields),    fieldTypes = List.Transform(Record.ToList(recordTypeFields), each [Type]),    pairs = List.Transform(List.Positions(fieldNames), (i) =\u003e {fieldNames{i}, (v) =\u003e if v = null or Value.Is(v, fieldTypes{i}) then v else error [Message = 'The type of the value does not match the type of the column.', Detail = v], fieldTypes{i}})in    Table.TransformColumns(Source, pairs),  #'Added Index' = Table.AddIndexColumn(#'Detected Type Mismatches', 'Row Number' ,1),  #'Kept Errors' = Table.SelectRowsWithErrors(#'Added Index', {'Perfyear', 'RFO', 'Zone_ID', 'RFO_MKT', 'Category', 'Perfweek', 'MFC', 'WMFC', 'Join_Value'}),  #'Reordered Columns' = Table.ReorderColumns(#'Kept Errors', {'Row Number', 'Perfyear', 'RFO', 'Zone_ID', 'RFO_MKT', 'Category', 'Perfweek', 'MFC', 'WMFC', 'Join_Value'})in  #'Reordered Columns'"}],"configuredBy":"Ashley.Allen@Thrivent.com","configuredById":"db3dc7f7-0f5a-4e78-ba27-5d10f979c10f","isEffectiveIdentityRequired":false,"isEffectiveIdentityRolesRequired":false,"refreshSchedule":{"days":["Monday"],"times":["15:00","15:30"],"enabled":true,"localTimeZoneId":"Central Standard Time","notifyOption":"MailOnFailure"},"targetStorageMode":"Abf","createdDate":"2020-07-02T15:23:31.147","contentProviderType":"PbixInImportMode"},{"id":"c2606678-c517-4840-b3fa-62eafcc45a3e","name":"Distribution Dashboard","tables":[{"name":"PACE_DD","isHidden":false,"storageMode":"Import","columns":[{"name":"RFO","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Zone_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_MKT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"NFR_Above","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"NFR_Below","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"NFR_Total","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Percent_Above","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"MVP_ID","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Use_Percent_Above","expression":"DIVIDE(sum(PACE_DD[NFR_ABOVE]),sum(PACE_DD[NFR_TOTAL]))","isHidden":false}],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////VSSHR//SHARED//Public//DI and BI//Distribution Dashboard//PACE_DD.CSV'),[Delimiter=',', Columns=8, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'NFR_Above', type number}, {'NFR_Below', type number}, {'NFR_Total', type number}, {'Percent_Above', Percentage.Type}})in    #'Changed Type'"}]},{"name":"Appointments/PC/JFW","isHidden":false,"storageMode":"Import","columns":[{"name":"Worker Appointment Association","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Appointment Dimension Surrogate Key","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Membership Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Appointment Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Appointment Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Adjusted Service Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Employee Status Type Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Historical Job Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FP Tenure - NFP, Vet","dataType":"String","isHidden":false,"expression":"if(not(\u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000', '002010', '002022', '002024', '002025', '002026', '002027', '003100', '003500'}), 'Other',if(\u0027Appointments/PC/JFW\u0027[Historical Job Type Code] = '002010', 'Associate Rep',if(((\u0027Appointments/PC/JFW\u0027[Appointment Date] - \u0027Appointments/PC/JFW\u0027[Adjusted Service Date]) / 365.25) \u003c 4, 'NFA', 'VET')))","columnType":"Calculated"},{"name":"JFW_IND","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"TSID_Market_Appt","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FP Tenure - NFP 4 Mo","dataType":"String","isHidden":false,"expression":"if(not(\u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000', '002010', '002022', '002024', '002025', '002026', '002027', '003100', '003500'}), 'Vet', if(((\u0027Appointments/PC/JFW\u0027[Appointment Date] - \u0027Appointments/PC/JFW\u0027[Adjusted Service Date]) / 365.25) \u003c 0.3333, 'NFP 4 Mo', 'NA'))","columnType":"Calculated"},{"name":"Leader Role","dataType":"String","isHidden":false,"expression":"if(\u0027Appointments/PC/JFW\u0027[Historical Job Type Code] = '001004', 'RD',if(\u0027Appointments/PC/JFW\u0027[Historical Job Type Code] = '001005', 'RDL', if(\u0027Appointments/PC/JFW\u0027[Historical Job Type Code] = '001007', 'RDD')))","columnType":"Calculated"},{"name":"MVP Group","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FP Tenure - NFP 6 Mo","dataType":"String","isHidden":false,"expression":"if(not(\u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000', '002010', '002022', '002024', '002025', '002026', '002027', '003100', '003500'}), 'Vet', if(((\u0027Appointments/PC/JFW\u0027[Appointment Date] - \u0027Appointments/PC/JFW\u0027[Adjusted Service Date]) / 365.25) \u003c 0.5, 'NFP 6 Mo', 'NA'))","columnType":"Calculated"},{"name":"Appointment Type Code2","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FA Tenure","dataType":"String","isHidden":false,"expression":"if(not(\u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000', '002010', '002022', '002024', '002025', '002026', '002027', '003100', '003500'}), 'Other',            if(\u0027Appointments/PC/JFW\u0027[Historical Job Type Code]='002010', 'Associate Rep',            if(((\u0027Appointments/PC/JFW\u0027[Appointment Date] - \u0027Appointments/PC/JFW\u0027[Adjusted Service Date]) / 365.25) \u003c 1, 'NFA1',             if(((\u0027Appointments/PC/JFW\u0027[Appointment Date] - \u0027Appointments/PC/JFW\u0027[Adjusted Service Date]) / 365.25) \u003c 2, 'NFA2',            if(((\u0027Appointments/PC/JFW\u0027[Appointment Date] - \u0027Appointments/PC/JFW\u0027[Adjusted Service Date]) / 365.25) \u003c 3, 'NFA3',            if(((\u0027Appointments/PC/JFW\u0027[Appointment Date] - \u0027Appointments/PC/JFW\u0027[Adjusted Service Date]) / 365.25) \u003c 4, 'NFA4',            if(((\u0027Appointments/PC/JFW\u0027[Appointment Date] - \u0027Appointments/PC/JFW\u0027[Adjusted Service Date]) / 365.25) \u003c 5, 'VET5',            if(((\u0027Appointments/PC/JFW\u0027[Appointment Date] - \u0027Appointments/PC/JFW\u0027[Adjusted Service Date]) / 365.25) \u003c 6, 'VET6',            if(((\u0027Appointments/PC/JFW\u0027[Appointment Date] - \u0027Appointments/PC/JFW\u0027[Adjusted Service Date]) / 365.25) \u003c 7, 'VET7','VET8+')))))))))","columnType":"Calculated"}],"measures":[{"name":"YTD Appointments","expression":"VAR SelectedTenures = VALUES(Daily_Tenure_Counts_DD[Tenure Group])RETURN    IF(        COUNTROWS(SelectedTenures) \u003e 1,        SUMX(            SelectedTenures,            VAR Tenure = [Tenure Group]            RETURNcalculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    \u0027Appointments/PC/JFW\u0027[Worker Appointment Association]='Owner',    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'},    DTRB_PERF_DATES[YTD Flag] in {TRUE},    \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = Tenure)),IF(ISFILTERED(Daily_Tenure_Counts_DD[Tenure Group]),calculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    \u0027Appointments/PC/JFW\u0027[Worker Appointment Association]='Owner',    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'},    DTRB_PERF_DATES[YTD Flag] in {TRUE},    \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = SELECTEDVALUE(Daily_Tenure_Counts_DD[Tenure Group])),calculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    \u0027Appointments/PC/JFW\u0027[Worker Appointment Association]='Owner',    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'},    DTRB_PERF_DATES[YTD Flag] in {TRUE})))","isHidden":false},{"name":"PYTD Appointments","expression":"VAR SelectedTenures = VALUES(Daily_Tenure_Counts_DD[Tenure Group])RETURN    IF(        COUNTROWS(SelectedTenures) \u003e 1,        SUMX(            SelectedTenures,            VAR Tenure = [Tenure Group]            RETURNcalculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    \u0027Appointments/PC/JFW\u0027[Worker Appointment Association]='Owner',    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'},    DTRB_PERF_DATES[PYTD Flag] in {TRUE},    \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = Tenure)),IF(ISFILTERED(Daily_Tenure_Counts_DD[Tenure Group]),calculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    \u0027Appointments/PC/JFW\u0027[Worker Appointment Association]='Owner',    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'},    DTRB_PERF_DATES[PYTD Flag] in {TRUE},    \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = SELECTEDVALUE(Daily_Tenure_Counts_DD[Tenure Group])),calculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    \u0027Appointments/PC/JFW\u0027[Worker Appointment Association]='Owner',    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'},    DTRB_PERF_DATES[PYTD Flag] in {TRUE})))","isHidden":false},{"name":"YTD Prospect Connects","expression":"CALCULATE(DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),\u0027Appointments/PC/JFW\u0027[Worker Appointment Association]='Owner',\u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'}, DTRB_PERF_DATES[YTD Flag] in {TRUE},\u0027Appointments/PC/JFW\u0027[Membership Type Code] \u003c\u003e 'BEN', \u0027Appointments/PC/JFW\u0027[Appointment Type Code] = 'Connect')","isHidden":false},{"name":"PYTD Prospect Connects","expression":"CALCULATE(DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),\u0027Appointments/PC/JFW\u0027[Worker Appointment Association]='Owner',\u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002022','002024','002025','002026','002027','002030','002032','003100','003500'}, DTRB_PERF_DATES[PYTD Flag SF] in {TRUE},\u0027Appointments/PC/JFW\u0027[Membership Type Code] \u003c\u003e 'BEN', \u0027Appointments/PC/JFW\u0027[Appointment Type Code] = 'Connect')","isHidden":false},{"name":"PY Prospect Connects","expression":"CALCULATE(DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),\u0027Appointments/PC/JFW\u0027[Worker Appointment Association]='Owner',\u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'},DTRB_PERF_DATES[Prior Year Flag] in {TRUE},\u0027Appointments/PC/JFW\u0027[Membership Type Code] \u003c\u003e 'BEN', \u0027Appointments/PC/JFW\u0027[Appointment Type Code] = 'Connect')","isHidden":false},{"name":"PY2 Appointments","expression":"VAR SelectedTenures = VALUES(Daily_Tenure_Counts_DD[Tenure Group])RETURN    IF(        COUNTROWS(SelectedTenures) \u003e 1,        SUMX(            SelectedTenures,            VAR Tenure = [Tenure Group]            RETURNcalculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    \u0027Appointments/PC/JFW\u0027[Worker Appointment Association]='Owner',    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'},    DTRB_PERF_DATES[Prior Year 2 Flag] in {TRUE},    \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = Tenure)),IF(ISFILTERED(Daily_Tenure_Counts_DD[Tenure Group]),calculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    \u0027Appointments/PC/JFW\u0027[Worker Appointment Association]='Owner',    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'},    DTRB_PERF_DATES[Prior Year 2 Flag] in {TRUE},    \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = SELECTEDVALUE(Daily_Tenure_Counts_DD[Tenure Group])),calculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    \u0027Appointments/PC/JFW\u0027[Worker Appointment Association]='Owner',    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'},    DTRB_PERF_DATES[Prior Year 2 Flag] in {TRUE})))","isHidden":false},{"name":"PY2 Prospect Connects","expression":"CALCULATE(DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),\u0027Appointments/PC/JFW\u0027[Worker Appointment Association]='Owner',\u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'},DTRB_PERF_DATES[Prior Year 2 Flag] in {TRUE},\u0027Appointments/PC/JFW\u0027[Membership Type Code] \u003c\u003e 'BEN', \u0027Appointments/PC/JFW\u0027[Appointment Type Code] = 'Connect')","isHidden":false},{"name":"Prior Week Appointments","expression":"CALCULATE(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),     DTRB_PERF_DATES[Prior Week Flag] = 'TRUE',     DTRB_PERF_DATES[Current Year Flag] in {TRUE})","isHidden":false},{"name":"YOY Change Appts","expression":"(\u0027Appointments/PC/JFW\u0027[YTD Appointments] - \u0027Appointments/PC/JFW\u0027[PYTD Appointments])/\u0027Appointments/PC/JFW\u0027[PYTD Appointments]","isHidden":false},{"name":"YOY Change PCs","expression":"(\u0027Appointments/PC/JFW\u0027[YTD Prospect Connects] - \u0027Appointments/PC/JFW\u0027[PYTD Prospect Connects])/\u0027Appointments/PC/JFW\u0027[PYTD Prospect Connects]","isHidden":false},{"name":"Prior Week PCs","expression":"CALCULATE(DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]), \u0027Appointments/PC/JFW\u0027[Membership Type Code] \u003c\u003e 'BEN', \u0027Appointments/PC/JFW\u0027[Appointment Type Code] = 'Connect', DTRB_PERF_DATES[Prior Week Flag] = 'TRUE', DTRB_PERF_DATES[Current Year Flag] in {TRUE})","isHidden":false},{"name":"YTD NFP Prospect Connects","expression":"CALCULATE(DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),\u0027Appointments/PC/JFW\u0027[Worker Appointment Association] = 'Owner',\u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'}, DTRB_PERF_DATES[YTD Flag] in {TRUE},\u0027Appointments/PC/JFW\u0027[Membership Type Code] \u003c\u003e 'BEN', \u0027Appointments/PC/JFW\u0027[Appointment Type Code] = 'Connect', \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = 'NFP')","isHidden":false},{"name":"YTD Leader JFW","expression":"CALCULATE(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    FILTER(\u0027Appointments/PC/JFW\u0027,    \u0027Appointments/PC/JFW\u0027[JFW_IND] = 1 \u0026\u0026     \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'001005','001007','001505'} \u0026\u0026     RELATED(DTRB_PERF_DATES[YTD Flag]) in {TRUE}))","isHidden":false},{"name":"PYTD Leader JFW","expression":"CALCULATE(DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),\u0027Appointments/PC/JFW\u0027[JFW_IND] = 1, \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'001005','001007','001505'},DTRB_PERF_DATES[PYTD Flag SF] in {TRUE})","isHidden":false},{"name":"PY Leader JFW","expression":"CALCULATE (    DISTINCTCOUNT ( \u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key] ),    \u0027Appointments/PC/JFW\u0027[JFW_IND] = 1,    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code]        IN {        '001005',        '001007',        '001505'    },    DTRB_PERF_DATES[Prior Year Flag] IN { TRUE })","isHidden":false},{"name":"PY2 Leader JFW","expression":"CALCULATE(DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),\u0027Appointments/PC/JFW\u0027[JFW_IND] = 1, \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'001005','001007','001505'},DTRB_PERF_DATES[Prior Year 2 Flag] in {TRUE})","isHidden":false},{"name":"YTD Market JFW","expression":"CALCULATE(DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),\u0027Appointments/PC/JFW\u0027[JFW_IND] = 1, \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002019','002020','002021','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'},DTRB_PERF_DATES[YTD Flag] in {TRUE})","isHidden":false},{"name":"PYTD Market JFW","expression":"CALCULATE(DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),\u0027Appointments/PC/JFW\u0027[Worker Appointment Association]='Owner',\u0027Appointments/PC/JFW\u0027[JFW_IND] = 1, \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002019','002020','002021','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'},DTRB_PERF_DATES[PYTD Flag SF] in {TRUE})","isHidden":false},{"name":"PY Market JFW","expression":"CALCULATE (    DISTINCTCOUNT ( \u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key] ),    \u0027Appointments/PC/JFW\u0027[Worker Appointment Association] = 'Owner',    \u0027Appointments/PC/JFW\u0027[JFW_IND] = 1,    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code]        IN {        '002000',        '002003',        '002008',        '002010',        '002011',        '002012',        '002016',        '002019',        '002020',        '002021',        '002024',        '002022',        '002025',        '002026',        '002027',        '002030',        '002031',        '002032',        '003100',        '003500'    },    DTRB_PERF_DATES[Prior Year Flag] IN { TRUE })","isHidden":false},{"name":"PY2 Market JFW","expression":"CALCULATE(DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),\u0027Appointments/PC/JFW\u0027[Worker Appointment Association]='Owner',\u0027Appointments/PC/JFW\u0027[JFW_IND] = 1, \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002019','002020','002021','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'},DTRB_PERF_DATES[Prior Year 2 Flag] in {TRUE})","isHidden":false},{"name":"YOY Change Leader JFW","expression":"(\u0027Appointments/PC/JFW\u0027[YTD Leader JFW]-\u0027Appointments/PC/JFW\u0027[PYTD Leader JFW])/\u0027Appointments/PC/JFW\u0027[PYTD Leader JFW]","isHidden":false},{"name":"YOY Change Market JFW","expression":"(\u0027Appointments/PC/JFW\u0027[YTD Market JFW]-\u0027Appointments/PC/JFW\u0027[PYTD Market JFW])/\u0027Appointments/PC/JFW\u0027[PYTD Market JFW]","isHidden":false},{"name":"FP Appointments","expression":"VAR SelectedTenures = VALUES(Daily_Tenure_Counts_DD[Tenure_Group])RETURN    IF(        COUNTROWS(SelectedTenures) \u003e 1,        SUMX(            SelectedTenures,            VAR Tenure = [Tenure_Group]            RETURN                CALCULATE(                    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[TSID_Market_Appt]),                    FILTER(                        \u0027Appointments/PC/JFW\u0027,                        \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] IN {'002000','002010','002022','002024','002025','002026','002027','003100','003500'}                      ),                    \u0027Appointments/PC/JFW\u0027[FA Tenure] = Tenure                )        ),        IF(            ISFILTERED(Daily_Tenure_Counts_DD[Tenure_Group]),            CALCULATE(                DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[TSID_Market_Appt]),                FILTER(                    \u0027Appointments/PC/JFW\u0027,                    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] IN {'002000','002010','002022','002024','002025','002026','002027','003100','003500'}                    ),                    \u0027Appointments/PC/JFW\u0027[FA Tenure] = SELECTEDVALUE(Daily_Tenure_Counts_DD[Tenure_Group]                )            ),            CALCULATE(                DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[TSID_Market_Appt]),                FILTER(                    \u0027Appointments/PC/JFW\u0027,                    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] IN {'002000','002010','002022','002024','002025','002026','002027','003100','003500'}                )            )        )    )","isHidden":false},{"name":"52wk Appts per FP","expression":"var RFOChoice = if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]))var RegionChoice = if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]))returnif(ISFILTERED(\u0027RFO_Zone\u0027[RFO Name]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_ID]= RFOChoice, \u0027DTRB_PERF_DATES\u0027[Prior 52 Weeks Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Channel]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Channel]= ChannelChoice, \u0027DTRB_PERF_DATES\u0027[Prior 52 Weeks Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Division]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Division]= DivisionChoice, \u0027DTRB_PERF_DATES\u0027[Prior 52 Weeks Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Region]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Region]= RegionChoice, \u0027DTRB_PERF_DATES\u0027[Prior 52 Weeks Flag] in {True})))))","isHidden":false},{"name":"FP Prospect Connects","expression":"CALCULATE(DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[TSID_Market_Appt]),\u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002010','002022','002024','002025','002026','002027','003100','003500'},\u0027Appointments/PC/JFW\u0027[Membership Type Code] \u003c\u003e 'BEN', \u0027Appointments/PC/JFW\u0027[Appointment Type Code] = 'Connect')","isHidden":false},{"name":"4wk PCs per FP","expression":"var MarketChoice = if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]))var RFOChoice = if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]))var RegionChoice = if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]))returnif(ISFILTERED(\u0027RFO_Zone\u0027[Market Leader]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], Capacity[YTD Capacity TOTAL]), \u0027Capacity\u0027[RFO_Mkt]= MarketChoice, \u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True},DTRB_PERF_DATES[Current Year Flag] in {TRUE}),if(ISFILTERED(\u0027RFO_Zone\u0027[RFO Name]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], Capacity[YTD Capacity TOTAL]), \u0027Capacity\u0027[RFO_ID]= RFOChoice, \u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True},DTRB_PERF_DATES[Current Year Flag] in {TRUE}),if(ISFILTERED(\u0027RFO_Zone\u0027[Channel]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], Capacity[YTD Capacity TOTAL]), \u0027Capacity\u0027[Channel]= ChannelChoice, \u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True},DTRB_PERF_DATES[Current Year Flag] in {TRUE}),if(ISFILTERED(\u0027RFO_Zone\u0027[Division]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], Capacity[YTD Capacity TOTAL]), \u0027Capacity\u0027[Division]= DivisionChoice, \u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True},DTRB_PERF_DATES[Current Year Flag] in {TRUE}),if(ISFILTERED(\u0027RFO_Zone\u0027[Region]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], Capacity[YTD Capacity TOTAL]), \u0027Capacity\u0027[Region]= RegionChoice, \u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True},DTRB_PERF_DATES[Current Year Flag] in {TRUE}),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], Capacity[YTD Capacity TOTAL]), \u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True},DTRB_PERF_DATES[Current Year Flag] in {TRUE}))))))","isHidden":false},{"name":"52wk PCs per FP","expression":"var RFOChoice = if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]))var RegionChoice = if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]))returnif(ISFILTERED(\u0027RFO_Zone\u0027[RFO Name]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_ID]= RFOChoice, \u0027DTRB_PERF_DATES\u0027[Prior 52 Weeks Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Channel]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Channel]= ChannelChoice, \u0027DTRB_PERF_DATES\u0027[Prior 52 Weeks Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Division]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Division]= DivisionChoice, \u0027DTRB_PERF_DATES\u0027[Prior 52 Weeks Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Region]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Region]= RegionChoice, \u0027DTRB_PERF_DATES\u0027[Prior 52 Weeks Flag] in {True})))))","isHidden":false},{"name":"YTD Appts per FP","expression":"var MarketChoice = if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]))var RFOChoice = if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]))var RegionChoice = if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]))returnif(ISFILTERED(\u0027RFO_Zone\u0027[Market Leader]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], Capacity[YTD Capacity TOTAL]), \u0027Capacity\u0027[RFO_Mkt]= MarketChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[RFO Name]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], Capacity[YTD Capacity TOTAL]), \u0027Capacity\u0027[RFO_ID]= RFOChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Channel]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], Capacity[YTD Capacity TOTAL]), \u0027Capacity\u0027[Channel]= ChannelChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Division]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], Capacity[YTD Capacity TOTAL]), \u0027Capacity\u0027[Division]= DivisionChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Region]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], Capacity[YTD Capacity TOTAL]), \u0027Capacity\u0027[Region]= RegionChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], Capacity[YTD Capacity TOTAL]), \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}))))))","isHidden":false},{"name":"4 Wk NFP Appts/NFP","expression":"var MarketChoice = if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]))var RFOChoice = if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]))var RegionChoice = if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]))returnif(ISFILTERED(\u0027RFO_Zone\u0027[Market Leader]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_Mkt]= MarketChoice, \u0027Capacity\u0027[Type] in {'NFR','Red Role'}, \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True},DTRB_PERF_DATES[Current Year Flag] in {TRUE}),if(ISFILTERED(\u0027RFO_Zone\u0027[RFO Name]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_ID]= RFOChoice, \u0027Capacity\u0027[Type] in {'NFR','Red Role'}, \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True},DTRB_PERF_DATES[Current Year Flag] in {TRUE}),if(ISFILTERED(\u0027RFO_Zone\u0027[Channel]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Channel]= ChannelChoice, \u0027Capacity\u0027[Type] in {'NFR','Red Role'}, \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True},DTRB_PERF_DATES[Current Year Flag] in {TRUE}),if(ISFILTERED(\u0027RFO_Zone\u0027[Division]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Division]= DivisionChoice, \u0027Capacity\u0027[Type] in {'NFR','Red Role'}, \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True},DTRB_PERF_DATES[Current Year Flag] in {TRUE}),if(ISFILTERED(\u0027RFO_Zone\u0027[Region]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Region]= RegionChoice, \u0027Capacity\u0027[Type] in {'NFR','Red Role'}, \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True},DTRB_PERF_DATES[Current Year Flag] in {TRUE}))))))","isHidden":false},{"name":"52 Wk NFP Appts/NFP","expression":"var RFOChoice = if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]))var RegionChoice = if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]))returnif(ISFILTERED(\u0027RFO_Zone\u0027[RFO Name]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_ID]= RFOChoice, \u0027Capacity\u0027[Type]= 'NFR', \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[Prior 52 Weeks Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Channel]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Channel]= ChannelChoice, \u0027Capacity\u0027[Type]= 'NFR', \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[Prior 52 Weeks Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Division]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Division]= DivisionChoice, \u0027Capacity\u0027[Type]= 'NFR', \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[Prior 52 Weeks Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Region]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Region]= RegionChoice, \u0027Capacity\u0027[Type]= 'NFR', \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[Prior 52 Weeks Flag] in {True})))))","isHidden":false},{"name":"YTD NFP Appts/NFP","expression":"var MarketChoice = if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]))var RFOChoice = if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]))var RegionChoice = if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]))returnif(ISFILTERED(\u0027RFO_Zone\u0027[Market Leader]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_Mkt]= MarketChoice, \u0027Capacity\u0027[Type] in {'NFR','Red Role'}, \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[RFO Name]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_ID]= RFOChoice, \u0027Capacity\u0027[Type] in {'NFR','Red Role'}, \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Channel]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Channel]= ChannelChoice, \u0027Capacity\u0027[Type] in {'NFR','Red Role'}, \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Division]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Division]= DivisionChoice, \u0027Capacity\u0027[Type] in {'NFR','Red Role'}, \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Region]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Region]= RegionChoice, \u0027Capacity\u0027[Type] in {'NFR','Red Role'}, \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}))))) )","isHidden":false},{"name":"PYTD Appts per FP","expression":"var RFOChoice = if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]))var RegionChoice = if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]))returnif(ISFILTERED(\u0027RFO_Zone\u0027[RFO Name]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_ID]= RFOChoice, \u0027DTRB_PERF_DATES\u0027[PYTD Flag SF] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Channel]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Channel]= ChannelChoice, \u0027DTRB_PERF_DATES\u0027[PYTD Flag SF] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Division]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Division]= DivisionChoice, \u0027DTRB_PERF_DATES\u0027[PYTD Flag SF] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Region]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Region]= RegionChoice, \u0027DTRB_PERF_DATES\u0027[PYTD Flag SF] in {True})))))","isHidden":false},{"name":"YOY Change Appts/FP","expression":"(\u0027Appointments/PC/JFW\u0027[YTD Appts per FP] - \u0027Appointments/PC/JFW\u0027[PYTD Appts per FP])/\u0027Appointments/PC/JFW\u0027[PYTD Appts per FP]","isHidden":false},{"name":"PYTD NFP Appts/NFP","expression":"var RFOChoice = if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]))var RegionChoice = if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]))returnif(ISFILTERED(\u0027RFO_Zone\u0027[RFO Name]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_ID]= RFOChoice, \u0027Capacity\u0027[Type]= 'NFR', \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[PYTD Flag SF] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Channel]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Channel]= ChannelChoice, \u0027Capacity\u0027[Type]= 'NFR', \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[PYTD Flag SF] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Division]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Division]= DivisionChoice, \u0027Capacity\u0027[Type]= 'NFR', \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[PYTD Flag SF] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Region]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Region]= RegionChoice, \u0027Capacity\u0027[Type]= 'NFR', \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[PYTD Flag SF] in {True}))))) ","isHidden":false},{"name":"YOY Change NFP Appts/NFP","expression":"(\u0027Appointments/PC/JFW\u0027[YTD NFP Appts/NFP] - \u0027Appointments/PC/JFW\u0027[PYTD NFP Appts/NFP])/\u0027Appointments/PC/JFW\u0027[PYTD NFP Appts/NFP]","isHidden":false},{"name":"PYTD NFP Prospect Connects","expression":"CALCULATE(DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),\u0027Appointments/PC/JFW\u0027[Worker Appointment Association] = 'Owner',\u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'}, DTRB_PERF_DATES[PYTD Flag SF] in {TRUE},\u0027Appointments/PC/JFW\u0027[Membership Type Code] \u003c\u003e 'BEN', \u0027Appointments/PC/JFW\u0027[Appointment Type Code] = 'Connect', \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = 'NFP')","isHidden":false},{"name":"YOY Change NFP PCs","expression":"(\u0027Appointments/PC/JFW\u0027[YTD NFP Prospect Connects] - \u0027Appointments/PC/JFW\u0027[PYTD NFP Prospect Connects])/\u0027Appointments/PC/JFW\u0027[PYTD NFP Prospect Connects]","isHidden":false},{"name":"YTD Vet Prospect Connects","expression":"CALCULATE(DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),\u0027Appointments/PC/JFW\u0027[Worker Appointment Association] = 'Owner',\u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'}, DTRB_PERF_DATES[YTD Flag] in {TRUE},\u0027Appointments/PC/JFW\u0027[Membership Type Code] \u003c\u003e 'BEN', \u0027Appointments/PC/JFW\u0027[Appointment Type Code] = 'Connect', \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = 'Vet')","isHidden":false},{"name":"YOY Change Vet PCs","expression":"(\u0027Appointments/PC/JFW\u0027[YTD PCs per VET] - \u0027Appointments/PC/JFW\u0027[PYTD PCs per VET])/\u0027Appointments/PC/JFW\u0027[PYTD PCs per VET]","isHidden":false},{"name":"YTD PCs per FP","expression":"var RFOChoice = if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]))var RegionChoice = if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]))returnif(ISFILTERED(\u0027RFO_Zone\u0027[RFO Name]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], Capacity[YTD Capacity TOTAL]), \u0027Capacity\u0027[RFO_ID]= RFOChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Channel]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], Capacity[YTD Capacity TOTAL]), \u0027Capacity\u0027[Channel]= ChannelChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Division]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], Capacity[YTD Capacity TOTAL]), \u0027Capacity\u0027[Division]= DivisionChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Region]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], Capacity[YTD Capacity TOTAL]), \u0027Capacity\u0027[Region]= RegionChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], Capacity[YTD Capacity TOTAL]), \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True})))))","isHidden":false},{"name":"PYTD Vet Prospect Connects","expression":"\u0027Appointments/PC/JFW\u0027[PYTD Prospect Connects]-\u0027Appointments/PC/JFW\u0027[PYTD NFP Prospect Connects]","isHidden":false},{"name":"Appts 4 Wk Average","expression":"CALCULATE(divide(\u0027Appointments/PC/JFW\u0027[YTD Appointments],4),\u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {TRUE},DTRB_PERF_DATES[Current Year Flag] in {TRUE})","isHidden":false},{"name":"Appts Curr Week","expression":"CALCULATE(\u0027Appointments/PC/JFW\u0027[YTD Appointments],\u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'TRUE')","isHidden":false},{"name":"Appts YTD Wk Average","expression":"CALCULATE(divide(\u0027Appointments/PC/JFW\u0027[YTD Appointments],max(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR])),\u0027DTRB_PERF_DATES\u0027[YTD Flag] in {TRUE})","isHidden":false},{"name":"Currwk Appts per FP","expression":"var MarketChoice = if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]))var RFOChoice = if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]))var RegionChoice = if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]))returnif(ISFILTERED(\u0027RFO_Zone\u0027[Market Leader]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_Mkt]= MarketChoice,\u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'True', \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT]='CURRENT'),if(ISFILTERED(\u0027RFO_Zone\u0027[RFO Name]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_ID]= RFOChoice,\u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'True', \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT]='CURRENT'),if(ISFILTERED(\u0027RFO_Zone\u0027[Channel]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), Capacity[Channel]= ChannelChoice, \u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'True', \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT]='CURRENT'),if(ISFILTERED(\u0027RFO_Zone\u0027[Division]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Division]= DivisionChoice, \u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'True', \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT]='CURRENT'),if(ISFILTERED(\u0027RFO_Zone\u0027[Region]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Region]= RegionChoice, \u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'True', \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT]='CURRENT'))))))","isHidden":false},{"name":"Curr Wk NFP Appts/NFP","expression":"var MarketChoice = if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]))var RFOChoice = if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]))var RegionChoice = if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]))returnif(ISFILTERED(\u0027RFO_Zone\u0027[Market Leader]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_Mkt]= MarketChoice, \u0027Capacity\u0027[Type] in {'NFR','Red Role'}, \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'True', \u0027DTRB_PERF_DATES\u0027[Current Year Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[RFO Name]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_ID]= RFOChoice, \u0027Capacity\u0027[Type] in {'NFR','Red Role'}, \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'True', \u0027DTRB_PERF_DATES\u0027[Current Year Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Channel]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Channel]= ChannelChoice, \u0027Capacity\u0027[Type] in {'NFR','Red Role'}, \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'True', \u0027DTRB_PERF_DATES\u0027[Current Year Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Division]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Division]= DivisionChoice, \u0027Capacity\u0027[Type] in {'NFR','Red Role'}, \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'True', \u0027DTRB_PERF_DATES\u0027[Current Year Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Region]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Region]= RegionChoice, \u0027Capacity\u0027[Type] in {'NFR','Red Role'}, \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'True', \u0027DTRB_PERF_DATES\u0027[Current Year Flag] in {True}))))))","isHidden":false},{"name":"PC 4 Wk Average","expression":"CALCULATE(divide(\u0027Appointments/PC/JFW\u0027[YTD Prospect Connects],4),\u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {TRUE},DTRB_PERF_DATES[Current Year Flag] in {TRUE})","isHidden":false},{"name":"PC YTD Wk Average","expression":"CALCULATE(divide(\u0027Appointments/PC/JFW\u0027[YTD Prospect Connects],max(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR])),\u0027DTRB_PERF_DATES\u0027[YTD Flag] in {TRUE})","isHidden":false},{"name":"PC Curr Week","expression":"CALCULATE(\u0027Appointments/PC/JFW\u0027[YTD Prospect Connects],\u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'TRUE', \u0027DTRB_PERF_DATES\u0027[Current Year Flag] in {True})","isHidden":false},{"name":"NFP PC 4 Wk Average","expression":"CALCULATE(divide(\u0027Appointments/PC/JFW\u0027[YTD NFP Prospect Connects],4),\u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {TRUE},DTRB_PERF_DATES[Current Year Flag] in {TRUE})","isHidden":false},{"name":"NFP PC Curr Week","expression":"CALCULATE(\u0027Appointments/PC/JFW\u0027[YTD NFP Prospect Connects],\u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'TRUE')","isHidden":false},{"name":"NFP PC YTD Wk Average","expression":"CALCULATE(divide(\u0027Appointments/PC/JFW\u0027[YTD NFP Prospect Connects],max(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR])),\u0027DTRB_PERF_DATES\u0027[YTD Flag] in {TRUE})","isHidden":false},{"name":"Leader JFW 4 Wk Average","expression":"CALCULATE(divide(\u0027Appointments/PC/JFW\u0027[YTD Leader JFW],4),\u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {TRUE},DTRB_PERF_DATES[Current Year Flag] in {TRUE})","isHidden":false},{"name":"Market JFW 4 Wk Average","expression":"CALCULATE(divide(\u0027Appointments/PC/JFW\u0027[YTD Market JFW],4),\u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {TRUE})","isHidden":false},{"name":"Market JFW Curr Week","expression":"CALCULATE(\u0027Appointments/PC/JFW\u0027[YTD Market JFW],\u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'TRUE')","isHidden":false},{"name":"Leader JFW Curr Week","expression":"CALCULATE(\u0027Appointments/PC/JFW\u0027[YTD Leader JFW],\u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'TRUE')","isHidden":false},{"name":"Leader JFW YTD Wk Average","expression":"CALCULATE(divide(\u0027Appointments/PC/JFW\u0027[YTD Leader JFW],max(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR])),\u0027DTRB_PERF_DATES\u0027[YTD Flag] in {TRUE})","isHidden":false},{"name":"Market JFW YTD Wk Average","expression":"CALCULATE(divide(\u0027Appointments/PC/JFW\u0027[YTD Market JFW],max(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR])),\u0027DTRB_PERF_DATES\u0027[YTD Flag] in {TRUE})","isHidden":false},{"name":"NFP 4 Mo JFW Cov - L30","expression":"CALCULATE(          divide([YTD Market JFW FP],[YTD Appointments]),          \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP 4 Mo] = 'NFP 4 Mo',          \u0027DTRB_PERF_DATES\u0027[Prior 30 days Flag] in {TRUE},          \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002010','002022','002025','002026','002027','003100','003500'})","isHidden":false},{"name":"NFP 4 Mo JFW Cov - N14","expression":"CALCULATE(          divide([N14 Market JFW],[N14 Appointments]),          \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP 4 Mo] = 'NFP 4 Mo',          \u0027DTRB_PERF_DATES\u0027[Next 14 days Flag] in {TRUE},          \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002010','002022','002025','002026','002027','003100','003500'})","isHidden":false},{"name":"N14 Appointments","expression":"calculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    \u0027Appointments/PC/JFW\u0027[Worker Appointment Association] = 'Owner',    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002010','002025','002026','002027','003100','003500'},    DTRB_PERF_DATES[Next 14 days Flag] in {TRUE})","isHidden":false},{"name":"N14 Market JFW","expression":"CALCULATE(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    \u0027Appointments/PC/JFW\u0027[Worker Appointment Association] = 'Owner',    \u0027Appointments/PC/JFW\u0027[JFW_IND] = 1,    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002010','002022','002025','002026','002027','003100','003500'},    DTRB_PERF_DATES[Next 14 days Flag] in {TRUE})","isHidden":false},{"name":"4 Wk Leader JFW/Ldr","expression":"var RFOChoice = if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]))var RegionChoice = if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]))returnif(ISFILTERED(\u0027RFO_Zone\u0027[RFO Name]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[YTD Leader JFW], SUM(WMFC_DD[WMFC])), \u0027Capacity\u0027[RFO_ID]= RFOChoice, WMFC_DD[Category]='Field Leader', \u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True},DTRB_PERF_DATES[Current Year Flag] in {TRUE}),if(ISFILTERED(\u0027RFO_Zone\u0027[Channel]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[YTD Leader JFW], SUM(WMFC_DD[WMFC])), \u0027Capacity\u0027[Channel]= ChannelChoice, WMFC_DD[Category]='Field Leader', \u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True},DTRB_PERF_DATES[Current Year Flag] in {TRUE}),if(ISFILTERED(\u0027RFO_Zone\u0027[Division]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[YTD Leader JFW], SUM(WMFC_DD[WMFC])), \u0027Capacity\u0027[Division]= DivisionChoice, WMFC_DD[Category]='Field Leader', \u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True},DTRB_PERF_DATES[Current Year Flag] in {TRUE}),if(ISFILTERED(\u0027RFO_Zone\u0027[Region]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[YTD Leader JFW], SUM(WMFC_DD[WMFC])), \u0027Capacity\u0027[Region]= RegionChoice, WMFC_DD[Category]='Field Leader', \u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True},DTRB_PERF_DATES[Current Year Flag] in {TRUE})))))","isHidden":false},{"name":"YTD Wk Leader JFW/Ldr","expression":"var MarketChoice = if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]))var RFOChoice = if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]))var RegionChoice = if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]))returnif(ISFILTERED(\u0027RFO_Zone\u0027[Market Leader]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[YTD Leader JFW], SUM(WMFC_DD[WMFC])), \u0027Capacity\u0027[RFO_Mkt]= MarketChoice, WMFC_DD[Category]='Field Leader', \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[RFO Name]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[YTD Leader JFW], SUM(WMFC_DD[WMFC])), \u0027Capacity\u0027[RFO_ID]= RFOChoice, WMFC_DD[Category]='Field Leader', \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Channel]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[YTD Leader JFW], SUM(WMFC_DD[WMFC])), \u0027Capacity\u0027[Channel]= ChannelChoice, WMFC_DD[Category]='Field Leader', \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Division]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[YTD Leader JFW], SUM(WMFC_DD[WMFC])), \u0027Capacity\u0027[Division]= DivisionChoice, WMFC_DD[Category]='Field Leader', \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Region]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[YTD Leader JFW], SUM(WMFC_DD[WMFC])), \u0027Capacity\u0027[Region]= RegionChoice, WMFC_DD[Category]='Field Leader', \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}))))))","isHidden":false},{"name":"Curr Wk Leader JFW/Ldr","expression":"var RFOChoice = if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]))var RegionChoice = if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]))returnif(ISFILTERED(\u0027RFO_Zone\u0027[RFO Name]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[YTD Leader JFW], SUM(WMFC_DD[WMFC])), \u0027Capacity\u0027[RFO_ID]= RFOChoice, WMFC_DD[Category]='Field Leader', \u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'True', DTRB_PERF_DATES[Current Year Flag] in {TRUE}),if(ISFILTERED(\u0027RFO_Zone\u0027[Channel]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[YTD Leader JFW], SUM(WMFC_DD[WMFC])), \u0027Capacity\u0027[Channel]= ChannelChoice, WMFC_DD[Category]='Field Leader', \u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'True', DTRB_PERF_DATES[Current Year Flag] in {TRUE}),if(ISFILTERED(\u0027RFO_Zone\u0027[Division]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[YTD Leader JFW], SUM(WMFC_DD[WMFC])), \u0027Capacity\u0027[Division]= DivisionChoice, WMFC_DD[Category]='Field Leader', \u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'True', DTRB_PERF_DATES[Current Year Flag] in {TRUE}),if(ISFILTERED(\u0027RFO_Zone\u0027[Region]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[YTD Leader JFW], SUM(WMFC_DD[WMFC])), \u0027Capacity\u0027[Region]= RegionChoice, WMFC_DD[Category]='Field Leader', \u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'True', DTRB_PERF_DATES[Current Year Flag] in {TRUE})))))","isHidden":false},{"name":"PYTD Wk Leader JFW/Ldr","expression":"var RFOChoice = if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]))var RegionChoice = if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]))returnif(ISFILTERED(\u0027RFO_Zone\u0027[RFO Name]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[PYTD Leader JFW], SUM(WMFC_DD[WMFC])), \u0027Capacity\u0027[RFO_ID]= RFOChoice, WMFC_DD[Category]='Field Leader', \u0027DTRB_PERF_DATES\u0027[PYTD Flag SF] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Channel]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[PYTD Leader JFW], SUM(WMFC_DD[WMFC])), \u0027Capacity\u0027[Channel]= ChannelChoice, WMFC_DD[Category]='Field Leader', \u0027DTRB_PERF_DATES\u0027[PYTD Flag SF] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Division]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[PYTD Leader JFW], SUM(WMFC_DD[WMFC])), \u0027Capacity\u0027[Division]= DivisionChoice, WMFC_DD[Category]='Field Leader', \u0027DTRB_PERF_DATES\u0027[PYTD Flag SF] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Region]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[PYTD Leader JFW], SUM(WMFC_DD[WMFC])), \u0027Capacity\u0027[Region]= RegionChoice, WMFC_DD[Category]='Field Leader', \u0027DTRB_PERF_DATES\u0027[PYTD Flag SF] in {True})))))","isHidden":false},{"name":"YOY Change Leader JFW per Leader","expression":"divide(\u0027Appointments/PC/JFW\u0027[YTD Wk Leader JFW/Ldr] - \u0027Appointments/PC/JFW\u0027[PYTD Wk Leader JFW/Ldr],\u0027Appointments/PC/JFW\u0027[PYTD Wk Leader JFW/Ldr])","isHidden":false},{"name":"test YTD Leader JFW","expression":"CALCULATE(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    FILTER(\u0027Appointments/PC/JFW\u0027,    \u0027Appointments/PC/JFW\u0027[JFW_IND] = 1 \u0026\u0026     \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'001000','001001','001002','001003','001004','001005','001006','001007','001011'} \u0026\u0026     RELATED(DTRB_PERF_DATES[YTD Flag]) in {TRUE}))","isHidden":false},{"name":"YTD PCs per NFP","expression":"var MarketChoice = if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code])) var RFOChoice = if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]))var RegionChoice = if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]))returnif(ISFILTERED(\u0027RFO_Zone\u0027[Market Leader]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_Mkt]= MarketChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True},\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = 'NFP',Capacity[Type] in {'NFR', 'Red Role'}),if(ISFILTERED(\u0027RFO_Zone\u0027[RFO Name]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_ID]= RFOChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True},\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = 'NFP',Capacity[Type] in {'NFR', 'Red Role'}),if(ISFILTERED(\u0027RFO_Zone\u0027[Channel]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Channel]= ChannelChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True},\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = 'NFP',Capacity[Type] in {'NFR', 'Red Role'}),if(ISFILTERED(\u0027RFO_Zone\u0027[Division]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Division]= DivisionChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True},\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = 'NFP',Capacity[Type] in {'NFR', 'Red Role'}),if(ISFILTERED(\u0027RFO_Zone\u0027[Region]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Region]= RegionChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True},\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = 'NFP',Capacity[Type] in {'NFR', 'Red Role'}))))))","isHidden":false},{"name":"YTD PCs per VET","expression":"var MarketChoice = if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]))var RFOChoice = if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]))var RegionChoice = if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]))returnif(ISFILTERED(\u0027RFO_Zone\u0027[Market Leader]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_Mkt]= MarketChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True},\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = 'Vet',Capacity[Type] in {'VET'}),if(ISFILTERED(\u0027RFO_Zone\u0027[RFO Name]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_ID]= RFOChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True},\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = 'Vet',Capacity[Type] in {'VET'}),if(ISFILTERED(\u0027RFO_Zone\u0027[Channel]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Channel]= ChannelChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True},\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = 'Vet',Capacity[Type] in {'VET'}),if(ISFILTERED(\u0027RFO_Zone\u0027[Division]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Division]= DivisionChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True},\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = 'Vet',Capacity[Type] in {'VET'}),if(ISFILTERED(\u0027RFO_Zone\u0027[Region]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Region]= RegionChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True},\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = 'Vet',Capacity[Type] in {'VET'}))))))","isHidden":false},{"name":"PYTD PCs per NFP","expression":"var RFOChoice = if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]))var RegionChoice = if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]))returnif(ISFILTERED(\u0027RFO_Zone\u0027[RFO Name]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_ID]= RFOChoice, \u0027DTRB_PERF_DATES\u0027[PYTD Flag SF] in {True},\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = 'NFP',Capacity[Type] in {'NFR', 'Red Role'}),if(ISFILTERED(\u0027RFO_Zone\u0027[Channel]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Channel]= ChannelChoice, \u0027DTRB_PERF_DATES\u0027[PYTD Flag SF] in {True},\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = 'NFP',Capacity[Type] in {'NFR', 'Red Role'}),if(ISFILTERED(\u0027RFO_Zone\u0027[Division]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Division]= DivisionChoice, \u0027DTRB_PERF_DATES\u0027[PYTD Flag SF] in {True},\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = 'NFP',Capacity[Type] in {'NFR', 'Red Role'}),if(ISFILTERED(\u0027RFO_Zone\u0027[Region]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Region]= RegionChoice, \u0027DTRB_PERF_DATES\u0027[PYTD Flag SF] in {True},\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = 'NFP',Capacity[Type] in {'NFR', 'Red Role'})))))","isHidden":false},{"name":"PYTD PCs per VET","expression":"var RFOChoice = if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]))var RegionChoice = if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]))returnif(ISFILTERED(\u0027RFO_Zone\u0027[RFO Name]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_ID]= RFOChoice, \u0027DTRB_PERF_DATES\u0027[PYTD Flag SF] in {True},\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = 'Vet',Capacity[Type] in {'VET'}),if(ISFILTERED(\u0027RFO_Zone\u0027[Channel]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Channel]= ChannelChoice, \u0027DTRB_PERF_DATES\u0027[PYTD Flag SF] in {True},\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = 'Vet',Capacity[Type] in {'VET'}),if(ISFILTERED(\u0027RFO_Zone\u0027[Division]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Division]= DivisionChoice, \u0027DTRB_PERF_DATES\u0027[PYTD Flag SF] in {True},\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = 'Vet',Capacity[Type] in {'VET'}),if(ISFILTERED(\u0027RFO_Zone\u0027[Region]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Region]= RegionChoice, \u0027DTRB_PERF_DATES\u0027[PYTD Flag SF] in {True},\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = 'Vet',Capacity[Type] in {'VET'})))))","isHidden":false},{"name":"4 wk PCs per NFP1","expression":"var MarketChoice = if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]))var RFOChoice = if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]))var RegionChoice = if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]))returnif(ISFILTERED(\u0027RFO_Zone\u0027[Market Leader]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_Mkt]= MarketChoice, \u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True},DTRB_PERF_DATES[Current Year Flag] in {TRUE},\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = 'NFP',Capacity[Type] in {'NFR', 'Red Role'}),if(ISFILTERED(\u0027RFO_Zone\u0027[RFO Name]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_ID]= RFOChoice, \u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True},DTRB_PERF_DATES[Current Year Flag] in {TRUE},\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = 'NFP',Capacity[Type] in {'NFR', 'Red Role'}),if(ISFILTERED(\u0027RFO_Zone\u0027[Channel]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Channel]= ChannelChoice, \u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True},DTRB_PERF_DATES[Current Year Flag] in {TRUE},\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = 'NFP',Capacity[Type] in {'NFR', 'Red Role'}),if(ISFILTERED(\u0027RFO_Zone\u0027[Division]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Division]= DivisionChoice, \u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True},DTRB_PERF_DATES[Current Year Flag] in {TRUE},\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = 'NFP',Capacity[Type] in {'NFR', 'Red Role'}),if(ISFILTERED(\u0027RFO_Zone\u0027[Region]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Region]= RegionChoice, \u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True},DTRB_PERF_DATES[Current Year Flag] in {TRUE},\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = 'NFP',Capacity[Type] in {'NFR', 'Red Role'}))))))","isHidden":false},{"name":"Curr Wk NFP PCs/NFP","expression":"var MarketChoice = if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]))var RFOChoice = if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]))var RegionChoice = if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]))returnif(ISFILTERED(\u0027RFO_Zone\u0027[Market Leader]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_Mkt]= MarketChoice, \u0027Capacity\u0027[Type] in {'NFR','Red Role'}, \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'True', \u0027DTRB_PERF_DATES\u0027[Current Year Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[RFO Name]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_ID]= RFOChoice, \u0027Capacity\u0027[Type] in {'NFR','Red Role'}, \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'True', \u0027DTRB_PERF_DATES\u0027[Current Year Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Channel]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Channel]= ChannelChoice, \u0027Capacity\u0027[Type] in {'NFR','Red Role'}, \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'True', \u0027DTRB_PERF_DATES\u0027[Current Year Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Division]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Division]= DivisionChoice, \u0027Capacity\u0027[Type] in {'NFR','Red Role'}, \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'True', \u0027DTRB_PERF_DATES\u0027[Current Year Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Region]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Region]= RegionChoice, \u0027Capacity\u0027[Type] in {'NFR','Red Role'}, \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'True', \u0027DTRB_PERF_DATES\u0027[Current Year Flag] in {True}))))))","isHidden":false},{"name":"YOY Change NFP PCs/NFP","expression":"(\u0027Appointments/PC/JFW\u0027[YTD PCs per NFP] - \u0027Appointments/PC/JFW\u0027[PYTD PCs per NFP])/\u0027Appointments/PC/JFW\u0027[PYTD PCs per NFP]","isHidden":false},{"name":"Gap 4wk Appts","expression":"YTD_GOALS_DD[Weekly Need Appts]-\u0027Appointments/PC/JFW\u0027[Appts 4 Wk Average]","isHidden":false},{"name":"Gap 4wk PCs","expression":"YTD_GOALS_DD[Weekly Need Total PCs]-\u0027Appointments/PC/JFW\u0027[PC 4 Wk Average]","isHidden":false},{"name":"Leader JFW YTD","expression":"CALCULATE(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[TSID_Market_Appt]),    FILTER(\u0027Appointments/PC/JFW\u0027,    \u0027Appointments/PC/JFW\u0027[JFW_IND] = 1 \u0026\u0026     \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'001005','001007','001505'} \u0026\u0026     RELATED(DTRB_PERF_DATES[YTD Flag]) in {TRUE}))","isHidden":false},{"name":"Leader JFW per Week YTD","expression":"divide(\u0027Appointments/PC/JFW\u0027[YTD Leader JFW],DTRB_PERF_DATES[Current Week Number])","isHidden":false},{"name":"Leader JFW per Role","expression":"divide([Leader JFW per Week YTD],[TSID Count])","isHidden":false},{"name":"Prev 4 Weeks Leader JFW","expression":"CALCULATE(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    FILTER(\u0027Appointments/PC/JFW\u0027,    \u0027Appointments/PC/JFW\u0027[JFW_IND] = 1 \u0026\u0026     \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'001000','001001','001002','001003','001004','001005','001006','001007','001011'} \u0026\u0026     RELATED(DTRB_PERF_DATES[Prior 4 Weeks Flag]) in {TRUE} \u0026\u0026    RELATED(DTRB_PERF_DATES[YTD Flag]) in {TRUE}))","isHidden":false},{"name":"Leader JFW per Week 4 Wk Avg","expression":"divide(\u0027Appointments/PC/JFW\u0027[Prev 4 Weeks Leader JFW],4)","isHidden":false},{"name":"Prev Week Leader JFW","expression":"CALCULATE(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    FILTER(\u0027Appointments/PC/JFW\u0027,    \u0027Appointments/PC/JFW\u0027[JFW_IND] = 1 \u0026\u0026     \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'001000','001001','001002','001003','001004','001005','001006','001007','001011'} \u0026\u0026     RELATED(DTRB_PERF_DATES[Prior Week Flag]) = 'TRUE' \u0026\u0026    RELATED(DTRB_PERF_DATES[YTD Flag]) in {TRUE}))","isHidden":false},{"name":"Prev 12 Weeks Leader JFW","expression":"CALCULATE(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    FILTER(\u0027Appointments/PC/JFW\u0027,    \u0027Appointments/PC/JFW\u0027[JFW_IND] = 1 \u0026\u0026     \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'001000','001001','001002','001003','001004','001005','001006','001007','001011'} \u0026\u0026     RELATED(DTRB_PERF_DATES[Prior 12 Weeks Flag]) in {TRUE} \u0026\u0026    RELATED(DTRB_PERF_DATES[YTD Flag]) in {TRUE}))","isHidden":false},{"name":"Leader JFW per Week 12 Wk Avg","expression":"divide(\u0027Appointments/PC/JFW\u0027[Prev 12 Weeks Leader JFW],12)","isHidden":false},{"name":"Leader JFW per Role 4 wk","expression":"divide([Leader JFW per Week 4 Wk Avg],[TSID Count])","isHidden":false},{"name":"Leader JFW per Role 12 wk","expression":"divide([Leader JFW per Week 12 Wk Avg],[TSID Count])","isHidden":false},{"name":"YTD Market JFW FP","expression":"CALCULATE(DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),\u0027Appointments/PC/JFW\u0027[Worker Appointment Association]='Owner',\u0027Appointments/PC/JFW\u0027[JFW_IND] = 1, \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002010','002022','002025','002026','002027','003100','003500'},DTRB_PERF_DATES[YTD Flag] in {TRUE})","isHidden":false},{"name":"NFP 6 Mo JFW Cov","expression":"var numerator = CALCULATE([YTD Market JFW], \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP 6 Mo] = 'NFP 6 Mo')var denominator = [YTD Appointments]returnCALCULATE(          divide([YTD Market JFW FP],[YTD Appointments]),          \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP 6 Mo] = 'NFP 6 Mo',          \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT]= 'CURRENT',          \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002010','002022','002025','002026','002027','003100','003500'})","isHidden":false},{"name":"NFP 6 Mo JFW Cov - L30","expression":"CALCULATE(          divide([L30 Market JFW],[L30 Appointments]),          \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP 6 Mo] = 'NFP 6 Mo',          \u0027DTRB_PERF_DATES\u0027[Prior 30 days Flag] in {TRUE},          \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002010','002022','002025','002026','002027','003100','003500'})","isHidden":false},{"name":"NFP 6 Mo JFW Cov - N14","expression":"CALCULATE(          divide([N14 Market JFW],[N14 Appointments]),          \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP 6 Mo] = 'NFP 6 Mo',          \u0027DTRB_PERF_DATES\u0027[Next 14 days Flag] in {TRUE},          \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002010','002022','002025','002026','002027','003100','003500'})","isHidden":false},{"name":"L30 Market JFW","expression":"CALCULATE(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    \u0027Appointments/PC/JFW\u0027[Worker Appointment Association] = 'Owner',    \u0027Appointments/PC/JFW\u0027[JFW_IND] = 1,    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002010','002022','002025','002026','002027','003100','003500'},    DTRB_PERF_DATES[Prior 30 days Flag] in {TRUE})","isHidden":false},{"name":"L30 Appointments","expression":"calculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    \u0027Appointments/PC/JFW\u0027[Worker Appointment Association] = 'Owner',    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002010','002025','002026','002027','003100','003500'},    DTRB_PERF_DATES[Prior 30 days Flag] in {TRUE})","isHidden":false},{"name":"4k wk Gap to Need Appts/FA","expression":"[Weekly Need Appts/FP]-[4 wk Appts per FA NEW]","isHidden":false},{"name":"4 wk gap to need appts/NFA","expression":"[Weekly Need NFP Appts/NFP]-[4 Wk NFP Appts/NFP]","isHidden":false},{"name":"YTD NFP Appointments","expression":"calculate(DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),\u0027Appointments/PC/JFW\u0027[Worker Appointment Association]='Owner',\u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'},\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', DTRB_PERF_DATES[YTD Flag] in {TRUE})","isHidden":false},{"name":"YTD Vet Appointments","expression":"calculate(DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),\u0027Appointments/PC/JFW\u0027[Worker Appointment Association]='Owner',\u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'},\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='Vet', DTRB_PERF_DATES[YTD Flag] in {TRUE})","isHidden":false},{"name":"Prior Year Appointments","expression":"VAR SelectedTenures = VALUES(Daily_Tenure_Counts_DD[Tenure Group])RETURN    IF(        COUNTROWS(SelectedTenures) \u003e 1,        SUMX(            SelectedTenures,            VAR Tenure = [Tenure Group]            RETURNcalculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    \u0027Appointments/PC/JFW\u0027[Worker Appointment Association]='Owner',    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'},    DTRB_PERF_DATES[Prior Year Flag] in {TRUE},    \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = Tenure)),IF(ISFILTERED(Daily_Tenure_Counts_DD[Tenure Group]),calculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    \u0027Appointments/PC/JFW\u0027[Worker Appointment Association]='Owner',    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'},    DTRB_PERF_DATES[Prior Year Flag] in {TRUE},    \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = SELECTEDVALUE(Daily_Tenure_Counts_DD[Tenure Group])),calculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    \u0027Appointments/PC/JFW\u0027[Worker Appointment Association]='Owner',    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'},    DTRB_PERF_DATES[Prior Year Flag] in {TRUE})))","isHidden":false},{"name":"4 wk Appts per FA NEW","expression":"CALCULATE(divide(divide([FP Appointments TEST],[Average Capacity]),4), DTRB_PERF_DATES[Current Year Flag] in {TRUE}, DTRB_PERF_DATES[Prior 4 Weeks Flag] in {TRUE})","isHidden":false},{"name":"YTD Appts per FA NEW","expression":"CALCULATE(divide([FP Appointments],[Average Capacity]), DTRB_PERF_DATES[YTD Flag] in {TRUE})","isHidden":false},{"name":"PY Appts per FA NEW","expression":"CALCULATE(divide([FP Appointments],[Average Capacity]), DTRB_PERF_DATES[Prior Year Flag] in {TRUE})","isHidden":false},{"name":"PY2 Appts per FA NEW","expression":"CALCULATE(divide([FP Appointments],[Average Capacity]), DTRB_PERF_DATES[Prior Year 2 Flag] in {TRUE})","isHidden":false},{"name":"PYTD Appts per FA NEW","expression":"CALCULATE(divide([FP Appointments],[Average Capacity]), DTRB_PERF_DATES[PYTD Flag SF] in {TRUE})","isHidden":false},{"name":"YOY Change Appts/FA NEW","expression":"(\u0027Appointments/PC/JFW\u0027[TEST YTD Appts per FA NEW CARD] - \u0027Appointments/PC/JFW\u0027[TEST PYTD Appts per FA NEW CARD])/\u0027Appointments/PC/JFW\u0027[TEST PYTD Appts per FA NEW CARD]","isHidden":false},{"name":"YTD Appt Metric SWITCH","expression":"if(HASONEVALUE(\u0027Appointment Switch\u0027[Metric]),SWITCH(VALUES(\u0027Appointment Switch\u0027[Metric]),'Total', [YTD Appointments],'Per FA', [TEST YTD Appts per FA NEW]))","isHidden":false},{"name":"PYTD Appt Metric SWITCH","expression":"if(HASONEVALUE(\u0027Appointment Switch\u0027[Metric]),SWITCH(VALUES(\u0027Appointment Switch\u0027[Metric]),'Total', format([PYTD Appointments],'#,##0'),'Per FA', [PYTD Appts per FA NEW]))","isHidden":false},{"name":"PY Appt Metric SWITCH","expression":"if(HASONEVALUE(\u0027Appointment Switch\u0027[Metric]),SWITCH(VALUES(\u0027Appointment Switch\u0027[Metric]),'Total', [Prior Year Appointments],'Per FA', [TEST PY Appts per FA NEW]))","isHidden":false},{"name":"PY2 Appt Metric SWITCH","expression":"if(HASONEVALUE(\u0027Appointment Switch\u0027[Metric]),SWITCH(VALUES(\u0027Appointment Switch\u0027[Metric]),'Total', [PY2 Appointments],'Per FA', [TEST PY2 Appts per FA NEW]))","isHidden":false},{"name":"YTD Appts per FA NEW CARD","expression":"CALCULATE(divide(divide([FP Appointments],[Average Capacity]),LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT],'PREVIOUS')), DTRB_PERF_DATES[YTD Flag] in {TRUE})","isHidden":false},{"name":"YTD Appt Metric SWITCH CARD","expression":"if(HASONEVALUE(\u0027Appointment Switch\u0027[Metric]),SWITCH(VALUES(\u0027Appointment Switch\u0027[Metric]),'Total', format([YTD Appointments],'#,##0'),'Per FA', [TEST YTD Appts per FA NEW CARD]))","isHidden":false},{"name":"PYTD Appts per FA NEW CARD","expression":"CALCULATE(divide(divide([FP Appointments],[Average Capacity]),LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT],'PREVIOUS')), DTRB_PERF_DATES[PYTD Flag] in {TRUE})","isHidden":false},{"name":"PYTD Appt Metric SWITCH CARD","expression":"if(HASONEVALUE(\u0027Appointment Switch\u0027[Metric]),SWITCH(VALUES(\u0027Appointment Switch\u0027[Metric]),'Total', format([PYTD Appointments],'#,##0'),'Per FA', [TEST PYTD Appts per FA NEW CARD]))","isHidden":false},{"name":"YOY Appt SWITCH","expression":"if(HASONEVALUE(\u0027Appointment Switch\u0027[Metric]),SWITCH(VALUES(\u0027Appointment Switch\u0027[Metric]),'Total', [YOY Change Appts],'Per FA', [YOY Change Appts/FA NEW]))","isHidden":false},{"name":"FP Appointments TEST","expression":"VAR SelectedTenures = VALUES(Daily_Tenure_Counts_DD[Tenure Group])RETURN    IF(        COUNTROWS(SelectedTenures) \u003e 1,        SUMX(            SelectedTenures,            VAR Tenure = [Tenure Group]            RETURN                CALCULATE(                    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[TSID_Market_Appt]),                    FILTER(                        \u0027Appointments/PC/JFW\u0027,                        \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] IN {'002000','002010','002022','002024','002025','002026','002027','003100','003500'}                      ),                    \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = Tenure                )        ),        IF(            ISFILTERED(Daily_Tenure_Counts_DD[Tenure Group]),            CALCULATE(                DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[TSID_Market_Appt]),                FILTER(                    \u0027Appointments/PC/JFW\u0027,                    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] IN {'002000','002010','002022','002024','002025','002026','002027','003100','003500'}                    ),                    \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = SELECTEDVALUE(Daily_Tenure_Counts_DD[Tenure Group]                )            ),            CALCULATE(                DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[TSID_Market_Appt]),                FILTER(                    \u0027Appointments/PC/JFW\u0027,                    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] IN {'002000','002010','002022','002024','002025','002026','002027','003100','003500'}                )            )        )    )","isHidden":false},{"name":"TEST YTD Appts per FA NEW CARD","expression":"CALCULATE(divide(divide([FP Appointments TEST],[Average Capacity]),LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT],'PREVIOUS')), DTRB_PERF_DATES[YTD Flag] in {TRUE})","isHidden":false},{"name":"TEST PYTD Appts per FA NEW CARD","expression":"CALCULATE(divide(divide([FP Appointments TEST],[Average Capacity]),LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT],'PREVIOUS')), DTRB_PERF_DATES[PYTD Flag] in {TRUE})","isHidden":false},{"name":"TEST PY Appts per FA NEW","expression":"CALCULATE(divide([FP Appointments TEST],[Average Capacity]), DTRB_PERF_DATES[Prior Year Flag] in {TRUE})","isHidden":false},{"name":"TEST PY2 Appts per FA NEW","expression":"CALCULATE(divide([FP Appointments TEST],[Average Capacity]), DTRB_PERF_DATES[Prior Year 2 Flag] in {TRUE})","isHidden":false},{"name":"TEST YTD Appts per FA NEW","expression":"CALCULATE(divide([FP Appointments TEST],[Average Capacity]), DTRB_PERF_DATES[YTD Flag] in {TRUE})","isHidden":false},{"name":"YTD PCs per FA NEW CARD","expression":"CALCULATE(divide(divide([FP Prospect Connects],[Average Capacity]),LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT],'PREVIOUS')), DTRB_PERF_DATES[YTD Flag] in {TRUE})","isHidden":false},{"name":"4 wk PCs per FA NEW","expression":"CALCULATE(divide(divide([FP Prospect Connects],[Average Capacity]),4), DTRB_PERF_DATES[Current Year Flag] in {TRUE}, DTRB_PERF_DATES[Prior 4 Weeks Flag] in {TRUE})","isHidden":false}],"source":[{"expression":"let    Source = Sql.Database('dbedwdwprd', 'EnterpriseDataMart', [Query='select#(lf)#(tab)appt_fct.[Worker Appointment Association],#(lf)#(tab)appt_fct.[Appointment Dimension Surrogate Key],#(lf)#(tab)appt_fct.[Person Dimension Surrogate Key],#(lf)#(tab)sum(appt_fct.[Appointment Occurs]) [appt_occurs],#(lf)#(tab)mbr_dim.[Membership Type Code],#(lf)#(tab)mbr_dim.[Membership Type Description],#(lf)#(tab)appt_dim.[Appointment Date],#(lf)#(tab)appt_dim.[Appointment Type Code],#(lf)#(tab)case when appt_dim.[Appointment Type Code] in (\u0027Gather Data\u0027) Then \u0027Discover\u0027#(lf)            when appt_dim.[Appointment Type Code] in (\u0027Take Action\u0027) Then \u0027Deliver\u0027#(lf)            when appt_dim.[Appointment Type Code] not in (\u0027Gather Data\u0027,\u0027Take Action\u0027) then Appt_dim.[Appointment Type Code]#(lf)       end as [Appointment Type Code],#(lf)       case when appt_dim.[Appointment Type Code] in (\u0027Gather Data\u0027) Then \u0027Discover\u0027#(lf)            when appt_dim.[Appointment Type Code] in (\u0027Take Action\u0027) Then \u0027Deliver\u0027#(lf)            when appt_dim.[Appointment Type Code] not in (\u0027Gather Data\u0027,\u0027Take Action\u0027) then Appt_dim.[Appointment Type Description]#(lf)       end as [Appointment Type Description],#(lf)#(lf)#(tab)case when appt_dim.[Field User Count] \u003c\u003e 0 and appt_dim.[Appointment Type Code] in (\u0027Connect\u0027,\u0027Gather Data\u0027,\u0027Take Action\u0027,\u0027Strategy Call/Meeting\u0027,\u0027Review\u0027,\u0027Service\u0027,\u0027Discover\u0027,\u0027Deliver\u0027)#(lf)#(tab)#(tab) then 1#(lf)#(tab)#(tab) else 0#(lf)#(tab)#(tab) end [JFW_IND],#(lf)#(tab)date_dim.[Calendar Year Name],#(lf)#(tab)date_dim.[Calendar Year Week Number],#(lf)#(tab)date_dim.[Calendar Week End Date],#(lf)#(tab)(LEFT(sale_hier_dim.[ORZN_ZONE_CDE],4)) as RFO,#(lf)#(tab)sale_hier_dim.ORZN_ZONE_CDE [Market],#(lf)        sale_hier_dim.ORZN_SUB_DEPT_CDE [MVP Group],#(lf)#(tab)appt_org_hist.[Source System Key Text] [TSID],#(lf)#(tab)appt_org_hist.[Adjusted Service Date],#(lf)#(tab)appt_org_hist.[Employee Status Type Description],#(lf)#(tab)appt_org_hist.[Financial Professional Tenure] [Historical FP Tenure],#(lf)#(tab)appt_org_hist.[Financial Professional Tenure Group] [Historical FP Tenure Group],#(lf)#(tab)appt_org_hist.[Job Type Code] [Historical Job Type Code],#(lf)#(tab)appt_org_hist.[Job Type Description] [Historical Job Type Description]#(lf)#(lf)from EnterpriseDataMart.DM_01.[Appointment Combine Fact] appt_fct#(lf)left join EnterpriseDataMart.DM_01.[Membership Type Dimension] mbr_dim#(lf)#(tab)on (appt_fct.[Membership Type Dimension Surrogate Key]=mbr_dim.[Membership Type Dimension Surrogate Key])#(lf)left join EnterpriseDataMart.DM_01.[Appointment Dimension] appt_dim#(lf)#(tab)on (appt_fct.[Appointment Dimension Surrogate Key]=appt_dim.[Appointment Dimension Surrogate Key])#(lf)left join EnterpriseDataMart.DM_01.[Date Dimension] date_dim#(lf)#(tab)on (appt_dim.[Appointment Date]=date_dim.[Calendar Date Date])#(lf)left join EnterpriseDataMart.DM_01.[Organization Dimension] appt_org_hist#(lf)    on ((appt_fct.[Appointment Organization Dimension Surrogate Key]=appt_org_hist.[Organization Dimension Surrogate Key])#(lf)    and (appt_dim.[Appointment Date] between appt_org_hist.[Effective Begin Date] and appt_org_hist.[Effective End Date]))#(lf)left join EnterpriseDataMart.DM_01.[SALE_HIER_DIM] sale_hier_dim#(lf)#(tab)on ((sale_hier_dim.EFF_BEG_DT\u003c=appt_dim.[Appointment Date])#(lf)#(tab)#(tab)and (appt_dim.[Appointment Date]\u003c= DATEADD(day,-1,sale_hier_dim.EFF_END_DT))#(lf)#(tab)#(tab)and sale_hier_dim.CURR_ROW_IND = \u0027Y\u0027#(lf)#(tab)and appt_org_hist.[Source System Key Text]=sale_hier_dim.[SALE_HIER_ID])#(lf)#(lf)where #(lf)#(tab)appt_dim.[Current Row Indicator] = \u0027Y\u0027#(lf)#(tab)and appt_dim.[Appointment Create Date Over 14 Days] = \u0027N\u0027#(lf)#(tab)and appt_fct.[Person Dimension Surrogate Key] \u003c\u003e 0#(lf)#(tab)and appt_fct.[Appointment Status Name] \u003c\u003e \u0027Declined\u0027#(lf)#(tab)and sale_hier_dim.ORZN_DEPT_CDE in (\u00270115\u0027,\u00270190\u0027,\u00270283\u0027,\u00270291\u0027,\u00270361\u0027,\u00270384\u0027,\u00270435\u0027,\u00270525\u0027,\u00270383\u0027)#(lf)#(tab)and appt_org_hist.[Job Type Code] in (\u0027001000\u0027,\u0027001001\u0027,\u0027001002\u0027,\u0027001003\u0027,\u0027001004\u0027,\u0027001005\u0027,\u0027001006\u0027,\u0027001007\u0027,\u0027001011\u0027,\u0027001505\u0027,\u0027002000\u0027, \u0027002003\u0027, \u0027002008\u0027, \u0027002010\u0027, \u0027002011\u0027, \u0027002012\u0027, \u0027002016\u0027, \u0027002022\u0027, \u0027002024\u0027, \u0027002025\u0027, \u0027002026\u0027, \u0027002027\u0027, \u0027002030\u0027, \u0027002031\u0027, \u0027002032\u0027, \u0027003100\u0027, \u0027003500\u0027)#(lf)#(tab)and appt_dim.[Event Result Description] not in (\u0027No Show\u0027,\u0027Cancelled\u0027)#(lf)#(tab)and date_dim.[Calendar Year Name] \u003e= YEAR(getdate()-10)-2 and date_dim.[Calendar Year Name] \u003c=YEAR(getdate()-10)#(lf)        and appt_org_hist.[Source System Key Text] not in (\u0027TS06033\u0027, \u0027TS13320\u0027, \u0027TS21623\u0027, \u0027TS22934\u0027, \u0027TS32012\u0027, \u0027TS34394\u0027, \u0027TS34662\u0027, \u0027TS67185\u0027)#(lf)        and appt_dim.[Appointment Type Code] \u003c\u003e \u0027UNK\u0027#(lf)#(tab)#(lf)#(lf)#(lf)group by#(lf)#(tab)appt_fct.[Worker Appointment Association],#(lf)#(tab)appt_fct.[Appointment Dimension Surrogate Key],#(lf)#(tab)appt_fct.[Person Dimension Surrogate Key],#(lf)#(tab)mbr_dim.[Membership Type Code],#(lf)#(tab)mbr_dim.[Membership Type Description],#(lf)#(tab)appt_dim.[Appointment Date],#(lf)#(tab)appt_dim.[Appointment Type Code],#(lf)#(tab)appt_dim.[Appointment Type Description],#(lf)#(tab)appt_dim.[Field User Count],#(lf)#(tab)date_dim.[Calendar Year Name],#(lf)#(tab)date_dim.[Calendar Year Week Number],#(lf)#(tab)date_dim.[Calendar Week End Date],#(lf)#(tab)sale_hier_dim.ORZN_DEPT_CDE,#(lf)#(tab)sale_hier_dim.ORZN_ZONE_CDE,#(lf)        sale_hier_dim.ORZN_SUB_DEPT_CDE,#(lf)#(tab)appt_org_hist.[Source System Key Text],#(lf)#(tab)appt_org_hist.[Adjusted Service Date],#(lf)#(tab)appt_org_hist.[Employee Status Type Description],#(lf)#(tab)appt_org_hist.[Financial Professional Tenure],#(lf)#(tab)appt_org_hist.[Financial Professional Tenure Group],#(lf)#(tab)appt_org_hist.[Department Identifier],#(lf)#(tab)appt_org_hist.[RFO Zone Identifier],#(lf)#(tab)appt_org_hist.[Job Type Code],#(lf)#(tab)appt_org_hist.[Job Type Description]#(lf)#(lf)having #(lf)sum(appt_fct.[Appointment Occurs])\u003e0']),    #'Added Custom' = Table.AddColumn(Source, 'TSID_Market_Appt', each [TSID]\u0026'-'\u0026Number.ToText([Appointment Dimension Surrogate Key])),    #'Changed Type' = Table.TransformColumnTypes(#'Added Custom',{{'Appointment Date', type date}, {'Calendar Week End Date', type date}, {'Adjusted Service Date', type date}}),    #'Removed Columns' = Table.RemoveColumns(#'Changed Type',{'Person Dimension Surrogate Key', 'appt_occurs', 'Membership Type Description', 'Appointment Type Description', 'Calendar Year Name', 'Calendar Year Week Number', 'Calendar Week End Date', 'RFO', 'Historical FP Tenure', 'Historical FP Tenure Group', 'Historical Job Type Description'})in    #'Removed Columns'"}]},{"name":"Referrals","isHidden":false,"storageMode":"Import","columns":[{"name":"PERS_DIM_SK","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"REFR_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Referral_Occurs","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"ORZN_DEPT_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_ZONE_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Adjusted Service Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Employee Status Type Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Financial Professional Tenure","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Financial Professional Tenure Group","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Department Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO Zone Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee Display Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Type Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Calendar Year Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Calendar Year Week Number","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[{"name":"YTD Referrals","expression":"CALCULATE(sum(Referrals[Referral_Occurs]),DTRB_PERF_DATES[YTD Flag] in {TRUE})","isHidden":false},{"name":"PY Referrals","expression":"CALCULATE(sum(Referrals[Referral_Occurs]),DTRB_PERF_DATES[Prior Year Flag] in {TRUE})","isHidden":false},{"name":"PY2 Referrals","expression":"CALCULATE(sum(Referrals[Referral_Occurs]),DTRB_PERF_DATES[Prior Year 2 Flag] in {TRUE})","isHidden":false},{"name":"PYTD Referrals","expression":"CALCULATE(sum(Referrals[Referral_Occurs]),DTRB_PERF_DATES[PYTD Flag SF] in {TRUE})","isHidden":false},{"name":"YOY Change Referrals","expression":"(Referrals[YTD Referrals] - Referrals[PYTD Referrals])/Referrals[PYTD Referrals]","isHidden":false},{"name":"4wk Referrals per FP","expression":"var RFOChoice = if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]))var RegionChoice = if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]))returnif(ISFILTERED(\u0027RFO_Zone\u0027[RFO Name]),CALCULATE( DIVIDE(sum(Referrals[Referral_Occurs]), SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_ID]= RFOChoice,\u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True},DTRB_PERF_DATES[Current Year Flag] in {TRUE}),if(ISFILTERED(\u0027RFO_Zone\u0027[Channel]),CALCULATE( DIVIDE(sum(Referrals[Referral_Occurs]), SUM(Capacity[Capacity])), Capacity[Channel]= ChannelChoice, \u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True},DTRB_PERF_DATES[Current Year Flag] in {TRUE}),if(ISFILTERED(\u0027RFO_Zone\u0027[Division]),CALCULATE( DIVIDE(sum(Referrals[Referral_Occurs]), SUM(Capacity[Capacity])), \u0027Capacity\u0027[Division]= DivisionChoice, \u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True},DTRB_PERF_DATES[Current Year Flag] in {TRUE}),if(ISFILTERED(\u0027RFO_Zone\u0027[Region]),CALCULATE( DIVIDE(sum(Referrals[Referral_Occurs]), SUM(Capacity[Capacity])), \u0027Capacity\u0027[Region]= RegionChoice, \u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True},DTRB_PERF_DATES[Current Year Flag] in {TRUE})))))","isHidden":false},{"name":"YTD Referrals per FP","expression":"var MarketChoice = if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]))var RFOChoice = if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]))var RegionChoice = if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]))returnif(ISFILTERED(\u0027RFO_Zone\u0027[Market Leader]),CALCULATE( DIVIDE(sum(Referrals[Referral_Occurs]), SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_Mkt]= MarketChoice,\u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[RFO Name]),CALCULATE( DIVIDE(sum(Referrals[Referral_Occurs]), SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_ID]= RFOChoice,\u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Channel]),CALCULATE( DIVIDE(sum(Referrals[Referral_Occurs]), SUM(Capacity[Capacity])), Capacity[Channel]= ChannelChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Division]),CALCULATE( DIVIDE(sum(Referrals[Referral_Occurs]), SUM(Capacity[Capacity])), \u0027Capacity\u0027[Division]= DivisionChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Region]),CALCULATE( DIVIDE(sum(Referrals[Referral_Occurs]), SUM(Capacity[Capacity])), \u0027Capacity\u0027[Region]= RegionChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}))))))","isHidden":false},{"name":"Curr Wk Referrals per FP","expression":"var RFOChoice = if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]))var RegionChoice = if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]))returnif(ISFILTERED(\u0027RFO_Zone\u0027[RFO Name]),CALCULATE( DIVIDE(sum(Referrals[Referral_Occurs]), SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_ID]= RFOChoice,\u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'TRUE', \u0027DTRB_PERF_DATES\u0027[Current Year Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Channel]),CALCULATE( DIVIDE(sum(Referrals[Referral_Occurs]), SUM(Capacity[Capacity])), Capacity[Channel]= ChannelChoice,\u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'TRUE', \u0027DTRB_PERF_DATES\u0027[Current Year Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Division]),CALCULATE( DIVIDE(sum(Referrals[Referral_Occurs]), SUM(Capacity[Capacity])), \u0027Capacity\u0027[Division]= DivisionChoice,\u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'TRUE', \u0027DTRB_PERF_DATES\u0027[Current Year Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Region]),CALCULATE( DIVIDE(sum(Referrals[Referral_Occurs]), SUM(Capacity[Capacity])), \u0027Capacity\u0027[Region]= RegionChoice,\u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'TRUE', \u0027DTRB_PERF_DATES\u0027[Current Year Flag] in {True})))))","isHidden":false},{"name":"PYTD Referrals per FP","expression":"var RFOChoice = if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]))var RegionChoice = if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]))returnif(ISFILTERED(\u0027RFO_Zone\u0027[RFO Name]),CALCULATE( DIVIDE(sum(Referrals[Referral_Occurs]), SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_ID]= RFOChoice,\u0027DTRB_PERF_DATES\u0027[PYTD Flag SF] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Channel]),CALCULATE( DIVIDE(sum(Referrals[Referral_Occurs]), SUM(Capacity[Capacity])), Capacity[Channel]= ChannelChoice, \u0027DTRB_PERF_DATES\u0027[PYTD Flag SF] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Division]),CALCULATE( DIVIDE(sum(Referrals[Referral_Occurs]), SUM(Capacity[Capacity])), \u0027Capacity\u0027[Division]= DivisionChoice, \u0027DTRB_PERF_DATES\u0027[PYTD Flag SF] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Region]),CALCULATE( DIVIDE(sum(Referrals[Referral_Occurs]), SUM(Capacity[Capacity])), \u0027Capacity\u0027[Region]= RegionChoice, \u0027DTRB_PERF_DATES\u0027[PYTD Flag SF] in {True})))))","isHidden":false},{"name":"YOY Change Referrals/FP","expression":"divide([YTD Referrals per FP]-[PYTD Referrals per FP],[PYTD Referrals per FP])","isHidden":false}],"source":[{"expression":"let    Source = Sql.Database('dbedwdwprd', 'EnterpriseDataMart', [Query='SELECT  #(lf)                ref_fct.PERS_DIM_SK,#(lf)                ref_fct.REFR_DT,#(lf)                sum(ref_fct.OCCURS) [Referral_Occurs],#(lf)                date_dim.[Calendar Year Name],#(lf)                date_dim.[Calendar Year Week Number],#(lf)                sale_hier_dim.ORZN_DEPT_CDE,#(lf)                sale_hier_dim.ORZN_ZONE_CDE,#(lf)                org_dim.[Source System Key Text] AS EMP_ID,#(lf)                org_dim.[Adjusted Service Date],#(lf)                org_dim.[Employee Status Type Description],#(lf)                org_dim.[Financial Professional Tenure],#(lf)                org_dim.[Financial Professional Tenure Group],#(lf)                org_dim.[Department Identifier],#(lf)                org_dim.[RFO Zone Identifier],#(lf)                org_dim.[Last Name]+\u0027, \u0027+org_dim.[First Name] as ''Employee Display Name'', #(lf)                org_dim.[Job Type Code],#(lf)                org_dim.[Job Type Description]#(lf)#(lf)  FROM [EnterpriseDataMart].[DM_01].[REFERRAL_FCT] ref_fct LEFT JOIN#(lf)       EnterpriseDataMart.DM_01.[Date Dimension] date_dim#(lf)   on (ref_fct.[REFR_DT]=date_dim.[Calendar Date Date]) LEFT JOIN#(lf)       EnterpriseDataMart.DM_01.[Organization Dimension] org_dim#(lf)   on ((ref_fct.REFR_ORZN_DIM_SK=org_dim.[Organization Dimension Surrogate Key]) and#(lf)       (ref_fct.REFR_ORZN_DIM_VRSN_NBR=org_dim.[Organization Dimension Version Number])) LEFT JOIN#(lf)       EnterpriseDataMart.DM_01.[SALE_HIER_DIM] sale_hier_dim#(lf)   on ((sale_hier_dim.EFF_BEG_DT \u003c= ref_fct.REFR_DT) and#(lf)       (ref_fct.REFR_DT \u003c= DATEADD(day,-1,sale_hier_dim.EFF_END_DT)) and  #(lf)               sale_hier_dim.CURR_ROW_IND = \u0027Y\u0027 and #(lf)                org_dim.[Source System Key Text]=sale_hier_dim.[SALE_HIER_ID])#(lf)#(lf)where ref_fct.PERS_DIM_SK \u003c\u003e 0#(lf)  and sale_hier_dim.ORZN_DEPT_CDE in (\u00270115\u0027,\u00270165\u0027,\u00270190\u0027,\u00270240\u0027,\u00270283\u0027,\u00270291\u0027,\u00270361\u0027,\u00270365\u0027,\u00270383\u0027,\u00270384\u0027,\u00270410\u0027,\u00270435\u0027,\u00270475\u0027,\u00270496\u0027,\u00270525\u0027,\u00270529\u0027,\u00270810\u0027)#(lf)  and (org_dim.[Job Type Code] in (\u0027002000\u0027, \u0027002003\u0027, \u0027002008\u0027, \u0027002010\u0027, \u0027002011\u0027, \u0027002012\u0027, \u0027002016\u0027, \u0027002022\u0027, \u0027002024\u0027, \u0027002025\u0027, \u0027002026\u0027, \u0027002027\u0027, \u0027002030\u0027, \u0027002031\u0027, \u0027002032\u0027, \u0027003100\u0027, \u0027003500\u0027)#(lf)   or  org_dim.[Department Identifier] in (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027))  #(lf)   and date_dim.[Calendar Year Name] \u003e= YEAR(getdate()-10)-2 and date_dim.[Calendar Year Name] \u003c=YEAR(getdate()-10)#(lf)group by#(lf)                ref_fct.PERS_DIM_SK,#(lf)                ref_fct.REFR_DT,#(lf)                date_dim.[Calendar Year Name],#(lf)                date_dim.[Calendar Year Week Number],#(lf)                sale_hier_dim.ORZN_DEPT_CDE,#(lf)                sale_hier_dim.ORZN_ZONE_CDE,#(lf)                org_dim.[Source System Key Text],#(lf)                org_dim.[Adjusted Service Date],#(lf)                org_dim.[Employee Status Type Description],#(lf)                org_dim.[Financial Professional Tenure],#(lf)                org_dim.[Financial Professional Tenure Group],#(lf)                org_dim.[Department Identifier],#(lf)                org_dim.[RFO Zone Identifier],#(lf)                org_dim.[Last Name]+\u0027, \u0027+org_dim.[First Name],#(lf)                org_dim.[Job Type Code],#(lf)                org_dim.[Job Type Description]#(lf)#(lf)having #(lf)sum(ref_fct.OCCURS) \u003e 0#(lf)'])in    Source"}]},{"name":"RFO_Zone","isHidden":false,"storageMode":"Import","columns":[{"name":"Division","dataType":"String","isHidden":false,"expression":"if(RFO_Zone[RFO] IN {'0283', '0365', '0435', '0496', '0810'}, 'Central', if(RFO_Zone[RFO] IN {'0115', '0165', '0190', '0240', '0361', '0384'}, 'East', if(RFO_Zone[RFO] IN {'0291', '0410', '0475', '0525', '0529'}, 'West', 'Other')))","columnType":"Calculated"},{"name":"Region","dataType":"String","isHidden":false,"expression":"IF(RFO_Zone[RFO] IN {'0361', '0365', '0435', '0496'}, 'Established', IF(RFO_Zone[RFO] IN {'0165', '0240', '0283', '0291', '0410', '0525'}, 'Growth', IF(RFO_Zone[RFO] IN {'0115', '0190', '0384', '0475', '0529'}, 'Invest', IF(RFO_Zone[RFO] = '0810', 'Colorado Springs', 'Other'))))","columnType":"Calculated"},{"name":"Channel","dataType":"String","isHidden":false,"expression":"if(RFO_Zone[RFO] in {'0383'}, 'Virtual Advice',if(RFO_Zone[RFO] in {'0716'},'TAN',if(RFO_Zone[RFO] in {'0714'},'Strategic Partners','Thrivent Advisor Group')))","columnType":"Calculated"},{"name":"Adjusted RFO","dataType":"String","isHidden":false,"expression":"IF(RFO_Zone[RFO] = '0001','',RFO_Zone[RFO])","columnType":"Calculated"},{"name":"RFO Name","dataType":"String","isHidden":false,"expression":"RELATED(\u0027RFO_NM\u0027[NM])","columnType":"Calculated"},{"name":"Organization Zone Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Leader Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market Leader","dataType":"String","isHidden":false,"expression":"RFO_Zone[Organization Zone Code] \u0026 '-' \u0026 RFO_Zone[Leader Name]","columnType":"Calculated"},{"name":"NPG","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"National Practice Group","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Core or Growth","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market Number","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Experienced Advisor","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Exp Advisor Sort","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//SHARED//Public//DI and BI//Distribution Dashboard//Market List from ZDD.xlsx'), null, true),    #'Dist DB lookup_Sheet' = Source{[Item='Dist DB lookup',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'Dist DB lookup_Sheet', [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'TAG-MVP-MKT', type text}, {'TAG-MVP', type text}, {'TAG', type text}, {'Market', type text}, {'MVP', Int64.Type}, {'Mkt', Int64.Type}, {'Leader Name', type text}, {'Lookup', Int64.Type}}),    #'Removed Columns' = Table.RemoveColumns(#'Changed Type',{'MVP', 'Mkt', 'Lookup'}),    #'Renamed Columns' = Table.RenameColumns(#'Removed Columns',{{'TAG-MVP', 'MVP'}, {'TAG-MVP-MKT', 'Organization Zone Code'}, {'TAG', 'RFO'}}),    #'Removed Blank Rows' = Table.SelectRows(#'Renamed Columns', each not List.IsEmpty(List.RemoveMatchingItems(Record.FieldValues(_), {'', null}))),    #'Replaced Value' = Table.ReplaceValue(#'Removed Blank Rows','','',Replacer.ReplaceValue,{'Organization Zone Code'}),    #'Sorted Rows' = Table.Sort(#'Replaced Value',{{'Organization Zone Code', Order.Ascending}}),    #'Added Custom' = Table.AddColumn(#'Sorted Rows', 'NPG', each if Text.Contains([Organization Zone Code], '-99') then 'NPG' else if Text.Contains([Organization Zone Code], '-98') then 'NPG' else if Text.Contains([Organization Zone Code], '-97') then 'NPG' else if Text.Contains([Organization Zone Code], '-96') then 'NPG' else if Text.Contains([Organization Zone Code], '-95') then 'NPG' else if Text.Contains([Organization Zone Code], '-94') then 'NPG' else if [Organization Zone Code] = '-93' then 'NPG' else if Text.Contains([Organization Zone Code], '-92') then 'NPG' else if Text.Contains([Organization Zone Code], '-91') then 'NPG' else if Text.Contains([Organization Zone Code], '-90') then 'NPG' else 'N'),    #'Added Conditional Column' = Table.AddColumn(#'Added Custom', 'Custom', each if [NPG] = 'NPG' then 'National Practice Group' else 'Not NPG'),    #'Renamed Columns1' = Table.RenameColumns(#'Added Conditional Column',{{'Custom', 'National Practice Group'}}),    #'Added Conditional Column1' = Table.AddColumn(#'Renamed Columns1', 'Custom', each if [RFO] = '0115' then 'Growth' else if [RFO] = '0190' then 'Growth' else if [RFO] = '0283' then 'Core' else if [RFO] = '0291' then 'Growth' else if [RFO] = '0361' then 'Core' else if [RFO] = '0384' then 'Growth' else if [RFO] = '0435' then 'Core' else if [RFO] = '0525' then 'Growth' else null),    #'Renamed Columns2' = Table.RenameColumns(#'Added Conditional Column1',{{'Custom', 'Core or Growth'}}),    #'Added Custom1' = Table.AddColumn(#'Renamed Columns2', 'Market Number', each Text.End([Market],2)),    #'Added Conditional Column2' = Table.AddColumn(#'Added Custom1', 'Experienced Advisor', each if [Market Number] = '01' then 'PMC - Market 1' else if [Market Number] = '59' then 'PMC - Market 59' else if [Market Number] = '69' then 'GPA - Market 69' else if [Market Number] = '79' then 'GPD - Market 79' else if [Market Number] = '98' then 'NPG - Market 98' else if [Market Number] = '99' then 'NPG - Market 99' else if [Market Number] = '89' then 'PPC - Market 89' else null),    #'Added Custom2' = Table.AddColumn(#'Added Conditional Column2', 'Exp Advisor Sort', each Text.End([Experienced Advisor],9))in    #'Added Custom2'"}]},{"name":"DTRB_PERF_DATES","isHidden":false,"storageMode":"Import","columns":[{"name":"DT_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CAL_DAY_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_END_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_WK_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"SRC_SYS_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CRET_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"LST_UPDT_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"CRET_USER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LST_UPDT_USER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_DAY_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_MTH_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_QTR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"YTD Flag","dataType":"String","isHidden":false,"expression":"if(and(DTRB_PERF_DATES[CAL_DAY_DT] \u003c= DTRB_PERF_DATES[Prior Sunday], DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT'), True, False)","columnType":"Calculated"},{"name":"Prior Sunday","dataType":"String","isHidden":false,"expression":"LOOKUPVALUE(DTRB_PERF_DATES[END_OF_WK_DATE_MAX], DTRB_PERF_DATES[CAL_DAY_DT], LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT')-6)","columnType":"Calculated"},{"name":"CalWeekDay","dataType":"String","isHidden":false,"expression":"weekday( DTRB_PERF_DATES[CAL_DAY_DT])","columnType":"Calculated"},{"name":"join_date","dataType":"String","isHidden":false,"expression":"DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR] \u0026 '-' \u0026 DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] \u0026 '-' \u0026 DTRB_PERF_DATES[CalWeekDay]","columnType":"Calculated"},{"name":"PYTD Flag","dataType":"String","isHidden":false,"expression":"var prevweeknum = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[CAL_DAY_DT],max(DTRB_PERF_DATES[Prior Sunday]))return if(and(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] \u003c= prevweeknum, DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='PREVIOUS'), True, False)","columnType":"Calculated"},{"name":"Prior Week Flag","dataType":"String","isHidden":false,"expression":"if(LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR], DTRB_PERF_DATES[CAL_DAY_DT], LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT') -3) = DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR], 'TRUE')","columnType":"Calculated"},{"name":"perf_yr_wk","dataType":"String","isHidden":false,"expression":"DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR] \u0026 '-' \u0026 DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR]","columnType":"Calculated"},{"name":"Current Year Flag","dataType":"String","isHidden":false,"expression":"if(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT', True, False)","columnType":"Calculated"},{"name":"Prior Year Flag","dataType":"String","isHidden":false,"expression":"if(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'PREVIOUS', True, False)","columnType":"Calculated"},{"name":"Prior Year 2 Flag","dataType":"String","isHidden":false,"expression":"if(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR] = DTRB_PERF_DATES[Prior Year 2], True, False)","columnType":"Calculated"},{"name":"CalYear","dataType":"String","isHidden":false,"expression":"year(DTRB_PERF_DATES[CAL_DAY_DT])","columnType":"Calculated"},{"name":"Cal_YTD_Flag","dataType":"String","isHidden":false,"expression":"if(and(DTRB_PERF_DATES[CAL_DAY_DT] \u003c= DTRB_PERF_DATES[Prior Sunday], DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'CURRENT'), True, False)","columnType":"Calculated"},{"name":"Cal_Prior_Year_Flag","dataType":"String","isHidden":false,"expression":"if(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'PREVIOUS', True, False)","columnType":"Calculated"},{"name":"Cal_Prior_Year_2_Flag","dataType":"String","isHidden":false,"expression":"if(DTRB_PERF_DATES[CalYear] = DTRB_PERF_DATES[Prior Year 2], True, False)","columnType":"Calculated"},{"name":"Cal_PYTD_Flag","dataType":"String","isHidden":false,"expression":"if(and(DTRB_PERF_DATES[CAL_DAY_DT] \u003c= DTRB_PERF_DATES[PYTD DATE], DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'PREVIOUS'), True, False)","columnType":"Calculated"},{"name":"Cal_QTR","dataType":"String","isHidden":false,"expression":"QUARTER(DTRB_PERF_DATES[CAL_DAY_DT])","columnType":"Calculated"},{"name":"Two Sundays Ago","dataType":"String","isHidden":false,"expression":"LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT], today() - 14)","columnType":"Calculated"},{"name":"PYTD Flag two Sundays","dataType":"String","isHidden":false,"expression":"if(and(DTRB_PERF_DATES[CAL_DAY_DT] \u003c= DTRB_PERF_DATES[PYTD DATE two Sundays], DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR] = DTRB_PERF_DATES[Prior Year]), True, False)","columnType":"Calculated"},{"name":"YTD Flag two Sundays","dataType":"String","isHidden":false,"expression":"if(and(DTRB_PERF_DATES[CAL_DAY_DT] \u003c= DTRB_PERF_DATES[Two Sundays Ago], DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR] = DTRB_PERF_DATES[Current Year]), True, False)","columnType":"Calculated"},{"name":"PYTD Flag SF","dataType":"String","isHidden":false,"expression":"if(and(DTRB_PERF_DATES[CAL_DAY_DT] \u003c= DATE(YEAR(today()-1)-1,MONTH(today()-1),DAY(today()-1)),DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR] = year(LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT'))-1), True, False)","columnType":"Calculated"},{"name":"Prior 4 Weeks Flag","dataType":"String","isHidden":false,"expression":"if(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] \u003e= LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR], DTRB_PERF_DATES[CAL_DAY_DT], LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT')-28) \u0026\u0026 DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] \u003c= LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR], DTRB_PERF_DATES[CAL_DAY_DT], LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT')-7), True, False)","columnType":"Calculated"},{"name":"Prior 52 Weeks Flag","dataType":"String","isHidden":false,"expression":"if(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT] \u003e= LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT], LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT') -365) \u0026\u0026 DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT] \u003c= LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT], LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT')-7), True, False)","columnType":"Calculated"},{"name":"Prior 30 days Flag","dataType":"String","isHidden":false,"expression":"if(DTRB_PERF_DATES[CAL_DAY_DT] \u003e= LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT')-30 \u0026\u0026 DTRB_PERF_DATES[CAL_DAY_DT] \u003c= LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT')-1, True, False)","columnType":"Calculated"},{"name":"Next 14 days Flag","dataType":"String","isHidden":false,"expression":"if(DTRB_PERF_DATES[CAL_DAY_DT] \u003e= LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT')\u0026\u0026 DTRB_PERF_DATES[CAL_DAY_DT] \u003c= LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT') +13, True, False)","columnType":"Calculated"},{"name":"Week End Date MAX","dataType":"String","isHidden":false,"expression":"calculate(max(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT]), ALLEXCEPT(DTRB_PERF_DATES,DTRB_PERF_DATES[perf_yr_wk]))","columnType":"Calculated"},{"name":"END_OF_WK_DATE_MAX","dataType":"String","isHidden":false,"expression":"calculate(max(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT]), ALLEXCEPT(DTRB_PERF_DATES,DTRB_PERF_DATES[perf_yr_wk]))","columnType":"Calculated"},{"name":"Prior Sunday CAL YR","dataType":"String","isHidden":false,"expression":"LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT],date(2021,12,31))","columnType":"Calculated"},{"name":"EOY Date","dataType":"String","isHidden":false,"expression":"date(2021,12,31)","columnType":"Calculated"},{"name":"Prior 12 Weeks Flag","dataType":"String","isHidden":false,"expression":"if(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] \u003e= LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR], DTRB_PERF_DATES[CAL_DAY_DT], LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT')-84) \u0026\u0026 DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] \u003c= LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR], DTRB_PERF_DATES[CAL_DAY_DT], LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT')-7), True, False)","columnType":"Calculated"},{"name":"WeekOffset","dataType":"String","isHidden":false,"expression":"DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR]-1","columnType":"Calculated"},{"name":"WeekIndex","dataType":"String","isHidden":false,"expression":"YEAR(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT])*52+DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR]","columnType":"Calculated"},{"name":"Month Name","dataType":"String","isHidden":false,"expression":"FORMAT(DTRB_PERF_DATES[CAL_DAY_DT], 'MMMM')","columnType":"Calculated"},{"name":"Month Sort","dataType":"String","isHidden":false,"expression":"FORMAT(DTRB_PERF_DATES[CAL_DAY_DT],'MM')","columnType":"Calculated"},{"name":"Prior 4 Weeks Flag NC","dataType":"String","isHidden":false,"expression":"if(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] \u003e= LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR], DTRB_PERF_DATES[CAL_DAY_DT], LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT')-35) \u0026\u0026 DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] \u003c= LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR], DTRB_PERF_DATES[CAL_DAY_DT], LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT')-14), True, False)","columnType":"Calculated"},{"name":"Next 31 days Flag","dataType":"String","isHidden":false,"expression":"if(DTRB_PERF_DATES[CAL_DAY_DT] \u003e= LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT')\u0026\u0026 DTRB_PERF_DATES[CAL_DAY_DT] \u003c= LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT') +30, True, False)","columnType":"Calculated"}],"measures":[{"name":"Current Date","expression":"today()","isHidden":false},{"name":"Current Year","expression":"LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT],'CURRENT')","isHidden":false},{"name":"Prior YEar","expression":"DTRB_PERF_DATES[Current Year] - 1","isHidden":false},{"name":"PYTD DATE","expression":"(LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT], today() - 5)) - 364","isHidden":false},{"name":"Prior Year 2","expression":"DTRB_PERF_DATES[Current Year] - 2","isHidden":false},{"name":"PYTD DATE two Sundays","expression":"(LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT], today() - 379))","isHidden":false},{"name":"Days into Year","expression":"CALCULATE(COUNT(DTRB_PERF_DATES[CAL_DAY_DT]),DTRB_PERF_DATES[YTD Flag] in {TRUE})","isHidden":false},{"name":"Days in Year","expression":"CALCULATE(COUNT(DTRB_PERF_DATES[CAL_DAY_DT]),DTRB_PERF_DATES[Current Year Flag] in {TRUE})","isHidden":false},{"name":"Weeks Remaining NFC","expression":"calculate(52-MAX(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR]),DTRB_PERF_DATES[YTD Flag two Sundays] in {TRUE})","isHidden":false},{"name":"Current Week Number","expression":"LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[Prior Week Flag],'TRUE')","isHidden":false}],"source":[{"expression":"let    Source = DB2.Database('podwh021:50000', 'podwh021', [HierarchicalNavigation=true, Implementation='Microsoft']),    COMMON = Source{[Schema='COMMON']}[Data],    DTRB_PERF_DATES1 = COMMON{[Name='DTRB_PERF_DATES']}[Data]in    DTRB_PERF_DATES1"}]},{"name":"CP _Plus","isHidden":false,"storageMode":"Import","columns":[{"name":"RFO_Mkt","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Current Wk","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CP+ Scores Above","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"PerfYr_Wk","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"YTD CP Plus","expression":"CALCULATE(    sum(\u0027CP _Plus\u0027[CP+ Scores Above]),    DTRB_PERF_DATES[YTD Flag] in {TRUE})","isHidden":false},{"name":"PYTD CP Plus","expression":"CALCULATE(    sum(\u0027CP _Plus\u0027[CP+ Scores Above]),    DTRB_PERF_DATES[PYTD Flag] in {TRUE})","isHidden":false},{"name":"PY CP PLus","expression":"CALCULATE(sum(\u0027CP _Plus\u0027[CP+ Scores Above]),DTRB_PERF_DATES[Prior Year Flag] in {TRUE})","isHidden":false},{"name":"YOY Change CP","expression":"DIVIDE((\u0027CP _Plus\u0027[YTD CP Plus] - \u0027CP _Plus\u0027[PYTD CP Plus]),\u0027CP _Plus\u0027[PYTD CP Plus])","isHidden":false},{"name":"CP+ 4 Wk Average","expression":"CALCULATE(divide(\u0027CP _Plus\u0027[YTD CP Plus],4),\u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {TRUE},DTRB_PERF_DATES[Current Year Flag] in {TRUE})","isHidden":false},{"name":"CP+ YTD Wk Average","expression":"CALCULATE(divide(\u0027CP _Plus\u0027[YTD CP Plus],max(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR])),\u0027DTRB_PERF_DATES\u0027[YTD Flag] in {TRUE})","isHidden":false},{"name":"CP+ Curr Wk","expression":"CALCULATE(\u0027CP _Plus\u0027[YTD CP Plus],\u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'TRUE')","isHidden":false},{"name":"4wk CP+ Gap","expression":"[Weekly Need CP+]-\u0027CP _Plus\u0027[CP+ 4 Wk Average]","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//SHARED//Public//DI and BI//Capacity Dashboard//Capacity Dashboard-CP+.xlsx'), null, true),    Sheet1_Sheet = Source{[Item='Sheet1',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'RFO_ID', Int64.Type}, {'ZONE_ID', Int64.Type}, {'RFO_Mkt', type text}, {'Type', type text}, {'Year', Int64.Type}, {'Week', Int64.Type}, {'Count', Int64.Type}}),    #'Duplicated Column' = Table.DuplicateColumn(#'Changed Type', 'Year', 'Year - Copy'),    #'Duplicated Column1' = Table.DuplicateColumn(#'Duplicated Column', 'Week', 'Week - Copy'),    #'Merged Columns' = Table.CombineColumns(Table.TransformColumnTypes(#'Duplicated Column1', {{'Year - Copy', type text}, {'Week - Copy', type text}}, 'en-US'),{'Year - Copy', 'Week - Copy'},Combiner.CombineTextByDelimiter('-', QuoteStyle.None),'PerfYear-PerfWeek'),    #'Removed Columns' = Table.RemoveColumns(#'Merged Columns',{'PerfYear-PerfWeek'}),    #'Changed Type1' = Table.TransformColumnTypes(#'Removed Columns',{{'CP+ Scores Above', Int64.Type}, {'Cumulative Counts', Int64.Type}, {'Cumulative CP+ Above', Int64.Type}}),    #'Removed Columns1' = Table.RemoveColumns(#'Changed Type1',{'JOIN VALUE', 'RFO_ID', 'ZONE_ID', 'Type', 'Count', 'Cumulative Counts', 'Cumulative CP+ Above', 'CP+ Above'}),    #'Added Custom' = Table.AddColumn(#'Removed Columns1', 'PerfYrWk_PQ', each Number.ToText([Year])\u0026'-'\u0026Number.ToText([Week])),    #'Removed Columns2' = Table.RemoveColumns(#'Added Custom',{'Year', 'Week'}),    #'Renamed Columns' = Table.RenameColumns(#'Removed Columns2',{{'PerfYrWk_PQ', 'PerfYr_Wk'}})in    #'Renamed Columns'"}]},{"name":"Max_Cal_Dt","isHidden":false,"storageMode":"Import","columns":[{"name":"DTRB_PERF_RPT_YR_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_WK_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"MAX_CAL_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"PerfYrWk","dataType":"String","isHidden":false,"expression":"Max_Cal_Dt[DTRB_PERF_RPT_YR_NBR] \u0026 '-' \u0026 Max_Cal_Dt[DTRB_PERF_RPT_YR_WK_NBR]","columnType":"Calculated"}],"measures":[],"source":[{"expression":"let    Source = DB2.Database('podwh021:50000', 'podwh021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT DISTINCT#(lf)DATES_ITRL.DTRB_PERF_RPT_YR_NBR,#(lf)DATES_ITRL.DTRB_PERF_RPT_YR_WK_NBR,#(lf)max(DATES_ITRL.CAL_DAY_DT) as MAX_Cal_DT#(lf)FROM COMMON.DTRB_PERF_DATES DATES_ITRL#(lf)GROUP BY DATES_ITRL.DTRB_PERF_RPT_YR_NBR,#(lf)DATES_ITRL.DTRB_PERF_RPT_YR_WK_NBR'])in    Source"}]},{"name":"ANBP_OtherRev_DD","isHidden":false,"storageMode":"Import","columns":[{"name":"RALN_MKT_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CalYr","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CalWk","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"max_cal_dt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Value","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ANBP_OtherRev","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RALN_RFO_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Product (groups)","dataType":"String","isHidden":false,"expression":"SWITCH(  TRUE,  ISBLANK(\u0027ANBP_OtherRev_DD\u0027[Product]),  '(Blank)',  \u0027ANBP_OtherRev_DD\u0027[Product] IN {'FA',    'FIA',    'SO',    'SPIA',    'VA'},  'Annuity',  \u0027ANBP_OtherRev_DD\u0027[Product] IN {'DI',    'LTC',    'LTC Hybrid',    'LTC Hybrid Single',    'MED_PLANS'},  'Health',  \u0027ANBP_OtherRev_DD\u0027[Product] IN {'PERM_RECURRING',    'SPWL',    'Term',    'UL',    'VUL'},  'Life',  \u0027ANBP_OtherRev_DD\u0027[Product] IN {'ADVANTAGE',    'ADVISOR',    'ADVISOR GUIDED',    'GENESIS',    'IMPACT',    'INCOME FOCUSED',    'SELECT',    'SHEPHERD',    'SHIELD',    'SMA',    'TAN MANAGED ACCOUNTS',    'UMA'},  'Managed Accounts',  \u0027ANBP_OtherRev_DD\u0027[Product] IN {'MF A-SHARE LMBF',    'MF A-SHARES',    'MF S-SHARE LMBF',    'MF S-SHARES',    'NON-PROP MUTUAL FUNDS'},  'Mutual Funds',  \u0027ANBP_OtherRev_DD\u0027[Product] IN {'TRUST'},  'Trust',  'Other')","columnType":"Calculated"}],"measures":[{"name":"YTD WID","expression":"CALCULATE(     sum(ANBP_OtherRev_DD[Value]),     ANBP_OtherRev_DD[ANBP_OtherRev] = 'WID',     DTRB_PERF_DATES[Cal_YTD_Flag] in {TRUE})","isHidden":false},{"name":"CY ANBP","expression":"CALCULATE(     sum(ANBP_OtherRev_DD[Value]),        DTRB_PERF_DATES[Cal_YTD_Flag] in {TRUE},        ANBP_OtherRev_DD[ANBP_OtherRev] = 'ANBP')","isHidden":false},{"name":"CY OtherRev","expression":"CALCULATE(     sum(ANBP_OtherRev_DD[Value]),    DTRB_PERF_DATES[Cal_YTD_Flag] in {TRUE},     ANBP_OtherRev_DD[ANBP_OtherRev] = 'OtherRev')","isHidden":false},{"name":"PY ANBP","expression":"CALCULATE(     sum(ANBP_OtherRev_DD[Value]),     DTRB_PERF_DATES[Cal_Prior_Year_Flag] in {TRUE},    ANBP_OtherRev_DD[ANBP_OtherRev] = 'ANBP')","isHidden":false},{"name":"PY WID","expression":"CALCULATE(     sum(ANBP_OtherRev_DD[Value]),     DTRB_PERF_DATES[Cal_Prior_Year_Flag] in {TRUE},     ANBP_OtherRev_DD[ANBP_OtherRev] = 'WID')","isHidden":false},{"name":"PY2 ANBP","expression":"CALCULATE(     sum(ANBP_OtherRev_DD[Value]),     DTRB_PERF_DATES[Cal_Prior_Year_2_Flag] in {TRUE},     ANBP_OtherRev_DD[ANBP_OtherRev] = 'ANBP')","isHidden":false},{"name":"PY2 WID","expression":"CALCULATE(     sum(ANBP_OtherRev_DD[Value]),     DTRB_PERF_DATES[Cal_Prior_Year_2_Flag] in {TRUE},     ANBP_OtherRev_DD[ANBP_OtherRev] = 'WID')","isHidden":false},{"name":"PYTD ANBP","expression":"CALCULATE(     sum(ANBP_OtherRev_DD[Value]),     ANBP_OtherRev_DD[ANBP_OtherRev] = 'ANBP',     DTRB_PERF_DATES[Cal_PYTD_Flag] in {TRUE})","isHidden":false},{"name":"PYTD WID","expression":"CALCULATE(     sum(ANBP_OtherRev_DD[Value]),     ANBP_OtherRev_DD[ANBP_OtherRev] = 'WID',     DTRB_PERF_DATES[Cal_PYTD_Flag] in {TRUE})","isHidden":false},{"name":"ANBP YOY Change","expression":"DIVIDE(([CY ANBP] - ANBP_OtherRev_DD[PYTD ANBP]),ANBP_OtherRev_DD[PYTD ANBP])","isHidden":false},{"name":"WID YOY Change","expression":"DIVIDE((ANBP_OtherRev_DD[YTD WID] - ANBP_OtherRev_DD[PYTD WID]),ANBP_OtherRev_DD[PYTD WID])","isHidden":false},{"name":"YTD OtherRev running total in CalWk","expression":"CALCULATE(\\t[YTD WID], \\tFILTER(\\t\\tALLSELECTED(\u0027ANBP_OtherRev_DD\u0027[CalWk]),\\t\\tISONORAFTER(\u0027ANBP_OtherRev_DD\u0027[CalWk], MAX(\u0027ANBP_OtherRev_DD\u0027[CalWk]), DESC)\\t))","isHidden":false},{"name":"PYTD OtherRev running total in CalWk","expression":"CALCULATE(\\t[PYTD WID],\\tFILTER(\\t\\tALLSELECTED(\u0027ANBP_OtherRev_DD\u0027[CalWk]),\\t\\tISONORAFTER(\u0027ANBP_OtherRev_DD\u0027[CalWk], MAX(\u0027ANBP_OtherRev_DD\u0027[CalWk]), DESC)\\t))","isHidden":false},{"name":"PY2 OtherRev running total in CalWk","expression":"CALCULATE(\\t[PY2 WID],\\tFILTER(\\t\\tALLSELECTED(\u0027ANBP_OtherRev_DD\u0027[CalWk]),\\t\\tISONORAFTER(\u0027ANBP_OtherRev_DD\u0027[CalWk], MAX(\u0027ANBP_OtherRev_DD\u0027[CalWk]), DESC)\\t))","isHidden":false},{"name":"PY OtherRev running total in CalWk","expression":"CALCULATE(\\t[PY WID],\\tFILTER(\\t\\tALLSELECTED(\u0027ANBP_OtherRev_DD\u0027[CalWk]),\\t\\tISONORAFTER(\u0027ANBP_OtherRev_DD\u0027[CalWk], MAX(\u0027ANBP_OtherRev_DD\u0027[CalWk]), DESC)\\t))","isHidden":false},{"name":"YTD_OtherRev_Cummulative","expression":"CALCULATE(    ANBP_OtherRev_DD[YTD OtherRev running total in CalWk],    DTRB_PERF_DATES[Cal_YTD_Flag] in {TRUE})","isHidden":false},{"name":"ANBP/Appt","expression":"divide([CY ANBP],\u0027Appointments/PC/JFW\u0027[YTD Appointments])","isHidden":false},{"name":"WID 4 Wk Average","expression":"CALCULATE(divide(ANBP_OtherRev_DD[YTD WID],4),\u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {TRUE})","isHidden":false},{"name":"WID Curr Wk","expression":"CALCULATE(ANBP_OtherRev_DD[YTD WID],\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_WK_TXT]='PREVIOUS')","isHidden":false},{"name":"OtherREV YTD Wk Average","expression":"CALCULATE(divide(ANBP_OtherRev_DD[YTD WID],max(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR])),\u0027DTRB_PERF_DATES\u0027[Cal_YTD_Flag] in {TRUE})","isHidden":false},{"name":"ANBP 4 Wk Average","expression":"CALCULATE(divide(ANBP_OtherRev_DD[CY ANBP],4),\u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {TRUE})","isHidden":false},{"name":"ANBP Curr Wk","expression":"CALCULATE(ANBP_OtherRev_DD[CY ANBP],\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_WK_TXT] = 'PREVIOUS')","isHidden":false},{"name":"ANBP YTD Wk Average","expression":"CALCULATE(divide(ANBP_OtherRev_DD[CY ANBP],max(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR])),\u0027DTRB_PERF_DATES\u0027[Cal_YTD_Flag] in {TRUE})","isHidden":false},{"name":"4wk ANBP Gap","expression":"YTD_GOALS_DD[Weekly Need ANBP]-ANBP_OtherRev_DD[ANBP 4 Wk Average]","isHidden":false},{"name":"4wk Other Rev Gap","expression":"YTD_GOALS_DD[Weekly Need WID]-ANBP_OtherRev_DD[WID 4 Wk Average]","isHidden":false},{"name":"4wk ANBP (LH) Gap","expression":"YTD_GOALS_DD[Weekly Need ANBP (LH)]-ANBP_OtherRev_DD[ANBP 4 Wk Average]","isHidden":false},{"name":"YTD Total Sales","expression":"ANBP_OtherRev_DD[CY ANBP]+ANBP_OtherRev_DD[YTD WID]","isHidden":false},{"name":"Total Sales YOY Change","expression":"DIVIDE((ANBP_OtherRev_DD[YTD Total Sales] - ANBP_OtherRev_DD[PYTD Total Sales]),ANBP_OtherRev_DD[PYTD Total Sales])","isHidden":false},{"name":"PYTD Total Sales","expression":"ANBP_OtherRev_DD[PYTD ANBP]+ANBP_OtherRev_DD[PYTD WID]","isHidden":false},{"name":"PY Total Sales","expression":"CALCULATE(     sum(ANBP_OtherRev_DD[Value]),     DTRB_PERF_DATES[Cal_Prior_Year_Flag] in {TRUE})","isHidden":false},{"name":"PY2 Total Sales","expression":"CALCULATE(     sum(ANBP_OtherRev_DD[Value]),     DTRB_PERF_DATES[Cal_Prior_Year_2_Flag] in {TRUE})","isHidden":false}],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////VSSHR//SHARED//Public//DI and BI//Distribution Dashboard//ANBP_OtherRev_SD.csv'),[Delimiter=',', Columns=12, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'RALN_MKT_CDE', type text}, {'CalYr', Int64.Type}, {'CalWk', Int64.Type}, {'max_cal_dt', type date}, {'Value', type number}, {'ANBP_OtherRev', type text}}),    #'Grouped Rows' = Table.Group(#'Changed Type', {'RALN_RFO_CDE', 'MVP', 'Market', 'RALN_MKT_CDE', 'CalYr', 'CalWk', 'max_cal_dt', 'Product', 'ANBP_OtherRev'}, {{'Value', each List.Sum([Value]), type nullable number}}),    #'Appended Query' = Table.Combine({#'Grouped Rows', WID}),    #'Filtered Rows' = Table.SelectRows(#'Appended Query', each ([ANBP_OtherRev] \u003c\u003e 'OtherRev')),    #'Appended Query1' = Table.Combine({#'Filtered Rows', #'UL VUL Excess_Append Query'}),    #'Removed Columns' = Table.RemoveColumns(#'Appended Query1',{'beg_mth_dt', 'Endof Month_Friday', 'Mapping.Product Roll Up', 'ORZN_CDE_With Duplicate NPG Rows', 'Not YTD', 'MonthEndDate', 'MONTH'})in    #'Removed Columns'"}]},{"name":"Combined_Launch_Data","isHidden":false,"storageMode":"Import","columns":[{"name":"Level ","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Level Detail","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"YTD Montly Avg","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Last Update Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Retention Monthly Avg","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[{"name":"CL Percent","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Experienced Advisor]),SELECTEDVALUE(RFO_Zone[Experienced Advisor],'N/A'),                   if(ISFILTERED(RFO_Zone[NPG]),SELECTEDVALUE(RFO_Zone[NPG],'N/A'),                   if(ISFILTERED(RFO_Zone[Core or Growth]),SELECTEDVALUE(RFO_Zone[Core or Growth],'N/A'),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]),'Thrivent Advisor Group')))))))returnCALCULATE(sum(Combined_Launch_Data[YTD Montly Avg]),Combined_Launch_Data[Level Detail] = FilterChoice)","isHidden":false},{"name":"ATE Retention Percent","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]),'Thrivent Advisor Group')))))returnCALCULATE(sum(Combined_Launch_Data[Retention Monthly Avg]),Combined_Launch_Data[Level Detail] = FilterChoice)","isHidden":false},{"name":"CL Percent Scorecard","expression":"var FilterChoice = SELECTEDVALUE(RFO_Zone[Organization Zone Code])                  returnCALCULATE(sum(Combined_Launch_Data[YTD Montly Avg]),Combined_Launch_Data[Level Detail] = FilterChoice)","isHidden":false},{"name":"CL Percent Mkt Scorecard","expression":"var FilterChoice = SELECTEDVALUE(RFO_Zone[Organization Zone Code])                  returnCALCULATE(sum(Combined_Launch_Data[YTD Montly Avg]),Combined_Launch_Data[Level Detail] = FilterChoice)","isHidden":false},{"name":"CL Percent MVP Scorecard","expression":"var FilterChoice = SELECTEDVALUE(MVPs[MVP_ID])                  returnCALCULATE(sum(Combined_Launch_Data[YTD Montly Avg]),Combined_Launch_Data[Level Detail] = FilterChoice)","isHidden":false}],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////VSSHR//SHARED//Public//DI and BI//Distribution Dashboard//Combined_Launch_Data.csv'),[Delimiter=',', Columns=7, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'YTD Montly Avg', Percentage.Type}, {'Last Update Date', type date}, {'Retention Monthly Avg', Percentage.Type}}),    #'Replaced Value' = Table.ReplaceValue(#'Changed Type','Career','Thrivent Advisor Group',Replacer.ReplaceText,{'Level '}),    #'Replaced Value1' = Table.ReplaceValue(#'Replaced Value','Career','Thrivent Advisor Group',Replacer.ReplaceText,{'Level Detail'}),    #'Removed Blank Rows' = Table.SelectRows(#'Replaced Value1', each not List.IsEmpty(List.RemoveMatchingItems(Record.FieldValues(_), {'', null}))),    #'Trimmed Text' = Table.TransformColumns(#'Removed Blank Rows',{{'Level Detail', Text.Trim, type text}})in    #'Trimmed Text'"}]},{"name":"Lags","isHidden":false,"storageMode":"Import","columns":[{"name":"MeasureName","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"SelectedActualsLags","expression":"IF(HASONEVALUE(\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]),SWITCH(VALUES(\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]),'NFP', [YTD NFP PCs Goal],'Vet', [YTD Vet PC Goal]))","isHidden":false},{"name":"RankANBP","expression":"RANKX(ALLSELECTED(RFO_Zone[RFO Name]),\u0027YTD_GOALS_DD\u0027[% ANBP YTD])","isHidden":false},{"name":"RankOtherRev","expression":"RANKX(ALLSELECTED(RFO_Zone[RFO Name]),\u0027YTD_GOALS_DD\u0027[% WID YTD])","isHidden":false},{"name":"RankNewClients","expression":"RANKX(ALLSELECTED(RFO_Zone[RFO Name]),\u0027YTD_GOALS_DD\u0027[% NFC YTD])","isHidden":false},{"name":"RankWMFC","expression":"RANKX(ALLSELECTED(RFO_Zone[RFO Name]),\u0027YTD_GOALS_DD\u0027[% WMFC YTD])","isHidden":false},{"name":"RankCL","expression":"RANKX(ALLSELECTED(RFO_Zone[RFO Name]),\u0027YTD_GOALS_DD\u0027[% CL ME])","isHidden":false},{"name":"Sum_of_Lagging_Ranks","expression":"var ANBP_Rank = RANKX(ALLSELECTED(RFO_Zone[RFO Name]), \u0027YTD_GOALS_DD\u0027[% ANBP YTD])var NewClients_Rank = RANKX(ALLSELECTED(RFO_Zone[RFO Name]), \u0027YTD_GOALS_DD\u0027[% NFC YTD])var OtherRev_Rank = RANKX(ALLSELECTED(RFO_Zone[RFO Name]), \u0027YTD_GOALS_DD\u0027[% WID YTD])var CL_Rank = RANKX(ALLSELECTED(RFO_Zone[RFO Name]), \u0027YTD_GOALS_DD\u0027[% CL ME])var WMFC_Rank = RANKX(ALLSELECTED(RFO_Zone[RFO Name]), \u0027YTD_GOALS_DD\u0027[% WMFC YTD])var Advice_Rank = RANKX(ALLSELECTED(RFO_Zone[RFO Name]),\u0027Advice Adoption - TAG\u0027[Advice Adoption % TAG])RETURNANBP_Rank+NewClients_Rank+OtherRev_Rank+CL_Rank+WMFC_Rank+Advice_Rank","isHidden":false},{"name":"Lagging Indicator Goal Rank","expression":"RANKX(ALL(RFO_Zone[RFO Name]),\u0027Lags\u0027[WEIGHTED_Sum_of_Lagging_Ranks],,ASC)","isHidden":false},{"name":"Market RankANBP","expression":"RANKX(ALLSELECTED(Market_Leaders[Market_Leader]),\u0027YTD_GOALS_DD\u0027[% ANBP YTD])","isHidden":false},{"name":"Market RankCL","expression":"RANKX(ALLSELECTED(Market_Leaders[Market_Leader]),\u0027YTD_GOALS_DD\u0027[% CL ME])","isHidden":false},{"name":"Market RankNewClients","expression":"RANKX(ALLSELECTED(Market_Leaders[Market_Leader]),\u0027YTD_GOALS_DD\u0027[% NFC YTD])","isHidden":false},{"name":"Market RankOtherRev","expression":"RANKX(ALLSELECTED(Market_Leaders[Market_Leader]),\u0027YTD_GOALS_DD\u0027[% WID YTD])","isHidden":false},{"name":"Market RankWMFC","expression":"RANKX(ALLSELECTED(Market_Leaders[Market_Leader]),\u0027YTD_GOALS_DD\u0027[% WMFC YTD])","isHidden":false},{"name":"Sum_of_Market_Lagging_Ranks","expression":"var ANBP_Rank = RANKX(ALLSELECTED(Market_Leaders[Market_Leader]), \u0027YTD_GOALS_DD\u0027[% ANBP YTD])var NewClients_Rank = RANKX(ALLSELECTED(Market_Leaders[Market_Leader]), \u0027YTD_GOALS_DD\u0027[% NFC YTD])var OtherRev_Rank = RANKX(ALLSELECTED(Market_Leaders[Market_Leader]), \u0027YTD_GOALS_DD\u0027[% WID YTD])var CL_Rank = RANKX(ALLSELECTED(Market_Leaders[Market_Leader]), \u0027YTD_GOALS_DD\u0027[% CL ME])var WMFC_Rank = RANKX(ALLSELECTED(Market_Leaders[Market_Leader]), \u0027YTD_GOALS_DD\u0027[% WMFC YTD])RETURNANBP_Rank+NewClients_Rank+OtherRev_Rank+CL_Rank+WMFC_Rank","isHidden":false},{"name":"Market Lagging Indicator Goal Rank","expression":"RANKX(ALLSELECTED(Market_Leaders[Market_Leader]),\u0027Lags\u0027[Sum_of_Market_Lagging_Ranks],,ASC)","isHidden":false},{"name":"RankAdviceNC","expression":"RANKX(ALLSELECTED(RFO_Zone[RFO Name]),\u0027YTD_GOALS_DD\u0027[% of YTD NC Advice Goal])","isHidden":false},{"name":"MVP RankWMFC","expression":"RANKX(ALLSELECTED(MVPs[Market_Leader]),\u0027YTD_GOALS_DD\u0027[% WMFC YTD])","isHidden":false},{"name":"MVP RankANBP","expression":"RANKX(ALLSELECTED(MVPs[Market_Leader]),\u0027YTD_GOALS_DD\u0027[% ANBP YTD])","isHidden":false},{"name":"MVP RankNewClients","expression":"RANKX(ALLSELECTED(MVPs[Market_Leader]),\u0027YTD_GOALS_DD\u0027[% NFC YTD])","isHidden":false},{"name":"MVP RankOtherRev","expression":"RANKX(ALLSELECTED(MVPs[Market_Leader]),\u0027YTD_GOALS_DD\u0027[% WID YTD])","isHidden":false},{"name":"MVP Sum_of_Lagging_Ranks","expression":"var TotalSales_Rank = RANKX(ALLSELECTED(MVPs[Market_Leader]), \u0027YTD_GOALS_DD\u0027[% Total Sales YTD])var WMFC_Rank = RANKX(ALLSELECTED(MVPs[Market_Leader]), \u0027YTD_GOALS_DD\u0027[% WMFC YTD])var Advice_Rank = RANKX(ALLSELECTED(MVPs[Market_Leader]),\u0027Advice Adoption - MVP\u0027[Advice Adoption % MVP])var NFAProductivity_Rank = RANKX(ALLSELECTED(MVPs[Market_Leader]), \u0027Pace Performance Snapshot\u0027[NFA Productivity])RETURN(WMFC_Rank*0.40)+(TotalSales_Rank*0.30)+(NFAProductivity_Rank*0.20)+(Advice_Rank*0.10)","isHidden":false},{"name":"MVP Lagging Indicator Goal Rank","expression":"RANKX(ALL(MVPs[Market_Leader]),\u0027Lags\u0027[MVP Sum_of_Lagging_Ranks],,ASC)","isHidden":false},{"name":"RankTotalSales","expression":"RANKX(ALLSELECTED(RFO_Zone[RFO Name]),[% Total Sales YTD])","isHidden":false},{"name":"MVP RankTotalSales","expression":"RANKX(ALLSELECTED(MVPs[Market_Leader]),[% Total Sales YTD])","isHidden":false},{"name":"Market RankTotalSales","expression":"RANKX(ALLSELECTED(RFO_Zone[Market Leader]),[YTD Total Sales])","isHidden":false},{"name":"MVP RankCL","expression":"RANKX(ALLSELECTED(MVPs[Market_Leader]),\u0027YTD_GOALS_DD\u0027[% CL ME])","isHidden":false},{"name":"WEIGHTED_Sum_of_Lagging_Ranks","expression":"var TotalSales_Rank = RANKX(ALLSELECTED(RFO_Zone[RFO Name]), \u0027YTD_GOALS_DD\u0027[% Total Sales YTD])var WMFC_Rank = RANKX(ALLSELECTED(RFO_Zone[RFO Name]), \u0027YTD_GOALS_DD\u0027[% WMFC YTD])var Advice_Rank = RANKX(ALLSELECTED(RFO_Zone[RFO Name]),\u0027Advice Adoption - TAG\u0027[Advice Adoption % TAG])var NFAProductivity_Rank = RANKX(ALLSELECTED(RFO_Zone[RFO Name]),\u0027Pace Performance Snapshot\u0027[NFA Productivity])RETURN(WMFC_Rank*0.40)+(TotalSales_Rank*0.30)+(NFAProductivity_Rank*0.20)+(Advice_Rank*0.10)","isHidden":false},{"name":"RankNFAProductivity","expression":"RANKX(ALLSELECTED(RFO_Zone[RFO Name]),[NFA Productivity])","isHidden":false},{"name":"MVP RankNFAProductivity","expression":"RANKX(ALLSELECTED(MVPs[Market_Leader]),[NFA Productivity])","isHidden":false},{"name":"MVP RankAdviceAdoption","expression":"RANKX(ALLSELECTED(MVPs[Market_Leader]),\u0027Advice Adoption - MVP\u0027[Advice Adoption % MVP])","isHidden":false}],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('JYwxDsIwEAS/cnLNJyASHWDRUFguDmdJTkrOyD6D8vuE0O2MRhuCO6o2nuiKL51aFUWt5EvuWzLJ6uIhuJuNKHTHB9qwm1/dTQK1urPnBLJMHuWVy8ya/t0DMoyGni6Yn9vHmZPoQB2/t2GLi3EF', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [MeasureName = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'MeasureName', type text}})in    #'Changed Type'"}]},{"name":"Leads","isHidden":false,"storageMode":"Import","columns":[{"name":"MeasureName","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"SelectedActualsLeads","expression":"IF(HASONEVALUE(Leads[MeasureName]),SWITCH(VALUES(Leads[MeasureName]),'Appointments', \u0027Appointments/PC/JFW\u0027[YTD Appointments],'Total Prospect Connects', \u0027Appointments/PC/JFW\u0027[YTD Prospect Connects],'NFP Prospect Connects', \u0027Appointments/PC/JFW\u0027[YTD NFP Prospect Connects],'Leader JFW', \u0027Appointments/PC/JFW\u0027[YTD Leader JFW],'Score Qualifying CP+', \u0027CP _Plus\u0027[YTD CP Plus]))","isHidden":false},{"name":"RankAppts","expression":"RANKX(ALLSELECTED(RFO_Zone[RFO Name]),\u0027YTD_GOALS_DD\u0027[% Appts YTD])","isHidden":false},{"name":"RankPCs","expression":"RANKX(ALLSELECTED(RFO_Zone[RFO Name]),\u0027YTD_GOALS_DD\u0027[% Total PCs YTD])","isHidden":false},{"name":"RankNFPPCs","expression":"RANKX(ALLSELECTED(RFO_Zone[RFO Name]),\u0027YTD_GOALS_DD\u0027[% NFP PCs YTD])","isHidden":false},{"name":"RankLeaderJFW","expression":"RANKX(ALLSELECTED(RFO_Zone[RFO Name]),\u0027YTD_GOALS_DD\u0027[% LeaderJFW YTD])","isHidden":false},{"name":"RankScoreQualifyingCP","expression":"RANKX(ALLSELECTED(RFO_Zone[RFO Name]),\u0027YTD_GOALS_DD\u0027[% CPPlus YTD])","isHidden":false},{"name":"Sum_of_Leading_Ranks","expression":"var Appts_Rank = RANKX(ALLSELECTED(RFO_Zone[RFO Name]), \u0027YTD_GOALS_DD\u0027[% Appts YTD])var NFP_PC_Rank = RANKX(ALLSELECTED(RFO_Zone[RFO Name]), \u0027YTD_GOALS_DD\u0027[% NFP PCs YTD])var PCs_Rank = RANKX(ALLSELECTED(RFO_Zone[RFO Name]), \u0027YTD_GOALS_DD\u0027[% Total PCs YTD])var Leader_JFW_Rank = RANKX(ALLSELECTED(RFO_Zone[RFO Name]), \u0027YTD_GOALS_DD\u0027[% LeaderJFW YTD])var Score_Qualifying_CP_Rank = RANKX(ALLSELECTED(RFO_Zone[RFO Name]), \u0027YTD_GOALS_DD\u0027[% CPPlus YTD])RETURNAppts_Rank+NFP_PC_Rank+PCs_Rank+Leader_JFW_Rank+Score_Qualifying_CP_Rank","isHidden":false},{"name":"Leading Indicator Goal Rank","expression":"RANKX(ALL(RFO_Zone[RFO Name]),Leads[Sum_of_Leading_Ranks],,ASC)","isHidden":false},{"name":"Market Rank Appts","expression":"RANKX(ALLSELECTED(Market_Leaders[Market_Leader]), \u0027YTD_GOALS_DD\u0027[% Appts YTD])","isHidden":false},{"name":"Market Rank Leader JFW","expression":"RANKX(ALLSELECTED(Market_Leaders[Market_Leader]),\u0027YTD_GOALS_DD\u0027[% LeaderJFW YTD])","isHidden":false},{"name":"Market Rank NFPPCs","expression":"RANKX(ALLSELECTED(Market_Leaders[Market_Leader]),\u0027YTD_GOALS_DD\u0027[% NFP PCs YTD])","isHidden":false},{"name":"Market RankPCs","expression":"RANKX(ALLSELECTED(Market_Leaders[Market_Leader]), \u0027YTD_GOALS_DD\u0027[% Total PCs YTD])","isHidden":false},{"name":"Market RankScoreQualifyingCP","expression":"RANKX(ALLSELECTED(Market_Leaders[Market_Leader]),\u0027YTD_GOALS_DD\u0027[% CPPlus YTD])","isHidden":false},{"name":"Market Rank Referrals per FP","expression":"RANKX(ALLSELECTED(Market_Leaders[Market_Leader]),Referrals[YTD Referrals per FP])","isHidden":false},{"name":"Market Rank Appts/FP","expression":"RANKX(ALLSELECTED(Market_Leaders[Market_Leader]),\u0027YTD_GOALS_DD\u0027[% Appts/FP YTD])","isHidden":false},{"name":"Market Rank PCs/FP","expression":"RANKX(ALLSELECTED(Market_Leaders[Market_Leader]),\u0027Appointments/PC/JFW\u0027[YTD PCs per FP])","isHidden":false},{"name":"Sum_of_Market_Leading_Ranks","expression":"var Appts_Rank = RANKX(ALLSELECTED(Market_Leaders[Market_Leader]), \u0027YTD_GOALS_DD\u0027[% Appts YTD])var NFP_PC_Rank = RANKX(ALLSELECTED(Market_Leaders[Market_Leader]), \u0027YTD_GOALS_DD\u0027[% NFP PCs YTD])var PCs_Rank = RANKX(ALLSELECTED(Market_Leaders[Market_Leader]), \u0027YTD_GOALS_DD\u0027[% Total PCs YTD])var Leader_JFW_Rank = RANKX(ALLSELECTED(Market_Leaders[Market_Leader]), \u0027YTD_GOALS_DD\u0027[% LeaderJFW YTD])var Score_Qualifying_CP_Rank = RANKX(ALLSELECTED(Market_Leaders[Market_Leader]), \u0027YTD_GOALS_DD\u0027[% CPPlus YTD])var ApptsPerFP = RANKX(ALLSELECTED(Market_Leaders[Market_Leader]), \u0027YTD_GOALS_DD\u0027[% Appts/FP YTD])var PCsPerFP = RANKX(ALLSELECTED(Market_Leaders[Market_Leader]), \u0027Appointments/PC/JFW\u0027[YTD PCs per FP])RETURNAppts_Rank+NFP_PC_Rank+PCs_Rank+Leader_JFW_Rank+Score_Qualifying_CP_Rank+ApptsPerFP+PCsPerFP","isHidden":false},{"name":"Market Leading Indicator Goal Rank","expression":"RANKX(ALLSELECTED(Market_Leaders[Market_Leader]),Leads[Sum_of_Market_Leading_Ranks],,ASC)","isHidden":false},{"name":"RankApptsFP","expression":"RANKX(ALLSELECTED(RFO_Zone[RFO Name]),\u0027YTD_GOALS_DD\u0027[% Appts/FP YTD])","isHidden":false},{"name":"Rank PCs/FP","expression":"RANKX(ALLSELECTED(RFO_Zone[RFO Name]),\u0027Appointments/PC/JFW\u0027[YTD PCs per FP])","isHidden":false},{"name":"Rank Referrals per FP","expression":"RANKX(ALLSELECTED(RFO_Zone[RFO Name]),Referrals[YTD Referrals per FP])","isHidden":false},{"name":"MVP RankAppts","expression":"RANKX(ALLSELECTED(MVPs[Market_Leader]),\u0027YTD_GOALS_DD\u0027[% Appts YTD])","isHidden":false},{"name":"MVP RankPCs","expression":"RANKX(ALLSELECTED(MVPs[Market_Leader]),\u0027YTD_GOALS_DD\u0027[% Total PCs YTD])","isHidden":false},{"name":"MVP RankScoreQualifyingCP","expression":"RANKX(ALLSELECTED(MVPs[Market_Leader]),\u0027YTD_GOALS_DD\u0027[% CPPlus YTD])","isHidden":false},{"name":"MVP Rank Referrals per FP","expression":"RANKX(ALLSELECTED(MVPs[Market_Leader]),Referrals[YTD Referrals per FP])","isHidden":false},{"name":"MVP Rank NFA PCs","expression":"RANKX(ALLSELECTED(MVPs[Market_Leader]),\u0027YTD_GOALS_DD\u0027[% NFP PCs YTD])","isHidden":false},{"name":"MVP Sum_of_Leading_Ranks","expression":"var Appt_Rank = RANKX(ALLSELECTED(MVPs[Market_Leader]), \u0027YTD_GOALS_DD\u0027[% Appts YTD])var ProspectConnect_Rank = RANKX(ALLSELECTED(MVPs[Market_Leader]), \u0027YTD_GOALS_DD\u0027[% Total PCs YTD])var NFA_PC_Rank = RANKX(ALLSELECTED(MVPs[Market_Leader]), \u0027YTD_GOALS_DD\u0027[% NFP PCs YTD])var CP_Rank = RANKX(ALLSELECTED(MVPs[Market_Leader]), \u0027YTD_GOALS_DD\u0027[% CPPlus YTD])RETURNAppt_Rank+ProspectConnect_Rank+NFA_PC_Rank+CP_Rank","isHidden":false},{"name":"MVP Leading Indicator Goal Rank","expression":"RANKX(ALL(MVPs[Market_Leader]),\u0027Leads\u0027[MVP Sum_of_Leading_Ranks],,ASC)","isHidden":false}],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i45WciwoyM/MK8lNzSspVorViVYKyS9JzFEIKMovLkhNLlFwzs/LA9IQOT+3ABwyPqmJKalFCl5u4WBucHJ+UapCYGliTmZaZWZeuoJzgLZSbCwA', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [MeasureName = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'MeasureName', type text}})in    #'Changed Type'"}]},{"name":"YTD_GOALS_DD","isHidden":false,"storageMode":"Import","columns":[{"name":"Level","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Metric","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Date_of_Goal","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Goal_Amount","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[{"name":"YTD ANBP Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[NPG]),SELECTEDVALUE(RFO_Zone[NPG]),                   if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Core or Growth]),SELECTEDVALUE(RFO_Zone[Core or Growth]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]),'Enterprise Goal'))))))))var PriorSunday = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT], LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT') - 2)               returnif(isfiltered(RFO_Zone[Market Leader]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Annual New Business Production (ANBP)', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'ANBP', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday))                 ","isHidden":false},{"name":"% ANBP YTD","expression":"DIVIDE([CY ANBP],YTD_GOALS_DD[YTD ANBP Goal])","isHidden":false},{"name":"YE ANBP Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[NPG]),SELECTEDVALUE(RFO_Zone[NPG]),                   if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Core or Growth]),SELECTEDVALUE(RFO_Zone[Core or Growth]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]),'Enterprise Goal'))))))))var maxyeardt = CALCULATE(max(DTRB_PERF_DATES[CAL_DAY_DT]), DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT')                   returnif(isfiltered(RFO_Zone[NPG]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'ANBP', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxyeardt),if(isfiltered(RFO_Zone[Market Leader]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Annual New Business Production (ANBP)', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxyeardt),if(FilterChoice = 'TFGT',CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'ANBP', YTD_GOALS_DD[Level] = 'Virtual Advice', YTD_GOALS_DD[Date_of_Goal] = maxyeardt),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'ANBP', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxyeardt))))  ","isHidden":false},{"name":"YTD WMFC Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[NPG]),SELECTEDVALUE(RFO_Zone[NPG]),                   if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Core or Growth]),SELECTEDVALUE(RFO_Zone[Core or Growth]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]),'Enterprise Goal'))))))))var PriorSunday = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT], LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT') - 2)                   returnif(isfiltered(RFO_Zone[NPG]),    CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'WCFC', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday),if(ISFILTERED(RFO_Zone[Market Leader]),    CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Weighted Member Facing Capacity', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday),if(FilterChoice = 'TFGT', CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'WMFC', YTD_GOALS_DD[Level] = 'Virtual Advice', YTD_GOALS_DD[Date_of_Goal] = PriorSunday),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'WMFC', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday))))","isHidden":false},{"name":"YTD NFC Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[NPG]),SELECTEDVALUE(RFO_Zone[NPG]),                   if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Core or Growth]),SELECTEDVALUE(RFO_Zone[Core or Growth]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]),'Enterprise Goal'))))))))var PriorSunday = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT], today()-14)                   returnif(isfiltered(RFO_Zone[NPG]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'New Clients', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday),if(isfiltered(RFO_Zone[Market Leader]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'New Clients (NC)', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'NFC-FieldReporting', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday)))  ","isHidden":false},{"name":"YTD WID Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[NPG]),SELECTEDVALUE(RFO_Zone[NPG]),                   if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Core or Growth]),SELECTEDVALUE(RFO_Zone[Core or Growth]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]),'Enterprise Goal'))))))))var PriorSunday = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT],  LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT') - 2)                returnif(isfiltered(RFO_Zone[NPG]),    CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'RFRB', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday),if(isfiltered(RFO_Zone[Market Leader]),    CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Revenue from Other Business', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday),if(FilterChoice = 'TFGT',    CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'OtherRevenue', YTD_GOALS_DD[Level] = 'Virtual Advice', YTD_GOALS_DD[Date_of_Goal] = PriorSunday),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'OtherRevenue', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday))))","isHidden":false},{"name":"ME CL Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]),'Enterprise Goal')))))))var CLupdate = max(Combined_Launch_Data[Last Update Date])returnif(isfiltered(RFO_Zone[Market Leader]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Combined Launch', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = CLupdate),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'CombinedLaunch', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = CLupdate))","isHidden":false},{"name":"% WMFC YTD","expression":"divide(WMFC_DD[cy_prior_wk_WMFC],YTD_GOALS_DD[YTD WMFC Goal])","isHidden":false},{"name":"% NFC YTD","expression":"divide(\u0027New Clients\u0027[YTD_NC],YTD_GOALS_DD[YTD NFC Goal])","isHidden":false},{"name":"% WID YTD","expression":"Divide(ANBP_OtherRev_DD[YTD WID],YTD_GOALS_DD[YTD WID Goal])","isHidden":false},{"name":"YE WMFC Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[NPG]),SELECTEDVALUE(RFO_Zone[NPG]),                   if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Core or Growth]),SELECTEDVALUE(RFO_Zone[Core or Growth]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]),'Enterprise Goal'))))))))var maxdayperfyear = CALCULATE(max(DTRB_PERF_DATES[CAL_DAY_DT]), DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT')returnif(ISFILTERED(RFO_Zone[NPG]),    CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'WCFC', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear),if(ISFILTERED(RFO_Zone[Market Leader]),    CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Weighted Member Facing Capacity', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear),if(FilterChoice = 'TFGT', CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'WMFC', YTD_GOALS_DD[Level] = 'Virtual Advice', YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'WMFC', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear)))                   )","isHidden":false},{"name":"YE WID Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[NPG]),SELECTEDVALUE(RFO_Zone[NPG]),                   if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Core or Growth]),SELECTEDVALUE(RFO_Zone[Core or Growth]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]),'Enterprise Goal'))))))))var maxyeardt = CALCULATE(max(DTRB_PERF_DATES[CAL_DAY_DT]), DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT')          returnif(isfiltered(RFO_Zone[NPG]),    CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'RFRB', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxyeardt),if(isfiltered(RFO_Zone[Market Leader]),    CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Revenue from Other Business', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxyeardt),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'OtherRevenue', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxyeardt)))","isHidden":false},{"name":"YE NFC Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[NPG]),SELECTEDVALUE(RFO_Zone[NPG]),                   if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Core or Growth]),SELECTEDVALUE(RFO_Zone[Core or Growth]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]),'Enterprise Goal'))))))))  var maxdayperfyear = CALCULATE(max(DTRB_PERF_DATES[CAL_DAY_DT]), DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT')returnif(isfiltered(RFO_Zone[NPG]),    CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'New Clients', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear),if(isfiltered(RFO_Zone[Market Leader]),    CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'New Clients (NC)', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear),if(FilterChoice = 'TFGT',    CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'NFC-FieldReporting', YTD_GOALS_DD[Level] = 'Virtual Advice', YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'NFC-FieldReporting', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear))))","isHidden":false},{"name":"YTD Appt Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[NPG]),SELECTEDVALUE(RFO_Zone[NPG]),                   if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Core or Growth]),SELECTEDVALUE(RFO_Zone[Core or Growth]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]), 'Thrivent Advisor Group'))))))))var PriorSunday = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT],  LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT') - 2)                   returnif(isfiltered(RFO_Zone[NPG]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Appointments', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday),if(isfiltered(RFO_Zone[Market Leader]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Total Appointments', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'TotalAppointments', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday)))","isHidden":false},{"name":"YTD CPPlus Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[NPG]),SELECTEDVALUE(RFO_Zone[NPG]),                   if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Core or Growth]),SELECTEDVALUE(RFO_Zone[Core or Growth]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]), 'Thrivent Advisor Group'))))))))var PriorSunday = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT],  LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT') - 2)                   returnif(isfiltered(RFO_Zone[Market Leader]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Score Qualifying CP+', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'CPScoreQualifying', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday))","isHidden":false},{"name":"YTD CL Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[NPG]),SELECTEDVALUE(RFO_Zone[NPG]),                   if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Core or Growth]),SELECTEDVALUE(RFO_Zone[Core or Growth]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]), 'Thrivent Advisor Group'))))))))var PriorSunday = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT], LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT') - 2)returnif(isfiltered(RFO_Zone[Market Leader]),    CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Combined Launch', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'CombinedLaunch', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday))","isHidden":false},{"name":"YTD LeaderJFW Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                    if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))))))var PriorSunday = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT], LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT') - 7)                   returnif(isfiltered(RFO_Zone[Market Leader]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Leader JFW', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'LeaderJFW', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday))","isHidden":false},{"name":"YTD NFP PCs Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))))))var PriorSunday = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT], LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT') - 2)                   returnif(isfiltered(RFO_Zone[Market Leader]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Prospect Connects (NFP)', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'NFRProspectConnects', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday))","isHidden":false},{"name":"YTD Total PCs Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[NPG]),SELECTEDVALUE(RFO_Zone[NPG]),                   if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Core or Growth]),SELECTEDVALUE(RFO_Zone[Core or Growth]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]), 'RFO Sum'))))))))var PriorSunday = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT], LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT') - 2)returnif(isfiltered(RFO_Zone[NPG]),    CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Prospect Connects', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday),if(isfiltered(RFO_Zone[Market Leader]),    CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Prospect Connects (Total)', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday),if(FilterChoice = 'Thrivent Advisor Group',    CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'TotalProspectConnects', YTD_GOALS_DD[Level] = 'RFO Sum', YTD_GOALS_DD[Date_of_Goal] = PriorSunday),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'TotalProspectConnects', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday))))","isHidden":false},{"name":"YE Appt Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[NPG]),SELECTEDVALUE(RFO_Zone[NPG]),                   if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Core or Growth]),SELECTEDVALUE(RFO_Zone[Core or Growth]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]), 'Thrivent Advisor Group'))))))))var maxdayperfyear = CALCULATE(max(DTRB_PERF_DATES[CAL_DAY_DT]), DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT')returnif(isfiltered(RFO_Zone[NPG]),    CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Appointments', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear),if(isfiltered(RFO_Zone[Market Leader]),    CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Total Appointments', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'TotalAppointments', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear)))","isHidden":false},{"name":"YE CPPlus Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[NPG]),SELECTEDVALUE(RFO_Zone[NPG]),                   if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Core or Growth]),SELECTEDVALUE(RFO_Zone[Core or Growth]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]), 'Thrivent Advisor Group'))))))))var maxdayperfyear = CALCULATE(max(DTRB_PERF_DATES[CAL_DAY_DT]), DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT')returnif(isfiltered(RFO_Zone[Market Leader]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Score Qualifying CP+', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'CPScoreQualifying', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear))","isHidden":false},{"name":"YE CL Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[NPG]),SELECTEDVALUE(RFO_Zone[NPG]),                   if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Core or Growth]),SELECTEDVALUE(RFO_Zone[Core or Growth]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]), 'Thrivent Advisor Group'))))))))var maxdayperfyear = CALCULATE(max(DTRB_PERF_DATES[CAL_DAY_DT]), DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT')returnif(isfiltered(RFO_Zone[Market Leader]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Combined Launch', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'CombinedLaunch', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear)) ","isHidden":false},{"name":"YE LeaderJFW Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))))))var maxdayperfyear = CALCULATE(max(DTRB_PERF_DATES[CAL_DAY_DT]), DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT')returnif(isfiltered(RFO_Zone[Market Leader]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Leader JFW', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'LeaderJFW', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear)) ","isHidden":false},{"name":"YE NFP PCs Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))))))var maxdayperfyear = CALCULATE(max(DTRB_PERF_DATES[CAL_DAY_DT]), DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT')returnif(isfiltered(RFO_Zone[Market Leader]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Prospect Connects (NFP)', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'NFRProspectConnects', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear)) ","isHidden":false},{"name":"YE Total PCs Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[NPG]),SELECTEDVALUE(RFO_Zone[NPG]),                   if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Core or Growth]),SELECTEDVALUE(RFO_Zone[Core or Growth]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]), 'RFO Sum'))))))))var maxdayperfyear = CALCULATE(max(DTRB_PERF_DATES[CAL_DAY_DT]), DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT')returnif(isfiltered(RFO_Zone[NPG]),    CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Prospect Connects', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear),if(isfiltered(RFO_Zone[Market Leader]),    CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Prospect Connects (Total)', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear),if(FilterChoice = 'Thrivent Advisor Group',    CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'TotalProspectConnects', YTD_GOALS_DD[Level] = 'RFO Sum', YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'TotalProspectConnects', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear))))","isHidden":false},{"name":"% Appts YTD","expression":"DIVIDE(\u0027Appointments/PC/JFW\u0027[YTD Appointments],\u0027YTD_GOALS_DD\u0027[YTD Appt Goal])","isHidden":false},{"name":"% CPPlus YTD","expression":"divide(\u0027CP _Plus\u0027[YTD CP Plus],\u0027YTD_GOALS_DD\u0027[YTD CPPlus Goal])","isHidden":false},{"name":"% LeaderJFW YTD","expression":"divide(\u0027Appointments/PC/JFW\u0027[YTD Leader JFW],\u0027YTD_GOALS_DD\u0027[YTD LeaderJFW Goal])","isHidden":false},{"name":"% NFP PCs YTD","expression":"divide(\u0027Appointments/PC/JFW\u0027[YTD PCs per NFP],\u0027YTD_GOALS_DD\u0027[NFP PC/NFP Goal])","isHidden":false},{"name":"% Total PCs YTD","expression":"divide(\u0027Appointments/PC/JFW\u0027[YTD Prospect Connects],\u0027YTD_GOALS_DD\u0027[YTD Total PCs Goal])","isHidden":false},{"name":"Pace Goal","expression":".50","isHidden":false},{"name":"% CL ME","expression":"divide(\u0027Combined_Launch_Data\u0027[CL Percent],\u0027YTD_GOALS_DD\u0027[ME CL Goal])","isHidden":false},{"name":"Goal Variance CL","expression":"\u0027Combined_Launch_Data\u0027[CL Percent] - \u0027YTD_GOALS_DD\u0027[ME CL Goal]","isHidden":false},{"name":"% ANBP YE","expression":"DIVIDE([CY ANBP],YTD_GOALS_DD[YE ANBP Goal])","isHidden":false},{"name":"% OtherRev YE","expression":"Divide(ANBP_OtherRev_DD[YTD WID],YTD_GOALS_DD[YE WID Goal])","isHidden":false},{"name":"% Appts YE","expression":"DIVIDE(\u0027Appointments/PC/JFW\u0027[YTD Appointments],\u0027YTD_GOALS_DD\u0027[YE Appt Goal])","isHidden":false},{"name":"% Total PCs YE","expression":"divide(\u0027Appointments/PC/JFW\u0027[YTD Prospect Connects],\u0027YTD_GOALS_DD\u0027[YE Total PCs Goal])","isHidden":false},{"name":"% LeaderJFW YE","expression":"divide(\u0027Appointments/PC/JFW\u0027[YTD Leader JFW],\u0027YTD_GOALS_DD\u0027[YE LeaderJFW Goal])","isHidden":false},{"name":"% NFC YE","expression":"divide(\u0027New Clients\u0027[YTD_NC],YTD_GOALS_DD[YE NFC Goal])","isHidden":false},{"name":"% Appts YTD Stoplights","expression":"IF([% Appts YTD]\u003e=1,UNICHAR(10003),IF([% Appts YTD]\u003e.9, UNICHAR(11198),UNICHAR(10003)))\u0026' '\u0026FORMAT([% Appts YTD],'Percent')","isHidden":false},{"name":"Appts/FP Goal","expression":"6.0","isHidden":false},{"name":"% Appts/FP YTD","expression":"divide(\u0027Appointments/PC/JFW\u0027[TEST YTD Appts per FA NEW CARD],\u0027YTD_GOALS_DD\u0027[Appts/FP Goal])","isHidden":false},{"name":"NFP Appts/NFP Goal","expression":"5.0","isHidden":false},{"name":"% NFP Appts/NFP YTD","expression":"divide(\u0027Appointments/PC/JFW\u0027[YTD NFP Appts/NFP],\u0027YTD_GOALS_DD\u0027[NFP Appts/NFP Goal])","isHidden":false},{"name":"% NFP PCs YE","expression":"divide(\u0027Appointments/PC/JFW\u0027[YTD NFP Prospect Connects],\u0027YTD_GOALS_DD\u0027[YE NFP PCs Goal])","isHidden":false},{"name":"% WMFC YE","expression":"divide(WMFC_DD[cy_prior_wk_WMFC],YTD_GOALS_DD[YE WMFC Goal])","isHidden":false},{"name":"% CPPlus YE","expression":"divide(\u0027CP _Plus\u0027[YTD CP Plus],\u0027YTD_GOALS_DD\u0027[YE CPPlus Goal])","isHidden":false},{"name":"Avg Lead % to Target","expression":"(YTD_GOALS_DD[% Appts YTD]+\u0027YTD_GOALS_DD\u0027[% Total PCs YTD]+\u0027YTD_GOALS_DD\u0027[% NFP PCs YTD]+\u0027YTD_GOALS_DD\u0027[% LeaderJFW YTD]+\u0027YTD_GOALS_DD\u0027[% CPPlus YTD])/5","isHidden":false},{"name":"Avg Lag % to Target","expression":"(YTD_GOALS_DD[% WMFC YTD]+\u0027YTD_GOALS_DD\u0027[% Total Sales YTD])/2","isHidden":false},{"name":"% CL YE","expression":"divide(\u0027Combined_Launch_Data\u0027[CL Percent],\u0027YTD_GOALS_DD\u0027[YE CL Goal])","isHidden":false},{"name":"YTD Vet PC Goal","expression":"0.5","isHidden":false},{"name":"YE Vet PC Goal","expression":"0.5","isHidden":false},{"name":"% Vet PCs YE","expression":"divide(\u0027Appointments/PC/JFW\u0027[YTD PCs per VET],\u0027YTD_GOALS_DD\u0027[YE Vet PC Goal])","isHidden":false},{"name":"% Vet PCs YTD","expression":"divide(\u0027Appointments/PC/JFW\u0027[YTD PCs per VET],\u0027YTD_GOALS_DD\u0027[YTD Vet PC Goal])","isHidden":false},{"name":"YE Referrals Goal","expression":"2.0","isHidden":false},{"name":"% of YE Goal Referrals","expression":"divide([YTD Referrals per FP],[YE Referrals Goal])","isHidden":false},{"name":"Weekly Need New Clients","expression":"var WeeksRemaining=calculate(52-MAX(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR]),DTRB_PERF_DATES[YTD Flag two Sundays] in {TRUE})return    divide(\u0027YTD_GOALS_DD\u0027[YE NFC Goal]-[YTD_NC],WeeksRemaining)","isHidden":false},{"name":"NFC YE Gap","expression":"\u0027YTD_GOALS_DD\u0027[YE NFC Goal]-\u0027New Client Dataflow\u0027[YTD_NFC]","isHidden":false},{"name":"Weekly Need ANBP","expression":"var WeeksRemaining=calculate(52-MAX(ANBP_OtherRev_DD[CalWk]),DTRB_PERF_DATES[Cal_YTD_Flag] in {TRUE})return    divide(\u0027YTD_GOALS_DD\u0027[YE ANBP Goal]-\u0027ANBP_OtherRev_DD\u0027[CY ANBP],WeeksRemaining)","isHidden":false},{"name":"Weekly Need WID","expression":"var WeeksRemaining=calculate(52-MAX(ANBP_OtherRev_DD[CalWk]),DTRB_PERF_DATES[Cal_YTD_Flag] in {TRUE})return    divide(\u0027YTD_GOALS_DD\u0027[YE WID Goal]-\u0027ANBP_OtherRev_DD\u0027[YTD WID],WeeksRemaining)","isHidden":false},{"name":"Weekly Need Appts","expression":"var WeeksRemaining=calculate(52-MAX(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR]),DTRB_PERF_DATES[YTD Flag] in {TRUE})return    divide(\u0027YTD_GOALS_DD\u0027[YE Appt Goal]-\u0027Appointments/PC/JFW\u0027[YTD Appointments],WeeksRemaining)","isHidden":false},{"name":"Weekly Need Total PCs","expression":"var WeeksRemaining=calculate(52-MAX(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR]),DTRB_PERF_DATES[YTD Flag] in {TRUE})return    divide(\u0027YTD_GOALS_DD\u0027[YE Total PCs Goal]-\u0027Appointments/PC/JFW\u0027[YTD Prospect Connects],WeeksRemaining)","isHidden":false},{"name":"Weekly Need Leader JFW","expression":"var WeeksRemaining=calculate(52-MAX(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR]),DTRB_PERF_DATES[YTD Flag] in {TRUE})return    divide(\u0027YTD_GOALS_DD\u0027[YE LeaderJFW Goal]-\u0027Appointments/PC/JFW\u0027[YTD Leader JFW],WeeksRemaining)","isHidden":false},{"name":"Weekly Need CP+","expression":"var WeeksRemaining=calculate(52-MAX(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR]),DTRB_PERF_DATES[YTD Flag] in {TRUE})return    if(divide(\u0027YTD_GOALS_DD\u0027[YE CPPlus Goal]-\u0027CP _Plus\u0027[YTD CP Plus],WeeksRemaining)\u003c=0,'0',divide(\u0027YTD_GOALS_DD\u0027[YE CPPlus Goal]-\u0027CP _Plus\u0027[YTD CP Plus],WeeksRemaining))","isHidden":false},{"name":"Weekly Need NFP PCs","expression":"var WeeksRemaining=calculate(52-MAX(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR]),DTRB_PERF_DATES[YTD Flag] in {TRUE})return    divide(\u0027YTD_GOALS_DD\u0027[YE NFP PCs Goal]-\u0027Appointments/PC/JFW\u0027[YTD NFP Prospect Connects],WeeksRemaining)","isHidden":false},{"name":"Weekly Need WMFC","expression":"var WeeksRemaining=calculate(52-MAX(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR]),DTRB_PERF_DATES[YTD Flag] in {TRUE})return    divide(\u0027YTD_GOALS_DD\u0027[YE WMFC Goal]-WMFC_DD[cy_prior_wk_WMFC],WeeksRemaining)","isHidden":false},{"name":"YE Applications Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))))))    var maxdayperfyear = CALCULATE(max(DTRB_PERF_DATES[CAL_DAY_DT]), DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT')returnif(isfiltered(RFO_Zone[Market Leader]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'LHA Applications', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'LHA Applications', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear)) ","isHidden":false},{"name":"Weekly Need Appts/FP","expression":"var WeeksRemaining=calculate(52-MAX(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR]),DTRB_PERF_DATES[YTD Flag] in {TRUE})return    divide(divide(\u0027YTD_GOALS_DD\u0027[Total FP Appointment Goal]-\u0027Appointments/PC/JFW\u0027[YTD Appointments],WeeksRemaining),Capacity[cy_prior_wk_FPs])","isHidden":false},{"name":"Weekly Need NFP Appts/NFP","expression":"var WeeksRemaining=calculate(52-MAX(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR]),DTRB_PERF_DATES[YTD Flag] in {TRUE})return    CALCULATE(divide(divide(\u0027YTD_GOALS_DD\u0027[Total NFP Appointment Goal]-\u0027Appointments/PC/JFW\u0027[YTD Appointments],WeeksRemaining),Capacity[cy_prior_wk_NFPs]),\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP')","isHidden":false},{"name":"Total NFP Appointment Goal","expression":"[NFP Appts/NFP Goal]*[cy_prior_wk_NFPs]*52","isHidden":false},{"name":"Total FP Appointment Goal","expression":"[Appts/FP Goal]*[cy_prior_wk_FPs]*52","isHidden":false},{"name":"NFP PC/NFP Goal","expression":"1.25","isHidden":false},{"name":"% NFP PCs/NFP YTD","expression":"divide(\u0027Appointments/PC/JFW\u0027[YTD PCs per NFP],\u0027YTD_GOALS_DD\u0027[NFP PC/NFP Goal])","isHidden":false},{"name":"YE Vet PCs Goal","expression":"[YE Total PCs Goal]-[YE NFP PCs Goal]","isHidden":false},{"name":"TEST Vet PC Goal","expression":"[YTD Prospect Connects] - ","isHidden":false},{"name":"YE FR Contracts Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[NPG]),SELECTEDVALUE(RFO_Zone[NPG]),                   if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Core or Growth]),SELECTEDVALUE(RFO_Zone[Core or Growth]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]), 'Thrivent Advisor Group'))))))))var maxdayperfyear = CALCULATE(max(DTRB_PERF_DATES[CAL_DAY_DT]), DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT')returnCALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'FRContracts', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear) ","isHidden":false},{"name":"% FR Contracts YE","expression":"divide(\u0027Contracts\u0027[cy_prior_wk_contracts],\u0027YTD_GOALS_DD\u0027[YE FR Contracts Goal])","isHidden":false},{"name":"YTD VET PCs Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))))))var PriorSunday = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT],  LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT') - 7)                   returnif(isfiltered(RFO_Zone[Market Leader]),'N/A',CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'VetProspectConnect', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday))","isHidden":false},{"name":"% NFP PC YTD","expression":"divide(\u0027Appointments/PC/JFW\u0027[YTD NFP Prospect Connects],\u0027YTD_GOALS_DD\u0027[YTD NFP PCs Goal])","isHidden":false},{"name":"% Vet PC YTD","expression":"divide(\u0027Appointments/PC/JFW\u0027[YTD Vet Prospect Connects],\u0027YTD_GOALS_DD\u0027[YTD VET PCs Goal])","isHidden":false},{"name":"YTD PC Goal SWITCH","expression":"if(HASONEVALUE(\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]),SWITCH(VALUES(\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]),'NFP', [% NFP PC YTD],'VET', [% Vet PC YTD]), [% Total PCs YTD])","isHidden":false},{"name":"YE NC Advice Goal","expression":"0.2 * [YE NFC Advice Goal]","isHidden":false},{"name":"YTD NC Advice Goal","expression":"0.2 * [YTD NFC Advice Goal]","isHidden":false},{"name":"YTD NFC Advice Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]),'Thrivent Advisor Group')))))var PriorSunday = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT], today() - 14)                   returnif(isfiltered(RFO_Zone[Market Leader]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'New Clients (NC)', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday),if(FilterChoice = 'TFGT',CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'New Client', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'NFC-FieldReporting', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday)))   ","isHidden":false},{"name":"YE NFC Advice Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]),'Thrivent Advisor Group')))))    var maxdayperfyear = CALCULATE(max(DTRB_PERF_DATES[CAL_DAY_DT]), DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT')returnif(isfiltered(RFO_Zone[Market Leader]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'New Clients (NC)', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear),if(FilterChoice = 'TFGT',CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'New Client', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'NFC-FieldReporting', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear)))   ","isHidden":false},{"name":"% of YTD NC Advice Goal","expression":"DIVIDE(sum(Advice_AllTS_list[cyr_Goal]),YTD_GOALS_DD[YTD NC Advice Goal])","isHidden":false},{"name":"YE ANBP NPG Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[NPG]),SELECTEDVALUE(RFO_Zone[NPG]),                   if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                    if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]),'Enterprise Goal'))))))var maxyeardt = CALCULATE(max(DTRB_PERF_DATES[CAL_DAY_DT]), DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='PREVIOUS')                   --var maxyeardt = CALCULATE(max(DTRB_PERF_DATES[CAL_DAY_DT]), DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT')         returnCALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'ANBP', YTD_GOALS_DD[Level] = 'NPG', YTD_GOALS_DD[Date_of_Goal] = maxyeardt)--return--if(isfiltered(RFO_Zone[NPG]),--CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'ANBP', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxyeardt),--if(isfiltered(RFO_Zone[Market Leader]),--CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Annual New Business Production (ANBP)', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxyeardt),--if(FilterChoice = 'TFGT',--CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Annual New Business Production (ANBP)', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxyeardt),--CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'ANBP', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxyeardt)))) ","isHidden":false},{"name":"YTD FR Contracts Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[NPG]),SELECTEDVALUE(RFO_Zone[NPG]),                   if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Core or Growth]),SELECTEDVALUE(RFO_Zone[RFO Name]),                   if(ISFILTERED(RFO_Zone[Core or Growth]),SELECTEDVALUE(RFO_Zone[Core or Growth]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]), 'Thrivent Advisor Group')))))))))var PriorSunday = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT],  LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT') - 2)     returnCALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'FRContracts', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday) ","isHidden":false},{"name":"% CL YTD","expression":"divide(\u0027Combined_Launch_Data\u0027[CL Percent],\u0027YTD_GOALS_DD\u0027[YTD CL Goal])","isHidden":false},{"name":"YE ANBP(LH) Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[NPG]),SELECTEDVALUE(RFO_Zone[NPG]),                   if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Core or Growth]),SELECTEDVALUE(RFO_Zone[Core or Growth]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]),'Enterprise Goal'))))))))var maxyeardt = CALCULATE(max(DTRB_PERF_DATES[CAL_DAY_DT]), DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT')                   returnif(isfiltered(RFO_Zone[NPG]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'ANBP (LH)', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxyeardt),if(isfiltered(RFO_Zone[Market Leader]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Annual New Business Production (ANBP)', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxyeardt),if(FilterChoice = 'TFGT',CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'ANBP (LH)', YTD_GOALS_DD[Level] = 'Virtual Advice', YTD_GOALS_DD[Date_of_Goal] = maxyeardt),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'ANBP (LH)', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxyeardt))))  ","isHidden":false},{"name":"YTD ANBP(LH) Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[NPG]),SELECTEDVALUE(RFO_Zone[NPG]),                   if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Core or Growth]),SELECTEDVALUE(RFO_Zone[Core or Growth]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]),'Enterprise Goal'))))))))var PriorSunday = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT], LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT') - 2)               returnif(isfiltered(RFO_Zone[Market Leader]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Annual New Business Production (ANBP)', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'ANBP (LH)', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday))   ","isHidden":false},{"name":"% ANBP (LH) YTD","expression":"DIVIDE([CY ANBP],YTD_GOALS_DD[YTD ANBP(LH) Goal])","isHidden":false},{"name":"% ANBP (LH) YE","expression":"DIVIDE([CY ANBP],YTD_GOALS_DD[YE ANBP(LH) Goal])","isHidden":false},{"name":"Weekly Need ANBP (LH)","expression":"var WeeksRemaining=calculate(52-MAX(ANBP_OtherRev_DD[CalWk]),DTRB_PERF_DATES[Cal_YTD_Flag] in {TRUE})return    divide(\u0027YTD_GOALS_DD\u0027[YE ANBP(LH) Goal]-\u0027ANBP_OtherRev_DD\u0027[CY ANBP],WeeksRemaining)","isHidden":false},{"name":"YTD NFP Appts Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]),'Thrivent Advisor Group'))))))var PriorSunday = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT], LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT') - 2)                   returnCALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'NFPAppointments', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday)","isHidden":false},{"name":"YTD VET Appointment Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]),'Thrivent Advisor Group'))))))var PriorSunday = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT], LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT') - 2)                   returnCALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'VetAppointments', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday)","isHidden":false},{"name":"%  NFA Appts YTD","expression":"DIVIDE(\u0027Appointments/PC/JFW\u0027[YTD Appointments],\u0027YTD_GOALS_DD\u0027[YTD NFP Appts Goal])","isHidden":false},{"name":"% NFP Appts YTD","expression":"DIVIDE(\u0027Appointments/PC/JFW\u0027[YTD NFP Appointments],\u0027YTD_GOALS_DD\u0027[YTD NFP Appts Goal])","isHidden":false},{"name":"% VET Appts YTD","expression":"DIVIDE(\u0027Appointments/PC/JFW\u0027[YTD Vet Appointments],\u0027YTD_GOALS_DD\u0027[YTD VET Appointment Goal])","isHidden":false},{"name":"YTD Appt Goal SWITCH","expression":"VAR Selected_Goal = SELECTEDVALUE(Daily_Tenure_Counts_DD[Tenure Group], 'All')VAR NumSelected = COUNTROWS(VALUES(Daily_Tenure_Counts_DD[Tenure Group]))RETURNSWITCH(    TRUE(),    Selected_Goal = 'NFA', [% NFA Appts/FA Goal],    Selected_Goal = 'VET', [% VET Appts/FA Goal],     NumSelected = 2, [% Total Appts/FA Goal], // When both NFA and VET are selected    BLANK())","isHidden":false},{"name":"% Total Sales YTD","expression":"DIVIDE([YTD Total Sales],[YTD Total Sales Goal])","isHidden":false},{"name":"YTD Total Sales Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[NPG]),SELECTEDVALUE(RFO_Zone[NPG]),                   if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Core or Growth]),SELECTEDVALUE(RFO_Zone[Core or Growth]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]),'Enterprise Goal'))))))))var PriorSunday = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT], LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT') - 2)               returnCALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Total Sales', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday)  ","isHidden":false},{"name":"YE Total Sales Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[NPG]),SELECTEDVALUE(RFO_Zone[NPG]),                   if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Core or Growth]),SELECTEDVALUE(RFO_Zone[Core or Growth]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]),'Enterprise Goal'))))))))var maxyeardt = CALCULATE(max(DTRB_PERF_DATES[CAL_DAY_DT]), DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT')                   returnCALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Total Sales', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxyeardt) ","isHidden":false},{"name":"% Total Sales YE","expression":"DIVIDE([YTD Total Sales],[YE Total Sales Goal])","isHidden":false},{"name":"YTD NFA Appt/FA Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[NPG]),SELECTEDVALUE(RFO_Zone[NPG]),                   if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Core or Growth]),SELECTEDVALUE(RFO_Zone[Core or Growth]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]), 'Thrivent Advisor Group'))))))))var PriorSunday = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT],  LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT') - 2)                   returnCALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'NFA Appts/FA', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday)","isHidden":false},{"name":"YTD VET Appt/FA Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[NPG]),SELECTEDVALUE(RFO_Zone[NPG]),                   if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Core or Growth]),SELECTEDVALUE(RFO_Zone[Core or Growth]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]), 'Thrivent Advisor Group'))))))))var PriorSunday = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT],  LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT') - 2)                   returnCALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'VET Appts/FA', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday)","isHidden":false},{"name":"% NFA Appts/FA Goal","expression":"DIVIDE(\u0027Appointments/PC/JFW\u0027[TEST YTD Appts per FA NEW CARD],\u0027YTD_GOALS_DD\u0027[YTD NFA Appt/FA Goal])","isHidden":false},{"name":"% VET Appts/FA Goal","expression":"DIVIDE(\u0027Appointments/PC/JFW\u0027[TEST YTD Appts per FA NEW CARD],\u0027YTD_GOALS_DD\u0027[YTD VET Appt/FA Goal])","isHidden":false},{"name":"YTD Total Appt/FA Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[NPG]),SELECTEDVALUE(RFO_Zone[NPG]),                   if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Core or Growth]),SELECTEDVALUE(RFO_Zone[Core or Growth]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]), 'Thrivent Advisor Group'))))))))var PriorSunday = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT],  LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT') - 2)                   returnCALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Total Appts/FA', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday)","isHidden":false},{"name":"% Total Appts/FA Goal","expression":"DIVIDE(\u0027Appointments/PC/JFW\u0027[TEST YTD Appts per FA NEW CARD],\u0027YTD_GOALS_DD\u0027[YTD Total Appt/FA Goal])","isHidden":false}],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////VSSHR//SHARED//Public//DI and BI//Distribution Dashboard//YTD_GOALS_DD.csv'),[Delimiter=',', Columns=4, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Goal_Amount', type number}, {'Date_of_Goal', type date}}),    #'Replaced Value' = Table.ReplaceValue(#'Changed Type','TOTAL RFBO','OtherRevenue',Replacer.ReplaceText,{'Metric'})in    #'Replaced Value'"}]},{"name":"Capacity","isHidden":false,"storageMode":"Import","columns":[{"name":"JOIN VALUE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ZONE_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_Mkt","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Year","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Week","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Current Wk","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Capacity","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Channel","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Division","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Region","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PerYrWk","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"cy_prior_wk_FPs","expression":"CALCULATE(     SUM(\u0027Capacity\u0027[Capacity]),     DTRB_PERF_DATES[Prior Week Flag] = 'TRUE',     DTRB_PERF_DATES[Current Year Flag] in {True},    \u0027Capacity\u0027[Type] \u003c\u003e 'Red Role')","isHidden":false},{"name":"py_prior_wk_FPs","expression":"CALCULATE(     SUM(\u0027Capacity\u0027[Capacity]),     DTRB_PERF_DATES[Prior Week Flag] = 'TRUE',     DTRB_PERF_DATES[Prior Year Flag] in {True},    \u0027Capacity\u0027[Type] \u003c\u003e 'Red Role')","isHidden":false},{"name":"YOY Change Capacity","expression":"CALCULATE(DIVIDE(([cy_prior_wk_FPs]-[py_prior_wk_FPs]),[py_prior_wk_FPs]), Capacity[Type] \u003c\u003e 'Red Role')","isHidden":false},{"name":"cy_prior_wk_NFPs","expression":"CALCULATE(     SUM(\u0027Capacity\u0027[Capacity]),     DTRB_PERF_DATES[Prior Week Flag] = 'TRUE',     DTRB_PERF_DATES[Current Year Flag] in {True},    \u0027Capacity\u0027[Type] in {'Red Role','NFR'})","isHidden":false},{"name":"YTD NFP Capacity","expression":"CALCULATE(    SUM(Capacity[Capacity]),    \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True},    \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT]='Current',    \u0027Capacity\u0027[Type] in {'NFR','Red Role'},    \u0027Capacity\u0027[RFO_ID]\u003c\u003e'0716')","isHidden":false},{"name":"YTD Vet Capacity","expression":"CALCULATE(    SUM(Capacity[Capacity]),    \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True},    \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT]='Current',    \u0027Capacity\u0027[Type] in {'Vet'},    \u0027Capacity\u0027[RFO_ID]\u003c\u003e'0716')","isHidden":false},{"name":"YTD Total NFP+Vet Capacity","expression":"[YTD NFP Capacity] + [YTD Vet Capacity]","isHidden":false},{"name":"YTD Capacity TOTAL","expression":"    if(HASONEVALUE(\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]),    SWITCH(VALUES(\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]),    'NFP', [YTD NFP Capacity],    'VET', [YTD Vet Capacity]), \u0027Capacity\u0027[YTD Total NFP+Vet Capacity])","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//Shared//Public//DI and BI//Capacity Dashboard//Capacity Dashboard-FP_Capacity.xlsx'), null, true),    Sheet1_Sheet = Source{[Item='Sheet1',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true]),    #'Renamed Columns' = Table.RenameColumns(#'Promoted Headers',{{'Count', 'Capacity'}}),    #'Appended Query' = Table.Combine({#'Renamed Columns', RR_Capacity}),    #'Changed Type' = Table.TransformColumnTypes(#'Appended Query',{{'Capacity', Int64.Type}}),    #'Added Custom' = Table.AddColumn(#'Changed Type', 'Channel_PQ', each if [RFO_ID] = '0383' then 'TFGT' else 'Thrivent Advisor Group'),    #'Removed Columns' = Table.RemoveColumns(#'Added Custom',{'Column9'}),    #'Added Custom1' = Table.AddColumn(#'Removed Columns', 'Division_PQ', each if List.Contains({'0115','0165','0190','0240','0361','0384'},[RFO_ID]) then 'East' else if List.Contains({'0283','0365','0435','0496','0810'},[RFO_ID]) then 'Central' else if List.Contains({'0291','0410','0475','0525','0529'},[RFO_ID]) then 'West' else 'Other'),    #'Added Custom2' = Table.AddColumn(#'Added Custom1', 'Region_PQ', each if List.Contains({'0361','0365','0435','0496'},[RFO_ID]) then 'Established' else if List.Contains({'0165','0240','0283','0291','0410','0525'},[RFO_ID]) then 'Growth' else if List.Contains({'0115','0190','0384','0475','0529'},[RFO_ID]) then 'Invest' else if List.Contains({'0810'},[RFO_ID]) then 'Colorado Springs' else 'Other'),    #'Added Custom3' = Table.AddColumn(#'Added Custom2', 'PerYrWk_PQ', each Number.ToText([Year])\u0026'-'\u0026Number.ToText([Week])),    #'Renamed Columns1' = Table.RenameColumns(#'Added Custom3',{{'Channel_PQ', 'Channel'}, {'Division_PQ', 'Division'}, {'PerYrWk_PQ', 'PerYrWk'}, {'Region_PQ', 'Region'}})in    #'Renamed Columns1'"}]},{"name":"RR_Capacity","isHidden":true,"storageMode":"Import","columns":[{"name":"JOIN VALUE","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"RFO_ID","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"ZONE_ID","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"RFO_Mkt","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"Type","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"Year","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"Week","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"Current Wk","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"Capacity","dataType":"Int64","isHidden":true,"columnType":"Data"},{"name":"PerfYrWk","dataType":"String","isHidden":true,"expression":"\u0027RR_Capacity\u0027[Year] \u0026 '-' \u0026 \u0027RR_Capacity\u0027[Week]","columnType":"Calculated"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//Shared//Public//DI and BI//Capacity Dashboard//Capacity Dashboard-RR_Capacity.xlsx'), null, true),    Sheet1_Sheet = Source{[Item='Sheet1',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true]),    #'Renamed Columns' = Table.RenameColumns(#'Promoted Headers',{{'Count', 'Capacity'}}),    #'Changed Type' = Table.TransformColumnTypes(#'Renamed Columns',{{'Capacity', Int64.Type}})in    #'Changed Type'"}]},{"name":"Market_Leaders","isHidden":false,"storageMode":"Import","columns":[{"name":"RFO_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_ZONE_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MARKET_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_DEPT_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_STS_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TRMN_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MARKET_LEADERS","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market_Leader","dataType":"String","isHidden":false,"expression":"Market_Leaders[RFO_ZONE_NM] \u0026 '-' \u0026 Market_Leaders[MARKET_LEADERS]","columnType":"Calculated"}],"measures":[],"source":[{"expression":"let    Source = DB2.Database('podwh021:50000', 'podwh021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT DISTINCT#(lf)t1.ORZN_DEPT_CDE as RFO_CDE,#(lf)t1.ORZN_ZONE_CDE as RFO_ZONE_NM,#(lf)(SUBSTRING(t1.ORZN_ZONE_CDE,6,5)) AS Market_ID,#(lf)t3.ORZN_DEPT_DSCR,#(lf)t3.EMP_ID,#(lf)t3.EMP_STS_TYP_CDE,#(lf)t3.trmn_dt,#(lf)t3.JOB_TYP_CDE,#(lf)t3.JOB_TYP_DSCR,#(lf)t3.EMP_NM,#(lf)case when t3.emp_nm is null then \u0027Vacant\u0027 Else t3.emp_nm end as market_leaderS#(lf)FROM SEMANTIC.SALES_HIERARCHY_DIMENSION t1#(lf)left join#(lf)(#(lf)SELECT DISTINCT#(lf)T1.SALE_HIER_ID,#(lf)t1.orzn_zone_cde,#(lf)t1.orzn_dept_dscr,#(lf)t2.orzn_dept_cde,#(lf)t2.EMP_ID,#(lf)t2.EMP_STS_TYP_CDE,#(lf)t2.trmn_dt,#(lf)t2.JOB_TYP_CDE,#(lf)t2.JOB_TYP_DSCR,#(lf)t2.EMP_NM#(lf)FROM#(lf)SEMANTIC.SALES_HIERARCHY_DIMENSION t1#(lf)left JOIN HUMAN_RESOURCES.CNF_EMP_DIM_DTL_CURR_CFDL t2 ON T1.SALE_HIER_ID = T2.emp_id#(lf)where t1.CURR_ROW_IND = \u0027Y\u0027#(lf)and t2.emp_sts_typ_cde in (\u0027A\u0027)#(lf)and t1.EFF_END_TMSP is null#(lf)AND T2.CURR_ROW_IND = \u0027Y\u0027#(lf)and t1.EFF_END_TMSP is null#(lf)and t2.JOB_TYP_CDE IN (\u0027001002\u0027, \u0027001003\u0027,/* \u0027001004\u0027, \u0027001005\u0027,*/ \u0027001007\u0027)#(lf)AND T2.EMP_ID NOT IN(\u0027TS62904\u0027,\u0027TS67022\u0027)#(lf))#(lf)t3#(lf)on t1.orzn_zone_cde = t3.orzn_zone_cde#(lf)where t1.CURR_ROW_IND = \u0027Y\u0027#(lf)and t1.eff_end_tmsp is null#(lf)--and t1.rfo_zone_sts_cde in (\u0027A\u0027)#(lf)and substring(t1.orzn_zone_cde,6,2) \u003c\u003e \u002700\u0027#(lf)and t1.orzn_dept_cde \u003c\u003e \u0027UKWN\u0027#(lf)order BY t1.ORZN_ZONE_CDE;#(lf)']),    #'Filtered Rows' = Table.SelectRows(Source, each ([EMP_ID] \u003c\u003e 'TS18670    ' and [EMP_ID] \u003c\u003e 'TS73067    ' and [EMP_ID] \u003c\u003e 'TS73124    ' and [EMP_ID] \u003c\u003e 'TS74827    ' and [EMP_ID] \u003c\u003e 'TS77319    '))in    #'Filtered Rows'"}]},{"name":"RFO_NM","isHidden":true,"storageMode":"Import","columns":[{"name":"RFO_CODE","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"RFO_NM","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"NM","dataType":"String","isHidden":true,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Sql.Database('dbedwdwprd', 'EnterpriseDataMart', [Query='SELECT DISTINCT#(lf)       [Department Identifier] RFO_CODE#(lf)      ,[Department Name] RFO_NM#(lf)      ,case#(lf)       when [Department Identifier]=\u00270383\u0027 then \u00270383-Virtual Advice\u0027#(lf)       else concat(trim([Department Identifier]),\u0027-\u0027,left([Department Name],len([Department Name])-13)) #(lf)       end as NM#(lf)#(lf) #(lf)#(lf)  FROM [EnterpriseDataMart].[DM_01].[Organization Dimension] #(lf)  where [Department Identifier] in (\u00270283\u0027, \u00270435\u0027,\u00270115\u0027, \u00270190\u0027, #(lf)                \u00270361\u0027, \u00270384\u0027,\u00270291\u0027, \u00270525\u0027,\u00270001\u0027,\u00270383\u0027)#(lf)        and [Current Row Indicator] = \u0027Y\u0027#(lf)        and [Effective Begin Date] \u003e \u00271/1/2019\u0027#(lf)        and [Effective End Date] = \u002712/31/9999\u0027'])in    Source"}]},{"name":"Contracts","isHidden":false,"storageMode":"Import","columns":[{"name":"JOIN VALUE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ZONE_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_Mkt","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Year","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Week","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Current Wk","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Count","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"PerfYrWk","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Contract Goals","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Cumulative Contract Goals","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG Contract Goals","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP Contract Goals","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"cy_prior_wk_contracts","expression":"CALCULATE(     SUM(\u0027Contracts\u0027[Count]),     DTRB_PERF_DATES[Prior Week Flag] = 'TRUE',     DTRB_PERF_DATES[Current Year Flag] in {True}    )","isHidden":false},{"name":"py_prior_wk_contracts","expression":"CALCULATE(     SUM(\u0027Contracts\u0027[Count]),     DTRB_PERF_DATES[Prior Week Flag] = 'TRUE',     DTRB_PERF_DATES[Prior Year Flag] in {True}    )","isHidden":false},{"name":"YOY Change Contracts","expression":"DIVIDE(([cy_prior_wk_contracts]-[py_prior_wk_contracts]),[py_prior_wk_contracts])","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//SHARED//Public//DI and BI//Capacity Dashboard//Capacity Dashboard-RAR_Contracts.xlsx'), null, true),    Sheet1_Sheet = Source{[Item='Sheet1',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'JOIN VALUE', type text}, {'RFO_ID', type text}, {'RFO_Mkt', type text}, {'Type', type text}, {'Year', Int64.Type}, {'Week', Int64.Type}, {'Current Wk', Int64.Type}, {'Count', Int64.Type}, {'ZONE_ID', type text}}),    #'Added Custom' = Table.AddColumn(#'Changed Type', 'PerfYrWk', each Number.ToText([Year])\u0026'-'\u0026Number.ToText([Week]))in    #'Added Custom'"}]},{"name":"Terms","isHidden":false,"storageMode":"Import","columns":[{"name":"JOIN VALUE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ZONE_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_Mkt","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Year","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Week","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Current Wk","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Count","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"PerfYrWk","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"cy_prior_wk_terms","expression":"CALCULATE(     SUM(\u0027Terms\u0027[Count]),     DTRB_PERF_DATES[Prior Week Flag] = 'TRUE',     DTRB_PERF_DATES[Current Year Flag] in {True}    )","isHidden":false},{"name":"py_prior_wk_terms","expression":"CALCULATE(     SUM(\u0027Terms\u0027[Count]),     DTRB_PERF_DATES[Prior Week Flag] = 'TRUE',     DTRB_PERF_DATES[Prior Year Flag] in {True}    )","isHidden":false},{"name":"YOY Change Terms","expression":"divide([cy_prior_wk_terms]-[py_prior_wk_terms],[py_prior_wk_terms])","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//SHARED//Public//DI and BI//Capacity Dashboard//Capacity Dashboard-FP_Terminations.xlsx'), null, true),    Sheet1_Sheet = Source{[Item='Sheet1',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'JOIN VALUE', type text}, {'RFO_ID', type text}, {'ZONE_ID', type text}, {'RFO_Mkt', type text}, {'Type', type text}, {'Year', Int64.Type}, {'Week', Int64.Type}, {'Current Wk', Int64.Type}, {'Count', Int64.Type}}),    #'Added Custom' = Table.AddColumn(#'Changed Type', 'PerfYrWk', each Number.ToText([Year])\u0026'-'\u0026Number.ToText([Week]))in    #'Added Custom'"}]},{"name":"Pipeline Points","isHidden":false,"storageMode":"Import","columns":[{"name":"RFO","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Pipeline Points","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//SHARED//Public//DI and BI//Distribution Dashboard//Pipeline_Points.xlsx'), null, true),    Sheet1_Sheet = Source{[Item='Sheet1',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Pipeline Points', type number}})in    #'Changed Type'"}]},{"name":"RECD_PEND_COMPL_ZBE","isHidden":false,"storageMode":"Import","columns":[{"name":"Week_Ending","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Week_Nbr","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"ContractNumber","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"BenefitContractNumber","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FileCode","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TransCode","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TransDesc","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TransReceiveDt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TransCreateDt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TransCloseDt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TransSeqNumber","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ProdType","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LOBCode","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LOBSubType","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SMISLOBCode","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SMISPlanCode","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EstimatedSalesCreditAmt","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"ActualSalesCreditAmt","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CAPTransmissionNumber","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CorporateEmployeeID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFOCode","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFOName","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"AgentCode","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SMISTRANSKEY","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Received","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Pending","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Retired","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Declined","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Issued","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Cancelled","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"STATUS","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"YR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EFF_BEG_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"EFF_END_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TSID_trimmed","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_MKT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"date_filter_ind","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CALC_ESC_MOD.BenefitContractNumber","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CALC_ESC_MOD.COMM_PREM_AMT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CALC_ESC_MOD.BASECOVERAGE_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CALC_ESC_MOD.Res_ProductCode","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CALC_ESC_MOD.NSC_RATES.PRODUCT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CALC_ESC_MOD.NSC_RATES.AGE_LOW","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"CALC_ESC_MOD.NSC_RATES.AGE_HIGH","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"CALC_ESC_MOD.NSC_RATES.COMM_RATE","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"CALC_ESC_MOD.NSC_RATES.NSC_RATE","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"CALC_ESC_MOD.NSC_RATES.POLICY_FEE","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Product_Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Product Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Products","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Est Sales Credits","dataType":"String","isHidden":false,"expression":"IF(AND(RECD_PEND_COMPL_ZBE[BenefitContractNumber]=RECD_PEND_COMPL_ZBE[CALC_ESC_MOD.BenefitContractNumber],(ISBLANK(RECD_PEND_COMPL_ZBE[EstimatedSalesCreditAmt]))),RECD_PEND_COMPL_ZBE[CALC_ESC_MOD.COMM_PREM_AMT],RECD_PEND_COMPL_ZBE[EstimatedSalesCreditAmt])","columnType":"Calculated"},{"name":"TAG-MVP-Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ContractFaceAmount","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Future Receive Dt Filter","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Contract Min Week any year","dataType":"String","isHidden":false,"expression":"  VAR ContractMinWeek = CALCULATE(        MIN(RECD_PEND_COMPL_ZBE[Week_Ending]),        ALLEXCEPT(RECD_PEND_COMPL_ZBE,RECD_PEND_COMPL_ZBE[BenefitContractNumber])    )   RETURNIF((RECD_PEND_COMPL_ZBE[Week_Ending]=ContractMinWeek),'Contract MinWeek','Not Contract MinWeek')","columnType":"Calculated"}],"measures":[{"name":"Received CW","expression":"//VAR MaxWeek = WEEKNUM(CALCULATE(//            MAX(RECD_PEND_COMPL_ZBE[Week_Ending]),ALL(RECD_PEND_COMPL_ZBE)))//VAR MaxYear = YEAR(CALCULATE(//            MAX(RECD_PEND_COMPL_ZBE[Week_Ending]),ALL(RECD_PEND_COMPL_ZBE)))//RETURN//    CALCULATE(//        SUM(RECD_PEND_COMPL_ZBE[Received]),//            FILTER(RECD_PEND_COMPL_ZBE,WEEKNUM(RECD_PEND_COMPL_ZBE[Week_Ending])=MaxWeek \u0026\u0026 YEAR(RECD_PEND_COMPL_ZBE[Transaction Receive Date])=MaxYear))+0Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[CAL_DAY_DT]=(TODAY())))-1Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_week VAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))returnCALCULATE(SUM(RECD_PEND_COMPL_ZBE[Received]),  RECD_PEND_COMPL_ZBE[TransReceiveDt]\u003c= MaxDay,RECD_PEND_COMPL_ZBE[TransReceiveDt]\u003e=StartDay)","isHidden":false},{"name":"Received YTD","expression":"//VAR MaxYear = YEAR(CALCULATE(//            MAX(RECD_PEND_COMPL_ZBE[Transaction Receive Date]),ALL(RECD_PEND_COMPL_ZBE)))//RETURN//CALCULATE(//   SUM(RECD_PEND_COMPL_ZBE[Received]),//    FILTER((RECD_PEND_COMPL_ZBE),//        YEAR(RECD_PEND_COMPL_ZBE[Transaction Receive Date])=MaxYear))+0CALCULATE(   SUM(RECD_PEND_COMPL_ZBE[Received]),   DTRB_PERF_DATES[Cal_YTD_Flag]={TRUE()},RECD_PEND_COMPL_ZBE[Contract Min Week any year]='Contract MinWeek')","isHidden":false},{"name":"Received PYTD","expression":"//var py = YEAR(CALCULATE(            //MAX(RECD_PEND_COMPL_ZBE[Week_Ending]),ALL(RECD_PEND_COMPL_ZBE)))-1//var cw = WEEKNUM(CALCULATE(            //MAX(RECD_PEND_COMPL_ZBE[Week_Ending]),ALL(RECD_PEND_COMPL_ZBE)))//RETURN//CALCULATE(//SUM(RECD_PEND_COMPL_ZBE[Received]),//FILTER(RECD_PEND_COMPL_ZBE,//YEAR(RECD_PEND_COMPL_ZBE[Week_Ending])=py//\u0026\u0026 WEEKNUM(RECD_PEND_COMPL_ZBE[Week_Ending])\u003c=cw//)//)+0CALCULATE(SUM(RECD_PEND_COMPL_ZBE[Received]),DTRB_PERF_DATES[Cal_PYTD_Flag] in {TRUE},RECD_PEND_COMPL_ZBE[Contract Min Week any year]='Contract MinWeek')","isHidden":false},{"name":"Estimated Sales Credit CW","expression":"VAR MaxWeek = CALCULATE(MAX(RECD_PEND_COMPL_ZBE[Week_Ending]),ALL(RECD_PEND_COMPL_ZBE))RETURNCALCULATE(SUM(RECD_PEND_COMPL_ZBE[Est Sales Credits]),FILTER(RECD_PEND_COMPL_ZBE,RECD_PEND_COMPL_ZBE[Week_Ending]=MaxWeek\u0026\u0026 RECD_PEND_COMPL_ZBE[Pending]=1))+0","isHidden":false},{"name":"Pending Count CW","expression":"VAR MaxWeek = CALCULATE(            MAX(RECD_PEND_COMPL_ZBE[Week_Ending]),ALL(RECD_PEND_COMPL_ZBE))RETURN    CALCULATE(        SUM(RECD_PEND_COMPL_ZBE[Pending]),            FILTER((RECD_PEND_COMPL_ZBE),RECD_PEND_COMPL_ZBE[Week_Ending]=MaxWeek))+0","isHidden":false},{"name":"Estimated Sales Credit by Week","expression":"CALCULATE(SUM(RECD_PEND_COMPL_ZBE[Est Sales Credits]),FILTER(RECD_PEND_COMPL_ZBE,RECD_PEND_COMPL_ZBE[Week_Ending]=MAX(RECD_PEND_COMPL_ZBE[Week_Ending])\u0026\u0026 RECD_PEND_COMPL_ZBE[Pending]=1))","isHidden":false},{"name":"Received 4 Wk Total Week_Index DistDt","expression":"Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[CAL_DAY_DT]=(TODAY())))-1Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_week -3VAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))RETURNCALCULATE(              SUM(RECD_PEND_COMPL_ZBE[Received]),              RECD_PEND_COMPL_ZBE[TransReceiveDt]\u003e=StartDay \u0026\u0026 RECD_PEND_COMPL_ZBE[TransReceiveDt]\u003c=MaxDay )","isHidden":false},{"name":"Received 4 Week Avg","expression":"DIVIDE([Received 4 Wk Total Week_Index DistDt],4)","isHidden":false},{"name":"Received YoY","expression":"divide([Received YTD]-[Received PYTD],[Received PYTD])","isHidden":false},{"name":"Pending CY","expression":"var MaxPendYear = CALCULATE(    YEAR(MAX(RECD_PEND_COMPL_ZBE[Week_Ending])),ALL(RECD_PEND_COMPL_ZBE))RETURNCALCULATE(    SUM(RECD_PEND_COMPL_ZBE[Pending]),    FILTER(RECD_PEND_COMPL_ZBE,YEAR(RECD_PEND_COMPL_ZBE[Week_Ending])=MaxPendYear))","isHidden":false},{"name":"Pending PY","expression":"var MaxPendYear = CALCULATE(    YEAR(MAX(RECD_PEND_COMPL_ZBE[Week_Ending])),ALL(RECD_PEND_COMPL_ZBE))RETURNCALCULATE(    SUM(RECD_PEND_COMPL_ZBE[Pending]),    FILTER(RECD_PEND_COMPL_ZBE,YEAR(RECD_PEND_COMPL_ZBE[Week_Ending])=MaxPendYear-1))","isHidden":false},{"name":"Pending PY2","expression":"var MaxPendYear = CALCULATE(    YEAR(MAX(RECD_PEND_COMPL_ZBE[Week_Ending])),ALL(RECD_PEND_COMPL_ZBE))RETURNCALCULATE(    SUM(RECD_PEND_COMPL_ZBE[Pending]),    FILTER(RECD_PEND_COMPL_ZBE,YEAR(RECD_PEND_COMPL_ZBE[Week_Ending])=MaxPendYear-2))","isHidden":false},{"name":"Received CY","expression":"CALCULATE(   SUM(RECD_PEND_COMPL_ZBE[Received]),   DTRB_PERF_DATES[Cal_YTD_Flag]={TRUE()},RECD_PEND_COMPL_ZBE[Contract Min Week any year]='Contract MinWeek')","isHidden":false},{"name":"Received PY","expression":"CALCULATE(   SUM(RECD_PEND_COMPL_ZBE[Received]),   DTRB_PERF_DATES[Prior Year Flag] in {TRUE},RECD_PEND_COMPL_ZBE[Contract Min Week any year]='Contract MinWeek')","isHidden":false},{"name":"Received PY2","expression":"CALCULATE(   SUM(RECD_PEND_COMPL_ZBE[Received]),  DTRB_PERF_DATES[Prior Year 2 Flag] in {TRUE},RECD_PEND_COMPL_ZBE[Contract Min Week any year]='Contract MinWeek')","isHidden":false}],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////pnfiles002b//fp_cifs_7834_sas$//MarketAnalysis//FieldReporting//SMIS//RECD_PEND_COMPL.csv'),[Delimiter=',', Columns=34, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'EstimatedSalesCreditAmt', type number}, {'ActualSalesCreditAmt', type number}, {'Received', Int64.Type}, {'Pending', Int64.Type}, {'Retired', Int64.Type}, {'Declined', Int64.Type}, {'Issued', Int64.Type}, {'Cancelled', Int64.Type}, {'TransReceiveDt', type date}, {'TransCreateDt', type date}, {'TransCloseDt', type date}, {'Week_Ending', type date}, {'Week_Nbr', Int64.Type}}),    #'Merged Queries' = Table.NestedJoin(#'Changed Type', {'CorporateEmployeeID'}, NEW_ZBE, {'TSID_trimmed'}, 'NEW_ZBE', JoinKind.Inner),    #'Expanded NEW_ZBE' = Table.ExpandTableColumn(#'Merged Queries', 'NEW_ZBE', {'RFO', 'TAG_MVP_MKT', 'MVP_ID', 'ZONE_ID', 'TSID', 'EFF_BEG_TMSP', 'EFF_END_TMSP', 'TSID_trimmed'}, {'RFO', 'TAG_MVP_MKT', 'MVP_ID', 'ZONE_ID', 'TSID', 'EFF_BEG_TMSP', 'EFF_END_TMSP', 'TSID_trimmed'}),    #'Trimmed Text' = Table.TransformColumns(#'Expanded NEW_ZBE',{{'RFO', Text.Trim, type text}}),    #'Added Custom' = Table.AddColumn(#'Trimmed Text', 'RFO_MKT', each [RFO]\u0026'-'\u0026[ZONE_ID]),    #'Added Custom1' = Table.AddColumn(#'Added Custom', 'date_filter_ind', each if [Week_Ending] \u003e= [EFF_BEG_TMSP] and [Week_Ending] \u003c= [EFF_END_TMSP] then 1 else 0),    #'Filtered Rows' = Table.SelectRows(#'Added Custom1', each ([date_filter_ind] = 1)),    #'Filtered Rows1' = Table.SelectRows(#'Filtered Rows', each [Week_Ending] \u003e #date(2021, 12, 31)),    #'Merged Queries1' = Table.NestedJoin(#'Filtered Rows1', {'BenefitContractNumber'}, CALC_ESC_MOD, {'BenefitContractNumber'}, 'CALC_ESC_MOD', JoinKind.LeftOuter),    #'Expanded CALC_ESC_MOD' = Table.ExpandTableColumn(#'Merged Queries1', 'CALC_ESC_MOD', {'BenefitContractNumber', 'COMM_PREM_AMT', 'BASECOVERAGE_ID', 'Res_ProductCode', 'NSC_RATES.PRODUCT', 'NSC_RATES.AGE_LOW', 'NSC_RATES.AGE_HIGH', 'NSC_RATES.COMM_RATE', 'NSC_RATES.NSC_RATE', 'NSC_RATES.POLICY_FEE'}, {'CALC_ESC_MOD.BenefitContractNumber', 'CALC_ESC_MOD.COMM_PREM_AMT', 'CALC_ESC_MOD.BASECOVERAGE_ID', 'CALC_ESC_MOD.Res_ProductCode', 'CALC_ESC_MOD.NSC_RATES.PRODUCT', 'CALC_ESC_MOD.NSC_RATES.AGE_LOW', 'CALC_ESC_MOD.NSC_RATES.AGE_HIGH', 'CALC_ESC_MOD.NSC_RATES.COMM_RATE', 'CALC_ESC_MOD.NSC_RATES.NSC_RATE', 'CALC_ESC_MOD.NSC_RATES.POLICY_FEE'}),    #'Added Custom2' = Table.AddColumn(#'Expanded CALC_ESC_MOD', 'Products Name', each if [ProdType]= 'TERM' and [LOBCode] = 'NA' then 'TERM' else if [LOBCode]='NA' and Text.StartsWith([BenefitContractNumber],'VA') then 'VA' else if Text.StartsWith([LOBSubType], 'MYGA') then 'MYGA' else[LOBCode]),    #'Added Custom3' = Table.AddColumn(#'Added Custom2', 'Products', each if [Products Name] = 'TERM' then 'Life-TERM' else if [Products Name] = 'WL' then 'Life-WL' else if [Products Name] = 'UL' then 'Life-UL' else if [Products Name] = 'VUL' then 'Life-VUL' else if [Products Name] = 'LTC' then 'Health-LTC' else if [Products Name] = 'MS' then 'Health-MS' else if [Products Name] = 'DI' then 'Health-DI' else if [Products Name] = 'SO' then 'Annuity-SO' else if [Products Name] = 'VA' then 'Annuity-VA' else if [Products Name] = 'FA' then 'Annuity-FA' else if [Products Name] = 'SPIA' then 'Annuity-SPIA' else if [Products Name] = 'VSO' then 'Annuity-VSO' else if [Products Name] = 'CAREFORWARD' then 'Health-CAREFORWARD' else if [Products Name] = 'MYGA' then 'Annuity-MYGA' else 'Other'),    #'Added Custom4' = Table.AddColumn(#'Added Custom3', 'Products.1', each if [Products Name] = 'TERM' then 'Life' else if [Products Name] = 'WL' then 'Life' else if [Products Name] = 'UL' then 'Life' else if [Products Name] = 'VUL' then 'Life' else if [Products Name] = 'LTC' then 'Health' else if [Products Name] = 'MS' then 'Health' else if [Products Name] = 'DI' then 'Health' else if [Products Name] = 'CAREFORWARD' then 'Health' else if [Products Name] = 'SO' then 'Annuity' else if [Products Name] = 'VA' then 'Annuity' else if [Products Name] = 'FA' then 'Annuity' else if [Products Name] = 'SPIA' then 'Annuity' else if [Products Name] = 'VSO' then 'Annuity' else if [Products Name] = 'MYGA' then 'Annuity' else 'Other'),    #'Renamed Columns' = Table.RenameColumns(#'Added Custom4',{{'Products Name', 'Product_Name'}, {'Products', 'Product Name'}, {'Products.1', 'Products'},{'ZONE_ID', 'Market'},{'TAG_MVP_MKT','TAG-MVP-Market'},{'MVP_ID','MVP'}}),    #'Added Custom5' = Table.AddColumn(#'Renamed Columns', 'Future Receive Dt Filter', each if [TransReceiveDt] \u003e [Week_Ending] then 0 else 1),    #'Filtered Rows2' = Table.SelectRows(#'Added Custom5', each ([Future Receive Dt Filter] = 1))in    #'Filtered Rows2'"}]},{"name":"NEW_ZBE","isHidden":true,"storageMode":"Import","columns":[{"name":"RFO","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"ZONE_ID","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"TSID","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"EFF_BEG_TMSP","dataType":"DateTime","isHidden":true,"columnType":"Data"},{"name":"EFF_END_TMSP","dataType":"DateTime","isHidden":true,"columnType":"Data"},{"name":"TSID_trimmed","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"TAG_MVP_MKT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP_ID","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = DB2.Database('PODWH021:50000', 'PODWH021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT DISTINCT t1.ORZN_DEPT_CDE AS RFO, #(lf)          /* TAG_MVP_Mkt */#(lf)          t1.ORZN_ZONE_CDE AS TAG_MVP_Mkt,/* MVP_ID */#(lf)      SUBSTRING(t1.ORZN_ZONE_CDE,1,7) AS MVP_ID,/* Zone_ID */#(lf)          RIGHT(RTRIM(t1.ORZN_ZONE_CDE),2) AS Zone_ID,#(lf)         t1.SALE_HIER_ID AS TSID, #(lf)          /* Strt_Dt */#(lf)          t1.EFF_BEG_TMSP,#(lf)          /* END_DATE */#(lf)          (CASE WHEN t1.EFF_END_TMSP is null #(lf)             THEN \u002712-31-9999\u0027#(lf)               ELSE t1.EFF_END_TMSP-1#(lf)          END)AS EFF_END_TMSP#(lf)      FROM SEMANTIC.SALES_HIERARCHY_DIMENSION t1#(lf)      WHERE SUBSTRING(t1.SALE_HIER_ID,1,2) in (\u0027DP\u0027,\u0027TS\u0027) #(lf)        AND t1.CURR_ROW_IND = \u0027Y\u0027 #(lf)        AND ( t1.EFF_END_TMSP \u003e t1.EFF_BEG_TMSP OR t1.EFF_END_TMSP IS null )']),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'EFF_BEG_TMSP', type date}, {'EFF_END_TMSP', type date}}),    #'Duplicated Column' = Table.DuplicateColumn(#'Changed Type', 'TSID', 'TSID - Copy'),    #'Renamed Columns' = Table.RenameColumns(#'Duplicated Column',{{'TSID - Copy', 'TSID_trimmed'}}),    #'Trimmed Text' = Table.TransformColumns(#'Renamed Columns',{{'TSID_trimmed', Text.Trim, type text}})in    #'Trimmed Text'"}]},{"name":"NSC_RATES","isHidden":true,"storageMode":"Import","columns":[{"name":"PRODUCT","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"AGE_LOW","dataType":"Int64","isHidden":true,"columnType":"Data"},{"name":"AGE_HIGH","dataType":"Int64","isHidden":true,"columnType":"Data"},{"name":"COMM_RATE","dataType":"Int64","isHidden":true,"columnType":"Data"},{"name":"NSC_RATE","dataType":"Int64","isHidden":true,"columnType":"Data"},{"name":"POLICY_FEE","dataType":"Int64","isHidden":true,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////vsshr//shared////Public//DI and BI//Applications Dashboard//NSC_RATES.csv'),[Delimiter=',', Columns=6, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'PRODUCT', type text}, {'AGE_LOW', Int64.Type}, {'AGE_HIGH', Int64.Type}, {'COMM_RATE', Int64.Type}, {'NSC_RATE', Int64.Type}, {'POLICY_FEE', Int64.Type}})in    #'Changed Type'"}]},{"name":"RES_DATA","isHidden":true,"storageMode":"Import","columns":[{"name":"BenefitContractNumber","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"COMM_PREM_AMT","dataType":"Double","isHidden":true,"columnType":"Data"},{"name":"BASECOVERAGE_ID","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"Res_ProductCode","dataType":"String","isHidden":true,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Sql.Database('DBRESONANTPRD', 'Resonant', [Query='SELECT DISTINCT RTRIM(LTRIM(Replace(A.PolNumber,\u0027?\u0027,\u0027\u0027))) as BenefitContractNumber,#(lf)     A.CommissionablePremiumAmt as COMM_PREM_AMT,#(lf)     A.BASECOVERAGE_ID, #(lf)     B.ProductCode as Res_ProductCode #(lf)  FROM Resonant.dbo.life_lifepolicy #(lf)  A LEFT JOIN#(lf)     Resonant.dbo.life_coverage B #(lf)        ON (A.BaseCoverage_ID = B.ID)#(lf)  WHERE A.CommissionablePremiumAmt \u003e 0'])in    Source"}]},{"name":"CALC_ESC_MOD","isHidden":false,"storageMode":"Import","columns":[{"name":"BenefitContractNumber","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"COMM_PREM_AMT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"BASECOVERAGE_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Res_ProductCode","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"NSC_RATES.PRODUCT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"NSC_RATES.AGE_LOW","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"NSC_RATES.AGE_HIGH","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"NSC_RATES.COMM_RATE","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"NSC_RATES.NSC_RATE","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"NSC_RATES.POLICY_FEE","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.NestedJoin(RES_DATA, {'Res_ProductCode'}, NSC_RATES, {'PRODUCT'}, 'NSC_RATES', JoinKind.LeftOuter),    #'Expanded NSC_RATES' = Table.ExpandTableColumn(Source, 'NSC_RATES', {'PRODUCT', 'AGE_LOW', 'AGE_HIGH', 'COMM_RATE', 'NSC_RATE', 'POLICY_FEE'}, {'NSC_RATES.PRODUCT', 'NSC_RATES.AGE_LOW', 'NSC_RATES.AGE_HIGH', 'NSC_RATES.COMM_RATE', 'NSC_RATES.NSC_RATE', 'NSC_RATES.POLICY_FEE'}),    #'Filtered Rows' = Table.SelectRows(#'Expanded NSC_RATES', each [BenefitContractNumber] \u003c\u003e null and [BenefitContractNumber] \u003c\u003e ''),    #'Removed Duplicates' = Table.Distinct(#'Filtered Rows', {'BenefitContractNumber'}),    #'Filtered Rows1' = Table.SelectRows(#'Removed Duplicates', each ([NSC_RATES.PRODUCT] = 'LTIV10YR' or [NSC_RATES.PRODUCT] = 'LTIV15YR' or [NSC_RATES.PRODUCT] = 'LTIV20YR' or [NSC_RATES.PRODUCT] = 'LTIV30YR'))in    #'Filtered Rows1'"}]},{"name":"WMFC_DD","isHidden":false,"storageMode":"Import","columns":[{"name":"RFO","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Category","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MFC","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"WMFC","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"RFO_MKT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PerfYrWk","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Channel","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Division","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Region","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Perfyear","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Zone_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Perfweek","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[{"name":"CY WMFC","expression":"CALCULATE( sum(WMFC_DD[WMFC]),DTRB_PERF_DATES[YTD Flag] in {TRUE})","isHidden":false},{"name":"cy_prior_wk_WMFC","expression":"VAR max_year = CALCULATE(MAX(WMFC_dD[Perfyear]),WMFC_dD)var max_week = CALCULATE(MAX(WMFC_dD[Perfweek]),WMFC_dD[Perfyear]=max_year,NOT(ISBLANK(WMFC_dD[MFC])))RETURNCALCULATE(    SUM(WMFC_dD[WMFC]),   WMFC_dD[Perfyear]=max_year,   WMFC_dD[Perfweek]=max_week)--CALCULATE(     --SUM(WMFC_DD[WMFC]),     --DTRB_PERF_DATES[Prior Week Flag] = 'TRUE',     --DTRB_PERF_DATES[Current Year Flag] in {True})","isHidden":false},{"name":"PY WMFC","expression":"CALCULATE( sum(WMFC_DD[WMFC]),DTRB_PERF_DATES[Prior Year Flag] in {TRUE})","isHidden":false},{"name":"py_prior_wek_WMFC","expression":"CALCULATE(     sum(WMFC_DD[WMFC]),     DTRB_PERF_DATES[Prior Week Flag] = 'TRUE',     DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='PREVIOUS')","isHidden":false},{"name":"PY2 WMFC","expression":"CALCULATE(     sum(WMFC_DD[WMFC]),    DTRB_PERF_DATES[Prior Year 2 Flag] in {TRUE})","isHidden":false},{"name":"YOY Change WMFC","expression":"DIVIDE((WMFC_DD[cy_prior_wk_WMFC] - WMFC_DD[py_prior_wek_WMFC]),WMFC_DD[py_prior_wek_WMFC])","isHidden":false},{"name":"pye_WMFC","expression":"CALCULATE(     sum(WMFC_DD[WMFC]),     DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = 52,     DTRB_PERF_DATES[Prior Year Flag] in {TRUE})","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//SHARED//Public//DI and BI//Capacity Dashboard//WMFC_CD.xlsx'), null, true),    WMFC_CD_Sheet = Source{[Item='WMFC_CD',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(WMFC_CD_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'RFO', type text}, {'Zone_ID', type text}, {'RFO_MKT', type text}, {'Category', type text}, {'MFC', Int64.Type}, {'WMFC', type number}, {'Join_Value', type text}, {'Perfweek', type text}, {'Perfyear', type text}}),    #'Removed Columns' = Table.RemoveColumns(#'Changed Type',{'Join_Value'}),    #'Added Custom' = Table.AddColumn(#'Removed Columns', 'PerfYrWk', each [Perfyear]\u0026'-'\u0026[Perfweek]),    #'Added Custom1' = Table.AddColumn(#'Added Custom', 'Division', each if List.Contains({'0115','0165','0190','0240','0361','0384'},[RFO]) then 'East' else if List.Contains({'0283','0365','0435','0496','0810'},[RFO]) then 'Central' else if List.Contains({'0291','0410','0475','0525','0529'},[RFO]) then 'West' else 'Other'),    #'Added Custom2' = Table.AddColumn(#'Added Custom1', 'Region', each if List.Contains({'0361','0365','0435','0496'},[RFO]) then 'Established' else if List.Contains({'0165','0240','0283','0291','0410','0525'},[RFO]) then 'Growth' else if List.Contains({'0115','0190','0384','0475','0529'},[RFO]) then 'Invest' else if List.Contains({'0810'},[RFO]) then 'Colorado Springs' else 'Other'),    #'Added Conditional Column' = Table.AddColumn(#'Added Custom2', 'Channel', each if [RFO] = 383 then 'TFGT' else 'Thrivent Advisor Group'),    #'Reordered Columns' = Table.ReorderColumns(#'Added Conditional Column',{'RFO', 'Category', 'MFC', 'WMFC', 'RFO_MKT', 'PerfYrWk', 'Channel', 'Division', 'Region'}),    #'Changed Type1' = Table.TransformColumnTypes(#'Reordered Columns',{{'Perfyear', Int64.Type}, {'Perfweek', Int64.Type}})in    #'Changed Type1'"}]},{"name":"Current RD/RDD/RDLs","isHidden":false,"storageMode":"Import","columns":[{"name":"RFO","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"First Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Last Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Leader Role","dataType":"String","isHidden":false,"expression":"if(\u0027Current RD/RDD/RDLs\u0027[Job Type Code] = '001004', 'RD',if(\u0027Current RD/RDD/RDLs\u0027[Job Type Code] = '001005', 'Market Developer', if(\u0027Current RD/RDD/RDLs\u0027[Job Type Code] = '001007', 'Market Director')))","columnType":"Calculated"}],"measures":[{"name":"TSID Count","expression":"DISTINCTCOUNT(\u0027Current RD/RDD/RDLs\u0027[TSID])","isHidden":false}],"source":[{"expression":"let    Source = Sql.Database('dbedwdwprd', 'EnterpriseDataMart'),    #'DM_01_Organization Dimension' = Source{[Schema='DM_01',Item='Organization Dimension']}[Data],    #'Filtered Rows' = Table.SelectRows(#'DM_01_Organization Dimension', each ([Current Row Indicator] = 'Y')),    #'Filtered Rows1' = Table.SelectRows(#'Filtered Rows', each Text.StartsWith([Job Type Code], '00100')),    #'Filtered Rows2' = Table.SelectRows(#'Filtered Rows1', each ([Job Type Code] = '001004' or [Job Type Code] = '001005' or [Job Type Code] = '001007') and ([Employee Status Type Code] = 'A')),    #'Renamed Columns' = Table.RenameColumns(#'Filtered Rows2',{{'Source System Key Text', 'TSID'}, {'Department Identifier', 'RFO'}}),    #'Removed Other Columns' = Table.SelectColumns(#'Renamed Columns',{'RFO', 'TSID', 'First Name', 'Last Name', 'Job Type Code'}),    #'Sorted Rows' = Table.Sort(#'Removed Other Columns',{{'TSID', Order.Ascending}})in    #'Sorted Rows'"}]},{"name":"MVPs","isHidden":false,"storageMode":"Import","columns":[{"name":"RFO_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_DEPT_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_STS_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TRMN_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MARKET_LEADERS","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market_Leader","dataType":"String","isHidden":false,"expression":"MVPs[MVP_ID] \u0026 '-' \u0026 MVPs[MARKET_LEADERS]","columnType":"Calculated"},{"name":"MVP_ID","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = DB2.Database('podwh021:50000', 'podwh021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT DISTINCT#(lf)t1.ORZN_DEPT_CDE as RFO_CDE,#(lf)--t1.ORZN_ZONE_CDE as RFO_ZONE_NM,#(lf)t1.ORZN_SUB_DEPT_CDE as MVP_ID,#(lf)--(SUBSTRING(t1.ORZN_ZONE_CDE,6,5)) AS Market_ID,#(lf)t3.ORZN_DEPT_DSCR,#(lf)t3.EMP_ID,#(lf)t3.EMP_STS_TYP_CDE,#(lf)t3.trmn_dt,#(lf)t3.JOB_TYP_CDE,#(lf)t3.JOB_TYP_DSCR,#(lf)t3.EMP_NM,#(lf)case when t3.emp_nm is null then \u0027Vacant\u0027 Else t3.emp_nm end as market_leaders#(lf)FROM SEMANTIC.SALES_HIERARCHY_DIMENSION t1#(lf)left join#(lf)(#(lf)SELECT DISTINCT#(lf)T1.SALE_HIER_ID,#(lf)t1.orzn_zone_cde,#(lf)t1.orzn_dept_dscr,#(lf)t1.orzn_sub_dept_cde,#(lf)t2.orzn_dept_cde,#(lf)t2.EMP_ID,#(lf)t2.EMP_STS_TYP_CDE,#(lf)t2.trmn_dt,#(lf)t2.JOB_TYP_CDE,#(lf)t2.JOB_TYP_DSCR,#(lf)t2.EMP_NM#(lf)FROM#(lf)SEMANTIC.SALES_HIERARCHY_DIMENSION t1#(lf)left JOIN HUMAN_RESOURCES.CNF_EMP_DIM_DTL_CURR_CFDL t2 ON T1.SALE_HIER_ID = T2.emp_id#(lf)where t1.CURR_ROW_IND = \u0027Y\u0027#(lf)and t2.emp_sts_typ_cde in (\u0027A\u0027)#(lf)and t1.EFF_END_TMSP is null#(lf)AND T2.CURR_ROW_IND = \u0027Y\u0027#(lf)and t1.EFF_END_TMSP is null#(lf)and t2.JOB_TYP_CDE IN (\u0027001001\u0027)#(lf))#(lf)t3#(lf)on t1.orzn_sub_dept_cde = t3.orzn_sub_dept_cde#(lf)where t1.CURR_ROW_IND = \u0027Y\u0027#(lf)and t1.eff_end_tmsp is null#(lf)--and t1.rfo_zone_sts_cde in (\u0027A\u0027)#(lf)--and t3.EMP_STS_TYP_CDE = \u0027A\u0027#(lf)--and substring(t1.orzn_zone_cde,6,2) \u003c\u003e \u002700\u0027#(lf)and t1.orzn_zone_cde \u003c\u003e \u0027UKWN\u0027#(lf)order BY t1.ORZN_SUB_DEPT_CDE;#(lf)']),    #'Filtered Rows' = Table.SelectRows(Source, each ([RFO_CDE] \u003c\u003e '0386      ' and [RFO_CDE] \u003c\u003e '0710      ' and [RFO_CDE] \u003c\u003e '0714      ' and [RFO_CDE] \u003c\u003e '0715      ' and [RFO_CDE] \u003c\u003e '0718      ' and [RFO_CDE] \u003c\u003e '0997      ' and [RFO_CDE] \u003c\u003e 'UKWN      ') and ([MVP_ID] \u003c\u003e '          ' and [MVP_ID] \u003c\u003e '0529-00   '))in    #'Filtered Rows'"}]},{"name":"Advice_AllTS_list","isHidden":false,"storageMode":"Import","columns":[{"name":"asOfDt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"region","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"region_nm","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_SUB_DEPT_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_ZONE_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"zone_cde","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"zone_dscr","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"trained_cohort","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"tenure_grp","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"tenure_dtl","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"aip_yr","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Program","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"mgp_psptHH_cnt","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"mgp_psptClnt_cnt","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"tot_newClient","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"cyr_Goal","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"sts","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"actvFP","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"any_newclnt","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"any_newclntgoal","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"mgpGoals_asOfDt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"wk_tot_newClient","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"wk_tot_goalConv","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[{"name":"% New Clients w/ Advice Goal Conv","expression":"CALCULATE(divide(sum(Advice_AllTS_list[cyr_Goal]),sum(Advice_AllTS_list[tot_newClient])))","isHidden":false},{"name":"% Goal Based Conv Target","expression":"0.2","isHidden":false}],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////vsshr//shared////Public//DI and BI//Field Reporting//Advice//Advice_AllTS_list.csv'),[Delimiter=',', Columns=25, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'asOfDt', type date}, {'region', type text}, {'region_nm', type text}, {'ORZN_SUB_DEPT_CDE', type text}, {'ORZN_ZONE_CDE', type text}, {'zone_cde', Int64.Type}, {'zone_dscr', type text}, {'TSID', type text}, {'EMP_NM', type text}, {'trained_cohort', type text}, {'tenure_grp', type text}, {'tenure_dtl', type text}, {'aip_yr', Int64.Type}, {'Program', type text}, {'mgp_psptHH_cnt', Int64.Type}, {'mgp_psptClnt_cnt', Int64.Type}, {'tot_newClient', Int64.Type}, {'cyr_Goal', Int64.Type}, {'sts', type text}, {'actvFP', Int64.Type}, {'any_newclnt', Int64.Type}, {'any_newclntgoal', Int64.Type}, {'mgpGoals_asOfDt', type date}, {'wk_tot_newClient', Int64.Type}, {'wk_tot_goalConv', Int64.Type}})in    #'Changed Type'"}]},{"name":"Grid Revenue Snowflake","isHidden":false,"storageMode":"Import","columns":[{"name":"Calendar Day Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Report Year Text","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Month Text","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Week Text","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Day Text","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Year Number","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Year Week Number","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Employee Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Rollup Agent Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Compensation Employee Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Compensation Reporting Roll Up Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Compensation Level 5 Product Line Of Business Subgroup Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Reporting Roll Up Product Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Reporting Roll Up Event Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Compensation Level 2 Product Character Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CMPAGT_EQ_ROLLUP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"New Sales Credit Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Gross Dealer Concessions Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Grid Credit Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Zone (Realigned)","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Product Category","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"YTD Grid Revenue","expression":"  var _gridtotal = calculate(sum(\u0027Grid Revenue Snowflake\u0027[Grid Credit Amount]),DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT')ReturnIF(ISBLANK(_gridtotal),0,_gridtotal)","isHidden":false},{"name":"YTD LH Grid Revenue","expression":"  var _gridtotal = calculate(sum(\u0027Grid Revenue Snowflake\u0027[Grid Credit Amount]),DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT',\u0027Grid Revenue Snowflake\u0027[Product Category]='Life \u0026 Health', \u0027Grid Revenue Snowflake\u0027[Reporting Roll Up Event Description]='First Year')ReturnIF(ISBLANK(_gridtotal),0,_gridtotal)","isHidden":false}],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'select b.''Calendar Day Date'',#(lf)b.''Distribution Performance Report Year Text'',#(lf)b.''Distribution Performance Reporting Month Text'',#(lf)b.''Distribution Performance Reporting Week Text'',#(lf)b.''Distribution Performance Reporting Day Text'',#(lf)b.''Distribution Performance Reporting Year Number'',#(lf)b.''Distribution Performance Reporting Year Week Number'',#(lf)a.''Zone (Realigned)'',#(lf)a.''Employee Identifier'',#(lf)a.''Rollup Agent Identifier'',#(lf)a.''Employee Identifier'' as ''Compensation Employee Identifier'',#(lf)a.''Compensation Reporting Roll Up Name'',#(lf)a.''Compensation Level 5 Product Line Of Business Subgroup Code'',#(lf)a.''Reporting Roll Up Product Description'',#(lf)a.''Reporting Roll Up Event Description'',#(lf)a.''Compensation Level 2 Product Character Code'',#(lf)case when a.''Employee Identifier'' = a.''Rollup Agent Identifier'' then \u0027Y\u0027#(lf)else \u0027N\u0027#(lf)end as CMPAGT_EQ_ROLLUP,#(lf)sum(a.''New Sales Credit Amount'') as ''New Sales Credit Amount'',#(lf)sum(a.''Gross Dealer Concessions Amount'') as ''Gross Dealer Concessions Amount'',#(lf)sum(a.''Grid Credit Amount'') as ''Grid Credit Amount''#(lf)from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Compensation and Sales Metrics Fact'' as a left join#(lf)''ENTERPRISE_EDW''.''PRESENTATION_01''.''Distribution Performance Dates Dimension'' as b#(lf)on a.''Distribution Performance Dates Surrogate Key''=b.''Date Surrogate Key'' left join#(lf)''ENTERPRISE_EDW''.''PRESENTATION_01''.''Conformed Contract Dimension Detail'' as c#(lf)on (a.''Contract Surrogate Key''=c.''Contract Surrogate Key''),#(lf)''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' as aa      #(lf)where a.''Employee Identifier''= aa.''Employee Identifier'' #(lf)and b.''Distribution Performance Reporting Year Number'' in (\u00272023\u0027,\u00272024\u0027)#(lf)and ((a.''New Sales Credit Amount'' \u003c 0.00 or a.''New Sales Credit Amount'' \u003e 0.00) or#(lf)(a.''Gross Dealer Concessions Amount'' \u003c 0.00 or a.''Gross Dealer Concessions Amount'' \u003e 0.00) or#(lf)(a.''Grid Credit Amount'' is not NULL))#(lf)and substring(a.''Employee Identifier'',1,2) = \u0027TS\u0027#(lf)and c.''Current Row Indicator'' =\u0027Y\u0027#(lf)and aa.''Current Row Indicator'' = \u0027Y\u0027#(lf)   and (  aa.''Organization Department Code'' \u003c\u003e \u00270383\u0027   #(lf)      or (a.''Reporting Roll Up Event Code'' \u003c\u003e\u0027REN\u0027#(lf)     and  (a.''Reporting Roll Up Event Code'' \u003c\u003e \u0027AB\u0027 or  ''Compensation Level 2 Product Character Code'' not in (\u0027RISK\u0027, \u0027ANN\u0027))#(lf)     and  a.''Financial Professional Revenue Hierarchy Level 2 Code'' \u003c\u003e (\u0027AB_MF_12B1\u0027)))#(lf)and a.''Source System Code Description'' in (\u0027Life and Annuity Trails Fact\u0027,\u0027Sales Metric Transaction\u0027,\u0027Sales Metric Adjustment\u0027)#(lf)#(lf)group by b.''Calendar Day Date'', b.''Distribution Performance Report Year Text'', b.''Distribution Performance Reporting Year Number'',#(lf)b.''Distribution Performance Reporting Year Week Number'', a.''Zone (Realigned)'', a.''Employee Identifier'', a.''Rollup Agent Identifier'',#(lf)b.''Distribution Performance Reporting Month Text'',#(lf)b.''Distribution Performance Reporting Week Text'',#(lf)b.''Distribution Performance Reporting Day Text'',#(lf)a.''Compensation Reporting Roll Up Name'',#(lf)a.''Compensation Level 5 Product Line Of Business Subgroup Code'',#(lf)a.''Reporting Roll Up Product Description'',#(lf)a.''Reporting Roll Up Event Description'',#(lf)a.''Compensation Level 2 Product Character Code''#(lf)UNION#(lf)select b.''Calendar Day Date'',#(lf)b.''Distribution Performance Report Year Text'',#(lf)b.''Distribution Performance Reporting Month Text'',#(lf)b.''Distribution Performance Reporting Week Text'',#(lf)b.''Distribution Performance Reporting Day Text'',#(lf)b.''Distribution Performance Reporting Year Number'',#(lf)b.''Distribution Performance Reporting Year Week Number'',#(lf)a.''Rollup Agent Identifier'' as ''Employee Identifier'',#(lf)a.''Rollup Agent Identifier'',#(lf)a.''Zone (Realigned)'',#(lf)a.''Employee Identifier'' as ''Compensation Employee Identifier'',#(lf)a.''Compensation Reporting Roll Up Name'',#(lf)a.''Compensation Level 5 Product Line Of Business Subgroup Code'',#(lf)a.''Reporting Roll Up Product Description'',#(lf)a.''Reporting Roll Up Event Description'',#(lf)a.''Compensation Level 2 Product Character Code'',#(lf)case when a.''Employee Identifier'' = a.''Rollup Agent Identifier'' then \u0027Y\u0027#(lf)else \u0027N\u0027#(lf)end as CMPAGT_EQ_ROLLUP,#(lf)sum(a.''New Sales Credit Amount'') as ''New Sales Credit Amount'',#(lf)sum(a.''Gross Dealer Concessions Amount'') as ''Gross Dealer Concessions Amount'',#(lf)sum(a.''Grid Credit Amount'') as ''Grid Credit Amount''#(lf)from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Compensation and Sales Metrics Fact'' as a left join#(lf)''ENTERPRISE_EDW''.''PRESENTATION_01''.''Distribution Performance Dates Dimension'' as b#(lf)on a.''Distribution Performance Dates Surrogate Key''=b.''Date Surrogate Key'' left join#(lf)''ENTERPRISE_EDW''.''PRESENTATION_01''.''Conformed Contract Dimension Detail'' as c#(lf)on (a.''Contract Surrogate Key''=c.''Contract Surrogate Key''),#(lf)''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' as aa     #(lf)    #(lf)where a.''Rollup Agent Identifier'' = aa.''Employee Identifier''#(lf)and b.''Distribution Performance Reporting Year Number'' in (\u00272023\u0027,\u00272024\u0027)#(lf)and a.''Employee Identifier'' \u003c\u003e a.''Rollup Agent Identifier''#(lf)and ((a.''New Sales Credit Amount'' \u003c 0.00 or a.''New Sales Credit Amount'' \u003e 0.00) or#(lf)(a.''Gross Dealer Concessions Amount'' \u003c 0.00 or a.''Gross Dealer Concessions Amount'' \u003e 0.00) or#(lf)(a.''Grid Credit Amount'' is not NULL))#(lf)and substring(a.''Employee Identifier'',1,2) = \u0027TS\u0027#(lf)and c.''Current Row Indicator'' =\u0027Y\u0027#(lf)and aa.''Current Row Indicator'' = \u0027Y\u0027 #(lf)   and (  aa.''Organization Department Code'' \u003c\u003e \u00270383\u0027   #(lf)      or (a.''Reporting Roll Up Event Code'' \u003c\u003e\u0027REN\u0027#(lf)     and  (a.''Reporting Roll Up Event Code'' \u003c\u003e \u0027AB\u0027 or  ''Compensation Level 2 Product Character Code'' not in (\u0027RISK\u0027, \u0027ANN\u0027))#(lf)     and  a.''Financial Professional Revenue Hierarchy Level 2 Code'' \u003c\u003e (\u0027AB_MF_12B1\u0027)))#(lf)and a.''Source System Code Description'' in (\u0027Life and Annuity Trails Fact\u0027,\u0027Sales Metric Transaction\u0027,\u0027Sales Metric Adjustment\u0027)#(lf)#(lf)group by b.''Calendar Day Date'', b.''Distribution Performance Report Year Text'', b.''Distribution Performance Reporting Year Number'',#(lf)b.''Distribution Performance Reporting Year Week Number'', a.''Zone (Realigned)'', a.''Employee Identifier'', a.''Rollup Agent Identifier'',#(lf)a.''Compensation Reporting Roll Up Name'', a.''Compensation Level 5 Product Line Of Business Subgroup Code'',#(lf)a.''Reporting Roll Up Product Description'',#(lf)a.''Reporting Roll Up Event Description'',#(lf)a.''Compensation Level 2 Product Character Code'',#(lf)b.''Distribution Performance Reporting Month Text'',#(lf)b.''Distribution Performance Reporting Week Text'',#(lf)b.''Distribution Performance Reporting Day Text''', null, [EnableFolding=true]),    #'Added Conditional Column' = Table.AddColumn(Source, 'Product Category', each if [Compensation Level 2 Product Character Code] = 'RISK' then 'Life \u0026 Health' else if [Compensation Level 2 Product Character Code] = 'ANN' then 'Annuity' else if [Compensation Level 2 Product Character Code] = 'BANK' then 'Investments' else if [Compensation Level 2 Product Character Code] = 'INVEST' then 'Investments' else null)in    #'Added Conditional Column'"}]},{"name":"SALES_HIER","isHidden":false,"storageMode":"Import","columns":[{"name":"SALE_HIER_DIM_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EMP_DIM_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SALE_HIER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Advisor Group","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ZONE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MARKET","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MARKET_LEADERS","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP Leader","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RPT_TO_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Report to Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Adjusted Service Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TENURE","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TENURE_GROUP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SFC_FC","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FR_SEGMENT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CREDENTIALSXX","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LICENSESXX","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"GNDR_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LST_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FRST_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MDDL_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ASSIGNED_AFA","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"OP_COUNT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Conference Qualification Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team Purpose Code","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'select distinct b.''Sales Hierarchy Dimension Surrogate Key'' as SALE_HIER_DIM_SK,#(lf)       a.''Workforce Dimension Detail Surrogate Key'' as EMP_DIM_SK,#(lf)       a.''Employee Identifier'' as EMP_ID,#(lf)       b.''Sales Hierarchy Identifier'' as SALE_HIER_ID,#(lf)       a.''Employee Name'' as EMP_NM,#(lf)       aa.''Job Type Code'' as JOB_TYP_CDE,#(lf)       aa.''Job Type Description'' as JOB_TYP_DSCR,#(lf)       case when a.''Organization Department Code'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027) then \u00270383\u0027#(lf)         else a.''Organization Department Code''#(lf)       end as TAG,#(lf)       case when aa.''Department Identifier'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027) then \u0027Virtual Advice\u0027#(lf)         else aa.''Department Name''#(lf)       end as ''TAG Name'',#(lf)       case when aa.''Department Identifier'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027) then \u00270383-Virtual Advice\u0027#(lf)         else a.''Organization Department Code''||\u0027-\u0027||aa.''Department Name''#(lf)       end as ''Advisor Group'',#(lf)       (substr(b.''Organization Zone Code'',6,2))   AS ZONE,#(lf)       b.''Organization Zone Code'' as Market,#(lf)       zz4.market_leaders,#(lf)       c.''Sub Department Identifier'' as MVP_ID,#(lf)       zz3.''MVP Leader'', #(lf)       c.''Report to ID'' as RPT_TO_ID,#(lf)       cc.''First Name''||\u0027 \u0027||cc.''Last Name'' as ''Report to Name'',#(lf)       a.''Adjusted Service Date'',#(lf)       c.''Financial Professional Tenure'' as Tenure,#(lf)       c.''Financial Professional Tenure Group'' as Tenure_Group,#(lf)       case when a.''Senior Financial Consultant Indicator'' = \u0027Y\u0027 then \u0027SFC\u0027#(lf)                      when a.''Financial Consultant Indicator'' = \u0027Y\u0027 then \u0027FC\u0027#(lf)                      when a.''Wealth Advisor Indicator'' = \u0027Y\u0027 then \u0027WA\u0027#(lf)                 end as SFC_FC,#(lf)       (case when a.''Senior Financial Consultant Indicator'' = \u0027Y\u0027 then \u0027SFC\u0027#(lf)             when a.''Financial Consultant Indicator'' = \u0027Y\u0027 then \u0027FC\u0027#(lf)             when a.''Wealth Advisor Indicator'' = \u0027Y\u0027 then \u0027WA\u0027#(lf)             when a.''Job Type Code'' in (\u0027002003\u0027,\u0027002018\u0027,\u0027002019\u0027) then A.''Job Type Description''#(lf)             when a.''Job Type Code'' = \u0027002016\u0027 then a.''Job Type Description''#(lf)             when ((a.''Senior Financial Consultant Indicator'' = \u0027N\u0027 or a.''Financial Consultant Indicator'' = \u0027N\u0027) and #(lf)                    c.''Financial Professional Tenure'' \u003e= 4 and #(lf)                    a.''Job Type Code'' in (\u0027002000\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027003602\u0027,\u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027))#(lf)                      then \u0027VETFR\u0027#(lf)             when c.''Financial Professional Tenure'' \u003e= 3 and c.''Financial Professional Tenure'' \u003c 4  and   #(lf)                  a.''Job Type Code'' in (\u0027002000\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027003602\u0027,\u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027)#(lf)                      then \u0027NFR4\u0027#(lf)             when c.''Financial Professional Tenure'' \u003e= 2 and c.''Financial Professional Tenure'' \u003c 3  and   #(lf)                  a.''Job Type Code'' in (\u0027002000\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027003602\u0027,\u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027)#(lf)                      then \u0027NFR3\u0027#(lf)             when c.''Financial Professional Tenure'' \u003e= 1 and c.''Financial Professional Tenure'' \u003c 2  and   #(lf)                  a.''Job Type Code'' in (\u0027002000\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027003602\u0027,\u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027)#(lf)                      then \u0027NFR2\u0027 #(lf)             when c.''Financial Professional Tenure'' \u003e= 0 and c.''Financial Professional Tenure'' \u003c 1  and   #(lf)                  a.''Job Type Code'' in (\u0027002000\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027003602\u0027,\u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027)#(lf)                      then \u0027NFR1\u0027 #(lf)        end) as FR_SEGMENT,#(lf)        trim(concat_ws(\u0027 \u0027,dd.CHFC_DSGT_CDE,dd.CLF_DSGT_CDE,dd.CLU_DSGT_CDE,dd.CFA_DSGT_CDE,dd.CFP_DSGT_CDE,dd.FIC_DSGT_CDE,dd.FICF_DSGT_CDE,dd.LUTCF_DSGT_CDE)) AS Credentialsxx,#(lf)        concat_ws(\u0027 \u0027,dd.S1_LIC_STS_CDE,dd.S4_LIC_STS_CDE,dd.S6_LIC_STS_CDE,dd.S7_LIC_STS_CDE,dd.S9_LIC_STS_CDE,#(lf)        dd.S10_LIC_STS_CDE,dd.S22_LIC_STS_CDE,dd.S24_LIC_STS_CDE,dd.S26_LIC_STS_CDE,dd.S27_LIC_STS_CDE,#(lf)        dd.S51_LIC_STS_CDE,dd.S53_LIC_STS_CDE,dd.S62_LIC_STS_CDE,dd.S63_LIC_STS_CDE,dd.S65_LIC_STS_CDE,#(lf)        dd.S66_LIC_STS_CDE,dd.S86_LIC_STS_CDE,dd.S87_LIC_STS_CDE) as Licensesxx,  #(lf)          #(lf)       a.''Gender Code'' as GNDR_CDE, #(lf)       a.''Last Name'' as LST_NM, #(lf)       case when a.''Nick Name'' IN (\u0027 \u0027) then a.''First Name''#(lf)         else a.''Nick Name''#(lf)       end as FRST_NM, #(lf)       a.''Middle Name'' as MDDL_NM,#(lf)       xx.assigned_afa,#(lf)       case when zz.opcount is NULL then 0 #(lf)         else zz.opcount#(lf)       end as OP_Count,#(lf)       aa.''Conference Qualification Type Code'',#(lf)       zzz.''Team Identifier'',#(lf)       zzz.''Team Name'',#(lf)       zzz.''Team Purpose Code''#(lf)       #(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' a inner join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' as aa#(lf)    on (a.''Employee Identifier''=aa.''Source System Key Text'' and aa.''Current Row Indicator'' = \u0027Y\u0027)  left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' b #(lf)    on (a.''Employee Identifier''= b.''Sales Hierarchy Identifier'') left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' c #(lf)    on (a.''Employee Identifier''= c.''Source System Key Text'' AND c.''Current Row Indicator'' = \u0027Y\u0027) left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' cc #(lf)    on (c.''Report to ID''= cc.''Source System Key Text'' AND cc.''Current Row Indicator'' = \u0027Y\u0027) left join  #(lf)        (select d.''Employee Identifier'',#(lf)                (case when \u0027Y\u0027 = d.''Chartered Financial Consultant Designation Code'' THEN \u0027ChFC\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS CHFC_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Chartered Leadership Fellow Designation Code'' THEN \u0027CLF\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS CLF_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Chartered Life Underwriter Designation Code'' THEN \u0027CLU\u0027#(lf)                   else \u0027 \u0027 #(lf)                 end) AS CLU_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Chartered Financial Analyst Designation Code'' THEN \u0027CFA\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS CFA_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Fraternal Insurance Counselor Designation Code'' THEN \u0027FIC\u0027#(lf)                   else \u0027 \u0027 #(lf)                 end) AS FIC_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Fraternal Insurance Counselor Fellow Designation Code'' THEN \u0027FICF\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS FICF_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Certified Financial Planner Designation Code'' THEN \u0027CFP\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS CFP_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Life Underwriter Training Counsel Fellow Designation Code'' THEN \u0027LUTCF\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS LUTCF_DSGT_CDE,#(lf)                (case when \u0027Y\u0027 = d.''Series One License Status Code'' THEN \u00271\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S1_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Four License Status Code'' THEN \u00274\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S4_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Six License Status Code'' THEN \u00276\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S6_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Seven License Status Code'' THEN \u00277\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S7_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Nine License Status Code'' THEN \u00279\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S9_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Ten License Status Code'' THEN \u002710\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S10_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Twenty-two License Status Code'' THEN \u002722\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S22_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Twenty-four License Status Code'' THEN \u002724\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S24_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Twenty-six License Status Code'' THEN \u002726\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S26_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Twenty-seven License Status Code'' THEN \u002727\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S27_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Fifty-one License Status Code'' THEN \u002751\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S51_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Fifty-three License Status Code'' THEN \u002753\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S53_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Sixty-two License Status Code'' THEN \u002762\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S62_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Sixty-three License Status Code'' THEN \u002763\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S63_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Sixty-five License Status Code'' THEN \u002765\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S65_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Sixty-six License Status Code'' THEN \u002766\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S66_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Eighty-six License Status Code'' THEN \u002786\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S86_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Eighty-seven License Status Code'' THEN \u002787\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S87_LIC_STS_CDE#(lf)              #(lf)           from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' d#(lf)          where d.''Termination Date'' is null   #(lf)            and d.''Current Row Indicator'' = \u0027Y\u0027#(lf)            and d.''Employee Status Type Code'' in (\u0027A\u0027,\u0027L\u0027,\u0027I\u0027)) as dd#(lf)    on A.''Employee Identifier'' = dd.''Employee Identifier''  left join#(lf)           #(lf)        (select distinct aa.''Source System Key Text'',#(lf)                          (case when e.emp_count = 1 then f.emp_nm#(lf)                      when e.emp_count \u003e 1 then \u0027Multiple Associates\u0027#(lf)                   else \u0027None\u0027#(lf)                 end) as assigned_afa#(lf)           from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' as aa left join  #(lf)              (select e.''Report to ID'', #(lf)                      count(e.''Organization Dimension Surrogate Key'') as emp_count   #(lf)                 from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' e  #(lf)                where e.''Job Type Code'' in (\u0027002000\u0027,\u0027002010\u0027,\u0027002003\u0027,\u0027002011\u0027,\u0027002012\u0027,\u0027003100\u0027,#(lf)                                            \u0027002017\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027002018\u0027,\u0027002019\u0027,\u0027003500\u0027,#(lf)                                            \u0027002022\u0027,\u0027002024\u0027,\u0027002025\u0027,\u0027002026\u0027,\u0027002027\u0027,\u0027002030\u0027,#(lf)                                            \u0027002031\u0027,\u0027002032\u0027)#(lf)                  and e.''Employee Status Type Code'' = \u0027A\u0027 #(lf)                  and e.''Current Row Indicator'' = \u0027Y\u0027#(lf)                  and e.''Report to ID'' \u003c\u003e \u0027'' ''\u0027 #(lf)                  and e.''Effective End Date'' = \u00279999-12-31\u0027 #(lf)               group by ''Report to ID'') as e #(lf)             on aa.''Source System Key Text'' = e.''Report to ID'' left join#(lf)         #(lf)              (select f.''Organization Dimension Surrogate Key'',#(lf)                      f.''Last Name''||\u0027, \u0027||f.''First Name'' as EMP_NM, #(lf)                      f.''Report to ID''  #(lf)                 from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' f#(lf)                where (f.''Job Type Code'' in (\u0027002000\u0027,\u0027002010\u0027,\u0027002003\u0027,\u0027002011\u0027,\u0027002012\u0027,\u0027003100\u0027,#(lf)                                             \u0027002017\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027002018\u0027,\u0027002019\u0027,\u0027003500\u0027,#(lf)                                             \u0027002022\u0027,\u0027002024\u0027,\u0027002025\u0027,\u0027002026\u0027,\u0027002027\u0027,\u0027002030\u0027,#(lf)                                             \u0027002031\u0027,\u0027002032\u0027) or #(lf)                      f.''Department Identifier'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027)) #(lf)                  and f.''Department Identifier'' not in (\u00272410\u0027,\u00273005\u0027,\u00277151\u0027,\u00277152\u0027,\u00279150\u0027,\u00279134\u0027,#(lf)                                                        \u0027NA\u0027,\u00274100\u0027,\u00276053\u0027,\u00276100\u0027,\u00278900\u0027) #(lf)                  and f.''Employee Status Type Code'' = \u0027A\u0027 #(lf)                  and f.''Current Row Indicator'' = \u0027Y\u0027#(lf)                  and f.''Report to ID'' \u003c\u003e \u0027'' ''\u0027 #(lf)                  and f.''Effective End Date'' = \u00279999-12-31\u0027) as f  #(lf)              on e.''Report to ID''=f.''Report to ID''#(lf)          where (aa.''Job Type Code'' in (\u0027002000\u0027,\u0027002010\u0027,\u0027002003\u0027,\u0027002011\u0027,\u0027002012\u0027,\u0027003100\u0027,#(lf)                                        \u0027002017\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027002018\u0027,\u0027002019\u0027,\u0027003500\u0027,#(lf)                                        \u0027002022\u0027,\u0027002024\u0027,\u0027002025\u0027,\u0027002026\u0027,\u0027002027\u0027,\u0027002030\u0027,#(lf)                                        \u0027002031\u0027,\u0027002032\u0027) or #(lf)                aa.''Department Identifier'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027)) #(lf)            and aa.''Department Identifier'' not in (\u00272410\u0027,\u00273005\u0027,\u00277151\u0027,\u00277152\u0027,\u00279150\u0027,\u00279134\u0027,#(lf)                                                   \u0027NA\u0027,\u00274100\u0027,\u00276053\u0027,\u00276100\u0027,\u00278900\u0027) #(lf)            and aa.''Current Row Indicator'' = \u0027Y\u0027#(lf)            and aa.''Employee Status Type Code'' = \u0027A\u0027 #(lf)            and aa.''Report to ID'' \u003c\u003e \u0027'' ''\u0027 #(lf)            and aa.''Effective End Date'' = \u00279999-12-31\u0027) as xx#(lf)#(lf)    on a.''Employee Identifier''=xx.''Source System Key Text'' left join #(lf)      (select count(z.''Organization Dimension Surrogate Key'') as OPCOUNT,   #(lf)                    z.''Report to ID'' #(lf)         from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' z  #(lf)        where z.''Current Row Indicator'' = \u0027Y\u0027#(lf)          and z.''Field Professional Roles'' in (\u0027Unlicensed Office Professionals\u0027,\u0027Licensed Office Professionals\u0027)#(lf)          and z.''Employee Status Type Code'' in (\u0027A\u0027,\u0027I\u0027,\u0027L\u0027)#(lf)       group by ''Report to ID'') as zz#(lf)         #(lf)    on a.''Employee Identifier'' = zz.''Report to ID''   left join#(lf)#(lf)(select a.''Employee Identifier'',#(lf)        b.''Team Identifier'',#(lf)        b.''Team Name'',#(lf)        b.''Team Purpose Code'',#(lf)        A.''Effective Date''#(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Employee Team Organization Relationship Current Dimension''  a inner join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Team Organization Current Dimension'' b#(lf)    on (a.''Team Identifier Surrogate Key'' = b.''Team Identifier Surrogate Key'')  inner join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' c#(lf)    on (a.''Employee Identifier'' = c.''Employee Identifier'')   #(lf)    #(lf) where b.''Effective Status Code'' = \u0027A\u0027#(lf)   and c.''Employee Status Type Code'' = \u0027A\u0027#(lf)   and c.''Current Row Indicator'' = \u0027Y\u0027#(lf)   and a.''Team Member Action Code'' \u003c\u003e \u0027DROP\u0027#(lf)--   and b.''Team Purpose Code'' NOT in (\u0027COAC\u0027,\u0027ENSB\u0027) #(lf)   and b.''Team Purpose Code'' NOT in (\u0027COAC\u0027,\u0027ENSB\u0027) #(lf)   and a.''Effective Date'' = (SELECT MAX(aa.''Effective Date'')#(lf)                                FROM ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Employee Team Organization Relationship Current Dimension''  aa inner join#(lf)                                     ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Team Organization Current Dimension'' bb#(lf)                                  on (aa.''Team Identifier Surrogate Key'' = bb.''Team Identifier Surrogate Key'' and a.''Employee Identifier''= aa.''Employee Identifier'') INNER JOIN#(lf)                                     ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' cc#(lf)                                  on (aa.''Employee Identifier''= cc.''Employee Identifier'')#(lf)                                         WHERE bb.''Effective Status Code'' = \u0027A\u0027#(lf)                                 AND cc.''Employee Status Type Code'' = \u0027A\u0027  #(lf)                                 and cc.''Current Row Indicator'' = \u0027Y\u0027#(lf)                                 and aa.''Team Member Action Code'' \u003c\u003e \u0027DROP\u0027#(lf)                                -- and bb.''Team Purpose Code'' NOT in (\u0027COAC\u0027,\u0027ENSB\u0027) #(lf)                                 and bb.''Team Purpose Code'' NOT in (\u0027COAC\u0027,\u0027ENSB\u0027) #(lf)                                -- and bb.''Team Purpose Code'' in (\u0027ASSC\u0027)#(lf)                            )#(lf)  order by a.''Employee Identifier'') as zzz#(lf)  #(lf)   on a.''Employee Identifier'' = zzz.''Employee Identifier'' left join#(lf)#(lf)#(lf)       (select distinct a2.''Organization Department Code'' as RFO_CDE,#(lf)                        a2.''Organization Sub Department Code'' as MVP_ID,#(lf)                        cc.''Organization Department Description'',#(lf)                        case when cc.''Employee Name'' is null then \u0027Vacant\u0027#(lf)                          else cc.''Employee Name''#(lf)                        end as ''MVP Leader''    #(lf)          from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' a2  left join#(lf)               (Select Distinct aa.''Organization Sub Department Code'',#(lf)                                aa.''Organization Department Description'',#(lf)                                bb.''Employee Identifier'',#(lf)                                bb.''Employee Name'' #(lf)                  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' as aa left join#(lf)                       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' as bb#(lf)                    on aa.''Sales Hierarchy Identifier''=bb.''Employee Identifier''  #(lf)                 where aa.''Current Row Indicator'' = \u0027Y\u0027#(lf)                   and bb.''Employee Status Type Code'' = \u0027A\u0027#(lf)                   and bb.''Current Row Indicator'' = \u0027Y\u0027#(lf)                   and aa.''Effective End Date'' = \u00279999-12-31\u0027#(lf)                   and bb.''Job Type Code'' = \u0027001001\u0027#(lf)                 order by aa.''Organization Sub Department Code'') cc#(lf)             on a2.''Organization Sub Department Code''=cc.''Organization Sub Department Code''  #(lf)          where a2.''Current Row Indicator'' = \u0027Y\u0027#(lf)            and a2.''Effective End Date'' = \u00279999-12-31\u0027#(lf)            and a2.''Organization Zone Code'' \u003c\u003e \u0027UKWN\u0027#(lf)           order by a2.''Organization Sub Department Code''  ) as zz3#(lf)  on c.''Sub Department Identifier''= zz3.''MVP_ID'' left join#(lf)   #(lf)    #(lf)     (SELECT DISTINCT a4.''Organization Department Code'' as RFO_CDE,#(lf)                      a4.''Organization Zone Code'' as TAG_ZONE_NM, #(lf)                      (substring(a4.''Organization Zone Code'',6,5)) as Market_ID,#(lf)                      case when t4.''Employee Name'' is null then \u0027Vacant\u0027#(lf)                        else t4.''Employee Name''#(lf)                      end as Market_Leaders#(lf)#(lf)        from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' a4 left join #(lf)             (select distinct aa4.''Organization Zone Code'',#(lf)                              bb4.''Employee Name''  #(lf)#(lf)                from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' aa4 left join #(lf)                     ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' bb4#(lf)                  on aa4.''Sales Hierarchy Identifier''=bb4.''Employee Identifier''#(lf)               where aa4.''Current Row Indicator'' = \u0027Y\u0027      #(lf)                 and bb4.''Employee Status Type Code'' in (\u0027A\u0027)#(lf)                 and aa4.''Effective End Date'' = \u00279999-12-31\u0027#(lf)                 and bb4.''Current Row Indicator'' = \u0027Y\u0027#(lf)                 and aa4.''Effective End Date'' = \u00279999-12-31\u0027#(lf)                 and bb4.''Job Type Code'' in (\u0027001002\u0027,\u0027001003\u0027,\u0027001007\u0027,\u0027003500\u0027)#(lf)                 and bb4.''Employee Identifier'' not in (\u0027TS62904\u0027,\u0027TS67022\u0027)) t4 #(lf)          on a4.''Organization Zone Code'' = t4.''Organization Zone Code''#(lf)       where a4.''Current Row Indicator'' = \u0027Y\u0027#(lf)         and a4.''Effective End Date'' = \u00279999-12-31\u0027#(lf)         and substring(a4.''Organization Zone Code'',6,2) \u003c\u003e \u002700\u0027#(lf)         and a4.''Organization Department Code'' \u003c\u003e \u0027UKWN\u0027#(lf)       order by a4.''Organization Zone Code'') zz4#(lf)     #(lf)   on  b.''Organization Zone Code''= zz4.''TAG_ZONE_NM'' #(lf)  #(lf)  #(lf) where a.''Employee Status Type Code'' IN (\u0027A\u0027,\u0027I\u0027,\u0027L\u0027)#(lf)   and (c.''Job Family Code'' LIKE \u0027FLD%\u0027 OR#(lf)        c.''Job Family Code'' =\u0027SALES\u0027 OR#(lf)        c.''TF Job Class Code'' =\u0027FAC\u0027)#(lf)   and a.''Termination Date'' is NULL #(lf)   and (a.''Job Type Code'' in (\u0027002003\u0027,\u0027002010\u0027,\u0027002011\u0027,\u0027002012\u0027,\u0027002016\u0027,\u0027002017\u0027,#(lf)                              \u0027002000\u0027,\u0027002022\u0027,\u0027002024\u0027,\u0027002025\u0027,\u0027002026\u0027,\u0027002027\u0027,#(lf)                              \u0027002030\u0027,\u0027002031\u0027,\u0027002032\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027003602\u0027,#(lf)                              \u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027) or #(lf)       a.''Organization Department Code'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027)) #(lf)   and c.''Department Identifier'' not in (\u00272410\u0027,\u00273005\u0027,\u00277151\u0027,\u00277152\u0027,\u00279150\u0027,\u00279134\u0027,#(lf)                                         \u0027NA\u0027,\u00274100\u0027,\u00276053\u0027,\u00276100\u0027,\u00278900\u0027) #(lf)   and b.''Effective End Date'' = \u00279999-12-31\u0027 #(lf)   and b.''Current Row Indicator'' = \u0027Y\u0027 #(lf)   and a.''Current Row Indicator'' = \u0027Y\u0027 #(lf)   --and a.''Employee Identifier'' = \u0027TS77676\u0027#(lf)order by a.''Employee Identifier''', null, [EnableFolding=true]),    #'Removed Duplicates' = Table.Distinct(Source, {'EMP_ID'})in    #'Removed Duplicates'"}]},{"name":"New Clients","isHidden":false,"storageMode":"Import","columns":[{"name":"DT_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CTRC_VRSN_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"WRTG_AGT_VRSN_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"FIN_CUST_PNT_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CUST_AGE","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"AGE_CLAS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"AGE_CLAS_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FIN_CUST_PNT_VLU","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CUST_LGAL_FMT_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CUST_BRTH_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"MBR_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MBR_TYP_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RSDL_ST_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CTRC_ISS_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"L5_PLOB_SGRP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"L5_PLOB_SGRP_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"L4_PLOB_GRP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"L4_PLOB_GRP_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"L3_PROD_LOB_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"L3_PROD_LOB_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"L2_PROD_CHAR_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"L2_PROD_CHAR_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PARY_DSPL_2_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FRST_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MDDL_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LST_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ADJ_SVC_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_STS_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_STS_TYP_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CURR_ROW_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CAL_DAY_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"CAL_MTH_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CAL_MTH_STRT_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"CAL_MTH_END_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"CAL_YR_QTR_NBR","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CAL_QTR_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CAL_WK_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FIN_CUST_PNT_RSN_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FIN_CUST_PNT_RSN_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CTRC_RLTN_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CTRC_RLTN_TYP_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MEMBER_AGE_GROUP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MEMBER_AGE","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_END_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_WK_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_DAY_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_MTH_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_QTR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SALE_HIER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EFF_BEG_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"EFF_END_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"CURR_ROW_IND2","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PRTR_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MANP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_ZONE_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_ZONE_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_DEPT_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_DEPT_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_DIV_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_DIV_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_SUB_DEPT_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SALE_HIER_DIM_SK","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"FP Tenure - NFP, Vet","dataType":"String","isHidden":false,"expression":"if(not(\u0027New Clients\u0027[JOB_TYP_CDE] in {'002000', '002010', '002022', '002024', '002025', '002026', '002027', '003100', '003500'}), 'Vet',if(((\u0027New Clients\u0027[CAL_DAY_DT] - \u0027New Clients\u0027[ADJ_SVC_DT]) / 365.25) \u003c 4, 'NFP', 'Vet')) ","columnType":"Calculated"}],"measures":[{"name":"Prior Year NC","expression":"CALCULATE( sum(\u0027New Clients\u0027[FIN_CUST_PNT_VLU]), DTRB_PERF_DATES[Prior Year Flag] in {TRUE})","isHidden":false},{"name":"Prior Year 2 NC","expression":"CALCULATE( sum(\u0027New Clients\u0027[FIN_CUST_PNT_VLU]), DTRB_PERF_DATES[Prior Year 2 Flag] in {TRUE})","isHidden":false},{"name":"PYTD NC","expression":"var prev2weeknum = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[CAL_DAY_DT],max(DTRB_PERF_DATES[Two Sundays Ago]))ReturnCALCULATE(sum(\u0027New Clients\u0027[FIN_CUST_PNT_VLU]),DTRB_PERF_DATES[Prior Year Flag] in {TRUE},DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR]\u003c=prev2weeknum)","isHidden":false},{"name":"YTD_NC","expression":"calculate( sum(\u0027New Clients\u0027[FIN_CUST_PNT_VLU]),DTRB_PERF_DATES[YTD Flag two Sundays] in {TRUE})","isHidden":false},{"name":"YOY Change NC","expression":"(([YTD_NC] - [PYTD NC])/([PYTD NC]))","isHidden":false},{"name":"New Client 4 Wk Average","expression":"CALCULATE(divide(\u0027New Clients\u0027[YTD_NC],4),\u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag NC] in {TRUE},DTRB_PERF_DATES[Current Year Flag] in {TRUE})","isHidden":false},{"name":"4 Wk Gap New Clients","expression":"[Weekly Need New Clients]-\u0027New Clients\u0027[New Client 4 Wk Average]","isHidden":false}],"source":[{"expression":"let    Source = DB2.Database('podwh021:50000', 'podwh021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT IA_DATES_ITRL.DT_SK,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.CTRC_VRSN_NBR,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.WRTG_AGT_VRSN_NBR,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_STS_CDE,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.CUST_AGE,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.AGE_CLAS_CDE,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.AGE_CLAS_DSCR,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_VLU,#(lf)       CNF_CUSTOMER_DIM_CFDL.CUST_LGAL_FMT_NM, #(lf)       CNF_CUSTOMER_DIM_CFDL.CUST_BRTH_DT,#(lf)       CNF_CUSTOMER_DIM_CFDL.MBR_TYP_CDE,#(lf)       CNF_CUSTOMER_DIM_CFDL.MBR_TYP_DSCR,#(lf)       CNF_CUSTOMER_DIM_CFDL.RSDL_ST_CDE,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.CTRC_ISS_DT, #(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L5_PLOB_SGRP_CDE,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L5_PLOB_SGRP_DSCR,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L4_PLOB_GRP_CDE,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L4_PLOB_GRP_DSCR,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L3_PROD_LOB_CDE,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L3_PROD_LOB_DSCR,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L2_PROD_CHAR_CDE,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L2_PROD_CHAR_DSCR,#(lf)       AGT_DIM_CURR_CFDL.PARY_DSPL_2_NM,#(lf)       AGT_DIM_CURR_CFDL.FRST_NM,#(lf)       AGT_DIM_CURR_CFDL.MDDL_NM,#(lf)       AGT_DIM_CURR_CFDL.LST_NM,#(lf)       AGT_DIM_CURR_CFDL.ADJ_SVC_DT,#(lf)       AGT_DIM_CURR_CFDL.EMP_ID,#(lf)       AGT_DIM_CURR_CFDL.EMP_STS_TYP_CDE,#(lf)       AGT_DIM_CURR_CFDL.EMP_STS_TYP_DSCR,#(lf)       AGT_DIM_CURR_CFDL.JOB_TYP_CDE,#(lf)       AGT_DIM_CURR_CFDL.JOB_TYP_DSCR,#(lf)       AGT_DIM_CURR_CFDL.CURR_ROW_IND,#(lf)       IA_DATES_ITRL.CAL_DAY_DT,#(lf)       IA_DATES_ITRL.CAL_MTH_NM,#(lf)       IA_DATES_ITRL.CAL_MTH_STRT_DT,#(lf)       IA_DATES_ITRL.CAL_MTH_END_DT,#(lf)       IA_DATES_ITRL.CAL_YR_QTR_NBR,#(lf)       IA_DATES_ITRL.CAL_QTR_NM,#(lf)       IA_DATES_ITRL.CAL_WK_NM,#(lf)       FIN_CUST_ELIG_DIM_CFDL.FIN_CUST_PNT_RSN_CDE,#(lf)       FIN_CUST_ELIG_DIM_CFDL.FIN_CUST_PNT_RSN_DSCR,#(lf)       FIN_CUST_ELIG_DIM_CFDL.CTRC_RLTN_TYP_CDE,#(lf)       FIN_CUST_ELIG_DIM_CFDL.CTRC_RLTN_TYP_DSCR,#(lf)       CASE#(lf)          WHEN (CUST_AGE \u003e= 0) AND (CUST_AGE \u003c= 15) THEN \u00270-15\u0027#(lf)          WHEN (CUST_AGE \u003e= 16) AND (CUST_AGE \u003c= 25) THEN \u002716-25\u0027#(lf)          WHEN (CUST_AGE \u003e= 26) AND (CUST_AGE \u003c= 35) THEN \u002726-35\u0027#(lf)          WHEN (CUST_AGE \u003e= 36) AND (CUST_AGE \u003c= 45) THEN \u002736-45\u0027#(lf)          WHEN (CUST_AGE \u003e= 46) AND (CUST_AGE \u003c= 55) THEN \u002746-55\u0027#(lf)          WHEN (CUST_AGE \u003e= 56) AND (CUST_AGE \u003c= 65) THEN \u002756-65\u0027#(lf)          WHEN (CUST_AGE \u003e= 66) AND (CUST_AGE \u003c= 75) THEN \u002766-75\u0027#(lf)          WHEN CUST_AGE \u003e 75 THEN \u002776+\u0027#(lf)       END#(lf)          AS Member_Age_Group,#(lf)       integer (floor ( (CURRENT DATE - CUST_BRTH_DT) / 10000)) AS Member_Age,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_WK_END_DT,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_WK_NBR,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_YR_NBR,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_YR_WK_NBR,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_WK_TXT,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_YR_TXT,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_DAY_TXT,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_MTH_TXT,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_QTR_TXT,#(lf)       SALE_HIER_DIM.SALE_HIER_ID,#(lf)       SALE_HIER_DIM.EFF_BEG_TMSP,#(lf)       SALE_HIER_DIM.EFF_END_TMSP,#(lf)       SALE_HIER_DIM.CURR_ROW_IND,#(lf)       SALE_HIER_DIM.PRTR_NM,#(lf)       SALE_HIER_DIM.MANP_NM,#(lf)       SALE_HIER_DIM.ORZN_ZONE_CDE,#(lf)       SALE_HIER_DIM.ORZN_ZONE_DSCR,#(lf)       (LEFT(SALE_HIER_DIM.ORZN_ZONE_CDE,4)) as ORZN_DEPT_CDE,#(lf)       SALE_HIER_DIM.ORZN_DEPT_DSCR,#(lf)       SALE_HIER_DIM.ORZN_DIV_CDE,#(lf)       SALE_HIER_DIM.ORZN_DIV_DSCR,#(lf)       SALE_HIER_DIM.ORZN_SUB_DEPT_CDE,#(lf)       SALE_HIER_DIM.SALE_HIER_DIM_SK#(lf)#(lf)  FROM ((((((COMMON.IA_DATES_ITRL IA_DATES_ITRL#(lf)             INNER JOIN COMMON.DTRB_PERF_DATES DTRB_PERF_DATES#(lf)                ON (IA_DATES_ITRL.DT_SK = DTRB_PERF_DATES.DT_SK))#(lf)            LEFT OUTER JOIN#(lf)            SALES.TF_FIN_CUST_EVT_FCT_CFDL TF_FIN_CUST_EVT_FCT_CFDL#(lf)               ON (IA_DATES_ITRL.DT_SK =#(lf)                      TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_CRNG_DT_SK))#(lf)           RIGHT OUTER JOIN HUMAN_RESOURCES.SALE_HIER_DIM SALE_HIER_DIM#(lf)              ON (SALE_HIER_DIM.SALE_HIER_DIM_SK =#(lf)                     TF_FIN_CUST_EVT_FCT_CFDL.SLHR_DIM_CURR_CRNG_AGT_SK))#(lf)          LEFT OUTER JOIN MEMBER.CNF_CUSTOMER_DIM_CFDL CNF_CUSTOMER_DIM_CFDL#(lf)             ON (CNF_CUSTOMER_DIM_CFDL.CUST_SK =#(lf)                    TF_FIN_CUST_EVT_FCT_CFDL.CUST_SK))#(lf)         LEFT OUTER JOIN HUMAN_RESOURCES.AGT_DIM_CURR_CFDL AGT_DIM_CURR_CFDL#(lf)            ON (AGT_DIM_CURR_CFDL.AGT_DIM_SK =#(lf)                   TF_FIN_CUST_EVT_FCT_CFDL.CRNG_AGT_SK))#(lf)        RIGHT OUTER JOIN SALES.FIN_CUST_ELIG_DIM_CFDL FIN_CUST_ELIG_DIM_CFDL#(lf)           ON (FIN_CUST_ELIG_DIM_CFDL.FIN_CUST_PNT_ELIG_DIM_SK =#(lf)                  TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_ELIG_DIM_SK))#(lf)       LEFT OUTER JOIN#(lf)       CONTRACT.CNF_CONTRACT_DIM_DTL_CFDL CNF_CONTRACT_DIM_DTL_CFDL#(lf)          ON     (CNF_CONTRACT_DIM_DTL_CFDL.CTRC_SK =#(lf)                     TF_FIN_CUST_EVT_FCT_CFDL.CTRC_SK)#(lf)            and   (CNF_CONTRACT_DIM_DTL_CFDL.VRSN_NBR =#(lf)                     TF_FIN_CUST_EVT_FCT_CFDL.CTRC_VRSN_NBR)#(lf)WHERE     (AGT_DIM_CURR_CFDL.CURR_ROW_IND = \u0027Y\u0027)#(lf)     #(lf)       AND (SALE_HIER_DIM.CURR_ROW_IND = \u0027Y\u0027)#(lf)       AND sale_hier_dim.ORZN_DEPT_CDE in (\u00270001\u0027,\u00270115\u0027,\u00270190\u0027,\u00270283\u0027,\u00270291\u0027,\u00270361\u0027,\u00270383\u0027,\u00270384\u0027,\u00270435\u0027,\u00270525\u0027,\u00270716\u0027)#(lf)       AND DTRB_PERF_DATES.DTRB_PERF_RPT_YR_NBR in (\u00272022\u0027,\u00272023\u0027,\u00272024\u0027)#(lf)'])in    Source"}]},{"name":"Scorecard Table","isHidden":false,"storageMode":"Import","columns":[{"name":"Sort Order","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Metric Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Lag or Lead","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Background Color Summary Tab","expression":"if(MAX(\u0027Scorecard Table\u0027[Metric Name])='Field Leaders', '#FEEFEB',if(MAX(\u0027Scorecard Table\u0027[Metric Name]) in {'WCFC','New FA Hire', 'Combined Launch (NFA1-2)','New Clients'},'#F7F3EB',if(MAX(\u0027Scorecard Table\u0027[Metric Name]) in {'ANBP','WID','Total Sales', 'Productivity', '% Adopting Advisors'},'#F6F9FC')))","isHidden":false}],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('XZDdasMwDEZfRQQGHXQwp+1+Lr1sYRsllLSQi9ALN1E7gWuHxOtef7I3htiFMdI5iE9q26wpyiKbZzm/tTll+3mblYS2hzWaHseJ+0qwCr+g1PBKI0a0+IcKS+hCJCtBdPW04fJetJq3Z64eRGfng7GwNTYNvhOk8OcDOeRI5tN1HzCrSq1u8mtWlkK7At37IbCn+wtNPmV/lDGGwZML59+E6jYy3jLBzeinAbsAhXeO/2QoadR4xHE0NpFckp9TwXvZRLSQaIuWh5F38GLpRAeLUMd7q6W0OJmlzkRvgho7pAv20Vr9Wftv', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [#'Metric Name' = _t, #'Sort Order' = _t, #'Lag or Lead' = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Metric Name', type text}, {'Sort Order', Int64.Type}, {'Lag or Lead', type text}}),    #'Sorted Rows' = Table.Sort(#'Changed Type',{{'Sort Order', Order.Ascending}})in    #'Sorted Rows'"}]},{"name":"Measures Table","isHidden":false,"storageMode":"Import","columns":[],"measures":[{"name":"2) YTD","expression":"var Selection = SELECTEDVALUE(\u0027Scorecard Table\u0027[Metric Name])var decimals = '#,0.0'returnSWITCH(    true(),    Selection = 'Applications Received', if(ISBLANK([Received YTD]), 0,[Received YTD]),    Selection = 'Appointments', if(ISBLANK([YTD Appointments]), 0, [YTD Appointments]),    Selection = '% Adopted Advisors', FORMAT([% Adopted Advisors], '0.0%'),    Selection = 'ANBP', if(ISBLANK([CY ANBP]), 0,                        SWITCH(true(),                         [CY ANBP] \u003e 1000000, FORMAT([CY ANBP]/1000000, decimals \u0026 'M'),                         [CY ANBP] \u003e= 1000, FORMAT([CY ANBP]/1000, decimals \u0026 'K'),                        [CY ANBP] \u003c 1000, [CY ANBP])),    Selection = 'Combined Launch (NFA1-2)', if(isblank([CL Percent]), 'N/A', FORMAT([CL Percent], '0.0%')),    Selection = 'FAs on Teams', '-',    Selection = 'Field Leaders', if(ISBLANK([Field Leader YTD Headcount]), 0, [Field Leader YTD Headcount]),    Selection = 'Leader JFW', if(ISBLANK([YTD Leader JFW]), 0, [YTD Leader JFW]),    Selection = 'New Clients', if(ISBLANK([YTD_NC]), 0, [YTD_NC]),    Selection = 'New FA Hires', if(ISBLANK([New FA Hires Curr Week]), 0, [New FA Hires Curr Week]),    Selection = 'Prospect Connects', if(ISBLANK([YTD Prospect Connects]), 0, [YTD Prospect Connects]),    Selection = 'Selection Eligible RC', if(ISBLANK([YTD CP Plus]), 0, [YTD CP Plus]),    Selection = 'Referrals', if(ISBLANK([YTD Referrals]), 0, [YTD Referrals]),    Selection = 'WID', if(ISBLANK([YTD WID]), 0,                        SWITCH(true(),                        [YTD WID] \u003e 1000000, FORMAT([YTD WID]/1000000, decimals \u0026 'M'),                         [YTD WID] \u003e= 1000, FORMAT([YTD WID]/1000, decimals \u0026 'K'),                        [YTD WID] \u003c 1000, [YTD WID])),     Selection = 'Total Sales', if(ISBLANK([YTD Total Sales]), 0,                        SWITCH(true(),                        [YTD Total Sales] \u003e 1000000000, FORMAT([YTD Total Sales]/1000000000, decimals \u0026 'bn'),                        [YTD Total Sales] \u003e 1000000, FORMAT([YTD Total Sales]/1000000, decimals \u0026 'M'),                         [YTD Total Sales] \u003e= 1000, FORMAT([YTD Total Sales]/1000, decimals \u0026 'K'),                        [YTD Total Sales] \u003c 1000, [YTD Total Sales])),    Selection = 'WCFC', FORMAT([WCFC YTD], decimals))","isHidden":false},{"name":"1) % of YE Goal","expression":"var Selection = SELECTEDVALUE(\u0027Scorecard Table\u0027[Metric Name])returnSWITCH(    true(),    Selection = 'Applications Received', 'N/A',    Selection = '% Adopted Advisors', 'N/A',    Selection = 'Appointments', [YE % of Goal Appointments],    Selection = 'ANBP', [YE % of Goal ANBP],    Selection = 'ANBP - MVP Markets', 'N/A',    Selection = 'ANBP - NPG Practices', [YE % of Goal ANBP NPG Practices],    Selection = 'Combined Launch (NFA1-2)', [YE % of Goal Combined Launch],    Selection = 'Field Leaders', 'N/A',    Selection = 'Leader JFW', 'N/A',    Selection = 'New Clients', [YE % of Goal New Clients],    Selection = 'New FA Hires', [YE % of Goal FA Hires],    Selection = 'Prospect Connects', [YE % of Goal PCs],    Selection = 'Selection Eligible RC', [YE % of Goal Quality CP+],    Selection = 'Referrals', 'N/A',    Selection = 'Total Sales', [% Total Sales YE],    Selection = 'WID', [YE % of Goal RFRB],    Selection = 'WCFC', [YE % of Goal WCFC])","isHidden":false},{"name":"9c) YE Goal","expression":"var Selection = SELECTEDVALUE(\u0027Scorecard Table\u0027[Metric Name])returnSWITCH(    true(),    Selection = 'Applications Received', [YE Applications Goal],    Selection = 'Appointments', [YE Appt Goal],    Selection = 'ANBP', [YE ANBP Goal],    Selection = 'ANBP - NPG Practices', 'update',    Selection = 'ANBP - MVP Markets', 'update',    Selection = 'Combined Launch (NFP1-2)', [YE CL Goal],    Selection = 'FAs on Teams', '?',    Selection = 'Field Leaders', '?',    Selection = 'Leader JFW', [YE LeaderJFW Goal],    Selection = 'New Clients', [YE NFC Goal],    Selection = 'New FA Hires', [YE FR Contracts Goal],    Selection = 'Prospect Connects', [YE Total PCs Goal],    Selection = 'Score Qualifying CP+', [YE CPPlus Goal],    Selection = 'Referrals', [YE Referrals Goal],    Selection = 'RFRB', [YE WID Goal],    Selection = 'WCFC', [YE WMFC Goal])","isHidden":false},{"name":"New FA Hires Curr Week","expression":"var max_year = CALCULATE(max(\u0027RAR Contracts\u0027[Year]), \u0027RAR Contracts\u0027)var max_week = CALCULATE(max(\u0027RAR Contracts\u0027[Week]), \u0027RAR Contracts\u0027[Year]=max_year, not(ISBLANK(\u0027RAR Contracts\u0027[Count])))returnCALCULATE(    sum(\u0027RAR Contracts\u0027[Count]),    \u0027RAR Contracts\u0027[Year]=max_year,    \u0027RAR Contracts\u0027[Week]=max_week)","isHidden":false},{"name":"5) Weekly Average","expression":"var Selection = SELECTEDVALUE(\u0027Scorecard Table\u0027[Metric Name])var decimals = '#,0.0'returnSWITCH(    true(),    Selection = 'Applications Received', [CY Wkly Avg Applications],    Selection = '% Adopted Advisors', 'N/A',    Selection = 'Appointments', [CY Wkly Avg Appts],    Selection = 'ANBP', SWITCH(true(),                         [CY Wkly Avg ANBP] \u003e 1000000, FORMAT([CY Wkly Avg ANBP]/1000000, decimals \u0026 'M'),                         [CY Wkly Avg ANBP] \u003e= 1000, FORMAT([CY Wkly Avg ANBP]/1000, decimals \u0026 'K'),                         [CY Wkly Avg ANBP] \u003c 1000, [CY Wkly Avg ANBP]),    Selection = 'Combined Launch (NFA1-2)', 'N/A',    Selection = 'FAs on Teams', '-',    Selection = 'Field Leaders', [CY Wkly Avg Field Leader],    Selection = 'Leader JFW', [CY Wkly Avg Leader JFW],    Selection = 'New Clients', [CY Wkly Avg New Clients],    Selection = 'New Clients, Age 18+ w/ Goals', '-',    Selection = 'New FA Hires', [CY Wkly Avg RAR Contracts],    Selection = 'Prospect Connects', [CY Wkly Avg PCs],    Selection = 'Selection Eligible RC', [CP+ YTD Wk Average],    Selection = 'Referrals', [CY Wkly Avg Referrals],    Selection = 'WID', SWITCH(true(),                         [CY Wkly Avg WID] \u003e 1000000, FORMAT([CY Wkly Avg WID]/1000000, decimals \u0026 'M'),                         [CY Wkly Avg WID] \u003e= 1000, FORMAT([CY Wkly Avg WID]/1000, decimals \u0026 'K'),                         [CY Wkly Avg WID] \u003c 1000, [CY Wkly Avg WID]),    Selection = 'Total Sales', SWITCH(true(),                         [CY Wkly Avg Total Sales] \u003e 1000000, FORMAT([CY Wkly Avg Total Sales]/1000000, decimals \u0026 'M'),                         [CY Wkly Avg Total Sales] \u003e= 1000, FORMAT([CY Wkly Avg Total Sales]/1000, decimals \u0026 'K'),                         [CY Wkly Avg Total Sales] \u003c 1000, [CY Wkly Avg Total Sales]),    Selection = 'WCFC', format([CY Wkly Avg WCFC], decimals))","isHidden":false},{"name":"6) Weekly Need - formatted display","expression":"var Selection = SELECTEDVALUE(\u0027Scorecard Table\u0027[Metric Name])var decimals = '#,0.0'returnSWITCH(    true(),    Selection = 'Applications Received', 'N/A',    Selection = '% Adopted Advisors', 'N/A',    Selection = 'Appointments', if(ISBLANK([YE Appt Goal]), 'N/A', [Weekly Need Appts]),    Selection = 'ANBP', IF(ISBLANK([YE ANBP Goal]), 'N/A',                        SWITCH(true(),                         [Weekly Need ANBP] \u003e 1000000, FORMAT([Weekly Need ANBP]/1000000, decimals \u0026 'M'),                         [Weekly Need ANBP] \u003e= 1000, FORMAT([Weekly Need ANBP]/1000, decimals \u0026 'K'),                         [Weekly Need ANBP] \u003c 1000, [Weekly Need ANBP])),    Selection = 'Combined Launch (NFA1-2)', 'N/A',    Selection = 'Field Leaders', 'N/A',    Selection = 'Leader JFW', 'N/A',    Selection = 'New Clients', if(ISBLANK([YE NFC Goal]), 'N/A', [Weekly Need New Clients]),    Selection = 'New FA Hires', if(ISBLANK([YE FR Contracts Goal]), 'N/A', [Weekly Need New FA Hires]),    Selection = 'Prospect Connects', IF(ISBLANK([YE Total PCs Goal]), 'N/A', [Weekly Need Total PCs]),    Selection = 'Selection Eligible RC', IF(ISBLANK([YE CPPlus Goal]), 'N/A', [Weekly Need CP+]),    Selection = 'Referrals', 'N/A',    Selection = 'Total Sales', 'N/A',    Selection = 'WID',                    IF(ISBLANK([YE WID Goal]), 'N/A',                         SWITCH(true(),                        [Weekly Need WID] \u003c -1000000, FORMAT([Weekly Need WID]/1000000, decimals \u0026 'M'),                        [Weekly Need WID] \u003c -1000, FORMAT([Weekly Need WID]/1000,decimals \u0026 'K'),                        [Weekly Need WID] \u003e 1000000, FORMAT([Weekly Need WID]/1000000, decimals \u0026 'M'),                         [Weekly Need WID] \u003e= 1000, FORMAT([Weekly Need WID]/1000, decimals \u0026 'K'),                        [Weekly Need WID] \u003c 1000, [Weekly Need WID])),    Selection = 'WCFC', if(ISBLANK([YE WMFC Goal]), 'N/A', format([Weekly Need WMFC], decimals)))","isHidden":false},{"name":"Field Leader YTD Headcount","expression":"VAR max_year = CALCULATE(MAX(WMFC_dD[Perfyear]),WMFC_dD)var max_week = CALCULATE(MAX(WMFC_dD[Perfweek]),WMFC_dD[Perfyear]=max_year,NOT(ISBLANK(WMFC_dD[MFC])))RETURNCALCULATE(   SUM(WMFC_dD[MFC]),    WMFC_dD[Category]='Field Leader',    WMFC_dD[Perfyear]=max_year,    WMFC_dD[Perfweek]=max_week)","isHidden":false},{"name":"New Clients, Age 18+","expression":"CALCULATE(    sum(Advice_AllTS_List[tot_newClient]))","isHidden":false},{"name":"New Clients, Age 18+ w/ Goals","expression":"CALCULATE(    sum(Advice_AllTS_List[cyr_Goal]))","isHidden":false},{"name":"FAs Trained in Advice 2022","expression":"CALCULATE(    COUNT(Advice_AllTS_List[TSID]),    filter(Advice_AllTS_List, Advice_AllTS_List[trained_cohort] = '2022'))","isHidden":false},{"name":"CY ANBP MVP Markets","expression":"CALCULATE(     sum(ANBP_OtherRev_DD[Value]),        DTRB_PERF_DATES[Cal_YTD_Flag] in {TRUE},        ANBP_OtherRev_DD[ANBP_OtherRev] = 'ANBP',        MVPs[MARKET_LEADERS] \u003c\u003e 'Vacant')","isHidden":false},{"name":"CY ANBP NPG Practices","expression":"CALCULATE(     sum(ANBP_OtherRev_DD[Value]),        DTRB_PERF_DATES[Cal_YTD_Flag] in {TRUE},        ANBP_OtherRev_DD[ANBP_OtherRev] = 'ANBP',        RFO_Zone[NPG] = 'NPG')","isHidden":false},{"name":"CY Wkly Avg ANBP","expression":"var curr_year = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT],'CURRENT')var last_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT],'CURRENT')-1RETURNDIVIDE([CY ANBP], last_week)","isHidden":false},{"name":"CY Wkly Avg WID","expression":"var curr_year = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT],'CURRENT')var last_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT],'CURRENT')-1RETURNDIVIDE([YTD WID], last_week)","isHidden":false},{"name":"CY Wkly Avg ANBP NPG Practices","expression":"var curr_year = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT],'CURRENT')var last_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT],'CURRENT')-1RETURNDIVIDE([CY ANBP NPG Practices], last_week)","isHidden":false},{"name":"CY Wkly Avg ANBP MVP Markets","expression":"var curr_year = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT],'CURRENT')var last_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT],'CURRENT')-1RETURNDIVIDE([CY ANBP MVP Markets], last_week)","isHidden":false},{"name":"CY Wkly Avg New Clients","expression":"var curr_year = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT],'CURRENT')var two_weeks_ago = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT],'CURRENT')-2RETURNDIVIDE([YTD_NC], two_weeks_ago)","isHidden":false},{"name":"CY Wkly Avg Applications Received","expression":"var curr_year = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT],'CURRENT')var last_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT],'CURRENT')-1RETURNDIVIDE([Received YTD], last_week)","isHidden":false},{"name":"YE % of Goal ANBP","expression":"DIVIDE([CY ANBP], [YE ANBP Goal])","isHidden":false},{"name":"YE % of Goal RFRB","expression":"DIVIDE([YTD WID], [YE WID Goal])","isHidden":false},{"name":"YE % of Goal WCFC","expression":"DIVIDE([cy_prior_wk_WMFC], [YE WMFC Goal])","isHidden":false},{"name":"YE % of Goal New Clients","expression":"DIVIDE([YTD_NC], [YE NFC Goal])","isHidden":false},{"name":"CY PW ANBP","expression":"var Selection = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR])var prior_2wks = Selection -1returnCALCULATE(    sum(ANBP_OtherRev_DD[Value]),    ANBP_OtherRev_DD[ANBP_OtherRev] = 'ANBP',    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_2wks,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"Wow ANBP","expression":"if(and([CY ANBP], [CY PW ANBP]), [CY ANBP] - [CY PW ANBP])","isHidden":false},{"name":"Weekly Trend ANBP","expression":"AVERAGEX(\\tKEEPFILTERS(VALUES(\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_WK_NBR])),\\tCALCULATE([Wow ANBP]))","isHidden":false},{"name":"Weekly Trend Icon ANBP","expression":"var ChartIncrease = UNICHAR(128200)var ChartDecrease = UNICHAR(128201)var WeeklyTrend = [Weekly Trend ANBP]returnSWITCH(TRUE(),WeeklyTrend \u003e= 0, ChartIncrease,WeeklyTrend \u003c= 0, ChartDecrease)","isHidden":false},{"name":"7) Weekly Trend","expression":"var Selection = SELECTEDVALUE(\u0027Scorecard Table\u0027[Metric Name])returnSWITCH(    true(),    Selection = 'Applications Received', [Weekly Trend Icon Applications Received],    Selection = 'Appointments', [Weekly Trend Icon Appointments],    Selection = 'ANBP', [Weekly Trend Icon ANBP],    Selection = 'ANBP - MVP Markets', [Weekly Trend Icon ANBP MVP Markets],    Selection = 'ANBP - NPG Practices', [Weekly Trend Icon ANBP NPG Practices],    Selection = 'Combined Launch (NFP1-2)', '-',    Selection = 'FAs on Teams', '-',    Selection = 'Field Leaders', [Weekly Trend Icon Field Leader],    Selection = 'Leader JFW', [Weekly Trend Icon Leader JFW],    Selection = 'New Clients', [Weekly Trend Icon New Clients],    Selection = 'New FA Hires', [Weekly Trend Icon New FA Hires],    Selection = 'Prospect Connects', [Weekly Trend Icon Prospect Connects],    Selection = 'Score Qualifying CP+', [Weekly Trend Icon Quality CP+],    Selection = 'Referrals', [Weekly Trend Icon Referrals],    Selection = 'RFRB', [Weekly Trend Icon RFRB],    Selection = 'WCFC', [Weekly Trend Icon WCFC])","isHidden":false},{"name":"YE % of Goal Appointments","expression":"DIVIDE([YTD Appointments], [YE Appt Goal])","isHidden":false},{"name":"CY PW WID","expression":"var Selection = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR])var prior_2wks = Selection -1returnCALCULATE(    sum(ANBP_OtherRev_DD[Value]),    ANBP_OtherRev_DD[ANBP_OtherRev] = 'WID',    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_2wks,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"Wow RFRB","expression":"if(and([YTD WID], [CY PW WID]), [YTD WID] - [CY PW WID])","isHidden":false},{"name":"Weekly Trend RFRB","expression":"AVERAGEX(\\tKEEPFILTERS(VALUES(\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_WK_NBR])),\\tCALCULATE([Wow RFRB]))","isHidden":false},{"name":"Weekly Trend Icon RFRB","expression":"var ChartIncrease = UNICHAR(128200)var ChartDecrease = UNICHAR(128201)var WeeklyTrend = [Weekly Trend RFRB]returnSWITCH(TRUE(),WeeklyTrend \u003e= 0, ChartIncrease,WeeklyTrend \u003c= 0, ChartDecrease)","isHidden":false},{"name":"YE % of Goal PCs","expression":"DIVIDE([YTD Prospect Connects], [YE Total PCs Goal])","isHidden":false},{"name":"YE % of Goal Leader JFW","expression":"DIVIDE([Leader JFW YTD], [YE LeaderJFW Goal])","isHidden":false},{"name":"YE % of Goal Quality CP+","expression":"DIVIDE([YTD CP Plus], [YE CPPlus Goal])","isHidden":false},{"name":"CY Wkly Avg PCs","expression":"var curr_year = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT],'CURRENT')var last_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT],'CURRENT')-1RETURNDIVIDE([YTD Prospect Connects], last_week)","isHidden":false},{"name":"CY Wkly Avg Referrals","expression":"var curr_year = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT],'CURRENT')var last_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT],'CURRENT')-1RETURNDIVIDE([YTD Referrals], last_week)","isHidden":false},{"name":"CY Wkly Avg Leader JFW","expression":"var curr_year = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT],'CURRENT')var last_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT],'CURRENT')-1RETURNDIVIDE([YTD Leader JFW], last_week)","isHidden":false},{"name":"CY Wkly Avg Appts","expression":"var curr_year = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT],'CURRENT')var last_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT],'CURRENT')-1RETURNDIVIDE([YTD Appointments], last_week)","isHidden":false},{"name":"CY Wkly Avg Applications","expression":"var curr_year = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT],'CURRENT')var last_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT],'CURRENT')-1RETURNDIVIDE([Received YTD], last_week)","isHidden":false},{"name":"CY Wkly Avg Quality CP+","expression":"var curr_year = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT],'CURRENT')var last_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT],'CURRENT')-1RETURNDIVIDE([YTD CP Plus], last_week)","isHidden":false},{"name":"CY Wkly Avg WCFC","expression":"var curr_year = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT],'CURRENT')var last_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT],'CURRENT')-1RETURNDIVIDE([CY WMFC], last_week)","isHidden":false},{"name":"WCFC YTD","expression":"VAR max_year = CALCULATE(MAX(WMFC_dD[Perfyear]),WMFC_dD)var max_week = CALCULATE(MAX(WMFC_dD[Perfweek]),WMFC_dD[Perfyear]=max_year,NOT(ISBLANK(WMFC_dD[MFC])))RETURNCALCULATE(    SUM(WMFC_dD[WMFC]),   WMFC_dD[Perfyear]=max_year,   WMFC_dD[Perfweek]=max_week)","isHidden":false},{"name":"YE % of Goal FA Hires","expression":"DIVIDE([New FA Hires Curr Week], [YE FR Contracts Goal])","isHidden":false},{"name":"CY Wkly Avg RAR Contracts","expression":"var curr_year = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT],'CURRENT')var last_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT],'CURRENT')-1RETURNDIVIDE([New FA Hires YTD], last_week)","isHidden":false},{"name":"CY Wkly Avg Field Leader","expression":"var curr_year = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT],'CURRENT')var last_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT],'CURRENT')-1RETURNDIVIDE([Field Leader Sum Wk Headcount], last_week)","isHidden":false},{"name":"Field Leader Sum Wk Headcount","expression":"VAR max_year = CALCULATE(MAX(WMFC_dD[Perfyear]),WMFC_dD)var max_week = CALCULATE(MAX(WMFC_dD[Perfweek]),WMFC_dD[Perfyear]=max_year,NOT(ISBLANK(WMFC_dD[MFC])))RETURNCALCULATE(   SUM(WMFC_dD[MFC]),    WMFC_dD[Category]='Field Leader',    WMFC_dD[Perfyear]=max_year)    --WMFC_dD[Perfweek]=max_week)","isHidden":false},{"name":"New FA Hires YTD","expression":"var max_year = CALCULATE(max(\u0027RAR Contracts\u0027[Year]), \u0027RAR Contracts\u0027)var max_week = CALCULATE(max(\u0027RAR Contracts\u0027[Week]), \u0027RAR Contracts\u0027[Year]=max_year, not(ISBLANK(\u0027RAR Contracts\u0027[Count])))returnCALCULATE(    sum(\u0027RAR Contracts\u0027[Count]),    \u0027RAR Contracts\u0027[Year]=max_year)    --\u0027RAR Contracts\u0027[Week]=max_week)","isHidden":false},{"name":"CY PW ANBP NPG Practices","expression":"var Selection = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR])var prior_2wks = Selection -1returnCALCULATE(    sum(ANBP_OtherRev_DD[Value]),    ANBP_OtherRev_DD[ANBP_OtherRev] = 'ANBP',    RFO_Zone[NPG] = 'NPG',    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_2wks,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"WoW ANBP NPG Practices","expression":"if(and([CY ANBP NPG Practices], [CY PW ANBP NPG Practices]), [CY ANBP NPG Practices] - [CY PW ANBP NPG Practices])","isHidden":false},{"name":"Weekly Trend ANBP NPG Practices","expression":"AVERAGEX(\\tKEEPFILTERS(VALUES(\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_WK_NBR])),\\tCALCULATE([WoW ANBP NPG Practices]))","isHidden":false},{"name":"Weekly Trend Icon ANBP NPG Practices","expression":"var ChartIncrease = UNICHAR(128200)var ChartDecrease = UNICHAR(128201)var WeeklyTrend = [Weekly Trend ANBP NPG Practices]returnSWITCH(TRUE(),WeeklyTrend \u003e= 0, ChartIncrease,WeeklyTrend \u003c= 0, ChartDecrease)","isHidden":false},{"name":"CY PW ANBP MVP Markets","expression":"var Selection = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR])var prior_2wks = Selection -1returnCALCULATE(    sum(ANBP_OtherRev_DD[Value]),    ANBP_OtherRev_DD[ANBP_OtherRev] = 'ANBP',    MVPs[MARKET_LEADERS] \u003c\u003e 'VACANT',    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_2wks,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"WoW ANBP MVP Markets","expression":"if(and([CY ANBP MVP Markets], [CY PW ANBP MVP Markets]), [CY ANBP MVP Markets] - [CY PW ANBP MVP Markets])","isHidden":false},{"name":"Weekly Trend ANBP MVP Markets","expression":"AVERAGEX(\\tKEEPFILTERS(VALUES(\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_WK_NBR])),\\tCALCULATE([WoW ANBP MVP Markets]))","isHidden":false},{"name":"Weekly Trend Icon ANBP MVP Markets","expression":"var ChartIncrease = UNICHAR(128200)    --(129137)var ChartDecrease = UNICHAR(128201)    --(129139)var WeeklyTrend = [Weekly Trend ANBP MVP Markets]returnSWITCH(TRUE(),WeeklyTrend \u003e= 0, ChartIncrease,WeeklyTrend \u003c= 0, ChartDecrease)","isHidden":false},{"name":"3) YOY Change","expression":"var Selection = SELECTEDVALUE(\u0027Scorecard Table\u0027[Metric Name])returnSWITCH(    true(),    Selection = 'Applications Received', [YOY Change Applications],    Selection = 'Appointments', [YOY Change Appts],    Selection = '% Adopted Advisors', 'N/A',    Selection = 'ANBP', [ANBP YOY Change],    Selection = 'ANBP - MVP Markets', [YOY Change ANBP MVP Markets],    Selection = 'ANBP - NPG Practices', [YOY Change ANBP NPG Practices],    Selection = 'Combined Launch (NFA1-2)', 'N/A',    Selection = 'Field Leaders', [YOY Change Field Leaders],    Selection = 'Leader JFW', [YOY Change Leader JFW],    Selection = 'New Clients', [YOY Change NC],    Selection = 'New FA Hires', [YOY Change Contracts],    Selection = 'Prospect Connects', [YOY Change PCs],    Selection = 'Selection Eligible RC', [YOY Change CP],    Selection = 'Referrals', [YOY Change Referrals],    Selection = 'WID', [WID YOY Change],    Selection = 'Total Sales', [Total Sales YOY Change],    Selection = 'WCFC', [YOY Change WMFC])","isHidden":false},{"name":"CY ANBP in (M)","expression":"var CY_ANBP = DIVIDE([CY ANBP], 1000000)var decimals = '0.0'returnFORMAT(CY_ANBP, decimals \u0026 'M')","isHidden":false},{"name":"YTD RFRB in (M)","expression":"var YTD_RFRB = DIVIDE([YTD WID], 1000000)var decimals = '0.0'returnFORMAT(YTD_RFRB, decimals \u0026 'M')","isHidden":false},{"name":"YE % of Goal Combined Launch","expression":"DIVIDE([CL Percent], [YE CL Goal])--DIVIDE([CL Percent], 0.3)","isHidden":false},{"name":"YE % of Goal ANBP NPG Practices","expression":"DIVIDE([CY ANBP NPG Practices], [YE ANBP NPG Goal])","isHidden":false},{"name":"Field Leader PYTD Headcount","expression":"var max_year = CALCULATE(MAX(WMFC_dD[Perfyear]),WMFC_dD)var max_week = CALCULATE(MAX(WMFC_dD[Perfweek]),WMFC_dD[Perfyear]=max_year,NOT(ISBLANK(WMFC_dD[MFC])))var prev_year = max_year -1RETURNCALCULATE(   SUM(WMFC_dD[MFC]),    WMFC_dD[Category]='Field Leader',    WMFC_dD[Perfyear]=prev_year,    WMFC_dD[Perfweek]=max_week)","isHidden":false},{"name":"YOY Change Field Leaders","expression":"([Field Leader YTD Headcount] - [Field Leader PYTD Headcount])/[Field Leader PYTD Headcount]","isHidden":false},{"name":"PYTD ANBP MVP Markets","expression":"CALCULATE(     sum(ANBP_OtherRev_DD[Value]),        DTRB_PERF_DATES[Cal_PYTD_Flag] in {TRUE},        ANBP_OtherRev_DD[ANBP_OtherRev] = 'ANBP',        MVPs[MARKET_LEADERS] \u003c\u003e 'Vacant')","isHidden":false},{"name":"PYTD ANBP NPG Practices","expression":"CALCULATE(     sum(ANBP_OtherRev_DD[Value]),        DTRB_PERF_DATES[Cal_PYTD_Flag] in {TRUE},        ANBP_OtherRev_DD[ANBP_OtherRev] = 'ANBP',        RFO_Zone[NPG] = 'NPG')","isHidden":false},{"name":"YOY Change ANBP MVP Markets","expression":"([CY ANBP MVP Markets] - [PYTD ANBP MVP Markets])/[PYTD ANBP MVP Markets]","isHidden":false},{"name":"YOY Change ANBP NPG Practices","expression":"([CY ANBP NPG Practices] - [PYTD ANBP NPG Practices])/[PYTD ANBP NPG Practices]","isHidden":false},{"name":"CY PW WCFC","expression":"var Selection = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR])var prior_2wks = Selection -1returnCALCULATE(     SUM(WMFC_DD[WMFC]),     DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_2wks,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"Wow WCFC","expression":"if(and([CY WMFC], [CY PW WCFC]), [CY WMFC] - [CY PW WCFC])","isHidden":false},{"name":"Weekly Need ANBP NPG Practices","expression":"var prev_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT], 'CURRENT') -1var weeks_remaining = 52 - prev_weekreturn    divide(\u0027YTD_GOALS_DD\u0027[YE ANBP NPG Goal]-[CY ANBP NPG Practices], weeks_remaining)","isHidden":false},{"name":"Weekly Need New FA Hires","expression":"var prev_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT], 'CURRENT') -1var weeks_remaining = 52 - prev_weekreturnDIVIDE(\u0027YTD_GOALS_DD\u0027[YE FR Contracts Goal]-[New FA Hires YTD], weeks_remaining)","isHidden":false},{"name":"6a) Weekly Need - icons","expression":"var Selection = SELECTEDVALUE(\u0027Scorecard Table\u0027[Metric Name])returnSWITCH(    true(),    Selection = 'Applications Received', 'N/A',    Selection = 'Appointments', IF(ISBLANK([YE Appt Goal]), 'N/A', [Weekly Need Appts]),    Selection = 'ANBP', IF(ISBLANK([YE ANBP Goal]), 'N/A', [Weekly Need ANBP]),    Selection = 'Combined Launch (NFA1-2)', 'N/A',    Selection = 'Field Leaders', 'N/A',    Selection = 'Leader JFW', 'N/A',    Selection = 'New Clients', if(ISBLANK([YE NFC Goal]), 'N/A', [Weekly Need New Clients]),    Selection = 'New FA Hires', if(ISBLANK([YE FR Contracts Goal]), 'N/A', [Weekly Need New FA Hires]),    Selection = 'Prospect Connects', IF(ISBLANK([YE Total PCs Goal]), 'N/A', [Weekly Need Total PCs]),    Selection = 'Score Qualifying CP+', IF(ISBLANK([YE CPPlus Goal]), 'N/A', [Weekly Need CP+]),    Selection = 'Referrals', 'N/A',    Selection = 'RFRB', IF(ISBLANK([YE WID Goal]), 'N/A', [Weekly Need WID]),    Selection = 'WCFC', if(ISBLANK([YE WMFC Goal]), 'N/A', [Weekly Need WMFC]))","isHidden":false},{"name":"Weekly Trend WCFC","expression":"AVERAGEX(\\tKEEPFILTERS(VALUES(\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_WK_NBR])),\\tCALCULATE([Wow WCFC]))","isHidden":false},{"name":"Weekly Trend Icon WCFC","expression":"var ChartIncrease = UNICHAR(128200)var ChartDecrease = UNICHAR(128201)var WeeklyTrend = [Weekly Trend WCFC]returnSWITCH(TRUE(),WeeklyTrend \u003e= 0, ChartIncrease,WeeklyTrend \u003c= 0, ChartDecrease)","isHidden":false},{"name":"CY PW Field Leaders","expression":"var Selection = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR])var prior_2wks = Selection -1returnCALCULATE(     SUM(WMFC_DD[MFC]),    WMFC_DD[Category]='Field Leader',    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_2wks,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"Wow Field Leader","expression":"if(and([Field Leader YTD Headcount], [CY PW Field Leaders]), [Field Leader YTD Headcount] - [CY PW Field Leaders])","isHidden":false},{"name":"Weekly Trend Field Leader","expression":"AVERAGEX(\\tKEEPFILTERS(VALUES(\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_WK_NBR])),\\tCALCULATE([Wow Field Leader]))","isHidden":false},{"name":"Weekly Trend Icon New Clients","expression":"var ChartIncrease = UNICHAR(128200)var ChartDecrease = UNICHAR(128201)var ChartSame = UNICHAR(10134)var WeeklyTrend = [Weekly Trend New Clients]returnSWITCH(TRUE(),WeeklyTrend \u003e 0, ChartIncrease,WeeklyTrend \u003c 0, ChartDecrease,WeeklyTrend = 0, ChartSame)","isHidden":false},{"name":"CY PW New FA Hires","expression":"var Selection = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR])var prior_2wks = Selection -1returnCALCULATE(     SUM(\u0027RAR Contracts\u0027[Count]),     DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_2wks,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"Wow New FA Hires","expression":"if(and([New FA Hires YTD], [CY PW New FA Hires]), [New FA Hires YTD] - [CY PW New FA Hires])","isHidden":false},{"name":"Weekly Trend New FA Hires","expression":"AVERAGEX(\\tKEEPFILTERS(VALUES(\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_WK_NBR])),\\tCALCULATE([Wow New FA Hires]))","isHidden":false},{"name":"Weekly Trend Icon New FA Hires","expression":"var ChartIncrease = UNICHAR(128200)var ChartDecrease = UNICHAR(128201)var ChartSame = UNICHAR(10134)var WeeklyTrend = [Weekly Trend New FA Hires]returnSWITCH(TRUE(),WeeklyTrend \u003e 0, ChartIncrease,WeeklyTrend \u003c 0, ChartDecrease,WeeklyTrend = 0, ChartSame)","isHidden":false},{"name":"CY PW New Clients","expression":"var Selection = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR])var prior_full_2wks = Selection -2returnCALCULATE(([ytd_nc]),     DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_full_2wks,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"Wow New Clients","expression":"if(and([YTD_NC], [CY PW New Clients]), [YTD_NC] - [CY PW New Clients])","isHidden":false},{"name":"Weekly Trend New Clients","expression":"AVERAGEX(\\tKEEPFILTERS(VALUES(\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_WK_NBR])),\\tCALCULATE([Wow New Clients]))","isHidden":false},{"name":"Weekly Trend Icon Field Leader","expression":"var ChartIncrease = UNICHAR(128200)var ChartDecrease = UNICHAR(128201)var ChartSame = UNICHAR(10134)var WeeklyTrend = [Weekly Trend Field Leader]returnSWITCH(TRUE(),WeeklyTrend \u003e 0, ChartIncrease,WeeklyTrend \u003c 0, ChartDecrease,WeeklyTrend = 0, ChartSame)","isHidden":false},{"name":"YOY Change Applications","expression":"([Received YTD] - [Received PYTD])/[Received PYTD]","isHidden":false},{"name":"CY PW Applications Received","expression":"var Selection = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR])var prior_2wks = Selection -1returnCALCULATE([Received YTD],    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_2wks,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"CY PW Appointments","expression":"var Selection = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR])var prior_2wks = Selection -1returnCALCULATE([YTD Appointments],    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_2wks,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"CY PW Leader JFW","expression":"var Selection = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR])var prior_2wks = Selection -1returnCALCULATE([YTD Leader JFW],    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_2wks,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"CY PW Prospect Connects","expression":"var Selection = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR])var prior_2wks = Selection -1returnCALCULATE([YTD Prospect Connects],    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_2wks,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"CY PW Quality CP+","expression":"var Selection = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR])var prior_2wks = Selection -1returnCALCULATE([YTD CP Plus],    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_2wks,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"CY PW Referrals","expression":"var Selection = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR])var prior_2wks = Selection -1returnCALCULATE([YTD Referrals],    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_2wks,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"Wow Applications Received","expression":"if(and([Received YTD], [CY PW Applications Received]), [Received YTD] - [CY PW Applications Received])","isHidden":false},{"name":"Wow Appointments","expression":"if(and([YTD Appointments], [CY PW Appointments]), [YTD Appointments] - [CY PW Appointments])","isHidden":false},{"name":"Wow Leader JFW","expression":"if(and([YTD Leader JFW], [CY PW Leader JFW]), [YTD Leader JFW] - [CY PW Leader JFW])","isHidden":false},{"name":"Wow Prospect Connects","expression":"if(and([YTD Prospect Connects], [CY PW Prospect Connects]), [YTD Prospect Connects] - [CY PW Prospect Connects])","isHidden":false},{"name":"Wow Quality CP+","expression":"if(and([YTD CP Plus], [CY PW Quality CP+]), [YTD CP Plus] - [CY PW Quality CP+])","isHidden":false},{"name":"Wow Referrals","expression":"if(and([YTD Referrals], [CY PW Referrals]), [YTD Referrals] - [CY PW Referrals])","isHidden":false},{"name":"Weekly Trend Applications Received","expression":"AVERAGEX(\\tKEEPFILTERS(VALUES(\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_WK_NBR])),\\tCALCULATE([Wow Applications Received]))","isHidden":false},{"name":"Weekly Trend Appointments","expression":"AVERAGEX(\\tKEEPFILTERS(VALUES(\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_WK_NBR])),\\tCALCULATE([Wow Appointments]))","isHidden":false},{"name":"Weekly Trend Leader JFW","expression":"AVERAGEX(\\tKEEPFILTERS(VALUES(\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_WK_NBR])),\\tCALCULATE([Wow Leader JFW]))","isHidden":false},{"name":"Weekly Trend Prospect Connects","expression":"AVERAGEX(\\tKEEPFILTERS(VALUES(\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_WK_NBR])),\\tCALCULATE([Wow Prospect Connects]))","isHidden":false},{"name":"Weekly Trend Quality CP+","expression":"AVERAGEX(\\tKEEPFILTERS(VALUES(\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_WK_NBR])),\\tCALCULATE([Wow Quality CP+]))","isHidden":false},{"name":"Weekly Trend Referrals","expression":"AVERAGEX(\\tKEEPFILTERS(VALUES(\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_WK_NBR])),\\tCALCULATE([Wow Referrals]))","isHidden":false},{"name":"Weekly Trend Icon Applications Received","expression":"var ChartIncrease = UNICHAR(128200)var ChartDecrease = UNICHAR(128201)var ChartSame = UNICHAR(10134)var WeeklyTrend = [Weekly Trend Applications Received]returnSWITCH(TRUE(),WeeklyTrend \u003e 0, ChartIncrease,WeeklyTrend \u003c 0, ChartDecrease,WeeklyTrend = 0, ChartSame)","isHidden":false},{"name":"Weekly Trend Icon Appointments","expression":"var ChartIncrease = UNICHAR(128200)var ChartDecrease = UNICHAR(128201)var ChartSame = UNICHAR(10134)var WeeklyTrend = [Weekly Trend Appointments]returnSWITCH(TRUE(),WeeklyTrend \u003e 0, ChartIncrease,WeeklyTrend \u003c 0, ChartDecrease,WeeklyTrend = 0, ChartSame)","isHidden":false},{"name":"Weekly Trend Icon Leader JFW","expression":"var ChartIncrease = UNICHAR(128200)var ChartDecrease = UNICHAR(128201)var ChartSame = UNICHAR(10134)var WeeklyTrend = [Weekly Trend Leader JFW]returnSWITCH(TRUE(),WeeklyTrend \u003e 0, ChartIncrease,WeeklyTrend \u003c 0, ChartDecrease,WeeklyTrend = 0, ChartSame)","isHidden":false},{"name":"Weekly Trend Icon Prospect Connects","expression":"var ChartIncrease = UNICHAR(128200)var ChartDecrease = UNICHAR(128201)var ChartSame = UNICHAR(10134)var WeeklyTrend = [Weekly Trend Prospect Connects]returnSWITCH(TRUE(),WeeklyTrend \u003e 0, ChartIncrease,WeeklyTrend \u003c 0, ChartDecrease,WeeklyTrend = 0, ChartSame)","isHidden":false},{"name":"Weekly Trend Icon Quality CP+","expression":"var ChartIncrease = UNICHAR(128200)var ChartDecrease = UNICHAR(128201)var ChartSame = UNICHAR(10134)var WeeklyTrend = [Weekly Trend Quality CP+]returnSWITCH(TRUE(),WeeklyTrend \u003e 0, ChartIncrease,WeeklyTrend \u003c 0, ChartDecrease,WeeklyTrend = 0, ChartSame)","isHidden":false},{"name":"Weekly Trend Icon Referrals","expression":"var ChartIncrease = UNICHAR(128200)var ChartDecrease = UNICHAR(128201)var ChartSame = UNICHAR(10134)var WeeklyTrend = [Weekly Trend Referrals]returnSWITCH(TRUE(),WeeklyTrend \u003e 0, ChartIncrease,WeeklyTrend \u003c 0, ChartDecrease,WeeklyTrend = 0, ChartSame)","isHidden":false},{"name":"4) Current Week","expression":"var Selection = SELECTEDVALUE(\u0027Scorecard Table\u0027[Metric Name])var decimals = '#,0.0'returnSWITCH(    true(),    Selection = 'Applications Received', if(ISBLANK([CY CW Applications Received]), 0,[CY CW Applications Received]),    Selection = '% Adopted Advisors', 'N/A',    Selection = 'Appointments', if(ISBLANK([CY CW Appointments]), 0, [CY CW Appointments]),    Selection = 'ANBP', if(ISBLANK([CY CW ANBP]), 0,                        SWITCH(true(),                         [CY CW ANBP] \u003e 1000000, FORMAT([CY CW ANBP]/1000000, decimals \u0026 'M'),                         [CY CW ANBP] \u003e= 1000, FORMAT([CY CW ANBP]/1000, decimals \u0026 'K'),                         [CY CW ANBP] \u003c 1000, [CY CW ANBP])),    Selection = 'Combined Launch (NFA1-2)', 'N/A',        --if(isblank([CL Percent]), '-', FORMAT([CL Percent], '0.0%')),    Selection = 'Field Leaders', if(ISBLANK([CY CW Field Leaders]), 0, [CY CW Field Leaders]),    Selection = 'Leader JFW', if(ISBLANK([CY CW Leader JFW]), 0, [CY CW Leader JFW]),    Selection = 'New Clients', if(ISBLANK([CY CW New Clients]), 0, [CY CW New Clients]),    Selection = 'New FA Hires', if(ISBLANK([CY CW New FA Hires]), 0, [CY CW New FA Hires]),    Selection = 'Prospect Connects', if(ISBLANK([CY CW Prospect Connects]), 0, [CY CW Prospect Connects]),    Selection = 'Selection Eligible RC', if(ISBLANK([CY CW Quality CP+]), 0, [CY CW Quality CP+]),    Selection = 'Referrals', if(ISBLANK([CY CW Referrals]), 0, [CY CW Referrals]),    Selection = 'WID', if(isblank([CY CW WID]), 0,                        SWITCH(true(),                         [CY CW WID] \u003e 1000000, FORMAT([CY CW WID]/1000000, decimals \u0026 'M'),                         [CY CW WID] \u003e= 1000, FORMAT([CY CW WID]/1000, decimals \u0026 'K'),                        [CY CW WID] \u003c 1000, [CY CW WID])),    Selection = 'Total Sales', if(isblank([CY CW Total Sales]), 0,                        SWITCH(true(),                         [CY CW Total Sales] \u003e 1000000000, FORMAT([CY CW Total Sales]/1000000000, decimals \u0026 'B'),                        [CY CW Total Sales] \u003e 1000000, FORMAT([CY CW Total Sales]/1000000, decimals \u0026 'M'),                         [CY CW Total Sales] \u003e= 1000, FORMAT([CY CW Total Sales]/1000, decimals \u0026 'K'),                        [CY CW Total Sales] \u003c 1000, [CY CW Total Sales])),                       Selection = 'WCFC', if(ISBLANK([CY CW WCFC]), 0, FORMAT([CY CW WCFC], decimals)))","isHidden":false},{"name":"CY CW ANBP","expression":"var prior_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR], DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT], 'PREVIOUS')returnCALCULATE(    sum(ANBP_OtherRev_DD[Value]),    ANBP_OtherRev_DD[ANBP_OtherRev] = 'ANBP',    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_week,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"CY CW ANBP MVP Markets","expression":"var prior_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR], DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT], 'PREVIOUS')returnCALCULATE(    sum(ANBP_OtherRev_DD[Value]),    ANBP_OtherRev_DD[ANBP_OtherRev] = 'ANBP',    MVPs[MARKET_LEADERS] \u003c\u003e 'VACANT',    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_week,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"CY CW New Clients","expression":"var prior_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR], DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT], 'PREVIOUS')var prior_2wks = prior_week -1returnCALCULATE(sum(\u0027New Clients\u0027[FIN_CUST_PNT_VLU]),    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_2wks,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"CY CW WID","expression":"var prior_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR], DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT], 'PREVIOUS')returnCALCULATE(    sum(ANBP_OtherRev_DD[Value]),    ANBP_OtherRev_DD[ANBP_OtherRev] = 'WID',    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_week,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"CY CW ANBP NPG Practices","expression":"var prior_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR], DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT], 'PREVIOUS')returnCALCULATE(    sum(ANBP_OtherRev_DD[Value]),    ANBP_OtherRev_DD[ANBP_OtherRev] = 'ANBP',    RFO_Zone[NPG] = 'NPG',    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_week,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"CY CW Appointments","expression":"var prior_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR], DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT], 'PREVIOUS')returnCALCULATE([YTD Appointments],    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_week,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"CY CW Prospect Connects","expression":"var prior_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR], DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT], 'PREVIOUS')returnCALCULATE([YTD Prospect Connects],    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_week,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"CY CW Referrals","expression":"var prior_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR], DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT], 'PREVIOUS')returnCALCULATE([YTD Referrals],    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_week,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"CY CW Leader JFW","expression":"var prior_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR], DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT], 'PREVIOUS')returnCALCULATE([YTD Leader JFW],    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_week,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"CY CW Quality CP+","expression":"var prior_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR], DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT], 'PREVIOUS')returnCALCULATE([YTD CP Plus],    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_week,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"CY CW Applications Received","expression":"var prior_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR], DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT], 'PREVIOUS')returnCALCULATE([Received YTD],    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_week,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"CY CW Field Leaders","expression":"var prior_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR], DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT], 'PREVIOUS')returnCALCULATE(     SUM(WMFC_DD[MFC]),    WMFC_DD[Category]='Field Leader',    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_week,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"CY CW New FA Hires","expression":"var prior_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR], DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT], 'PREVIOUS')returnCALCULATE(     SUM(\u0027RAR Contracts\u0027[Count]),     DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_week,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"CY CW WCFC","expression":"VAR max_year = CALCULATE(MAX(WMFC_dD[Perfyear]),WMFC_dD)var max_week = CALCULATE(MAX(WMFC_dD[Perfweek]),WMFC_dD[Perfyear]=max_year,NOT(ISBLANK(WMFC_dD[MFC])))RETURNCALCULATE(    SUM(WMFC_dD[WMFC]),   WMFC_dD[Perfyear]=max_year,   WMFC_dD[Perfweek]=max_week)","isHidden":false},{"name":"8) Weekly Avg vs Weekly Need","expression":"var Selection = SELECTEDVALUE(\u0027Scorecard Table\u0027[Metric Name])var decimals = '#,0.0'returnSWITCH(    true(),    Selection = 'Applications Received', 'N/A',    Selection = 'Appointments', IF(ISBLANK([YE Appt Goal]), 'N/A', ROUND([CY Wkly Avg Appts] - [Weekly Need Appts],0)),    Selection = 'ANBP', IF(ISBLANK([YE ANBP Goal]), 'N/A', ROUND([CY Wkly Avg ANBP] - [Weekly Need ANBP],0)),    Selection = 'Combined Launch (NFA1-2)', 'N/A',    Selection = 'Field Leaders', 'N/A',    Selection = 'Leader JFW', IF(ISBLANK([YE LeaderJFW Goal]), 'N/A', ROUND([CY Wkly Avg Leader JFW] - [Weekly Need Leader JFW],0)),    Selection = 'New Clients', if(ISBLANK([YE NFC Goal]), 'N/A', ROUND([CY Wkly Avg New Clients],0) - ROUND([Weekly Need New Clients],0)),    Selection = 'New FA Hires', if(ISBLANK([YE FR Contracts Goal]), 'N/A', ROUND([CY Wkly Avg RAR Contracts] - [Weekly Need New FA Hires],0)),    Selection = 'Prospect Connects', IF(ISBLANK([YE Total PCs Goal]), 'N/A', ROUND([CY Wkly Avg PCs] - [Weekly Need Total PCs],0)),    Selection = 'Score Qualifying CP+', IF(ISBLANK([YE CPPlus Goal]), 'N/A', ROUND([CP+ YTD Wk Average] - [Weekly Need CP+],0)),    Selection = 'Referrals', 'N/A',    Selection = 'WID', IF(ISBLANK([YE WID Goal]), 'N/A', ROUND([CY Wkly Avg WID] - [Weekly Need WID],0)),    Selection = 'WCFC', if(ISBLANK([YE WMFC Goal]), 'N/A', ROUND([CY Wkly Avg WCFC] - [Weekly Need WMFC],0)))","isHidden":false},{"name":"7) Weekly Trend NEW","expression":"var Selection = SELECTEDVALUE(\u0027Scorecard Table\u0027[Metric Name])returnSWITCH(    true(),    Selection = 'Applications Received', [Weekly Trend Applications Received],    Selection = 'Appointments', [Weekly Trend Appointments],    Selection = 'ANBP', [Weekly Trend ANBP],    Selection = 'ANBP - MVP Markets', [Weekly Trend ANBP MVP Markets],    Selection = 'ANBP - NPG Practices', [Weekly Trend ANBP NPG Practices],    Selection = 'Combined Launch (NFP1-2)', 'N/A',    Selection = 'FAs on Teams', '-',    Selection = 'Field Leaders', [Weekly Trend Field Leader],    Selection = 'Leader JFW', [Weekly Trend Leader JFW],    Selection = 'New Clients', [Weekly Trend New Clients],    Selection = 'New FA Hires', [Weekly Trend New FA Hires],    Selection = 'Prospect Connects', [Weekly Trend Prospect Connects],    Selection = 'Selection Eligible RC', [Weekly Trend Quality CP+],    Selection = 'Referrals', [Weekly Trend Referrals],    Selection = 'WID', [Weekly Trend RFRB],    Selection = 'Total Sales', [Weekly Trend Total Sales],    Selection = 'WCFC', [Weekly Trend WCFC])","isHidden":false},{"name":"2) % of YTD Goal","expression":"var Selection = SELECTEDVALUE(\u0027Scorecard Table\u0027[Metric Name])returnSWITCH(    true(),    Selection = 'Applications Received', 'N/A',    Selection = '% Adopted Advisors', 'N/A',    Selection = 'Appointments', [% Appts YTD],    Selection = 'ANBP', [% ANBP YTD],    Selection = 'ANBP - MVP Markets', 'N/A',    Selection = 'ANBP - NPG Practices', [% ANBP NPG YTD],    Selection = 'Combined Launch (NFA1-2)', [% CL YTD],    Selection = 'Field Leaders', 'N/A',    Selection = 'Leader JFW', 'N/A',    Selection = 'New Clients', [% NFC YTD],    Selection = 'New FA Hires', [YTD % of Goal FA Hires],    Selection = 'Prospect Connects', [% Total PCs YTD],    Selection = 'Selection Eligible RC', [% CPPlus YTD],    Selection = 'Referrals', 'N/A',    Selection = 'Total Sales', [% Total Sales YTD],    Selection = 'WID', [% WID YTD],    Selection = 'WCFC', [% WMFC YTD])","isHidden":false},{"name":"YTD ANBP NPG Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[NPG]),SELECTEDVALUE(RFO_Zone[NPG]),                   if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                    if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]),'Enterprise Goal'))))))var PriorSunday = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT], LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT') - 3)             --var maxyeardt = CALCULATE(max(DTRB_PERF_DATES[CAL_DAY_DT]), DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT')         returnCALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'ANBP', YTD_GOALS_DD[Level] = 'NPG', YTD_GOALS_DD[Date_of_Goal] = PriorSunday)","isHidden":false},{"name":"% ANBP NPG YTD","expression":"DIVIDE([CY ANBP NPG Practices], [YTD ANBP NPG Goal])","isHidden":false},{"name":"YTD % of Goal FA Hires","expression":"DIVIDE([New FA Hires Curr Week], [YTD FR Contracts Goal])","isHidden":false},{"name":"9a) YTD Goal","expression":"var Selection = SELECTEDVALUE(\u0027Scorecard Table\u0027[Metric Name])returnSWITCH(    true(),    Selection = 'Applications Received', 'N/A',    Selection = 'Appointments', [YTD Appt Goal],    Selection = 'ANBP', [YTD ANBP Goal],    Selection = 'Combined Launch (NFA1-2)', [YTD CL Goal],    Selection = 'Field Leaders', 'N/A',    Selection = 'Leader JFW', 'N/A',    Selection = 'New Clients', [YTD NFC Goal],    Selection = 'New FA Hires', [YTD FR Contracts Goal],    Selection = 'Prospect Connects', [YTD Total PCs Goal],    Selection = 'Score Qualifying CP+', [YTD CPPlus Goal],    Selection = 'Referrals', 'N/A',    Selection = 'RFRB', [YTD WID Goal],    Selection = 'WCFC', [YTD WMFC Goal])","isHidden":false},{"name":"9b) YE Goal - NEW","expression":"var Selection = SELECTEDVALUE(\u0027Scorecard Table\u0027[Metric Name])returnSWITCH(    true(),    Selection = 'Applications Received', 'N/A',    Selection = 'Appointments', [YE Appt Goal],    Selection = 'ANBP', [YE ANBP Goal],    Selection = 'Combined Launch (NFA1-2)', [YE CL Goal],    Selection = 'Field Leaders', 'N/A',    Selection = 'Leader JFW', 'N/A',    Selection = 'New Clients', [YE NFC Goal],    Selection = 'New FA Hires', [YE FR Contracts Goal],    Selection = 'Prospect Connects', [YE Total PCs Goal],    Selection = 'Score Qualifying CP+', [YE CPPlus Goal],    Selection = 'Referrals', 'N/A',    Selection = 'RFRB', [YE WID Goal],    Selection = 'WCFC', [YE WMFC Goal])","isHidden":false},{"name":"2) YTD NO FORMATTING","expression":"var Selection = SELECTEDVALUE(\u0027Scorecard Table\u0027[Metric Name])var decimals = '#,0.0'returnSWITCH(    true(),    Selection = 'Applications Received', if(ISBLANK([Received YTD]), 0,[Received YTD]),    Selection = 'Appointments', if(ISBLANK([YTD Appointments]), 0, [YTD Appointments]),    Selection = 'ANBP', if(ISBLANK([CY ANBP]), 0, [CY ANBP]),    Selection = 'Combined Launch (NFA1-2)', if(isblank([CL Percent]), 'N/A', FORMAT([CL Percent], '0.0%')),    Selection = 'FAs on Teams', '-',    Selection = 'Field Leaders', if(ISBLANK([Field Leader YTD Headcount]), 0, [Field Leader YTD Headcount]),    Selection = 'Leader JFW', if(ISBLANK([Leader JFW YTD]), 0, [Leader JFW YTD]),    Selection = 'New Clients', if(ISBLANK([YTD_NC]), 0, [YTD_NC]),    Selection = 'New FA Hires', if(ISBLANK([New FA Hires Curr Week]), 0, [New FA Hires Curr Week]),    Selection = 'Prospect Connects', if(ISBLANK([YTD Prospect Connects]), 0, [YTD Prospect Connects]),    Selection = 'Score Qualifying CP+', if(ISBLANK([YTD CP Plus]), 0, [YTD CP Plus]),    Selection = 'Referrals', if(ISBLANK([YTD Referrals]), 0, [YTD Referrals]),    Selection = 'WID', IF(ISBLANK([YTD WID]), 0, [YTD WID]),    Selection = 'WCFC', IF(ISBLANK([WCFC YTD]), 0, [WCFC YTD]))","isHidden":false},{"name":"CY CW Total Sales","expression":"var prior_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR], DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT], 'PREVIOUS')returnCALCULATE(    sum(ANBP_OtherRev_DD[Value]),    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_week,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"CY Wkly Avg Total Sales","expression":"var curr_year = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT],'CURRENT')var last_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT],'CURRENT')-1RETURNDIVIDE([YTD Total Sales], last_week)","isHidden":false},{"name":"CY PW Total Sales","expression":"var Selection = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR])var prior_2wks = Selection -1returnCALCULATE(    sum(ANBP_OtherRev_DD[Value]),    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_2wks,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"Wow Total Sales","expression":"if(and([YTD Total Sales], [CY PW Total Sales]), [YTD Total Sales] - [CY PW Total Sales])","isHidden":false},{"name":"Weekly Trend Total Sales","expression":"AVERAGEX(\\tKEEPFILTERS(VALUES(\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_WK_NBR])),\\tCALCULATE([Wow Total Sales]))","isHidden":false},{"name":"% Adopted Advisors","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[NPG]),SELECTEDVALUE(RFO_Zone[NPG]),                   if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Core or Growth]),SELECTEDVALUE(RFO_Zone[Core or Growth]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel])))))))))returnif(max(\u0027Advice Adoption - TAG\u0027[Level])=FilterChoice,\u0027Advice Adoption - TAG\u0027[Advice Adoption % TAG],if(max(\u0027Advice Adoption - Market\u0027[Market])=FilterChoice,\u0027Advice Adoption - Market\u0027[Advice Adoption % Market],\u0027Advice Adoption - Enterprise\u0027[% Adopting Advisors Enterprise]))","isHidden":false},{"name":"What\u0027s New Msg","expression":"VAR EndDate = LOOKUPVALUE(\u0027Whats New_Alert Messages\u0027[End Date],\u0027Whats New_Alert Messages\u0027[Message Description],'What\u0027s New') RETURNIF(TODAY()\u003c=EndDate,LOOKUPVALUE(\u0027Whats New_Alert Messages\u0027[Message],\u0027Whats New_Alert Messages\u0027[Message Description], 'What\u0027s New'),'')","isHidden":false},{"name":"Show What\u0027s New Msg Box","expression":"VAR EndDate = LOOKUPVALUE(\u0027Whats New_Alert Messages\u0027[End Date],\u0027Whats New_Alert Messages\u0027[Message Description],'What\u0027s New')RETURNIF(TODAY()\u003c=EndDate,1,0)","isHidden":false},{"name":"Alert Msg","expression":"VAR AlertMsg = LOOKUPVALUE(\u0027Whats New_Alert Messages\u0027[Message],\u0027Whats New_Alert Messages\u0027[Message Description],'Alert!')RETURNIF(AlertMsg\u003c\u003eBLANK(),AlertMsg,'')","isHidden":false},{"name":"Show Alert Msg Box","expression":"VAR AlertMsg = LOOKUPVALUE(\u0027Whats New_Alert Messages\u0027[Message],\u0027Whats New_Alert Messages\u0027[Message Description],'Alert!')RETURNIF([Alert Msg]\u003c\u003eBLANK(),1,0)","isHidden":false}],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i44FAA==', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Column1 = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Column1', type text}}),    #'Removed Columns' = Table.RemoveColumns(#'Changed Type',{'Column1'})in    #'Removed Columns'"}]},{"name":"RAR Contracts","isHidden":false,"storageMode":"Import","columns":[{"name":"JOIN VALUE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"ZONE_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_Mkt","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Year","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Week","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Current Wk","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Count","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Contract Goals","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Cumulative Contract Goals","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG Contract Goals","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP Contract Goals","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//SHARED//Public//DI and BI//Capacity Dashboard//Capacity Dashboard-RAR_Contracts.xlsx'), null, true),    Sheet1_Sheet = Source{[Item='Sheet1',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'JOIN VALUE', type text}, {'RFO_ID', Int64.Type}, {'ZONE_ID', type text}, {'RFO_Mkt', type text}, {'Type', type text}, {'Year', Int64.Type}, {'Week', Int64.Type}, {'Current Wk', Int64.Type}, {'Count', Int64.Type}}),    #'Filtered Rows' = Table.SelectRows(#'Changed Type', each ([RFO_ID] \u003c\u003e 717 and [RFO_ID] \u003c\u003e 718))in    #'Filtered Rows'"}]},{"name":"Pace Performance Snapshot","isHidden":false,"storageMode":"Import","columns":[{"name":"Organization Dimension Surrogate Key","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Organization Dimension Version Number","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Organization Lead Dimension Surrogate Key","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Organization Lead Dimension Version Number","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Pace Performance Target Dimension Surrogate Key","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Pace Performance Target Version Number","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Process Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Tenure Data","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Month","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"EOQ_Month","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"EOY_Month","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Tenure_Months","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EOY_Tenure","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EOQ_Tenure","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EOM_Tenure","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Production Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Snapshot Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Business Interruption Day Value","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FP_Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Leader_TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Leader_Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Life and Health GRID Credit Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"LH_Pace_Target","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"GRID Credit Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Pace_Target","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EOY_Target","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EOY_Range_Amt","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EOQ_Target","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EOQ_Range_Amt","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EOM_Target","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EOM_Range_Amt","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"ABOVE_BELOW_LH","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Prior Advisor Experience Indicator","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CURR_WK_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ABOVE_BELOW","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Target AMT","dataType":"String","isHidden":false,"expression":"related(\u0027DM_01 Pace Performance Target Dimension\u0027[GRID Credit Amount])","columnType":"Calculated"},{"name":"Target Range","dataType":"String","isHidden":false,"expression":"related(\u0027DM_01 Pace Performance Target Dimension\u0027[GRID Credit Range Amount])","columnType":"Calculated"},{"name":"Current Pace Target","dataType":"String","isHidden":false,"expression":"if(\u0027Pace Performance Snapshot\u0027[Process Date]=date(2023,12,31),calculate(sum(\u0027Pace Performance Snapshot\u0027[EOY Pace Target])),if(\u0027Pace Performance Snapshot\u0027[TSID] in {'TS78250','TS75194','TS77919'},calculate(sum(\u0027Pace Performance Snapshot\u0027[Target AMT])+((sum(\u0027Pace Performance Snapshot\u0027[Tenure_Months])-sum(\u0027Pace Performance Snapshot\u0027[Month]))*sum(\u0027Pace Performance Snapshot\u0027[Target Range]))),    calculate(sum(\u0027Pace Performance Snapshot\u0027[Pace_Target]))))","columnType":"Calculated"},{"name":"EOY Pace Target","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"ABOVE/BELOW EOY","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Pace Amount","expression":"var MAXDATE = max(\u0027Pace Performance Snapshot\u0027[Process Date])returncalculate(sum(\u0027Pace Performance Snapshot\u0027[GRID Credit Amount]),\u0027Pace Performance Snapshot\u0027[Process Date]=MAXDATE)","isHidden":false},{"name":"ABOVE/BELOW","expression":"Var Pace_Amt = \u0027Pace Performance Snapshot\u0027[Pace Amount]Var Pace_Tgt = \u0027Pace Performance Snapshot\u0027[Current_Pace_Target]Var Diff = Pace_Amt - Pace_TgtReturnIF(FORMAT(\u0027Pace Performance Snapshot\u0027[Current GAP to Target],'Whole Number') \u003c\u003e '',   IF(Diff \u003e 0, 'ABOVE', 'BELOW'),   BLANK())","isHidden":false},{"name":"Current_Pace_Target","expression":"var MAXDATE = max(\u0027Pace Performance Snapshot\u0027[Process Date])returncalculate(sum(\u0027Pace Performance Snapshot\u0027[Current Pace Target]),\u0027Pace Performance Snapshot\u0027[Process Date]=MAXDATE)","isHidden":false},{"name":"Current GAP to Target","expression":"calculate(\u0027Pace Performance Snapshot\u0027[Pace Amount]-\u0027Pace Performance Snapshot\u0027[Current_Pace_Target],\u0027Pace Performance Snapshot\u0027[ABOVE_BELOW]\u003c\u003e'')","isHidden":false},{"name":"Above Count","expression":"var MAXDATE = max(\u0027Pace Performance Snapshot\u0027[Process Date])returncalculate(    distinctcount(\u0027Pace Performance Snapshot\u0027[TSID]),    filter(\u0027Pace Performance Snapshot\u0027,\u0027Pace Performance Snapshot\u0027[ABOVE/BELOW]='ABOVE'),    \u0027Pace Performance Snapshot\u0027[Process Date]= MAXDATE)","isHidden":false},{"name":"Below Count","expression":"var MAXDATE = max(\u0027Pace Performance Snapshot\u0027[Process Date])returncalculate(    distinctcount(\u0027Pace Performance Snapshot\u0027[TSID]),     filter(\u0027Pace Performance Snapshot\u0027,\u0027Pace Performance Snapshot\u0027[ABOVE/BELOW]='BELOW'),    \u0027Pace Performance Snapshot\u0027[Process Date]= MAXDATE)","isHidden":false},{"name":"% Above Pace","expression":"divide(\u0027Pace Performance Snapshot\u0027[Above Count],\u0027Pace Performance Snapshot\u0027[Above Count]+[Below Count])","isHidden":false},{"name":"Above Count 52 wk avg","expression":"calculate(    count(\u0027Pace Performance Snapshot\u0027[TSID]),    filter(\u0027Pace Performance Snapshot\u0027,\u0027Pace Performance Snapshot\u0027[ABOVE/BELOW]='ABOVE'))","isHidden":false},{"name":"Below Count 52 Wk Avg","expression":"calculate(     count(\u0027Pace Performance Snapshot\u0027[TSID]),     filter(\u0027Pace Performance Snapshot\u0027,\u0027Pace Performance Snapshot\u0027[ABOVE/BELOW]='BELOW'))","isHidden":false},{"name":"% Above Pace 52 wk avg","expression":"divide(\u0027Pace Performance Snapshot\u0027[Above Count 52 wk avg],\u0027Pace Performance Snapshot\u0027[Above Count 52 wk avg]+[Below Count 52 Wk Avg])","isHidden":false},{"name":"NFA Productivity","expression":"''","isHidden":false}],"source":[{"expression":"let    Source = Sql.Database('dbedwdwprd', 'enterprisedatamart', [Query='SELECT #(lf) a.[Organization Dimension Surrogate Key]#(lf)      ,a.[Organization Dimension Version Number]#(lf)      ,a.[Organization Lead Dimension Surrogate Key]#(lf)      ,a.[Organization Lead Dimension Version Number]#(lf)      ,a.[Pace Performance Target Dimension Surrogate Key]#(lf)      ,a.[Pace Performance Target Version Number]#(lf)      ,a.[Process Date]#(lf)      ,case when b.[Source System Key Text] in (\u0027TS77919\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end as [Tenure Data]#(lf)         ,datediff(month, case when b.[Source System Key Text] in (\u0027TS77919\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end, DATEADD(mm, DATEDIFF(mm, 0, GETDATE()) + 1, -1)) as Month#(lf)         --,datediff(month, [Tenure Data], DATEADD (dd, +14, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()) +1, 0))) as EOQ_Month#(lf)#(tab)#(tab) ,datediff(month, case when b.[Source System Key Text] in (\u0027TS77919\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end, case when GETDATE()\u003eDATEFROMPARTS(year(getdate()),10,16) then (DATEADD (dd, -1, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()) + 1, 0)))#(lf)#(tab)#(tab) else DATEADD (dd, +14, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()-15) + 1, 0))#(lf)#(tab)#(tab) end) as EOQ_Month#(lf)#(tab)#(tab) --,(DATEADD (dd, -1, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()) + 1, 0))) as Current_QTR#(lf)#(tab)#(tab) /*,case when GETDATE()\u003eDATEFROMPARTS(year(getdate()),10,16) then (DATEADD (dd, -1, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()) + 1, 0)))#(lf)#(tab)#(tab) else DATEADD (dd, +14, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()-15) + 1, 0))#(lf)#(tab)#(tab) end as Quarter_End*/#(lf)#(tab)#(tab) --,DATEADD (dd, +14, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()), 0)) as Previous_QTR#(lf)         ,datediff(month, case when b.[Source System Key Text] in (\u0027TS77919\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end, DATEADD(yy, DATEDIFF(yy, 0, GETDATE()) + 1, -1)) as EOY_Month#(lf)         ,datediff(month, case when b.[Source System Key Text] in (\u0027TS77919\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end, [Process Date]) - #(lf)         (DATEPART(dd,case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end)*1.0-1.0)/DAY(EOMONTH(case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end)) + #(lf)         (DATEPART(dd,[Process Date])*1.0)/DAY(EOMONTH([Process Date])) as Tenure_Months#(lf)#(lf)       ,datediff(month, case when b.[Source System Key Text] in (\u0027TS77919\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end,DATEADD(yy, DATEDIFF(yy, 0, GETDATE()) + 1, -1)) - 1 +#(lf)  1-1.0*(day(case when b.[Source System Key Text] in (\u0027TS77919\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end)-1)/ day(dateadd(m, datediff(m,-1, case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end), -1))#(lf)  + 1.0*(day(DATEADD(yy, DATEDIFF(yy, 0, GETDATE()) + 1, -1))-1)/ day(dateadd(m, datediff(m,-1, DATEADD(yy, DATEDIFF(yy, 0, GETDATE()) + 1, -1)), -1)) as EOY_Tenure#(lf)#(lf)       ,datediff(month, case when b.[Source System Key Text] in (\u0027TS77919\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end,case when GETDATE()\u003eDATEFROMPARTS(year(getdate()),10,16) then (DATEADD (dd, -1, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()) + 1, 0)))#(lf)#(tab)#(tab) else DATEADD (dd, +14, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()-15) + 1, 0))#(lf)#(tab)#(tab) end) - 1 +#(lf)  1-1.0*(day(case when b.[Source System Key Text] in (\u0027TS77919\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end)-1)/ day(dateadd(m, datediff(m,-1, case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end), -1))#(lf)  + 1.0*(day(case when GETDATE()\u003eDATEFROMPARTS(year(getdate()),10,16) then (DATEADD (dd, -1, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()) + 1, 0)))#(lf)#(tab)#(tab) else DATEADD (dd, +14, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()-15) + 1, 0))#(lf)#(tab)#(tab) end)-1)/ day(dateadd(m, datediff(m,-1, case when GETDATE()\u003eDATEFROMPARTS(year(getdate()),10,16) then (DATEADD (dd, -1, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()) + 1, 0)))#(lf)#(tab)#(tab) else DATEADD (dd, +14, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()-15) + 1, 0))#(lf)#(tab)#(tab) end), -1)) as EOQ_Tenure#(lf)#(lf)      ,datediff(month, case when b.[Source System Key Text] in (\u0027TS77919\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end,DATEADD(mm, DATEDIFF(mm, 0, GETDATE()) + 1, -1)) - 1 +#(lf)  1-1.0*(day(case when b.[Source System Key Text] in (\u0027TS77919\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end)-1)/ day(dateadd(m, datediff(m,-1, case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end), -1))#(lf)  + 1.0*(day(DATEADD(mm, DATEDIFF(mm, 0, GETDATE()) + 1, -1))-1)/ day(dateadd(m, datediff(m,-1, DATEADD(mm, DATEDIFF(mm, 0, GETDATE()) + 1, -1)), -1)) as EOM_Tenure#(lf)      ,a.[Production Date]#(lf)      ,a.[Snapshot Type Code]#(lf)      ,a.[Business Interruption Day Value]#(lf)         ,b.[Source System Key Text] as TSID#(lf)         ,CONCAT(b.[First Name],\u0027 \u0027,b.[Last Name]) as FP_Name#(lf)         ,b.[Job Type Code]#(lf)         ,CONCAT((LEFT(sale_hier_dim.[ORZN_ZONE_CDE],4)),\u0027-\u0027,sale_hier_dim.ORZN_DEPT_DSCR) as TAG#(lf)#(tab)     ,sale_hier_dim.ORZN_ZONE_CDE [Market]#(lf)         ,c.[Source System Key Text] as Leader_TSID#(lf)         ,CONCAT(c.[First Name],\u0027 \u0027,c.[Last Name]) as Leader_Name#(lf)      ,a.[Life and Health GRID Credit Amount]#(lf)      ,a.[Life and Health Prorated GRID Credit Amount] as LH_Pace_Target#(lf)      ,a.[GRID Credit Amount]#(lf)      ,[Prorated GRID Credit Amount] as Pace_Target#(lf)         ,d.[GRID Credit Amount] as EOY_Target#(lf)         ,d.[GRID Credit Range Amount] as EOY_Range_Amt#(lf)         ,e.[GRID Credit Amount] as EOQ_Target#(lf)         ,e.[GRID Credit Range Amount] as EOQ_Range_Amt#(lf)         ,f.[GRID Credit Amount] as EOM_Target#(lf)         ,f.[GRID Credit Range Amount] as EOM_Range_Amt#(lf)         ,case when [Prior Advisor Experience Indicator] = \u0027Y\u0027 or b.[Job Type Code] = \u0027002010\u0027 then \u0027\u0027#(lf)         when a.[GRID Credit Amount] \u003e a.[Prorated GRID Credit Amount] then \u0027ABOVE\u0027#(lf)         when a.[GRID Credit Amount] \u003c a.[Prorated GRID Credit Amount] then \u0027BELOW\u0027#(lf)#(tab)#(tab) else \u0027\u0027#(lf)         end as ABOVE_BELOW#(lf)         ,case when [Prior Advisor Experience Indicator] = \u0027Y\u0027 or b.[Job Type Code] = \u0027002010\u0027 then \u0027\u0027#(lf)         when a.[Life and Health GRID Credit Amount] \u003e a.[Life and Health Prorated GRID Credit Amount] then \u0027ABOVE\u0027#(lf)         when a.[Life and Health GRID Credit Amount] \u003c a.[Life and Health Prorated GRID Credit Amount] then \u0027BELOW\u0027#(lf)#(tab)#(tab) else \u0027\u0027#(lf)         end as ABOVE_BELOW_LH#(lf)     ,[Prior Advisor Experience Indicator]#(lf)       ,case when a.[Process Date] = max_process_date.[Max Process Date]then \u0027Y\u0027#(lf)         else \u0027N\u0027#(lf)         end as CURR_WK_IND#(lf)  FROM [EnterpriseDataMart].[DM_01].[Pace Performance Snapshot Fact] a#(lf)  inner join [EnterpriseDataMart].[DM_01].[Organization Dimension] b#(lf)   on (a.[Organization Dimension Surrogate Key]=b.[Organization Dimension Surrogate Key] and#(lf)       a.[Process Date]\u003e=b.[Effective Begin Date] and a.[Process Date]\u003c=b.[Effective End Date])#(lf)  inner join (SELECT MAX([Process Date]) [Max Process Date] FROM [DM_01].[Pace Performance Snapshot Fact]) as max_process_date on \u0027a\u0027 = \u0027a\u0027#(lf)  inner join [DM_01].[Date Dimension] dd on (a.[Process Date]=dd.[Calendar Date Date])#(lf)   left join [EnterpriseDataMart].[DM_01].[SALE_HIER_DIM] sale_hier_dim#(lf)    on ((#(lf)    (sale_hier_dim.EFF_BEG_DT\u003c=a.[Process Date])#(lf)        or#(lf)        (#(lf)        (a.[Process Date]\u003c(SELECT min(EFF_BEG_DT) FROM [EnterpriseDataMart].[DM_01].[SALE_HIER_DIM] subq WHERE b.[Source System Key Text]=subq.[SALE_HIER_ID] and subq.CURR_ROW_IND = \u0027Y\u0027))#(lf)        and#(lf)        sale_hier_dim.EFF_BEG_DT=(SELECT min(EFF_BEG_DT) FROM [EnterpriseDataMart].[DM_01].[SALE_HIER_DIM] subq WHERE b.[Source System Key Text]=subq.[SALE_HIER_ID] and subq.CURR_ROW_IND = \u0027Y\u0027)#(lf)        ))#(lf)        and #(lf)        (a.[Process Date]\u003c= DATEADD(day,-1,sale_hier_dim.EFF_END_DT))#(lf)        and sale_hier_dim.CURR_ROW_IND = \u0027Y\u0027#(lf)        and b.[Source System Key Text]=sale_hier_dim.[SALE_HIER_ID])#(lf)#(lf)  #(lf)  #(lf)  #(lf)  inner join [EnterpriseDataMart].[DM_01].[Organization Dimension] c#(lf)   on (a.[Organization Lead Dimension Surrogate Key]=c.[Organization Dimension Surrogate Key] and#(lf)    a.[Process Date]\u003e=c.[Effective Begin Date] and a.[Process Date]\u003c=c.[Effective End Date])#(lf)  left join [EnterpriseDataMart].[DM_01].[Pace Performance Target Dimension] d#(lf)   on (datediff(month, case when b.[Source System Key Text] in (\u0027TS77919\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end, DATEADD(yy, DATEDIFF(yy, 0, GETDATE()) + 1, -1))=d.[Calendar Year Month Number])#(lf)  left join [EnterpriseDataMart].[DM_01].[Pace Performance Target Dimension] e#(lf)   on (datediff(month, case when b.[Source System Key Text] in (\u0027TS77919\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end,case when GETDATE()\u003eDATEFROMPARTS(year(getdate()),10,16) then (DATEADD (dd, -1, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()) + 1, 0)))#(lf)#(tab)#(tab) else DATEADD (dd, +14, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()-15) + 1, 0))#(lf)#(tab)#(tab) end)=e.[Calendar Year Month Number])#(lf)  left join [EnterpriseDataMart].[DM_01].[Pace Performance Target Dimension] f#(lf)   on (datediff(month, case when b.[Source System Key Text] in (\u0027TS77919\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end, DATEADD(mm, DATEDIFF(mm, 0, GETDATE()) + 1, -1))=f.[Calendar Year Month Number])']),    #'Added Custom' = Table.AddColumn(Source, 'ABOVE/BELOW', each if [Tenure_Months] \u003c= 2.25 then '' else [ABOVE_BELOW]),    #'Removed Columns' = Table.RemoveColumns(#'Added Custom',{'ABOVE_BELOW'}),    #'Reordered Columns' = Table.ReorderColumns(#'Removed Columns',{'Organization Dimension Surrogate Key', 'Organization Dimension Version Number', 'Organization Lead Dimension Surrogate Key', 'Organization Lead Dimension Version Number', 'Pace Performance Target Dimension Surrogate Key', 'Pace Performance Target Version Number', 'Process Date', 'Tenure Data', 'Month', 'EOQ_Month', 'EOY_Month', 'Tenure_Months', 'EOY_Tenure', 'EOQ_Tenure', 'EOM_Tenure', 'Production Date', 'Snapshot Type Code', 'Business Interruption Day Value', 'TSID', 'FP_Name', 'Job Type Code', 'TAG', 'Market', 'Leader_TSID', 'Leader_Name', 'Life and Health GRID Credit Amount', 'LH_Pace_Target', 'GRID Credit Amount', 'Pace_Target', 'EOY_Target', 'EOY_Range_Amt', 'EOQ_Target', 'EOQ_Range_Amt', 'EOM_Target', 'EOM_Range_Amt', 'ABOVE/BELOW', 'ABOVE_BELOW_LH', 'Prior Advisor Experience Indicator', 'CURR_WK_IND'}),    #'Renamed Columns' = Table.RenameColumns(#'Reordered Columns',{{'ABOVE/BELOW', 'ABOVE_BELOW'}}),    #'Filtered Rows' = Table.SelectRows(#'Renamed Columns', each [Tenure_Months] \u003e= 0),    #'Merged Queries' = Table.NestedJoin(#'Filtered Rows', {'TSID'}, #'12_31 Pace Export', {'TSID'}, '12_31 Pace Export', JoinKind.LeftOuter),    #'Expanded 12_31 Pace Export' = Table.ExpandTableColumn(#'Merged Queries', '12_31 Pace Export', {'EOY Pace Target', 'ABOVE/BELOW EOY'}, {'EOY Pace Target', 'ABOVE/BELOW EOY'})in    #'Expanded 12_31 Pace Export'"}]},{"name":"DM_01 Pace Performance Target Dimension","isHidden":false,"storageMode":"Import","columns":[{"name":"Pace Performance Target Dimension Surrogate Key","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Pace Performance Target Dimension Version Number","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Effective Begin Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Effective End Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Current Row Indicator","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Source System Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Source System Key Test","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Source Sub System Text","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Calendar Year Month Number","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"GRID Credit Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"GRID Credit Range Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Life and Health GRID Credit Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Life and Health GRID Credit Range Amount","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Sql.Database('dbedwdwprd', 'EnterpriseDataMart'),    #'DM_01_Pace Performance Target Dimension' = Source{[Schema='DM_01',Item='Pace Performance Target Dimension']}[Data]in    #'DM_01_Pace Performance Target Dimension'"}]},{"name":"WID","isHidden":false,"storageMode":"Import","columns":[{"name":"RALN_RFO_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RALN_MKT_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CalYr","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CalWk","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"max_cal_dt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ANBP_OtherRev","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Value","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'SELECT #(lf) #(lf)    CASE WHEN B.''Total Sales Reporting Product Sub-Group Description''= \u0027TAN Managed Accounts\u0027 THEN \u00270716-01-00\u0027 ELSE A.RALN_MKT_CDE END AS RALN_MKT_CDE,#(lf)    CASE WHEN B.''Total Sales Reporting Product Sub-Group Description''= \u0027TAN Managed Accounts\u0027 THEN \u00270716\u0027 ELSE A.RALN_RFO_CDE END AS RALN_RFO_CDE,#(lf)    A.MVP,#(lf)    A.Market,#(lf)    #(lf)    C.''Distribution Performance Reporting Year Number'' AS CalYr,#(lf)   C.''Distribution Performance Reporting Year Week Number'' AS CalWk,#(lf)    c.max_cal_dt,#(lf)      B.''Credited Advisor Identifier'' AS COMP_PYEE_ID,#(lf)    UPPER(B.''Total Sales Reporting Product Sub-Group Description'') AS Product,#(lf)    \u0027WID\u0027 AS ANBP_OtherRev,#(lf)   SUM( B.''WID'') AS Value,#(lf)   D.''Employee Name'',#(lf)   #(lf)   #(lf)#(tab)B.''Distribution Channel Code'',#(lf)    B.''Distribution Channel Description''#(lf) #(lf)FROM#(lf) #(lf) #(lf)  (SELECT #(lf) #(lf)''Sales Transaction Process Date'',#(lf)''Credited Advisor Identifier'',#(lf)    ''Distribution Channel Code'',#(lf)    ''Distribution Channel Description'',#(lf)    ''Total Sales Reporting Product Type'',#(lf)    ''Total Sales Reporting Product Group Description'',#(lf)    ''Total Sales Reporting Product Sub-Group Description'',#(lf)SUM(''Weighted Investment Deposit Amount'') AS WID#(lf) #(lf)FROM  ENTERPRISE_EDW.PRESENTATION_01.''WID Transaction Confidential''#(lf) #(lf)WHERE YEAR(''Sales Transaction Process Date'') \u003e= YEAR(GETDATE())-2 #(lf)   #(lf)   AND ''Distribution Channel Code'' IN (\u0027CAREER\u0027, \u0027OTH\u0027, \u0027TAN\u0027,\u0027TFGT\u0027,\u0027TRUST\u0027)#(lf) #(lf)GROUP BY #(lf) #(lf)    ''Sales Transaction Process Date'',#(lf)    ''Credited Advisor Identifier'',#(lf)    ''Distribution Channel Code'',#(lf)    ''Distribution Channel Description'',#(lf)    ''Total Sales Reporting Product Type'',#(lf)    ''Total Sales Reporting Product Group Description'',#(lf)    ''Total Sales Reporting Product Sub-Group Description'')#(lf) #(lf) AS B #(lf) #(lf)LEFT JOIN#(lf) #(lf)//Select Current and Transfer rows from Sales Hierarchy--- START#(lf) #(lf)(SELECT DISTINCT#(lf) #(lf)    ''Sales Hierarchy Identifier'',#(lf)    ''Effective Begin Date'' AS BeginDate,#(lf)    ''Effective End Date''-1 AS EndDate,#(lf)    ''Organization Zone Code'' AS RALN_MKT_CDE,#(lf)    ''Organization Sub Department Code'' AS RALN_RFO_CDE,#(lf)    (case when length(''Organization Zone Code'') = 7 then \u002700\u0027#(lf)             else substr(''Organization Zone Code'',6,2)#(lf)           end) as MVP,#(lf)          (case when length(''Organization Zone Code'') = 7 then substr(''Organization Zone Code'',6,2) #(lf)             else substr(''Organization Zone Code'',9,2)#(lf)           end) as Market#(lf)           #(lf)           #(lf)FROM ENTERPRISE_EDW.PRESENTATION_01.''Sale Hierarchy Dimension''#(lf)    WHERE #(lf) #(lf)        ''Current Row Indicator''=\u0027Y\u0027#(lf)        AND ''Effective Begin Date''\u003c=(''Effective End Date''-1)) AS A#(lf)        #(lf)//Select Current and Transfer rows from Sales Hierarchy--- END#(lf) #(lf)ON (A.''Sales Hierarchy Identifier''=B.''Credited Advisor Identifier'' AND B.''Sales Transaction Process Date'' BETWEEN A.BeginDate  AND A.EndDate)#(lf) #(lf) #(lf)LEFT JOIN (#(lf)  #(lf)//Determine Max Cal Day of the week--- START#(lf) #(lf)SELECT#(lf)  #(lf)    T1.''Calendar Day Date'',#(lf)    T1.''Distribution Performance Reporting Year Number'',#(lf)    T1.''Distribution Performance Reporting Year Week Number'',#(lf)    T2.max_cal_dt#(lf)  #(lf)  FROM ENTERPRISE_EDW.PRESENTATION_01.''Distribution Performance Dates Dimension'' AS T1#(lf)  #(lf)  INNER JOIN#(lf)  #(lf)  (SELECT   #(lf)    ''Distribution Performance Reporting Year Number'',#(lf)    ''Distribution Performance Reporting Year Week Number'',#(lf)    MAX(''Calendar Day Date'') AS max_cal_dt#(lf) #(lf)    FROM ENTERPRISE_EDW.PRESENTATION_01.''Distribution Performance Dates Dimension''#(lf) #(lf)    GROUP BY     #(lf)        ''Distribution Performance Reporting Year Number'',#(lf)        ''Distribution Performance Reporting Year Week Number'') AS T2 ON (T1.''Distribution Performance Reporting Year Number''=T2.''Distribution Performance Reporting Year Number'' AND T1.''Distribution Performance Reporting Year Week Number''=T2.''Distribution Performance Reporting Year Week Number'')#(lf) #(lf)  ) AS C #(lf)  #(lf)//Determine Max Cal Day of the week--- END#(lf)    #(lf)    ON (B.''Sales Transaction Process Date''=C.''Calendar Day Date'')#(lf)    #(lf) #(lf)LEFT JOIN ENTERPRISE_EDW.PRESENTATION_01.''Workforce Dimension Detail'' AS D ON (B.''Credited Advisor Identifier''=D.''Employee Identifier'' AND D.''Current Row Indicator''=\u0027Y\u0027)#(lf)  #(lf)  GROUP BY#(lf)  #(lf)#(tab)A.RALN_MKT_CDE,#(lf)    A.RALN_RFO_CDE,#(lf)    A.MVP,#(lf)    A.Market,#(lf)    C.''Distribution Performance Reporting Year Number'',#(lf)    C.''Distribution Performance Reporting Year Week Number'',#(lf)    c.max_cal_dt,#(lf)    ''Distribution Channel Code'',#(lf) #(lf)    B.''Credited Advisor Identifier'',#(lf)    B.''Total Sales Reporting Product Type'',#(lf)    B.''Total Sales Reporting Product Group Description'',#(lf)    B.''Total Sales Reporting Product Sub-Group Description'',#(lf)    D.''Employee Name'',#(lf)    #(lf)       #(lf)#(tab)B.''Distribution Channel Code'',#(lf)    B.''Distribution Channel Description''', null, [EnableFolding=true]),    #'Reordered Columns' = Table.ReorderColumns(Source,{'RALN_RFO_CDE', 'MVP', 'MARKET', 'RALN_MKT_CDE', 'CALYR', 'CALWK', 'MAX_CAL_DT', 'COMP_PYEE_ID', 'PRODUCT', 'ANBP_OTHERREV', 'VALUE', 'Employee Name', 'Distribution Channel Code', 'Distribution Channel Description'}),    #'Removed Columns' = Table.RemoveColumns(#'Reordered Columns',{'COMP_PYEE_ID', 'Employee Name', 'Distribution Channel Code', 'Distribution Channel Description'}),    #'Renamed Columns' = Table.RenameColumns(#'Removed Columns',{{'MARKET', 'Market'}, {'CALYR', 'CalYr'}, {'CALWK', 'CalWk'}, {'MAX_CAL_DT', 'max_cal_dt'}, {'PRODUCT', 'Product'}, {'ANBP_OTHERREV', 'ANBP_OtherRev'}, {'VALUE', 'Value'}})in    #'Renamed Columns'"}]},{"name":"Advice Adoption - TAG","isHidden":false,"storageMode":"Import","columns":[{"name":"Advisor Group","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Adopting Advisors %","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Rank (sorted by)","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Level","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Advice Adoption % TAG","expression":"sum(\u0027Advice Adoption - TAG\u0027[Adopting Advisors %])","isHidden":false},{"name":"Rank Advice Adoption TAG","expression":"sum(\u0027Advice Adoption - TAG\u0027[Rank (sorted by)])","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Distribution Dashboard//Advice Adoption.xlsx'), null, true),    Export_Sheet = Source{[Item='TAG',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Export_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Advisor Group', type text}, {'Adopting Advisors %', Percentage.Type}, {'Rank (sorted by)', Int64.Type}})in    #'Changed Type'"}]},{"name":"Advice Adoption - Market","isHidden":false,"storageMode":"Import","columns":[{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market with Leader","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Adopting Advisors %","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Rank (sorted by)","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Advice Adoption % Market","expression":"sum(\u0027Advice Adoption - Market\u0027[Adopting Advisors %])","isHidden":false},{"name":"Rank Advice Adoption Market","expression":"sum(\u0027Advice Adoption - Market\u0027[Rank (sorted by)])","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Distribution Dashboard//Advice Adoption.xlsx'), null, true),    Market_Sheet = Source{[Item='Market',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Market_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Market', type text}, {'Market with Leader', type text}, {'Adopting Advisors %', type number}, {'Rank (sorted by)', Int64.Type}})in    #'Changed Type'"}]},{"name":"Advice Adoption - MVP","isHidden":false,"storageMode":"Import","columns":[{"name":"Level","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP with Leader","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Adopting Advisor %","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Rank (sorted by)","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Advice Adoption % MVP","expression":"sum(\u0027Advice Adoption - MVP\u0027[Adopting Advisor %])","isHidden":false},{"name":"Rank Advice Adoption MVP","expression":"sum(\u0027Advice Adoption - MVP\u0027[Rank (sorted by)])","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Distribution Dashboard//Advice Adoption.xlsx'), null, true),    MVP_Sheet = Source{[Item='MVP',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(MVP_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Level', type text}, {'MVP with Leader', type text}, {'Adopting Advisor %', type number}, {'Rank (sorted by)', Int64.Type}})in    #'Changed Type'"}]},{"name":"Appt Yrly Avg by Wk","isHidden":false,"storageMode":"Import","columns":[{"name":"DTRB_PERF_RPT_WK_END_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Appt_Week_SAS","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Week_num_SAS","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Forecast_Appts","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Appt Forecast","expression":"calculate(sum(\u0027Appt Yrly Avg by Wk\u0027[Forecast_Appts]),DTRB_PERF_DATES[Next 31 days Flag])","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Distribution Dashboard//Distribution_Dashboard_Feed_Forecasted_Appts.xlsx'), null, true),    #'Appt Yrly Avg by Wk_Sheet' = Source{[Item='Appt Yrly Avg by Wk',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'Appt Yrly Avg by Wk_Sheet', [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'DTRB_PERF_RPT_WK_END_DT', type date}, {'DTRB_PERF_RPT_WK_NBR', Int64.Type}, {'DTRB_PERF_RPT_YR_NBR', Int64.Type}, {'Appt_Week_SAS', type date}, {'Week_num_SAS', Int64.Type}, {'Forecast_Appts', Int64.Type}})in    #'Changed Type'"}]},{"name":"Advice Adoption - Enterprise","isHidden":false,"storageMode":"Import","columns":[{"name":"Advisor Group ","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Advisor Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Adopting HHLDs 0-20","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Tenure","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Experienced Advisor","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Total Adopted Clients","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Total Adopted New Clients","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Adopted Households","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Adopting Advisor","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Job Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RULE FA","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"% Adopting Advisors Enterprise","expression":"divide(sum(\u0027Advice Adoption - Enterprise\u0027[Adopting Advisor]),DISTINCTCOUNT(\u0027Advice Adoption - Enterprise\u0027[EMP_ID]))","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Distribution Dashboard//Advice Adoption.xlsx'), null, true),    Enterprise_Sheet = Source{[Item='Enterprise',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Enterprise_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Advisor Group ', type text}, {'MVP', type text}, {'Market', type text}, {'EMP_ID', type text}, {'Advisor Name', type text}, {'Adopting HHLDs 0-20', Int64.Type}, {'Tenure', type text}, {'Experienced Advisor', type text}, {'Team Name', type text}, {'Total Adopted Clients', Int64.Type}, {'Total Adopted New Clients', Int64.Type}, {'Adopted Households', Int64.Type}, {'Adopting Advisor', Int64.Type}})in    #'Changed Type'"}]},{"name":"UL VUL Excess_Append Query","isHidden":false,"storageMode":"Import","columns":[{"name":"beg_mth_dt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Value","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CalYr","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Endof Month_Friday","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"max_cal_dt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"CalWk","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Mapping.Product Roll Up","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_CDE_With Duplicate NPG Rows","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ANBP_OtherRev","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Not YTD","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MonthEndDate","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"MONTH","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////VSDEPT//DEPT7900//7173//Analytics Team//Production Reporting//total_sales_weekly//Total Sales Weekly Output.csv'),[Delimiter=',', Columns=18, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Renamed Columns1' = Table.RenameColumns(#'Promoted Headers',{{'Total Sales', 'sales_amt'}, {'Annual New Business Production', 'anbp_amt'}}),    #'Removed Other Columns1' = Table.SelectColumns(#'Renamed Columns1',{'beg_mth_dt', 'sales_amt', 'modifier', 'etrs_dsply_prod_l1', 'etrs_dsply_prod_l2', 'etrs_dsply_chnl_l2'}),    #'Changed Type' = Table.TransformColumnTypes(#'Removed Other Columns1',{{'beg_mth_dt', type date}, {'sales_amt', type number}, {'modifier', type text}, {'etrs_dsply_prod_l2', type text}}),    #'Filtered Rows' = Table.SelectRows(#'Changed Type', each ([etrs_dsply_prod_l2] = 'UL/VUL Excess') and ([modifier] = 'Actual') and ([etrs_dsply_chnl_l2] = 'Enterprise')),    #'Inserted Year' = Table.AddColumn(#'Filtered Rows', 'Year', each Date.Year([beg_mth_dt]), Int64.Type),    #'Added Custom' = Table.AddColumn(#'Inserted Year', 'EndofMonth', each Date.AddDays(Date.EndOfMonth([beg_mth_dt]),0)),    #'Added Custom7' = Table.AddColumn(#'Added Custom', 'Endof Month_Friday', each if Date.DayOfWeekName([EndofMonth])='Saturday' then Date.AddDays([EndofMonth],-1) else if Date.DayOfWeekName([EndofMonth])='Sunday' then Date.AddDays([EndofMonth],-2) else [EndofMonth]),    #'Changed Type1' = Table.TransformColumnTypes(#'Added Custom7',{{'EndofMonth', type date}, {'Endof Month_Friday', type date}}),    #'Renamed Columns' = Table.RenameColumns(#'Changed Type1',{{'sales_amt', 'Value'}, {'etrs_dsply_prod_l2', 'Product'}, {'Year', 'CalYr'}}),    #'Removed Other Columns' = Table.SelectColumns(#'Renamed Columns',{'beg_mth_dt', 'Value', 'Product', 'CalYr', 'EndofMonth', 'Endof Month_Friday'}),    #'Added Custom1' = Table.AddColumn(#'Removed Other Columns', 'max_cal_dt', each Date.EndOfWeek([Endof Month_Friday],Day.Saturday)),    #'Sorted Rows' = Table.Sort(#'Added Custom1',{{'EndofMonth', Order.Descending}}),    #'Added Custom2' = Table.AddColumn(#'Sorted Rows', 'CalWk', each Date.WeekOfYear([max_cal_dt])-1),    #'Removed Columns' = Table.RemoveColumns(#'Added Custom2',{'EndofMonth'}),    #'Added Custom3' = Table.AddColumn(#'Removed Columns', 'Mapping.Product Roll Up', each 'UL/VUL Excess'),    #'Added Custom4' = Table.AddColumn(#'Added Custom3', 'ORZN_CDE_With Duplicate NPG Rows', each 'UL/VUL Excess'),    #'Added Custom5' = Table.AddColumn(#'Added Custom4', 'ANBP_OtherRev', each 'ANBP'),    #'Changed Type2' = Table.TransformColumnTypes(#'Added Custom5',{{'max_cal_dt', type date}, {'CalWk', Int64.Type}, {'ANBP_OtherRev', type text}, {'Mapping.Product Roll Up', type text}, {'ORZN_CDE_With Duplicate NPG Rows', type text}}),    #'Added Custom6' = Table.AddColumn(#'Changed Type2', 'Not YTD', each if Date.Month([max_cal_dt])\u003c=Date.Month(List.Max(#'Changed Type2'[max_cal_dt]))then '' else 'Not YTD'),    #'Filtered Rows1' = Table.SelectRows(#'Added Custom6', each Date.IsInPreviousNYears([beg_mth_dt], 2) or Date.IsInCurrentYear([beg_mth_dt])),    #'Inserted End of Month' = Table.AddColumn(#'Filtered Rows1', 'MonthEndDate', each Date.EndOfMonth([beg_mth_dt]), type date),    #'Inserted Month' = Table.AddColumn(#'Inserted End of Month', 'MONTH', each Date.Month([beg_mth_dt]), Int64.Type)in    #'Inserted Month'"}]},{"name":"12_31 Pace Export","isHidden":false,"storageMode":"Import","columns":[{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Code","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FA Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Tenure Group","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Tenure Months","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Above/Below","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Leader","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Pace Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Pace Target","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EOY Pace Target","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"ABOVE/BELOW EOY","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Current GAP to Target","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Pending","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Current GAP to Target Less Pending","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"LH Pace Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"LH Pace Target","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Current GAP to LH Target","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Last Week Appts","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Last Week Prospect Connect","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"YTD New Clients","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared////Public//DI and BI//Distribution Dashboard//Pace EOY Targets (Corrected).xlsx'), null, true),    Export_Sheet = Source{[Item='Export',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Export_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Market', type text}, {'Job Code', Int64.Type}, {'TSID', type text}, {'FA Name', type text}, {'Tenure Group', type text}, {'Tenure Months', type number}, {'Above/Below', type text}, {'Leader', type text}, {'Pace Amount', type number}, {'Pace Target', type number}, {'EOY Target', type number}, {'ABOVE/BELOW EOY', type text}, {'Current GAP to Target', type number}, {'Pending', Int64.Type}, {'Current GAP to Target Less Pending', type number}, {'LH Pace Amount', type number}, {'LH Pace Target', type number}, {'Current GAP to LH Target', type number}, {'Last Week Appts', Int64.Type}, {'Last Week Prospect Connect', Int64.Type}, {'YTD New Clients', Int64.Type}}),    #'Renamed Columns' = Table.RenameColumns(#'Changed Type',{{'EOY Target', 'EOY Pace Target'}})in    #'Renamed Columns'"}]},{"name":"Daily_Tenure_Counts_DD","isHidden":false,"storageMode":"Import","columns":[{"name":"CAL_DAY_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Year","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Half","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Quarter","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Month","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Tenure_Group","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"COUNT_of_TSID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"COUNT_of_TSL","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"COUNT_of_ASSC_REP","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Tenure Group","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Average Capacity","expression":"divide(sum(Daily_Tenure_Counts_DD[COUNT_of_TSID]),DISTINCTCOUNT(DTRB_PERF_DATES[CAL_DAY_DT]))                            ","isHidden":false},{"name":"Average Capacity CARD","expression":"divide(divide(sum(Daily_Tenure_Counts_DD[COUNT_of_TSID]),DISTINCTCOUNT(DTRB_PERF_DATES[CAL_DAY_DT])),LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT],'PREVIOUS'))","isHidden":false}],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////vsshr//shared////Public//DI and BI//Field Reporting//Daily_Tenure_Counts_DD.csv'),[Delimiter=',', Columns=10, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'CAL_DAY_DT', type date}, {'Year', Int64.Type}, {'Half', Int64.Type}, {'Quarter', Int64.Type}, {'Month', Int64.Type}, {'Tenure_Group', type text}, {'Market', type text}, {'COUNT_of_TSID', Int64.Type}, {'COUNT_of_TSL', Int64.Type}, {'COUNT_of_ASSC_REP', Int64.Type}}),    #'Added Custom' = Table.AddColumn(#'Changed Type', 'Tenure Group', each if Text.StartsWith([Tenure_Group], 'NFA') then 'NFA'else if Text.StartsWith([Tenure_Group], 'VET') then 'VET'else [Tenure_Group]),    #'Filtered Rows' = Table.SelectRows(#'Added Custom', each ([Market] \u003c\u003e '0383-01-00' and [Market] \u003c\u003e '0716-01-00' and [Market] \u003c\u003e '0997-00'))in    #'Filtered Rows'"}]},{"name":"Appointment Switch","isHidden":false,"storageMode":"Import","columns":[{"name":"Metric","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i45WCskvScxRitWJVgpILVJwc1SKjQUA', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Metric = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Metric', type text}})in    #'Changed Type'"}]},{"name":"Whats New_Alert Messages","isHidden":false,"storageMode":"Import","columns":[{"name":"Message Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Message","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"End Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Start Date","dataType":"DateTime","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared////Public//DI and BI//Field Reporting//What\u0027s New and Alert Message//What\u0027s New and Alert Message.xlsx'), null, true),    #'Distribution DB_Sheet' = Source{[Item='Distribution DB',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'Distribution DB_Sheet', [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Message Description', type text}, {'Message', type text}, {'End Date', type date}, {'Start Date', type date}})in    #'Changed Type'"}]},{"name":"Change Log","isHidden":false,"storageMode":"Import","columns":[{"name":"Date","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Author","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Requestor","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Description","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//SHARED//Public//DI and BI//Field Reporting//Change Log//Change Log.xlsx'), null, true),    #'Distribution Dashboard_Sheet' = Source{[Item='Distribution Dashboard',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'Distribution Dashboard_Sheet', [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Date', type any}, {'Author', type text}, {'Requestor', type text}, {'Description', type text}})in    #'Changed Type'"}]}],"expressions":[{"name":"Errors in WMFC_DD","expression":"letSource = WMFC_DD,  #'Detected Type Mismatches' = let    tableWithOnlyPrimitiveTypes = Table.SelectColumns(Source, Table.ColumnsOfType(Source, {type nullable number, type nullable text, type nullable logical, type nullable date, type nullable datetime, type nullable datetimezone, type nullable time, type nullable duration})),    recordTypeFields = Type.RecordFields(Type.TableRow(Value.Type(tableWithOnlyPrimitiveTypes))),    fieldNames = Record.FieldNames(recordTypeFields),    fieldTypes = List.Transform(Record.ToList(recordTypeFields), each [Type]),    pairs = List.Transform(List.Positions(fieldNames), (i) =\u003e {fieldNames{i}, (v) =\u003e if v = null or Value.Is(v, fieldTypes{i}) then v else error [Message = 'The type of the value does not match the type of the column.', Detail = v], fieldTypes{i}})in    Table.TransformColumns(Source, pairs),  #'Added Index' = Table.AddIndexColumn(#'Detected Type Mismatches', 'Row Number' ,1),  #'Kept Errors' = Table.SelectRowsWithErrors(#'Added Index', {'Perfyear', 'RFO', 'Zone_ID', 'Category', 'MFC', 'Perfweek', 'WMFC', 'RFO_MKT', 'PerfYrWk', 'Channel', 'Division', 'Region'}),  #'Reordered Columns' = Table.ReorderColumns(#'Kept Errors', {'Row Number', 'Perfyear', 'RFO', 'Zone_ID', 'Category', 'MFC', 'Perfweek', 'WMFC', 'RFO_MKT', 'PerfYrWk', 'Channel', 'Division', 'Region'})in  #'Reordered Columns'"}],"configuredBy":"Daniel.Syburg@Thrivent.com","configuredById":"54499f33-8e79-4f3b-817f-879c3ff2bb03","isEffectiveIdentityRequired":false,"isEffectiveIdentityRolesRequired":false,"refreshSchedule":{"days":["Monday","Tuesday"],"times":["15:00","15:30"],"enabled":true,"localTimeZoneId":"Central Standard Time","notifyOption":"NoNotification"},"targetStorageMode":"Abf","createdDate":"2020-07-06T13:01:38.077","contentProviderType":"PbixInImportMode"},{"id":"a4b9a501-5ce6-4703-992d-0ebd014d6e7f","name":"Field Activity Dashboard","tables":[{"name":"DTRB_PERF_DATES","isHidden":false,"storageMode":"Import","columns":[{"name":"DT_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CAL_DAY_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_END_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_WK_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"SRC_SYS_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CRET_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"LST_UPDT_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"CRET_USER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LST_UPDT_USER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_DAY_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_MTH_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_QTR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Previous Sunday Date","dataType":"String","isHidden":false,"expression":"LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT], 'Previous')  --DTRB_PERF_DATES[CAL_DAY_DT], today() - 7)","columnType":"Calculated"},{"name":"YTD Date","dataType":"String","isHidden":false,"expression":"today()-1","columnType":"Calculated"},{"name":"YTD Flag","dataType":"String","isHidden":false,"expression":"if(and(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT] \u003c= today()-1, \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'Current'), True, False)","columnType":"Calculated"},{"name":"Max Cal Date","dataType":"String","isHidden":false,"expression":"CALCULATE(MAX(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT]),ALLEXCEPT(\u0027DTRB_PERF_DATES\u0027,\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT]),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT]='Current')","columnType":"Calculated"},{"name":"PYTD Flag","dataType":"String","isHidden":false,"expression":"if(and(DTRB_PERF_DATES[CAL_DAY_DT] \u003c= DATE(YEAR(today()-1)-1,MONTH(today()-1),DAY(today()-1)),DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR] = year(LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT'))-1), True, False)--if(and(DTRB_PERF_DATES[CAL_DAY_DT] \u003c= DATE(YEAR([Yesterday\u0027s date])-1,MONTH([Yesterday\u0027s date]),DAY([Yesterday\u0027s date])), DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR] = year(today())-1), True, False)","columnType":"Calculated"},{"name":"PY2TD Flag","dataType":"String","isHidden":false,"expression":"if(and(DTRB_PERF_DATES[CAL_DAY_DT] \u003c= DATE(YEAR(today()-1)-1,MONTH(today()-1),DAY(today()-1)),DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR] = year(LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT'))-2), True, False)--if(and(DTRB_PERF_DATES[CAL_DAY_DT] \u003c= DATE(YEAR([Yesterday\u0027s date])-2,MONTH([Yesterday\u0027s date]),DAY([Yesterday\u0027s date])), DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR] = year(today())-2), True, False)","columnType":"Calculated"},{"name":"YTD Flag ENGAGEMENT TEAM TAB","dataType":"String","isHidden":false,"expression":"if(and(DTRB_PERF_DATES[CAL_DAY_DT] \u003c= DTRB_PERF_DATES[Prior Sunday], DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR] = DTRB_PERF_DATES[Current Year Dates]), True, False)","columnType":"Calculated"},{"name":"Prior Sunday","dataType":"String","isHidden":false,"expression":"LOOKUPVALUE(DTRB_PERF_DATES[END_OF_WK_DATE_MAX], DTRB_PERF_DATES[CAL_DAY_DT], today() - 7)","columnType":"Calculated"},{"name":"END_OF_WK_DATE_MAX","dataType":"String","isHidden":false,"expression":"calculate(max(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT]), ALLEXCEPT(DTRB_PERF_DATES,DTRB_PERF_DATES[perf_yr_wk]))","columnType":"Calculated"},{"name":"perf_yr_wk","dataType":"String","isHidden":false,"expression":"DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR] \u0026 '-' \u0026 DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR]","columnType":"Calculated"},{"name":"YTD Flag two Sundays","dataType":"String","isHidden":false,"expression":"if(and(DTRB_PERF_DATES[CAL_DAY_DT] \u003c= DTRB_PERF_DATES[Two Sundays Ago], DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR] = DTRB_PERF_DATES[Current Year Dates]), True, False)","columnType":"Calculated"},{"name":"End of 2022 Date","dataType":"String","isHidden":false,"expression":"DTRB_PERF_DATES[Max Cal Date]","columnType":"Calculated"},{"name":"CY Prior Day","dataType":"String","isHidden":false,"expression":"LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'Previous')","columnType":"Calculated"},{"name":"PYTD Date","dataType":"String","isHidden":false,"expression":"date(    year(LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'Previous'))-1,    month(LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'Previous')),    day(LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'Previous')))","columnType":"Calculated"},{"name":"PY2TD Date","dataType":"String","isHidden":false,"expression":"date(    year(LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'Previous'))-2,    month(LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'Previous')),    day(LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'Previous')))","columnType":"Calculated"},{"name":"Month Name","dataType":"String","isHidden":false,"expression":"FORMAT(DTRB_PERF_DATES[CAL_DAY_DT], 'MMMM')","columnType":"Calculated"},{"name":"Quarter","dataType":"String","isHidden":false,"expression":"QUARTER(DTRB_PERF_DATES[CAL_DAY_DT])","columnType":"Calculated"},{"name":"Month Sort","dataType":"String","isHidden":false,"expression":"FORMAT(DTRB_PERF_DATES[CAL_DAY_DT],'MM')","columnType":"Calculated"},{"name":"CY Future Week Flag","dataType":"String","isHidden":false,"expression":"if(and(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT] \u003e= today(), \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'Current'), True, False)","columnType":"Calculated"},{"name":"Current Wk Nbr - Wk Nbr","dataType":"String","isHidden":false,"expression":"DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR] - [Current Week Number]","columnType":"Calculated"},{"name":"Week Name","dataType":"String","isHidden":false,"expression":"if(current wee)","columnType":"Calculated"},{"name":"Prior Day","dataType":"String","isHidden":false,"expression":"LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT], DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT], 'CURRENT') -1","columnType":"Calculated"},{"name":"Prior Year 2 Flag","dataType":"String","isHidden":false,"expression":"if(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR] = DTRB_PERF_DATES[Prior Yr 2], True, False)","columnType":"Calculated"},{"name":"YTD Sunday Flag","dataType":"String","isHidden":false,"expression":"if(and(DTRB_PERF_DATES[CAL_DAY_DT] \u003c= DTRB_PERF_DATES[Prior Sunday], DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT'), True, False)","columnType":"Calculated"},{"name":"Prior Year Flag","dataType":"String","isHidden":false,"expression":"if(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'PREVIOUS', True, False)","columnType":"Calculated"},{"name":"PYTD Flag SF","dataType":"String","isHidden":false,"expression":"if(and(DTRB_PERF_DATES[CAL_DAY_DT] \u003c= DATE(YEAR(today()-1)-1,MONTH(today()-1),DAY(today()-1)),DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR] = year(LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT'))-1), True, False)","columnType":"Calculated"},{"name":"Prior Year 2","dataType":"String","isHidden":false,"expression":"DTRB_PERF_DATES[Current Year] - 2","columnType":"Calculated"},{"name":"PYTD Sunday Flag","dataType":"String","isHidden":false,"expression":"var prevweeknum = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[CAL_DAY_DT],max(DTRB_PERF_DATES[Prior Sunday]))return if(and(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] \u003c= prevweeknum, DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='PREVIOUS'), True, False)","columnType":"Calculated"}],"measures":[{"name":"Previous Sunday Date2","expression":"LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT], 'Previous')","isHidden":false},{"name":"PYTD Date2","expression":"today() - 366","isHidden":false},{"name":"Yesterday\u0027s date","expression":"today()-1","isHidden":false},{"name":"Current Year Dates","expression":"year(today()-5)","isHidden":false},{"name":"Two Sundays Ago","expression":"LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT], today() - 14)","isHidden":false},{"name":"DTRB Current Year","expression":"LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT],'CURRENT')","isHidden":false},{"name":"Current Week Number","expression":"LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT], 'CURRENT')","isHidden":false},{"name":"Current Week + 4 Weeks","expression":"[Current Week Number] + 4","isHidden":false},{"name":"Measure","expression":"Not available","isHidden":false},{"name":"Measure 4","expression":"Not available","isHidden":false},{"name":"Measure 5","expression":"Not available","isHidden":false},{"name":"Prior Yr 2","expression":"DTRB_PERF_DATES[DTRB Current Year] - 2","isHidden":false},{"name":"Current Yr","expression":"LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT],'CURRENT')","isHidden":false}],"source":[{"expression":"let    Source = DB2.Database('podwh021:50000', 'podwh021', [HierarchicalNavigation=true, Implementation='Microsoft']),    COMMON = Source{[Schema='COMMON']}[Data],    DTRB_PERF_DATES1 = COMMON{[Name='DTRB_PERF_DATES']}[Data]in    DTRB_PERF_DATES1"}]},{"name":"Sort Order","isHidden":false,"storageMode":"Import","columns":[{"name":"Category","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Order","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('JYu7CoAwEAR/Ra4WxPcHaCuCliGFhEUPQoR4RPx7Q1LO7KxSNN3OwQiVVJMuFc38mDvAR9EksYs/BOdXTIe11QIIuzOubc5hOddd4g2B8Ubs8xk+sEHkIfEqV4pH0voH', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Category = _t, Order = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Category', type text}, {'Order', Int64.Type}})in    #'Changed Type'"}]},{"name":"Referrals","isHidden":false,"storageMode":"Import","columns":[{"name":"PERS_DIM_SK","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"REFR_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Referral_Occurs","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"ORZN_DEPT_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_ZONE_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Adjusted Service Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Employee Status Type Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Financial Professional Tenure","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Financial Professional Tenure Group","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Department Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO Zone Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee Display Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Type Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TOP 10 - FP Tenure - NFP1-4, Vet, Other","dataType":"String","isHidden":false,"expression":"if(not(\u0027Referrals\u0027[Job Type Code] in {'002000', '002016', '002022', '002024', '002025', '002026', '002027', '003100', '003500'}), 'Other',    if((DTRB_PERF_DATES[Previous Sunday Date2] - \u0027Referrals\u0027[Adjusted Service Date])/ 365.25 \u003c 1, 'NFP1',     if((DTRB_PERF_DATES[Previous Sunday Date2] - \u0027Referrals\u0027[Adjusted Service Date])/ 365.25 \u003c 2, 'NFP2',     if((DTRB_PERF_DATES[Previous Sunday Date2] - \u0027Referrals\u0027[Adjusted Service Date])/ 365.25 \u003c 3, 'NFP3',     if((DTRB_PERF_DATES[Previous Sunday Date2] - \u0027Referrals\u0027[Adjusted Service Date])/ 365.25 \u003c 4, 'NFP4',     'Vet')))))","columnType":"Calculated"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Calendar Year Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Calendar Year Week Number","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[{"name":"YTD Referrals","expression":"--var cy_start = CALCULATE(MIN(Referrals[REFR_DT]),ALLEXCEPT(DTRB_PERF_DATES,DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]),All(Referrals),DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='Current')--var cy_end = CALCULATE(MAX(Referrals[REFR_DT]),ALLEXCEPT(DTRB_PERF_DATES,DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]),All(Referrals),DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='Current')--RETURN--CALCULATE(SUM(Referrals[Referral_Occurs]), Referrals, Referrals[REFR_DT] \u003c= cy_end \u0026\u0026 Referrals[REFR_DT] \u003e= cy_start)CALCULATE(    SUM(Referrals[Referral_Occurs]),    DTRB_PERF_DATES[YTD Flag] in {TRUE})","isHidden":false},{"name":"PYTD Referrals","expression":"var pytd_end_date = date(    year(LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'Previous'))-1,    month(LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'Previous')),    day(LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'Previous')))var pytd_start_date = date(year(pytd_end_date),1,1)returncalculate(    SUM(Referrals[Referral_Occurs]),    \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT] \u003c= pytd_end_date,    \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT] \u003e= pytd_start_date)--var py_start = CALCULATE(MIN(Referrals[REFR_DT]),ALLEXCEPT(DTRB_PERF_DATES,DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]),all(Referrals),DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='Previous')--var cy_end = CALCULATE(MAX(Referrals[REFR_DT]),ALLEXCEPT(DTRB_PERF_DATES,DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]),all(Referrals),DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='Current')--var py_end = DATE(YEAR(cy_end)-1,MONTH(cy_end),DAY(cy_end))--CALCULATE(    --SUM(Referrals[Referral_Occurs]),    --DTRB_PERF_DATES[PYTD Flag] in {TRUE})","isHidden":false},{"name":"PY2TD Referrals","expression":"var py2td_end_date = date(    year(LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'Previous'))-2,    month(LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'Previous')),    day(LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'Previous')))var py2td_start_date = date(year(py2td_end_date),1,1)returncalculate(    SUM(Referrals[Referral_Occurs]),    \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT] \u003c= py2td_end_date,    \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT] \u003e= py2td_start_date)--var cy_start = CALCULATE(MIN(Referrals[REFR_DT]),ALLEXCEPT(DTRB_PERF_DATES, DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]),all(Referrals),DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='Current')--var cy_end = CALCULATE(MAX(Referrals[REFR_DT]),ALLEXCEPT(DTRB_PERF_DATES,DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]),all(Referrals),DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='Current')--var py2_start = date(YEAR(cy_start)-2,MONTH(cy_start),DAY(cy_start))--var py2_end = DATE(YEAR(cy_end)-2,MONTH(cy_end),DAY(cy_end))--RETURN--CALCULATE(SUM(Referrals[Referral_Occurs]), Referrals, Referrals[REFR_DT] \u003c= py2_end \u0026\u0026 Referrals[REFR_DT] \u003e= py2_start)--CALCULATE(    --SUM(Referrals[Referral_Occurs]),    --DTRB_PERF_DATES[PY2TD Flag] in {TRUE})","isHidden":false},{"name":"PY Referrals","expression":"var py_start = CALCULATE(MIN(Referrals[REFR_DT]),ALLEXCEPT(DTRB_PERF_DATES,DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]),all(Referrals),DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='Previous')var py_end = CALCULATE(MAX(Referrals[REFR_DT]),ALLEXCEPT(DTRB_PERF_DATES,DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]),all(Referrals),DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='Previous')RETURNCALCULATE(SUM(Referrals[Referral_Occurs]), Referrals, Referrals[REFR_DT] \u003c= py_end \u0026\u0026 Referrals[REFR_DT] \u003e= py_start)","isHidden":false},{"name":"PY2 Referrals","expression":"var py_start = CALCULATE(MIN(Referrals[REFR_DT]),ALLEXCEPT(DTRB_PERF_DATES, DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]),all(Referrals),DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='Previous')var py_end = CALCULATE(MAX(Referrals[REFR_DT]),ALLEXCEPT(DTRB_PERF_DATES,DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]),all(Referrals),DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='Previous')var py2_start= date(year(py_start)-1,month(py_start),day(py_start))var py2_end= date(year(py_end)-1,month(py_end),day(py_end))RETURNCALCULATE(SUM(Referrals[Referral_Occurs]), Referrals, Referrals[REFR_DT] \u003c= py2_end \u0026\u0026 Referrals[REFR_DT] \u003e= py2_start)","isHidden":false},{"name":"YOY Referrals","expression":"VAR __BASELINE_VALUE = [PYTD Referrals]VAR __VALUE_TO_COMPARE = [YTD Referrals]RETURN    IF(        NOT ISBLANK(__VALUE_TO_COMPARE),        DIVIDE(__VALUE_TO_COMPARE - __BASELINE_VALUE, __BASELINE_VALUE)    )","isHidden":false},{"name":"CY Prior Week Referrals","expression":"CALCULATE(    SUM(Referrals[Referral_Occurs]),    DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT] = 'PREVIOUS',    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'CURRENT'    )","isHidden":false},{"name":"CY Current Week Referrals","expression":"CALCULATE(    SUM(Referrals[Referral_Occurs]),    DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT] = 'CURRENT',    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'CURRENT',    DTRB_PERF_DATES[YTD Flag] in {true})","isHidden":false}],"source":[{"expression":"let    Source = Sql.Database('dbedwdwprd', 'EnterpriseDataMart', [Query='SELECT  #(lf)                ref_fct.PERS_DIM_SK,#(lf)                ref_fct.REFR_DT,#(lf)                sum(ref_fct.OCCURS) [Referral_Occurs],#(lf)                date_dim.[Calendar Year Name],#(lf)                date_dim.[Calendar Year Week Number],#(lf)                sale_hier_dim.ORZN_DEPT_CDE,#(lf)                sale_hier_dim.ORZN_ZONE_CDE,#(lf)                org_dim.[Source System Key Text] AS EMP_ID,#(lf)                org_dim.[Adjusted Service Date],#(lf)                org_dim.[Employee Status Type Description],#(lf)                org_dim.[Financial Professional Tenure],#(lf)                org_dim.[Financial Professional Tenure Group],#(lf)                org_dim.[Department Identifier],#(lf)                org_dim.[RFO Zone Identifier],#(lf)                org_dim.[Last Name]+\u0027, \u0027+org_dim.[First Name] as ''Employee Display Name'', #(lf)                org_dim.[Job Type Code],#(lf)                org_dim.[Job Type Description]#(lf)#(lf)  FROM [EnterpriseDataMart].[DM_01].[REFERRAL_FCT] ref_fct LEFT JOIN#(lf)       EnterpriseDataMart.DM_01.[Date Dimension] date_dim#(lf)   on (ref_fct.[REFR_DT]=date_dim.[Calendar Date Date]) LEFT JOIN#(lf)       EnterpriseDataMart.DM_01.[Organization Dimension] org_dim#(lf)   on ((ref_fct.REFR_ORZN_DIM_SK=org_dim.[Organization Dimension Surrogate Key]) and#(lf)       (ref_fct.REFR_ORZN_DIM_VRSN_NBR=org_dim.[Organization Dimension Version Number])) LEFT JOIN#(lf)       EnterpriseDataMart.DM_01.[SALE_HIER_DIM] sale_hier_dim#(lf)   on ((sale_hier_dim.EFF_BEG_DT \u003c= ref_fct.REFR_DT) and#(lf)       (ref_fct.REFR_DT \u003c= DATEADD(day,-1,sale_hier_dim.EFF_END_DT)) and  #(lf)               sale_hier_dim.CURR_ROW_IND = \u0027Y\u0027 and #(lf)                org_dim.[Source System Key Text]=sale_hier_dim.[SALE_HIER_ID])#(lf)#(lf)where ref_fct.PERS_DIM_SK \u003c\u003e 0#(lf)  and sale_hier_dim.ORZN_DEPT_CDE in (\u00270001\u0027,\u00270115\u0027,\u00270190\u0027,\u00270283\u0027,\u00270291\u0027,\u00270361\u0027,\u00270384\u0027,\u00270435\u0027,\u00270525\u0027)#(lf)  and (org_dim.[Job Type Code] in (\u0027002000\u0027, \u0027002003\u0027, \u0027002008\u0027, \u0027002010\u0027, \u0027002011\u0027, \u0027002012\u0027, \u0027002016\u0027, \u0027002022\u0027, \u0027002024\u0027, \u0027002025\u0027, \u0027002026\u0027, \u0027002027\u0027, \u0027002030\u0027, \u0027002031\u0027, \u0027002032\u0027, \u0027003100\u0027, \u0027003500\u0027)#(lf)   or  org_dim.[Department Identifier] in (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027))  and date_dim.[Calendar Year Name] in (\u00272022\u0027,\u00272023\u0027,\u00272024\u0027)#(lf)#(lf)group by#(lf)                ref_fct.PERS_DIM_SK,#(lf)                ref_fct.REFR_DT,#(lf)                date_dim.[Calendar Year Name],#(lf)                date_dim.[Calendar Year Week Number],#(lf)                sale_hier_dim.ORZN_DEPT_CDE,#(lf)                sale_hier_dim.ORZN_ZONE_CDE,#(lf)                org_dim.[Source System Key Text],#(lf)                org_dim.[Adjusted Service Date],#(lf)                org_dim.[Employee Status Type Description],#(lf)                org_dim.[Financial Professional Tenure],#(lf)                org_dim.[Financial Professional Tenure Group],#(lf)                org_dim.[Department Identifier],#(lf)                org_dim.[RFO Zone Identifier],#(lf)                org_dim.[Last Name]+\u0027, \u0027+org_dim.[First Name],#(lf)                org_dim.[Job Type Code],#(lf)                org_dim.[Job Type Description]#(lf)#(lf)having #(lf)sum(ref_fct.OCCURS) \u003e 0'])in    Source"}]},{"name":"RFO_Market","isHidden":false,"storageMode":"Import","columns":[{"name":"Organization Zone Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Adjusted RFO","dataType":"String","isHidden":false,"expression":"IF(RFO_Market[RFO] = '0001','',RFO_Market[RFO])","columnType":"Calculated"},{"name":"Channel","dataType":"String","isHidden":false,"expression":"if(RFO_Market[RFO] in {'0115','0190','0283','0291','0361','0384','0435','0525'}, 'Thrivent Advisor Group')","columnType":"Calculated"},{"name":"Channel_PQ","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CET Alignment","dataType":"String","isHidden":false,"expression":"IF(RFO_Market[RFO] IN {'0115', '0165', '0190', '0240', '0283', '0291', '0384', '0410'}, 'East', IF(RFO_Market[RFO] IN {'0361', '0365', '0435', '0475', '0496', '0525', '0529', '0810'}, 'West','Other'))","columnType":"Calculated"},{"name":"RFO Name","dataType":"String","isHidden":false,"expression":"RELATED(\u0027RFO_NM\u0027[NM])","columnType":"Calculated"},{"name":"MVP","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Sql.Database('dbedwdwprd', 'EnterpriseDataMart', [Query='SELECT DISTINCT #(lf)#(tab)SHD.[Organization Zone Code],#(lf)        SHD.[Organization Sub Department Code] as MVP,#(lf)#(tab)(LEFT(SHD.[Organization Zone Code],4)) as RFO,#(lf)#(tab)(SUBSTRING(SHD.[Organization Zone Code],6,5)) as Zone#(lf)from EnterpriseDataMart.[DM_01].[Sale Hierarchy Dimension] SHD#(lf)where SHD.[Organization Department Code] in (\u00270001\u0027,\u00270115\u0027,\u00270190\u0027,\u00270283\u0027,\u00270291\u0027,\u00270361\u0027,\u00270383\u0027,\u00270384\u0027,\u00270435\u0027,\u00270525\u0027,\u00270716\u0027,\u00270810\u0027)#(lf)order by SHD.[Organization Zone Code]']),    #'Renamed Columns' = Table.RenameColumns(Source,{{'Zone', 'Market'}}),    #'Filtered Rows' = Table.SelectRows(#'Renamed Columns', each ([RFO] \u003c\u003e '0001')),    #'Added Custom' = Table.AddColumn(#'Filtered Rows', 'Channel_PQ', each if List.Contains({'0001','0115','0165','0190','0240','0283','0291','0361','0365','0384','0410','0435','0475','0496','0525','0529','0810'}, [RFO]) then 'Career'else if List.Contains({'0383'}, [RFO]) then 'TFGT' else 'Other'),    #'Filtered Rows1' = Table.SelectRows(#'Added Custom', each ([MVP] \u003c\u003e 'UKWN') and ([RFO] \u003c\u003e '0529'))in    #'Filtered Rows1'"}]},{"name":"Capacity","isHidden":false,"storageMode":"Import","columns":[{"name":"JOIN VALUE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ZONE_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_Mkt","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Year","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Week","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Current Wk","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Capacity","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Channel","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Division","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Region","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PerfYrWk","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Tenure Group","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Curr NFP Cap","expression":"var RFOChoice = if(ISFILTERED(RFO_Market[RFO]),SELECTEDVALUE(RFO_Market[RFO]))--var ChannelChoice = if(ISFILTERED(RFO_Market[Channel]),SELECTEDVALUE(RFO_Market[Channel]))--var DivisionChoice = if(ISFILTERED(RFO_Market[Division]),SELECTEDVALUE(RFO_Market[Division]))--var RegionChoice = if(ISFILTERED(RFO_MArket[Region]),SELECTEDVALUE(RFO_Market[Region]))var current_year = max(Capacity[Year])returnif(ISFILTERED(\u0027RFO_Market\u0027[RFO]),CALCULATE(SUM(Capacity[Capacity]),     filter(\u0027Capacity\u0027, \u0027Capacity\u0027[RFO_ID] = RFOChoice),    filter(\u0027Capacity\u0027, \u0027Capacity\u0027[Type] in {'NFR','Red Role'}),    filter(\u0027Capacity\u0027, \u0027Capacity\u0027[Week] = Capacity[Current Wk]),    filter(\u0027Capacity\u0027, \u0027Capacity\u0027[Year] = current_year)))--if(ISFILTERED(\u0027RFO_Market\u0027[Channel]),--CALCULATE(SUM(Capacity[Capacity]),    --filter(\u0027Capacity\u0027, \u0027Capacity\u0027[Channel]= ChannelChoice),    --filter(\u0027Capacity\u0027, \u0027Capacity\u0027[Type] in {'NFR','Red Role'}),    --filter(\u0027Capacity\u0027, Capacity[Week]=Capacity[Current Wk]),    --filter(Capacity, Capacity[Year] = current_year)),--if(ISFILTERED(\u0027RFO_Market\u0027[Division]),--CALCULATE(SUM(Capacity[Capacity]),     --filter(\u0027Capacity\u0027, \u0027Capacity\u0027[Division]= DivisionChoice),    --filter(\u0027Capacity\u0027, \u0027Capacity\u0027[Type] in {'NFR','Red Role'}),    --filter(\u0027Capacity\u0027, Capacity[Week]=Capacity[Current Wk]),    --filter(Capacity, Capacity[Year] = current_year)),--if(ISFILTERED(\u0027RFO_Market\u0027[Region]),--CALCULATE(SUM(Capacity[Capacity]),     --filter(\u0027Capacity\u0027, \u0027Capacity\u0027[Region]= RegionChoice),    --filter(\u0027Capacity\u0027, \u0027Capacity\u0027[Type] in {'NFR','Red Role'}),    --filter(\u0027Capacity\u0027, Capacity[Week]=Capacity[Current Wk]),    --filter(Capacity, Capacity[Year] = current_year))))))","isHidden":false},{"name":"Curr Vet Cap","expression":"var RFOChoice = if(ISFILTERED(RFO_Market[RFO]),SELECTEDVALUE(RFO_Market[RFO]))var current_year = max(Capacity[Year])returnif(ISFILTERED(\u0027RFO_Market\u0027[RFO]),CALCULATE(SUM(Capacity[Capacity]),     filter(\u0027Capacity\u0027, \u0027Capacity\u0027[RFO_ID] = RFOChoice),    filter(\u0027Capacity\u0027, \u0027Capacity\u0027[Type] in {'Vet'}),    filter(\u0027Capacity\u0027, \u0027Capacity\u0027[Week] = Capacity[Current Wk]),    filter(\u0027Capacity\u0027, \u0027Capacity\u0027[Year] = current_year)))","isHidden":false},{"name":"Prior WK Capacity","expression":"var RFOChoice = if(ISFILTERED(RFO_Market[RFO]),SELECTEDVALUE(RFO_Market[RFO]))var ChannelChoice = if(ISFILTERED(RFO_Market[Channel]),SELECTEDVALUE(RFO_Market[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Market[Division]),SELECTEDVALUE(RFO_Market[Division]))var RegionChoice = if(ISFILTERED(RFO_Market[Region]),SELECTEDVALUE(RFO_Market[Region]))returnif(ISFILTERED(\u0027RFO_Market\u0027[RFO]),CALCULATE(SUM(Capacity[Capacity]), \u0027Capacity\u0027[RFO_ID]= RFOChoice,\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT]='Current', \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_WK_TXT]='Previous'))","isHidden":false},{"name":"Total Capacity","expression":"[Curr NFP Cap] + [Curr Vet Cap]","isHidden":false},{"name":"Prior Week Capacity","expression":"if(HASONEVALUE(\u0027Capacity\u0027[Type]),--\u0027Appointments \u0026 PCs\u0027[FP Tenure - NFP, Vet]),SWITCH(VALUES(Capacity[Type]),--\u0027Appointments \u0026 PCs\u0027[FP Tenure - NFP, Vet]),'NFR', [Curr NFP Cap],'VET', [Curr Vet Cap]), Capacity[Total Capacity])","isHidden":false},{"name":"Curr Week Capacity","expression":"VAR current_year = MAX(Capacity[Year])RETURNCALCULATE(sum(Capacity[Capacity]),FILTER(\u0027Capacity\u0027, \u0027Capacity\u0027[Week] = \u0027Capacity\u0027[Current Wk]),FILTER(\u0027Capacity\u0027, \u0027Capacity\u0027[Year] = current_year))","isHidden":false},{"name":"Curr Year Capacity","expression":"VAR current_year = MAX(Capacity[Year])RETURNCALCULATE(sum(Capacity[Capacity]),FILTER(\u0027Capacity\u0027, \u0027Capacity\u0027[Year] = current_year))","isHidden":false},{"name":"YTD NFP Capacityy","expression":"CALCULATE(    SUM(Capacity[Capacity]),    \u0027DTRB_PERF_DATES\u0027[YTD Flag ENGAGEMENT TEAM TAB] in {True},    \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT]='Current',    \u0027Capacity\u0027[Type] in {'NFR','Red Role'})","isHidden":false},{"name":"YTD Vet Capacityy","expression":"CALCULATE(    SUM(Capacity[Capacity]),    \u0027DTRB_PERF_DATES\u0027[YTD Flag ENGAGEMENT TEAM TAB] in {True},    \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT]='Current',    \u0027Capacity\u0027[Type] in {'Vet'})","isHidden":false},{"name":"YTD NFP+Vet Capacityy","expression":"[YTD NFP Capacityy] + [YTD Vet Capacityy]","isHidden":false},{"name":"YTD TOTAL Capacityy (Summary tab)","expression":"if(HASONEVALUE(\u0027Appointments/PC/JFW\u0027[FA Tenure - NFP, Vet]),SWITCH(VALUES(\u0027Appointments/PC/JFW\u0027[FA Tenure - NFP, Vet]),'NFP', [YTD NFP Capacityy],'Vet', [YTD Vet Capacityy]), [YTD NFP+Vet Capacityy])","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Capacity Dashboard//Capacity Dashboard-FP_Capacity.xlsx'), null, true),    Sheet1_Sheet = Source{[Item='Sheet1',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true]),    #'Renamed Columns' = Table.RenameColumns(#'Promoted Headers',{{'Count', 'Capacity'}}),    #'Changed Type' = Table.TransformColumnTypes(#'Renamed Columns',{{'Capacity', Int64.Type}}),    #'Appended Query' = Table.Combine({#'Changed Type', #'RR Capacity'}),    #'Added Conditional Column' = Table.AddColumn(#'Appended Query', 'Channel_PQ', each if [RFO_ID] = '0383' then 'TFGT' else 'Thrivent Advisor Group'),    #'Removed Columns' = Table.RemoveColumns(#'Added Conditional Column',{'Column9'}),    #'Added Custom' = Table.AddColumn(#'Removed Columns', 'Division_PQ', each if List.Contains({'0115','0165','0190','0240','0361','0384'},[RFO_ID]) then 'East' else if List.Contains({'0283','0365','0435','0496','0810'},[RFO_ID]) then 'Central' else if List.Contains({'0291','0410','0475','0525','0529'},[RFO_ID]) then 'West' else 'Other'),    #'Added Custom1' = Table.AddColumn(#'Added Custom', 'Region_PQ', each if List.Contains({'0361','0365','0435','0496'},[RFO_ID]) then 'Established' else if List.Contains({'0165','0240','0283','0291','0410','0525'},[RFO_ID]) then 'Growth' else if List.Contains({'0115','0190','0384','0475','0529'},[RFO_ID]) then 'Invest' else if List.Contains({'0810'},[RFO_ID]) then 'Colorado Springs' else 'Other'),    #'Added Custom2' = Table.AddColumn(#'Added Custom1', 'PerfYrWek_PQ', each Number.ToText([Year])\u0026'-'\u0026Number.ToText([Week])),    #'Renamed Columns1' = Table.RenameColumns(#'Added Custom2',{{'Channel_PQ', 'Channel'}, {'Division_PQ', 'Division'}, {'Region_PQ', 'Region'}, {'PerfYrWek_PQ', 'PerfYrWk'}}),    #'Added Conditional Column1' = Table.AddColumn(#'Renamed Columns1', 'Tenure Group', each if [Type] = 'NFR' then 'NFP' else if [Type] = 'Red Role' then 'NFP' else if [Type] = 'VET' then 'Vet' else 'Other')in    #'Added Conditional Column1'"}]},{"name":"RR Capacity","isHidden":false,"storageMode":"Import","columns":[{"name":"JOIN VALUE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ZONE_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_Mkt","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Year","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Week","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Current Wk","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Capacity","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"PerfYrWk","dataType":"String","isHidden":false,"expression":"\u0027RR Capacity\u0027[Year] \u0026 '-' \u0026 \u0027RR Capacity\u0027[Week]","columnType":"Calculated"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Capacity Dashboard//Capacity Dashboard-RR_Capacity.xlsx'), null, true),    Sheet1_Sheet = Source{[Item='Sheet1',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true]),    #'Renamed Columns' = Table.RenameColumns(#'Promoted Headers',{{'Count', 'Capacity'}}),    #'Changed Type' = Table.TransformColumnTypes(#'Renamed Columns',{{'Capacity', Int64.Type}})in    #'Changed Type'"}]},{"name":"Max Cal Dt","isHidden":false,"storageMode":"Import","columns":[{"name":"DTRB_PERF_RPT_YR_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_WK_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"MAX_CAL_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"PerfYrWk","dataType":"String","isHidden":false,"expression":"\u0027Max Cal Dt\u0027[DTRB_PERF_RPT_YR_NBR] \u0026 '-' \u0026 \u0027Max Cal Dt\u0027[DTRB_PERF_RPT_YR_WK_NBR]","columnType":"Calculated"}],"measures":[],"source":[{"expression":"let    Source = DB2.Database('podwh021:50000', 'podwh021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT DISTINCT#(lf)DATES_ITRL.DTRB_PERF_RPT_YR_NBR,#(lf)DATES_ITRL.DTRB_PERF_RPT_YR_WK_NBR,#(lf)max(DATES_ITRL.CAL_DAY_DT) as MAX_Cal_DT#(lf)FROM COMMON.DTRB_PERF_DATES DATES_ITRL#(lf)GROUP BY DATES_ITRL.DTRB_PERF_RPT_YR_NBR,#(lf)DATES_ITRL.DTRB_PERF_RPT_YR_WK_NBR'])in    Source"}]},{"name":"YTD_GOALS_DD","isHidden":false,"storageMode":"Import","columns":[{"name":"Level","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Metric","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Date_of_Goal","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Goal_Amount","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[{"name":"YE Appointment Goal","expression":"var FilterChoice = if(ISFILTERED(\u0027Appointments/PC/JFW\u0027[Historical Market]),SELECTEDVALUE(\u0027Appointments/PC/JFW\u0027[Historical Market]),                   if(ISFILTERED(\u0027Appointments/PC/JFW\u0027[Historical RFO]),SELECTEDVALUE(\u0027Appointments/PC/JFW\u0027[Historical RFO]),                   if(ISFILTERED(\u0027Appointments/PC/JFW\u0027[Division]),SELECTEDVALUE(\u0027Appointments/PC/JFW\u0027[Division]),                   if(ISFILTERED(\u0027Appointments/PC/JFW\u0027[Region]),SELECTEDVALUE(\u0027Appointments/PC/JFW\u0027[Region]),                   if(ISFILTERED(\u0027Appointments/PC/JFW\u0027[Channel]),SELECTEDVALUE(\u0027Appointments/PC/JFW\u0027[Channel]))))))var perfYear = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR],DTRB_PERF_DATES[CAL_DAY_DT],today())var maxdayperfyear = CALCULATE(max(DTRB_PERF_DATES[CAL_DAY_DT]),DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR] = perfYear)returnif(isfiltered(\u0027Appointments/PC/JFW\u0027[Historical Market]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Total Appointments', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'TotalAppointments', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear))","isHidden":false},{"name":"YE Prospect Connects Goal","expression":"var FilterChoice = if(ISFILTERED(\u0027Appointments/PC/JFW\u0027[Historical Market]),SELECTEDVALUE(\u0027Appointments/PC/JFW\u0027[Historical Market]),                   if(ISFILTERED(\u0027Appointments/PC/JFW\u0027[Historical RFO]),SELECTEDVALUE(\u0027Appointments/PC/JFW\u0027[Historical RFO]),                   if(ISFILTERED(\u0027Appointments/PC/JFW\u0027[Division]),SELECTEDVALUE(\u0027Appointments/PC/JFW\u0027[Division]),                   if(ISFILTERED(\u0027Appointments/PC/JFW\u0027[Region]),SELECTEDVALUE(\u0027Appointments/PC/JFW\u0027[Region]),                   if(ISFILTERED(\u0027Appointments/PC/JFW\u0027[Channel]),SELECTEDVALUE(\u0027Appointments/PC/JFW\u0027[Channel]))))))var perfYear = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR],DTRB_PERF_DATES[CAL_DAY_DT],today())var maxdayperfyear = CALCULATE(max(DTRB_PERF_DATES[CAL_DAY_DT]),DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR] = perfYear)returnif(isfiltered(\u0027Appointments/PC/JFW\u0027[Historical Market]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Prospect Connects (Total)', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'TotalProspectConnects', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear))","isHidden":false},{"name":"YTD Total PCs Goal","expression":"var FilterChoice = if(ISFILTERED(\u0027Market_Leaders\u0027[Experienced Advisor]),SELECTEDVALUE(Market_Leaders[Experienced Advisor], 'N/A'),                   if(ISFILTERED(\u0027Market_Leaders\u0027[Market_Leader]),SELECTEDVALUE(\u0027RFO_Market\u0027[Organization Zone Code]),                   if(ISFILTERED(\u0027MVPs\u0027[MVP_Leader]),SELECTEDVALUE(\u0027MVPs\u0027[MVP_ID]),                   if(ISFILTERED(\u0027RFO_Market\u0027[RFO Name]),SELECTEDVALUE(\u0027RFO_Market\u0027[Adjusted RFO]),                                      if(ISFILTERED(RFO_Market[Channel]),SELECTEDVALUE(\u0027Appointments/PC/JFW\u0027[Channel]))))))var cy_end = today()-1returnif(isfiltered(\u0027Appointments/PC/JFW\u0027[Historical Market]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Prospect Connects (Total)', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = cy_end),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'TotalProspectConnects', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = cy_end))","isHidden":false},{"name":"% YTD Prospect Connect Goal","expression":"iferror(divide(\u0027Appointments/PC/JFW\u0027[YTD Prospect Connects],YTD_GOALS_DD[YTD Total PCs Goal]),'n/a')","isHidden":false},{"name":"YTD NFP PCs Goal","expression":"var FilterChoice = if(ISFILTERED(\u0027RFO_Market\u0027[Market]),SELECTEDVALUE(\u0027RFO_Market\u0027[Market]),                   if(ISFILTERED(\u0027RFO_Market\u0027[RFO]),SELECTEDVALUE(\u0027RFO_Market\u0027[RFO]),                   --if(ISFILTERED(\u0027RFO_Market\u0027[Division]),SELECTEDVALUE(\u0027RFO_Market\u0027[Division]),                   --if(ISFILTERED(\u0027RFO_Market\u0027[Region]),SELECTEDVALUE(\u0027RFO_Market\u0027[Region]),                   if(ISFILTERED(\u0027RFO_Market\u0027[Channel]),SELECTEDVALUE(\u0027RFO_Market\u0027[Channel]))))var cy_end = today()-1returnif(isfiltered(\u0027RFO_Market\u0027[Market]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Prospect Connects (NFP)', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = cy_end),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'NFRProspectConnects', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = cy_end))","isHidden":false},{"name":"Weekly NFP PCs Goal","expression":"var FilterChoice = if(ISFILTERED(\u0027RFO_Market\u0027[Market]),SELECTEDVALUE(\u0027RFO_Market\u0027[Market]),                   if(ISFILTERED(\u0027RFO_Market\u0027[RFO]),SELECTEDVALUE(\u0027RFO_Market\u0027[RFO]),                   --if(ISFILTERED(\u0027RFO_Market\u0027[Division]),SELECTEDVALUE(\u0027RFO_Market\u0027[Division]),                   --if(ISFILTERED(\u0027RFO_Market\u0027[Region]),SELECTEDVALUE(\u0027RFO_Market\u0027[Region]),                   if(ISFILTERED(\u0027RFO_Market\u0027[Channel]),SELECTEDVALUE(\u0027RFO_Market\u0027[Channel]))))var perfYear = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR],DTRB_PERF_DATES[CAL_DAY_DT],today())var maxdayperfyear = CALCULATE(max(DTRB_PERF_DATES[CAL_DAY_DT]),DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR] = perfYear)--var cy_end = date(2021, 12, 31)returnif(isfiltered(\u0027RFO_Market\u0027[Market]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Prospect Connects (NFP)', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear) / 52,CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'NFRProspectConnects', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear)) / 52","isHidden":false},{"name":"YTD PCs Fav/(Unfav)","expression":"([YTD Prospect Connects]-[YTD PCs Goal - Detail Tab])/[YTD PCs Goal - Detail Tab]","isHidden":false},{"name":"YTD NFP PCs +/-","expression":"([YTD Prospect Connects]-[YTD NFP PCs Goal])","isHidden":false},{"name":"YTD Vet PCs Goal","expression":"var FilterChoice = if(ISFILTERED(\u0027RFO_Market\u0027[Market]),SELECTEDVALUE(\u0027RFO_Market\u0027[Market]),                   if(ISFILTERED(\u0027RFO_Market\u0027[RFO]),SELECTEDVALUE(\u0027RFO_Market\u0027[RFO]),                   --if(ISFILTERED(\u0027RFO_Market\u0027[Division]),SELECTEDVALUE(\u0027RFO_Market\u0027[Division]),                   --if(ISFILTERED(\u0027RFO_Market\u0027[Region]),SELECTEDVALUE(\u0027RFO_Market\u0027[Region]),                   if(ISFILTERED(\u0027RFO_Market\u0027[Channel]),SELECTEDVALUE(\u0027RFO_Market\u0027[Channel]))))var cy_end = today()-1returnif(isfiltered(\u0027RFO_Market\u0027[Market]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Prospect Connects (Vet)', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = cy_end),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'VetProspectConnect', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = cy_end))","isHidden":false},{"name":"Weekly Vet PCs Goal","expression":"var FilterChoice = if(ISFILTERED(\u0027RFO_Market\u0027[Market]),SELECTEDVALUE(\u0027RFO_Market\u0027[Market]),                   if(ISFILTERED(\u0027RFO_Market\u0027[RFO]),SELECTEDVALUE(\u0027RFO_Market\u0027[RFO]),                   --if(ISFILTERED(\u0027RFO_Market\u0027[Division]),SELECTEDVALUE(\u0027RFO_Market\u0027[Division]),                   --if(ISFILTERED(\u0027RFO_Market\u0027[Region]),SELECTEDVALUE(\u0027RFO_Market\u0027[Region]),                   if(ISFILTERED(\u0027RFO_Market\u0027[Channel]),SELECTEDVALUE(\u0027RFO_Market\u0027[Channel]))))var perfYear = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR],DTRB_PERF_DATES[CAL_DAY_DT],today())var maxdayperfyear = CALCULATE(max(DTRB_PERF_DATES[CAL_DAY_DT]),DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR] = perfYear)--var cy_end = date(2021, 12, 31)returnif(isfiltered(\u0027RFO_Market\u0027[Market]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Prospect Connects (Vet)', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear) / 52,CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'VetProspectConnect', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear)) / 52","isHidden":false},{"name":"Week Avg/NFP","expression":"([CY Prior Week Prospect Connects]/[Curr NFP Cap])","isHidden":false},{"name":"YTD Avg/NFP","expression":"([YTD Prospect Connects]/[Curr NFP Cap])","isHidden":false},{"name":"YTD PCs Goal - Detail Tab","expression":"if(HASONEVALUE(\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet, Other]),SWITCH(VALUES(\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet, Other]),'NFP', [YTD NFP PCs Goal ET TAB],'Vet', [YTD Vet PCs Goal ET TAB],'Other', [YTD Other PCs Goal ET TAB]), YTD_GOALS_DD[YTD Total PCs Goal ET TAB])","isHidden":false},{"name":"Weekly Total PCs Goal","expression":"var FilterChoice = if(ISFILTERED(\u0027RFO_Market\u0027[Market]),SELECTEDVALUE(\u0027RFO_Market\u0027[Market]),                   if(ISFILTERED(\u0027RFO_Market\u0027[RFO]),SELECTEDVALUE(\u0027RFO_Market\u0027[RFO]),                   --if(ISFILTERED(\u0027RFO_Market\u0027[Division]),SELECTEDVALUE(\u0027RFO_Market\u0027[Division]),                   --if(ISFILTERED(\u0027RFO_Market\u0027[Region]),SELECTEDVALUE(\u0027RFO_Market\u0027[Region]),                   if(ISFILTERED(\u0027RFO_Market\u0027[Channel]),SELECTEDVALUE(\u0027RFO_Market\u0027[Channel]))))var perfYear = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR],DTRB_PERF_DATES[CAL_DAY_DT],today())var maxdayperfyear = CALCULATE(max(DTRB_PERF_DATES[CAL_DAY_DT]),DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR] = perfYear)--var cy_end = date(2021, 12, 31)returnif(isfiltered(\u0027RFO_Market\u0027[Market]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Prospect Connects (Total)', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear) / 52,CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'TotalProspectConnects', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear)) / 52","isHidden":false},{"name":"Weekly PCs Goal","expression":"if(HASONEVALUE(\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet, Other]),SWITCH(VALUES(\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet, Other]),'NFP', [Weekly NFP PCs Goal],'Vet', [Weekly Vet PCs Goal],'Other', [Weekly Other PCs Goal]), YTD_GOALS_DD[Weekly Total PCs Goal])","isHidden":false},{"name":"% PCs YTD","expression":"divide(\u0027Appointments/PC/JFW\u0027[YTD PCs - Detail Tab],\u0027YTD_GOALS_DD\u0027[YTD PCs Goal - Detail Tab])","isHidden":false},{"name":"% PCs Weekly","expression":"divide(\u0027Appointments/PC/JFW\u0027[CY Prior Week PCs - Detail tab], \u0027YTD_GOALS_DD\u0027[Weekly PCs Goal])","isHidden":false},{"name":"YTD NFP PCs Goal ET TAB","expression":"var FilterChoice = if(ISFILTERED(\u0027RFO_Market\u0027[Market]),SELECTEDVALUE(\u0027RFO_Market\u0027[Market]),                   if(ISFILTERED(\u0027RFO_Market\u0027[RFO]),SELECTEDVALUE(\u0027RFO_Market\u0027[RFO]),                   --if(ISFILTERED(\u0027RFO_Market\u0027[Division]),SELECTEDVALUE(\u0027RFO_Market\u0027[Division]),                   --if(ISFILTERED(\u0027RFO_Market\u0027[Region]),SELECTEDVALUE(\u0027RFO_Market\u0027[Region]),                   if(ISFILTERED(\u0027RFO_Market\u0027[Channel]),SELECTEDVALUE(\u0027RFO_Market\u0027[Channel]))))var PriorSunday = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT], today() - 7) returnif(isfiltered(\u0027RFO_Market\u0027[Market]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Prospect Connects (NFP)', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'NFRProspectConnects', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday))","isHidden":false},{"name":"YTD Total PCs Goal ET TAB","expression":"var FilterChoice = if(ISFILTERED(\u0027RFO_Market\u0027[Market]),SELECTEDVALUE(\u0027RFO_Market\u0027[MArket]),                   if(ISFILTERED(\u0027RFO_Market\u0027[RFO]),SELECTEDVALUE(\u0027RFO_Market\u0027[RFO]),                   --if(ISFILTERED(\u0027RFO_Market\u0027[Division]),SELECTEDVALUE(\u0027RFO_Market\u0027[Division]),                   --if(ISFILTERED(\u0027RFO_Market\u0027[Region]),SELECTEDVALUE(\u0027RFO_Market\u0027[Region]),                   if(ISFILTERED(\u0027RFO_Market\u0027[Channel]),SELECTEDVALUE(\u0027RFO_Market\u0027[Channel]))))var PriorSunday = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT], today() - 7) returnif(isfiltered(\u0027RFO_Market\u0027[Market]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Prospect Connects (Total)', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'TotalProspectConnects', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday))","isHidden":false},{"name":"YTD Vet PCs Goal ET TAB","expression":"var FilterChoice = if(ISFILTERED(\u0027RFO_Market\u0027[Market]),SELECTEDVALUE(\u0027RFO_Market\u0027[Market]),                   if(ISFILTERED(\u0027RFO_Market\u0027[RFO]),SELECTEDVALUE(\u0027RFO_Market\u0027[RFO]),                   --if(ISFILTERED(\u0027RFO_Market\u0027[Division]),SELECTEDVALUE(\u0027RFO_Market\u0027[Division]),                   --if(ISFILTERED(\u0027RFO_Market\u0027[Region]),SELECTEDVALUE(\u0027RFO_Market\u0027[Region]),                   if(ISFILTERED(\u0027RFO_Market\u0027[Channel]),SELECTEDVALUE(\u0027RFO_Market\u0027[Channel]))))var PriorSunday = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT], today() - 7) returnif(isfiltered(\u0027RFO_Market\u0027[Market]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Prospect Connects (Vet)', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'VetProspectConnect', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday))","isHidden":false},{"name":"YTD Appointment Goal TEST","expression":"var FilterChoice = if(ISFILTERED(\u0027RFO_Market\u0027[Market]),SELECTEDVALUE(\u0027RFO_Market\u0027[Market]),                   if(ISFILTERED(\u0027RFO_Market\u0027[RFO]),SELECTEDVALUE(\u0027RFO_Market\u0027[RFO]),                   --if(ISFILTERED(\u0027RFO_Market\u0027[Division]),SELECTEDVALUE(\u0027RFO_Market\u0027[Division]),                   --if(ISFILTERED(\u0027RFO_Market\u0027[Region]),SELECTEDVALUE(\u0027RFO_Market\u0027[Region]),                   if(ISFILTERED(\u0027RFO_Market\u0027[Channel]),SELECTEDVALUE(\u0027RFO_Market\u0027[Channel]))))var cy_end = today()-1returnif(isfiltered(\u0027RFO_Market\u0027[Market]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Total Appointments', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = cy_end),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'TotalAppointments', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = cy_end))","isHidden":false},{"name":"Weekly Other PCs Goal","expression":"BLANK()","isHidden":false},{"name":"YTD Other PCs Goal ET TAB","expression":"BLANK()","isHidden":false},{"name":"YTD Appts Goal","expression":"var FilterChoice = if(ISFILTERED(\u0027Market_Leaders\u0027[Experienced Advisor]),SELECTEDVALUE(Market_Leaders[Experienced Advisor], 'N/A'),                   if(ISFILTERED(\u0027Market_Leaders\u0027[Market_Leader]),SELECTEDVALUE(\u0027RFO_Market\u0027[Organization Zone Code]),                   if(ISFILTERED(\u0027MVPs\u0027[MVP_Leader]),SELECTEDVALUE(\u0027MVPs\u0027[MVP_ID]),                   if(ISFILTERED(\u0027RFO_Market\u0027[RFO Name]),SELECTEDVALUE(\u0027RFO_Market\u0027[Adjusted RFO]),                                      if(ISFILTERED(RFO_Market[Channel]),SELECTEDVALUE(\u0027Appointments/PC/JFW\u0027[Channel]))))))var cy_end = today()-1returnif(isfiltered(\u0027Appointments/PC/JFW\u0027[Historical Market]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Total Appointments', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = cy_end),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'TotalAppointments', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = cy_end))","isHidden":false},{"name":"% YTD Appts Goal","expression":"iferror(divide(\u0027Appointments/PC/JFW\u0027[YTD Appointments],YTD_GOALS_DD[YTD Appts Goal]),'n/a')","isHidden":false},{"name":"YTD Appt Goal SWITCH","expression":"if(HASONEVALUE(\u0027Appointments/PC/JFW\u0027[FA Tenure - NFP, Vet]),SWITCH(VALUES(\u0027Appointments/PC/JFW\u0027[FA Tenure - NFP, Vet]),'NFP', [% YTD Appts NFA Goal],'VET', [% YTD Appts Vet Goal]), [% YTD Appts Goal])","isHidden":false},{"name":"YTD Appts NFA Goal","expression":"var FilterChoice = if(ISFILTERED(\u0027Market_Leaders\u0027[Experienced Advisor]),SELECTEDVALUE(Market_Leaders[Experienced Advisor], 'N/A'),                   if(ISFILTERED(\u0027Market_Leaders\u0027[Market_Leader]),SELECTEDVALUE(\u0027RFO_Market\u0027[Organization Zone Code]),                   if(ISFILTERED(\u0027MVPs\u0027[MVP_Leader]),SELECTEDVALUE(\u0027MVPs\u0027[MVP_ID]),                   if(ISFILTERED(\u0027RFO_Market\u0027[RFO Name]),SELECTEDVALUE(\u0027RFO_Market\u0027[Adjusted RFO]),                                      if(ISFILTERED(RFO_Market[Channel]),SELECTEDVALUE(\u0027Appointments/PC/JFW\u0027[Channel]))))))var cy_end = today()-1returnCALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'NFPAppointments', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = cy_end)","isHidden":false},{"name":"% YTD Appts NFA Goal","expression":"DIVIDE(\u0027Appointments/PC/JFW\u0027[YTD Appts NFA],\u0027YTD_GOALS_DD\u0027[YTD Appts NFA Goal])","isHidden":false},{"name":"YTD Appts Vet Goal","expression":"var FilterChoice = if(ISFILTERED(\u0027Market_Leaders\u0027[Experienced Advisor]),SELECTEDVALUE(Market_Leaders[Experienced Advisor], 'N/A'),                   if(ISFILTERED(\u0027Market_Leaders\u0027[Market_Leader]),SELECTEDVALUE(\u0027RFO_Market\u0027[Organization Zone Code]),                   if(ISFILTERED(\u0027MVPs\u0027[MVP_Leader]),SELECTEDVALUE(\u0027MVPs\u0027[MVP_ID]),                   if(ISFILTERED(\u0027RFO_Market\u0027[RFO Name]),SELECTEDVALUE(\u0027RFO_Market\u0027[Adjusted RFO]),                                      if(ISFILTERED(RFO_Market[Channel]),SELECTEDVALUE(\u0027Appointments/PC/JFW\u0027[Channel]))))))var cy_end = today()-1returnCALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'VetAppointments', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = cy_end)","isHidden":false},{"name":"% YTD Appts Vet Goal","expression":"DIVIDE(\u0027Appointments/PC/JFW\u0027[YTD Appts Vet],\u0027YTD_GOALS_DD\u0027[YTD Appts Vet Goal])","isHidden":false}],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////vsshr//shared//Public//DI and BI//Distribution Dashboard//YTD_GOALS_DD.csv'),[Delimiter=',', Columns=4, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Level', type text}, {'Metric', type text}, {'Date_of_Goal', type date}, {'Goal_Amount', type number}})in    #'Changed Type'"}]},{"name":"Bridge Table - RFO","isHidden":false,"storageMode":"Import","columns":[{"name":"RFOTenure","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO","dataType":"String","isHidden":false,"expression":"left(\u0027Bridge Table - RFO\u0027[RFOTenure],4)","columnType":"Calculated"},{"name":"Tenure","dataType":"String","isHidden":false,"expression":"if(right(\u0027Bridge Table - RFO\u0027[RFOTenure],3) = 'her', 'Other', right(\u0027Bridge Table - RFO\u0027[RFOTenure],3))","columnType":"Calculated"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('XZA7CsMwFATvotqFZUm23gVSJq7SGJeG1MH3J+QtSLsqZ9CH2eMIc4wlTOH52MM5/XFVtJlxyYo1CVpkTOuA8nKqmTFHeTknOZw3RVsZy1IUjXGLcrjqR8h/Xzfnd/T8hsjv6PkdPb8h8gnlZeQ3RH7HJIeR39HzGyKf0BiR37DqR8h/3Z/rywOw8AlIYAQWPgMLH4IEphAx/II5SGAQFmm4glFY+CwkMIwIU4FxSFT+9vwB', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [RFO = _t, Tenure = _t]),    #'Merged Columns' = Table.CombineColumns(Source,{'RFO', 'Tenure'},Combiner.CombineTextByDelimiter('', QuoteStyle.None),'Merged'),    #'Renamed Columns' = Table.RenameColumns(#'Merged Columns',{{'Merged', 'RFOTenure'}})in    #'Renamed Columns'"}]},{"name":"Sort Order - Tenure","isHidden":false,"storageMode":"Import","columns":[{"name":"Category","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Order","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Tenure","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i45W8nMLUNJRMlSK1YlWCkstAbKNwGz/kozUIiDPWCk2FgA=', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Category = _t, Order = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Category', type text}, {'Order', Int64.Type}}),    #'Added Conditional Column' = Table.AddColumn(#'Changed Type', 'Tenure', each if [Category] = 'NFP' then 'NFA' else if [Category] = 'Vet' then 'Vet' else if [Category] = 'Other' then 'Other' else null)in    #'Added Conditional Column'"}]},{"name":"RFO_NM","isHidden":false,"storageMode":"Import","columns":[{"name":"RFO_CODE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"NM","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Sql.Database('dbedwdwprd', 'EnterpriseDataMart', [Query='SELECT DISTINCT#(lf)       [Department Identifier] RFO_CODE#(lf)      ,[Department Name] RFO_NM#(lf)      ,concat(trim([Department Identifier]),\u0027 - \u0027,[Department Name]) as NM#(lf)#(lf) #(lf)#(lf)  FROM [EnterpriseDataMart].[DM_01].[Organization Dimension] #(lf)  where [Department Identifier] in (\u00270283\u0027, \u00270435\u0027,\u00270115\u0027, \u00270190\u0027, #(lf)                \u00270361\u0027, \u00270384\u0027,\u00270291\u0027, \u00270525\u0027,\u00270001\u0027,\u00270383\u0027)#(lf)        and [Current Row Indicator] = \u0027Y\u0027#(lf)        and [Effective Begin Date] \u003e \u00271/1/2019\u0027#(lf)        and [Effective End Date] = \u002712/31/9999\u0027'])in    Source"}]},{"name":"MVPs","isHidden":false,"storageMode":"Import","columns":[{"name":"RFO_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_DEPT_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_STS_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TRMN_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MARKET_LEADERS","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP_Leader","dataType":"String","isHidden":false,"expression":"MVPs[MVP_ID] \u0026 ' - ' \u0026 MVPs[MARKET_LEADERS]","columnType":"Calculated"}],"measures":[],"source":[{"expression":"let    Source = DB2.Database('podwh021:50000', 'podwh021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT DISTINCT#(lf)t1.ORZN_DEPT_CDE as RFO_CDE,#(lf)--t1.ORZN_ZONE_CDE as RFO_ZONE_NM,#(lf)t1.ORZN_SUB_DEPT_CDE as MVP_ID,#(lf)--(SUBSTRING(t1.ORZN_ZONE_CDE,6,5)) AS Market_ID,#(lf)t3.ORZN_DEPT_DSCR,#(lf)t3.EMP_ID,#(lf)t3.EMP_STS_TYP_CDE,#(lf)t3.trmn_dt,#(lf)t3.JOB_TYP_CDE,#(lf)t3.JOB_TYP_DSCR,#(lf)t3.EMP_NM,#(lf)case when t3.emp_nm is null then \u0027Vacant\u0027 Else t3.emp_nm end as market_leaders#(lf)FROM SEMANTIC.SALES_HIERARCHY_DIMENSION t1#(lf)left join#(lf)(#(lf)SELECT DISTINCT#(lf)T1.SALE_HIER_ID,#(lf)t1.orzn_zone_cde,#(lf)t1.orzn_dept_dscr,#(lf)t1.orzn_sub_dept_cde,#(lf)t2.orzn_dept_cde,#(lf)t2.EMP_ID,#(lf)t2.EMP_STS_TYP_CDE,#(lf)t2.trmn_dt,#(lf)t2.JOB_TYP_CDE,#(lf)t2.JOB_TYP_DSCR,#(lf)t2.EMP_NM#(lf)FROM#(lf)SEMANTIC.SALES_HIERARCHY_DIMENSION t1#(lf)left JOIN HUMAN_RESOURCES.CNF_EMP_DIM_DTL_CURR_CFDL t2 ON T1.SALE_HIER_ID = T2.emp_id#(lf)where t1.CURR_ROW_IND = \u0027Y\u0027#(lf)and t2.emp_sts_typ_cde in (\u0027A\u0027)#(lf)and t1.EFF_END_TMSP is null#(lf)AND T2.CURR_ROW_IND = \u0027Y\u0027#(lf)and t1.EFF_END_TMSP is null#(lf)and t2.JOB_TYP_CDE IN (\u0027001001\u0027)#(lf))#(lf)t3#(lf)on t1.orzn_sub_dept_cde = t3.orzn_sub_dept_cde#(lf)where t1.CURR_ROW_IND = \u0027Y\u0027#(lf)and t1.eff_end_tmsp is null#(lf)--and t1.rfo_zone_sts_cde in (\u0027A\u0027)#(lf)--and t3.EMP_STS_TYP_CDE = \u0027A\u0027#(lf)--and substring(t1.orzn_zone_cde,6,2) \u003c\u003e \u002700\u0027#(lf)and t1.orzn_zone_cde \u003c\u003e \u0027UKWN\u0027#(lf)order BY t1.ORZN_SUB_DEPT_CDE;#(lf)']),    #'Filtered Rows' = Table.SelectRows(Source, each ([RFO_CDE] = '0001      ' or [RFO_CDE] = '0115      ' or [RFO_CDE] = '0190      ' or [RFO_CDE] = '0283      ' or [RFO_CDE] = '0291      ' or [RFO_CDE] = '0361      ' or [RFO_CDE] = '0383      ' or [RFO_CDE] = '0384      ' or [RFO_CDE] = '0435      ' or [RFO_CDE] = '0525      ' or [RFO_CDE] = '0716      ') and ([MVP_ID] \u003c\u003e '          ' and [MVP_ID] \u003c\u003e '0529-00   '))in    #'Filtered Rows'"}]},{"name":"Market_Leaders","isHidden":false,"storageMode":"Import","columns":[{"name":"RFO_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_ZONE_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MARKET_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_DEPT_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_STS_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TRMN_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MARKET_LEADERS","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market_Leader","dataType":"String","isHidden":false,"expression":"Market_Leaders[RFO_ZONE_NM] \u0026 ' - ' \u0026 Market_Leaders[MARKET_LEADERS]","columnType":"Calculated"},{"name":"Market Number","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Experienced Advisor","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Exp Advisor Sort","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = DB2.Database('podwh021:50000', 'podwh021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT DISTINCT#(lf)t1.ORZN_DEPT_CDE as RFO_CDE,#(lf)t1.ORZN_ZONE_CDE as RFO_ZONE_NM,#(lf)(SUBSTRING(t1.ORZN_ZONE_CDE,6,5)) AS Market_ID,#(lf)t3.ORZN_DEPT_DSCR,#(lf)t3.EMP_ID,#(lf)t3.EMP_STS_TYP_CDE,#(lf)t3.trmn_dt,#(lf)t3.JOB_TYP_CDE,#(lf)t3.JOB_TYP_DSCR,#(lf)t3.EMP_NM,#(lf)case when t3.emp_nm is null then \u0027Vacant\u0027 Else t3.emp_nm end as market_leaderS#(lf)FROM SEMANTIC.SALES_HIERARCHY_DIMENSION t1#(lf)left join#(lf)(#(lf)SELECT DISTINCT#(lf)T1.SALE_HIER_ID,#(lf)t1.orzn_zone_cde,#(lf)t1.orzn_dept_dscr,#(lf)t2.orzn_dept_cde,#(lf)t2.EMP_ID,#(lf)t2.EMP_STS_TYP_CDE,#(lf)t2.trmn_dt,#(lf)t2.JOB_TYP_CDE,#(lf)t2.JOB_TYP_DSCR,#(lf)t2.EMP_NM#(lf)FROM#(lf)SEMANTIC.SALES_HIERARCHY_DIMENSION t1#(lf)left JOIN HUMAN_RESOURCES.CNF_EMP_DIM_DTL_CURR_CFDL t2 ON T1.SALE_HIER_ID = T2.emp_id#(lf)where t1.CURR_ROW_IND = \u0027Y\u0027#(lf)and t2.emp_sts_typ_cde in (\u0027A\u0027)#(lf)and t1.EFF_END_TMSP is null#(lf)AND T2.CURR_ROW_IND = \u0027Y\u0027#(lf)and t1.EFF_END_TMSP is null#(lf)and (t2.JOB_TYP_CDE IN (\u0027001002\u0027, \u0027001003\u0027, \u0027001007\u0027)#(lf)OR T2.EMP_ID IN (\u0027TS60295\u0027,\u0027TS49431\u0027,\u0027TS22024\u0027))#(lf)AND T2.EMP_ID NOT IN(\u0027TS62904\u0027,\u0027TS67022\u0027) #(lf))#(lf)t3#(lf)on t1.orzn_zone_cde = t3.orzn_zone_cde#(lf)where t1.CURR_ROW_IND = \u0027Y\u0027#(lf)and t1.eff_end_tmsp is null#(lf)--and t1.rfo_zone_sts_cde in (\u0027A\u0027)#(lf)and substring(t1.orzn_zone_cde,6,2) \u003c\u003e \u002700\u0027#(lf)and t1.orzn_dept_cde \u003c\u003e \u0027UKWN\u0027#(lf)order BY t1.ORZN_ZONE_CDE;#(lf)']),    #'Added Custom' = Table.AddColumn(Source, 'Market Number', each Text.End([MARKET_ID],2)),    #'Added Conditional Column' = Table.AddColumn(#'Added Custom', 'Experienced Advisor', each if [Market Number] = '01' then 'PMC - Market 1' else if [Market Number] = '59' then 'PMC - Market 59' else if [Market Number] = '69' then 'GPA - Market 69' else if [Market Number] = '79' then 'GPD - Market 79' else if [Market Number] = '98' then 'NPG - Market 98' else if [Market Number] = '99' then 'NPG - Market 99' else null),    #'Added Custom1' = Table.AddColumn(#'Added Conditional Column', 'Exp Advisor Sort', each Text.End([Experienced Advisor],9)),    #'Filtered Rows' = Table.SelectRows(#'Added Custom1', each ([MARKET_LEADERS] \u003c\u003e 'Barringer,Kevin'))in    #'Filtered Rows'"}]},{"name":"New Clients","isHidden":false,"storageMode":"Import","columns":[{"name":"Date Surrogate Key","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Contract Version Number","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Writing Agent Version Number","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Financial Customer Point Status Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Financial Customer Age","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Age Class Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Age Class Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Financial Customer Point Value","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"CUST_LGAL_FMT_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Member Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Member Type Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Residential State Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CTRC_ISS_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Level 5 Product Line Of Business Subgroup Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Level 5 Product Line Of Business Subgroup Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Level 4 Product Line Of Business Group Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Level 4 Product Line Of Business Group Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Level 3 Product Line Of Business Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Level 3 Product Line Of Business Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Level 2 Product Character Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Level 2 Product Character Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Assigned FR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee First Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee Middle Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee Last Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Adjusted Service Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TS ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee Status Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee Status Type Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Type Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Current Row Indicator Sales Hierarchy","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Calendar Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Calendar Month Start Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Calendar Month End Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Financial Customer Point Reason Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Financial Customer Point Reason Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Financial Customer Point Relationship Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Financial Customer Point Relationship Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Financial Customer Age Group","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Member Age","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Week End Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Week Number","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Year Number","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Year Week Number","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_DAY_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_MTH_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_QTR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Sales Hierarchy Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Effective Begin Timestamp","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Effective End Timestamp","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Agent Current Row Indicator","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Partner Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Managing Partner Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Organization Zone Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Organization Department Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Organization Division Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Organization Division Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Sales Hierarchy Dimension Surrogate Key","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"RFOTenure","dataType":"String","isHidden":false,"expression":"CONCATENATE(\u0027New Clients\u0027[RFO], \u0027New Clients\u0027[FP Tenure - NFP, Vet])","columnType":"Calculated"},{"name":"RFOTenureWithOther","dataType":"String","isHidden":false,"expression":"CONCATENATE(\u0027New Clients\u0027[RFO], \u0027New Clients\u0027[FP Tenure - NFP, Vet, Other])","columnType":"Calculated"},{"name":"FP Tenure - NFP, Vet","dataType":"String","isHidden":false,"expression":"if(not(\u0027New Clients\u0027[Job Type Code] in {'002000', '002010', '002022', '002024', '002025', '002026', '002027', '003100', '003500'}), 'Vet',if(((\u0027New Clients\u0027[Calendar Date] - \u0027New Clients\u0027[Adjusted Service Date]) / 365.25) \u003c 4, 'NFP', 'Vet')) ","columnType":"Calculated"},{"name":"FP Tenure - NFP, Vet, Other","dataType":"String","isHidden":false,"expression":"if(not(\u0027New Clients\u0027[Job Type Code] in {'002000', '002010', '002022', '002024', '002025', '002026', '002027', '003100', '003500'}), 'Other',if(((\u0027New Clients\u0027[Calendar Date] - \u0027New Clients\u0027[Adjusted Service Date]) / 365.25) \u003c 4, 'NFP', 'Vet')) ","columnType":"Calculated"}],"measures":[{"name":"PC:NC Ratio","expression":"[YTD PCs - Detail Tab] / [YTD Total New Clients]","isHidden":false},{"name":"YTD New Clients","expression":"calculate(sum(\u0027New Clients\u0027[Financial Customer Point Value]),DTRB_PERF_DATES[YTD Flag two Sundays] in {TRUE})","isHidden":false},{"name":"YTD New Clients NFP","expression":"calculate(sum(\u0027New Clients\u0027[Financial Customer Point Value]),DTRB_PERF_DATES[YTD Flag two Sundays] in {TRUE}, \u0027New Clients\u0027[FP Tenure - NFP, Vet, Other] = 'NFP')","isHidden":false},{"name":"YTD New Clients Other","expression":"calculate(sum(\u0027New Clients\u0027[Financial Customer Point Value]),DTRB_PERF_DATES[YTD Flag two Sundays] in {TRUE}, \u0027New Clients\u0027[FP Tenure - NFP, Vet, Other] = 'Other')","isHidden":false},{"name":"YTD New Clients Vet","expression":"calculate(sum(\u0027New Clients\u0027[Financial Customer Point Value]),DTRB_PERF_DATES[YTD Flag two Sundays] in {TRUE}, \u0027New Clients\u0027[FP Tenure - NFP, Vet, Other] = 'Vet')","isHidden":false},{"name":"YTD Total New Clients","expression":"if(HASONEVALUE(\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet, Other]),SWITCH(VALUES(\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet, Other]),'NFP', [YTD New Clients NFP],'Vet', [YTD New Clients Vet],'Other', [YTD New Clients Other]), \u0027New Clients\u0027[YTD New Clients])","isHidden":false}],"source":[{"expression":"let    Source = DB2.Database('podwh021:50000', 'podwh021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT IA_DATES_ITRL.DT_SK,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.CTRC_VRSN_NBR,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.WRTG_AGT_VRSN_NBR,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_STS_CDE,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.CUST_AGE,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.AGE_CLAS_CDE,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.AGE_CLAS_DSCR,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_VLU,#(lf)       CNF_CUSTOMER_DIM_CFDL.CUST_LGAL_FMT_NM, #(lf)       CNF_CUSTOMER_DIM_CFDL.CUST_BRTH_DT,#(lf)       CNF_CUSTOMER_DIM_CFDL.MBR_TYP_CDE,#(lf)       CNF_CUSTOMER_DIM_CFDL.MBR_TYP_DSCR,#(lf)       CNF_CUSTOMER_DIM_CFDL.RSDL_ST_CDE,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.CTRC_ISS_DT, #(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L5_PLOB_SGRP_CDE,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L5_PLOB_SGRP_DSCR,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L4_PLOB_GRP_CDE,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L4_PLOB_GRP_DSCR,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L3_PROD_LOB_CDE,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L3_PROD_LOB_DSCR,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L2_PROD_CHAR_CDE,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L2_PROD_CHAR_DSCR,#(lf)       AGT_DIM_CURR_CFDL.PARY_DSPL_2_NM,#(lf)       AGT_DIM_CURR_CFDL.FRST_NM,#(lf)       AGT_DIM_CURR_CFDL.MDDL_NM,#(lf)       AGT_DIM_CURR_CFDL.LST_NM,#(lf)       AGT_DIM_CURR_CFDL.ADJ_SVC_DT,#(lf)       AGT_DIM_CURR_CFDL.EMP_ID,#(lf)       AGT_DIM_CURR_CFDL.EMP_STS_TYP_CDE,#(lf)       AGT_DIM_CURR_CFDL.EMP_STS_TYP_DSCR,#(lf)       AGT_DIM_CURR_CFDL.JOB_TYP_CDE,#(lf)       AGT_DIM_CURR_CFDL.JOB_TYP_DSCR,#(lf)       AGT_DIM_CURR_CFDL.CURR_ROW_IND,#(lf)       IA_DATES_ITRL.CAL_DAY_DT,#(lf)       IA_DATES_ITRL.CAL_MTH_NM,#(lf)       IA_DATES_ITRL.CAL_MTH_STRT_DT,#(lf)       IA_DATES_ITRL.CAL_MTH_END_DT,#(lf)       IA_DATES_ITRL.CAL_YR_QTR_NBR,#(lf)       IA_DATES_ITRL.CAL_QTR_NM,#(lf)       IA_DATES_ITRL.CAL_WK_NM,#(lf)       FIN_CUST_ELIG_DIM_CFDL.FIN_CUST_PNT_RSN_CDE,#(lf)       FIN_CUST_ELIG_DIM_CFDL.FIN_CUST_PNT_RSN_DSCR,#(lf)       FIN_CUST_ELIG_DIM_CFDL.CTRC_RLTN_TYP_CDE,#(lf)       FIN_CUST_ELIG_DIM_CFDL.CTRC_RLTN_TYP_DSCR,#(lf)       CASE#(lf)          WHEN (CUST_AGE \u003e= 0) AND (CUST_AGE \u003c= 15) THEN \u00270-15\u0027#(lf)          WHEN (CUST_AGE \u003e= 16) AND (CUST_AGE \u003c= 25) THEN \u002716-25\u0027#(lf)          WHEN (CUST_AGE \u003e= 26) AND (CUST_AGE \u003c= 35) THEN \u002726-35\u0027#(lf)          WHEN (CUST_AGE \u003e= 36) AND (CUST_AGE \u003c= 45) THEN \u002736-45\u0027#(lf)          WHEN (CUST_AGE \u003e= 46) AND (CUST_AGE \u003c= 55) THEN \u002746-55\u0027#(lf)          WHEN (CUST_AGE \u003e= 56) AND (CUST_AGE \u003c= 65) THEN \u002756-65\u0027#(lf)          WHEN (CUST_AGE \u003e= 66) AND (CUST_AGE \u003c= 75) THEN \u002766-75\u0027#(lf)          WHEN CUST_AGE \u003e 75 THEN \u002776+\u0027#(lf)       END#(lf)          AS Member_Age_Group,#(lf)       integer (floor ( (CURRENT DATE - CUST_BRTH_DT) / 10000)) AS Member_Age,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_WK_END_DT,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_WK_NBR,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_YR_NBR,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_YR_WK_NBR,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_WK_TXT,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_YR_TXT,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_DAY_TXT,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_MTH_TXT,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_QTR_TXT,#(lf)       SALE_HIER_DIM.SALE_HIER_ID,#(lf)       SALE_HIER_DIM.EFF_BEG_TMSP,#(lf)       SALE_HIER_DIM.EFF_END_TMSP,#(lf)       SALE_HIER_DIM.CURR_ROW_IND,#(lf)       SALE_HIER_DIM.PRTR_NM,#(lf)       SALE_HIER_DIM.MANP_NM,#(lf)       SALE_HIER_DIM.ORZN_ZONE_CDE,#(lf)       SALE_HIER_DIM.ORZN_ZONE_DSCR,#(lf)       (LEFT(SALE_HIER_DIM.ORZN_ZONE_CDE,4)) as ORZN_DEPT_CDE,#(lf)       SALE_HIER_DIM.ORZN_DEPT_DSCR,#(lf)       SALE_HIER_DIM.ORZN_DIV_CDE,#(lf)       SALE_HIER_DIM.ORZN_DIV_DSCR,#(lf)       SALE_HIER_DIM.ORZN_SUB_DEPT_CDE,#(lf)       SALE_HIER_DIM.SALE_HIER_DIM_SK#(lf)#(lf)  FROM ((((((COMMON.IA_DATES_ITRL IA_DATES_ITRL#(lf)             INNER JOIN COMMON.DTRB_PERF_DATES DTRB_PERF_DATES#(lf)                ON (IA_DATES_ITRL.DT_SK = DTRB_PERF_DATES.DT_SK))#(lf)            LEFT OUTER JOIN#(lf)            SALES.TF_FIN_CUST_EVT_FCT_CFDL TF_FIN_CUST_EVT_FCT_CFDL#(lf)               ON (IA_DATES_ITRL.DT_SK =#(lf)                      TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_CRNG_DT_SK))#(lf)           RIGHT OUTER JOIN HUMAN_RESOURCES.SALE_HIER_DIM SALE_HIER_DIM#(lf)              ON (SALE_HIER_DIM.SALE_HIER_DIM_SK =#(lf)                     TF_FIN_CUST_EVT_FCT_CFDL.SLHR_DIM_CURR_CRNG_AGT_SK))#(lf)          LEFT OUTER JOIN MEMBER.CNF_CUSTOMER_DIM_CFDL CNF_CUSTOMER_DIM_CFDL#(lf)             ON (CNF_CUSTOMER_DIM_CFDL.CUST_SK =#(lf)                    TF_FIN_CUST_EVT_FCT_CFDL.CUST_SK))#(lf)         LEFT OUTER JOIN HUMAN_RESOURCES.AGT_DIM_CURR_CFDL AGT_DIM_CURR_CFDL#(lf)            ON (AGT_DIM_CURR_CFDL.AGT_DIM_SK =#(lf)                   TF_FIN_CUST_EVT_FCT_CFDL.CRNG_AGT_SK))#(lf)        RIGHT OUTER JOIN SALES.FIN_CUST_ELIG_DIM_CFDL FIN_CUST_ELIG_DIM_CFDL#(lf)           ON (FIN_CUST_ELIG_DIM_CFDL.FIN_CUST_PNT_ELIG_DIM_SK =#(lf)                  TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_ELIG_DIM_SK))#(lf)       LEFT OUTER JOIN#(lf)       CONTRACT.CNF_CONTRACT_DIM_DTL_CFDL CNF_CONTRACT_DIM_DTL_CFDL#(lf)          ON     (CNF_CONTRACT_DIM_DTL_CFDL.CTRC_SK =#(lf)                     TF_FIN_CUST_EVT_FCT_CFDL.CTRC_SK)#(lf)            and   (CNF_CONTRACT_DIM_DTL_CFDL.VRSN_NBR =#(lf)                     TF_FIN_CUST_EVT_FCT_CFDL.CTRC_VRSN_NBR)#(lf)WHERE     (AGT_DIM_CURR_CFDL.CURR_ROW_IND = \u0027Y\u0027)#(lf)     #(lf)       AND (SALE_HIER_DIM.CURR_ROW_IND = \u0027Y\u0027)#(lf)       AND sale_hier_dim.ORZN_DEPT_CDE in (\u00270001\u0027,\u00270115\u0027,\u00270190\u0027,\u00270283\u0027,\u00270291\u0027,\u00270361\u0027,\u00270383\u0027,\u00270384\u0027,\u00270435\u0027,\u00270525\u0027,\u00270716\u0027)#(lf)       AND DTRB_PERF_DATES.DTRB_PERF_RPT_YR_NBR in (\u00272022\u0027,\u00272023\u0027,\u00272024\u0027)#(lf)      #(lf)']),    #'Renamed Columns' = Table.RenameColumns(Source,{{'ADJ_SVC_DT', 'Adjusted Service Date'}, {'AGE_CLAS_CDE', 'Age Class Code'}, {'AGE_CLAS_DSCR', 'Age Class Description'}, {'CTRC_RLTN_TYP_CDE', 'Financial Customer Point Relationship Code'}, {'CTRC_RLTN_TYP_DSCR', 'Financial Customer Point Relationship Description'}, {'CTRC_VRSN_NBR', 'Contract Version Number'}, {'CUST_AGE', 'Financial Customer Age'}, {'MEMBER_AGE', 'Member Age'}, {'EFF_BEG_TMSP', 'Effective Begin Timestamp'}, {'EFF_END_TMSP', 'Effective End Timestamp'}, {'EMP_ID', 'Employee Identifier'}, {'EMP_STS_TYP_CDE', 'Employee Status Type Code'}, {'EMP_STS_TYP_DSCR', 'Employee Status Type Description'}, {'FIN_CUST_PNT_RSN_CDE', 'Financial Customer Point Reason Code'}, {'FIN_CUST_PNT_RSN_DSCR', 'Financial Customer Point Reason Description'}, {'FIN_CUST_PNT_STS_CDE', 'Financial Customer Point Status Code'}, {'FIN_CUST_PNT_VLU', 'Financial Customer Point Value'}, {'FRST_NM', 'Employee First Name'}, {'JOB_TYP_CDE', 'Job Type Code'}, {'JOB_TYP_DSCR', 'Job Type Description'}, {'L2_PROD_CHAR_CDE', 'Level 2 Product Character Code'}, {'L2_PROD_CHAR_DSCR', 'Level 2 Product Character Description'}, {'L3_PROD_LOB_CDE', 'Level 3 Product Line Of Business Code'}, {'L3_PROD_LOB_DSCR', 'Level 3 Product Line Of Business Description'}, {'L4_PLOB_GRP_CDE', 'Level 4 Product Line Of Business Group Code'}, {'L4_PLOB_GRP_DSCR', 'Level 4 Product Line Of Business Group Description'}, {'L5_PLOB_SGRP_CDE', 'Level 5 Product Line Of Business Subgroup Code'}, {'L5_PLOB_SGRP_DSCR', 'Level 5 Product Line Of Business Subgroup Description'}, {'LST_NM', 'Employee Last Name'}, {'MANP_NM', 'Managing Partner Name'}, {'MBR_TYP_CDE', 'Member Type Code'}, {'MBR_TYP_DSCR', 'Member Type Description'}, {'ORZN_DEPT_CDE', 'Organization Department Code'}, {'ORZN_DEPT_DSCR', 'Organization Department Description'}, {'ORZN_DIV_CDE', 'Organization Division Code'}, {'ORZN_DIV_DSCR', 'Organization Division Description'}, {'ORZN_ZONE_CDE', 'Organization Zone Code'}, {'ORZN_ZONE_DSCR', 'Organization Zone Description'}, {'PARY_DSPL_2_NM', 'Assigned FR'}, {'PRTR_NM', 'Partner Name'}, {'RSDL_ST_CDE', 'Residential State Code'}, {'SALE_HIER_DIM_SK', 'Sales Hierarchy Dimension Surrogate Key'}, {'SALE_HIER_ID', 'Sales Hierarchy Identifier'}, {'WRTG_AGT_VRSN_NBR', 'Writing Agent Version Number'}, {'MDDL_NM', 'Employee Middle Name'}, {'CAL_DAY_DT', 'Calendar Date'}, {'CAL_MTH_END_DT', 'Calendar Month End Date'}, {'CAL_MTH_STRT_DT', 'Calendar Month Start Date'}, {'DT_SK', 'Date Surrogate Key'}, {'CURR_ROW_IND', 'Current Row Indicator Sales Hierarchy'}, {'CURR_ROW_IND2', 'Agent Current Row Indicator'}, {'MEMBER_AGE_GROUP', 'Financial Customer Age Group'}, {'DTRB_PERF_RPT_WK_END_DT', 'Distribution Performance Reporting Week End Date'}, {'DTRB_PERF_RPT_WK_NBR', 'Distribution Performance Reporting Week Number'}, {'DTRB_PERF_RPT_YR_NBR', 'Distribution Performance Reporting Year Number'}, {'DTRB_PERF_RPT_YR_WK_NBR', 'Distribution Performance Reporting Year Week Number'}}),    #'Removed Columns' = Table.RemoveColumns(#'Renamed Columns',{    'CUST_BRTH_DT', 'CAL_MTH_NM', 'CAL_QTR_NM', 'CAL_WK_NM', 'CAL_YR_QTR_NBR'}),    #'Renamed Columns1' = Table.RenameColumns(#'Removed Columns',{{'Organization Department Code', 'RFO'}, {'Organization Zone Code', 'Market'}, {'Employee Identifier', 'TS ID'}, {'ORZN_SUB_DEPT_CDE', 'MVP'}})in    #'Renamed Columns1'"}]},{"name":"Appointments/PC/JFW","isHidden":false,"storageMode":"Import","columns":[{"name":"Worker Appointment Association","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Appointment Dimension Surrogate Key","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Person Dimension Surrogate Key","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Membership Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Membership Type Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Appointment Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Appointment Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Appointment Type Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Adjusted Service Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Employee Status Type Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FP Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Current Week","dataType":"String","isHidden":false,"expression":"if(\u0027Appointments/PC/JFW\u0027[Appointment Date] = today(), \u0027Appointments/PC/JFW\u0027[Calendar Year Week Number])","columnType":"Calculated"},{"name":"Current Week Flag","dataType":"String","isHidden":false,"expression":"if(lookupvalue(\u0027Appointments/PC/JFW\u0027[Calendar Year Week Number], \u0027Appointments/PC/JFW\u0027[Appointment Date], today()) = \u0027Appointments/PC/JFW\u0027[Calendar Year Week Number], True, FALSE)","columnType":"Calculated"},{"name":"Division","dataType":"String","isHidden":false,"expression":"if(\u0027Appointments/PC/JFW\u0027[Historical RFO] IN {'0283', '0365', '0435', '0496', '0810'}, 'Central', if(\u0027Appointments/PC/JFW\u0027[Historical RFO] IN {'0115', '0165', '0190', '0240', '0361', '0384'}, 'East', if(\u0027Appointments/PC/JFW\u0027[Historical RFO] IN {'0291', '0410', '0475', '0525', '0529'}, 'West', 'Other')))","columnType":"Calculated"},{"name":"Region","dataType":"String","isHidden":false,"expression":"IF(\u0027Appointments/PC/JFW\u0027[Historical RFO] IN {'0361', '0365', '0435', '0496'}, 'Established', IF(\u0027Appointments/PC/JFW\u0027[Historical RFO] IN {'0165', '0240', '0283', '0291', '0410', '0525'}, 'Growth', IF(\u0027Appointments/PC/JFW\u0027[Historical RFO] IN {'0115', '0190', '0384', '0475', '0529'}, 'Invest', IF(\u0027Appointments/PC/JFW\u0027[Historical RFO] = '0716', 'TAN',IF(\u0027Appointments/PC/JFW\u0027[Historical RFO] = '0810', 'Colorado Springs', '')))))","columnType":"Calculated"},{"name":"Current Year Flag","dataType":"String","isHidden":false,"expression":"if(\u0027Appointments/PC/JFW\u0027[Calendar Year Name] = \u0027Appointments/PC/JFW\u0027[Current Year], True, False)","columnType":"Calculated"},{"name":"Prior Year Flag","dataType":"String","isHidden":false,"expression":"if(\u0027Appointments/PC/JFW\u0027[Calendar Year Name] = \u0027Appointments/PC/JFW\u0027[Prior Year], True, False)","columnType":"Calculated"},{"name":"Prior Year 2 Flag","dataType":"String","isHidden":false,"expression":"if(\u0027Appointments/PC/JFW\u0027[Calendar Year Name] = \u0027Appointments/PC/JFW\u0027[Prior Year 2], True, False)","columnType":"Calculated"},{"name":"Prior Week Flag","dataType":"String","isHidden":false,"expression":"if(LOOKUPVALUE(\u0027Appointments/PC/JFW\u0027[Calendar Year Week Number], \u0027Appointments/PC/JFW\u0027[Appointment Date], today() - 7) = \u0027Appointments/PC/JFW\u0027[Calendar Year Week Number], 'True')","columnType":"Calculated"},{"name":"FP Tenure - NFP1-4, Vet, Other","dataType":"String","isHidden":false,"expression":"if(not(\u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000', '002010', '002020', '002021', '002022', '002024', '002025', '002026', '002027', '003100', '003500'}), 'Other',    if((\u0027Appointments/PC/JFW\u0027[Appointment Date] - \u0027Appointments/PC/JFW\u0027[Adjusted Service Date])/ 365.25 \u003c 1, 'NFP1',     if((\u0027Appointments/PC/JFW\u0027[Appointment Date] - \u0027Appointments/PC/JFW\u0027[Adjusted Service Date])/ 365.25 \u003c 2, 'NFP2',     if((\u0027Appointments/PC/JFW\u0027[Appointment Date] - \u0027Appointments/PC/JFW\u0027[Adjusted Service Date])/ 365.25 \u003c 3, 'NFP3',     if((\u0027Appointments/PC/JFW\u0027[Appointment Date] - \u0027Appointments/PC/JFW\u0027[Adjusted Service Date])/ 365.25 \u003c 4, 'NFP4',     'Vet')))))","columnType":"Calculated"},{"name":"FP Tenure (years)","dataType":"Double","isHidden":false,"expression":"(\u0027Appointments/PC/JFW\u0027[Appointment Date] - \u0027Appointments/PC/JFW\u0027[Adjusted Service Date]) / 365.25","columnType":"Calculated"},{"name":"Appointment Type Code (groups)","dataType":"String","isHidden":false,"expression":"SWITCH(  TRUE,  ISBLANK(\u0027Appointments/PC/JFW\u0027[Appointment Type Code]),  '(Blank)',  \u0027Appointments/PC/JFW\u0027[Appointment Type Code] IN {'Connect'},  'Connect',  \u0027Appointments/PC/JFW\u0027[Appointment Type Code] IN {'Gather Data'},  'Gather Data',  \u0027Appointments/PC/JFW\u0027[Appointment Type Code] IN {'Business Planning/QBR',    'Call Clinic',    'Career Overview',    'Case Development',    'COI',    'Final Interview',    'First Interview',    'Lunch and Learn',    'Networking',    'One-on-One',    'Other',    'Out of Office',    'Personal',    'Recruiting',    'Second Interview',    'Third Interview',    'Training',    'UNK',    'Workshop/Client Appreciation'},  'Other',  \u0027Appointments/PC/JFW\u0027[Appointment Type Code] IN {'Review'},  'Review',  \u0027Appointments/PC/JFW\u0027[Appointment Type Code] IN {'Service'},  'Service',  \u0027Appointments/PC/JFW\u0027[Appointment Type Code] IN {'Strategy Call/Meeting'},  'Strategy Call/Meeting',  \u0027Appointments/PC/JFW\u0027[Appointment Type Code] IN {'Take Action'},  'Take Action',  \u0027Appointments/PC/JFW\u0027[Appointment Type Code])","columnType":"Calculated"},{"name":"appt_occurs","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Historical RFO","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Historical Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Historical FP Tenure","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Historical FP Tenure Group","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Historical Job Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Historical Job Type Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TOP 10 - FP Tenure - NFP1-4, Vet, Other","dataType":"String","isHidden":false,"expression":"if(not(\u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000', '002016', '002022', '002024', '002025', '002026', '002027', '003100', '003500'}), 'Other',    if((DTRB_PERF_DATES[Previous Sunday Date2] - \u0027Appointments/PC/JFW\u0027[Adjusted Service Date])/ 365.25 \u003c 1, 'NFP1',     if((DTRB_PERF_DATES[Previous Sunday Date2] - \u0027Appointments/PC/JFW\u0027[Adjusted Service Date])/ 365.25 \u003c 2, 'NFP2',     if((DTRB_PERF_DATES[Previous Sunday Date2] - \u0027Appointments/PC/JFW\u0027[Adjusted Service Date])/ 365.25 \u003c 3, 'NFP3',     if((DTRB_PERF_DATES[Previous Sunday Date2] - \u0027Appointments/PC/JFW\u0027[Adjusted Service Date])/ 365.25 \u003c 4, 'NFP4',     'Vet')))))","columnType":"Calculated"},{"name":"Employee Status","dataType":"String","isHidden":false,"expression":"if(\u0027Appointments/PC/JFW\u0027[Employee Status Type Description] = 'Active', 'Active', 'Inactive')","columnType":"Calculated"},{"name":"Appointment Type","dataType":"String","isHidden":false,"expression":"if(\u0027Appointments/PC/JFW\u0027[Appointment Type Code (groups)] = 'Appointment', 'Other', \u0027Appointments/PC/JFW\u0027[Appointment Type Code (groups)])","columnType":"Calculated"},{"name":"TSID_Market_Appt","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Channel","dataType":"String","isHidden":false,"expression":"if(\u0027Appointments/PC/JFW\u0027[Historical RFO] in {'0001','0115','0165','0190','0240','0283','0291','0361','0365','0384','0410','0435','0475','0496','0525','0529','0810'}, 'Thrivent Advisor Group')","columnType":"Calculated"},{"name":"RFOTenure","dataType":"String","isHidden":false,"expression":"CONCATENATE(\u0027Appointments/PC/JFW\u0027[Historical RFO], \u0027Appointments/PC/JFW\u0027[FA Tenure - NFP, Vet])","columnType":"Calculated"},{"name":"ChannelTenure","dataType":"String","isHidden":false,"expression":"CONCATENATE(\u0027Appointments/PC/JFW\u0027[Channel], \u0027Appointments/PC/JFW\u0027[FA Tenure - NFP, Vet])","columnType":"Calculated"},{"name":"Historical RFO - Copy","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFOTenureWithOther","dataType":"String","isHidden":false,"expression":"CONCATENATE(\u0027Appointments/PC/JFW\u0027[Historical RFO], \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet, Other])","columnType":"Calculated"},{"name":"FP Tenure - NFP, Vet, Other","dataType":"String","isHidden":false,"expression":"if(not(\u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000', '002010', '002020', '002021', '002022', '002024', '002025', '002026', '002027', '003100', '003500'}), 'Other',    if((\u0027Appointments/PC/JFW\u0027[Appointment Date] - \u0027Appointments/PC/JFW\u0027[Adjusted Service Date])/ 365.25 \u003c 4, 'NFP',     'Vet'))","columnType":"Calculated"},{"name":"Historical MVP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Calendar Year Name","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Calendar Year Week Number","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"JFW_IND","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"FP Tenure - NFP 6 Mo","dataType":"String","isHidden":false,"expression":"if(not(\u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000', '002010', '002022', '002024', '002025', '002026', '002027', '003100', '003500'}), 'Vet', if(((\u0027Appointments/PC/JFW\u0027[Appointment Date] - \u0027Appointments/PC/JFW\u0027[Adjusted Service Date]) / 365.25) \u003c 0.5, 'NFP 6 Mo', 'NA'))","columnType":"Calculated"},{"name":"FA TSID - Name","dataType":"String","isHidden":false,"expression":"\u0027Appointments/PC/JFW\u0027[TSID] \u0026' - '\u0026 \u0027Appointments/PC/JFW\u0027[FP Name]","columnType":"Calculated"},{"name":"Status2","dataType":"String","isHidden":false,"expression":"RELATED(\u0027Producer_Snowflake\u0027[Status])","columnType":"Calculated"},{"name":"Status - Active/Inactive","dataType":"String","isHidden":false,"expression":"if(\u0027Appointments/PC/JFW\u0027[Status2] = 'Active', 'Active', 'Inactive')","columnType":"Calculated"},{"name":"FA Tenure - NFP, Vet","dataType":"String","isHidden":false,"expression":"if(not(\u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000', '002010', '002022', '002024', '002025', '002026', '002027', '003100', '003500'}), 'Vet',if(((\u0027Appointments/PC/JFW\u0027[Appointment Date] - \u0027Appointments/PC/JFW\u0027[Adjusted Service Date]) / 365.25) \u003c 4, 'NFP', 'Vet'))--if(\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP1-4, Vet, Other] in {'NFP1', 'NFP2', 'NFP3', 'NFP4'}, 'NFA', 'Vet')","columnType":"Calculated"},{"name":"FA Tenure - NFA, Vet slicer","dataType":"String","isHidden":false,"expression":"if(\u0027Appointments/PC/JFW\u0027[FA Tenure - NFP, Vet] = 'NFP', 'NFA', 'Vet')","columnType":"Calculated"},{"name":"FA Tenure - NFA1-4, Associate Rep, Vet, Other NEWEST","dataType":"String","isHidden":false,"expression":"    if(not(\u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000', '002010', '002020', '002021', '002022', '002024', '002025', '002026', '002027', '003100', '003500'}), 'Other',    if(\u0027Appointments/PC/JFW\u0027[Historical Job Type Code] = '002010', 'Associate Rep',    if((\u0027Appointments/PC/JFW\u0027[Appointment Date] - \u0027Appointments/PC/JFW\u0027[Adjusted Service Date])/ 365.25 \u003c 1, 'NFA1',     if((\u0027Appointments/PC/JFW\u0027[Appointment Date] - \u0027Appointments/PC/JFW\u0027[Adjusted Service Date])/ 365.25 \u003c 2, 'NFA2',     if((\u0027Appointments/PC/JFW\u0027[Appointment Date] - \u0027Appointments/PC/JFW\u0027[Adjusted Service Date])/ 365.25 \u003c 3, 'NFA3',     if((\u0027Appointments/PC/JFW\u0027[Appointment Date] - \u0027Appointments/PC/JFW\u0027[Adjusted Service Date])/ 365.25 \u003c 4, 'NFA4',     'Vet'))))))","columnType":"Calculated"},{"name":"FA Tenure - Assoc Rep, NFA, Vet, Other","dataType":"String","isHidden":false,"expression":"if(not(\u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000', '002010', '002022', '002024', '002025', '002026', '002027', '003100', '003500'}), 'Other',if(\u0027Appointments/PC/JFW\u0027[Historical Job Type Code] = '002010', 'Associate Rep',if(((\u0027Appointments/PC/JFW\u0027[Appointment Date] - \u0027Appointments/PC/JFW\u0027[Adjusted Service Date]) / 365.25) \u003c 4, 'NFA', 'VET')))","columnType":"Calculated"},{"name":"FA Tenure - Associate Rep, NFA, Vet slicer","dataType":"String","isHidden":false,"expression":"if(\u0027Appointments/PC/JFW\u0027[FA Tenure - Assoc Rep, NFA, Vet, Other] = 'Associate Rep', 'Associate Rep', if(\u0027Appointments/PC/JFW\u0027[FA Tenure - Assoc Rep, NFA, Vet, Other] = 'NFA', 'NFA',if(\u0027Appointments/PC/JFW\u0027[FA Tenure - Assoc Rep, NFA, Vet, Other] = 'Vet', 'Vet')))","columnType":"Calculated"}],"measures":[{"name":"Current Week #","expression":"FIRSTNONBLANK(\u0027Appointments/PC/JFW\u0027[Current Week], \u0027Appointments/PC/JFW\u0027[Current Week])","isHidden":false},{"name":"Current Date","expression":"today()","isHidden":false},{"name":"Current Year","expression":"year(today())","isHidden":false},{"name":"Prior Year","expression":"[DTRB Current Year] - 1--\u0027Appointments \u0026 PCs\u0027[Current Year] - 1","isHidden":false},{"name":"PYTD Date DELETE","expression":"\u0027Appointments/PC/JFW\u0027[Current Date] - 365","isHidden":false},{"name":"PY Appointments","expression":"CALCULATE(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'PREVIOUS')","isHidden":false},{"name":"Prior Year 2","expression":"[DTRB Current Year] - 2","isHidden":false},{"name":"PYTD Appointments","expression":"var pytd_end_date = date(    year(LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'Previous'))-1,    month(LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'Previous')),    day(LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'Previous')))var pytd_start_date = date(year(pytd_end_date),1,1)returncalculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT] \u003c= pytd_end_date,    \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT] \u003e= pytd_start_date)","isHidden":false},{"name":"PY2TD Appointments","expression":"var py2td_end_date = date(    year(LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'Previous'))-2,    month(LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'Previous')),    day(LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'Previous')))var py2td_start_date = date(year(py2td_end_date),1,1)returncalculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT] \u003c= py2td_end_date,    \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT] \u003e= py2td_start_date)--CALCULATE(    --DISTINCTCOUNT(\u0027Appointments \u0026 PCs\u0027[Appointment Dimension Surrogate Key]),    --\u0027DTRB_PERF_DATES\u0027[PY2TD Flag] in {TRUE})","isHidden":false},{"name":"CY Current Week Appointments","expression":"CALCULATE(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT] = 'CURRENT',    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'CURRENT',    \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {TRUE})","isHidden":false},{"name":"CY Prior Week Appointments","expression":"CALCULATE(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT] = 'PREVIOUS',    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'CURRENT')","isHidden":false},{"name":"YOY Appointments","expression":"VAR __BASELINE_VALUE = [PYTD Appointments]VAR __VALUE_TO_COMPARE = [YTD Appointments]RETURN    IF(        NOT ISBLANK(__VALUE_TO_COMPARE),        DIVIDE(__VALUE_TO_COMPARE - __BASELINE_VALUE, __BASELINE_VALUE)    )","isHidden":false},{"name":"CY Prior Week Prospect Connects","expression":"CALCULATE(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT] = 'PREVIOUS',    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'CURRENT',    \u0027Appointments/PC/JFW\u0027[Membership Type Code] \u003c\u003e 'BEN',    \u0027Appointments/PC/JFW\u0027[Appointment Type Code] = 'Connect')","isHidden":false},{"name":"CY Current Week Prospect Connects","expression":"CALCULATE(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT] = 'CURRENT',    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'CURRENT',    \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {TRUE},    \u0027Appointments/PC/JFW\u0027[Membership Type Code] \u003c\u003e 'BEN',    \u0027Appointments/PC/JFW\u0027[Appointment Type Code] = 'Connect')","isHidden":false},{"name":"YTD Prospect Connects","expression":"CALCULATE(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {TRUE},    \u0027Appointments/PC/JFW\u0027[Membership Type Code] \u003c\u003e 'BEN',    \u0027Appointments/PC/JFW\u0027[Appointment Type Code] = 'Connect'    )","isHidden":false},{"name":"PYTD Prospect Connects","expression":"var pytd_end_date = date(    year(LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'Previous'))-1,    month(LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'Previous')),    day(LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'Previous')))var pytd_start_date = date(year(pytd_end_date),1,1)returncalculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT] \u003c= pytd_end_date,    \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT] \u003e= pytd_start_date,    \u0027Appointments/PC/JFW\u0027[Membership Type Code] \u003c\u003e 'BEN',    \u0027Appointments/PC/JFW\u0027[Appointment Type Code] = 'Connect')--CALCULATE(    --DISTINCTCOUNT(\u0027Appointments \u0026 PCs\u0027[Appointment Dimension Surrogate Key]),    --\u0027DTRB_PERF_DATES\u0027[PYTD Flag] in {TRUE},    --\u0027Appointments \u0026 PCs\u0027[Membership Type Code] \u003c\u003e 'BEN',    --\u0027Appointments \u0026 PCs\u0027[Appointment Type Code] = 'Connect')","isHidden":false},{"name":"PY2TD Prospect Connects","expression":"var py2td_end_date = date(    year(LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'Previous'))-2,    month(LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'Previous')),    day(LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'Previous')))var py2td_start_date = date(year(py2td_end_date),1,1)returncalculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT] \u003c= py2td_end_date,    \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT] \u003e= py2td_start_date,    \u0027Appointments/PC/JFW\u0027[Membership Type Code] \u003c\u003e 'BEN',    \u0027Appointments/PC/JFW\u0027[Appointment Type Code] = 'Connect')--CALCULATE(    --DISTINCTCOUNT(\u0027Appointments \u0026 PCs\u0027[Appointment Dimension Surrogate Key]),    --\u0027DTRB_PERF_DATES\u0027[PY2TD Flag] in {TRUE},    --\u0027Appointments \u0026 PCs\u0027[Membership Type Code] \u003c\u003e 'BEN',    --\u0027Appointments \u0026 PCs\u0027[Appointment Type Code] = 'Connect')","isHidden":false},{"name":"PY Prospect Connects","expression":"CALCULATE(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'PREVIOUS',    \u0027Appointments/PC/JFW\u0027[Membership Type Code] \u003c\u003e 'BEN',    \u0027Appointments/PC/JFW\u0027[Appointment Type Code] = 'Connect')","isHidden":false},{"name":"PY2 Prospect Connects","expression":"CALCULATE(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    \u0027Appointments/PC/JFW\u0027[Prior Year 2 Flag] in {TRUE},    \u0027Appointments/PC/JFW\u0027[Membership Type Code] \u003c\u003e 'BEN',    \u0027Appointments/PC/JFW\u0027[Appointment Type Code] = 'Connect')","isHidden":false},{"name":"YOY Prospect Connects","expression":"VAR __BASELINE_VALUE = [PYTD Prospect Connects]VAR __VALUE_TO_COMPARE = [YTD Prospect Connects]RETURN    IF(        NOT ISBLANK(__VALUE_TO_COMPARE),        DIVIDE(__VALUE_TO_COMPARE - __BASELINE_VALUE, __BASELINE_VALUE)    )","isHidden":false},{"name":"FP Appointments","expression":"calculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[TSID_Market_Appt]),    FILTER(\u0027Appointments/PC/JFW\u0027,    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002010','002022','002024','002025','002026','002027','003100','003500'}))","isHidden":false},{"name":"YTD FP Prospect Connects per FP","expression":"var MarketChoice = if(ISFILTERED(\u0027Market_Leaders\u0027[Market_Leader]),SELECTEDVALUE(\u0027RFO_Market\u0027[Organization Zone Code]))var RFOChoice = if(ISFILTERED(\u0027RFO_Market\u0027[RFO Name]),SELECTEDVALUE(\u0027RFO_Market\u0027[Adjusted RFO]))var ChannelChoice = if(isfiltered(RFO_Market[Channel]),SELECTEDVALUE(RFO_Market[Channel]))return--if(ISFILTERED(\u0027Market_Leaders\u0027[Market_Leader]),    --CALCULATE(DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], [YTD TOTAL Capacityy (Summary tab)]), \u0027Capacity\u0027[RFO_ID]= MarketChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}),if(ISFILTERED(\u0027RFO_Market\u0027[RFO Name]),    CALCULATE(DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], [YTD TOTAL Capacityy (Summary tab)]), \u0027Capacity\u0027[RFO_ID]= RFOChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}),if(ISFILTERED(RFO_Market[Channel]),    CALCULATE(DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], [YTD TOTAL Capacityy (Summary tab)]), \u0027Capacity\u0027[Channel]= ChannelChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True})))","isHidden":false},{"name":"FP Prospect Connects","expression":"calculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[TSID_Market_Appt]),    FILTER(\u0027Appointments/PC/JFW\u0027,    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002010','002022','002024','002025','002026','002027','003100','003500'}),    \u0027Appointments/PC/JFW\u0027[Membership Type Code] \u003c\u003e 'BEN',    \u0027Appointments/PC/JFW\u0027[Appointment Type Code] = 'Connect'    )","isHidden":false},{"name":"YTD PCs per NFP","expression":"var RFOChoice = if(ISFILTERED(RFO_Market[RFO]),SELECTEDVALUE(RFO_Market[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Market[Channel]),SELECTEDVALUE(RFO_Market[Channel]))--var DivisionChoice = if(ISFILTERED(RFO_Market[Division]),SELECTEDVALUE(RFO_Market[Division]))--var RegionChoice = if(ISFILTERED(RFO_Market[Region]),SELECTEDVALUE(RFO_Market[Region]))returnif(ISFILTERED(\u0027RFO_Market\u0027[RFO]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_ID]= RFOChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True},\u0027Appointments/PC/JFW\u0027[FA Tenure - NFP, Vet] = 'NFP',Capacity[Type] in {'NFR', 'Red Role'}),if(ISFILTERED(\u0027RFO_Market\u0027[Channel]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Channel]= ChannelChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True},\u0027Appointments/PC/JFW\u0027[FA Tenure - NFP, Vet] = 'NFP',Capacity[Type] in {'NFR', 'Red Role'})))--if(ISFILTERED(\u0027RFO_Market\u0027[Division]),--CALCULATE( DIVIDE(\u0027Appointments \u0026 PCs\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Division]= DivisionChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True},\u0027Appointments \u0026 PCs\u0027[FP Tenure - NFP, Vet] = 'NFP',Capacity[Type] in {'NFR', 'Red Role'}),--if(ISFILTERED(\u0027RFO_Market\u0027[Region]),--CALCULATE( DIVIDE(\u0027Appointments \u0026 PCs\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Region]= RegionChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True},\u0027Appointments \u0026 PCs\u0027[FP Tenure - NFP, Vet] = 'NFP',Capacity[Type] in {'NFR', 'Red Role'})))","isHidden":false},{"name":"YTD PCs per VET","expression":"var RFOChoice = if(ISFILTERED(RFO_Market[RFO]),SELECTEDVALUE(RFO_Market[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Market[Channel]),SELECTEDVALUE(RFO_Market[Channel]))--var DivisionChoice = if(ISFILTERED(RFO_Market[Division]),SELECTEDVALUE(RFO_Market[Division]))--var RegionChoice = if(ISFILTERED(RFO_Market[Region]),SELECTEDVALUE(RFO_Market[Region]))returnif(ISFILTERED(\u0027RFO_Market\u0027[RFO]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_ID]= RFOChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True},\u0027Appointments/PC/JFW\u0027[FA Tenure - NFP, Vet] = 'VET',Capacity[Type] in {'VET'}),if(ISFILTERED(\u0027RFO_Market\u0027[Channel]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Channel]= ChannelChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True},\u0027Appointments/PC/JFW\u0027[FA Tenure - NFP, Vet] = 'VET',Capacity[Type] in {'VET'})))--if(ISFILTERED(\u0027RFO_Market\u0027[Division]),--CALCULATE( DIVIDE(\u0027Appointments \u0026 PCs\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Division]= DivisionChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True},\u0027Appointments \u0026 PCs\u0027[FP Tenure - NFP, Vet] = 'VET',Capacity[Type] in {'VET'}),--if(ISFILTERED(\u0027RFO_Market\u0027[Region]),--CALCULATE( DIVIDE(\u0027Appointments \u0026 PCs\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Region]= RegionChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True},\u0027Appointments \u0026 PCs\u0027[FP Tenure - NFP, Vet] = 'VET',Capacity[Type] in {'VET'})))))","isHidden":false},{"name":"PCs YTD Wk Average","expression":"CALCULATE(divide(\u0027Appointments/PC/JFW\u0027[YTD Prospect Connects],max(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR])),\u0027DTRB_PERF_DATES\u0027[YTD Flag] in {TRUE})","isHidden":false},{"name":"YTD PCs per FP for Engagement Team visual","expression":"var RFOChoice = if(ISFILTERED(\u0027RFO_Market\u0027[RFO]),SELECTEDVALUE(\u0027RFO_Market\u0027[RFO]))--var ChannelChoice = if(isfiltered(\u0027Appointments \u0026 PCs\u0027[Channel]),SELECTEDVALUE(\u0027Appointments \u0026 PCs\u0027[Channel]))--var DivisionChoice = if(ISFILTERED(\u0027Appointments \u0026 PCs\u0027[Division]),SELECTEDVALUE(\u0027Appointments \u0026 PCs\u0027[Division]))--var RegionChoice = if(ISFILTERED(\u0027Appointments \u0026 PCs\u0027[Region]),SELECTEDVALUE(\u0027Appointments \u0026 PCs\u0027[Region]))returnif(ISFILTERED(\u0027RFO_Market\u0027[RFO]),    CALCULATE(DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_ID]= RFOChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}))--if(ISFILTERED(\u0027Appointments \u0026 PCs\u0027[Channel]),    --CALCULATE(DIVIDE(\u0027Appointments \u0026 PCs\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Channel]= ChannelChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}),--if(ISFILTERED(\u0027Appointments \u0026 PCs\u0027[Division]),    --CALCULATE(DIVIDE(\u0027Appointments \u0026 PCs\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Division]= DivisionChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}),--if(ISFILTERED(\u0027Appointments \u0026 PCs\u0027[Region]),    --CALCULATE(DIVIDE(\u0027Appointments \u0026 PCs\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Region]= RegionChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True})))))","isHidden":false},{"name":"Prior WK PCs per FP","expression":"var RFOChoice = if(ISFILTERED(RFO_Market[RFO]),SELECTEDVALUE(RFO_Market[RFO]))var ChannelChoice = if(ISFILTERED(RFO_Market[Channel]),SELECTEDVALUE(RFO_Market[Channel]))--var DivisionChoice = if(ISFILTERED(RFO_Market[Division]),SELECTEDVALUE(RFO_Market[Division]))--var RegionChoice = if(ISFILTERED(RFO_Market[Region]),SELECTEDVALUE(RFO_Market[Region]))returnif(ISFILTERED(\u0027RFO_Market\u0027[RFO]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[CY Prior Week Prospect Connects], [Prior Week Capacity TOTAL])))--[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_ID]= RFOChoice,\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT]='Current', \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_WK_TXT]='Previous'))","isHidden":false},{"name":"Prior WK NFP Capacity","expression":"--var RFOChoice = if(ISFILTERED(RFO_Market[RFO]),SELECTEDVALUE(RFO_Market[RFO]))--var ChannelChoice = if(ISFILTERED(RFO_Market[Channel]),SELECTEDVALUE(RFO_Market[Channel]))--var DivisionChoice = if(ISFILTERED(RFO_Market[Division]),SELECTEDVALUE(RFO_Market[Division]))--var RegionChoice = if(ISFILTERED(RFO_Market[Region]),SELECTEDVALUE(RFO_Market[Region]))--return--if(ISFILTERED(\u0027RFO_Market\u0027[RFO]),CALCULATE(    SUM(Capacity[Capacity]),    --\u0027Capacity\u0027[RFO_ID]= RFOChoice,    \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_WK_TXT]='Previous',    \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT]='Current',    \u0027Capacity\u0027[Type] in {'NFR','Red Role'})","isHidden":false},{"name":"Prior WK Vet Capacity","expression":"--var RFOChoice = if(ISFILTERED(RFO_Market[RFO]),SELECTEDVALUE(RFO_Market[RFO]))--var ChannelChoice = if(ISFILTERED(RFO_Market[Channel]),SELECTEDVALUE(RFO_Market[Channel]))--var DivisionChoice = if(ISFILTERED(RFO_Market[Division]),SELECTEDVALUE(RFO_Market[Division]))--var RegionChoice = if(ISFILTERED(RFO_Market[Region]),SELECTEDVALUE(RFO_Market[Region]))--return--if(ISFILTERED(\u0027RFO_Market\u0027[RFO]),CALCULATE(    SUM(Capacity[Capacity]),    --\u0027Capacity\u0027[RFO_ID]= RFOChoice,    \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_WK_TXT]='Previous',    \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT]='Current',    \u0027Capacity\u0027[Type] in {'Vet'})","isHidden":false},{"name":"Prior WK Total NFP+Vet Capacity","expression":"[Prior WK NFP Capacity] + [Prior WK Vet Capacity]","isHidden":false},{"name":"Prior Week Capacity TOTAL","expression":"if(HASONEVALUE(\u0027RFO_Market\u0027[RFO]),SWITCH(VALUES(\u0027RFO_Market\u0027[RFO]),'NFP', [Prior WK NFP Capacity],'VET', [Prior WK Vet Capacity]),--'Other', [Prior WK Other Capacity]), \u0027Appointments/PC/JFW\u0027[Prior WK NFP Capacity] + \u0027Appointments/PC/JFW\u0027[Prior WK Vet Capacity])--if(HASONEVALUE(\u0027Appointments \u0026 PCs\u0027[FP Tenure - NFP, Vet, Other]),--SWITCH(VALUES(\u0027Appointments \u0026 PCs\u0027[FP Tenure - NFP, Vet, Other]),--'NFP', [Prior WK NFP Capacity],--'VET', [Prior WK Vet Capacity],--'Other', [Prior WK Other Capacity]), \u0027Appointments \u0026 PCs\u0027[Prior WK Total NFP+Vet Capacity]))","isHidden":false},{"name":"YTD PCs - Detail Tab","expression":"CALCULATE(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    \u0027DTRB_PERF_DATES\u0027[YTD Flag ENGAGEMENT TEAM TAB] in {TRUE},    \u0027Appointments/PC/JFW\u0027[Membership Type Code] \u003c\u003e 'BEN',    \u0027Appointments/PC/JFW\u0027[Appointment Type Code] = 'Connect',    \u0027Appointments/PC/JFW\u0027[Worker Appointment Association] = 'Owner')","isHidden":false},{"name":"YTD FP PCs per FP - Detail Tab","expression":"    CALCULATE(DIVIDE([YTD FP PCs - Detail Tab], \u0027Capacity\u0027[Curr Year Capacity]))","isHidden":false},{"name":"CY Prior Week PCs - Detail tab","expression":"CALCULATE(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT] = 'PREVIOUS',    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'CURRENT',    \u0027Appointments/PC/JFW\u0027[Membership Type Code] \u003c\u003e 'BEN',    \u0027Appointments/PC/JFW\u0027[Appointment Type Code] = 'Connect',     \u0027Appointments/PC/JFW\u0027[Worker Appointment Association] = 'Owner')","isHidden":false},{"name":"Prior WK FP PCs per FP - Detail tab","expression":"CALCULATE(DIVIDE(\u0027Appointments/PC/JFW\u0027[CY Prior Week FP PCs - Detail Tab], \u0027Capacity\u0027[Curr Week Capacity]))","isHidden":false},{"name":"YTD NFP Capacity","expression":"CALCULATE(    SUM(Capacity[Capacity]),    \u0027DTRB_PERF_DATES\u0027[YTD Flag ENGAGEMENT TEAM TAB] in {True},    \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT]='Current',    \u0027Capacity\u0027[Type] in {'NFR','Red Role'})","isHidden":false},{"name":"YTD Vet Capacity","expression":"CALCULATE(    SUM(Capacity[Capacity]),    \u0027DTRB_PERF_DATES\u0027[YTD Flag ENGAGEMENT TEAM TAB] in {True},    \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT]='Current',    \u0027Capacity\u0027[Type] in {'Vet'})","isHidden":false},{"name":"YTD Capacity TOTAL","expression":"if(HASONEVALUE(\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet, Other]),SWITCH(VALUES(\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet, Other]),'NFP', [YTD NFP Capacity],'VET', [YTD Vet Capacity],'Other', [YTD Other Capacity]), \u0027Appointments/PC/JFW\u0027[YTD Total NFP+Vet Capacity])","isHidden":false},{"name":"YTD Total NFP+Vet Capacity","expression":"[YTD NFP Capacity] + [YTD Vet Capacity]","isHidden":false},{"name":"YTD Prospect Connects ALL APPT ASSOC - ENGAGEMENT TEAM TAB","expression":"CALCULATE(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    \u0027DTRB_PERF_DATES\u0027[YTD Flag ENGAGEMENT TEAM TAB] in {TRUE},    \u0027Appointments/PC/JFW\u0027[Membership Type Code] \u003c\u003e 'BEN',    \u0027Appointments/PC/JFW\u0027[Appointment Type Code] = 'Connect')--    \u0027Appointments \u0026 PCs\u0027[Worker Appointment Association] = 'Owner'","isHidden":false},{"name":"CY Prior Week Prospect Connects ALL APPT ASSOC - ET tab","expression":"CALCULATE(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT] = 'PREVIOUS',    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'CURRENT',    \u0027Appointments/PC/JFW\u0027[Membership Type Code] \u003c\u003e 'BEN',    \u0027Appointments/PC/JFW\u0027[Appointment Type Code] = 'Connect')--     \u0027Appointments \u0026 PCs\u0027[Worker Appointment Association] = 'Owner'","isHidden":false},{"name":"YTD FP PCs - Detail Tab","expression":"calculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[TSID_Market_Appt]),    FILTER(\u0027Appointments/PC/JFW\u0027,    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002010','002022','002024','002025','002026','002027','003100','003500'}),    \u0027DTRB_PERF_DATES\u0027[YTD Flag ENGAGEMENT TEAM TAB] in {TRUE},    \u0027Appointments/PC/JFW\u0027[Membership Type Code] \u003c\u003e 'BEN',    \u0027Appointments/PC/JFW\u0027[Appointment Type Code] = 'Connect')","isHidden":false},{"name":"CY Prior Week FP PCs - Detail Tab","expression":"calculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[TSID_Market_Appt]),    FILTER(\u0027Appointments/PC/JFW\u0027,    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002010','002022','002024','002025','002026','002027','003100','003500'}),    \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_WK_TXT] = 'PREVIOUS',        \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'CURRENT',    \u0027Appointments/PC/JFW\u0027[Membership Type Code] \u003c\u003e 'BEN',    \u0027Appointments/PC/JFW\u0027[Appointment Type Code] = 'Connect')","isHidden":false},{"name":"Prior WK Other Capacity","expression":"BLANK()","isHidden":false},{"name":"YTD Other Capacity","expression":"BLANK()","isHidden":false},{"name":"YTD Market JFW FP","expression":"CALCULATE(DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),\u0027Appointments/PC/JFW\u0027[Worker Appointment Association]='Owner',\u0027Appointments/PC/JFW\u0027[JFW_IND] = 1, \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002010','002022','002025','002026','002027','003100','003500'},DTRB_PERF_DATES[YTD Flag] in {TRUE})","isHidden":false},{"name":"NFP 6 Mo JFW Cov","expression":"var numerator = CALCULATE([YTD Market JFW], \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP 6 Mo] = 'NFP 6 Mo')var denominator = [YTD Appointments]returnCALCULATE(          divide([YTD Market JFW FP],[YTD Appointments]),          \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP 6 Mo] = 'NFP 6 Mo',          \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT]= 'CURRENT',          \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002010','002022','002025','002026','002027','003100','003500'})","isHidden":false},{"name":"YTD Market JFW","expression":"CALCULATE(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    \u0027Appointments/PC/JFW\u0027[JFW_IND] = 1,    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002019','002020','002021','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'},    DTRB_PERF_DATES[YTD Flag] in {TRUE})","isHidden":false},{"name":"Future Appointments","expression":"var current_wk = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR], DTRB_PERF_DATES[CAL_DAY_DT], today())var future_wk4 = current_wk + 4var total =calculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'CURRENT',    \u0027Appointments/PC/JFW\u0027[Appointment Date] \u003e= today(),    DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR] \u003c= future_wk4)returnif(isblank(total), 0, total)","isHidden":false},{"name":"Future Appts - Curr Wk to Future Wk 4","expression":"calculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    DTRB_PERF_DATES[Current Wk Nbr - Wk Nbr] in {'0', '1', '2', '3', '4'},    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'CURRENT')","isHidden":false},{"name":"Appts - Remaining Wk","expression":"calculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    DTRB_PERF_DATES[Current Wk Nbr - Wk Nbr] = 0,    DTRB_PERF_DATES[CAL_DAY_DT] \u003e= today(),    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'CURRENT')","isHidden":false},{"name":"Appts - Future Wk 1","expression":"var total = calculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    DTRB_PERF_DATES[Current Wk Nbr - Wk Nbr] = 1,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'CURRENT')returnif(isblank(total), 0, total)","isHidden":false},{"name":"Appts - Future Wk 2","expression":"var total =calculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    DTRB_PERF_DATES[Current Wk Nbr - Wk Nbr] = 2,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'CURRENT')returnif(isblank(total), 0, total)","isHidden":false},{"name":"Appts - Future Wk 3","expression":"var total =calculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    DTRB_PERF_DATES[Current Wk Nbr - Wk Nbr] = 3,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'CURRENT')returnif(ISBLANK(total), 0, total)","isHidden":false},{"name":"Appts - Future Wk 4","expression":"var total =calculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    DTRB_PERF_DATES[Current Wk Nbr - Wk Nbr] = 4,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'CURRENT')returnif(isblank(total), 0, total)","isHidden":false},{"name":"Measure 2","expression":"IF([Future Appointments] = [YTD Appointments], [YTD Appointments], [Future Appointments])","isHidden":false},{"name":"Future Prospect Connects","expression":"var current_wk = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR], DTRB_PERF_DATES[CAL_DAY_DT], today())var future_wk4 = current_wk + 4var total =CALCULATE(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'CURRENT',    \u0027Appointments/PC/JFW\u0027[Appointment Date] \u003e= today(),    DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR] \u003c= future_wk4,    \u0027Appointments/PC/JFW\u0027[Membership Type Code] \u003c\u003e 'BEN',    \u0027Appointments/PC/JFW\u0027[Appointment Type Code] = 'Connect')returnif(ISBLANK(total), 0, total)","isHidden":false},{"name":"YTD FA Appointments per FA","expression":"var MarketChoice = if(ISFILTERED(\u0027Market_Leaders\u0027[Market_Leader]),SELECTEDVALUE(\u0027RFO_Market\u0027[Organization Zone Code]))var RFOChoice = if(ISFILTERED(\u0027RFO_Market\u0027[RFO Name]),SELECTEDVALUE(\u0027RFO_Market\u0027[Adjusted RFO]))var ChannelChoice = if(isfiltered(RFO_Market[Channel]),SELECTEDVALUE(RFO_Market[Channel]))return--if(ISFILTERED(\u0027Market_Leaders\u0027[Market_Leader]),    --CALCULATE(DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], [YTD TOTAL Capacityy (Summary tab)]), \u0027Capacity\u0027[RFO_ID]= MarketChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}),if(ISFILTERED(\u0027RFO_Market\u0027[RFO Name]),    CALCULATE(DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], [YTD TOTAL Capacityy (Summary tab)]), \u0027Capacity\u0027[RFO_ID]= RFOChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}),if(ISFILTERED(RFO_Market[Channel]),    CALCULATE(DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], [YTD TOTAL Capacityy (Summary tab)]), \u0027Capacity\u0027[Channel]= ChannelChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True})))","isHidden":false},{"name":"YTD TOTAL Capacity (Summary tab)","expression":"if(HASONEVALUE(\u0027Appointments/PC/JFW\u0027[FA Tenure - NFP, Vet]),SWITCH(VALUES(\u0027Appointments/PC/JFW\u0027[FA Tenure - NFP, Vet]),'NFP', [YTD NFP Capacity],'Vet', [YTD Vet Capacity]), [YTD Total NFP+Vet Capacity])","isHidden":false},{"name":"YTD Appts NFA","expression":"calculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    \u0027Appointments/PC/JFW\u0027[FA Tenure - NFP, Vet] = 'NFP',    DTRB_PERF_DATES[YTD Flag] in {TRUE})","isHidden":false},{"name":"YTD Appts Vet","expression":"calculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    \u0027Appointments/PC/JFW\u0027[FA Tenure - NFP, Vet] = 'Vet',    DTRB_PERF_DATES[YTD Flag] in {TRUE})","isHidden":false},{"name":"YTD Appointments","expression":"calculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    DTRB_PERF_DATES[YTD Flag] in {TRUE})--var cy_prior_day = LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'Previous')--return--calculate(    --DISTINCTCOUNT(\u0027Appointments \u0026 PCs\u0027[Appointment Dimension Surrogate Key]),    --\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT] \u003c= cy_prior_day,    --DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current'))","isHidden":false},{"name":"PY2 Appointments SWITCH","expression":"VAR SelectedTenures = VALUES(Daily_Tenure_Counts_DD[Tenure Group])RETURN    IF(        COUNTROWS(SelectedTenures) \u003e 1,        SUMX(            SelectedTenures,            VAR Tenure = [Tenure Group]            RETURNcalculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    \u0027Appointments/PC/JFW\u0027[Worker Appointment Association]='Owner',    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'},    DTRB_PERF_DATES[Prior Year 2 Flag] in {TRUE},    \u0027Appointments/PC/JFW\u0027[FA Tenure - Assoc Rep, NFA, Vet, Other] = Tenure)),IF(ISFILTERED(Daily_Tenure_Counts_DD[Tenure Group]),calculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    \u0027Appointments/PC/JFW\u0027[Worker Appointment Association]='Owner',    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'},    DTRB_PERF_DATES[Prior Year 2 Flag] in {TRUE},    \u0027Appointments/PC/JFW\u0027[FA Tenure - Assoc Rep, NFA, Vet, Other] = SELECTEDVALUE(Daily_Tenure_Counts_DD[Tenure Group])),calculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    \u0027Appointments/PC/JFW\u0027[Worker Appointment Association]='Owner',    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'},    DTRB_PERF_DATES[Prior Year 2 Flag] in {TRUE})))--CALCULATE(    --DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    --\u0027Appointments/PC/JFW\u0027[Prior Year 2 Flag] in {TRUE})","isHidden":false},{"name":"CY Current Week Appointments SWITCH","expression":"var SelectedTenures = VALUES(Daily_Tenure_Counts_DD[Tenure Group])RETURN    IF(        COUNTROWS(SelectedTenures) \u003e 1,        SUMX(            SelectedTenures,            VAR Tenure = [Tenure Group]returncalculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    \u0027Appointments/PC/JFW\u0027[Worker Appointment Association]='Owner',    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'},    DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT] = 'CURRENT',    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'CURRENT',    \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {TRUE},    \u0027Appointments/PC/JFW\u0027[FA Tenure - Assoc Rep, NFA, Vet, Other] = Tenure)),IF(ISFILTERED(Daily_Tenure_Counts_DD[Tenure Group]),calculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    \u0027Appointments/PC/JFW\u0027[Worker Appointment Association]='Owner',    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'},    DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT] = 'CURRENT',    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'CURRENT',    \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {TRUE},    \u0027Appointments/PC/JFW\u0027[FA Tenure - Assoc Rep, NFA, Vet, Other] = SELECTEDVALUE(Daily_Tenure_Counts_DD[Tenure Group])),calculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    \u0027Appointments/PC/JFW\u0027[Worker Appointment Association]='Owner',    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'},    DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT] = 'CURRENT',    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'CURRENT',    \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {TRUE})))","isHidden":false},{"name":"YTD FP Appointments per FP NEW OLD","expression":"CALCULATE(DIVIDE([FP Appointments], \u0027Capacity\u0027[Curr Year Capacity]),FILTER(\u0027DTRB_PERF_DATES\u0027, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}))","isHidden":false},{"name":"YTD FA Appointments/Wk per FA NEW","expression":"var MarketChoice = if(ISFILTERED(\u0027Market_Leaders\u0027[Market_Leader]),SELECTEDVALUE(\u0027RFO_Market\u0027[Organization Zone Code]))var RFOChoice = if(ISFILTERED(\u0027RFO_Market\u0027[RFO Name]),SELECTEDVALUE(\u0027RFO_Market\u0027[Adjusted RFO]))var ChannelChoice = if(isfiltered(RFO_Market[Channel]),SELECTEDVALUE(RFO_Market[Channel]))returnif(ISFILTERED(\u0027RFO_Market\u0027[RFO Name]),    CALCULATE(DIVIDE(DIVIDE(\u0027Appointments/PC/JFW\u0027[FA Appointments NEW], [Average Capacity]), LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT],'PREVIOUS')), \u0027Capacity\u0027[RFO_ID]= RFOChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag ENGAGEMENT TEAM TAB] in {True}),if(ISFILTERED(RFO_Market[Channel]),    CALCULATE(DIVIDE(DIVIDE(\u0027Appointments/PC/JFW\u0027[FA Appointments NEW], [Average Capacity]), LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT],'PREVIOUS')), \u0027Capacity\u0027[Channel]= ChannelChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag ENGAGEMENT TEAM TAB] in {True})))","isHidden":false},{"name":"FA Appointments NEW","expression":"var tenure = if(ISFILTERED(Daily_Tenure_Counts_DD[Tenure]), SELECTEDVALUE(Daily_Tenure_Counts_DD[Tenure]))returncalculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[TSID_Market_Appt]),    FILTER(\u0027Appointments/PC/JFW\u0027,    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002010','002022','002024','002025','002026','002027','003100','003500'}),    \u0027Appointments/PC/JFW\u0027[FA Tenure - Assoc Rep, NFA, Vet, Other] = tenure)","isHidden":false},{"name":"FA Appointments, no Assoc Rep NEW","expression":"var tenure = if(ISFILTERED(Daily_Tenure_Counts_DD[Tenure]), SELECTEDVALUE(Daily_Tenure_Counts_DD[Tenure]))returncalculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[TSID_Market_Appt]),    FILTER(\u0027Appointments/PC/JFW\u0027,    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002022','002024','002025','002026','002027','003100','003500'}),    \u0027Appointments/PC/JFW\u0027[FA Tenure - Assoc Rep, NFA, Vet, Other] = tenure)","isHidden":false},{"name":"YTD Appts Metric SWITCH - OLD","expression":"if(HASONEVALUE(\u0027Appointment Switch\u0027[Metric]),SWITCH(VALUES(\u0027Appointment Switch\u0027[Metric]),'Total', [YTD Appointments],'Per FA', [YTD FA Appointments/Wk per FA NEW]))","isHidden":false},{"name":"PY Appts per FA NEW","expression":"CALCULATE(divide([FP Appointments],[Average Capacity]), \u0027Appointments/PC/JFW\u0027[Prior Year Flag] in {TRUE})","isHidden":false},{"name":"PY2 Appt Metric SWITCH","expression":"if(HASONEVALUE(\u0027Appointment Switch\u0027[Metric]),SWITCH(VALUES(\u0027Appointment Switch\u0027[Metric]),'Total', [PY2 Appointments SWITCH],'Per FA', [TEST PY2 Appts per FA NEW]))","isHidden":false},{"name":"PY2 Appts per FA NEW","expression":"CALCULATE(divide([FP Appointments],[Average Capacity]), DTRB_PERF_DATES[Prior Year 2 Flag] in {TRUE})","isHidden":false},{"name":"TEST YTD Appts per FA NEW","expression":"CALCULATE(divide([FP Appointments TEST],[Average Capacity]), DTRB_PERF_DATES[YTD Sunday Flag] in {TRUE})","isHidden":false},{"name":"FP Appointments TEST","expression":"VAR SelectedTenures = VALUES(Daily_Tenure_Counts_DD[Tenure Group])RETURN    IF(        COUNTROWS(SelectedTenures) \u003e 1,        SUMX(            SelectedTenures,            VAR Tenure = [Tenure Group]            RETURN                CALCULATE(                    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[TSID_Market_Appt]),                    FILTER(                        \u0027Appointments/PC/JFW\u0027,                        \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] IN {'002000','002010','002022','002024','002025','002026','002027','003100','003500'}                      ),                    \u0027Appointments/PC/JFW\u0027[FA Tenure - Assoc Rep, NFA, Vet, Other] = Tenure                )        ),        IF(            ISFILTERED(Daily_Tenure_Counts_DD[Tenure Group]),            CALCULATE(                DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[TSID_Market_Appt]),                FILTER(                    \u0027Appointments/PC/JFW\u0027,                    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] IN {'002000','002010','002022','002024','002025','002026','002027','003100','003500'}                    ),                    \u0027Appointments/PC/JFW\u0027[FA Tenure - Assoc Rep, NFA, Vet, Other] = SELECTEDVALUE(Daily_Tenure_Counts_DD[Tenure Group]                )            ),            CALCULATE(                DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[TSID_Market_Appt]),                FILTER(                    \u0027Appointments/PC/JFW\u0027,                    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] IN {'002000','002010','002022','002024','002025','002026','002027','003100','003500'}                )            )        )    )","isHidden":false},{"name":"YTD Appt Metric SWITCH","expression":"if(HASONEVALUE(\u0027Appointment Switch\u0027[Metric]),SWITCH(VALUES(\u0027Appointment Switch\u0027[Metric]),'Total', [YTD Appointments SWITCH],'Per FA', [TEST YTD Appts per FA NEW]))","isHidden":false},{"name":"YTD Appointments SWITCH","expression":"VAR SelectedTenures = VALUES(Daily_Tenure_Counts_DD[Tenure Group])RETURN    IF(        COUNTROWS(SelectedTenures) \u003e 1,        SUMX(            SelectedTenures,            VAR Tenure = [Tenure Group]            RETURNcalculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    \u0027Appointments/PC/JFW\u0027[Worker Appointment Association]='Owner',    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'},    DTRB_PERF_DATES[YTD Flag] in {TRUE},    \u0027Appointments/PC/JFW\u0027[FA Tenure - Assoc Rep, NFA, Vet, Other] = Tenure)),IF(ISFILTERED(Daily_Tenure_Counts_DD[Tenure Group]),calculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    \u0027Appointments/PC/JFW\u0027[Worker Appointment Association]='Owner',    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'},    DTRB_PERF_DATES[YTD Flag] in {TRUE},    \u0027Appointments/PC/JFW\u0027[FA Tenure - Assoc Rep, NFA, Vet, Other] = SELECTEDVALUE(Daily_Tenure_Counts_DD[Tenure Group])),calculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    \u0027Appointments/PC/JFW\u0027[Worker Appointment Association]='Owner',    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'},    DTRB_PERF_DATES[YTD Flag] in {TRUE})))","isHidden":false},{"name":"TEST PY Appts per FA NEW","expression":"CALCULATE(divide([FP Appointments TEST],[Average Capacity]), DTRB_PERF_DATES[Prior Year Flag] in {TRUE})--DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'PREVIOUS')","isHidden":false},{"name":"PY Appt Metric SWITCH","expression":"if(HASONEVALUE(\u0027Appointment Switch\u0027[Metric]),SWITCH(VALUES(\u0027Appointment Switch\u0027[Metric]),'Total', [Prior Year Appointments SWITCH],'Per FA', [TEST PY Appts per FA NEW]))","isHidden":false},{"name":"Prior Year Appointments SWITCH","expression":"VAR SelectedTenures = VALUES(Daily_Tenure_Counts_DD[Tenure Group])RETURN    IF(        COUNTROWS(SelectedTenures) \u003e 1,        SUMX(            SelectedTenures,            VAR Tenure = [Tenure Group]            RETURNcalculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    \u0027Appointments/PC/JFW\u0027[Worker Appointment Association]='Owner',    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'},    DTRB_PERF_DATES[Prior Year Flag] in {TRUE},    \u0027Appointments/PC/JFW\u0027[FA Tenure - Assoc Rep, NFA, Vet, Other] = Tenure)),IF(ISFILTERED(Daily_Tenure_Counts_DD[Tenure Group]),calculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    \u0027Appointments/PC/JFW\u0027[Worker Appointment Association]='Owner',    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'},    DTRB_PERF_DATES[Prior Year Flag] in {TRUE},    \u0027Appointments/PC/JFW\u0027[FA Tenure - Assoc Rep, NFA, Vet, Other] = SELECTEDVALUE(Daily_Tenure_Counts_DD[Tenure Group])),calculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    \u0027Appointments/PC/JFW\u0027[Worker Appointment Association]='Owner',    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'},    DTRB_PERF_DATES[Prior Year Flag] in {TRUE})))","isHidden":false},{"name":"Measure 3","expression":"Not available","isHidden":false},{"name":"TEST PY2 Appts per FA NEW","expression":"CALCULATE(divide([FP Appointments TEST],[Average Capacity]), DTRB_PERF_DATES[Prior Year 2 Flag] in {TRUE})","isHidden":false},{"name":"YTD Appt Metric SWITCH CARD","expression":"if(HASONEVALUE(\u0027Appointment Switch\u0027[Metric]),SWITCH(VALUES(\u0027Appointment Switch\u0027[Metric]),'Total', format([YTD Appointments SWITCH],'#,##0'),'Per FA', [TEST YTD Appts per FA NEW CARD]))","isHidden":false},{"name":"TEST YTD Appts per FA NEW CARD","expression":"CALCULATE(divide(divide([FP Appointments TEST],[Average Capacity]),LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT],'PREVIOUS')), DTRB_PERF_DATES[YTD Sunday Flag] in {TRUE})","isHidden":false},{"name":"PYTD Appt Metric SWITCH CARD","expression":"if(HASONEVALUE(\u0027Appointment Switch\u0027[Metric]),SWITCH(VALUES(\u0027Appointment Switch\u0027[Metric]),'Total', format([PYTD Appointments SWITCH],'#,##0'),'Per FA', [TEST PYTD Appts per FA NEW CARD]))","isHidden":false},{"name":"TEST PYTD Appts per FA NEW CARD","expression":"CALCULATE(divide(divide([FP Appointments TEST],[Average Capacity]),LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT],'PREVIOUS')), DTRB_PERF_DATES[PYTD Sunday Flag] in {TRUE})","isHidden":false},{"name":"YOY Appt SWITCH CARD","expression":"if(HASONEVALUE(\u0027Appointment Switch\u0027[Metric]),SWITCH(VALUES(\u0027Appointment Switch\u0027[Metric]),'Total', [YOY Appointments SWITCH],'Per FA', [YOY Change Appts/FA NEW]))","isHidden":false},{"name":"YOY Change Appts/FA NEW","expression":"(\u0027Appointments/PC/JFW\u0027[TEST YTD Appts per FA NEW CARD] - \u0027Appointments/PC/JFW\u0027[TEST PYTD Appts per FA NEW CARD])/\u0027Appointments/PC/JFW\u0027[TEST PYTD Appts per FA NEW CARD]","isHidden":false},{"name":"PYTD Appointments SWITCH","expression":"var pytd_end_date = date(    year(LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'Previous'))-1,    month(LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'Previous')),    day(LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'Previous')))var pytd_start_date = date(year(pytd_end_date),1,1)var SelectedTenures = VALUES(Daily_Tenure_Counts_DD[Tenure Group])RETURN    IF(        COUNTROWS(SelectedTenures) \u003e 1,        SUMX(            SelectedTenures,            VAR Tenure = [Tenure Group]returncalculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    \u0027Appointments/PC/JFW\u0027[Worker Appointment Association]='Owner',    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'},    \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT] \u003c= pytd_end_date,    \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT] \u003e= pytd_start_date,    --\u0027DTRB_PERF_DATES[PYTD Flag SF] in {TRUE},    \u0027Appointments/PC/JFW\u0027[FA Tenure - Assoc Rep, NFA, Vet, Other] = Tenure)),IF(ISFILTERED(Daily_Tenure_Counts_DD[Tenure Group]),calculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    \u0027Appointments/PC/JFW\u0027[Worker Appointment Association]='Owner',    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'},    \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT] \u003c= pytd_end_date,    \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT] \u003e= pytd_start_date,    --\u0027DTRB_PERF_DATES[PYTD Flag SF] in {TRUE},    \u0027Appointments/PC/JFW\u0027[FA Tenure - Assoc Rep, NFA, Vet, Other] = SELECTEDVALUE(Daily_Tenure_Counts_DD[Tenure Group])),calculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    \u0027Appointments/PC/JFW\u0027[Worker Appointment Association]='Owner',    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'},    \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT] \u003c= pytd_end_date,    \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT] \u003e= pytd_start_date)))    --\u0027DTRB_PERF_DATES[PYTD Flag SF] in {TRUE})))","isHidden":false},{"name":"Current Week Appt Metric SWITCH CARD","expression":"if(HASONEVALUE(\u0027Appointment Switch\u0027[Metric]),SWITCH(VALUES(\u0027Appointment Switch\u0027[Metric]),'Total', format([CY Current Week Appointments SWITCH],'#,##0'),'Per FA', 0))--'Per FA', FORMAT([Current Week Appointments per FA SWITCH], 'White')))","isHidden":false},{"name":"Future Appointments SWITCH","expression":"var current_wk = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR], DTRB_PERF_DATES[CAL_DAY_DT], today())var future_wk4 = current_wk + 4var SelectedTenures = VALUES(Daily_Tenure_Counts_DD[Tenure Group])RETURN    IF(        COUNTROWS(SelectedTenures) \u003e 1,        SUMX(            SelectedTenures,            VAR Tenure = [Tenure Group]returncalculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    \u0027Appointments/PC/JFW\u0027[Worker Appointment Association]='Owner',    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'},    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'CURRENT',    \u0027Appointments/PC/JFW\u0027[Appointment Date] \u003e= today(),    DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR] \u003c= future_wk4,    \u0027Appointments/PC/JFW\u0027[FA Tenure - Assoc Rep, NFA, Vet, Other] = Tenure)),IF(ISFILTERED(Daily_Tenure_Counts_DD[Tenure Group]),calculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    \u0027Appointments/PC/JFW\u0027[Worker Appointment Association]='Owner',    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'},    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'CURRENT',    \u0027Appointments/PC/JFW\u0027[Appointment Date] \u003e= today(),    DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR] \u003c= future_wk4,    \u0027Appointments/PC/JFW\u0027[FA Tenure - Assoc Rep, NFA, Vet, Other] = SELECTEDVALUE(Daily_Tenure_Counts_DD[Tenure Group])),calculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    \u0027Appointments/PC/JFW\u0027[Worker Appointment Association]='Owner',    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'},    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'CURRENT',    \u0027Appointments/PC/JFW\u0027[Appointment Date] \u003e= today(),    DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR] \u003c= future_wk4)))","isHidden":false},{"name":"Future Appointments Metric SWITCH","expression":"if(HASONEVALUE(\u0027Appointment Switch\u0027[Metric]),SWITCH(VALUES(\u0027Appointment Switch\u0027[Metric]),'Total', [Future Appointments SWITCH],'Per FA', 0))","isHidden":false},{"name":"Current Week Appointments per FA SWITCH","expression":"0","isHidden":false},{"name":"YOY Appointments SWITCH","expression":"VAR __BASELINE_VALUE = [PYTD Appointments SWITCH]VAR __VALUE_TO_COMPARE = [YTD Appointments SWITCH]RETURN    IF(        NOT ISBLANK(__VALUE_TO_COMPARE),        DIVIDE(__VALUE_TO_COMPARE - __BASELINE_VALUE, __BASELINE_VALUE)    )","isHidden":false}],"source":[{"expression":"let    Source = Sql.Database('dbedwdwprd', 'EnterpriseDataMart', [Query='select#(lf)#(tab)appt_fct.[Worker Appointment Association],#(lf)#(tab)appt_fct.[Appointment Dimension Surrogate Key],#(lf)#(tab)appt_fct.[Person Dimension Surrogate Key],#(lf)#(tab)sum(appt_fct.[Appointment Occurs]) [appt_occurs],#(lf)#(tab)mbr_dim.[Membership Type Code],#(lf)#(tab)mbr_dim.[Membership Type Description],#(lf)#(tab)appt_dim.[Appointment Date],#(lf)       case when appt_dim.[Appointment Type Code] in (\u0027Gather Data\u0027) Then \u0027Discover\u0027#(lf)            when appt_dim.[Appointment Type Code] in (\u0027Take Action\u0027) Then \u0027Deliver\u0027#(lf)            when appt_dim.[Appointment Type Code] not in (\u0027Gather Data\u0027,\u0027Take Action\u0027) then Appt_dim.[Appointment Type Code]#(lf)       end as [Appointment Type Code],#(lf)       case when appt_dim.[Appointment Type Code] in (\u0027Gather Data\u0027) Then \u0027Discover\u0027#(lf)            when appt_dim.[Appointment Type Code] in (\u0027Take Action\u0027) Then \u0027Deliver\u0027#(lf)            when appt_dim.[Appointment Type Code] not in (\u0027Gather Data\u0027,\u0027Take Action\u0027) then Appt_dim.[Appointment Type Description]#(lf)       end as [Appointment Type Description],#(lf)#(tab)--appt_dim.[Appointment Type Code],#(lf)#(tab)--appt_dim.[Appointment Type Description],#(lf)#(lf)#(tab)case when appt_dim.[Field User Count] \u003c\u003e 0 and appt_dim.[Appointment Type Code] in (\u0027Connect\u0027,\u0027Gather Data\u0027,\u0027Take Action\u0027,\u0027Strategy Call/Meeting\u0027,\u0027Review\u0027,\u0027Service\u0027,\u0027Discover\u0027,\u0027Deliver\u0027)#(lf)#(tab)#(tab) then 1#(lf)#(tab)#(tab) else 0#(lf)#(tab)#(tab) end [JFW_IND],#(lf)#(lf)#(tab)date_dim.[Calendar Year Name],#(lf)#(tab)date_dim.[Calendar Year Week Number],#(lf)#(tab)(LEFT(sale_hier_dim.[ORZN_ZONE_CDE],4)) [Historical RFO],#(lf)#(tab)sale_hier_dim.ORZN_ZONE_CDE [Historical Market],#(lf)        sale_hier_dim.ORZN_SUB_DEPT_CDE [Historical MVP],#(lf)#(tab)appt_org_hist.[Source System Key Text] [TSID],#(lf)#(tab)appt_org_hist.[Adjusted Service Date],#(lf)#(tab)appt_org_hist.[Employee Status Type Description],#(lf)#(tab)appt_org_hist.[Financial Professional Tenure] [Historical FP Tenure],#(lf)#(tab)appt_org_hist.[Financial Professional Tenure Group] [Historical FP Tenure Group],#(lf)#(tab)appt_org_hist.[Employee Display Name] [FP Name],#(lf)#(tab)appt_org_hist.[Job Type Code] [Historical Job Type Code],#(lf)#(tab)appt_org_hist.[Job Type Description] [Historical Job Type Description]#(lf)#(lf)from EnterpriseDataMart.DM_01.[Appointment Combine Fact] appt_fct#(lf)left join EnterpriseDataMart.DM_01.[Membership Type Dimension] mbr_dim#(lf)#(tab)on (appt_fct.[Membership Type Dimension Surrogate Key]=mbr_dim.[Membership Type Dimension Surrogate Key])#(lf)#(lf)left join EnterpriseDataMart.DM_01.[Appointment Dimension] appt_dim#(lf)#(tab)on (appt_fct.[Appointment Dimension Surrogate Key]=appt_dim.[Appointment Dimension Surrogate Key])#(lf)#(lf)left join EnterpriseDataMart.DM_01.[Date Dimension] date_dim#(lf)#(tab)on (appt_dim.[Appointment Date]=date_dim.[Calendar Date Date])#(lf)#(lf)left join EnterpriseDataMart.DM_01.[Appointment Organization Dimension] appt_org_hist#(lf)    on ((appt_fct.[Appointment Organization Dimension Surrogate Key]=appt_org_hist.[Appointment Organization Dimension Surrogate Key])#(lf)    and ((appt_org_hist.[Effective Begin Date] \u003c= appt_dim.[Appointment Date]) and (appt_dim.[Appointment Date] \u003c= appt_org_hist.[Effective End Date])))#(lf)#(lf)left join EnterpriseDataMart.DM_01.[SALE_HIER_DIM] sale_hier_dim#(lf)#(tab)on ((sale_hier_dim.EFF_BEG_DT\u003c=appt_dim.[Appointment Date])#(lf)#(tab)#(tab)and (appt_dim.[Appointment Date]\u003c= DATEADD(day,-1,sale_hier_dim.EFF_END_DT))#(lf)#(tab)#(tab)and sale_hier_dim.CURR_ROW_IND = \u0027Y\u0027#(lf)#(tab)and appt_org_hist.[Source System Key Text]=sale_hier_dim.[SALE_HIER_ID])#(lf)#(lf)#(lf)where #(lf)#(tab)appt_dim.[Current Row Indicator] = \u0027Y\u0027#(lf)#(tab)and appt_dim.[Appointment Create Date Over 14 Days] = \u0027N\u0027#(lf)#(tab)and appt_fct.[Person Dimension Surrogate Key] \u003c\u003e 0#(lf)        and appt_fct.[Appointment Status Name] \u003c\u003e \u0027Declined\u0027#(lf)#(tab)and sale_hier_dim.ORZN_DEPT_CDE in (\u00270115\u0027,\u00270190\u0027,\u00270283\u0027,\u00270291\u0027,\u00270361\u0027,\u00270384\u0027,\u00270435\u0027,\u00270525\u0027)#(lf)#(tab)and appt_org_hist.[Job Type Code] in (\u0027002000\u0027, \u0027002003\u0027, \u0027002008\u0027, \u0027002010\u0027, \u0027002011\u0027, \u0027002012\u0027, \u0027002016\u0027, \u0027002022\u0027, \u0027002024\u0027, \u0027002025\u0027, \u0027002026\u0027, \u0027002027\u0027, \u0027002030\u0027, \u0027002031\u0027, \u0027002032\u0027, \u0027003100\u0027, \u0027003500\u0027)#(lf)#(tab)and appt_dim.[Event Result Description] not in (\u0027No Show\u0027,\u0027Cancelled\u0027)#(lf)#(tab)and date_dim.[Calendar Year Name] in (\u00272022\u0027,\u00272023\u0027,\u00272024\u0027)#(lf)        and appt_org_hist.[Source System Key Text] not in (\u0027TS06033\u0027, \u0027TS13320\u0027, \u0027TS21623\u0027, \u0027TS22934\u0027, \u0027TS32012\u0027, \u0027TS34394\u0027, \u0027TS34662\u0027, \u0027TS67185\u0027)#(lf)        and appt_dim.[Appointment Type Code] \u003c\u003e \u0027UNK\u0027#(lf)#(lf)group by#(lf)#(tab)appt_fct.[Worker Appointment Association],#(lf)#(tab)appt_fct.[Appointment Dimension Surrogate Key],#(lf)#(tab)appt_fct.[Person Dimension Surrogate Key],#(lf)#(tab)mbr_dim.[Membership Type Code],#(lf)#(tab)mbr_dim.[Membership Type Description],#(lf)#(tab)appt_dim.[Appointment Date],#(lf)#(tab)appt_dim.[Appointment Type Code],#(lf)#(tab)appt_dim.[Appointment Type Description],#(lf)        appt_dim.[Field User Count],#(lf)#(tab)date_dim.[Calendar Year Name],#(lf)#(tab)date_dim.[Calendar Year Week Number],#(lf)#(tab)sale_hier_dim.ORZN_DEPT_CDE,#(lf)#(tab)sale_hier_dim.ORZN_ZONE_CDE,#(lf)        sale_hier_dim.ORZN_SUB_DEPT_CDE,#(lf)#(tab)appt_org_hist.[Source System Key Text],#(lf)#(tab)appt_org_hist.[Adjusted Service Date],#(lf)#(tab)appt_org_hist.[Employee Status Type Description],#(lf)#(tab)appt_org_hist.[Financial Professional Tenure],#(lf)#(tab)appt_org_hist.[Financial Professional Tenure Group],#(lf)#(tab)appt_org_hist.[Employee Display Name],#(lf)#(tab)appt_org_hist.[Job Type Code],#(lf)#(tab)appt_org_hist.[Job Type Description]#(lf)#(lf)having #(lf)sum(appt_fct.[Appointment Occurs])\u003e0']),    #'Filtered Rows' = Table.SelectRows(Source, each [appt_occurs] \u003e 0),    #'Added Custom' = Table.AddColumn(#'Filtered Rows', 'TSID_Market_Appt', each [TSID]\u0026'-'\u0026Number.ToText([Appointment Dimension Surrogate Key])),    #'Duplicated Column' = Table.DuplicateColumn(#'Added Custom', 'Historical RFO', 'Historical RFO - Copy'),    #'Changed Type' = Table.TransformColumnTypes(#'Duplicated Column',{{'Calendar Year Name', Int64.Type}})in    #'Changed Type'"}]},{"name":"Change Log","isHidden":false,"storageMode":"Import","columns":[{"name":"Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Author","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Requestor","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Description","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Field Reporting//Change Log//Change Log.xlsx'), null, true),    #'Field Activity DB_Sheet' = Source{[Item='Field Activity DB',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'Field Activity DB_Sheet', [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Date', type date}, {'Author', type text}, {'Requestor', type text}, {'Description', type text}})in    #'Changed Type'"}]},{"name":"Producer_Snowflake","isHidden":false,"storageMode":"Import","columns":[{"name":"SALE_HIER_DIM_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EMP_DIM_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SALE_HIER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Advisor Group","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ZONE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MARKET","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FILTER_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MARKET_NUMBER","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MARKET_LEADERS","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP Leader","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RPT_TO_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Report to Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Adjusted Service Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TENURE","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TENURE_GROUP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SFC_FC","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FR_SEGMENT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"GNDR_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LST_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FRST_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MDDL_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ASSIGNED_AFA","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"OP_COUNT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Conference Qualification Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team Purpose Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Credentials","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"License","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Conference Qualification","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team Purpose Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market with Leader","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP with Leader","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TeamAdvisor_HlthRpt","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team Indicator","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Experience Advisor Sort.Sort","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Market NEW","dataType":"String","isHidden":false,"expression":"\u0027Producer_Snowflake\u0027[MVP_ID] \u0026'-'\u0026 \u0027Producer_Snowflake\u0027[MARKET_NUMBER]","columnType":"Calculated"},{"name":"End of Prior Week Tenure","dataType":"String","isHidden":false,"expression":"if(not(\u0027Producer_Snowflake\u0027[JOB_TYP_CDE] in {'002000', '002016', '002022', '002024', '002025', '002026', '002027', '003100', '003500'}), 'Other',if(([Previous Sunday Date2] - \u0027Producer_Snowflake\u0027[Adjusted Service Date])/ 365.25 \u003c 1, 'NFA1',if(([Previous Sunday Date2] - \u0027Producer_Snowflake\u0027[Adjusted Service Date])/ 365.25 \u003c 2, 'NFA2',if(([Previous Sunday Date2] - \u0027Producer_Snowflake\u0027[Adjusted Service Date])/ 365.25 \u003c 3, 'NFA3',if(([Previous Sunday Date2] - \u0027Producer_Snowflake\u0027[Adjusted Service Date])/ 365.25 \u003c 4, 'NFA4','Vet')))))","columnType":"Calculated"},{"name":"Status","dataType":"String","isHidden":false,"expression":"'Active'","columnType":"Calculated"}],"measures":[],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'select distinct b.''Sales Hierarchy Dimension Surrogate Key'' as SALE_HIER_DIM_SK,#(lf)       a.''Workforce Dimension Detail Surrogate Key'' as EMP_DIM_SK,#(lf)       a.''Employee Identifier'' as EMP_ID,#(lf)       b.''Sales Hierarchy Identifier'' as SALE_HIER_ID,#(lf)       --a.''Employee Name'' as EMP_NM,#(lf)case when a.''Employee Name'' = \u0027Johnson,Christopher\u0027 then a.''Last Name''||\u0027,\u0027||a.''Nick Name''#(lf)            when a.''Employee Name'' = \u0027Parker,David\u0027 and a.''Employee Identifier'' = \u0027TS83655\u0027 then a.''Last Name''||\u0027,\u0027||a.''First Name''||\u0027 C.\u0027#(lf)            when a.''Employee Identifier'' = \u0027TS54638\u0027 then a.''Last Name''||\u0027,\u0027||a.''Nick Name''#(lf)            when a.''Employee Identifier'' = \u0027TS11184\u0027 then a.''Last Name''||\u0027,\u0027||a.''Nick Name''#(lf)            when a.''Employee Identifier'' = \u0027TS80048\u0027 then a.''Last Name''||\u0027,\u0027||a.''Nick Name''#(lf)         else a.''Employee Name''#(lf)       end as EMP_NM,       aa.''Job Type Code'' as JOB_TYP_CDE,#(lf)       aa.''Job Type Description'' as JOB_TYP_DSCR,#(lf)       case when a.''Organization Department Code'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027) then \u00270383\u0027#(lf)         else a.''Organization Department Code''#(lf)       end as TAG,#(lf)       case when aa.''Department Identifier'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027) then \u0027Virtual Advice\u0027#(lf)         else aa.''Department Name''#(lf)       end as ''TAG Name'',#(lf)       case when aa.''Department Identifier'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027) then \u00270383-Virtual Advice\u0027#(lf)         else a.''Organization Department Code''||\u0027-\u0027||aa.''Department Name''#(lf)       end as ''Advisor Group'',#(lf)       (substr(b.''Organization Zone Code'',6,2))   AS ZONE,#(lf)       b.''Organization Zone Code'' as Market,#(lf)       case when substr(b.''Organization Zone Code'',9,2) = \u002798\u0027 then \u0027NPG - market 98\u0027#(lf)            when substr(b.''Organization Zone Code'',9,2) = \u002799\u0027 then \u0027NPG - market 99\u0027#(lf)            when substr(b.''Organization Zone Code'',9,2) = \u002759\u0027 then \u0027PMC - market 59\u0027#(lf)            when substr(b.''Organization Zone Code'',9,2) = \u002701\u0027 then \u0027PMC - market 01\u0027#(lf)            when substr(b.''Organization Zone Code'',9,2) = \u002769\u0027 then \u0027GPA - market 69\u0027#(lf)            when Substr(b.''Organization Zone Code'',9,2) = \u002779\u0027 then \u0027GPD - market 79\u0027#(lf)            when substr(b.''Organization Zone Code'',9,2) = \u002789\u0027 then \u0027PPC - market 89\u0027#(lf)       end as Filter_Ind,  #(lf)       substr(b.''Organization Zone Code'',9,2) as Market_Number,               #(lf)       zz4.market_leaders,#(lf)       c.''Sub Department Identifier'' as MVP_ID,#(lf)       zz3.''MVP Leader'', #(lf)       c.''Report to ID'' as RPT_TO_ID,#(lf)       cc.''First Name''||\u0027 \u0027||cc.''Last Name'' as ''Report to Name'',#(lf)       a.''Adjusted Service Date'',#(lf)       c.''Financial Professional Tenure'' as Tenure,#(lf)       c.''Financial Professional Tenure Group'' as Tenure_Group,#(lf)       case when a.''Senior Financial Consultant Indicator'' = \u0027Y\u0027 then \u0027SFC\u0027#(lf)#(tab)        when a.''Financial Consultant Indicator'' = \u0027Y\u0027 then \u0027FC\u0027#(lf)#(tab)        when a.''Wealth Advisor Indicator'' = \u0027Y\u0027 then \u0027WA\u0027#(lf)#(tab)   end as SFC_FC,#(lf)       (case when a.''Senior Financial Consultant Indicator'' = \u0027Y\u0027 then \u0027SFC\u0027#(lf)             when a.''Financial Consultant Indicator'' = \u0027Y\u0027 then \u0027FC\u0027#(lf)             when a.''Wealth Advisor Indicator'' = \u0027Y\u0027 then \u0027WA\u0027#(lf)             when a.''Job Type Code'' in (\u0027002003\u0027,\u0027002018\u0027,\u0027002019\u0027) then A.''Job Type Description''#(lf)             when a.''Job Type Code'' = \u0027002016\u0027 then a.''Job Type Description''#(lf)             when ((a.''Senior Financial Consultant Indicator'' = \u0027N\u0027 or a.''Financial Consultant Indicator'' = \u0027N\u0027) and #(lf)                    c.''Financial Professional Tenure'' \u003e= 4 and #(lf)                    a.''Job Type Code'' in (\u0027002000\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027003602\u0027,\u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027))#(lf)                      then \u0027VETFR\u0027#(lf)             when c.''Financial Professional Tenure'' \u003e= 3 and c.''Financial Professional Tenure'' \u003c 4  and   #(lf)                  a.''Job Type Code'' in (\u0027002000\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027003602\u0027,\u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027)#(lf)                      then \u0027NFR4\u0027#(lf)             when c.''Financial Professional Tenure'' \u003e= 2 and c.''Financial Professional Tenure'' \u003c 3  and   #(lf)                  a.''Job Type Code'' in (\u0027002000\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027003602\u0027,\u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027)#(lf)                      then \u0027NFR3\u0027#(lf)             when c.''Financial Professional Tenure'' \u003e= 1 and c.''Financial Professional Tenure'' \u003c 2  and   #(lf)                  a.''Job Type Code'' in (\u0027002000\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027003602\u0027,\u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027)#(lf)                      then \u0027NFR2\u0027 #(lf)             when c.''Financial Professional Tenure'' \u003e= 0 and c.''Financial Professional Tenure'' \u003c 1  and   #(lf)                  a.''Job Type Code'' in (\u0027002000\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027003602\u0027,\u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027)#(lf)                      then \u0027NFR1\u0027 #(lf)        end) as FR_SEGMENT,#(lf)        trim(concat_ws(\u0027 \u0027,dd.CHFC_DSGT_CDE,dd.CLF_DSGT_CDE,dd.CLU_DSGT_CDE,dd.CFA_DSGT_CDE,dd.CFP_DSGT_CDE,dd.FIC_DSGT_CDE,dd.FICF_DSGT_CDE,dd.LUTCF_DSGT_CDE)) AS Credentialsxx,#(lf)        concat_ws(\u0027 \u0027,dd.S1_LIC_STS_CDE,dd.S4_LIC_STS_CDE,dd.S6_LIC_STS_CDE,dd.S7_LIC_STS_CDE,dd.S9_LIC_STS_CDE,#(lf)        dd.S10_LIC_STS_CDE,dd.S22_LIC_STS_CDE,dd.S24_LIC_STS_CDE,dd.S26_LIC_STS_CDE,dd.S27_LIC_STS_CDE,#(lf)        dd.S51_LIC_STS_CDE,dd.S53_LIC_STS_CDE,dd.S62_LIC_STS_CDE,dd.S63_LIC_STS_CDE,dd.S65_LIC_STS_CDE,#(lf)        dd.S66_LIC_STS_CDE,dd.S86_LIC_STS_CDE,dd.S87_LIC_STS_CDE) as Licensesxx,  #(lf)          #(lf)       a.''Gender Code'' as GNDR_CDE, #(lf)       a.''Last Name'' as LST_NM, #(lf)       case when a.''Nick Name'' IN (\u0027 \u0027) then a.''First Name''#(lf)         else a.''Nick Name''#(lf)       end as FRST_NM, #(lf)       a.''Middle Name'' as MDDL_NM,#(lf)       xx.assigned_afa,#(lf)       case when zz.opcount is NULL then 0 #(lf)         else zz.opcount#(lf)       end as OP_Count,#(lf)       aa.''Conference Qualification Type Code'',#(lf)       zzz.''Team Identifier'',#(lf)       zzz.''Team Name'',#(lf)       zzz.''Team Purpose Code''#(lf)       #(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' a inner join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' as aa#(lf)    on (a.''Employee Identifier''=aa.''Source System Key Text'' and aa.''Current Row Indicator'' = \u0027Y\u0027)  left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' b #(lf)    on (a.''Employee Identifier''= b.''Sales Hierarchy Identifier'') left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' c #(lf)    on (a.''Employee Identifier''= c.''Source System Key Text'' AND c.''Current Row Indicator'' = \u0027Y\u0027) left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' cc #(lf)    on (c.''Report to ID''= cc.''Source System Key Text'' AND cc.''Current Row Indicator'' = \u0027Y\u0027) left join  #(lf)        (select d.''Employee Identifier'',#(lf)                (case when \u0027Y\u0027 = d.''Chartered Financial Consultant Designation Code'' THEN \u0027ChFC\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS CHFC_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Chartered Leadership Fellow Designation Code'' THEN \u0027CLF\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS CLF_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Chartered Life Underwriter Designation Code'' THEN \u0027CLU\u0027#(lf)                   else \u0027 \u0027 #(lf)                 end) AS CLU_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Chartered Financial Analyst Designation Code'' THEN \u0027CFA\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS CFA_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Fraternal Insurance Counselor Designation Code'' THEN \u0027FIC\u0027#(lf)                   else \u0027 \u0027 #(lf)                 end) AS FIC_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Fraternal Insurance Counselor Fellow Designation Code'' THEN \u0027FICF\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS FICF_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Certified Financial Planner Designation Code'' THEN \u0027CFP\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS CFP_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Life Underwriter Training Counsel Fellow Designation Code'' THEN \u0027LUTCF\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS LUTCF_DSGT_CDE,#(lf)                (case when \u0027Y\u0027 = d.''Series One License Status Code'' THEN \u00271\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S1_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Four License Status Code'' THEN \u00274\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S4_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Six License Status Code'' THEN \u00276\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S6_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Seven License Status Code'' THEN \u00277\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S7_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Nine License Status Code'' THEN \u00279\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S9_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Ten License Status Code'' THEN \u002710\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S10_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Twenty-two License Status Code'' THEN \u002722\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S22_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Twenty-four License Status Code'' THEN \u002724\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S24_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Twenty-six License Status Code'' THEN \u002726\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S26_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Twenty-seven License Status Code'' THEN \u002727\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S27_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Fifty-one License Status Code'' THEN \u002751\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S51_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Fifty-three License Status Code'' THEN \u002753\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S53_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Sixty-two License Status Code'' THEN \u002762\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S62_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Sixty-three License Status Code'' THEN \u002763\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S63_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Sixty-five License Status Code'' THEN \u002765\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S65_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Sixty-six License Status Code'' THEN \u002766\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S66_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Eighty-six License Status Code'' THEN \u002786\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S86_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Eighty-seven License Status Code'' THEN \u002787\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S87_LIC_STS_CDE#(lf)              #(lf)           from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' d#(lf)          where d.''Termination Date'' is null   #(lf)            and d.''Current Row Indicator'' = \u0027Y\u0027#(lf)            and d.''Employee Status Type Code'' in (\u0027A\u0027,\u0027L\u0027,\u0027I\u0027)) as dd#(lf)    on A.''Employee Identifier'' = dd.''Employee Identifier''  left join#(lf)           #(lf)        (select distinct aa.''Source System Key Text'',#(lf)#(tab)            (case when e.emp_count = 1 then f.emp_nm#(lf)                      when e.emp_count \u003e 1 then \u0027Multiple Associates\u0027#(lf)                   else \u0027None\u0027#(lf)                 end) as assigned_afa#(lf)           from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' as aa left join  #(lf)              (select e.''Report to ID'', #(lf)                      count(e.''Organization Dimension Surrogate Key'') as emp_count   #(lf)                 from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' e  #(lf)                where e.''Job Type Code'' in (\u0027002000\u0027,\u0027002010\u0027,\u0027002003\u0027,\u0027002011\u0027,\u0027002012\u0027,\u0027003100\u0027,#(lf)                                            \u0027002017\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027002018\u0027,\u0027002019\u0027,\u0027003500\u0027,#(lf)                                            \u0027002022\u0027,\u0027002024\u0027,\u0027002025\u0027,\u0027002026\u0027,\u0027002027\u0027,\u0027002030\u0027,#(lf)                                            \u0027002031\u0027,\u0027002032\u0027)#(lf)                  and e.''Employee Status Type Code'' = \u0027A\u0027 #(lf)                  and e.''Current Row Indicator'' = \u0027Y\u0027#(lf)                  and e.''Report to ID'' \u003c\u003e \u0027'' ''\u0027 #(lf)                  and e.''Effective End Date'' = \u00279999-12-31\u0027 #(lf)               group by ''Report to ID'') as e #(lf)             on aa.''Source System Key Text'' = e.''Report to ID'' left join#(lf)         #(lf)              (select f.''Organization Dimension Surrogate Key'',#(lf)                      f.''Last Name''||\u0027, \u0027||f.''First Name'' as EMP_NM, #(lf)                      f.''Report to ID''  #(lf)                 from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' f#(lf)                where (f.''Job Type Code'' in (\u0027002000\u0027,\u0027002010\u0027,\u0027002003\u0027,\u0027002011\u0027,\u0027002012\u0027,\u0027003100\u0027,#(lf)                                             \u0027002017\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027002018\u0027,\u0027002019\u0027,\u0027003500\u0027,#(lf)                                             \u0027002022\u0027,\u0027002024\u0027,\u0027002025\u0027,\u0027002026\u0027,\u0027002027\u0027,\u0027002030\u0027,#(lf)                                             \u0027002031\u0027,\u0027002032\u0027) or #(lf)                      f.''Department Identifier'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027)) #(lf)                  and f.''Department Identifier'' not in (\u00272410\u0027,\u00273005\u0027,\u00277151\u0027,\u00277152\u0027,\u00279150\u0027,\u00279134\u0027,#(lf)                                                        \u0027NA\u0027,\u00274100\u0027,\u00276053\u0027,\u00276100\u0027,\u00278900\u0027) #(lf)                  and f.''Employee Status Type Code'' = \u0027A\u0027 #(lf)                  and f.''Current Row Indicator'' = \u0027Y\u0027#(lf)                  and f.''Report to ID'' \u003c\u003e \u0027'' ''\u0027 #(lf)                  and f.''Effective End Date'' = \u00279999-12-31\u0027) as f  #(lf)              on e.''Report to ID''=f.''Report to ID''#(lf)          where (aa.''Job Type Code'' in (\u0027002000\u0027,\u0027002010\u0027,\u0027002003\u0027,\u0027002011\u0027,\u0027002012\u0027,\u0027003100\u0027,#(lf)                                        \u0027002017\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027002018\u0027,\u0027002019\u0027,\u0027003500\u0027,#(lf)                                        \u0027002022\u0027,\u0027002024\u0027,\u0027002025\u0027,\u0027002026\u0027,\u0027002027\u0027,\u0027002030\u0027,#(lf)                                        \u0027002031\u0027,\u0027002032\u0027) or #(lf)                aa.''Department Identifier'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027)) #(lf)            and aa.''Department Identifier'' not in (\u00272410\u0027,\u00273005\u0027,\u00277151\u0027,\u00277152\u0027,\u00279150\u0027,\u00279134\u0027,#(lf)                                                   \u0027NA\u0027,\u00274100\u0027,\u00276053\u0027,\u00276100\u0027,\u00278900\u0027) #(lf)            and aa.''Current Row Indicator'' = \u0027Y\u0027#(lf)            and aa.''Employee Status Type Code'' = \u0027A\u0027 #(lf)            and aa.''Report to ID'' \u003c\u003e \u0027'' ''\u0027 #(lf)            and aa.''Effective End Date'' = \u00279999-12-31\u0027) as xx#(lf) #(lf)    on a.''Employee Identifier''=xx.''Source System Key Text'' left join #(lf)      (select count(z.''Organization Dimension Surrogate Key'') as OPCOUNT,   #(lf)                    z.''Report to ID'' #(lf)         from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' z  #(lf)        where z.''Current Row Indicator'' = \u0027Y\u0027#(lf)          and z.''Field Professional Roles'' in (\u0027Unlicensed Office Professionals\u0027,\u0027Licensed Office Professionals\u0027)#(lf)          and z.''Employee Status Type Code'' in (\u0027A\u0027,\u0027I\u0027,\u0027L\u0027)#(lf)       group by ''Report to ID'') as zz#(lf)         #(lf)    on a.''Employee Identifier'' = zz.''Report to ID''   left join#(lf)#(lf)(select a.''Employee Identifier'',#(lf)        b.''Team Identifier'',#(lf)        b.''Team Name'',#(lf)        b.''Team Purpose Code'',#(lf)        A.''Effective Date''#(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Employee Team Organization Relationship Current Dimension''  a inner join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Team Organization Current Dimension'' b#(lf)    on (a.''Team Identifier Surrogate Key'' = b.''Team Identifier Surrogate Key'')  inner join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' c#(lf)    on (a.''Employee Identifier'' = c.''Employee Identifier'')   #(lf)    #(lf) where b.''Effective Status Code'' = \u0027A\u0027#(lf)   and c.''Employee Status Type Code'' = \u0027A\u0027#(lf)   and c.''Current Row Indicator'' = \u0027Y\u0027#(lf)   and a.''Team Member Action Code'' \u003c\u003e \u0027DROP\u0027#(lf)--   and b.''Team Purpose Code'' NOT in (\u0027COAC\u0027,\u0027ENSB\u0027) #(lf)   and b.''Team Purpose Code'' NOT in (\u0027COAC\u0027,\u0027ENSB\u0027) #(lf)   and a.''Effective Date'' = (SELECT MAX(aa.''Effective Date'')#(lf)                                FROM ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Employee Team Organization Relationship Current Dimension''  aa inner join#(lf)                                     ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Team Organization Current Dimension'' bb#(lf)                                  on (aa.''Team Identifier Surrogate Key'' = bb.''Team Identifier Surrogate Key'' and a.''Employee Identifier''= aa.''Employee Identifier'') INNER JOIN#(lf)                                     ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' cc#(lf)                                  on (aa.''Employee Identifier''= cc.''Employee Identifier'')#(lf)#(tab)                           WHERE bb.''Effective Status Code'' = \u0027A\u0027#(lf)                                 AND cc.''Employee Status Type Code'' = \u0027A\u0027  #(lf)                                 and cc.''Current Row Indicator'' = \u0027Y\u0027#(lf)                                 and aa.''Team Member Action Code'' \u003c\u003e \u0027DROP\u0027#(lf)                                -- and bb.''Team Purpose Code'' NOT in (\u0027COAC\u0027,\u0027ENSB\u0027) #(lf)                                 and bb.''Team Purpose Code'' NOT in (\u0027COAC\u0027,\u0027ENSB\u0027) #(lf)                                -- and bb.''Team Purpose Code'' in (\u0027ASSC\u0027)#(lf)                            )#(lf)  order by a.''Employee Identifier'') as zzz#(lf)  #(lf)   on a.''Employee Identifier'' = zzz.''Employee Identifier'' left join#(lf)#(lf)#(lf)       (select distinct a2.''Organization Department Code'' as RFO_CDE,#(lf)                        a2.''Organization Sub Department Code'' as MVP_ID,#(lf)                        cc.''Organization Department Description'',#(lf)                        case when cc.''Employee Name'' is null then \u0027Vacant\u0027#(lf)                          else cc.''Employee Name''#(lf)                        end as ''MVP Leader''    #(lf)          from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' a2  left join#(lf)               (Select Distinct aa.''Organization Sub Department Code'',#(lf)                                aa.''Organization Department Description'',#(lf)                                bb.''Employee Identifier'',#(lf)                                bb.''Employee Name'' #(lf)                  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' as aa left join#(lf)                       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' as bb#(lf)                    on aa.''Sales Hierarchy Identifier''=bb.''Employee Identifier''  #(lf)                 where aa.''Current Row Indicator'' = \u0027Y\u0027#(lf)                   and bb.''Employee Status Type Code'' = \u0027A\u0027#(lf)                   and bb.''Current Row Indicator'' = \u0027Y\u0027#(lf)                   and aa.''Effective End Date'' = \u00279999-12-31\u0027#(lf)                   and bb.''Job Type Code'' = \u0027001001\u0027#(lf)                 order by aa.''Organization Sub Department Code'') cc#(lf)             on a2.''Organization Sub Department Code''=cc.''Organization Sub Department Code''  #(lf)          where a2.''Current Row Indicator'' = \u0027Y\u0027#(lf)            and a2.''Effective End Date'' = \u00279999-12-31\u0027#(lf)            and a2.''Organization Zone Code'' \u003c\u003e \u0027UKWN\u0027#(lf)           order by a2.''Organization Sub Department Code''  ) as zz3#(lf)  on c.''Sub Department Identifier''= zz3.''MVP_ID'' left join#(lf)   #(lf)    #(lf)     (SELECT DISTINCT a4.''Organization Department Code'' as RFO_CDE,#(lf)                      a4.''Organization Zone Code'' as TAG_ZONE_NM, #(lf)                      (substring(a4.''Organization Zone Code'',6,5)) as Market_ID,#(lf)                      case when t4.''Employee Name'' is null then \u0027Vacant\u0027#(lf)                        else t4.''Employee Name''#(lf)                      end as Market_Leaders#(lf)#(lf)        from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' a4 left join #(lf)             (select distinct aa4.''Organization Zone Code'',#(lf)                              bb4.''Employee Name''  #(lf)#(lf)                from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' aa4 left join #(lf)                     ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' bb4#(lf)                  on aa4.''Sales Hierarchy Identifier''=bb4.''Employee Identifier''#(lf)               where aa4.''Current Row Indicator'' = \u0027Y\u0027      #(lf)                 and bb4.''Employee Status Type Code'' in (\u0027A\u0027)#(lf)                 and aa4.''Effective End Date'' = \u00279999-12-31\u0027#(lf)                 and bb4.''Current Row Indicator'' = \u0027Y\u0027#(lf)                 and aa4.''Effective End Date'' = \u00279999-12-31\u0027#(lf)                 and (bb4.''Job Type Code'' in (\u0027001002\u0027,\u0027001003\u0027,\u0027001007\u0027) or #(lf)                      bb4.''Employee Identifier'' in (\u0027TS60295\u0027,\u0027TS49431\u0027,\u0027TS22024\u0027))#(lf)                 and bb4.''Employee Identifier'' not in (\u0027TS62904\u0027,\u0027TS67022\u0027,\u0027TS74827\u0027,\u0027TS73067\u0027,\u0027TS77319\u0027,\u0027TS73124\u0027)) t4#(lf)          on a4.''Organization Zone Code'' = t4.''Organization Zone Code''#(lf)       where a4.''Current Row Indicator'' = \u0027Y\u0027#(lf)         and a4.''Effective End Date'' = \u00279999-12-31\u0027#(lf)         and substring(a4.''Organization Zone Code'',6,2) \u003c\u003e \u002700\u0027#(lf)         and a4.''Organization Department Code'' \u003c\u003e \u0027UKWN\u0027#(lf)       order by a4.''Organization Zone Code'') zz4#(lf)     #(lf)   on  b.''Organization Zone Code''= zz4.''TAG_ZONE_NM'' #(lf)  #(lf)  #(lf) where a.''Employee Status Type Code'' IN (\u0027A\u0027,\u0027I\u0027,\u0027L\u0027)#(lf)   and (c.''Job Family Code'' LIKE \u0027FLD%\u0027 OR#(lf)        c.''Job Family Code'' =\u0027SALES\u0027 OR#(lf)        c.''TF Job Class Code'' =\u0027FAC\u0027)#(lf)   and a.''Termination Date'' is NULL #(lf)   and (a.''Job Type Code'' in (\u0027002003\u0027,\u0027002010\u0027,\u0027002011\u0027,\u0027002012\u0027,\u0027002016\u0027,\u0027002017\u0027,#(lf)                              \u0027002000\u0027,\u0027002022\u0027,\u0027002024\u0027,\u0027002025\u0027,\u0027002026\u0027,\u0027002027\u0027,#(lf)                              \u0027002030\u0027,\u0027002031\u0027,\u0027002032\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027003602\u0027,#(lf)                              \u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027) or #(lf)       a.''Organization Department Code'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027)) #(lf)   and c.''Department Identifier'' not in (\u00272410\u0027,\u00273005\u0027,\u00277151\u0027,\u00277152\u0027,\u00279150\u0027,\u00279134\u0027,#(lf)                                         \u0027NA\u0027,\u00274100\u0027,\u00276053\u0027,\u00276100\u0027,\u00278900\u0027) #(lf)   and b.''Effective End Date'' = \u00279999-12-31\u0027 #(lf)   and b.''Current Row Indicator'' = \u0027Y\u0027 #(lf)   and a.''Current Row Indicator'' = \u0027Y\u0027 #(lf)   --and a.''Employee Identifier'' = \u0027TS77676\u0027#(lf)order by a.''Employee Identifier''', null, [EnableFolding=true]),    #'Added Custom' = Table.AddColumn(Source, 'Split_Cred', each Text.Split( [CREDENTIALSXX], ' ' )),    #'Added Custom1' = Table.AddColumn(#'Added Custom', 'Shrink_Cred', each List.Select([Split_Cred], each _ \u003c\u003e '')),    #'Added Custom2' = Table.AddColumn(#'Added Custom1', 'Credentials', each Text.Combine([Shrink_Cred], ' ')),    #'Added Custom3' = Table.AddColumn(#'Added Custom2', 'Split_License', each Text.Split( [LICENSESXX], ' ' )),    #'Added Custom4' = Table.AddColumn(#'Added Custom3', 'Shrink_License', each List.Select([Split_License], each _ \u003c\u003e '')),    #'Added Custom5' = Table.AddColumn(#'Added Custom4', 'License', each Text.Combine([Shrink_License], ' ')),    #'Removed Columns' = Table.RemoveColumns(#'Added Custom5',{'Split_Cred', 'Shrink_Cred', 'Split_License', 'Shrink_License', 'CREDENTIALSXX', 'LICENSESXX'}),    #'Added Custom6' = Table.AddColumn(#'Removed Columns', 'Conference Qualification', each if[Conference Qualification Type Code] = '33' then 'Pinnacle A'  else if[Conference Qualification Type Code] = '32' then 'Pinnacle B'else if[Conference Qualification Type Code] = '31' then 'Pinnacle C'else if[Conference Qualification Type Code] = '29' then 'Summit A'else if[Conference Qualification Type Code] = '28' then 'Summit B'else if[Conference Qualification Type Code] = '27' then 'Summit C'else if[Conference Qualification Type Code] = '22' then 'Sierra A'else if[Conference Qualification Type Code] = '20' then 'Sierra B'else 'Non-Qualified'),    #'Added Custom7' = Table.AddColumn(#'Added Custom6', 'Team Purpose Description', each if [Team Purpose Code] = 'PBP' then 'Professional'else if [Team Purpose Code] = 'PBPS' then 'Professional'else if [Team Purpose Code] = 'FRML' then 'Formal'  else if [Team Purpose Code] = 'FRMS' then 'Formal'else if [Team Purpose Code] = 'ASSC' then 'Association'else if [Team Purpose Code] = 'SOLO' then 'Solo'else ' '),    #'Added Custom8' = Table.AddColumn(#'Added Custom7', 'Market with Leader', each [MARKET]\u0026' - '\u0026[MARKET_LEADERS]),    #'Added Custom9' = Table.AddColumn(#'Added Custom8', 'MVP with Leader', each [MVP_ID] \u0026 ' - ' \u0026 [MVP Leader]),    #'Replaced Value' = Table.ReplaceValue(#'Added Custom9',null,'',Replacer.ReplaceValue,{'Team Name'}),    #'Replaced Value1' = Table.ReplaceValue(#'Replaced Value',null,'',Replacer.ReplaceValue,{'Team Identifier'}),    #'Added Custom10' = Table.AddColumn(#'Replaced Value1', 'TeamAdvisor_HlthRpt', each if [Team Identifier] = '' then [EMP_NM] else [Team Name]),    #'Added Custom11' = Table.AddColumn(#'Added Custom10', 'Team Indicator', each if([Team Identifier]='') then 0 else 1),    #'Changed Type' = Table.TransformColumnTypes(#'Added Custom11',{{'Team Indicator', Int64.Type}}),    #'Removed Duplicates' = Table.Distinct(#'Changed Type', {'SALE_HIER_DIM_SK'}),    #'Filtered Rows' = Table.SelectRows(#'Removed Duplicates', each true),    #'Merged Queries' = Table.NestedJoin(#'Filtered Rows', {'FILTER_IND'}, #'Experience Advisor Sort', {'Filter_Ind'}, 'Experience Advisor Sort', JoinKind.LeftOuter),    #'Expanded Experience Advisor Sort' = Table.ExpandTableColumn(#'Merged Queries', 'Experience Advisor Sort', {'Sort'}, {'Experience Advisor Sort.Sort'})in    #'Expanded Experience Advisor Sort'"}]},{"name":"Alert Message","isHidden":false,"storageMode":"Import","columns":[{"name":"What\u0027s New Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Alert Message","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Message_Alert_Text","expression":" var _txt1 = SELECTEDVALUE(\u0027Alert Message\u0027[Alert Message]) return IF(ISBLANK(_txt1),'',_txt1)","isHidden":false},{"name":"Message_WhatsNew_Text","expression":" var _txt1 = SELECTEDVALUE(\u0027Alert Message\u0027[What\u0027s New Description]) return IF(ISBLANK(_txt1),'',_txt1)","isHidden":false},{"name":"ShowHideAlert Background","expression":"IF(ISBLANK(SELECTEDVALUE(\u0027Alert Message\u0027[Alert Message])),'White','White')","isHidden":false},{"name":"ShowHideAlert Border","expression":"IF(ISBLANK(SELECTEDVALUE(\u0027Alert Message\u0027[Alert Message])),'White','#BE1D3D')","isHidden":false},{"name":"ShowHideAlertTitle","expression":" IF(ISBLANK(SELECTEDVALUE(\u0027Alert Message\u0027[Alert Message])),' ','ALERT !')","isHidden":false},{"name":"ShowHideWhatsNew Background","expression":"IF(ISBLANK(SELECTEDVALUE(\u0027Alert Message\u0027[What\u0027s New Description])),'White','#E9DDC8')","isHidden":false},{"name":"ShowHideWhatsNew Border","expression":"IF(ISBLANK(SELECTEDVALUE(\u0027Alert Message\u0027[What\u0027s New Description])),'White','#63666A')","isHidden":false},{"name":"ShowHideWhatsNewTitle","expression":" IF(ISBLANK(SELECTEDVALUE(\u0027Alert Message\u0027[What\u0027s New Description])),' ','What\u0027s New')","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//SHARED//Public//DI and BI//Field Reporting//What\u0027s New and Alert Message//What\u0027s New and Alert Message.xlsx'), null, true),    #'Field Activity_Sheet' = Source{[Item='Field Activity',Kind='Sheet']}[Data],    #'Changed Type1' = Table.TransformColumnTypes(#'Field Activity_Sheet',{{'Column1', type text}, {'Column2', type text}}),    #'Promoted Headers' = Table.PromoteHeaders(#'Changed Type1', [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'What\u0027s New Description', type text}, {'Alert Message', type text}})in    #'Changed Type'"}]},{"name":"Daily_Tenure_Counts_DD","isHidden":false,"storageMode":"Import","columns":[{"name":"CAL_DAY_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Year","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Half","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Quarter","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Month","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Tenure_Group","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"COUNT_of_TSID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"COUNT_of_TSL","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"COUNT_of_ASSC_REP","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Tenure","dataType":"String","isHidden":false,"expression":"if(Daily_Tenure_Counts_DD[Tenure_Group] = 'Associate Rep', 'Associate Rep',if(Daily_Tenure_Counts_DD[Tenure_Group] in {'NFA1', 'NFA2', 'NFA3', 'NFA4'}, 'NFA',if(Daily_Tenure_Counts_DD[Tenure_Group] = 'Other', 'Other',if(Daily_Tenure_Counts_DD[Tenure_Group] = 'VET5+', 'Vet'))))","columnType":"Calculated"},{"name":"Tenure Group","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"YTD NFA Capacity NEW","expression":"CALCULATE(    SUM(Daily_Tenure_Counts_DD[COUNT_of_TSID]),    \u0027DTRB_PERF_DATES\u0027[YTD Flag ENGAGEMENT TEAM TAB] in {True},    \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT]='Current',    \u0027Daily_Tenure_Counts_DD\u0027[Tenure_Group] in {'NFA1','NFA2','NFA3','NFA4'})","isHidden":false},{"name":"YTD Vet Capacity NEW","expression":"CALCULATE(    SUM(Daily_Tenure_Counts_DD[COUNT_of_TSID]),    \u0027DTRB_PERF_DATES\u0027[YTD Flag ENGAGEMENT TEAM TAB] in {True},    \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT]='Current',    \u0027Daily_Tenure_Counts_DD\u0027[Tenure_Group] in {'VET5+'})","isHidden":false},{"name":"YTD Other Capacity NEW","expression":"CALCULATE(    SUM(Daily_Tenure_Counts_DD[COUNT_of_TSID]),    \u0027DTRB_PERF_DATES\u0027[YTD Flag ENGAGEMENT TEAM TAB] in {True},    \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT]='Current',    \u0027Daily_Tenure_Counts_DD\u0027[Tenure_Group] in {'Other'})","isHidden":false},{"name":"YTD Associate Rep Capacity NEW","expression":"CALCULATE(    SUM(Daily_Tenure_Counts_DD[COUNT_of_TSID]),    \u0027DTRB_PERF_DATES\u0027[YTD Flag ENGAGEMENT TEAM TAB] in {True},    \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT]='Current',    \u0027Daily_Tenure_Counts_DD\u0027[Tenure_Group] in {'Associate Rep'})","isHidden":false},{"name":"YTD NFA+Vet Capacity NEW","expression":"[YTD NFA Capacity NEW] + [YTD Vet Capacity NEW]","isHidden":false},{"name":"YTD TOTAL Capacity (Summary tab) NEW - !! don\u0027t use !!","expression":"if(HASONEVALUE(\u0027Appointments/PC/JFW\u0027[FA Tenure - Assoc Rep, NFA, Vet, Other]),SWITCH(VALUES(\u0027Appointments/PC/JFW\u0027[FA Tenure - Assoc Rep, NFA, Vet, Other]),'NFA', [YTD NFA Capacity NEW],'Associate Rep', [YTD Associate Rep Capacity NEW],'Vet', [YTD Vet Capacity NEW]), [YTD NFA+Vet Capacity NEW])","isHidden":false},{"name":"Average Capacity","expression":"divide(sum(Daily_Tenure_Counts_DD[COUNT_of_TSID]),DISTINCTCOUNT(DTRB_PERF_DATES[CAL_DAY_DT]))","isHidden":false}],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////vsshr//shared//Public//DI and BI//Field Reporting//Daily_Tenure_Counts_DD.csv'),[Delimiter=',', Columns=10, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'CAL_DAY_DT', type date}, {'Year', Int64.Type}, {'Half', Int64.Type}, {'Quarter', Int64.Type}, {'Month', Int64.Type}, {'Tenure_Group', type text}, {'Market', type text}, {'COUNT_of_TSID', Int64.Type}, {'COUNT_of_TSL', Int64.Type}, {'COUNT_of_ASSC_REP', Int64.Type}}),    #'Added Conditional Column' = Table.AddColumn(#'Changed Type', 'Tenure Group', each if Text.StartsWith([Tenure_Group], 'NFA') then 'NFA' else if Text.StartsWith([Tenure_Group], 'VET') then 'VET' else [Tenure_Group]),    #'Filtered Rows' = Table.SelectRows(#'Added Conditional Column', each ([Market] \u003c\u003e '0383-01-00' and [Market] \u003c\u003e '0716-01-00' and [Market] \u003c\u003e '0997-00'))in    #'Filtered Rows'"}]},{"name":"Appointment Switch","isHidden":false,"storageMode":"Import","columns":[{"name":"Metric","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i45WCskvScxRitWJVgpILVJwc1SKjQUA', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Metric = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Metric', type text}})in    #'Changed Type'"}]}],"expressions":[{"name":"Errors in TSIDs","expression":"letSource = TSIDs,  #'Detected Type Mismatches' = let    tableWithOnlyPrimitiveTypes = Table.SelectColumns(Source, Table.ColumnsOfType(Source, {type nullable number, type nullable text, type nullable logical, type nullable date, type nullable datetime, type nullable datetimezone, type nullable time, type nullable duration})),    recordTypeFields = Type.RecordFields(Type.TableRow(Value.Type(tableWithOnlyPrimitiveTypes))),    fieldNames = Record.FieldNames(recordTypeFields),    fieldTypes = List.Transform(Record.ToList(recordTypeFields), each [Type]),    pairs = List.Transform(List.Positions(fieldNames), (i) =\u003e {fieldNames{i}, (v) =\u003e if v = null or Value.Is(v, fieldTypes{i}) then v else error [Message = 'The type of the value does not match the type of the column.', Detail = v], fieldTypes{i}})in    Table.TransformColumns(Source, pairs),  #'Added Index' = Table.AddIndexColumn(#'Detected Type Mismatches', 'Row Number' ,1),  #'Kept Errors' = Table.SelectRowsWithErrors(#'Added Index', {'TSID', 'Name', 'RFO', 'Market', 'Job Code', 'Job Description'}),  #'Reordered Columns' = Table.ReorderColumns(#'Kept Errors', {'Row Number', 'TSID', 'Name', 'RFO', 'Market', 'Job Code', 'Job Description'})in  #'Reordered Columns'"},{"name":"TSIDs","expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Field Reporting//TSIDs for Advice and MGP.xlsx'), null, true),    TSIDs_Sheet = Source{[Item='TSIDs',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(TSIDs_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'TSID', type text}, {'Name', type text}, {'RFO', type text}, {'Market', type text}, {'Job Code', type text}, {'Job Description', type text}})in    #'Changed Type'"},{"name":"Experience Advisor Sort","expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i45WUtJRMlSK1YlWCvB1VtBVyE0syk4tUTAwBIobYYqbWgLFjcHi7gGOCHEzkLgJVNwFIW4OEjcFi/sFuCPELS2A4mZYxEHqzZViYwE=', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Filter_Ind = _t, Sort = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Filter_Ind', type text}, {'Sort', Int64.Type}})in    #'Changed Type'"}],"configuredBy":"Ashley.Allen@Thrivent.com","configuredById":"db3dc7f7-0f5a-4e78-ba27-5d10f979c10f","isEffectiveIdentityRequired":false,"isEffectiveIdentityRolesRequired":false,"refreshSchedule":{"days":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"times":["09:00","15:30"],"enabled":true,"localTimeZoneId":"Central Standard Time","notifyOption":"NoNotification"},"targetStorageMode":"Abf","createdDate":"2020-07-14T17:14:04.263","contentProviderType":"PbixInImportMode"},{"id":"c12af2db-2b77-449e-bb26-e79e8072fc6b","name":"New Client Dashboard","tables":[{"name":"New Clients","isHidden":false,"storageMode":"Import","columns":[{"name":"Date Surrogate Key","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Contract Version Number","dataType":"Int64","isHidden":false,"description":"A number used to uniquely identify a version of a specific occurrence.","columnType":"Data"},{"name":"Writing Agent Version Number","dataType":"Int64","isHidden":false,"description":"A number used to uniquely identify a version of a specific occurrence of the Workforce Dimension Detail.","columnType":"Data"},{"name":"Financial Customer Point Status Code","dataType":"String","isHidden":false,"description":"A Financial Customer Point Status Code is the alphanumeric value assigned to represent the status of the points awarded for a Financial Customer in an abbreviated form. When using Financial Customer data, current and history rows must both be included.","columnType":"Data"},{"name":"Financial Customer Age","dataType":"Int64","isHidden":false,"description":"Age of the Customer at the time of the Financial customer Event occurance.","columnType":"Data"},{"name":"Age Class Code","dataType":"String","isHidden":false,"description":"A Age Classification Code is the alphanumeric value assigned torepresent a category of people based on age in an abbreviated form. ADULT are age of 16 or older. JUV is for those with an age of 15 oryounger","columnType":"Data"},{"name":"Age Class Description","dataType":"String","isHidden":false,"description":"A Age Classification Description is the word or phrase thatinterprets the Age Classification Code, making it understandable tousers.","columnType":"Data"},{"name":"Financial Customer Point Value","dataType":"Int64","isHidden":false,"description":"A Financial Customer Point Value is a numeric value of the point that is assigned when a customer meets the Financial Customer eligibility rules.","columnType":"Data"},{"name":"Sales Hierarchy Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Effective Begin Timestamp","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Effective End Timestamp","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Current Row Indicator Sales Hierarchy","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Partner Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Managing Partner Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"description":"An Organization Zone Code is the alphanumeric value assigned torepresent a subsection of a Regional Financial Office.","columnType":"Data"},{"name":"Organization Zone Description","dataType":"String","isHidden":false,"description":"An Organization Zone Description is the alphanumeric valuerepresenting the name of a specific subsection of a RegionalFinancial Office.","columnType":"Data"},{"name":"RFO","dataType":"String","isHidden":false,"description":"A code that uniquely identifies a Thrivent deparment organization unit.","columnType":"Data"},{"name":"Organization Department Description","dataType":"String","isHidden":false,"description":"A character field that describes a Thrivent department organizationunit.","columnType":"Data"},{"name":"Organization Division Code","dataType":"String","isHidden":false,"description":"A code that identifies a Thrivent division organization unit.","columnType":"Data"},{"name":"Organization Division Description","dataType":"String","isHidden":false,"description":"A text field that identifies a Thrivent division organizational unite.","columnType":"Data"},{"name":"Sales Hierarchy Dimension Surrogate Key","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Financial Customer Point Reason Code","dataType":"String","isHidden":false,"description":"A Financial Customer Point Reason Code is the alphanumeric value assigned to represent the reason a Financial Customer point was given or was removed.","columnType":"Data"},{"name":"Financial Customer Point Reason Description","dataType":"String","isHidden":false,"description":"A Financial Customer Point Reason Description is the word or phrase that interprets the Financial Customer Point Reason Code, making it understandable to users.","columnType":"Data"},{"name":"Financial Customer Point Relationship Code","dataType":"String","isHidden":false,"description":"The Financial Customer Point Relationship Code is the alphanumeric value assigned to represent the relationship the customer had to the contract at the time the customer is considered to be a Financial Customer or not.","columnType":"Data"},{"name":"Financial Customer Point Relationship Description","dataType":"String","isHidden":false,"description":"A Financial Customer Point Relationship Description is the word or phrase that interprets the Financial Customer Point Relationship Code, making it understandable to users.","columnType":"Data"},{"name":"Member Type Code","dataType":"String","isHidden":false,"description":"A code indicating the type of membership of a customer or group ofcustomers.","columnType":"Data"},{"name":"Member Type Description","dataType":"String","isHidden":false,"description":"The description of the type of membership of a customer or group ofcustomers.","columnType":"Data"},{"name":"Residential State Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Level 5 Product Line Of Business Subgroup Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Level 5 Product Line Of Business Subgroup Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Level 4 Product Line Of Business Group Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Level 4 Product Line Of Business Group Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Level 3 Product Line Of Business Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Level 3 Product Line Of Business Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Level 2 Product Character Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Level 2 Product Character Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Assigned FR","dataType":"String","isHidden":false,"description":"The full name of an employee (includes title, first name, middle initial, last name and suffix).  This is also called Member Client from iSTP perspective.","columnType":"Data"},{"name":"Employee First Name","dataType":"String","isHidden":false,"description":"The first name of an individual.","columnType":"Data"},{"name":"Employee Middle Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee Last Name","dataType":"String","isHidden":false,"description":"The last name of an individual.","columnType":"Data"},{"name":"Adjusted Service Date","dataType":"DateTime","isHidden":false,"description":"The date used to calculate an individual\u0027s years of service.","columnType":"Data"},{"name":"TS ID","dataType":"String","isHidden":false,"description":"An primary identifier associated with an employee. This is the 'TS' identifier assigned to an employee by human resources.","columnType":"Data"},{"name":"Employee Status Type Code","dataType":"String","isHidden":false,"description":"A code that describes the relationship a person has with Thrivent regarding employment.","columnType":"Data"},{"name":"Employee Status Type Description","dataType":"String","isHidden":false,"description":"Employee status type description describes an employee status type code.  The code specifies the type of relationship a person has with Thrivent with regard to employment.","columnType":"Data"},{"name":"Job Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Type Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Agent Current Row Indicator","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Calendar Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Calendar Month Start Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Calendar Month End Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Member Age","dataType":"Int64","isHidden":false,"description":"Current Age of the Customer as calculated using CIF date of birth.  Date of Birth is not shared just the numeric value age.","columnType":"Data"},{"name":"Financial Customer Age Group","dataType":"String","isHidden":false,"description":"A calculated age group that a new financial customer would fit into based on their birth date.","columnType":"Data"},{"name":"Distribution Performance Reporting Week End Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Week Number","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Year Number","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Year Week Number","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Name","dataType":"String","isHidden":false,"expression":"\u0027New Clients\u0027[Employee Last Name]\u0026', '\u0026 \u0027New Clients\u0027[Employee First Name]","columnType":"Calculated"},{"name":"CUST_LGAL_FMT_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CTRC_ISS_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Division","dataType":"String","isHidden":false,"expression":"if(\u0027New Clients\u0027[RFO] IN {'0283', '0365', '0435', '0496', '0810'}, 'Central', if(\u0027New Clients\u0027[RFO] IN {'0115', '0165', '0190', '0240', '0361', '0384'}, 'East', if(\u0027New Clients\u0027[RFO] IN {'0291', '0410', '0475', '0525', '0529'}, 'West',if(\u0027New Clients\u0027[RFO] = '0383', 'TFGT',if(\u0027New Clients\u0027[RFO] = '0716', 'TAN',if (\u0027New Clients\u0027[RFO] = '0001', 'Home Office'))))))","columnType":"Calculated"},{"name":"DTRB_PERF_RPT_WK_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_DAY_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_MTH_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_QTR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Region","dataType":"String","isHidden":false,"expression":"IF(\u0027New Clients\u0027[RFO] IN {'0361', '0365', '0435', '0496'}, 'Established', IF(\u0027New Clients\u0027[RFO] IN {'0165', '0240', '0283', '0291', '0410', '0525'}, 'Growth', IF(\u0027New Clients\u0027[RFO] IN {'0115', '0190', '0384', '0475', '0529'}, 'Invest', IF(\u0027New Clients\u0027[RFO] = '0383', 'TFGT',IF(\u0027New Clients\u0027[RFO] = '0716', 'TAN',IF(\u0027New Clients\u0027[RFO] = '0810', 'Colorado Springs',IF(\u0027New Clients\u0027[RFO] = '0001', 'Home Office')))))))","columnType":"Calculated"},{"name":"Employee Status","dataType":"String","isHidden":false,"expression":"if(\u0027New Clients\u0027[Employee Status Type Description] = 'Active', 'Active', 'Inactive')","columnType":"Calculated"},{"name":"Channel","dataType":"String","isHidden":false,"expression":"if(\u0027New Clients\u0027[RFO] in {'0001','0115','0165','0190','0240','0283','0291','0361','0365','0384','0410','0435','0475','0496','0525','0529','0810'}, 'Thrivent Advisor Group', if(\u0027New Clients\u0027[RFO] in {'0383'}, 'Virtual Advice',if(\u0027New Clients\u0027[RFO] in {'0716'}, 'TAN')))","columnType":"Calculated"},{"name":"Column - DO NOT DELETE (used in join)","dataType":"String","isHidden":false,"expression":"\u0027New Clients\u0027[TS ID]\u0026\u0027New Clients\u0027[RFO]","columnType":"Calculated"},{"name":"FP Tenure - NFP, Vet","dataType":"String","isHidden":false,"expression":"if(not(\u0027New Clients\u0027[Job Type Code] in {'002000', '002010', '002022', '002024', '002025', '002026', '002027', '003100', '003500'}), 'Vet', if(((\u0027New Clients\u0027[Calendar Date] - \u0027New Clients\u0027[Adjusted Service Date]) / 365.25) \u003c 4, 'NFP', 'Vet'))","columnType":"Calculated"},{"name":"Max Cal Date","dataType":"String","isHidden":false,"expression":"CALCULATE(MAX(\u0027New Clients\u0027[Calendar Date]),ALLEXCEPT(\u0027New Clients\u0027,\u0027New Clients\u0027[DTRB_PERF_RPT_YR_TXT]),\u0027New Clients\u0027[DTRB_PERF_RPT_YR_TXT]='Current')","columnType":"Calculated"},{"name":"Previous 2 Weeks Flag","dataType":"String","isHidden":false,"expression":"LOOKUPVALUE(\u0027New Clients\u0027[Distribution Performance Reporting Year Week Number], \u0027New Clients\u0027[DTRB_PERF_RPT_WK_TXT], 'PREVIOUS')","columnType":"Calculated"},{"name":"Prev2 wk newest","dataType":"String","isHidden":false,"expression":"LOOKUPVALUE(\u0027New Clients\u0027[Distribution Performance Reporting Year Week Number], \u0027New Clients\u0027[Calendar Date], today())","columnType":"Calculated"},{"name":"WeekIndex","dataType":"String","isHidden":false,"expression":"Var year_num = (YEAR(\u0027New Clients\u0027[Distribution Performance Reporting Week End Date])-YEAR(MIN(\u0027New Clients\u0027[Distribution Performance Reporting Week End Date])))+1var year_diff = (YEAR(\u0027New Clients\u0027[Distribution Performance Reporting Week End Date])-YEAR(MIN(\u0027New Clients\u0027[Distribution Performance Reporting Week End Date])))Var week_num = WEEKNUM(\u0027New Clients\u0027[Distribution Performance Reporting Week End Date])RETURN(year_diff*52)+week_num","columnType":"Calculated"},{"name":"MVP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CUST_ID_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[{"name":"YOY Change","expression":"VAR __BASELINE_VALUE = [PYTD New Clients]VAR __VALUE_TO_COMPARE = [YTD New Clients]RETURN\\tIF(\\t\\tNOT ISBLANK(__VALUE_TO_COMPARE),\\t\\tDIVIDE(__VALUE_TO_COMPARE - __BASELINE_VALUE, __BASELINE_VALUE)\\t)","isHidden":false},{"name":"CY Current Month New Clients","expression":"CALCULATE(    SUM(\u0027New Clients\u0027[Financial Customer Point Value]),    \u0027New Clients\u0027[DTRB_PERF_RPT_MTH_TXT] = 'CURRENT',    \u0027New Clients\u0027[DTRB_PERF_RPT_YR_TXT] = 'CURRENT')","isHidden":false},{"name":"PYTD New Clients OLD","expression":"var py_start = CALCULATE(MIN(\u0027New Clients\u0027[Calendar Date]),FILTER(\u0027New Clients\u0027,\u0027New Clients\u0027[DTRB_PERF_RPT_YR_TXT]='Previous'))var cy_end = CALCULATE(MAX(\u0027New Clients\u0027[Calendar Date]),FILTER(\u0027New Clients\u0027,\u0027New Clients\u0027[DTRB_PERF_RPT_YR_TXT]='Current'))var py_end = DATE(YEAR(cy_end)-1,MONTH(cy_end),DAY(cy_end))RETURNCALCULATE(SUM(\u0027New Clients\u0027[Financial Customer Point Value]),  FILTER(\u0027New Clients\u0027, \u0027New Clients\u0027[Calendar Date] \u003c= py_end \u0026\u0026 \u0027New Clients\u0027[Calendar Date] \u003e= py_start))","isHidden":false},{"name":"YTD New Clients","expression":"var cy_start = CALCULATE(MIN(\u0027New Clients\u0027[Calendar Date]),ALLEXCEPT(\u0027New Clients\u0027,\u0027New Clients\u0027[DTRB_PERF_RPT_YR_TXT]),\u0027New Clients\u0027[DTRB_PERF_RPT_YR_TXT]='Current')var cy_end = CALCULATE(MAX(\u0027New Clients\u0027[Calendar Date]),ALLEXCEPT(\u0027New Clients\u0027,\u0027New Clients\u0027[DTRB_PERF_RPT_YR_TXT]),\u0027New Clients\u0027[DTRB_PERF_RPT_YR_TXT]='Current')RETURNCALCULATE(SUM(\u0027New Clients\u0027[Financial Customer Point Value]), \u0027New Clients\u0027, \u0027New Clients\u0027[Calendar Date] \u003c= cy_end \u0026\u0026 \u0027New Clients\u0027[Calendar Date] \u003e= cy_start)","isHidden":false},{"name":"PY2TD New Clients","expression":"var cy_start = CALCULATE(MIN(\u0027New Clients\u0027[Calendar Date]),ALLEXCEPT(\u0027New Clients\u0027,\u0027New Clients\u0027[DTRB_PERF_RPT_YR_TXT]),\u0027New Clients\u0027[DTRB_PERF_RPT_YR_TXT]='Current')var cy_end = CALCULATE(MAX(\u0027New Clients\u0027[Calendar Date]),ALLEXCEPT(\u0027New Clients\u0027,\u0027New Clients\u0027[DTRB_PERF_RPT_YR_TXT]),\u0027New Clients\u0027[DTRB_PERF_RPT_YR_TXT]='Current')var py2_start = date(YEAR(cy_start)-2,MONTH(cy_start),DAY(cy_start))var py2_end = DATE(YEAR(cy_end)-2,MONTH(cy_end),DAY(cy_end))RETURNCALCULATE(SUM(\u0027New Clients\u0027[Financial Customer Point Value]), \u0027New Clients\u0027, \u0027New Clients\u0027[Calendar Date] \u003c= py2_end \u0026\u0026 \u0027New Clients\u0027[Calendar Date] \u003e= py2_start)","isHidden":false},{"name":"CY PW1 (Full Wk) New Clients","expression":"var prev2wknbr = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR], DTRB_PERF_DATES[CAL_DAY_DT], today()) - 2returnCALCULATE(    SUM(\u0027New Clients\u0027[Financial Customer Point Value]),    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current',    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prev2wknbr)","isHidden":false},{"name":"PY New Clients","expression":"var py_start = CALCULATE(MIN(\u0027New Clients\u0027[Calendar Date]),ALLEXCEPT(\u0027New Clients\u0027,\u0027New Clients\u0027[DTRB_PERF_RPT_YR_TXT]),\u0027New Clients\u0027[DTRB_PERF_RPT_YR_TXT]='Previous')var py_end = CALCULATE(MAX(\u0027New Clients\u0027[Calendar Date]),ALLEXCEPT(\u0027New Clients\u0027,\u0027New Clients\u0027[DTRB_PERF_RPT_YR_TXT]),\u0027New Clients\u0027[DTRB_PERF_RPT_YR_TXT]='Previous')RETURNCALCULATE(SUM(\u0027New Clients\u0027[Financial Customer Point Value]), \u0027New Clients\u0027, \u0027New Clients\u0027[Calendar Date] \u003c= py_end \u0026\u0026 \u0027New Clients\u0027[Calendar Date] \u003e= py_start)","isHidden":false},{"name":"PY2 New Clients","expression":"var py_start = CALCULATE(MIN(\u0027New Clients\u0027[Calendar Date]),ALLEXCEPT(\u0027New Clients\u0027,\u0027New Clients\u0027[DTRB_PERF_RPT_YR_TXT]),\u0027New Clients\u0027[DTRB_PERF_RPT_YR_TXT]='Previous')var py_end = CALCULATE(MAX(\u0027New Clients\u0027[Calendar Date]),ALLEXCEPT(\u0027New Clients\u0027,\u0027New Clients\u0027[DTRB_PERF_RPT_YR_TXT]),\u0027New Clients\u0027[DTRB_PERF_RPT_YR_TXT]='Previous')var py2_start= date(year(py_start)-1,month(py_start),day(py_start))var py2_end= date(year(py_end)-1,month(py_end),day(py_end))RETURNCALCULATE(SUM(\u0027New Clients\u0027[Financial Customer Point Value]), \u0027New Clients\u0027, \u0027New Clients\u0027[Calendar Date] \u003c= py2_end \u0026\u0026 \u0027New Clients\u0027[Calendar Date] \u003e= py2_start)","isHidden":false},{"name":"PYTD New Clients","expression":"var py_start = CALCULATE(MIN(\u0027New Clients\u0027[Calendar Date]),ALLEXCEPT(\u0027New Clients\u0027,\u0027New Clients\u0027[DTRB_PERF_RPT_YR_TXT]),\u0027New Clients\u0027[DTRB_PERF_RPT_YR_TXT]='Previous')var cy_end = CALCULATE(MAX(\u0027New Clients\u0027[Calendar Date]),ALLEXCEPT(\u0027New Clients\u0027,\u0027New Clients\u0027[DTRB_PERF_RPT_YR_TXT]),\u0027New Clients\u0027[DTRB_PERF_RPT_YR_TXT]='Current')var py_end = DATE(YEAR(cy_end)-1,MONTH(cy_end),DAY(cy_end))RETURNCALCULATE(SUM(\u0027New Clients\u0027[Financial Customer Point Value]), \u0027New Clients\u0027, \u0027New Clients\u0027[Calendar Date] \u003c= py_end \u0026\u0026 \u0027New Clients\u0027[Calendar Date] \u003e= py_start)","isHidden":false},{"name":"CY PW2 (Full Wk) New Clients","expression":"var prev3wknbr = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR], DTRB_PERF_DATES[CAL_DAY_DT], today()) -3var date_3wk_ago = LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'Current') - 21var p3wk_end_date = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT],DTRB_PERF_DATES[CAL_DAY_DT],date_3wk_ago)returnCALCULATE(    SUM(\u0027New Clients\u0027[Financial Customer Point Value]),    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current',     DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prev3wknbr)        --DTRB_PERF_DATES[CAL_DAY_DT] \u003c= p3wk_end_date)","isHidden":false},{"name":"CY WoW %","expression":"DIVIDE(([CY PW1 (Full Wk) New Clients]-[CY PW2 (Full Wk) New Clients]),ABS([CY PW2 (Full Wk) New Clients]),blank())","isHidden":false},{"name":"4 Wk Total Week Index","expression":"Var max_week = CALCULATE(    MAX(\u0027New Clients\u0027[WeekIndex]) -1 )VAR start_week = max_week -3RETURNCALCULATE(              SUM(\u0027New Clients\u0027[Financial Customer Point Value]),               FILTER(\u0027New Clients\u0027,               \u0027New Clients\u0027[WeekIndex] \u003e= start_week              \u0026\u0026 \u0027New Clients\u0027[WeekIndex] \u003c= max_week))","isHidden":false},{"name":"PY PW1 (Full Wk) New Clients","expression":"var prev2wknbr = 52--LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR], DTRB_PERF_DATES[CAL_DAY_DT], today()) - 2--LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[CAL_DAY_DT],MAX(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT]))--MAX(\u0027New Clients\u0027[Calendar Date]))--LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR], DTRB_PERF_DATES[CAL_DAY_DT], today()) - 2returnCALCULATE(    SUM(\u0027New Clients\u0027[Financial Customer Point Value]),    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Previous',    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prev2wknbr)","isHidden":false},{"name":"PY PW1 v CY PW1 %","expression":"DIVIDE(([CY PW1 (Full Wk) New Clients]-[PY PW1 (Full Wk) New Clients]),abs([PY PW1 (Full Wk) New Clients]),blank())","isHidden":false},{"name":"4 Wk Avg","expression":"CALCULATE(DIVIDE(sum(\u0027New Clients\u0027[Financial Customer Point Value]),4),\u0027DTRB_PERF_DATES\u0027[Prior 4 FULL Weeks Flag] in {TRUE})","isHidden":false},{"name":"CY PW1 v 4Wk Avg","expression":"DIVIDE(([CY PW1 (Full Wk) New Clients]-[4 Wk Avg]),ABS([4 Wk Avg]),blank())","isHidden":false},{"name":"13 Wk Total Week Index","expression":"Var max_week = CALCULATE(    MAX(\u0027New Clients\u0027[WeekIndex]) -1 )VAR start_week = max_week -12RETURNCALCULATE(              SUM(\u0027New Clients\u0027[Financial Customer Point Value]),               FILTER(\u0027New Clients\u0027,               \u0027New Clients\u0027[WeekIndex] \u003e= start_week              \u0026\u0026 \u0027New Clients\u0027[WeekIndex] \u003c= max_week))","isHidden":false},{"name":"13 Wk Avg","expression":"CALCULATE(DIVIDE(sum(\u0027New Clients\u0027[Financial Customer Point Value]),13),\u0027DTRB_PERF_DATES\u0027[Prior 13 FULL Weeks Flag] in {TRUE})","isHidden":false},{"name":"CY PW1 v 13Wk Avg","expression":"DIVIDE(([CY PW1 (Full Wk) New Clients]-[13 Wk Avg]),ABS([13 Wk Avg]),blank())","isHidden":false},{"name":"52 Wk Total Week Index","expression":"Var max_week = CALCULATE(    MAX(\u0027New Clients\u0027[WeekIndex]) -1 )VAR start_week = max_week -51RETURNCALCULATE(              SUM(\u0027New Clients\u0027[Financial Customer Point Value]),               FILTER(\u0027New Clients\u0027,               \u0027New Clients\u0027[WeekIndex] \u003e= start_week              \u0026\u0026 \u0027New Clients\u0027[WeekIndex] \u003c= max_week))","isHidden":false},{"name":"52 Wk Avg","expression":"CALCULATE(DIVIDE(sum(\u0027New Clients\u0027[Financial Customer Point Value]),52),\u0027DTRB_PERF_DATES\u0027[Prior 52 FULL Weeks Flag] in {TRUE})","isHidden":false},{"name":"CY PW1 v 52Wk Avg","expression":"DIVIDE(([CY PW1 (Full Wk) New Clients]-[52 Wk Avg]),ABS([52 Wk Avg]),blank())","isHidden":false},{"name":"YTD New Clients - 2 Sundays Ago","expression":"calculate(sum(\u0027New Clients\u0027[Financial Customer Point Value]),DTRB_PERF_DATES[YTD Flag Two Sundays Ago] in {TRUE})","isHidden":false},{"name":"CALC TO DETELE - CY PW1 (Full Wk) New Clients","expression":"LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[CAL_DAY_DT],MAX(\u0027New Clients\u0027[Calendar Date]))","isHidden":false},{"name":"Need v 4Wk Avg - TAG","expression":"divide((\u0027New Clients\u0027[4 Wk Avg]-\u0027YTD_GOALS_DD\u0027[Weekly Need New Clients - Trends TAG]),\u0027YTD_GOALS_DD\u0027[Weekly Need New Clients - Trends TAG],blank())","isHidden":false},{"name":"YTD New Clients - Trends tabs","expression":"var cy_start = CALCULATE(MIN(\u0027New Clients\u0027[Calendar Date]),ALLEXCEPT(\u0027New Clients\u0027,\u0027New Clients\u0027[DTRB_PERF_RPT_YR_TXT]),\u0027New Clients\u0027[DTRB_PERF_RPT_YR_TXT]='Current')var prev2wknbr = 52--LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR], DTRB_PERF_DATES[CAL_DAY_DT], today()) - 2RETURNCALCULATE(    SUM(\u0027New Clients\u0027[Financial Customer Point Value]),    \u0027New Clients\u0027[Calendar Date] \u003e= cy_start,    \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_WK_NBR] \u003c= prev2wknbr)","isHidden":false},{"name":"PYTD New Clients - Trends tabs","expression":"var py_start = CALCULATE(MIN(\u0027New Clients\u0027[Calendar Date]),ALLEXCEPT(\u0027New Clients\u0027,\u0027New Clients\u0027[DTRB_PERF_RPT_YR_TXT]),\u0027New Clients\u0027[DTRB_PERF_RPT_YR_TXT] = 'Previous')var prev2wknbr = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR], DTRB_PERF_DATES[CAL_DAY_DT], today()) - 2RETURNCALCULATE(    SUM(\u0027New Clients\u0027[Financial Customer Point Value]),    \u0027New Clients\u0027[Calendar Date] \u003e= py_start,    \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_WK_NBR] \u003c= prev2wknbr,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Previous')","isHidden":false},{"name":"YOY Change - Trends tabs","expression":"VAR __BASELINE_VALUE = [PYTD New Clients - Trends tabs]VAR __VALUE_TO_COMPARE = [YTD New Clients - Trends tabs]RETURN\\tIF(\\t\\tNOT ISBLANK(__VALUE_TO_COMPARE),\\t\\tDIVIDE(__VALUE_TO_COMPARE - __BASELINE_VALUE, __BASELINE_VALUE)\\t)","isHidden":false},{"name":"Need v 4Wk Avg - Market","expression":"divide((\u0027New Clients\u0027[4 Wk Avg]-\u0027YTD_GOALS_DD\u0027[Weekly Need New Clients - Trends Market]),\u0027YTD_GOALS_DD\u0027[Weekly Need New Clients - Trends Market],blank())","isHidden":false}],"source":[{"expression":"let    Source = DB2.Database('podwh021:50000', 'podwh021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT IA_DATES_ITRL.DT_SK,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.CTRC_VRSN_NBR,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.WRTG_AGT_VRSN_NBR,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_STS_CDE,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.CUST_AGE,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.AGE_CLAS_CDE,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.AGE_CLAS_DSCR,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_VLU,#(lf)       CNF_CUSTOMER_DIM_CFDL.CUST_ID_NBR,#(lf)       CNF_CUSTOMER_DIM_CFDL.CUST_LGAL_FMT_NM, #(lf)       CNF_CUSTOMER_DIM_CFDL.CUST_BRTH_DT,#(lf)       CNF_CUSTOMER_DIM_CFDL.MBR_TYP_CDE,#(lf)       CNF_CUSTOMER_DIM_CFDL.MBR_TYP_DSCR,#(lf)       CNF_CUSTOMER_DIM_CFDL.RSDL_ST_CDE,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.CTRC_ISS_DT, #(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L5_PLOB_SGRP_CDE,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L5_PLOB_SGRP_DSCR,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L4_PLOB_GRP_CDE,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L4_PLOB_GRP_DSCR,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L3_PROD_LOB_CDE,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L3_PROD_LOB_DSCR,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L2_PROD_CHAR_CDE,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L2_PROD_CHAR_DSCR,#(lf)       AGT_DIM_CURR_CFDL.PARY_DSPL_2_NM,#(lf)       AGT_DIM_CURR_CFDL.FRST_NM,#(lf)       AGT_DIM_CURR_CFDL.MDDL_NM,#(lf)       AGT_DIM_CURR_CFDL.LST_NM,#(lf)       AGT_DIM_CURR_CFDL.ADJ_SVC_DT,#(lf)       AGT_DIM_CURR_CFDL.EMP_ID,#(lf)       AGT_DIM_CURR_CFDL.EMP_STS_TYP_CDE,#(lf)       AGT_DIM_CURR_CFDL.EMP_STS_TYP_DSCR,#(lf)       AGT_DIM_CURR_CFDL.JOB_TYP_CDE,#(lf)       AGT_DIM_CURR_CFDL.JOB_TYP_DSCR,#(lf)       AGT_DIM_CURR_CFDL.CURR_ROW_IND,#(lf)       IA_DATES_ITRL.CAL_DAY_DT,#(lf)       IA_DATES_ITRL.CAL_MTH_NM,#(lf)       IA_DATES_ITRL.CAL_MTH_STRT_DT,#(lf)       IA_DATES_ITRL.CAL_MTH_END_DT,#(lf)       IA_DATES_ITRL.CAL_YR_QTR_NBR,#(lf)       IA_DATES_ITRL.CAL_QTR_NM,#(lf)       IA_DATES_ITRL.CAL_WK_NM,#(lf)       FIN_CUST_ELIG_DIM_CFDL.FIN_CUST_PNT_RSN_CDE,#(lf)       FIN_CUST_ELIG_DIM_CFDL.FIN_CUST_PNT_RSN_DSCR,#(lf)       FIN_CUST_ELIG_DIM_CFDL.CTRC_RLTN_TYP_CDE,#(lf)       FIN_CUST_ELIG_DIM_CFDL.CTRC_RLTN_TYP_DSCR,#(lf)       CASE#(lf)          WHEN (CUST_AGE \u003e= 0) AND (CUST_AGE \u003c= 15) THEN \u00270-15\u0027#(lf)          WHEN (CUST_AGE \u003e= 16) AND (CUST_AGE \u003c= 25) THEN \u002716-25\u0027#(lf)          WHEN (CUST_AGE \u003e= 26) AND (CUST_AGE \u003c= 35) THEN \u002726-35\u0027#(lf)          WHEN (CUST_AGE \u003e= 36) AND (CUST_AGE \u003c= 45) THEN \u002736-45\u0027#(lf)          WHEN (CUST_AGE \u003e= 46) AND (CUST_AGE \u003c= 55) THEN \u002746-55\u0027#(lf)          WHEN (CUST_AGE \u003e= 56) AND (CUST_AGE \u003c= 65) THEN \u002756-65\u0027#(lf)          WHEN (CUST_AGE \u003e= 66) AND (CUST_AGE \u003c= 75) THEN \u002766-75\u0027#(lf)          WHEN CUST_AGE \u003e 75 THEN \u002776+\u0027#(lf)       END#(lf)          AS Member_Age_Group,#(lf)       integer (floor ( (CURRENT DATE - CUST_BRTH_DT) / 10000)) AS Member_Age,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_WK_END_DT,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_WK_NBR,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_YR_NBR,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_YR_WK_NBR,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_WK_TXT,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_YR_TXT,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_DAY_TXT,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_MTH_TXT,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_QTR_TXT,#(lf)       SALE_HIER_DIM.SALE_HIER_ID,#(lf)       SALE_HIER_DIM.EFF_BEG_TMSP,#(lf)       SALE_HIER_DIM.EFF_END_TMSP,#(lf)       SALE_HIER_DIM.CURR_ROW_IND,#(lf)       SALE_HIER_DIM.PRTR_NM,#(lf)       SALE_HIER_DIM.MANP_NM,#(lf)       SALE_HIER_DIM.ORZN_ZONE_CDE,#(lf)       SALE_HIER_DIM.ORZN_ZONE_DSCR,#(lf)       (LEFT(SALE_HIER_DIM.ORZN_ZONE_CDE,4)) as ORZN_DEPT_CDE,#(lf)       SALE_HIER_DIM.ORZN_DEPT_DSCR,#(lf)       SALE_HIER_DIM.ORZN_DIV_CDE,#(lf)       SALE_HIER_DIM.ORZN_DIV_DSCR,#(lf)       SALE_HIER_DIM.ORZN_SUB_DEPT_CDE,#(lf)       SALE_HIER_DIM.SALE_HIER_DIM_SK#(lf)#(lf)  FROM ((((((COMMON.IA_DATES_ITRL IA_DATES_ITRL#(lf)             INNER JOIN COMMON.DTRB_PERF_DATES DTRB_PERF_DATES#(lf)                ON (IA_DATES_ITRL.DT_SK = DTRB_PERF_DATES.DT_SK))#(lf)            LEFT OUTER JOIN#(lf)            SALES.TF_FIN_CUST_EVT_FCT_CFDL TF_FIN_CUST_EVT_FCT_CFDL#(lf)               ON (IA_DATES_ITRL.DT_SK =#(lf)                      TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_CRNG_DT_SK))#(lf)           RIGHT OUTER JOIN HUMAN_RESOURCES.SALE_HIER_DIM SALE_HIER_DIM#(lf)              ON (SALE_HIER_DIM.SALE_HIER_DIM_SK =#(lf)                     TF_FIN_CUST_EVT_FCT_CFDL.SLHR_DIM_CURR_CRNG_AGT_SK))#(lf)          LEFT OUTER JOIN MEMBER.CNF_CUSTOMER_DIM_CFDL CNF_CUSTOMER_DIM_CFDL#(lf)             ON (CNF_CUSTOMER_DIM_CFDL.CUST_SK =#(lf)                    TF_FIN_CUST_EVT_FCT_CFDL.CUST_SK))#(lf)         LEFT OUTER JOIN HUMAN_RESOURCES.AGT_DIM_CURR_CFDL AGT_DIM_CURR_CFDL#(lf)            ON (AGT_DIM_CURR_CFDL.AGT_DIM_SK =#(lf)                   TF_FIN_CUST_EVT_FCT_CFDL.CRNG_AGT_SK))#(lf)        RIGHT OUTER JOIN SALES.FIN_CUST_ELIG_DIM_CFDL FIN_CUST_ELIG_DIM_CFDL#(lf)           ON (FIN_CUST_ELIG_DIM_CFDL.FIN_CUST_PNT_ELIG_DIM_SK =#(lf)                  TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_ELIG_DIM_SK))#(lf)       LEFT OUTER JOIN#(lf)       CONTRACT.CNF_CONTRACT_DIM_DTL_CFDL CNF_CONTRACT_DIM_DTL_CFDL#(lf)          ON     (CNF_CONTRACT_DIM_DTL_CFDL.CTRC_SK =#(lf)                     TF_FIN_CUST_EVT_FCT_CFDL.CTRC_SK)#(lf)            and   (CNF_CONTRACT_DIM_DTL_CFDL.VRSN_NBR =#(lf)                     TF_FIN_CUST_EVT_FCT_CFDL.CTRC_VRSN_NBR)#(lf)WHERE     (AGT_DIM_CURR_CFDL.CURR_ROW_IND = \u0027Y\u0027)#(lf)     #(lf)       AND (SALE_HIER_DIM.CURR_ROW_IND = \u0027Y\u0027)#(lf)       AND sale_hier_dim.ORZN_DEPT_CDE in (\u00270001\u0027,\u00270115\u0027,\u00270190\u0027,\u00270283\u0027,\u00270291\u0027,\u00270361\u0027,\u00270383\u0027,\u00270384\u0027,\u00270435\u0027,\u00270525\u0027,\u00270716\u0027)#(lf)       AND DTRB_PERF_DATES.DTRB_PERF_RPT_YR_NBR in (\u00272022\u0027,\u00272023\u0027,\u00272024\u0027)#(lf)       AND TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_VLU \u003c\u003e 0#(lf)      #(lf)']),    #'Renamed Columns' = Table.RenameColumns(Source,{{'ADJ_SVC_DT', 'Adjusted Service Date'}, {'AGE_CLAS_CDE', 'Age Class Code'}, {'AGE_CLAS_DSCR', 'Age Class Description'}, {'CTRC_RLTN_TYP_CDE', 'Financial Customer Point Relationship Code'}, {'CTRC_RLTN_TYP_DSCR', 'Financial Customer Point Relationship Description'}, {'CTRC_VRSN_NBR', 'Contract Version Number'}, {'CUST_AGE', 'Financial Customer Age'}, {'MEMBER_AGE', 'Member Age'}, {'EFF_BEG_TMSP', 'Effective Begin Timestamp'}, {'EFF_END_TMSP', 'Effective End Timestamp'}, {'EMP_ID', 'Employee Identifier'}, {'EMP_STS_TYP_CDE', 'Employee Status Type Code'}, {'EMP_STS_TYP_DSCR', 'Employee Status Type Description'}, {'FIN_CUST_PNT_RSN_CDE', 'Financial Customer Point Reason Code'}, {'FIN_CUST_PNT_RSN_DSCR', 'Financial Customer Point Reason Description'}, {'FIN_CUST_PNT_STS_CDE', 'Financial Customer Point Status Code'}, {'FIN_CUST_PNT_VLU', 'Financial Customer Point Value'}, {'FRST_NM', 'Employee First Name'}, {'JOB_TYP_CDE', 'Job Type Code'}, {'JOB_TYP_DSCR', 'Job Type Description'}, {'L2_PROD_CHAR_CDE', 'Level 2 Product Character Code'}, {'L2_PROD_CHAR_DSCR', 'Level 2 Product Character Description'}, {'L3_PROD_LOB_CDE', 'Level 3 Product Line Of Business Code'}, {'L3_PROD_LOB_DSCR', 'Level 3 Product Line Of Business Description'}, {'L4_PLOB_GRP_CDE', 'Level 4 Product Line Of Business Group Code'}, {'L4_PLOB_GRP_DSCR', 'Level 4 Product Line Of Business Group Description'}, {'L5_PLOB_SGRP_CDE', 'Level 5 Product Line Of Business Subgroup Code'}, {'L5_PLOB_SGRP_DSCR', 'Level 5 Product Line Of Business Subgroup Description'}, {'LST_NM', 'Employee Last Name'}, {'MANP_NM', 'Managing Partner Name'}, {'MBR_TYP_CDE', 'Member Type Code'}, {'MBR_TYP_DSCR', 'Member Type Description'}, {'ORZN_DEPT_CDE', 'Organization Department Code'}, {'ORZN_DEPT_DSCR', 'Organization Department Description'}, {'ORZN_DIV_CDE', 'Organization Division Code'}, {'ORZN_DIV_DSCR', 'Organization Division Description'}, {'ORZN_ZONE_CDE', 'Organization Zone Code'}, {'ORZN_ZONE_DSCR', 'Organization Zone Description'}, {'PARY_DSPL_2_NM', 'Assigned FR'}, {'PRTR_NM', 'Partner Name'}, {'RSDL_ST_CDE', 'Residential State Code'}, {'SALE_HIER_DIM_SK', 'Sales Hierarchy Dimension Surrogate Key'}, {'SALE_HIER_ID', 'Sales Hierarchy Identifier'}, {'WRTG_AGT_VRSN_NBR', 'Writing Agent Version Number'}, {'MDDL_NM', 'Employee Middle Name'}, {'CAL_DAY_DT', 'Calendar Date'}, {'CAL_MTH_END_DT', 'Calendar Month End Date'}, {'CAL_MTH_STRT_DT', 'Calendar Month Start Date'}, {'DT_SK', 'Date Surrogate Key'}, {'CURR_ROW_IND', 'Current Row Indicator Sales Hierarchy'}, {'CURR_ROW_IND2', 'Agent Current Row Indicator'}, {'MEMBER_AGE_GROUP', 'Financial Customer Age Group'}, {'DTRB_PERF_RPT_WK_END_DT', 'Distribution Performance Reporting Week End Date'}, {'DTRB_PERF_RPT_WK_NBR', 'Distribution Performance Reporting Week Number'}, {'DTRB_PERF_RPT_YR_NBR', 'Distribution Performance Reporting Year Number'}, {'DTRB_PERF_RPT_YR_WK_NBR', 'Distribution Performance Reporting Year Week Number'}}),    #'Removed Columns' = Table.RemoveColumns(#'Renamed Columns',{    'CUST_BRTH_DT', 'CAL_MTH_NM', 'CAL_QTR_NM', 'CAL_WK_NM', 'CAL_YR_QTR_NBR'}),    #'Renamed Columns1' = Table.RenameColumns(#'Removed Columns',{{'Organization Department Code', 'RFO'}, {'Organization Zone Code', 'Market'}, {'Employee Identifier', 'TS ID'}, {'ORZN_SUB_DEPT_CDE', 'MVP'}})in    #'Renamed Columns1'"}]},{"name":"DTRB_PERF_DATES","isHidden":false,"storageMode":"Import","columns":[{"name":"DT_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CAL_DAY_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_END_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_WK_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"SRC_SYS_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CRET_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"LST_UPDT_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"CRET_USER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LST_UPDT_USER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_DAY_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_MTH_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_QTR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Prior 2 week flag new","dataType":"String","isHidden":false,"expression":"LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR], DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR], today())","columnType":"Calculated"},{"name":"Week number of 2 weeks ago","dataType":"String","isHidden":false,"expression":"LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR], DTRB_PERF_DATES[CAL_DAY_DT], today()) - 2","columnType":"Calculated"},{"name":"WeekIndex NEW","dataType":"String","isHidden":false,"expression":"Var year_num = (YEAR(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT])-YEAR(MIN(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT])))+1var year_diff = (YEAR(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT])-YEAR(MIN(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT])))Var week_num = WEEKNUM(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT])RETURN(year_diff*52)+week_num","columnType":"Calculated"},{"name":"Prior 4 FULL Weeks Flag","dataType":"String","isHidden":false,"expression":"if(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT] \u003e= LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT], today())-35\u0026\u0026 DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT] \u003c= LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT], today())-14, True, False)","columnType":"Calculated"},{"name":"Prior 13 FULL Weeks Flag","dataType":"String","isHidden":false,"expression":"if(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT] \u003e= LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT], today())-98\u0026\u0026 DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT] \u003c= LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT], today())-14, True, False)","columnType":"Calculated"},{"name":"Prior 52 FULL Weeks Flag","dataType":"String","isHidden":false,"expression":"if(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT] \u003e= LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT], today())-371\u0026\u0026 DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT] \u003c= LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT], today())-14, True, False)","columnType":"Calculated"},{"name":"Two Sundays Ago","dataType":"String","isHidden":false,"expression":"LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT], today() - 14)","columnType":"Calculated"},{"name":"YTD Flag Two Sundays Ago","dataType":"String","isHidden":false,"expression":"if(and(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT] \u003c= DTRB_PERF_DATES[Two Sundays Ago], DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current'), True, False)","columnType":"Calculated"},{"name":"DETELE max new client date","dataType":"String","isHidden":false,"expression":"LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'Current')--var max_new_client_date = today_date - 6","columnType":"Calculated"}],"measures":[{"name":"NEW - DELETE MAX NC DATE","expression":"var today_date = LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'Current') - 14var new_client_end_date = today_date - 6returncalculate(LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT],DTRB_PERF_DATES[CAL_DAY_DT],today_date))--prev2wknbr = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[CAL_DAY_DT],max(DTRB_PERF_DATES[CAL_DAY_DT]))--MAX(\u0027New Clients\u0027[Calendar Date])))","isHidden":false}],"source":[{"expression":"let    Source = DB2.Database('podwh021:50000', 'podwh021', [HierarchicalNavigation=true, Implementation='Microsoft']),    COMMON = Source{[Schema='COMMON']}[Data],    DTRB_PERF_DATES1 = COMMON{[Name='DTRB_PERF_DATES']}[Data]in    DTRB_PERF_DATES1"}]},{"name":"Producer","isHidden":false,"storageMode":"Import","columns":[{"name":"SALE_HIER_DIM_SK","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"EMP_DIM_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SALE_HIER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ZONE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RPT_TO_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ADJ_SVC_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TENURE","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TENURE_GROUP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FIN_CSLT_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"WLTH_ADVR_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"GNDR_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LST_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FRST_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MDDL_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO Market","dataType":"String","isHidden":false,"expression":"Producer[ORZN_SUB_DEPT_CDE] \u0026'-'\u0026 Producer[ZONE]","columnType":"Calculated"},{"name":"Division","dataType":"String","isHidden":false,"expression":"if(Producer[RFO] IN {'0283', '0365', '0435', '0496', '0810'}, 'Central', if(Producer[RFO] IN {'0115', '0165', '0190', '0240', '0361', '0384'}, 'East', if(Producer[RFO] IN {'0291', '0410', '0475', '0525', '0529'}, 'West', if(Producer[RFO] = '0383', 'TFGT',if(Producer[RFO] = '0716', 'TAN',if(Producer[RFO] = '0001', 'Home Office'))))))","columnType":"Calculated"},{"name":"Region","dataType":"String","isHidden":false,"expression":"IF(Producer[RFO] IN {'0361', '0365', '0435', '0496'}, 'Established', IF(Producer[RFO] IN {'0165', '0240', '0283', '0291', '0410', '0525'}, 'Growth', IF(Producer[RFO] IN {'0115', '0190', '0384', '0475', '0529'}, 'Invest', IF(Producer[RFO] = '0383', 'TFGT',IF(Producer[RFO] = '0716', 'TAN',IF(Producer[RFO] = '0810', 'Colorado Springs',IF(producer [RFO] = '0001', 'Home Office')))))))","columnType":"Calculated"},{"name":"Column - DO NOT DELETE (used in join)","dataType":"String","isHidden":false,"expression":"Producer[EMP_ID]\u0026Producer[RFO]","columnType":"Calculated"},{"name":"ORZN_SUB_DEPT_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_SUB_DEPT_DSCR","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = PowerBI.Dataflows(null),    #'4ed85d6e-e750-4d01-892f-78fc79993e0c' = Source{[workspaceId='4ed85d6e-e750-4d01-892f-78fc79993e0c']}[Data],    #'0b905589-2450-4f3c-9fd8-f4902e4223de' = #'4ed85d6e-e750-4d01-892f-78fc79993e0c'{[dataflowId='0b905589-2450-4f3c-9fd8-f4902e4223de']}[Data],    Producer1 = #'0b905589-2450-4f3c-9fd8-f4902e4223de'{[entity='Producer']}[Data],    #'Filtered Rows' = Table.SelectRows(Producer1, each ([RFO] \u003c\u003e '0383      ' and [RFO] \u003c\u003e '0716      ' and [RFO] \u003c\u003e '0997      '))in    #'Filtered Rows'"}]},{"name":"Hierarchy, Delegation, AD","isHidden":false,"storageMode":"Import","columns":[{"name":"EMPLOYEE_TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Department Number","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Department Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Count","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"REPORT_TO_EMAIL","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = PowerBI.Dataflows(null),    #'f7efdfeb-73c5-4a9b-ab78-f9370190eded' = Source{[workspaceId='f7efdfeb-73c5-4a9b-ab78-f9370190eded']}[Data],    #'a9b06e96-a67b-4f28-b939-3e1ca1047bd2' = #'f7efdfeb-73c5-4a9b-ab78-f9370190eded'{[dataflowId='a9b06e96-a67b-4f28-b939-3e1ca1047bd2']}[Data],    #'Hierarchy, Delegation, AD1' = #'a9b06e96-a67b-4f28-b939-3e1ca1047bd2'{[entity='Hierarchy, Delegation, AD']}[Data],    #'Grouped Rows' = Table.Group(#'Hierarchy, Delegation, AD1', {'REPORT_TO_EMAIL', 'Department Name', 'Department Number', 'EMPLOYEE_TSID'}, {{'Count', each Table.RowCount(_), Int64.Type}})in    #'Grouped Rows'"}]},{"name":"YTD_GOALS_DD","isHidden":false,"storageMode":"Import","columns":[{"name":"Level","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Metric","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Date_of_Goal","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Goal_Amount","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[{"name":"YE NC Goal","expression":"var FilterChoice = if(ISFILTERED(\u0027Market_Leaders\u0027[Market]),SELECTEDVALUE(\u0027New Clients\u0027[Market]),                   if(ISFILTERED(\u0027RFO_Market\u0027[Advisor Group]),SELECTEDVALUE(\u0027New Clients\u0027[RFO]),                   if(ISFILTERED(\u0027New Clients\u0027[Division]),SELECTEDVALUE(\u0027New Clients\u0027[Division]),                   if(ISFILTERED(\u0027New Clients\u0027[Region]),SELECTEDVALUE(\u0027New Clients\u0027[Region]),                   if(ISFILTERED(\u0027New Clients\u0027[Channel]),SELECTEDVALUE(\u0027New Clients\u0027[Channel]))))))var perfYear = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR],DTRB_PERF_DATES[CAL_DAY_DT],MAX(\u0027New Clients\u0027[Calendar Date]))--LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR],DTRB_PERF_DATES[CAL_DAY_DT],today())var maxdayperfyear = CALCULATE(max(DTRB_PERF_DATES[CAL_DAY_DT]),DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR] = perfYear)returnif(isfiltered(\u0027Market_Leaders\u0027[Market]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'New Clients (NC)', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear),if(FilterChoice = 'TFGT',CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'New Client', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'NFC-FieldReporting', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear)))","isHidden":false},{"name":"YTD NC Goal","expression":"var FilterChoice = if(ISFILTERED(\u0027Market_Leaders\u0027[Market]),SELECTEDVALUE(\u0027New Clients\u0027[Market]),                   if(ISFILTERED(\u0027RFO_Market\u0027[Advisor Group]),SELECTEDVALUE(\u0027New Clients\u0027[RFO]),                   if(ISFILTERED(\u0027New Clients\u0027[Division]),SELECTEDVALUE(\u0027New Clients\u0027[Division]),                   if(ISFILTERED(\u0027New Clients\u0027[Region]),SELECTEDVALUE(\u0027New Clients\u0027[Region]),                   if(ISFILTERED(\u0027New Clients\u0027[Channel]),SELECTEDVALUE(\u0027New Clients\u0027[Channel]))))))                  var cy_end = CALCULATE(MAX(\u0027New Clients\u0027[Calendar Date]),ALLEXCEPT(\u0027New Clients\u0027,\u0027New Clients\u0027[DTRB_PERF_RPT_YR_TXT]),\u0027New Clients\u0027[DTRB_PERF_RPT_YR_TXT]='Current')                   returnif(isfiltered(\u0027Market_Leaders\u0027[Market]), CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'New Clients (NC)', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = cy_end),if(FilterChoice = 'TFGT',CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'New Client', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = cy_end),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'NFC-FieldReporting', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = cy_end)))","isHidden":false},{"name":"% NC YTD","expression":"iferror(DIVIDE(\u0027New Clients\u0027[YTD New Clients],YTD_GOALS_DD[YTD NC Goal]),'n/a')","isHidden":false},{"name":"Weekly Need New Clients - Trends TAG","expression":"var WeeksRemaining = calculate(52-LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR],DTRB_PERF_DATES[CAL_DAY_DT],max(\u0027New Clients\u0027[Calendar Date]))) + 1var weekly_need = divide(\u0027YTD_GOALS_DD\u0027[YE NC Goal - TAG Trends tab]-\u0027New Clients\u0027[YTD New Clients - Trends tabs],WeeksRemaining)return    if(ISBLANK([Weekly NC Goal - TAG]),blank(), weekly_need)    --divide(\u0027YTD_GOALS_DD\u0027[YE NC Goal]-\u0027New Clients\u0027[YTD New Clients - 2 Sundays Ago],WeeksRemaining)","isHidden":false},{"name":"Weekly NC Goal - TAG","expression":"divide(YTD_GOALS_DD[YE NC Goal - TAG Trends tab], 52, blank())","isHidden":false},{"name":"YE NC Goal - TAG Trends tab","expression":"var Selection = SELECTEDVALUE(\u0027New Clients\u0027[RFO])--FilterChoice = if(ISFILTERED(\u0027New Clients\u0027[Market]),SELECTEDVALUE(\u0027New Clients\u0027[Market]),                   --if(ISFILTERED(\u0027New Clients\u0027[RFO]),SELECTEDVALUE(\u0027New Clients\u0027[RFO]),                   --if(ISFILTERED(\u0027New Clients\u0027[Division]),SELECTEDVALUE(\u0027New Clients\u0027[Division]),                   --if(ISFILTERED(\u0027New Clients\u0027[Region]),SELECTEDVALUE(\u0027New Clients\u0027[Region]),                   --if(ISFILTERED(\u0027New Clients\u0027[Channel]),SELECTEDVALUE(\u0027New Clients\u0027[Channel]))))))var perfYear = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR],DTRB_PERF_DATES[CAL_DAY_DT],MAX(\u0027New Clients\u0027[Calendar Date]))--LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR],DTRB_PERF_DATES[CAL_DAY_DT],today())var maxdayperfyear = CALCULATE(max(DTRB_PERF_DATES[CAL_DAY_DT]),DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR] = perfYear)return--if(isfiltered(\u0027New Clients\u0027[Market]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'New Clients (NC)', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear),--if(FilterChoice = 'TFGT',--CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'New Client', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'NFC-FieldReporting', YTD_GOALS_DD[Level] = Selection, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear)","isHidden":false},{"name":"YE NC Goal - Market Trends tab","expression":"var Selection = SELECTEDVALUE(\u0027New Clients\u0027[Market])--FilterChoice = if(ISFILTERED(\u0027New Clients\u0027[Market]),SELECTEDVALUE(\u0027New Clients\u0027[Market]),                   --if(ISFILTERED(\u0027New Clients\u0027[RFO]),SELECTEDVALUE(\u0027New Clients\u0027[RFO]),                   --if(ISFILTERED(\u0027New Clients\u0027[Division]),SELECTEDVALUE(\u0027New Clients\u0027[Division]),                   --if(ISFILTERED(\u0027New Clients\u0027[Region]),SELECTEDVALUE(\u0027New Clients\u0027[Region]),                   --if(ISFILTERED(\u0027New Clients\u0027[Channel]),SELECTEDVALUE(\u0027New Clients\u0027[Channel]))))))var perfYear = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR],DTRB_PERF_DATES[CAL_DAY_DT],MAX(\u0027New Clients\u0027[Calendar Date]))--LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR],DTRB_PERF_DATES[CAL_DAY_DT],today())var maxdayperfyear = CALCULATE(max(DTRB_PERF_DATES[CAL_DAY_DT]),DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR] = perfYear)return--if(isfiltered(\u0027New Clients\u0027[Market]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'New Clients (NC)', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear),--if(FilterChoice = 'TFGT',--CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'New Client', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'New Clients (NC)', YTD_GOALS_DD[Level] = Selection, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear)","isHidden":false},{"name":"Weekly Need New Clients - Trends Market","expression":"var WeeksRemaining = calculate(52-LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR],DTRB_PERF_DATES[CAL_DAY_DT],max(\u0027New Clients\u0027[Calendar Date]))) + 1var weekly_need = divide(\u0027YTD_GOALS_DD\u0027[YE NC Goal - Market Trends tab]-\u0027New Clients\u0027[YTD New Clients - Trends tabs],WeeksRemaining)return    if(ISBLANK([Weekly NC Goal - Market]),blank(), weekly_need)    --divide(\u0027YTD_GOALS_DD\u0027[YE NC Goal]-\u0027New Clients\u0027[YTD New Clients - 2 Sundays Ago],WeeksRemaining)","isHidden":false},{"name":"Weekly NC Goal - Market","expression":"divide(YTD_GOALS_DD[YE NC Goal - Market Trends tab], 52, blank())","isHidden":false}],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////VSSHR//SHARED//Public//DI and BI//Distribution Dashboard//YTD_GOALS_DD.csv'),[Delimiter=',', Columns=4, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Level', type text}, {'Metric', type text}, {'Date_of_Goal', type date}, {'Goal_Amount', type number}}),    #'Filtered Rows' = Table.SelectRows(#'Changed Type', each ([Metric] = 'New Client' or [Metric] = 'New Clients (NC)' or [Metric] = 'NFC-FieldReporting'))in    #'Filtered Rows'"}]},{"name":"RFO_NM","isHidden":false,"storageMode":"Import","columns":[{"name":"RFO_CODE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"NM","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Sql.Database('dbedwdwprd', 'EnterpriseDataMart', [Query='SELECT DISTINCT#(lf)       [Department Identifier] RFO_CODE#(lf)      ,[Department Name] RFO_NM#(lf)      ,concat(trim([Department Identifier]),\u0027-\u0027,[Department Name]) as NM#(lf)#(lf) #(lf)#(lf)  FROM [EnterpriseDataMart].[DM_01].[Organization Dimension] #(lf)  where [Department Identifier] in (\u00270283\u0027, \u00270435\u0027,\u00270115\u0027, \u00270190\u0027, #(lf)                \u00270361\u0027, \u00270384\u0027,\u00270291\u0027, \u00270525\u0027,\u00270001\u0027,\u00270383\u0027,\u00270716\u0027)#(lf)        and [Current Row Indicator] = \u0027Y\u0027#(lf)        and [Effective Begin Date] \u003e \u00271/1/2019\u0027#(lf)        and [Effective End Date] = \u002712/31/9999\u0027'])in    Source"}]},{"name":"MVPs","isHidden":false,"storageMode":"Import","columns":[{"name":"RFO_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_DEPT_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_STS_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TRMN_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MARKET_LEADERS","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP","dataType":"String","isHidden":false,"expression":"MVPs[MVP_ID] \u0026 '-' \u0026 MVPs[MARKET_LEADERS]","columnType":"Calculated"}],"measures":[],"source":[{"expression":"let    Source = DB2.Database('podwh021:50000', 'podwh021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT DISTINCT#(lf)t1.ORZN_DEPT_CDE as RFO_CDE,#(lf)--t1.ORZN_ZONE_CDE as RFO_ZONE_NM,#(lf)t1.ORZN_SUB_DEPT_CDE as MVP_ID,#(lf)--(SUBSTRING(t1.ORZN_ZONE_CDE,6,5)) AS Market_ID,#(lf)t3.ORZN_DEPT_DSCR,#(lf)t3.EMP_ID,#(lf)t3.EMP_STS_TYP_CDE,#(lf)t3.trmn_dt,#(lf)t3.JOB_TYP_CDE,#(lf)t3.JOB_TYP_DSCR,#(lf)t3.EMP_NM,#(lf)case when t3.emp_nm is null then \u0027Vacant\u0027 Else t3.emp_nm end as market_leaders#(lf)FROM SEMANTIC.SALES_HIERARCHY_DIMENSION t1#(lf)left join#(lf)(#(lf)SELECT DISTINCT#(lf)T1.SALE_HIER_ID,#(lf)t1.orzn_zone_cde,#(lf)t1.orzn_dept_dscr,#(lf)t1.orzn_sub_dept_cde,#(lf)t2.orzn_dept_cde,#(lf)t2.EMP_ID,#(lf)t2.EMP_STS_TYP_CDE,#(lf)t2.trmn_dt,#(lf)t2.JOB_TYP_CDE,#(lf)t2.JOB_TYP_DSCR,#(lf)t2.EMP_NM#(lf)FROM#(lf)SEMANTIC.SALES_HIERARCHY_DIMENSION t1#(lf)left JOIN HUMAN_RESOURCES.CNF_EMP_DIM_DTL_CURR_CFDL t2 ON T1.SALE_HIER_ID = T2.emp_id#(lf)where t1.CURR_ROW_IND = \u0027Y\u0027#(lf)and t2.emp_sts_typ_cde in (\u0027A\u0027)#(lf)and t1.EFF_END_TMSP is null#(lf)AND T2.CURR_ROW_IND = \u0027Y\u0027#(lf)and t1.EFF_END_TMSP is null#(lf)and t2.JOB_TYP_CDE IN (\u0027001001\u0027)#(lf))#(lf)t3#(lf)on t1.orzn_sub_dept_cde = t3.orzn_sub_dept_cde#(lf)where t1.CURR_ROW_IND = \u0027Y\u0027#(lf)and t1.eff_end_tmsp is null#(lf)--and t1.rfo_zone_sts_cde in (\u0027A\u0027)#(lf)--and t3.EMP_STS_TYP_CDE = \u0027A\u0027#(lf)--and substring(t1.orzn_zone_cde,6,2) \u003c\u003e \u002700\u0027#(lf)and t1.orzn_zone_cde \u003c\u003e \u0027UKWN\u0027#(lf)order BY t1.ORZN_SUB_DEPT_CDE;#(lf)']),    #'Filtered Rows' = Table.SelectRows(Source, each ([RFO_CDE] = '0001      ' or [RFO_CDE] = '0115      ' or [RFO_CDE] = '0190      ' or [RFO_CDE] = '0283      ' or [RFO_CDE] = '0291      ' or [RFO_CDE] = '0361      ' or [RFO_CDE] = '0383      ' or [RFO_CDE] = '0384      ' or [RFO_CDE] = '0435      ' or [RFO_CDE] = '0525      ' or [RFO_CDE] = '0716      ') and ([MVP_ID] \u003c\u003e '          ' and [MVP_ID] \u003c\u003e '0529-00   '))in    #'Filtered Rows'"}]},{"name":"Market_Leaders","isHidden":false,"storageMode":"Import","columns":[{"name":"RFO_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_ZONE_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MARKET_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_DEPT_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_STS_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TRMN_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MARKET_LEADERS","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"expression":"Market_Leaders[RFO_ZONE_NM] \u0026 '-' \u0026 Market_Leaders[MARKET_LEADERS]","columnType":"Calculated"},{"name":"Market Number","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Experienced Advisor","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Exp Advisor Sort","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = DB2.Database('podwh021:50000', 'podwh021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT DISTINCT#(lf)t1.ORZN_DEPT_CDE as RFO_CDE,#(lf)t1.ORZN_ZONE_CDE as RFO_ZONE_NM,#(lf)(SUBSTRING(t1.ORZN_ZONE_CDE,6,5)) AS Market_ID,#(lf)t3.ORZN_DEPT_DSCR,#(lf)t3.EMP_ID,#(lf)t3.EMP_STS_TYP_CDE,#(lf)t3.trmn_dt,#(lf)t3.JOB_TYP_CDE,#(lf)t3.JOB_TYP_DSCR,#(lf)t3.EMP_NM,#(lf)case when t3.emp_nm is null then \u0027Vacant\u0027 Else t3.emp_nm end as market_leaderS#(lf)FROM SEMANTIC.SALES_HIERARCHY_DIMENSION t1#(lf)left join#(lf)(#(lf)SELECT DISTINCT#(lf)T1.SALE_HIER_ID,#(lf)t1.orzn_zone_cde,#(lf)t1.orzn_dept_dscr,#(lf)t2.orzn_dept_cde,#(lf)t2.EMP_ID,#(lf)t2.EMP_STS_TYP_CDE,#(lf)t2.trmn_dt,#(lf)t2.JOB_TYP_CDE,#(lf)t2.JOB_TYP_DSCR,#(lf)t2.EMP_NM#(lf)FROM#(lf)SEMANTIC.SALES_HIERARCHY_DIMENSION t1#(lf)left JOIN HUMAN_RESOURCES.CNF_EMP_DIM_DTL_CURR_CFDL t2 ON T1.SALE_HIER_ID = T2.emp_id#(lf)where t1.CURR_ROW_IND = \u0027Y\u0027#(lf)and t2.emp_sts_typ_cde in (\u0027A\u0027)#(lf)and t1.EFF_END_TMSP is null#(lf)AND T2.CURR_ROW_IND = \u0027Y\u0027#(lf)and t1.EFF_END_TMSP is null#(lf)and t2.JOB_TYP_CDE IN (\u0027001002\u0027, \u0027001003\u0027, \u0027001007\u0027)#(lf)AND T2.EMP_ID NOT IN(\u0027TS62904\u0027,\u0027TS67022\u0027)#(lf))#(lf)t3#(lf)on t1.orzn_zone_cde = t3.orzn_zone_cde#(lf)where t1.CURR_ROW_IND = \u0027Y\u0027#(lf)and t1.eff_end_tmsp is null#(lf)--and t1.rfo_zone_sts_cde in (\u0027A\u0027)#(lf)and substring(t1.orzn_zone_cde,6,2) \u003c\u003e \u002700\u0027#(lf)and t1.orzn_dept_cde \u003c\u003e \u0027UKWN\u0027#(lf)order BY t1.ORZN_ZONE_CDE;#(lf)']),    #'Added Custom' = Table.AddColumn(Source, 'Market Number', each Text.End([MARKET_ID],2)),    #'Added Conditional Column' = Table.AddColumn(#'Added Custom', 'Experienced Advisor', each if [Market Number] = '01' then 'PMC - Market 1' else if [Market Number] = '59' then 'PMC - Market 59' else if [Market Number] = '69' then 'GPA - Market 69' else if [Market Number] = '79' then 'GPD - Market 79' else if [Market Number] = '98' then 'NPG - Market 98' else if [Market Number] = '99' then 'NPG - Market 99' else null),    #'Added Custom1' = Table.AddColumn(#'Added Conditional Column', 'Exp Advisor Sort', each Text.End([Experienced Advisor],9))in    #'Added Custom1'"}]},{"name":"RFO_Market","isHidden":false,"storageMode":"Import","columns":[{"name":"Organization Zone Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Channel_PQ","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Advisor Group","dataType":"String","isHidden":false,"expression":"RELATED(\u0027RFO_NM\u0027[NM])","columnType":"Calculated"}],"measures":[],"source":[{"expression":"let    Source = Sql.Database('dbedwdwprd', 'EnterpriseDataMart', [Query='SELECT DISTINCT #(lf)#(tab)SHD.[Organization Zone Code],#(lf)        SHD.[Organization Sub Department Code] as MVP,#(lf)#(tab)(LEFT(SHD.[Organization Zone Code],4)) as RFO,#(lf)#(tab)(SUBSTRING(SHD.[Organization Zone Code],6,5)) as Zone#(lf)from EnterpriseDataMart.[DM_01].[Sale Hierarchy Dimension] SHD#(lf)where SHD.[Organization Department Code] in (\u00270001\u0027,\u00270115\u0027,\u00270190\u0027,\u00270283\u0027,\u00270291\u0027,\u00270361\u0027,\u00270383\u0027,\u00270384\u0027,\u00270435\u0027,\u00270525\u0027,\u00270716\u0027,\u00270810\u0027)#(lf)order by SHD.[Organization Zone Code]']),    #'Renamed Columns' = Table.RenameColumns(Source,{{'Zone', 'Market'}}),    #'Added Custom' = Table.AddColumn(#'Renamed Columns', 'Channel_PQ', each if List.Contains({'0001','0115','0165','0190','0240','0283','0291','0361','0365','0384','0410','0435','0475','0496','0525','0529','0810'}, [RFO]) then 'Career'else if List.Contains({'0383'}, [RFO]) then 'Virtual Advice' else 'Other'),    #'Filtered Rows1' = Table.SelectRows(#'Added Custom', each ([MVP] \u003c\u003e 'UKWN') and ([RFO] \u003c\u003e '0529'))in    #'Filtered Rows1'"}]},{"name":"Producer_Snowflake","isHidden":false,"storageMode":"Import","columns":[{"name":"SALE_HIER_DIM_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EMP_DIM_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SALE_HIER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Advisor Group","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ZONE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MARKET","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FILTER_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MARKET_NUMBER","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MARKET_LEADERS","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP Leader","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RPT_TO_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Report to Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Adjusted Service Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TENURE","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TENURE_GROUP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SFC_FC","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FR_SEGMENT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"GNDR_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LST_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FRST_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MDDL_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ASSIGNED_AFA","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"OP_COUNT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Conference Qualification Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team Purpose Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Credentials","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"License","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Conference Qualification","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team Purpose Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market with Leader","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP with Leader","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TeamAdvisor_HlthRpt","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team Indicator","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Experience Advisor Sort.Sort","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'select distinct b.''Sales Hierarchy Dimension Surrogate Key'' as SALE_HIER_DIM_SK,#(lf)       a.''Workforce Dimension Detail Surrogate Key'' as EMP_DIM_SK,#(lf)       a.''Employee Identifier'' as EMP_ID,#(lf)       b.''Sales Hierarchy Identifier'' as SALE_HIER_ID,#(lf)       --a.''Employee Name'' as EMP_NM,#(lf)case when a.''Employee Name'' = \u0027Johnson,Christopher\u0027 then a.''Last Name''||\u0027,\u0027||a.''Nick Name''#(lf)            when a.''Employee Name'' = \u0027Parker,David\u0027 and a.''Employee Identifier'' = \u0027TS83655\u0027 then a.''Last Name''||\u0027,\u0027||a.''First Name''||\u0027 C.\u0027#(lf)            when a.''Employee Identifier'' = \u0027TS54638\u0027 then a.''Last Name''||\u0027,\u0027||a.''Nick Name''#(lf)            when a.''Employee Identifier'' = \u0027TS11184\u0027 then a.''Last Name''||\u0027,\u0027||a.''Nick Name''#(lf)            when a.''Employee Identifier'' = \u0027TS80048\u0027 then a.''Last Name''||\u0027,\u0027||a.''Nick Name''#(lf)         else a.''Employee Name''#(lf)       end as EMP_NM,       aa.''Job Type Code'' as JOB_TYP_CDE,#(lf)       aa.''Job Type Description'' as JOB_TYP_DSCR,#(lf)       case when a.''Organization Department Code'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027) then \u00270383\u0027#(lf)         else a.''Organization Department Code''#(lf)       end as TAG,#(lf)       case when aa.''Department Identifier'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027) then \u0027Virtual Advice\u0027#(lf)         else aa.''Department Name''#(lf)       end as ''TAG Name'',#(lf)       case when aa.''Department Identifier'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027) then \u00270383-Virtual Advice\u0027#(lf)         else a.''Organization Department Code''||\u0027-\u0027||aa.''Department Name''#(lf)       end as ''Advisor Group'',#(lf)       (substr(b.''Organization Zone Code'',6,2))   AS ZONE,#(lf)       b.''Organization Zone Code'' as Market,#(lf)       case when substr(b.''Organization Zone Code'',9,2) = \u002798\u0027 then \u0027NPG - market 98\u0027#(lf)            when substr(b.''Organization Zone Code'',9,2) = \u002799\u0027 then \u0027NPG - market 99\u0027#(lf)            when substr(b.''Organization Zone Code'',9,2) = \u002759\u0027 then \u0027PMC - market 59\u0027#(lf)            when substr(b.''Organization Zone Code'',9,2) = \u002701\u0027 then \u0027PMC - market 01\u0027#(lf)            when substr(b.''Organization Zone Code'',9,2) = \u002769\u0027 then \u0027GPA - market 69\u0027#(lf)            when Substr(b.''Organization Zone Code'',9,2) = \u002779\u0027 then \u0027GPD - market 79\u0027#(lf)            when substr(b.''Organization Zone Code'',9,2) = \u002789\u0027 then \u0027PPC - market 89\u0027#(lf)       end as Filter_Ind,  #(lf)       substr(b.''Organization Zone Code'',9,2) as Market_Number,               #(lf)       zz4.market_leaders,#(lf)       c.''Sub Department Identifier'' as MVP_ID,#(lf)       zz3.''MVP Leader'', #(lf)       c.''Report to ID'' as RPT_TO_ID,#(lf)       cc.''First Name''||\u0027 \u0027||cc.''Last Name'' as ''Report to Name'',#(lf)       a.''Adjusted Service Date'',#(lf)       c.''Financial Professional Tenure'' as Tenure,#(lf)       c.''Financial Professional Tenure Group'' as Tenure_Group,#(lf)       case when a.''Senior Financial Consultant Indicator'' = \u0027Y\u0027 then \u0027SFC\u0027#(lf)#(tab)        when a.''Financial Consultant Indicator'' = \u0027Y\u0027 then \u0027FC\u0027#(lf)#(tab)        when a.''Wealth Advisor Indicator'' = \u0027Y\u0027 then \u0027WA\u0027#(lf)#(tab)   end as SFC_FC,#(lf)       (case when a.''Senior Financial Consultant Indicator'' = \u0027Y\u0027 then \u0027SFC\u0027#(lf)             when a.''Financial Consultant Indicator'' = \u0027Y\u0027 then \u0027FC\u0027#(lf)             when a.''Wealth Advisor Indicator'' = \u0027Y\u0027 then \u0027WA\u0027#(lf)             when a.''Job Type Code'' in (\u0027002003\u0027,\u0027002018\u0027,\u0027002019\u0027) then A.''Job Type Description''#(lf)             when a.''Job Type Code'' = \u0027002016\u0027 then a.''Job Type Description''#(lf)             when ((a.''Senior Financial Consultant Indicator'' = \u0027N\u0027 or a.''Financial Consultant Indicator'' = \u0027N\u0027) and #(lf)                    c.''Financial Professional Tenure'' \u003e= 4 and #(lf)                    a.''Job Type Code'' in (\u0027002000\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027003602\u0027,\u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027))#(lf)                      then \u0027VETFR\u0027#(lf)             when c.''Financial Professional Tenure'' \u003e= 3 and c.''Financial Professional Tenure'' \u003c 4  and   #(lf)                  a.''Job Type Code'' in (\u0027002000\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027003602\u0027,\u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027)#(lf)                      then \u0027NFR4\u0027#(lf)             when c.''Financial Professional Tenure'' \u003e= 2 and c.''Financial Professional Tenure'' \u003c 3  and   #(lf)                  a.''Job Type Code'' in (\u0027002000\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027003602\u0027,\u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027)#(lf)                      then \u0027NFR3\u0027#(lf)             when c.''Financial Professional Tenure'' \u003e= 1 and c.''Financial Professional Tenure'' \u003c 2  and   #(lf)                  a.''Job Type Code'' in (\u0027002000\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027003602\u0027,\u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027)#(lf)                      then \u0027NFR2\u0027 #(lf)             when c.''Financial Professional Tenure'' \u003e= 0 and c.''Financial Professional Tenure'' \u003c 1  and   #(lf)                  a.''Job Type Code'' in (\u0027002000\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027003602\u0027,\u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027)#(lf)                      then \u0027NFR1\u0027 #(lf)        end) as FR_SEGMENT,#(lf)        trim(concat_ws(\u0027 \u0027,dd.CHFC_DSGT_CDE,dd.CLF_DSGT_CDE,dd.CLU_DSGT_CDE,dd.CFA_DSGT_CDE,dd.CFP_DSGT_CDE,dd.FIC_DSGT_CDE,dd.FICF_DSGT_CDE,dd.LUTCF_DSGT_CDE)) AS Credentialsxx,#(lf)        concat_ws(\u0027 \u0027,dd.S1_LIC_STS_CDE,dd.S4_LIC_STS_CDE,dd.S6_LIC_STS_CDE,dd.S7_LIC_STS_CDE,dd.S9_LIC_STS_CDE,#(lf)        dd.S10_LIC_STS_CDE,dd.S22_LIC_STS_CDE,dd.S24_LIC_STS_CDE,dd.S26_LIC_STS_CDE,dd.S27_LIC_STS_CDE,#(lf)        dd.S51_LIC_STS_CDE,dd.S53_LIC_STS_CDE,dd.S62_LIC_STS_CDE,dd.S63_LIC_STS_CDE,dd.S65_LIC_STS_CDE,#(lf)        dd.S66_LIC_STS_CDE,dd.S86_LIC_STS_CDE,dd.S87_LIC_STS_CDE) as Licensesxx,  #(lf)          #(lf)       a.''Gender Code'' as GNDR_CDE, #(lf)       a.''Last Name'' as LST_NM, #(lf)       case when a.''Nick Name'' IN (\u0027 \u0027) then a.''First Name''#(lf)         else a.''Nick Name''#(lf)       end as FRST_NM, #(lf)       a.''Middle Name'' as MDDL_NM,#(lf)       xx.assigned_afa,#(lf)       case when zz.opcount is NULL then 0 #(lf)         else zz.opcount#(lf)       end as OP_Count,#(lf)       aa.''Conference Qualification Type Code'',#(lf)       zzz.''Team Identifier'',#(lf)       zzz.''Team Name'',#(lf)       zzz.''Team Purpose Code''#(lf)       #(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' a inner join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' as aa#(lf)    on (a.''Employee Identifier''=aa.''Source System Key Text'' and aa.''Current Row Indicator'' = \u0027Y\u0027)  left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' b #(lf)    on (a.''Employee Identifier''= b.''Sales Hierarchy Identifier'') left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' c #(lf)    on (a.''Employee Identifier''= c.''Source System Key Text'' AND c.''Current Row Indicator'' = \u0027Y\u0027) left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' cc #(lf)    on (c.''Report to ID''= cc.''Source System Key Text'' AND cc.''Current Row Indicator'' = \u0027Y\u0027) left join  #(lf)        (select d.''Employee Identifier'',#(lf)                (case when \u0027Y\u0027 = d.''Chartered Financial Consultant Designation Code'' THEN \u0027ChFC\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS CHFC_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Chartered Leadership Fellow Designation Code'' THEN \u0027CLF\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS CLF_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Chartered Life Underwriter Designation Code'' THEN \u0027CLU\u0027#(lf)                   else \u0027 \u0027 #(lf)                 end) AS CLU_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Chartered Financial Analyst Designation Code'' THEN \u0027CFA\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS CFA_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Fraternal Insurance Counselor Designation Code'' THEN \u0027FIC\u0027#(lf)                   else \u0027 \u0027 #(lf)                 end) AS FIC_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Fraternal Insurance Counselor Fellow Designation Code'' THEN \u0027FICF\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS FICF_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Certified Financial Planner Designation Code'' THEN \u0027CFP\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS CFP_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Life Underwriter Training Counsel Fellow Designation Code'' THEN \u0027LUTCF\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS LUTCF_DSGT_CDE,#(lf)                (case when \u0027Y\u0027 = d.''Series One License Status Code'' THEN \u00271\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S1_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Four License Status Code'' THEN \u00274\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S4_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Six License Status Code'' THEN \u00276\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S6_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Seven License Status Code'' THEN \u00277\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S7_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Nine License Status Code'' THEN \u00279\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S9_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Ten License Status Code'' THEN \u002710\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S10_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Twenty-two License Status Code'' THEN \u002722\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S22_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Twenty-four License Status Code'' THEN \u002724\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S24_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Twenty-six License Status Code'' THEN \u002726\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S26_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Twenty-seven License Status Code'' THEN \u002727\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S27_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Fifty-one License Status Code'' THEN \u002751\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S51_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Fifty-three License Status Code'' THEN \u002753\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S53_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Sixty-two License Status Code'' THEN \u002762\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S62_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Sixty-three License Status Code'' THEN \u002763\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S63_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Sixty-five License Status Code'' THEN \u002765\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S65_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Sixty-six License Status Code'' THEN \u002766\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S66_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Eighty-six License Status Code'' THEN \u002786\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S86_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Eighty-seven License Status Code'' THEN \u002787\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S87_LIC_STS_CDE#(lf)              #(lf)           from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' d#(lf)          where d.''Termination Date'' is null   #(lf)            and d.''Current Row Indicator'' = \u0027Y\u0027#(lf)            and d.''Employee Status Type Code'' in (\u0027A\u0027,\u0027L\u0027,\u0027I\u0027)) as dd#(lf)    on A.''Employee Identifier'' = dd.''Employee Identifier''  left join#(lf)           #(lf)        (select distinct aa.''Source System Key Text'',#(lf)#(tab)            (case when e.emp_count = 1 then f.emp_nm#(lf)                      when e.emp_count \u003e 1 then \u0027Multiple Associates\u0027#(lf)                   else \u0027None\u0027#(lf)                 end) as assigned_afa#(lf)           from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' as aa left join  #(lf)              (select e.''Report to ID'', #(lf)                      count(e.''Organization Dimension Surrogate Key'') as emp_count   #(lf)                 from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' e  #(lf)                where e.''Job Type Code'' in (\u0027002000\u0027,\u0027002010\u0027,\u0027002003\u0027,\u0027002011\u0027,\u0027002012\u0027,\u0027003100\u0027,#(lf)                                            \u0027002017\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027002018\u0027,\u0027002019\u0027,\u0027003500\u0027,#(lf)                                            \u0027002022\u0027,\u0027002024\u0027,\u0027002025\u0027,\u0027002026\u0027,\u0027002027\u0027,\u0027002030\u0027,#(lf)                                            \u0027002031\u0027,\u0027002032\u0027)#(lf)                  and e.''Employee Status Type Code'' = \u0027A\u0027 #(lf)                  and e.''Current Row Indicator'' = \u0027Y\u0027#(lf)                  and e.''Report to ID'' \u003c\u003e \u0027'' ''\u0027 #(lf)                  and e.''Effective End Date'' = \u00279999-12-31\u0027 #(lf)               group by ''Report to ID'') as e #(lf)             on aa.''Source System Key Text'' = e.''Report to ID'' left join#(lf)         #(lf)              (select f.''Organization Dimension Surrogate Key'',#(lf)                      f.''Last Name''||\u0027, \u0027||f.''First Name'' as EMP_NM, #(lf)                      f.''Report to ID''  #(lf)                 from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' f#(lf)                where (f.''Job Type Code'' in (\u0027002000\u0027,\u0027002010\u0027,\u0027002003\u0027,\u0027002011\u0027,\u0027002012\u0027,\u0027003100\u0027,#(lf)                                             \u0027002017\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027002018\u0027,\u0027002019\u0027,\u0027003500\u0027,#(lf)                                             \u0027002022\u0027,\u0027002024\u0027,\u0027002025\u0027,\u0027002026\u0027,\u0027002027\u0027,\u0027002030\u0027,#(lf)                                             \u0027002031\u0027,\u0027002032\u0027) or #(lf)                      f.''Department Identifier'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027)) #(lf)                  and f.''Department Identifier'' not in (\u00272410\u0027,\u00273005\u0027,\u00277151\u0027,\u00277152\u0027,\u00279150\u0027,\u00279134\u0027,#(lf)                                                        \u0027NA\u0027,\u00274100\u0027,\u00276053\u0027,\u00276100\u0027,\u00278900\u0027) #(lf)                  and f.''Employee Status Type Code'' = \u0027A\u0027 #(lf)                  and f.''Current Row Indicator'' = \u0027Y\u0027#(lf)                  and f.''Report to ID'' \u003c\u003e \u0027'' ''\u0027 #(lf)                  and f.''Effective End Date'' = \u00279999-12-31\u0027) as f  #(lf)              on e.''Report to ID''=f.''Report to ID''#(lf)          where (aa.''Job Type Code'' in (\u0027002000\u0027,\u0027002010\u0027,\u0027002003\u0027,\u0027002011\u0027,\u0027002012\u0027,\u0027003100\u0027,#(lf)                                        \u0027002017\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027002018\u0027,\u0027002019\u0027,\u0027003500\u0027,#(lf)                                        \u0027002022\u0027,\u0027002024\u0027,\u0027002025\u0027,\u0027002026\u0027,\u0027002027\u0027,\u0027002030\u0027,#(lf)                                        \u0027002031\u0027,\u0027002032\u0027) or #(lf)                aa.''Department Identifier'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027)) #(lf)            and aa.''Department Identifier'' not in (\u00272410\u0027,\u00273005\u0027,\u00277151\u0027,\u00277152\u0027,\u00279150\u0027,\u00279134\u0027,#(lf)                                                   \u0027NA\u0027,\u00274100\u0027,\u00276053\u0027,\u00276100\u0027,\u00278900\u0027) #(lf)            and aa.''Current Row Indicator'' = \u0027Y\u0027#(lf)            and aa.''Employee Status Type Code'' = \u0027A\u0027 #(lf)            and aa.''Report to ID'' \u003c\u003e \u0027'' ''\u0027 #(lf)            and aa.''Effective End Date'' = \u00279999-12-31\u0027) as xx#(lf) #(lf)    on a.''Employee Identifier''=xx.''Source System Key Text'' left join #(lf)      (select count(z.''Organization Dimension Surrogate Key'') as OPCOUNT,   #(lf)                    z.''Report to ID'' #(lf)         from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' z  #(lf)        where z.''Current Row Indicator'' = \u0027Y\u0027#(lf)          and z.''Field Professional Roles'' in (\u0027Unlicensed Office Professionals\u0027,\u0027Licensed Office Professionals\u0027)#(lf)          and z.''Employee Status Type Code'' in (\u0027A\u0027,\u0027I\u0027,\u0027L\u0027)#(lf)       group by ''Report to ID'') as zz#(lf)         #(lf)    on a.''Employee Identifier'' = zz.''Report to ID''   left join#(lf)#(lf)(select a.''Employee Identifier'',#(lf)        b.''Team Identifier'',#(lf)        b.''Team Name'',#(lf)        b.''Team Purpose Code'',#(lf)        A.''Effective Date''#(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Employee Team Organization Relationship Current Dimension''  a inner join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Team Organization Current Dimension'' b#(lf)    on (a.''Team Identifier Surrogate Key'' = b.''Team Identifier Surrogate Key'')  inner join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' c#(lf)    on (a.''Employee Identifier'' = c.''Employee Identifier'')   #(lf)    #(lf) where b.''Effective Status Code'' = \u0027A\u0027#(lf)   and c.''Employee Status Type Code'' = \u0027A\u0027#(lf)   and c.''Current Row Indicator'' = \u0027Y\u0027#(lf)   and a.''Team Member Action Code'' \u003c\u003e \u0027DROP\u0027#(lf)--   and b.''Team Purpose Code'' NOT in (\u0027COAC\u0027,\u0027ENSB\u0027) #(lf)   and b.''Team Purpose Code'' NOT in (\u0027COAC\u0027,\u0027ENSB\u0027) #(lf)   and a.''Effective Date'' = (SELECT MAX(aa.''Effective Date'')#(lf)                                FROM ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Employee Team Organization Relationship Current Dimension''  aa inner join#(lf)                                     ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Team Organization Current Dimension'' bb#(lf)                                  on (aa.''Team Identifier Surrogate Key'' = bb.''Team Identifier Surrogate Key'' and a.''Employee Identifier''= aa.''Employee Identifier'') INNER JOIN#(lf)                                     ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' cc#(lf)                                  on (aa.''Employee Identifier''= cc.''Employee Identifier'')#(lf)#(tab)                           WHERE bb.''Effective Status Code'' = \u0027A\u0027#(lf)                                 AND cc.''Employee Status Type Code'' = \u0027A\u0027  #(lf)                                 and cc.''Current Row Indicator'' = \u0027Y\u0027#(lf)                                 and aa.''Team Member Action Code'' \u003c\u003e \u0027DROP\u0027#(lf)                                -- and bb.''Team Purpose Code'' NOT in (\u0027COAC\u0027,\u0027ENSB\u0027) #(lf)                                 and bb.''Team Purpose Code'' NOT in (\u0027COAC\u0027,\u0027ENSB\u0027) #(lf)                                -- and bb.''Team Purpose Code'' in (\u0027ASSC\u0027)#(lf)                            )#(lf)  order by a.''Employee Identifier'') as zzz#(lf)  #(lf)   on a.''Employee Identifier'' = zzz.''Employee Identifier'' left join#(lf)#(lf)#(lf)       (select distinct a2.''Organization Department Code'' as RFO_CDE,#(lf)                        a2.''Organization Sub Department Code'' as MVP_ID,#(lf)                        cc.''Organization Department Description'',#(lf)                        case when cc.''Employee Name'' is null then \u0027Vacant\u0027#(lf)                          else cc.''Employee Name''#(lf)                        end as ''MVP Leader''    #(lf)          from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' a2  left join#(lf)               (Select Distinct aa.''Organization Sub Department Code'',#(lf)                                aa.''Organization Department Description'',#(lf)                                bb.''Employee Identifier'',#(lf)                                bb.''Employee Name'' #(lf)                  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' as aa left join#(lf)                       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' as bb#(lf)                    on aa.''Sales Hierarchy Identifier''=bb.''Employee Identifier''  #(lf)                 where aa.''Current Row Indicator'' = \u0027Y\u0027#(lf)                   and bb.''Employee Status Type Code'' = \u0027A\u0027#(lf)                   and bb.''Current Row Indicator'' = \u0027Y\u0027#(lf)                   and aa.''Effective End Date'' = \u00279999-12-31\u0027#(lf)                   and bb.''Job Type Code'' = \u0027001001\u0027#(lf)                 order by aa.''Organization Sub Department Code'') cc#(lf)             on a2.''Organization Sub Department Code''=cc.''Organization Sub Department Code''  #(lf)          where a2.''Current Row Indicator'' = \u0027Y\u0027#(lf)            and a2.''Effective End Date'' = \u00279999-12-31\u0027#(lf)            and a2.''Organization Zone Code'' \u003c\u003e \u0027UKWN\u0027#(lf)           order by a2.''Organization Sub Department Code''  ) as zz3#(lf)  on c.''Sub Department Identifier''= zz3.''MVP_ID'' left join#(lf)   #(lf)    #(lf)     (SELECT DISTINCT a4.''Organization Department Code'' as RFO_CDE,#(lf)                      a4.''Organization Zone Code'' as TAG_ZONE_NM, #(lf)                      (substring(a4.''Organization Zone Code'',6,5)) as Market_ID,#(lf)                      case when t4.''Employee Name'' is null then \u0027Vacant\u0027#(lf)                        else t4.''Employee Name''#(lf)                      end as Market_Leaders#(lf)#(lf)        from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' a4 left join #(lf)             (select distinct aa4.''Organization Zone Code'',#(lf)                              bb4.''Employee Name''  #(lf)#(lf)                from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' aa4 left join #(lf)                     ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' bb4#(lf)                  on aa4.''Sales Hierarchy Identifier''=bb4.''Employee Identifier''#(lf)               where aa4.''Current Row Indicator'' = \u0027Y\u0027      #(lf)                 and bb4.''Employee Status Type Code'' in (\u0027A\u0027)#(lf)                 and aa4.''Effective End Date'' = \u00279999-12-31\u0027#(lf)                 and bb4.''Current Row Indicator'' = \u0027Y\u0027#(lf)                 and aa4.''Effective End Date'' = \u00279999-12-31\u0027#(lf)                 and (bb4.''Job Type Code'' in (\u0027001002\u0027,\u0027001003\u0027,\u0027001007\u0027) or #(lf)                      bb4.''Employee Identifier'' in (\u0027TS60295\u0027,\u0027TS49431\u0027,\u0027TS22024\u0027))#(lf)                 and bb4.''Employee Identifier'' not in (\u0027TS62904\u0027,\u0027TS67022\u0027,\u0027TS74827\u0027,\u0027TS73067\u0027,\u0027TS77319\u0027,\u0027TS73124\u0027)) t4#(lf)          on a4.''Organization Zone Code'' = t4.''Organization Zone Code''#(lf)       where a4.''Current Row Indicator'' = \u0027Y\u0027#(lf)         and a4.''Effective End Date'' = \u00279999-12-31\u0027#(lf)         and substring(a4.''Organization Zone Code'',6,2) \u003c\u003e \u002700\u0027#(lf)         and a4.''Organization Department Code'' \u003c\u003e \u0027UKWN\u0027#(lf)       order by a4.''Organization Zone Code'') zz4#(lf)     #(lf)   on  b.''Organization Zone Code''= zz4.''TAG_ZONE_NM'' #(lf)  #(lf)  #(lf) where a.''Employee Status Type Code'' IN (\u0027A\u0027,\u0027I\u0027,\u0027L\u0027)#(lf)   and (c.''Job Family Code'' LIKE \u0027FLD%\u0027 OR#(lf)        c.''Job Family Code'' =\u0027SALES\u0027 OR#(lf)        c.''TF Job Class Code'' =\u0027FAC\u0027)#(lf)   and a.''Termination Date'' is NULL #(lf)   and (a.''Job Type Code'' in (\u0027002003\u0027,\u0027002010\u0027,\u0027002011\u0027,\u0027002012\u0027,\u0027002016\u0027,\u0027002017\u0027,#(lf)                              \u0027002000\u0027,\u0027002022\u0027,\u0027002024\u0027,\u0027002025\u0027,\u0027002026\u0027,\u0027002027\u0027,#(lf)                              \u0027002030\u0027,\u0027002031\u0027,\u0027002032\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027003602\u0027,#(lf)                              \u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027) or #(lf)       a.''Organization Department Code'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027)) #(lf)   and c.''Department Identifier'' not in (\u00272410\u0027,\u00273005\u0027,\u00277151\u0027,\u00277152\u0027,\u00279150\u0027,\u00279134\u0027,#(lf)                                         \u0027NA\u0027,\u00274100\u0027,\u00276053\u0027,\u00276100\u0027,\u00278900\u0027) #(lf)   and b.''Effective End Date'' = \u00279999-12-31\u0027 #(lf)   and b.''Current Row Indicator'' = \u0027Y\u0027 #(lf)   and a.''Current Row Indicator'' = \u0027Y\u0027 #(lf)   --and a.''Employee Identifier'' = \u0027TS77676\u0027#(lf)order by a.''Employee Identifier''', null, [EnableFolding=true]),    #'Added Custom' = Table.AddColumn(Source, 'Split_Cred', each Text.Split( [CREDENTIALSXX], ' ' )),    #'Added Custom1' = Table.AddColumn(#'Added Custom', 'Shrink_Cred', each List.Select([Split_Cred], each _ \u003c\u003e '')),    #'Added Custom2' = Table.AddColumn(#'Added Custom1', 'Credentials', each Text.Combine([Shrink_Cred], ' ')),    #'Added Custom3' = Table.AddColumn(#'Added Custom2', 'Split_License', each Text.Split( [LICENSESXX], ' ' )),    #'Added Custom4' = Table.AddColumn(#'Added Custom3', 'Shrink_License', each List.Select([Split_License], each _ \u003c\u003e '')),    #'Added Custom5' = Table.AddColumn(#'Added Custom4', 'License', each Text.Combine([Shrink_License], ' ')),    #'Removed Columns' = Table.RemoveColumns(#'Added Custom5',{'Split_Cred', 'Shrink_Cred', 'Split_License', 'Shrink_License', 'CREDENTIALSXX', 'LICENSESXX'}),    #'Added Custom6' = Table.AddColumn(#'Removed Columns', 'Conference Qualification', each if[Conference Qualification Type Code] = '33' then 'Pinnacle A'  else if[Conference Qualification Type Code] = '32' then 'Pinnacle B'else if[Conference Qualification Type Code] = '31' then 'Pinnacle C'else if[Conference Qualification Type Code] = '29' then 'Summit A'else if[Conference Qualification Type Code] = '28' then 'Summit B'else if[Conference Qualification Type Code] = '27' then 'Summit C'else if[Conference Qualification Type Code] = '22' then 'Sierra A'else if[Conference Qualification Type Code] = '20' then 'Sierra B'else 'Non-Qualified'),    #'Added Custom7' = Table.AddColumn(#'Added Custom6', 'Team Purpose Description', each if [Team Purpose Code] = 'PBP' then 'Professional'else if [Team Purpose Code] = 'PBPS' then 'Professional'else if [Team Purpose Code] = 'FRML' then 'Formal'  else if [Team Purpose Code] = 'FRMS' then 'Formal'else if [Team Purpose Code] = 'ASSC' then 'Association'else if [Team Purpose Code] = 'SOLO' then 'Solo'else ' '),    #'Added Custom8' = Table.AddColumn(#'Added Custom7', 'Market with Leader', each [MARKET]\u0026' - '\u0026[MARKET_LEADERS]),    #'Added Custom9' = Table.AddColumn(#'Added Custom8', 'MVP with Leader', each [MVP_ID] \u0026 ' - ' \u0026 [MVP Leader]),    #'Replaced Value' = Table.ReplaceValue(#'Added Custom9',null,'',Replacer.ReplaceValue,{'Team Name'}),    #'Replaced Value1' = Table.ReplaceValue(#'Replaced Value',null,'',Replacer.ReplaceValue,{'Team Identifier'}),    #'Added Custom10' = Table.AddColumn(#'Replaced Value1', 'TeamAdvisor_HlthRpt', each if [Team Identifier] = '' then [EMP_NM] else [Team Name]),    #'Added Custom11' = Table.AddColumn(#'Added Custom10', 'Team Indicator', each if([Team Identifier]='') then 0 else 1),    #'Changed Type' = Table.TransformColumnTypes(#'Added Custom11',{{'Team Indicator', Int64.Type}}),    #'Removed Duplicates' = Table.Distinct(#'Changed Type', {'SALE_HIER_DIM_SK'}),    #'Filtered Rows' = Table.SelectRows(#'Removed Duplicates', each true),    #'Merged Queries' = Table.NestedJoin(#'Filtered Rows', {'FILTER_IND'}, #'Experience Advisor Sort', {'Filter_Ind'}, 'Experience Advisor Sort', JoinKind.LeftOuter),    #'Expanded Experience Advisor Sort' = Table.ExpandTableColumn(#'Merged Queries', 'Experience Advisor Sort', {'Sort'}, {'Experience Advisor Sort.Sort'})in    #'Expanded Experience Advisor Sort'"}]},{"name":"Alert Message","isHidden":false,"storageMode":"Import","columns":[{"name":"What\u0027s New Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Alert Message","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Message_Alert_Text","expression":" var _txt1 = SELECTEDVALUE(\u0027Alert Message\u0027[Alert Message]) return IF(ISBLANK(_txt1),'',_txt1)","isHidden":false},{"name":"Message_WhatsNew_Text","expression":" var _txt1 = SELECTEDVALUE(\u0027Alert Message\u0027[What\u0027s New Description]) return IF(ISBLANK(_txt1),'',_txt1)","isHidden":false},{"name":"ShowHideAlert Background","expression":"IF(ISBLANK(SELECTEDVALUE(\u0027Alert Message\u0027[Alert Message])),'White','White')","isHidden":false},{"name":"ShowHideAlert Border","expression":"IF(ISBLANK(SELECTEDVALUE(\u0027Alert Message\u0027[Alert Message])),'White','#BE1D3D')","isHidden":false},{"name":"ShowHideAlertTitle","expression":" IF(ISBLANK(SELECTEDVALUE(\u0027Alert Message\u0027[Alert Message])),' ','ALERT !')","isHidden":false},{"name":"ShowHideWhatsNew Background","expression":"IF(ISBLANK(SELECTEDVALUE(\u0027Alert Message\u0027[What\u0027s New Description])),'White','#E9DDC8')","isHidden":false},{"name":"ShowHideWhatsNew Border","expression":"IF(ISBLANK(SELECTEDVALUE(\u0027Alert Message\u0027[What\u0027s New Description])),'White','#63666A')","isHidden":false},{"name":"ShowHideWhatsNewTitle","expression":" IF(ISBLANK(SELECTEDVALUE(\u0027Alert Message\u0027[What\u0027s New Description])),' ','What\u0027s New')","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//SHARED//Public//DI and BI//Field Reporting//What\u0027s New and Alert Message//What\u0027s New and Alert Message.xlsx'), null, true),    #'New Client_Sheet' = Source{[Item='New Client',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'New Client_Sheet', [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'What\u0027s New Description', type text}, {'Alert Message', type text}})in    #'Changed Type'"}]}],"expressions":[{"name":"Experience Advisor Sort","expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i45WUtJRMlSK1YlWCvB1VtBVyE0syk4tUTAwBIobYYqbWgLFjcHi7gGOCHEzkLgJVNwFIW4OEjcFi/sFuCPELS2A4mZYxEHqzZViYwE=', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Filter_Ind = _t, Sort = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Filter_Ind', type text}, {'Sort', Int64.Type}})in    #'Changed Type'"}],"roles":[{"name":"Field Leader RFO","modelPermission":"Read","members":[{"memberName":"obj:bc106c61-ca17-4fc1-9713-5893454f8368@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"bc106c61-ca17-4fc1-9713-5893454f8368","memberType":"Group","identityProvider":"AzureAD"},{"memberName":"obj:a9d8eb7f-8e75-4e5e-b329-caf9fcffa9ea@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"a9d8eb7f-8e75-4e5e-b329-caf9fcffa9ea","memberType":"Group","identityProvider":"AzureAD"},{"memberName":"obj:de18b88a-5b86-4d5a-bc53-8523bc34bc5c@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"de18b88a-5b86-4d5a-bc53-8523bc34bc5c","memberType":"Group","identityProvider":"AzureAD"}],"tablePermissions":[{"name":"Hierarchy, Delegation, AD","filterExpression":"[Department Number] = lookupvalue([Department Number],[REPORT_TO_EMAIL],username())"}]},{"name":"HomeOffice","modelPermission":"Read","members":[{"memberName":"obj:0d216a03-5ecb-4979-be8e-7c3904c3a79e@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"0d216a03-5ecb-4979-be8e-7c3904c3a79e","memberType":"Group","identityProvider":"AzureAD"},{"memberName":"obj:8fda22c8-bc4a-4aba-bdea-045657fd23df@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"8fda22c8-bc4a-4aba-bdea-045657fd23df","memberType":"Group","identityProvider":"AzureAD"}]},{"name":"COE","modelPermission":"Read","members":[{"memberName":"obj:2f621ad2-0668-4906-bf26-4d5ce281db46@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"2f621ad2-0668-4906-bf26-4d5ce281db46","memberType":"Group","identityProvider":"AzureAD"}]}],"configuredBy":"Ashley.Allen@Thrivent.com","configuredById":"db3dc7f7-0f5a-4e78-ba27-5d10f979c10f","isEffectiveIdentityRequired":true,"isEffectiveIdentityRolesRequired":true,"refreshSchedule":{"days":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"times":["08:30"],"enabled":true,"localTimeZoneId":"Central Standard Time","notifyOption":"NoNotification"},"targetStorageMode":"Abf","createdDate":"2020-09-24T23:00:07.9","contentProviderType":"PbixInImportMode"},{"id":"8bc79dae-44df-4988-9cf7-b050565ad0e4","name":"Sales Dashboard","tables":[{"name":"DTRB_PERF_DATES","isHidden":false,"storageMode":"Import","columns":[{"name":"DT_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CAL_DAY_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_END_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_WK_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"SRC_SYS_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CRET_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"LST_UPDT_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"CRET_USER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LST_UPDT_USER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_DAY_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_MTH_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_QTR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"YTD Flag","dataType":"String","isHidden":false,"expression":"if(and(DTRB_PERF_DATES[CAL_DAY_DT] \u003c= DTRB_PERF_DATES[Prior Sunday], DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT'), True, False)","columnType":"Calculated"},{"name":"Prior Sunday","dataType":"String","isHidden":false,"expression":"LOOKUPVALUE(DTRB_PERF_DATES[END_OF_WK_DATE_MAX], DTRB_PERF_DATES[CAL_DAY_DT], LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT') -6)","columnType":"Calculated"},{"name":"Cal_Prior_Year_Flag","dataType":"String","isHidden":false,"expression":"if(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'PREVIOUS', True, False)","columnType":"Calculated"},{"name":"Cal_PYTD_Flag","dataType":"String","isHidden":false,"expression":"if(and(DTRB_PERF_DATES[CAL_DAY_DT] \u003c= DTRB_PERF_DATES[PYTD DATE], DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'PREVIOUS'), True, False)","columnType":"Calculated"},{"name":"Cal_YTD_Flag","dataType":"String","isHidden":false,"expression":"if(and(DTRB_PERF_DATES[CAL_DAY_DT] \u003c= DTRB_PERF_DATES[Prior Sunday], DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'CURRENT'), True, False)","columnType":"Calculated"},{"name":"CalWeekDay","dataType":"String","isHidden":false,"expression":"weekday( DTRB_PERF_DATES[CAL_DAY_DT])","columnType":"Calculated"},{"name":"CalYear","dataType":"String","isHidden":false,"expression":"year(DTRB_PERF_DATES[CAL_DAY_DT])","columnType":"Calculated"},{"name":"Current Year Flag","dataType":"String","isHidden":false,"expression":"if(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT', True, False)","columnType":"Calculated"},{"name":"join_date","dataType":"String","isHidden":false,"expression":"DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR] \u0026 '-' \u0026 DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] \u0026 '-' \u0026 DTRB_PERF_DATES[CalWeekDay]","columnType":"Calculated"},{"name":"Prior Week Flag","dataType":"String","isHidden":false,"expression":"if( (LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT')-1 ) = DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR], 'TRUE')","columnType":"Calculated"},{"name":"Prior Year Flag","dataType":"String","isHidden":false,"expression":"if(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'PREVIOUS', True, False)","columnType":"Calculated"},{"name":"PYTD Flag","dataType":"String","isHidden":false,"expression":"var prevweeknum = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[CAL_DAY_DT],max(DTRB_PERF_DATES[Prior Sunday]))return if(and(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] \u003c= prevweeknum, DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='PREVIOUS'), True, False)","columnType":"Calculated"},{"name":"PYTD Flag SF","dataType":"String","isHidden":false,"expression":"if(and(DTRB_PERF_DATES[CAL_DAY_DT] \u003c= DATE(YEAR(today())-1,MONTH(today()),DAY(today()-1)),DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR] = year(today())-1), True, False)","columnType":"Calculated"},{"name":"Cal_Prior_Year_2_Flag","dataType":"String","isHidden":false,"expression":"if(DTRB_PERF_DATES[CalYear] = DTRB_PERF_DATES[Prior Year 2], True, False)","columnType":"Calculated"},{"name":"END_OF_WK_DATE_MAX","dataType":"String","isHidden":false,"expression":"calculate(max(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT]), ALLEXCEPT(DTRB_PERF_DATES,DTRB_PERF_DATES[perf_yr_wk]))","columnType":"Calculated"},{"name":"perf_yr_wk","dataType":"String","isHidden":false,"expression":"DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR] \u0026 '-' \u0026 DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR]","columnType":"Calculated"},{"name":"YTD_PYTD","dataType":"String","isHidden":false,"expression":"IF(DTRB_PERF_DATES[PYTD Flag]= TRUE(),'PYTD',if(DTRB_PERF_DATES[Cal_YTD_Flag]=True(),'YTD',''))","columnType":"Calculated"},{"name":"Quarter_Q Count","dataType":"String","isHidden":false,"expression":"'Q'\u0026 QUARTER(DTRB_PERF_DATES[CAL_DAY_DT])","columnType":"Calculated"},{"name":"Year_Quarter","dataType":"String","isHidden":false,"expression":"DTRB_PERF_DATES[CalYear] \u0026 ' ' \u0026 'Q'\u0026 QUARTER(DTRB_PERF_DATES[CAL_DAY_DT])","columnType":"Calculated"},{"name":"Quarter","dataType":"String","isHidden":false,"expression":"QUARTER(DTRB_PERF_DATES[CAL_DAY_DT])","columnType":"Calculated"},{"name":"Relative Year_Quarter","dataType":"String","isHidden":false,"expression":"if(DTRB_PERF_DATES[Current Year Flag]=TRUE(),'CY '\u0026 DTRB_PERF_DATES[Quarter_Q Count],if(AND(DTRB_PERF_DATES[Cal_Prior_Year_Flag]=TRUE(), AND(DTRB_PERF_DATES[Quarter]=QUARTER(TODAY()),DTRB_PERF_DATES[Cal_PYTD_Flag]=TRUE())), 'PY Current Quarter',if(DTRB_PERF_DATES[Cal_Prior_Year_Flag]=TRUE(), 'PY ' \u0026 DTRB_PERF_DATES[Quarter_Q Count],if(DTRB_PERF_DATES[Cal_Prior_Year_2_Flag]=TRUE(), 'PY2 ' \u0026 DTRB_PERF_DATES[Quarter_Q Count]))))","columnType":"Calculated"},{"name":"WeekIndex","dataType":"String","isHidden":false,"expression":"YEAR(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT])*52+DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR]","columnType":"Calculated"},{"name":"MonthIndex","dataType":"String","isHidden":false,"expression":"YEAR(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT])*12+DTRB_PERF_DATES[Month_Number]","columnType":"Calculated"},{"name":"Month_Number","dataType":"String","isHidden":false,"expression":"MONTH(DTRB_PERF_DATES[CAL_DAY_DT])","columnType":"Calculated"}],"measures":[{"name":"Current Date","expression":"LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT')","isHidden":false},{"name":"Current Year","expression":"LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT],'CURRENT')","isHidden":false},{"name":"Prior Year","expression":"DTRB_PERF_DATES[Current Year] - 1","isHidden":false},{"name":"PYTD DATE","expression":"(LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT], today() -5 )) - 364","isHidden":false},{"name":"Prior Year 2","expression":"DTRB_PERF_DATES[Current Year] - 2","isHidden":false},{"name":"Current Year Max Week","expression":"CALCULATE(MAX(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR]), DTRB_PERF_DATES[YTD Flag]=TRUE())","isHidden":false}],"source":[{"expression":"let    Source = DB2.Database('podwh021:50000', 'podwh021', [HierarchicalNavigation=true, Implementation='Microsoft']),    COMMON = Source{[Schema='COMMON']}[Data],    DTRB_PERF_DATES1 = COMMON{[Name='DTRB_PERF_DATES']}[Data]in    DTRB_PERF_DATES1"}]},{"name":"ANBP_OTHERREV_SD","isHidden":false,"storageMode":"Import","columns":[{"name":"RALN_RFO_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RALN_MKT_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CalYr","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CalWk","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"max_cal_dt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Value","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Current_Year_Cal_Flag","dataType":"String","isHidden":false,"expression":"if(ANBP_OtherRev_SD[CalYr] = DTRB_PERF_DATES[Current Year], True, False)","columnType":"Calculated"},{"name":"Prior_year_cal_flag","dataType":"String","isHidden":false,"expression":"if(ANBP_OtherRev_SD[CalYr] = DTRB_PERF_DATES[Current Year] - 1, True, False)","columnType":"Calculated"},{"name":"Prior Sunday","dataType":"String","isHidden":false,"expression":"LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT], today() - 7)","columnType":"Calculated"},{"name":"WeekIndex","dataType":"String","isHidden":false,"expression":"Var year_num = (YEAR(ANBP_OTHERREV_SD[max_cal_dt])-YEAR(MIN(ANBP_OTHERREV_SD[max_cal_dt])))+1var year_diff = (YEAR(ANBP_OTHERREV_SD[max_cal_dt])-YEAR(MIN(ANBP_OTHERREV_SD[max_cal_dt])))Var week_num = WEEKNUM(ANBP_OTHERREV_SD[max_cal_dt])RETURN(year_diff*52)+week_num","columnType":"Calculated"},{"name":"ANBP Week #","dataType":"String","isHidden":false,"expression":"CALCULATE(    MAX(ANBP_OTHERREV_SD[WeekIndex])-1,    FILTER(ANBP_OTHERREV_SD, ANBP_OTHERREV_SD[max_cal_dt]\u003c=TODAY()))","columnType":"Calculated"},{"name":"WEEK TOTALS","dataType":"String","isHidden":false,"expression":"CALCULATE(              SUM(ANBP_OTHERREV_SD[Value]),               FILTER(ANBP_OTHERREV_SD,               ANBP_OTHERREV_SD[ANBP_OtherRev]='ANBP' \u0026\u0026               ANBP_OTHERREV_SD[WeekIndex]\u003e=135              \u0026\u0026 ANBP_OTHERREV_SD[WeekIndex]\u003c=138 ))","columnType":"Calculated"},{"name":"Product Roll Up","dataType":"String","isHidden":false,"expression":"RELATED(Mapping[Product Roll Up])","columnType":"Calculated"},{"name":"Month","dataType":"String","isHidden":false,"expression":"MONTH(ANBP_OTHERREV_SD[max_cal_dt])","columnType":"Calculated"},{"name":"Relationship Field","dataType":"String","isHidden":false,"expression":"ANBP_OTHERREV_SD[RALN_RFO_CDE]\u0026'-'\u0026ANBP_OTHERREV_SD[Product Roll Up]\u0026'-'\u0026ANBP_OTHERREV_SD[CalYr]\u0026'-'\u0026ANBP_OTHERREV_SD[Month]\u0026'-'\u0026ANBP_OTHERREV_SD[ANBP_OtherRev]","columnType":"Calculated"},{"name":"Mapping.Product Roll Up","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_Name.NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Month_PQ","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Relationship Field PQ","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Product_RFO","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ANBP_OtherRev","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"COMP_PYEE_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_CDE_With Duplicate NPG Rows","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Not YTD","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TS ID for Merge","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TENURE.ADJ_SVC_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TENURE.TSID for Merge","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Tenure Years","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TenureGroup_SaleDate","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"beg_mth_dt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Endof Month_Friday","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Product_SubGroup","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EnterpriseMapping_JoinValue","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"WID_Prod","dataType":"String","isHidden":false,"expression":"if(ANBP_OTHERREV_SD[ANBP_OtherRev] = 'WID', 'WID')","columnType":"Calculated"},{"name":"Sort Table.Sort Order","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Reporting Roll Up Product Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MonthEndDate","dataType":"DateTime","isHidden":false,"columnType":"Data"}],"measures":[{"name":"ANBP YOY Change","expression":"IF(ANBP_OTHERREV_SD[ANBP YTD]=BLANK(),BLANK(),IF(ANBP_OTHERREV_SD[ANBP PYTD]=BLANK(),BLANK(),(ANBP_OtherRev_SD[ANBP YTD] - ANBP_OtherRev_SD[ANBP PYTD]) / ANBP_OtherRev_SD[ANBP PYTD]))","isHidden":false},{"name":"CY ANBP","expression":"CALCULATE( sum(ANBP_OtherRev_SD[Value]),DTRB_PERF_DATES[Cal_YTD_Flag] = {TRUE},ANBP_OTHERREV_SD[ANBP_OtherRev] = 'ANBP')","isHidden":false},{"name":"ANBP PY","expression":"CALCULATE(     sum(ANBP_OtherRev_SD[Value]),     DTRB_PERF_DATES[Cal_Prior_Year_Flag] in {TRUE},    ANBP_OTHERREV_SD[ANBP_OtherRev] = 'ANBP')","isHidden":false},{"name":"ANBP PYTD","expression":"CALCULATE(  sum(ANBP_OtherRev_SD[Value]),  ANBP_OtherRev_SD[ANBP_OtherRev] = 'ANBP',  DTRB_PERF_DATES[Cal_PYTD_Flag] in {TRUE},ANBP_OTHERREV_SD[Not YTD]\u003c\u003e'Not YTD')","isHidden":false},{"name":"ANBP YTD","expression":"CALCULATE(     sum(ANBP_OtherRev_SD[Value]),     ANBP_OtherRev_SD[ANBP_OtherRev] = 'ANBP',    DTRB_PERF_DATES[Cal_YTD_Flag] = {TRUE()})","isHidden":false},{"name":"ANBP 52 Wk Total Week Index","expression":"Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT]='CURRENT'))-1Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_week -51VAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))RETURNCALCULATE(              SUM(ANBP_OTHERREV_SD[Value]),               FILTER(ANBP_OTHERREV_SD,               ANBP_OTHERREV_SD[ANBP_OtherRev]='ANBP' \u0026\u0026              ANBP_OTHERREV_SD[max_cal_dt]\u003e=StartDay \u0026\u0026 ANBP_OTHERREV_SD[max_cal_dt]\u003c=MaxDay ))","isHidden":false},{"name":"ANBP 13 Wk Total Week Index","expression":"Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT]='CURRENT'))-1Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_week -12VAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))RETURNCALCULATE(              SUM(ANBP_OTHERREV_SD[Value]),               FILTER(ANBP_OTHERREV_SD,               ANBP_OTHERREV_SD[ANBP_OtherRev]='ANBP' \u0026\u0026              ANBP_OTHERREV_SD[max_cal_dt]\u003e=StartDay \u0026\u0026 ANBP_OTHERREV_SD[max_cal_dt]\u003c=MaxDay ))","isHidden":false},{"name":"ANBP 4 Wk Total Week Index","expression":"Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT]='CURRENT'))-1Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_week -3VAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))RETURNCALCULATE(              SUM(ANBP_OTHERREV_SD[Value]),               FILTER(ANBP_OTHERREV_SD,               ANBP_OTHERREV_SD[ANBP_OtherRev]='ANBP' \u0026\u0026              ANBP_OTHERREV_SD[max_cal_dt]\u003e=StartDay \u0026\u0026 ANBP_OTHERREV_SD[max_cal_dt]\u003c=MaxDay ))","isHidden":false},{"name":"ANBP 52 Wk Avg","expression":"DIVIDE(ANBP_OTHERREV_SD[ANBP 52 Wk Total Week Index],52)","isHidden":false},{"name":"ANBP 13 Wk Avg","expression":"DIVIDE(ANBP_OTHERREV_SD[ANBP 13 Wk Total Week Index],13)","isHidden":false},{"name":"ANBP 4 Wk Avg","expression":"DIVIDE([ANBP 4 Wk Total Week Index],4)","isHidden":false},{"name":"ANBP PW","expression":"Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT]='CURRENT'))-1Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_week VAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))returnCALCULATE(SUM(ANBP_OtherRev_SD[Value]),  ANBP_OTHERREV_SD[ANBP_OtherRev] = 'ANBP',ANBP_OTHERREV_SD[max_cal_dt] \u003c= MaxDay,ANBP_OTHERREV_SD[max_cal_dt]\u003e=StartDay)","isHidden":false},{"name":"ANBP WoW %","expression":"DIVIDE((ANBP_OTHERREV_SD[ANBP PW]-ANBP_OTHERREV_SD[ANBP PW2]),ABS(ANBP_OTHERREV_SD[ANBP PW2]))","isHidden":false},{"name":"ANBP PYCW","expression":"CALCULATE(     sum(ANBP_OtherRev_SD[Value]),    DTRB_PERF_DATES[Prior Week Flag] = 'TRUE',     DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='PREVIOUS',    ANBP_OTHERREV_SD[ANBP_OtherRev] = 'ANBP')","isHidden":false},{"name":"ANBP CW v 4Wk Avg","expression":"DIVIDE(([ANBP PW]-[ANBP 4 Wk Avg]),ABS([ANBP 4 Wk Avg]),BLANK())","isHidden":false},{"name":"ANBP PYCW v CW %","expression":"DIVIDE(([ANBP PW]-[ANBP PYCW]),ABS([ANBP PYCW]),BLANK())","isHidden":false},{"name":"ANBP CW v 13Wk Avg","expression":"DIVIDE(([ANBP PW]-[ANBP 13 Wk Avg]),ABS([ANBP 13 Wk Avg]),BLANK())","isHidden":false},{"name":"ANBP CW v 52Wk Avg","expression":"DIVIDE(([ANBP PW]-[ANBP 52 Wk Avg]),ABS([ANBP 52 Wk Avg]),BLANK())","isHidden":false},{"name":"weeknum","expression":"[Current Date]-2","isHidden":false},{"name":"PY2 ANBP","expression":"CALCULATE(     sum(ANBP_OTHERREV_SD[Value]),     DTRB_PERF_DATES[Cal_Prior_Year_2_Flag] in {TRUE},     ANBP_OTHERREV_SD[ANBP_OtherRev] = 'ANBP')","isHidden":false},{"name":"ANBP PW2","expression":"Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT]='CURRENT'))-2Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_week VAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))returnCALCULATE(SUM(ANBP_OtherRev_SD[Value]),  ANBP_OTHERREV_SD[ANBP_OtherRev] = 'ANBP',ANBP_OTHERREV_SD[max_cal_dt] \u003c= MaxDay,ANBP_OTHERREV_SD[max_cal_dt]\u003e=StartDay)","isHidden":false},{"name":"YTD Weekly Average","expression":"Var max_week = CALCULATE(    MAX(ANBP_OTHERREV_SD[CalWk]),    FILTER(ANBP_OTHERREV_SD, ANBP_OTHERREV_SD[Current_Year_Cal_Flag]= TRUE()))Var TotalYTDANBP=    CALCULATE(     sum(ANBP_OtherRev_SD[Value]),     ANBP_OtherRev_SD[ANBP_OtherRev] = 'ANBP',    DTRB_PERF_DATES[Cal_YTD_Flag] = {TRUE()})RETURN DIVIDE( TotalYTDANBP,max_week)","isHidden":false},{"name":"Avg ANBP per FP","expression":"Var FPCount= DistinctCount(ANBP_OTHERREV_SD[EMP_NM])ReturnDivide(ANBP_OTHERREV_SD[ANBP YTD],FPCount)","isHidden":false},{"name":"ANBP","expression":"CALCULATE(     sum(ANBP_OtherRev_SD[Value]),     ANBP_OtherRev_SD[ANBP_OtherRev] = 'ANBP'     )","isHidden":false},{"name":"ANBP PW3","expression":"Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT]='CURRENT'))-3Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_week VAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))returnCALCULATE(SUM(ANBP_OtherRev_SD[Value]),  ANBP_OTHERREV_SD[ANBP_OtherRev] = 'ANBP',ANBP_OTHERREV_SD[max_cal_dt] \u003c= MaxDay,ANBP_OTHERREV_SD[max_cal_dt]\u003e=StartDay)","isHidden":false},{"name":"ANBP PW4","expression":"Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT]='CURRENT'))-4Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_week VAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))returnCALCULATE(SUM(ANBP_OtherRev_SD[Value]),  ANBP_OTHERREV_SD[ANBP_OtherRev] = 'ANBP',ANBP_OTHERREV_SD[max_cal_dt] \u003c= MaxDay,ANBP_OTHERREV_SD[max_cal_dt]\u003e=StartDay)","isHidden":false},{"name":"ANBP 52 Wk Max Week Index","expression":"Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT]='CURRENT'))-1Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_week -51VAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))RETURNMAXX( (SUMMARIZE(FILTER(ANBP_OTHERREV_SD, ANBP_OTHERREV_SD[ANBP_OtherRev]='ANBP' \u0026\u0026 (ANBP_OTHERREV_SD[ORZN_CDE_With Duplicate NPG Rows]= 'Advisor Group Including NPG' \u0026\u0026 (ANBP_OTHERREV_SD[max_cal_dt]\u003c=MaxDay \u0026\u0026 ANBP_OTHERREV_SD[max_cal_dt]\u003e=StartDay))), ANBP_OTHERREV_SD[max_cal_dt],--ANBP_OTHERREV_SD[RALN_RFO_CDE], 'Weekly ANBP', SUM(ANBP_OTHERREV_SD[Value]))),[Weekly ANBP]+0)","isHidden":false},{"name":"ANBP_YTD Daily Average","expression":"Divide(ANBP_OTHERREV_SD[ANBP YTD],\u0027Business Day Query\u0027[CY Business Day Count])","isHidden":false},{"name":"ANBP_PYTD Daily Average","expression":"Divide(ANBP_OTHERREV_SD[ANBP PYTD], \u0027Business Day Query\u0027[PY Business Day Count])","isHidden":false},{"name":"ANBP_DailyAvg_YOYChange","expression":"DIVIDE(ANBP_OTHERREV_SD[ANBP_YTD Daily Average],ANBP_OTHERREV_SD[ANBP_PYTD Daily Average])-1","isHidden":false},{"name":"ANBP_WeeklyNeedVs4WeekAvg","expression":"IF([Weekly Need ANBP]=BLANK(),BLANK(),(DIVIDE(ANBP_OTHERREV_SD[ANBP 4 Wk Avg],[Weekly Need ANBP])-1))","isHidden":false},{"name":"ANBP PW Highlight","expression":"if(ROUND(ANBP_OTHERREV_SD[ANBP PW],0)= ROUND(ANBP_OTHERREV_SD[ANBP 52 Wk Max Week Index],0),1,0)","isHidden":false},{"name":"ANBP PW2 Highlight","expression":"if(ROUND(ANBP_OTHERREV_SD[ANBP PW2],0)= ROUND(ANBP_OTHERREV_SD[ANBP 52 Wk Max Week Index],0),1,0)","isHidden":false},{"name":"ANBP PW3 Highlight","expression":"if(ROUND(ANBP_OTHERREV_SD[ANBP PW3],0)= ROUND(ANBP_OTHERREV_SD[ANBP 52 Wk Max Week Index],0),1,0)","isHidden":false},{"name":"ANBP PW4 Highlight","expression":"if(ROUND(ANBP_OTHERREV_SD[ANBP PW4],0)= ROUND(ANBP_OTHERREV_SD[ANBP 52 Wk Max Week Index],0),1,0)","isHidden":false},{"name":"ANBP 4 Wk Avg Icon","expression":"IF(AND(ANBP_OTHERREV_SD[ANBP 4 Wk Avg]\u003eANBP_OTHERREV_SD[ANBP 13 Wk Avg],ANBP_OTHERREV_SD[ANBP 4 Wk Avg]\u003eANBP_OTHERREV_SD[ANBP 52 Wk Avg]),1,IF(AND(ANBP_OTHERREV_SD[ANBP 4 Wk Avg]\u003cANBP_OTHERREV_SD[ANBP 13 Wk Avg],ANBP_OTHERREV_SD[ANBP 4 Wk Avg]\u003cANBP_OTHERREV_SD[ANBP 52 Wk Avg]),3,2))","isHidden":false},{"name":"ANBP 13 Wk Avg Icon","expression":"IF(AND(ANBP_OTHERREV_SD[ANBP 13 Wk Avg]\u003eANBP_OTHERREV_SD[ANBP 4 Wk Avg],ANBP_OTHERREV_SD[ANBP 13 Wk Avg]\u003eANBP_OTHERREV_SD[ANBP 52 Wk Avg]),1,IF(AND(ANBP_OTHERREV_SD[ANBP 13 Wk Avg]\u003cANBP_OTHERREV_SD[ANBP 4 Wk Avg],ANBP_OTHERREV_SD[ANBP 13 Wk Avg]\u003cANBP_OTHERREV_SD[ANBP 52 Wk Avg]),3,2))","isHidden":false},{"name":"ANBP 52 Wk Avg Icon","expression":"IF(AND(ANBP_OTHERREV_SD[ANBP 52 Wk Avg]\u003eANBP_OTHERREV_SD[ANBP 4 Wk Avg],ANBP_OTHERREV_SD[ANBP 52 Wk Avg]\u003eANBP_OTHERREV_SD[ANBP 13 Wk Avg]),1,IF(AND(ANBP_OTHERREV_SD[ANBP 52 Wk Avg]\u003cANBP_OTHERREV_SD[ANBP 4 Wk Avg],ANBP_OTHERREV_SD[ANBP 52 Wk Avg]\u003cANBP_OTHERREV_SD[ANBP 13 Wk Avg]),3,2))","isHidden":false},{"name":"ANBP PW Date","expression":"Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT]='CURRENT'))-1Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))ReturnCONCATENATE('Week Ending ',MaxDay)","isHidden":false},{"name":"ANBP PW2 Date","expression":"Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT]='CURRENT'))-2Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))ReturnCONCATENATE('Week Ending ',MaxDay)","isHidden":false},{"name":"ANBP PW3 Date","expression":"Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT]='CURRENT'))-3Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))ReturnCONCATENATE('Week Ending ',MaxDay)","isHidden":false},{"name":"ANBP PW4 Date","expression":"Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT]='CURRENT'))-4Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))ReturnCONCATENATE('Week Ending ',MaxDay)","isHidden":false},{"name":"CY WID","expression":"CALCULATE( sum(ANBP_OtherRev_SD[Value]),DTRB_PERF_DATES[Cal_YTD_Flag] in {TRUE}, ANBP_OTHERREV_SD[ANBP_OtherRev] = 'WID')","isHidden":false},{"name":"WID YOY %","expression":"IFERROR((ANBP_OTHERREV_SD[WID YTD] - ANBP_OtherRev_SD[WID PYTD]) / ANBP_OtherRev_SD[WID PYTD],BLANK())","isHidden":false},{"name":"PY WID","expression":"CALCULATE( sum(ANBP_OtherRev_SD[Value]), DTRB_PERF_DATES[Cal_Prior_Year_Flag] in {TRUE}, ANBP_OtherRev_SD[ANBP_OtherRev] = 'WID')","isHidden":false},{"name":"WID PYTD","expression":"CALCULATE( sum(ANBP_OtherRev_SD[Value]), ANBP_OtherRev_SD[ANBP_OtherRev] = 'WID', DTRB_PERF_DATES[Cal_PYTD_Flag] in {TRUE})","isHidden":false},{"name":"WID 4 Wk Total Week Index","expression":"// Var max_week = // CALCULATE(//     MAX(DTRB_PERF_DATES[WeekIndex]),//     FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[CAL_DAY_DT]=(TODAY())))-1// VAR start_week = max_week-3// RETURN// CALCULATE(//               SUM(ANBP_OTHERREV_SD[Value]),//                FILTER(ANBP_OTHERREV_SD,//                ANBP_OTHERREV_SD[ANBP_OtherRev]='WID' \u0026\u0026//               ANBP_OTHERREV_SD[WeekIndex]\u003e=start_week//               \u0026\u0026 ANBP_OTHERREV_SD[WeekIndex]\u003c=max_week))Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[CAL_DAY_DT]=(TODAY())))-1Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_week -3VAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))RETURNCALCULATE(              SUM(ANBP_OTHERREV_SD[Value]),               FILTER(ANBP_OTHERREV_SD,               ANBP_OTHERREV_SD[ANBP_OtherRev]='WID' \u0026\u0026              ANBP_OTHERREV_SD[max_cal_dt]\u003e=StartDay \u0026\u0026 ANBP_OTHERREV_SD[max_cal_dt]\u003c=MaxDay ))","isHidden":false},{"name":"WID 4 Wk Avg","expression":"DIVIDE([WID 4 Wk Total Week Index],4)","isHidden":false},{"name":"WID 13 Wk Total Week Index","expression":"Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[CAL_DAY_DT]=(TODAY())))-1Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_week -12VAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))RETURNCALCULATE(              SUM(ANBP_OTHERREV_SD[Value]),               FILTER(ANBP_OTHERREV_SD,               ANBP_OTHERREV_SD[ANBP_OtherRev]='WID' \u0026\u0026              ANBP_OTHERREV_SD[max_cal_dt]\u003e=StartDay \u0026\u0026 ANBP_OTHERREV_SD[max_cal_dt]\u003c=MaxDay ))","isHidden":false},{"name":"WID 13 Wk Avg","expression":"DIVIDE([WID 13 Wk Total Week Index],13)","isHidden":false},{"name":"WID WoW %","expression":"DIVIDE(([WID CW]-[WID PW2]),abs([WID PW2]),BLANK())","isHidden":false},{"name":"WID PYCW","expression":"CALCULATE(     sum(ANBP_OtherRev_SD[Value]),    DTRB_PERF_DATES[Prior Week Flag] = 'TRUE',     DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='PREVIOUS',    ANBP_OTHERREV_SD[ANBP_OtherRev] = 'WID')","isHidden":false},{"name":"WID PYCW v CW %","expression":"DIVIDE(([WID CW]-[WID PYCW]),ABS([WID PYCW]),BLANK())","isHidden":false},{"name":"WID YTD","expression":"CALCULATE(     sum(ANBP_OtherRev_SD[Value]),     ANBP_OtherRev_SD[ANBP_OtherRev] = 'WID',    DTRB_PERF_DATES[Cal_YTD_Flag] = {TRUE()})","isHidden":false},{"name":"WID PY","expression":"CALCULATE(     sum(ANBP_OtherRev_SD[Value]),         DTRB_PERF_DATES[Cal_Prior_Year_Flag] in {TRUE},         ANBP_OtherRev_SD[ANBP_OtherRev] = 'WID')","isHidden":false},{"name":"WID 52 Wk Total Week Index","expression":"Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[CAL_DAY_DT]=(TODAY())))-1Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_week -51VAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))RETURNCALCULATE(              SUM(ANBP_OTHERREV_SD[Value]),               FILTER(ANBP_OTHERREV_SD,               ANBP_OTHERREV_SD[ANBP_OtherRev]='WID' \u0026\u0026              ANBP_OTHERREV_SD[max_cal_dt]\u003e=StartDay \u0026\u0026 ANBP_OTHERREV_SD[max_cal_dt]\u003c=MaxDay ))","isHidden":false},{"name":"WID 52 Wk Avg","expression":"DIVIDE([WID 52 Wk Total Week Index],52)","isHidden":false},{"name":"WID CW v 4Wk Avg","expression":"DIVIDE(([WID CW]-[WID 4 Wk Avg]),ABS([WID 4 Wk Avg]),BLANK())","isHidden":false},{"name":"WID CW v 13Wk Avg","expression":"DIVIDE(([WID CW]-[WID 13 Wk Avg]),ABS([WID 13 Wk Avg]),BLANK())","isHidden":false},{"name":"WID CW v 52Wk Avg","expression":"DIVIDE(([WID CW]-[WID 52 Wk Avg]),ABS([WID 52 Wk Avg]),BLANK())","isHidden":false},{"name":"WID PY2","expression":"CALCULATE(     sum(ANBP_OTHERREV_SD[Value]),     DTRB_PERF_DATES[Cal_Prior_Year_2_Flag] in {TRUE},     ANBP_OTHERREV_SD[ANBP_OtherRev] = 'WID')","isHidden":false},{"name":"WID PW","expression":"// var PreWk = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR], DTRB_PERF_DATES[CAL_DAY_DT], today()) - 2Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[CAL_DAY_DT]=(TODAY())))-1Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_week VAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))returnCALCULATE(SUM(ANBP_OtherRev_SD[Value]),  ANBP_OTHERREV_SD[ANBP_OtherRev] = 'WID',ANBP_OTHERREV_SD[max_cal_dt] \u003c= MaxDay,ANBP_OTHERREV_SD[max_cal_dt]\u003e=StartDay)","isHidden":false},{"name":"ANBP+WID","expression":"ANBP_OTHERREV_SD[ANBP YTD]+ANBP_OTHERREV_SD[ANBP PYTD]+[WID YTD]+[WID PYTD]","isHidden":false},{"name":"WID_YTD Daily Average","expression":"Divide(ANBP_OTHERREV_SD[WID YTD],\u0027Business Day Query\u0027[CY Business Day Count])","isHidden":false},{"name":"WID_PYTD Daily Average","expression":"Divide(ANBP_OTHERREV_SD[WID PYTD], \u0027Business Day Query\u0027[PY Business Day Count])","isHidden":false},{"name":"WID_DailyAvg_YOYChange","expression":"If (ANBP_OTHERREV_SD[WID_YTD Daily Average]+[WID_PYTD Daily Average]=BLANK(),'-',DIVIDE(ANBP_OTHERREV_SD[WID_YTD Daily Average],[WID_PYTD Daily Average])-1)","isHidden":false},{"name":"WID_WeeklyNeedVs4WeekAvg","expression":"IF([Weekly Need WID]=BLANK(),'-',(DIVIDE(ANBP_OTHERREV_SD[WID 4 Wk Avg],[Weekly Need WID])-1))","isHidden":false},{"name":"WID PW Date","expression":"// var PreWk = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR], DTRB_PERF_DATES[CAL_DAY_DT], today()) - 2Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[CAL_DAY_DT]=(TODAY())))-1Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_week VAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))ReturnCONCATENATE('Week Ending ',MaxDay)","isHidden":false},{"name":"WID PW2","expression":"// var PrevWk2 = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR], DTRB_PERF_DATES[CAL_DAY_DT], today()) - 3Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[CAL_DAY_DT]=(TODAY())))-2Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_week VAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))returnCALCULATE(SUM(ANBP_OtherRev_SD[Value]),  ANBP_OTHERREV_SD[ANBP_OtherRev] = 'WID',ANBP_OTHERREV_SD[max_cal_dt] \u003c= MaxDay,ANBP_OTHERREV_SD[max_cal_dt]\u003e=StartDay)","isHidden":false},{"name":"WID PW3","expression":"// var PrevWk2 = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR], DTRB_PERF_DATES[CAL_DAY_DT], today()) - 3Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[CAL_DAY_DT]=(TODAY())))-3Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_week VAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))returnCALCULATE(SUM(ANBP_OtherRev_SD[Value]),  ANBP_OTHERREV_SD[ANBP_OtherRev] = 'WID',ANBP_OTHERREV_SD[max_cal_dt] \u003c= MaxDay,ANBP_OTHERREV_SD[max_cal_dt]\u003e=StartDay)","isHidden":false},{"name":"WID PW4","expression":"Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT]='CURRENT'))-4Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_week VAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))returnCALCULATE(SUM(ANBP_OtherRev_SD[Value]),  ANBP_OTHERREV_SD[ANBP_OtherRev] = 'WID',ANBP_OTHERREV_SD[max_cal_dt] \u003c= MaxDay,ANBP_OTHERREV_SD[max_cal_dt]\u003e=StartDay)","isHidden":false},{"name":"WID 52 Wk Max Week Index","expression":"Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[CAL_DAY_DT]=(TODAY())))-1Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_week -51VAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))RETURNMAXX( (SUMMARIZE(FILTER(ANBP_OTHERREV_SD, ANBP_OTHERREV_SD[ANBP_OtherRev]='WID' \u0026\u0026 (ANBP_OTHERREV_SD[ORZN_CDE_With Duplicate NPG Rows]= 'Advisor Group Including NPG' \u0026\u0026 (ANBP_OTHERREV_SD[max_cal_dt]\u003c=MaxDay \u0026\u0026 ANBP_OTHERREV_SD[max_cal_dt]\u003e=StartDay))), ANBP_OTHERREV_SD[max_cal_dt],--ANBP_OTHERREV_SD[RALN_RFO_CDE], 'Weekly WID', SUM(ANBP_OTHERREV_SD[Value]))),[Weekly WID]+0)","isHidden":false},{"name":"WID 4 Wk Avg Icon","expression":"IF(AND(ANBP_OTHERREV_SD[WID 4 Wk Avg]\u003eANBP_OTHERREV_SD[WID 13 Wk Avg],ANBP_OTHERREV_SD[WID 4 Wk Avg]\u003eANBP_OTHERREV_SD[WID 52 Wk Avg]),1,IF(AND(ANBP_OTHERREV_SD[WID 4 Wk Avg]\u003cANBP_OTHERREV_SD[WID 13 Wk Avg],ANBP_OTHERREV_SD[WID 4 Wk Avg]\u003cANBP_OTHERREV_SD[WID 52 Wk Avg]),3,2))","isHidden":false},{"name":"WID 13 Wk Avg Icon","expression":"IF(AND(ANBP_OTHERREV_SD[WID 13 Wk Avg]\u003eANBP_OTHERREV_SD[WID 4 Wk Avg],ANBP_OTHERREV_SD[WID 13 Wk Avg]\u003eANBP_OTHERREV_SD[WID 52 Wk Avg]),1,IF(AND(ANBP_OTHERREV_SD[WID 13 Wk Avg]\u003cANBP_OTHERREV_SD[WID 4 Wk Avg],ANBP_OTHERREV_SD[WID 13 Wk Avg]\u003cANBP_OTHERREV_SD[WID 52 Wk Avg]),3,2))","isHidden":false},{"name":"WID 52 Wk Avg Icon","expression":"IF(AND(ANBP_OTHERREV_SD[WID 52 Wk Avg]\u003eANBP_OTHERREV_SD[WID 4 Wk Avg],ANBP_OTHERREV_SD[WID 52 Wk Avg]\u003eANBP_OTHERREV_SD[WID 13 Wk Avg]),1,IF(AND(ANBP_OTHERREV_SD[WID 52 Wk Avg]\u003cANBP_OTHERREV_SD[WID 4 Wk Avg],ANBP_OTHERREV_SD[WID 52 Wk Avg]\u003cANBP_OTHERREV_SD[WID 13 Wk Avg]),3,2))","isHidden":false},{"name":"WID PW Highlight","expression":"IF([WID 52 Wk Max Week Index]= BLANK(),0,                    if(ROUND(ANBP_OTHERREV_SD[WID PW],0)= ROUND(ANBP_OTHERREV_SD[WID 52 Wk Max Week Index],0),1,0))","isHidden":false},{"name":"WID PW2 Highlight","expression":"IF([WID 52 Wk Max Week Index]= BLANK(),0,                        if(ROUND(ANBP_OTHERREV_SD[WID PW2],0)= ROUND(ANBP_OTHERREV_SD[WID 52 Wk Max Week Index],0),1,0))","isHidden":false},{"name":"WID PW3 Highlight","expression":"IF([WID 52 Wk Max Week Index]= BLANK(),0,                        if(ROUND(ANBP_OTHERREV_SD[WID PW3],0)= ROUND(ANBP_OTHERREV_SD[WID 52 Wk Max Week Index],0),1,0))","isHidden":false},{"name":"WID PW4 Highlight","expression":"IF([WID 52 Wk Max Week Index]= BLANK(),0,                        if(ROUND(ANBP_OTHERREV_SD[WID PW4],0)= ROUND(ANBP_OTHERREV_SD[WID 52 Wk Max Week Index],0),1,0))","isHidden":false},{"name":"CY Grid Revenue","expression":"CALCULATE( sum(ANBP_OtherRev_SD[Value]),DTRB_PERF_DATES[Cal_YTD_Flag] = {TRUE},ANBP_OTHERREV_SD[ANBP_OtherRev] = 'Grid Revenue')","isHidden":false},{"name":"Grid Revenue PY","expression":"CALCULATE(     sum(ANBP_OtherRev_SD[Value]),     DTRB_PERF_DATES[Cal_Prior_Year_Flag] in {TRUE},    ANBP_OTHERREV_SD[ANBP_OtherRev] = 'Grid Revenue')","isHidden":false},{"name":"PY2 Grid Revenue","expression":"CALCULATE(     sum(ANBP_OTHERREV_SD[Value]),     DTRB_PERF_DATES[Cal_Prior_Year_2_Flag] in {TRUE},     ANBP_OTHERREV_SD[ANBP_OtherRev] = 'Grid Revenue')","isHidden":false},{"name":"Grid Revenue YTD","expression":"CALCULATE(     sum(ANBP_OtherRev_SD[Value]),     ANBP_OtherRev_SD[ANBP_OtherRev] = 'Grid Revenue',    DTRB_PERF_DATES[Cal_YTD_Flag] = {TRUE()})","isHidden":false},{"name":"Grid Revenue CW","expression":"Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT]='CURRENT'))-1Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_week VAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))returnCALCULATE(SUM(ANBP_OtherRev_SD[Value]),  ANBP_OTHERREV_SD[ANBP_OtherRev] = 'Grid Revenue',ANBP_OTHERREV_SD[max_cal_dt] \u003c= MaxDay,ANBP_OTHERREV_SD[max_cal_dt]\u003e=StartDay)","isHidden":false},{"name":"Grid Revenue 13 Wk Total Week Index","expression":"Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT]='CURRENT'))-1Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_week -12VAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))RETURNCALCULATE(              SUM(ANBP_OTHERREV_SD[Value]),               FILTER(ANBP_OTHERREV_SD,               ANBP_OTHERREV_SD[ANBP_OtherRev]='Grid Revenue' \u0026\u0026              ANBP_OTHERREV_SD[max_cal_dt]\u003e=StartDay \u0026\u0026 ANBP_OTHERREV_SD[max_cal_dt]\u003c=MaxDay ))","isHidden":false},{"name":"Grid Revenue 13 Wk Avg","expression":"DIVIDE(ANBP_OTHERREV_SD[Grid Revenue 13 Wk Total Week Index],13)","isHidden":false},{"name":"Grid Revenue 4 Wk Total Week Index","expression":"Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT]='CURRENT'))-1Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_week -3VAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))RETURNCALCULATE(              SUM(ANBP_OTHERREV_SD[Value]),               FILTER(ANBP_OTHERREV_SD,               ANBP_OTHERREV_SD[ANBP_OtherRev]='Grid Revenue' \u0026\u0026              ANBP_OTHERREV_SD[max_cal_dt]\u003e=StartDay \u0026\u0026 ANBP_OTHERREV_SD[max_cal_dt]\u003c=MaxDay ))","isHidden":false},{"name":"Grid Revenue 4 Wk Avg","expression":"DIVIDE([Grid Revenue 4 Wk Total Week Index],4)","isHidden":false},{"name":"Grid Revenue 52 Wk Total Week Index","expression":"Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT]='CURRENT'))-1Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_week -51VAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))RETURNCALCULATE(              SUM(ANBP_OTHERREV_SD[Value]),               FILTER(ANBP_OTHERREV_SD,               ANBP_OTHERREV_SD[ANBP_OtherRev]='Grid Revenue' \u0026\u0026              ANBP_OTHERREV_SD[max_cal_dt]\u003e=StartDay \u0026\u0026 ANBP_OTHERREV_SD[max_cal_dt]\u003c=MaxDay ))","isHidden":false},{"name":"Grid Revenue 52 Wk Avg","expression":"DIVIDE(ANBP_OTHERREV_SD[Grid Revenue 52 Wk Total Week Index],52)","isHidden":false},{"name":"Grid Revenue CW v 13Wk Avg","expression":"DIVIDE(([Grid Revenue CW]-[Grid Revenue 13 Wk Avg]),ABS([Grid Revenue 13 Wk Avg]),BLANK())","isHidden":false},{"name":"Grid Revenue CW v 4Wk Avg","expression":"DIVIDE(([Grid Revenue CW]-[Grid Revenue 4 Wk Avg]),ABS([Grid Revenue 4 Wk Avg]),BLANK())","isHidden":false},{"name":"Grid Revenue CW v 52Wk Avg","expression":"DIVIDE(([Grid Revenue CW]-[Grid Revenue 52 Wk Avg]),ABS([Grid Revenue 52 Wk Avg]),BLANK())","isHidden":false},{"name":"Grid Revenue PW2","expression":"Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT]='CURRENT'))-2Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_week VAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))returnCALCULATE(SUM(ANBP_OtherRev_SD[Value]),  ANBP_OTHERREV_SD[ANBP_OtherRev] = 'Grid Revenue',ANBP_OTHERREV_SD[max_cal_dt] \u003c= MaxDay,ANBP_OTHERREV_SD[max_cal_dt]\u003e=StartDay)","isHidden":false},{"name":"Grid Revenue WoW %","expression":"DIVIDE((ANBP_OTHERREV_SD[Grid Revenue CW]-ANBP_OTHERREV_SD[Grid Revenue PW2]),ABS(ANBP_OTHERREV_SD[Grid Revenue PW2]))","isHidden":false},{"name":"Grid Revenue PYCW","expression":"CALCULATE(     sum(ANBP_OtherRev_SD[Value]),    DTRB_PERF_DATES[Prior Week Flag] = 'TRUE',     DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='PREVIOUS',    ANBP_OTHERREV_SD[ANBP_OtherRev] = 'Grid Revenue')","isHidden":false},{"name":"Grid Revenue PYCW v CW %","expression":"DIVIDE(([Grid Revenue CW]-[Grid Revenue PYCW]),ABS([Grid Revenue PYCW]),BLANK())","isHidden":false},{"name":"Grid Revenue PYTD","expression":"CALCULATE(  sum(ANBP_OtherRev_SD[Value]),  ANBP_OtherRev_SD[ANBP_OtherRev] = 'Grid Revenue',  DTRB_PERF_DATES[Cal_PYTD_Flag] in {TRUE},ANBP_OTHERREV_SD[Not YTD]\u003c\u003e'Not YTD')","isHidden":false},{"name":"Grid Revenue YOY Change","expression":"IF(ANBP_OTHERREV_SD[Grid Revenue YTD]=BLANK(),BLANK(),IF(ANBP_OTHERREV_SD[Grid Revenue PYTD]=BLANK(),BLANK(),(ANBP_OTHERREV_SD[Grid Revenue YTD] - ANBP_OTHERREV_SD[Grid Revenue PYTD]) / ANBP_OTHERREV_SD[Grid Revenue PYTD]))","isHidden":false},{"name":"Total Sales PY","expression":"CALCULATE(     sum(ANBP_OtherRev_SD[Value]),     DTRB_PERF_DATES[Cal_Prior_Year_Flag] in {TRUE},    ANBP_OTHERREV_SD[ANBP_OtherRev]= 'ANBP' ||  ANBP_OTHERREV_SD[ANBP_OtherRev]= 'WID')","isHidden":false},{"name":"CY Total Sales","expression":"CALCULATE( sum(ANBP_OtherRev_SD[Value]),DTRB_PERF_DATES[Cal_YTD_Flag] = {TRUE},ANBP_OTHERREV_SD[ANBP_OtherRev] = 'ANBP' || ANBP_OTHERREV_SD[ANBP_OtherRev] = 'WID')","isHidden":false},{"name":"PY2 Total Sales","expression":"CALCULATE(     sum(ANBP_OTHERREV_SD[Value]),     DTRB_PERF_DATES[Cal_Prior_Year_2_Flag] in {TRUE},     ANBP_OTHERREV_SD[ANBP_OtherRev] = 'ANBP' || ANBP_OTHERREV_SD[ANBP_OtherRev] = 'WID')","isHidden":false},{"name":"Total Sales YTD","expression":"CALCULATE(     sum(ANBP_OtherRev_SD[Value]),     OR(ANBP_OtherRev_SD[ANBP_OtherRev] = 'ANBP',ANBP_OtherRev_SD[ANBP_OtherRev] = 'WID'),    DTRB_PERF_DATES[Cal_YTD_Flag] = {TRUE()})","isHidden":false},{"name":"Total Sales PYTD","expression":"CALCULATE(  sum(ANBP_OtherRev_SD[Value]),  ANBP_OtherRev_SD[ANBP_OtherRev] = 'ANBP' || ANBP_OtherRev_SD[ANBP_OtherRev] = 'WID',  DTRB_PERF_DATES[Cal_PYTD_Flag] in {TRUE},ANBP_OTHERREV_SD[Not YTD]\u003c\u003e'Not YTD')","isHidden":false},{"name":"Total Sales YOY Change","expression":"IF(ANBP_OTHERREV_SD[Total Sales YTD]=BLANK(),BLANK(),IF(ANBP_OTHERREV_SD[Total Sales PYTD]=BLANK(),BLANK(),(ANBP_OTHERREV_SD[Total Sales YTD] - ANBP_OTHERREV_SD[Total Sales PYTD]) / ANBP_OTHERREV_SD[Total Sales PYTD]))","isHidden":false},{"name":"Total Sales_PYTD Daily Average","expression":"Divide(ANBP_OTHERREV_SD[Total Sales PYTD], \u0027Business Day Query\u0027[PY Business Day Count])","isHidden":false},{"name":"Total Sales_YTD Daily Average","expression":"Divide(ANBP_OTHERREV_SD[Total Sales YTD],\u0027Business Day Query\u0027[CY Business Day Count])","isHidden":false},{"name":"Total Sales_DailyAvg_YOYChange","expression":"DIVIDE(ANBP_OTHERREV_SD[Total Sales_YTD Daily Average],ANBP_OTHERREV_SD[Total Sales_PYTD Daily Average])-1","isHidden":false},{"name":"Total Sales 4 Wk Total Week Index","expression":"Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT]='CURRENT'))-1Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_week -3VAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))RETURNCALCULATE(              SUM(ANBP_OTHERREV_SD[Value]),               FILTER(ANBP_OTHERREV_SD,               OR(ANBP_OTHERREV_SD[ANBP_OtherRev]='ANBP', ANBP_OTHERREV_SD[ANBP_OtherRev]='WID') \u0026\u0026              ANBP_OTHERREV_SD[max_cal_dt]\u003e=StartDay \u0026\u0026 ANBP_OTHERREV_SD[max_cal_dt]\u003c=MaxDay ))","isHidden":false},{"name":"Total Sales 4 Wk Avg","expression":"DIVIDE([Total Sales 4 Wk Total Week Index],4)","isHidden":false},{"name":"Total Sales 13 Wk Total Week Index","expression":"Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT]='CURRENT'))-1Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_week -12VAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))RETURNCALCULATE(              SUM(ANBP_OTHERREV_SD[Value]),               FILTER(ANBP_OTHERREV_SD,               OR(ANBP_OTHERREV_SD[ANBP_OtherRev]='ANBP', ANBP_OTHERREV_SD[ANBP_OtherRev]='WID') \u0026\u0026              ANBP_OTHERREV_SD[max_cal_dt]\u003e=StartDay \u0026\u0026 ANBP_OTHERREV_SD[max_cal_dt]\u003c=MaxDay ))","isHidden":false},{"name":"Total Sales 13 Wk Avg","expression":"DIVIDE(ANBP_OTHERREV_SD[Total Sales 13 Wk Total Week Index],13)","isHidden":false},{"name":"Total Sales 52 Wk Total Week Index","expression":"Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT]='CURRENT'))-1Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_week -51VAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))RETURNCALCULATE(              SUM(ANBP_OTHERREV_SD[Value]),               FILTER(ANBP_OTHERREV_SD,               OR(ANBP_OTHERREV_SD[ANBP_OtherRev]='ANBP',ANBP_OTHERREV_SD[ANBP_OtherRev]='WID') \u0026\u0026              ANBP_OTHERREV_SD[max_cal_dt]\u003e=StartDay \u0026\u0026 ANBP_OTHERREV_SD[max_cal_dt]\u003c=MaxDay ))","isHidden":false},{"name":"Total Sales 52 Wk Avg","expression":"DIVIDE(ANBP_OTHERREV_SD[Total Sales 52 Wk Total Week Index],52)","isHidden":false},{"name":"Total Sales 4 Wk Avg Icon","expression":"IF(AND(ANBP_OTHERREV_SD[Total Sales 4 Wk Avg]\u003eANBP_OTHERREV_SD[Total Sales 13 Wk Avg],ANBP_OTHERREV_SD[Total Sales 4 Wk Avg]\u003eANBP_OTHERREV_SD[Total Sales 52 Wk Avg]),1,IF(AND(ANBP_OTHERREV_SD[Total Sales 4 Wk Avg]\u003cANBP_OTHERREV_SD[Total Sales 13 Wk Avg],ANBP_OTHERREV_SD[Total Sales 4 Wk Avg]\u003cANBP_OTHERREV_SD[Total Sales 52 Wk Avg]),3,2))","isHidden":false},{"name":"Total Sales 13 Wk Avg Icon","expression":"IF(AND(ANBP_OTHERREV_SD[Total Sales 13 Wk Avg]\u003eANBP_OTHERREV_SD[Total Sales 4 Wk Avg],ANBP_OTHERREV_SD[Total Sales 13 Wk Avg]\u003eANBP_OTHERREV_SD[Total Sales 52 Wk Avg]),1,IF(AND(ANBP_OTHERREV_SD[Total Sales 13 Wk Avg]\u003cANBP_OTHERREV_SD[Total Sales 4 Wk Avg],ANBP_OTHERREV_SD[Total Sales 13 Wk Avg]\u003cANBP_OTHERREV_SD[Total Sales 52 Wk Avg]),3,2))","isHidden":false},{"name":"Total Sales 52 Wk Avg Icon","expression":"IF(AND(ANBP_OTHERREV_SD[Total Sales 52 Wk Avg]\u003eANBP_OTHERREV_SD[Total Sales 4 Wk Avg],ANBP_OTHERREV_SD[Total Sales 52 Wk Avg]\u003eANBP_OTHERREV_SD[Total Sales 13 Wk Avg]),1,IF(AND(ANBP_OTHERREV_SD[Total Sales 52 Wk Avg]\u003cANBP_OTHERREV_SD[Total Sales 4 Wk Avg],ANBP_OTHERREV_SD[Total Sales 52 Wk Avg]\u003cANBP_OTHERREV_SD[Total Sales 13 Wk Avg]),3,2))","isHidden":false},{"name":"Total Sales 52 Wk Max Week Index","expression":"Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT]='CURRENT'))-1Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_week -51VAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))RETURNMAXX( (SUMMARIZE(FILTER(ANBP_OTHERREV_SD, OR(ANBP_OTHERREV_SD[ANBP_OtherRev]='ANBP', ANBP_OTHERREV_SD[ANBP_OtherRev]='WID') \u0026\u0026 (ANBP_OTHERREV_SD[ORZN_CDE_With Duplicate NPG Rows]= 'Advisor Group Including NPG' \u0026\u0026 (ANBP_OTHERREV_SD[max_cal_dt]\u003c=MaxDay \u0026\u0026 ANBP_OTHERREV_SD[max_cal_dt]\u003e=StartDay))), ANBP_OTHERREV_SD[max_cal_dt],--ANBP_OTHERREV_SD[RALN_RFO_CDE], 'Weekly ANBP', SUM(ANBP_OTHERREV_SD[Value]))),[Weekly ANBP]+0)","isHidden":false},{"name":"Total Sales PW4","expression":"Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT]='CURRENT'))-4Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_week VAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))returnCALCULATE(SUM(ANBP_OtherRev_SD[Value]),  OR(ANBP_OTHERREV_SD[ANBP_OtherRev] = 'ANBP',ANBP_OTHERREV_SD[ANBP_OtherRev] = 'WID'),ANBP_OTHERREV_SD[max_cal_dt] \u003c= MaxDay,ANBP_OTHERREV_SD[max_cal_dt]\u003e=StartDay)","isHidden":false},{"name":"Total Sales PW3","expression":"Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT]='CURRENT'))-3Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_week VAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))returnCALCULATE(SUM(ANBP_OtherRev_SD[Value]),  OR(ANBP_OTHERREV_SD[ANBP_OtherRev] = 'ANBP',ANBP_OTHERREV_SD[ANBP_OtherRev] = 'WID'),ANBP_OTHERREV_SD[max_cal_dt] \u003c= MaxDay,ANBP_OTHERREV_SD[max_cal_dt]\u003e=StartDay)","isHidden":false},{"name":"Total Sales PW2","expression":"Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT]='CURRENT'))-2Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_week VAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))returnCALCULATE(SUM(ANBP_OtherRev_SD[Value]),  OR(ANBP_OTHERREV_SD[ANBP_OtherRev] = 'ANBP',ANBP_OTHERREV_SD[ANBP_OtherRev] = 'WID'),ANBP_OTHERREV_SD[max_cal_dt] \u003c= MaxDay,ANBP_OTHERREV_SD[max_cal_dt]\u003e=StartDay)","isHidden":false},{"name":"Total Sales PW","expression":"Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT]='CURRENT'))-1Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_week VAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))returnCALCULATE(SUM(ANBP_OtherRev_SD[Value]),  OR(ANBP_OTHERREV_SD[ANBP_OtherRev] = 'ANBP',ANBP_OTHERREV_SD[ANBP_OtherRev] = 'WID'),ANBP_OTHERREV_SD[max_cal_dt] \u003c= MaxDay,ANBP_OTHERREV_SD[max_cal_dt]\u003e=StartDay)","isHidden":false},{"name":"Total Sales PW4 Highlight","expression":"if(ROUND(ANBP_OTHERREV_SD[Total Sales PW4],0)= ROUND(ANBP_OTHERREV_SD[Total Sales 52 Wk Max Week Index],0),1,0)","isHidden":false},{"name":"Total Sales PW3 Highlight","expression":"if(ROUND(ANBP_OTHERREV_SD[Total Sales PW3],0)= ROUND(ANBP_OTHERREV_SD[Total Sales 52 Wk Max Week Index],0),1,0)","isHidden":false},{"name":"Total Sales PW2 Highlight","expression":"if(ROUND(ANBP_OTHERREV_SD[Total Sales PW2],0)= ROUND(ANBP_OTHERREV_SD[Total Sales 52 Wk Max Week Index],0),1,0)","isHidden":false},{"name":"Total Sales PW Highlight","expression":"if(ROUND(ANBP_OTHERREV_SD[Total Sales PW],0)= ROUND(ANBP_OTHERREV_SD[Total Sales 52 Wk Max Week Index],0),1,0)","isHidden":false},{"name":"WID YTD+WID PYTD","expression":"[WID YTD]+[WID PYTD]","isHidden":false},{"name":"WID CW","expression":"var CurWk = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR], DTRB_PERF_DATES[CAL_DAY_DT], today()) - 1returnCALCULATE(SUM(ANBP_OtherRev_SD[Value]),  DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current',  ANBP_OTHERREV_SD[ANBP_OtherRev] = 'WID',DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = CurWk)","isHidden":false},{"name":"TotalSales_WeeklyNeedVs4WeekAvg","expression":"IF([Weekly Need TotalSales]=BLANK(),BLANK(),(DIVIDE(ANBP_OTHERREV_SD[Total Sales 4 Wk Avg],[Weekly Need TotalSales])-1))","isHidden":false}],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////VSSHR//SHARED//Public//DI and BI//Distribution Dashboard//ANBP_OtherRev_SD.csv'),[Delimiter=',', Columns=14, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'CalYr', Int64.Type}, {'CalWk', Int64.Type}, {'max_cal_dt', type date}, {'Value', type number}}),    #'Appended WID' = Table.Combine({#'Changed Type', WID_Snowflake}),    #'Remove WID Current week rows' = Table.SelectRows(#'Appended WID', each ([Current Week Indicator] \u003c\u003e 'Current Week WID')),    #'Remove WID Current Week Column' = Table.RemoveColumns(#'Remove WID Current week rows',{'Current Week Indicator'}),    #'Append Grid Revenue' = Table.Combine({#'Remove WID Current Week Column', #'Grid Revenue'}),    #'Merged Queries' = Table.NestedJoin(#'Append Grid Revenue', {'Product'}, Mapping, {'Product'}, 'Mapping', JoinKind.LeftOuter),    #'Expanded Mapping' = Table.ExpandTableColumn(#'Merged Queries', 'Mapping', {'Product Roll Up'}, {'Mapping.Product Roll Up'}),    #'Merged Queries1' = Table.NestedJoin(#'Expanded Mapping', {'RALN_RFO_CDE'}, RFO_Name, {'RFO_CODE'}, 'RFO_Name', JoinKind.LeftOuter),    #'Expanded RFO_Name' = Table.ExpandTableColumn(#'Merged Queries1', 'RFO_Name', {'NM'}, {'RFO_Name.NM'}),    #'Added Custom1' = Table.AddColumn(#'Expanded RFO_Name', 'Month_PQ', each Date.Month([max_cal_dt])),    #'Added Custom' = Table.AddColumn(#'Added Custom1', 'Relationship Field PQ', each [RALN_RFO_CDE]\u0026'-'\u0026[Product]\u0026'-'\u0026Number.ToText([CalYr])\u0026'-'\u0026Number.ToText([Month_PQ])\u0026'-'\u0026[ANBP_OtherRev]),    #'Added Custom2' = Table.AddColumn(#'Added Custom', 'Product_RFO', each [Mapping.Product Roll Up]\u0026'-'\u0026[RALN_RFO_CDE]),    #'Added Custom3' = Table.AddColumn(#'Added Custom2', 'ORZN_CDE_With Duplicate NPG Rows', each if [Product] = 'TRUST' then 'Trust' else if [Product] = '529 COLLEGE PLANS' then '529 College Plans' else 'Advisor Group Including NPG'),    #'Append Additional NPG Rows' = Table.Combine({#'Added Custom3', #'ANBP_OTHERREV_SD (NPG)'}),    #'Append UL VUL Excess' = Table.Combine({#'Append Additional NPG Rows', #'UL VUL Excess_Append Query'}),    #'Removed Columns' = Table.RemoveColumns(#'Append UL VUL Excess',{'MONTH'}),    #'Added Custom4' = Table.AddColumn(#'Removed Columns', 'TS ID for Merge', each Text.Trim([COMP_PYEE_ID])),    #'Merged Queries2' = Table.NestedJoin(#'Added Custom4', {'TS ID for Merge'}, TENURE, {'TSID for Merge'}, 'TENURE', JoinKind.LeftOuter),    #'Expanded TENURE' = Table.ExpandTableColumn(#'Merged Queries2', 'TENURE', {'ADJ_SVC_DT', 'TSID for Merge'}, {'TENURE.ADJ_SVC_DT', 'TENURE.TSID for Merge'}),    #'Added Custom5' = Table.AddColumn(#'Expanded TENURE', 'Tenure Years', each ([max_cal_dt]-[TENURE.ADJ_SVC_DT])/365),    #'Changed Type1' = Table.TransformColumnTypes(#'Added Custom5',{{'Tenure Years', type number}}),    #'Added Conditional Column' = Table.AddColumn(#'Changed Type1', 'TenureGroup_SaleDate', each if [Tenure Years] \u003c= 1 then 'NFR1' else if [Tenure Years] \u003c= 2 then 'NFR2' else if [Tenure Years] \u003c= 3 then 'NFR3' else if [Tenure Years] \u003c= 4 then 'NFR4' else if [Tenure Years] \u003c= 5 then 'VET5' else if [Tenure Years] \u003c= 6 then 'VET6' else if [Tenure Years] \u003c= 7 then 'VET7' else 'VET8+'),    #'Replaced Errors' = Table.ReplaceErrorValues(#'Added Conditional Column', {{'TenureGroup_SaleDate', 'Blank'}}),    #'Remove RFRB rows' = Table.SelectRows(#'Replaced Errors', each ([ANBP_OtherRev] \u003c\u003e 'OtherRev')),    #'Merge Sort Table' = Table.NestedJoin(#'Remove RFRB rows', {'ORZN_CDE_With Duplicate NPG Rows'}, #'Sort Table', {'Advisor Group_Product'}, 'Sort Table', JoinKind.LeftOuter),    #'Expanded Sort Table' = Table.ExpandTableColumn(#'Merge Sort Table', 'Sort Table', {'Sort Order'}, {'Sort Table.Sort Order'})in    #'Expanded Sort Table'"}]},{"name":"RFO_Market","isHidden":false,"storageMode":"Import","columns":[{"name":"ORZN_ZONE_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MARKET","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Channel","dataType":"String","isHidden":false,"expression":"if(RFO_Market[RFO] in {'0383'}, 'Virtual Advice',if(RFO_Market[RFO] in {'0716'},'TAN',if(RFO_Market[RFO] in {'0714'},'Strategic Partners','Thrivent Advisor Group')))","columnType":"Calculated"},{"name":"Division","dataType":"String","isHidden":false,"expression":"if(RFO_Market[RFO] IN {'0283', '0365', '0435', '0496', '0810'}, 'Central', if(RFO_Market[RFO] IN {'0115', '0165', '0190', '0240', '0361', '0384'}, 'East', if(RFO_Market[RFO] IN {'0291', '0410', '0475', '0525', '0529'}, 'West', 'Other')))","columnType":"Calculated"},{"name":"Region","dataType":"String","isHidden":false,"expression":"IF(RFO_Market[RFO] IN {'0361', '0365', '0435', '0496'}, 'Established', IF(RFO_Market[RFO] IN {'0165', '0240', '0283', '0291', '0410', '0525'}, 'Growth', IF(RFO_Market[RFO] IN {'0115', '0190', '0384', '0475', '0529'}, 'Invest', IF(RFO_Market[RFO] = '0810', 'Colorado Springs', 'Other'))))","columnType":"Calculated"},{"name":"Adjusted RFO","dataType":"String","isHidden":false,"expression":"IF(RFO_Market[RFO] = '0001','0001',RFO_Market[RFO])","columnType":"Calculated"},{"name":"Advisor Group","dataType":"String","isHidden":false,"expression":"RELATED(\u0027RFO_Name\u0027[NM])","columnType":"Calculated"},{"name":"MVP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Advisor Group Shortened","dataType":"String","isHidden":false,"expression":"SWITCH(RFO_Market[Advisor Group],'0115-Northeast Advisor Group', '0115-Northeast','0190-Southeast Advisor Group', '0190-Southeast','0283-North Star Advisor Group', '0283-North Star','0291-Heartland Advisor Group', '0291-Heartland','0361-Great Lakes Advisor Group', '0361-Great Lakes','0384-South Central Advisor Group', '0384-South Central','0435-Midwest Rockies Advisor Group', '0435-Midwest Rockies','0525-West Advisor Group', '0525-West','0383-Virtual Advice Team','0383-Virtual Advice','0714-Newman Sales Comp','0714-Strategic Partners','0716-Thrivent Advisor Network','0716-TAN',RFO_Market[Advisor Group])","columnType":"Calculated"},{"name":"Experienced Advisor","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Channel_FilterForGoals","dataType":"String","isHidden":false,"expression":"if(RFO_Market[RFO] in {'0383','0716','0714'},RFO_Market[RFO],'Thrivent Advisor Group')","columnType":"Calculated"}],"measures":[],"source":[{"expression":"let    Source = DB2.Database('podwh021:50000', 'podwh021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT distinct  x.ORZN_ZONE_CDE, x.RFO,x.MVP_CDE,x.market#(lf)FROM#(lf)(#(lf)SELECT #(lf)   T1.CURR_ROW_IND as curr_row, #(lf)   substr( t1.ORZN_ZONE_CDE,1,4) as RFO,#(lf)   t1.ORZN_sub_DEPT_CDE as MVP_CDE,#(lf)  /* t1.ORZN_DEPT_cde as RFO, */#(lf)   t1.ORZN_ZONE_CDE,#(lf)   substr( t1.ORZN_ZONE_CDE,6,2) as Market, #(lf)    t1.ORZN_ZONE_DSCR, #(lf)  t1.EFF_BEG_TMSP AS BEG_DT, #(lf)   (CASE#(lf)          WHEN t1.EFF_END_TMSP IS NULL THEN \u00279999-12-31\u0027#(lf)          ELSE t1.EFF_END_TMSP#(lf)          END)  AS END_DT#(lf)      FROM semantic.SALES_HIERARCHY_DIMENSION t1#(lf)      ORDER BY t1.SALE_HIER_ID,#(lf)               t1.EFF_BEG_TMSP#(lf)) AS X#(lf)WHERE X.CURR_ROW = \u0027Y\u0027 AND X.END_DT \u003e= X.BEG_DT#(lf)and x.rfo in (\u00270001\u0027,\u00270115\u0027,\u00270190\u0027,\u00270283\u0027,\u00270291\u0027,\u00270361\u0027,\u00270383\u0027,\u00270384\u0027,\u00270435\u0027,\u00270525\u0027,\u00270714\u0027,\u00270716\u0027)#(lf)      #(lf);']),    #'Filtered Rows' = Table.SelectRows(Source, each ([MVP_CDE] \u003c\u003e '          ')),    #'Added Conditional Column' = Table.AddColumn(#'Filtered Rows', 'Experienced Advisor', each if [MARKET] = '01' then 'PMC - Market 1' else if [MARKET] = '59' then 'PMC - Market 59' else if [MARKET] = '69' then 'GPA - Market 69' else if [MARKET] = '79' then 'GPD - Market 79' else if [MARKET] = '98' then 'NPG - Market 98' else if [MARKET] = '99' then 'NPG - Market 99' else null)in    #'Added Conditional Column'"}]},{"name":"Table","isHidden":false,"storageMode":"Import","columns":[{"name":"Metric","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"Metric Order","dataType":"String","isHidden":false,"expression":"IF(\u0027Table\u0027[Metric]='ANBP',1,IF(\u0027Table\u0027[Metric]='Other Revenue',2,IF(\u0027Table\u0027[Metric]='NSC',3,IF(\u0027Table\u0027[Metric]='GDC',4,0))))","columnType":"Calculated"}],"measures":[],"source":[{"expression":"{'ANBP','Other Revenue','GDC','NSC'}"}]},{"name":"YTD_Goals","isHidden":false,"storageMode":"Import","columns":[{"name":"Level","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Metric","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Date_of_Goal","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Goal_Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"ANBP_Flag","dataType":"String","isHidden":false,"expression":"(YTD_Goals[Metric] = 'ANBP')","columnType":"Calculated"},{"name":"Current_Week_Flag","dataType":"String","isHidden":false,"expression":"if(YTD_Goals[Date_of_Goal] = DTRB_PERF_DATES[Current Date], True,FALSE)","columnType":"Calculated"},{"name":"WID_Flag","dataType":"String","isHidden":false,"expression":"(YTD_Goals[Metric] = 'OtherRevenue')","columnType":"Calculated"},{"name":"RFO Market_RFO","dataType":"String","isHidden":false,"expression":"SWITCH(YTD_Goals[Level],'0115','0115','0190','0190','0283','0283','0290','0290','0361','0361','0384','0384','0435','0435','0525','0525','Newman','0714','TAN','0716','Virtual Advice','0383','')","columnType":"Calculated"},{"name":"Market Leaders","dataType":"String","isHidden":false,"expression":"IF(LEFT(YTD_Goals[Level],4)=YTD_Goals[Level],'',IF(LEFT(YTD_Goals[Level],7)=YTD_Goals[Level],YTD_Goals[Level],''))","columnType":"Calculated"}],"measures":[{"name":"YTD ANBP Goal","expression":" var FilterChoice = --if(ISFILTERED(Market_Leaders[Experienced Advisor]),SELECTEDVALUE(Market_Leaders[ExperiencedAdvisor_CombinedNPGMarkets]),                    if(ISFILTERED(MVP[MVP]),SELECTEDVALUE(MVP[MVP_ID]),                   if(ISFILTERED(Market_Leaders[Market]),SELECTEDVALUE(RFO_Market[ORZN_ZONE_CDE]),                    if(ISFILTERED(RFO_Market[Advisor Group] ),SELECTEDVALUE(RFO_Market[RFO]),                   if(ISFILTERED(RFO_Market[Division]),SELECTEDVALUE(RFO_Market[Division]),                   if(ISFILTERED(RFO_Market[Region]),SELECTEDVALUE(RFO_Market[Region]),                   if(ISFILTERED(RFO_Market[Channel]),SELECTEDVALUE(RFO_Market[Channel]),'Enterprise Goal'))))))                   var PriorSunday =   CALCULATE(MAX(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT]),DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT]='PREVIOUS') Var YTD_Goal_ANBP= (IF(Max(ANBP_OTHERREV_SD[ORZN_CDE_With Duplicate NPG Rows])='NPG',CALCULATE(sum(YTD_GOALS[Goal_Amount]), YTD_GOALS[Metric] = 'ANBP', YTD_GOALS[Level] = 'NPG', YTD_GOALS[Date_of_Goal] = PriorSunday),IF(MIN(ANBP_OTHERREV_SD[ORZN_CDE_With Duplicate NPG Rows])='UL/VUL Excess',CALCULATE(LifeANBPPlan[ANBP YTD Plan],LifeANBPSort[Product Roll Up]='UL/VUL Excess'),IF(ISFILTERED(Market_Leaders[Experienced Advisor]),BLANK(),if(isfiltered(Market_Leaders[Market]),CALCULATE(sum(YTD_GOALS[Goal_Amount]), YTD_GOALS[Metric] = 'Annual New Business Production (ANBP)', YTD_GOALS[Level] = FilterChoice, YTD_GOALS[Date_of_Goal] = PriorSunday),if(FilterChoice = 'TFGT',CALCULATE(sum(YTD_GOALS[Goal_Amount]), YTD_GOALS[Metric] = 'Annual New Business Production (ANBP)', YTD_GOALS[Level] = FilterChoice, YTD_GOALS[Date_of_Goal] = PriorSunday),CALCULATE(sum(YTD_GOALS[Goal_Amount]), YTD_GOALS[Metric] = 'ANBP', YTD_GOALS[Level] = FilterChoice, YTD_GOALS[Date_of_Goal] = PriorSunday)))  ))))ReturnIF(YTD_Goal_ANBP=BLANK(),BLANK(),YTD_Goal_ANBP)","isHidden":false},{"name":"ANBP % YTD Goal","expression":"var FilterChoice = if(ISFILTERED(MVP[MVP]),SELECTEDVALUE(MVP[MVP_ID]),                   if(ISFILTERED(Market_Leaders[Market]),SELECTEDVALUE(RFO_Market[ORZN_ZONE_CDE]),                    if(ISFILTERED(RFO_Market[Advisor Group] ),SELECTEDVALUE(RFO_Market[RFO]),                   if(ISFILTERED(RFO_Market[Division]),SELECTEDVALUE(RFO_Market[Division]),                   if(ISFILTERED(RFO_Market[Region]),SELECTEDVALUE(RFO_Market[Region]),                   if(ISFILTERED(RFO_Market[Channel]),SELECTEDVALUE(RFO_Market[Channel]),'Enterprise Goal'))))))                   var PriorSunday =   CALCULATE(MAX(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT]),DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT]='PREVIOUS')Var YTD_Goal_ANBP= (IF(Max(ANBP_OTHERREV_SD[ORZN_CDE_With Duplicate NPG Rows])='NPG',CALCULATE(sum(YTD_GOALS[Goal_Amount]), YTD_GOALS[Metric] = 'ANBP', YTD_GOALS[Level] = 'NPG', YTD_GOALS[Date_of_Goal] = PriorSunday),IF(MIN(ANBP_OTHERREV_SD[ORZN_CDE_With Duplicate NPG Rows])='UL/VUL Excess',CALCULATE(LifeANBPPlan[ANBP YTD Plan],LifeANBPSort[Product Roll Up]='UL/VUL Excess'),IF(ISFILTERED(Market_Leaders[Experienced Advisor]),BLANK(),if(isfiltered(Market_Leaders[Market]),CALCULATE(sum(YTD_GOALS[Goal_Amount]), YTD_GOALS[Metric] = 'Annual New Business Production (ANBP)', YTD_GOALS[Level] = FilterChoice, YTD_GOALS[Date_of_Goal] = PriorSunday),if(FilterChoice = 'TFGT',CALCULATE(sum(YTD_GOALS[Goal_Amount]), YTD_GOALS[Metric] = 'Annual New Business Production (ANBP)', YTD_GOALS[Level] = FilterChoice, YTD_GOALS[Date_of_Goal] = PriorSunday),CALCULATE(sum(YTD_GOALS[Goal_Amount]), YTD_GOALS[Metric] = 'ANBP', YTD_GOALS[Level] = FilterChoice, YTD_GOALS[Date_of_Goal] = PriorSunday)))  ))))RETURNIF(YTD_Goal_ANBP=BLANK(),BLANK(),(DIVIDE([CY ANBP],YTD_GOALS[YTD ANBP Goal])))","isHidden":false},{"name":"Weekly Need ANBP","expression":"var FilterChoice = if(ISFILTERED(Market_Leaders[Experienced Advisor]),SELECTEDVALUE(Market_Leaders[ExperiencedAdvisor_CombinedNPGMarkets]),if(ISFILTERED(RFO_Market[Advisor Group]),SELECTEDVALUE(RFO_Market[RFO]),if(ISFILTERED(RFO_Market[Division]),SELECTEDVALUE(RFO_Market[Division]),if(ISFILTERED(RFO_Market[Region]),SELECTEDVALUE(RFO_Market[Region]),if(ISFILTERED(RFO_Market[Channel]),SELECTEDVALUE(RFO_Market[Channel]),if(ISFILTERED(RFO_Market[ORZN_ZONE_CDE]),SELECTEDVALUE(RFO_Market[ORZN_ZONE_CDE]),'Enterprise Goal'))))))VAR GoalFilter= COALESCE(SELECTEDVALUE(MVP[MVP_ID]),SELECTEDVALUE(RFO_Market[RFO]),SELECTEDVALUE(ANBP_OTHERREV_SD[ORZN_CDE_With Duplicate NPG Rows]))var PriorSunday =   CALCULATE(MAX(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT]),DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT]='PREVIOUS') var ye_goal =                                     CALCULATE(    sum(YTD_Goals[Goal_Amount]),         FILTER(YTD_Goals,         YTD_GOALS[Metric] = 'ANBP'        \u0026\u0026 YTD_GOALS[Level] = GoalFilter        \u0026\u0026 MAX(YTD_Goals[Date_of_Goal])=YTD_Goals[Date_of_Goal]\u0026\u0026 MAX(YTD_Goals[Date_of_Goal])\u003e=PriorSunday))VAR week_num = calculate(max(ANBP_OTHERREV_SD[CalWk]),DTRB_PERF_DATES[Cal_YTD_Flag] in {TRUE})Var weekly_needed = DIVIDE((ye_goal-ANBP_OTHERREV_SD[ANBP YTD]),(52-week_num))RETURNIF(ye_goal=BLANK(),BLANK(),--IF(YTD_Goals[YTD ANBP Goal]= BLANK(), BLANK(),weekly_needed)","isHidden":false},{"name":"ANBP % to YE Goal","expression":"var FilterChoice = if(ISFILTERED(MVP[MVP]),SELECTEDVALUE(MVP[MVP_ID]),if(ISFILTERED(RFO_Market[Advisor Group]),SELECTEDVALUE(RFO_Market[RFO]),if(ISFILTERED(RFO_Market[Division]),SELECTEDVALUE(RFO_Market[Division]),if(ISFILTERED(RFO_Market[Region]),SELECTEDVALUE(RFO_Market[Region]),if(ISFILTERED(RFO_Market[Channel]),SELECTEDVALUE(RFO_Market[Channel]))))))VAR GoalFilter= COALESCE(SELECTEDVALUE(MVP[MVP_ID]),SELECTEDVALUE(RFO_Market[RFO]),SELECTEDVALUE(RFO_Market[Channel]))var PriorSunday =   CALCULATE(MAX(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT]),DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT]='PREVIOUS')var ye_goal =                                     CALCULATE(    sum(YTD_Goals[Goal_Amount]),         FILTER(YTD_Goals,         YTD_GOALS[Metric] = 'ANBP'        \u0026\u0026 YTD_GOALS[Level] = GoalFilter        \u0026\u0026 MAX(YTD_Goals[Date_of_Goal])=YTD_Goals[Date_of_Goal]\u0026\u0026 MAX(YTD_Goals[Date_of_Goal])\u003e=PriorSunday))VAR week_num = calculate(max(ANBP_OTHERREV_SD[CalWk]),DTRB_PERF_DATES[Cal_YTD_Flag] in {TRUE})Var weekly_needed = DIVIDE((ye_goal-ANBP_OTHERREV_SD[ANBP YTD]),(52-week_num))RETURNIF(ye_goal=BLANK(),'-',ANBP_OTHERREV_SD[ANBP YTD]/ye_goal)","isHidden":false},{"name":"YTD WID Goal","expression":"var FilterChoice = if(ISFILTERED(Market_Leaders[Experienced Advisor]),SELECTEDVALUE(Market_Leaders[ExperiencedAdvisor_CombinedNPGMarkets]),                    if(ISFILTERED(MVP[MVP]),SELECTEDVALUE(MVP[MVP_ID]),                   if(ISFILTERED(Market_Leaders[Market]),SELECTEDVALUE(RFO_Market[ORZN_ZONE_CDE]),                    if(ISFILTERED(RFO_Market[Advisor Group] ),SELECTEDVALUE(RFO_Market[RFO]),                   if(ISFILTERED(RFO_Market[Division]),SELECTEDVALUE(RFO_Market[Division]),                   if(ISFILTERED(RFO_Market[Region]),SELECTEDVALUE(RFO_Market[Region]),                   if(ISFILTERED(RFO_Market[Channel]),SELECTEDVALUE(RFO_Market[Channel]),'Enterprise Goal')))))))                   var PriorSunday =   CALCULATE(MAX(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT]),DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT]='PREVIOUS') Var YTD_Goal_WID= (IF(Max(ANBP_OTHERREV_SD[ORZN_CDE_With Duplicate NPG Rows])='NPG',CALCULATE(sum(YTD_GOALS[Goal_Amount]), YTD_GOALS[Metric] = 'OtherRevenue', YTD_GOALS[Level] = 'NPG', YTD_GOALS[Date_of_Goal] = PriorSunday),IF(MIN(ANBP_OTHERREV_SD[ORZN_CDE_With Duplicate NPG Rows])='UL/VUL Excess',CALCULATE(LifeANBPPlan[ANBP YTD Plan],LifeANBPSort[Product Roll Up]='UL/VUL Excess'),IF(ISFILTERED(Market_Leaders[Experienced Advisor]),BLANK(),if(isfiltered(Market_Leaders[Market]),CALCULATE(sum(YTD_GOALS[Goal_Amount]), YTD_GOALS[Metric] = 'OtherRevenue', YTD_GOALS[Level] = FilterChoice, YTD_GOALS[Date_of_Goal] = PriorSunday),if(FilterChoice = 'TFGT',CALCULATE(sum(YTD_GOALS[Goal_Amount]), YTD_GOALS[Metric] = 'OtherRevenue', YTD_GOALS[Level] = FilterChoice, YTD_GOALS[Date_of_Goal] = PriorSunday),CALCULATE(sum(YTD_GOALS[Goal_Amount]), YTD_GOALS[Metric] = 'OtherRevenue', YTD_GOALS[Level] = FilterChoice, YTD_GOALS[Date_of_Goal] = PriorSunday)))  ))))ReturnIF(YTD_Goal_WID=BLANK(),BLANK(),YTD_Goal_WID)","isHidden":false},{"name":"WID % YTD Goal","expression":"var FilterChoice = if(ISFILTERED(MVP[MVP]),SELECTEDVALUE(MVP[MVP_ID]),                   if(ISFILTERED(Market_Leaders[Market]),SELECTEDVALUE(RFO_Market[ORZN_ZONE_CDE]),                    if(ISFILTERED(RFO_Market[Advisor Group] ),SELECTEDVALUE(RFO_Market[RFO]),                   if(ISFILTERED(RFO_Market[Division]),SELECTEDVALUE(RFO_Market[Division]),                   if(ISFILTERED(RFO_Market[Region]),SELECTEDVALUE(RFO_Market[Region]),                   if(ISFILTERED(RFO_Market[Channel]),SELECTEDVALUE(RFO_Market[Channel]),'Enterprise Goal'))))))                   var PriorSunday =   CALCULATE(MAX(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT]),DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT]='PREVIOUS') Var YTD_Goal_WID= (IF(Max(ANBP_OTHERREV_SD[ORZN_CDE_With Duplicate NPG Rows])='NPG',CALCULATE(sum(YTD_GOALS[Goal_Amount]), YTD_GOALS[Metric] = 'OtherRevenue', YTD_GOALS[Level] = 'NPG', YTD_GOALS[Date_of_Goal] = PriorSunday),IF(MIN(ANBP_OTHERREV_SD[ORZN_CDE_With Duplicate NPG Rows])='UL/VUL Excess',CALCULATE(LifeANBPPlan[ANBP YTD Plan],LifeANBPSort[Product Roll Up]='UL/VUL Excess'),IF(ISFILTERED(Market_Leaders[Experienced Advisor]),BLANK(),if(isfiltered(Market_Leaders[Market]),CALCULATE(sum(YTD_GOALS[Goal_Amount]), YTD_GOALS[Metric] = 'OtherRevenue', YTD_GOALS[Level] = FilterChoice, YTD_GOALS[Date_of_Goal] = PriorSunday),if(FilterChoice = 'TFGT',CALCULATE(sum(YTD_GOALS[Goal_Amount]), YTD_GOALS[Metric] = 'OtherRevenue', YTD_GOALS[Level] = FilterChoice, YTD_GOALS[Date_of_Goal] = PriorSunday),CALCULATE(sum(YTD_GOALS[Goal_Amount]), YTD_GOALS[Metric] = 'OtherRevenue', YTD_GOALS[Level] = FilterChoice, YTD_GOALS[Date_of_Goal] = PriorSunday)))  ))))RETURNIF(YTD_Goal_WID=BLANK(),BLANK(),(DIVIDE([CY WID],YTD_Goals[YTD WID Goal])))","isHidden":false},{"name":"WID % to YE Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Market[Advisor Group]),SELECTEDVALUE(RFO_Market[RFO]),if(ISFILTERED(MVP[MVP]),SELECTEDVALUE(MVP[MVP_ID])))VAR GoalFilter= COALESCE(SELECTEDVALUE(MVP[MVP_ID]),SELECTEDVALUE(RFO_Market[RFO]))--IF(SELECTEDVALUE(MVP[MVP_ID]) \u003c\u003e BLANK(),SELECTEDVALUE(MVP[MVP_ID]),SELECTEDVALUE(RFO_Market[RFO]))var PriorSunday =   CALCULATE(MAX(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT]),DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT]='PREVIOUS') var ye_goal =                                     CALCULATE(    sum(YTD_Goals[Goal_Amount]),         FILTER(YTD_Goals,         YTD_GOALS[Metric] = 'OtherRevenue'        \u0026\u0026 YTD_GOALS[Level] = GoalFilter        \u0026\u0026 MAX(YTD_Goals[Date_of_Goal])=YTD_Goals[Date_of_Goal]\u0026\u0026 MAX(YTD_Goals[Date_of_Goal])\u003e=PriorSunday))VAR week_num = calculate(max(ANBP_OTHERREV_SD[CalWk]),DTRB_PERF_DATES[Cal_YTD_Flag] in {TRUE})Var weekly_needed = DIVIDE((ye_goal-ANBP_OTHERREV_SD[ANBP YTD]),(52-week_num))RETURNIF(ye_goal=BLANK(),'-',ANBP_OTHERREV_SD[WID YTD]/ye_goal)--SELECTEDVALUE(RFO_Market[RFO])--IF(SELECTEDVALUE(MVP[MVP_ID]) \u003c\u003e BLANK(),SELECTEDVALUE(MVP[MVP_ID]),SELECTEDVALUE(RFO_Market[RFO]))","isHidden":false},{"name":"Weekly Need WID","expression":"var FilterChoice = if(ISFILTERED(RFO_Market[Advisor Group]),SELECTEDVALUE(RFO_Market[RFO]),if(ISFILTERED(RFO_Market[Division]),SELECTEDVALUE(RFO_Market[Division]),if(ISFILTERED(RFO_Market[Region]),SELECTEDVALUE(RFO_Market[Region]),if(ISFILTERED(RFO_Market[Channel]),SELECTEDVALUE(RFO_Market[Channel]),'Enterprise Goal'))))VAR GoalFilter= COALESCE(SELECTEDVALUE(MVP[MVP_ID]),SELECTEDVALUE(RFO_Market[RFO]),SELECTEDVALUE(ANBP_OTHERREV_SD[ORZN_CDE_With Duplicate NPG Rows]))var PriorSunday =   CALCULATE(MAX(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT]),DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT]='PREVIOUS') var ye_goal =                                     CALCULATE(    sum(YTD_Goals[Goal_Amount]),         FILTER(YTD_Goals,         YTD_GOALS[Metric] = 'OtherRevenue'        \u0026\u0026 YTD_GOALS[Level] = GoalFilter        \u0026\u0026 MAX(YTD_Goals[Date_of_Goal])=YTD_Goals[Date_of_Goal]\u0026\u0026 MAX(YTD_Goals[Date_of_Goal])\u003e=PriorSunday))VAR week_num = calculate(max(ANBP_OTHERREV_SD[CalWk]),DTRB_PERF_DATES[Cal_YTD_Flag] in {TRUE})Var weekly_needed = DIVIDE((ye_goal-ANBP_OTHERREV_SD[WID YTD]),(52-week_num))RETURN--IF(weekly_needed\u003c=0,BLANK(),weekly_needed)IF(ye_goal=BLANK(),BLANK(),--if (YTD_Goals[YTD WID Goal]=BLANK(),BLANK(),weekly_needed)","isHidden":false},{"name":"Total Sales % YTD Goal","expression":"If([YTD Total Sales Goal]='-','-',Divide([Total Sales YTD],[YTD Total Sales Goal])-1)","isHidden":false},{"name":"YTD Total Sales Goal","expression":"var FilterChoice = if(ISFILTERED(Market_Leaders[Experienced Advisor]),SELECTEDVALUE(Market_Leaders[ExperiencedAdvisor_CombinedNPGMarkets]),if(ISFILTERED(RFO_Market[Advisor Group]),SELECTEDVALUE(RFO_Market[RFO]),if(ISFILTERED(RFO_Market[Division]),SELECTEDVALUE(RFO_Market[Division]),if(ISFILTERED(RFO_Market[Region]),SELECTEDVALUE(RFO_Market[Region]),if(ISFILTERED(RFO_Market[Channel]),SELECTEDVALUE(RFO_Market[Channel]),if(ISFILTERED(RFO_Market[ORZN_ZONE_CDE]),SELECTEDVALUE(RFO_Market[ORZN_ZONE_CDE]),'Enterprise Goal'))))))VAR GoalFilter= IF(AND(FilterChoice='NPG', SELECTEDVALUE(ANBP_OTHERREV_SD[ORZN_CDE_With Duplicate NPG Rows])='NPG'),'NPG',IF(AND(FilterChoice='NPG', SELECTEDVALUE(ANBP_OTHERREV_SD[ORZN_CDE_With Duplicate NPG Rows])\u003c\u003e'NPG'),BLANK(),IF(SELECTEDVALUE(RFO_Market[RFO]) IN {'0383','0716'}, SELECTEDVALUE(RFO_Market[RFO]),                    IF(SELECTEDVALUE(RFO_Market[RFO]) ='0714', COALESCE(SELECTEDVALUE(MVP[MVP_ID]),SELECTEDVALUE(RFO_Market[RFO])),                    IF(SELECTEDVALUE(ANBP_OTHERREV_SD[ORZN_CDE_With Duplicate NPG Rows])='NPG', 'NPG',                    COALESCE(SELECTEDVALUE(Market_Leaders[RFO_ZONE_NM]),SELECTEDVALUE(MVP[MVP_ID]),SELECTEDVALUE(RFO_Market[RFO]),SELECTEDVALUE(RFO_Market[Channel_FilterForGoals]),'Enterprise Goal'))))))                   var PriorSunday =   CALCULATE(MAX(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT]),DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT]='PREVIOUS')Var YTD_Goal_TotalSales= (IF(Max(ANBP_OTHERREV_SD[ORZN_CDE_With Duplicate NPG Rows])='NPG',CALCULATE(sum(YTD_GOALS[Goal_Amount]), YTD_GOALS[Metric] = 'Total Sales', YTD_GOALS[Level] = 'NPG', YTD_GOALS[Date_of_Goal] = PriorSunday),                           IF(Max(ANBP_OTHERREV_SD[ORZN_CDE_With Duplicate NPG Rows]) IN {'UL/VUL Excess', 'Trust','529 College Plans'},BLANK(),                                CALCULATE(sum(YTD_GOALS[Goal_Amount]), YTD_GOALS[Metric] = 'Total Sales', YTD_GOALS[Level] = GoalFilter, YTD_GOALS[Date_of_Goal] = PriorSunday)))) RETURNIF(YTD_Goal_TotalSales=BLANK(),BLANK(),YTD_Goal_TotalSales)","isHidden":false},{"name":"Summary- Weekly Need WID","expression":"var FilterChoice = if(ISFILTERED(Market_Leaders[Experienced Advisor]),SELECTEDVALUE(Market_Leaders[ExperiencedAdvisor_CombinedNPGMarkets]),IF(ISFILTERED(Market_Leaders[Market]),SELECTEDVALUE(Market_Leaders[Market]),if(ISFILTERED(MVP[MVP]),SELECTEDVALUE(MVP[MVP_ID]),if(ISFILTERED(RFO_Market[Advisor Group]),SELECTEDVALUE(RFO_Market[RFO]),if(ISFILTERED(RFO_Market[Channel]),SELECTEDVALUE(RFO_Market[Channel_FilterForGoals]),'Enterprise Goal')))))var PriorSunday =   CALCULATE(MAX(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT]),DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT]='PREVIOUS')  var CurrentYear =   CALCULATE(MAX(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]),DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT')var ye_goal =                                     CALCULATE(    sum(YTD_Goals[Goal_Amount]),         FILTER(YTD_Goals,         YTD_GOALS[Metric] = 'OtherRevenue'        \u0026\u0026 YTD_GOALS[Level] = FilterChoice        \u0026\u0026 MAX(YTD_Goals[Date_of_Goal])=YTD_Goals[Date_of_Goal]\u0026\u0026 MAX(YTD_Goals[Date_of_Goal])\u003ePriorSunday))VAR week_num = calculate(max(ANBP_OTHERREV_SD[CalWk]),FILTER(ALL(ANBP_OTHERREV_SD),ANBP_OTHERREV_SD[CalYr]= CurrentYear))VAR YTD_WID= CALCULATE(ANBP_OTHERREV_SD[WID YTD], REMOVEFILTERS(ANBP_OTHERREV_SD[CalWk]))Var weekly_needed = IF(ye_goal=BLANK(),0,DIVIDE(ye_goal-YTD_WID,(52-week_num)))RETURNIF(MIN(ANBP_OTHERREV_SD[CalWk])\u003eweek_num,weekly_needed,0)","isHidden":false},{"name":"Summary- Weekly Need ANBP","expression":"var FilterChoice = if(ISFILTERED(Market_Leaders[Experienced Advisor]),SELECTEDVALUE(Market_Leaders[ExperiencedAdvisor_CombinedNPGMarkets]),IF(ISFILTERED(Market_Leaders[Market]),SELECTEDVALUE(Market_Leaders[Market]),if(ISFILTERED(MVP[MVP]),SELECTEDVALUE(MVP[MVP_ID]),if(ISFILTERED(RFO_Market[Advisor Group]),SELECTEDVALUE(RFO_Market[RFO]),if(ISFILTERED(RFO_Market[Channel]),SELECTEDVALUE(RFO_Market[Channel_FilterForGoals]),'Enterprise Goal')))))var PriorSunday =   CALCULATE(MAX(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT]),DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT]='PREVIOUS')  var CurrentYear =   CALCULATE(MAX(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]),DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT')var ye_goal =                                     CALCULATE(    sum(YTD_Goals[Goal_Amount]),         FILTER(YTD_Goals,         YTD_GOALS[Metric] = 'ANBP'        \u0026\u0026 YTD_GOALS[Level] = FilterChoice        \u0026\u0026 MAX(YTD_Goals[Date_of_Goal])=YTD_Goals[Date_of_Goal]\u0026\u0026 MAX(YTD_Goals[Date_of_Goal])\u003ePriorSunday))VAR week_num = calculate(max(ANBP_OTHERREV_SD[CalWk]),FILTER(ALL(ANBP_OTHERREV_SD),ANBP_OTHERREV_SD[CalYr]= CurrentYear))VAR YTD_ANBP= CALCULATE(ANBP_OTHERREV_SD[ANBP YTD], REMOVEFILTERS(ANBP_OTHERREV_SD[CalWk]))Var weekly_needed = IF(ye_goal= BLANK(),0,DIVIDE(ye_goal-YTD_ANBP,(52-week_num)))RETURNIF(MIN(ANBP_OTHERREV_SD[CalWk])\u003eweek_num,weekly_needed,0)","isHidden":false},{"name":"FilterChoice","expression":"if(ISFILTERED(Market_Leaders[Experienced Advisor]),SELECTEDVALUE(Market_Leaders[ExperiencedAdvisor_CombinedNPGMarkets]))","isHidden":false},{"name":"Summary- YTD ANBP Goal","expression":" var FilterChoice = if(ISFILTERED(Market_Leaders[Experienced Advisor]),SELECTEDVALUE(Market_Leaders[ExperiencedAdvisor_CombinedNPGMarkets]),                    if(ISFILTERED(MVP[MVP]),SELECTEDVALUE(MVP[MVP_ID]),                   if(ISFILTERED(Market_Leaders[Market]),SELECTEDVALUE(RFO_Market[ORZN_ZONE_CDE]),                    if(ISFILTERED(RFO_Market[Advisor Group] ),SELECTEDVALUE(RFO_Market[RFO]),                   if(ISFILTERED(RFO_Market[Channel]),SELECTEDVALUE(RFO_Market[Channel_FilterForGoals]),                    'Enterprise Goal')))))                   var PriorSunday =   CALCULATE(MAX(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT]),DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT]='PREVIOUS') Var YTD_Goal_ANBP= CALCULATE(sum(YTD_GOALS[Goal_Amount]), YTD_GOALS[Metric] = 'ANBP', YTD_GOALS[Level] = FilterChoice, YTD_GOALS[Date_of_Goal] = PriorSunday)ReturnIF(YTD_Goal_ANBP=BLANK(),'-',YTD_Goal_ANBP)","isHidden":false},{"name":"Summary- ANBP % YTD Goal","expression":"IF([Summary- YTD ANBP Goal]='-','-',(DIVIDE([CY ANBP],YTD_Goals[Summary- YTD ANBP Goal])))// var FilterChoice = if(ISFILTERED(MVP[MVP]),SELECTEDVALUE(MVP[MVP_ID]),//                    if(ISFILTERED(Market_Leaders[Market]),SELECTEDVALUE(RFO_Market[ORZN_ZONE_CDE]), //                    if(ISFILTERED(RFO_Market[Advisor Group] ),SELECTEDVALUE(RFO_Market[RFO]),//                    'Enterprise Goal')))                   // var PriorSunday =  //  CALCULATE(MAX(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT]),DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT]='PREVIOUS')// Var YTD_Goal_ANBP= CALCULATE(sum(YTD_GOALS[Goal_Amount]), YTD_GOALS[Metric] = 'ANBP', YTD_GOALS[Level] = FilterChoice, YTD_GOALS[Date_of_Goal] = PriorSunday)// RETURN// IF(YTD_Goal_ANBP=BLANK(),'-',(DIVIDE([CY ANBP],YTD_Goals[Summary- YTD ANBP Goal])))","isHidden":false},{"name":"Summary- YTD WID Goal","expression":" var FilterChoice = if(ISFILTERED(Market_Leaders[Experienced Advisor]),SELECTEDVALUE(Market_Leaders[ExperiencedAdvisor_CombinedNPGMarkets]),                    if(ISFILTERED(MVP[MVP]),SELECTEDVALUE(MVP[MVP_ID]),                   if(ISFILTERED(Market_Leaders[Market]),SELECTEDVALUE(RFO_Market[ORZN_ZONE_CDE]),                    if(ISFILTERED(RFO_Market[Advisor Group] ),SELECTEDVALUE(RFO_Market[RFO]),                   if(ISFILTERED(RFO_Market[Channel]),SELECTEDVALUE(RFO_Market[Channel_FilterForGoals]),                    'Enterprise Goal')))))                   var PriorSunday =   CALCULATE(MAX(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT]),DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT]='PREVIOUS') Var YTD_Goal_WID= CALCULATE(sum(YTD_GOALS[Goal_Amount]), YTD_GOALS[Metric] = 'OtherRevenue', YTD_GOALS[Level] = FilterChoice, YTD_GOALS[Date_of_Goal] = PriorSunday)ReturnIF(YTD_Goal_WID=BLANK(),'-',YTD_Goal_WID)","isHidden":false},{"name":"Summary- WID % YTD Goal","expression":"IF([Summary- YTD WID Goal]= '-', '-', (DIVIDE([CY WID],YTD_Goals[Summary- YTD WID Goal])))// var FilterChoice = if(ISFILTERED(MVP[MVP]),SELECTEDVALUE(MVP[MVP_ID]),//                    if(ISFILTERED(Market_Leaders[Market]),SELECTEDVALUE(RFO_Market[ORZN_ZONE_CDE]), //                    if(ISFILTERED(RFO_Market[Advisor Group] ),SELECTEDVALUE(RFO_Market[RFO]),//                    'Enterprise Goal')))                   // var PriorSunday =  //  CALCULATE(MAX(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT]),DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT]='PREVIOUS') // Var YTD_Goal_WID= CALCULATE(sum(YTD_GOALS[Goal_Amount]), YTD_GOALS[Metric] = 'OtherRevenue', YTD_GOALS[Level] = FilterChoice, YTD_GOALS[Date_of_Goal] = PriorSunday)// RETURN// IF(YTD_Goal_WID=BLANK(),'-',(DIVIDE([CY WID],YTD_Goals[Summary- YTD WID Goal])))","isHidden":false},{"name":"Summary- TotalSales % YTD Goal","expression":"IF([Summary- YTD TotalSales Goal]='-','-',(DIVIDE([Total Sales YTD],YTD_Goals[Summary- YTD TotalSales Goal])))// var FilterChoice = if(ISFILTERED(MVP[MVP]),SELECTEDVALUE(MVP[MVP_ID]),//                    if(ISFILTERED(Market_Leaders[Market]),SELECTEDVALUE(RFO_Market[ORZN_ZONE_CDE]), //                    if(ISFILTERED(RFO_Market[Advisor Group] ),SELECTEDVALUE(RFO_Market[RFO]),//                    'Enterprise Goal')))                   // var PriorSunday =  //  CALCULATE(MAX(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT]),DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT]='PREVIOUS')// Var YTD_Goal_TotalSales= CALCULATE(sum(YTD_GOALS[Goal_Amount]), YTD_GOALS[Metric] = 'Total Sales', YTD_GOALS[Level] = FilterChoice, YTD_GOALS[Date_of_Goal] = PriorSunday)// RETURN// IF(YTD_Goal_TotalSales=BLANK(),BLANK(),(DIVIDE([Total Sales YTD],YTD_Goals[Summary- YTD TotalSales Goal])))","isHidden":false},{"name":"Summary- YTD TotalSales Goal","expression":" var FilterChoice = if(ISFILTERED(Market_Leaders[Experienced Advisor]),SELECTEDVALUE(Market_Leaders[ExperiencedAdvisor_CombinedNPGMarkets]),                     if(ISFILTERED(Market_Leaders[Market]),SELECTEDVALUE(Market_Leaders[MARKET_ID]),                     if(ISFILTERED(MVP[MVP]),SELECTEDVALUE(MVP[MVP_ID]),                                      if(ISFILTERED(RFO_Market[Advisor Group] ),SELECTEDVALUE(RFO_Market[RFO]),                   if(ISFILTERED(RFO_Market[Channel]),SELECTEDVALUE(RFO_Market[Channel_FilterForGoals]),                   'Enterprise Goal')))))                   var PriorSunday =   CALCULATE(MAX(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT]),DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT]='PREVIOUS') Var YTD_Goal_TotalSales= CALCULATE(sum(YTD_GOALS[Goal_Amount]), YTD_GOALS[Metric] = 'Total Sales', YTD_GOALS[Level] = FilterChoice, YTD_GOALS[Date_of_Goal] = PriorSunday)ReturnIF(YTD_Goal_TotalSales=BLANK(),'-',YTD_Goal_TotalSales)","isHidden":false},{"name":"Summary- Weekly Need TotalSales","expression":"var FilterChoice = if(ISFILTERED(Market_Leaders[Experienced Advisor]),SELECTEDVALUE(Market_Leaders[ExperiencedAdvisor_CombinedNPGMarkets]),IF(ISFILTERED(Market_Leaders[Market]),SELECTEDVALUE(Market_Leaders[Market]),if(ISFILTERED(MVP[MVP]),SELECTEDVALUE(MVP[MVP_ID]),if(ISFILTERED(RFO_Market[Advisor Group]),SELECTEDVALUE(RFO_Market[RFO]),if(ISFILTERED(RFO_Market[Channel]),SELECTEDVALUE(RFO_Market[Channel_FilterForGoals]),'Enterprise Goal')))))var PriorSunday =   CALCULATE(MAX(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT]),DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT]='PREVIOUS')  var CurrentYear =   CALCULATE(MAX(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]),DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT')var ye_goal =                                     CALCULATE(    sum(YTD_Goals[Goal_Amount]),         FILTER(YTD_Goals,         YTD_GOALS[Metric] = 'Total Sales'        \u0026\u0026 YTD_GOALS[Level] = FilterChoice        \u0026\u0026 MAX(YTD_Goals[Date_of_Goal])=YTD_Goals[Date_of_Goal]\u0026\u0026 MAX(YTD_Goals[Date_of_Goal])\u003ePriorSunday))VAR week_num = calculate(max(ANBP_OTHERREV_SD[CalWk]),FILTER(ALL(ANBP_OTHERREV_SD),ANBP_OTHERREV_SD[CalYr]= CurrentYear))VAR YTD_ANBP= CALCULATE(ANBP_OTHERREV_SD[Total Sales YTD], REMOVEFILTERS(ANBP_OTHERREV_SD[CalWk]))Var weekly_needed = IF(ye_goal= BLANK(),0,DIVIDE(ye_goal-YTD_ANBP,(52-week_num)))RETURNIF(MIN(ANBP_OTHERREV_SD[CalWk])\u003eweek_num,weekly_needed,0)","isHidden":false},{"name":"TotalSales % to YE Goal","expression":"var FilterChoice = if(ISFILTERED(MVP[MVP]),SELECTEDVALUE(MVP[MVP_ID]),if(ISFILTERED(RFO_Market[Advisor Group]),SELECTEDVALUE(RFO_Market[RFO]),if(ISFILTERED(RFO_Market[Division]),SELECTEDVALUE(RFO_Market[Division]),if(ISFILTERED(RFO_Market[Region]),SELECTEDVALUE(RFO_Market[Region]),if(ISFILTERED(RFO_Market[Channel]),SELECTEDVALUE(RFO_Market[Channel]))))))VAR GoalFilter= IF(SELECTEDVALUE(RFO_Market[RFO]) IN {'0383','0716'}, SELECTEDVALUE(RFO_Market[RFO]),                    IF(SELECTEDVALUE(RFO_Market[RFO]) ='0714', COALESCE(SELECTEDVALUE(MVP[MVP_ID]),SELECTEDVALUE(RFO_Market[RFO])),                        COALESCE(SELECTEDVALUE(Market_Leaders[RFO_ZONE_NM]),SELECTEDVALUE(MVP[MVP_ID]),SELECTEDVALUE(RFO_Market[RFO]), SELECTEDVALUE(RFO_Market[Channel_FilterForGoals]), BLANK())))var PriorSunday =   CALCULATE(MAX(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT]),DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT]='PREVIOUS')var ye_goal =                                     CALCULATE(    sum(YTD_Goals[Goal_Amount]),         FILTER(YTD_Goals,         YTD_GOALS[Metric] = 'Total Sales'        \u0026\u0026 YTD_GOALS[Level] = GoalFilter        \u0026\u0026 MAX(YTD_Goals[Date_of_Goal])=YTD_Goals[Date_of_Goal]\u0026\u0026 MAX(YTD_Goals[Date_of_Goal])\u003e=PriorSunday))VAR week_num = calculate(max(ANBP_OTHERREV_SD[CalWk]),DTRB_PERF_DATES[Cal_YTD_Flag] in {TRUE})Var weekly_needed = DIVIDE((ye_goal-ANBP_OTHERREV_SD[ANBP YTD]),(52-week_num))RETURNIF(ye_goal=BLANK(),'-',DIVIDE(ANBP_OTHERREV_SD[Total Sales YTD],ye_goal))","isHidden":false},{"name":"Weekly Need TotalSales","expression":"var FilterChoice = if(ISFILTERED(Market_Leaders[Experienced Advisor]),SELECTEDVALUE(Market_Leaders[ExperiencedAdvisor_CombinedNPGMarkets]),if(ISFILTERED(RFO_Market[Advisor Group]),SELECTEDVALUE(RFO_Market[RFO]),if(ISFILTERED(RFO_Market[Division]),SELECTEDVALUE(RFO_Market[Division]),if(ISFILTERED(RFO_Market[Region]),SELECTEDVALUE(RFO_Market[Region]),if(ISFILTERED(RFO_Market[Channel]),SELECTEDVALUE(RFO_Market[Channel]),if(ISFILTERED(RFO_Market[ORZN_ZONE_CDE]),SELECTEDVALUE(RFO_Market[ORZN_ZONE_CDE]),'Enterprise Goal'))))))VAR GoalFilter= IF(AND(FilterChoice='NPG', SELECTEDVALUE(ANBP_OTHERREV_SD[ORZN_CDE_With Duplicate NPG Rows])='NPG'),'NPG',IF(AND(FilterChoice='NPG', SELECTEDVALUE(ANBP_OTHERREV_SD[ORZN_CDE_With Duplicate NPG Rows])\u003c\u003e'NPG'),BLANK(),IF(SELECTEDVALUE(RFO_Market[RFO]) IN {'0383','0716'}, SELECTEDVALUE(RFO_Market[RFO]),                    IF(SELECTEDVALUE(RFO_Market[RFO]) ='0714', COALESCE(SELECTEDVALUE(MVP[MVP_ID]),SELECTEDVALUE(RFO_Market[RFO])),                    IF(SELECTEDVALUE(ANBP_OTHERREV_SD[ORZN_CDE_With Duplicate NPG Rows])='NPG', 'NPG',                    COALESCE(SELECTEDVALUE(Market_Leaders[RFO_ZONE_NM]),SELECTEDVALUE(MVP[MVP_ID]),SELECTEDVALUE(RFO_Market[RFO]),SELECTEDVALUE(RFO_Market[Channel_FilterForGoals]),'Enterprise Goal'))))))var PriorSunday =   CALCULATE(MAX(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT]),DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT]='PREVIOUS') var ye_goal =                                     CALCULATE(    sum(YTD_Goals[Goal_Amount]),         FILTER(YTD_Goals,         YTD_GOALS[Metric] = 'Total Sales'        \u0026\u0026 YTD_GOALS[Level] = GoalFilter        \u0026\u0026 MAX(YTD_Goals[Date_of_Goal])=YTD_Goals[Date_of_Goal]\u0026\u0026 MAX(YTD_Goals[Date_of_Goal])\u003e=PriorSunday))VAR week_num = calculate(max(ANBP_OTHERREV_SD[CalWk]),DTRB_PERF_DATES[Cal_YTD_Flag] in {TRUE})Var weekly_needed = DIVIDE((ye_goal-ANBP_OTHERREV_SD[Total Sales YTD]),(52-week_num))RETURNIF(ye_goal=BLANK(),BLANK(), IF([TotalSales % to YE Goal]= '-', BLANK(),IF(YTD_Goals[YTD Total Sales Goal]= BLANK(), BLANK(),weekly_needed)))","isHidden":false},{"name":"TotalSales % YTD Goal","expression":"var FilterChoice = if(ISFILTERED(Market_Leaders[Market]),SELECTEDVALUE(Market_Leaders[MARKET_ID]),                     if(ISFILTERED(MVP[MVP]),SELECTEDVALUE(MVP[MVP_ID]),                                      if(ISFILTERED(RFO_Market[Advisor Group] ),SELECTEDVALUE(RFO_Market[RFO]),                   if(ISFILTERED(RFO_Market[Channel]),SELECTEDVALUE(RFO_Market[Channel]),'Enterprise Goal'))))VAR GoalFilter= IF(SELECTEDVALUE(RFO_Market[RFO]) IN {'0383','0716'}, SELECTEDVALUE(RFO_Market[RFO]),IF(SELECTEDVALUE(RFO_Market[RFO]) ='0714', COALESCE(SELECTEDVALUE(MVP[MVP_ID]),SELECTEDVALUE(RFO_Market[RFO])),COALESCE(SELECTEDVALUE(Market_Leaders[RFO_ZONE_NM]),SELECTEDVALUE(MVP[MVP_ID]),SELECTEDVALUE(RFO_Market[RFO]), 'Enterprise Goal')))                   var PriorSunday =   CALCULATE(MAX(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT]),DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT]='PREVIOUS')Var YTD_Goal_TotalSales= (IF(Max(ANBP_OTHERREV_SD[ORZN_CDE_With Duplicate NPG Rows])='NPG',CALCULATE(sum(YTD_GOALS[Goal_Amount]), YTD_GOALS[Metric] = 'Total Sales', YTD_GOALS[Level] = 'NPG', YTD_GOALS[Date_of_Goal] = PriorSunday),CALCULATE(sum(YTD_GOALS[Goal_Amount]), YTD_GOALS[Metric] = 'Total Sales', YTD_GOALS[Level] = GoalFilter, YTD_GOALS[Date_of_Goal] = PriorSunday))) RETURNIF(YTD_Goal_TotalSales=BLANK(),'-',(DIVIDE([CY Total Sales],YTD_Goals[YTD Total Sales Goal])))","isHidden":false},{"name":"TotalSales YE Goal","expression":"var FilterChoice = if(ISFILTERED(MVP[MVP]),SELECTEDVALUE(MVP[MVP_ID]),if(ISFILTERED(RFO_Market[Advisor Group]),SELECTEDVALUE(RFO_Market[RFO]),if(ISFILTERED(RFO_Market[Division]),SELECTEDVALUE(RFO_Market[Division]),if(ISFILTERED(RFO_Market[Region]),SELECTEDVALUE(RFO_Market[Region]),if(ISFILTERED(RFO_Market[Channel]),SELECTEDVALUE(RFO_Market[Channel]))))))VAR GoalFilter= COALESCE(SELECTEDVALUE(Market_Leaders[MARKET_ID]),SELECTEDVALUE(MVP[MVP_ID]), SELECTEDVALUE(RFO_Market[RFO]),SELECTEDVALUE(RFO_Market[Channel_FilterForGoals]),'Enterprise Goal')var PriorSunday =   CALCULATE(MAX(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT]),DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT]='PREVIOUS')var ye_goal =                                     CALCULATE(    sum(YTD_Goals[Goal_Amount]),         FILTER(YTD_Goals,         YTD_GOALS[Metric] = 'Total Sales'        \u0026\u0026 YTD_GOALS[Level] = GoalFilter        \u0026\u0026 MAX(YTD_Goals[Date_of_Goal])=YTD_Goals[Date_of_Goal]\u0026\u0026 MAX(YTD_Goals[Date_of_Goal])\u003e=PriorSunday))VAR week_num = calculate(max(ANBP_OTHERREV_SD[CalWk]),DTRB_PERF_DATES[Cal_YTD_Flag] in {TRUE})Var weekly_needed = DIVIDE((ye_goal-ANBP_OTHERREV_SD[ANBP YTD]),(52-week_num))RETURNye_goal","isHidden":false}],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////VSSHR//SHARED//PUBLIC//DI and BI////Distribution Dashboard//YTD_GOALS_DD.csv'),[Delimiter=',', Columns=4, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Level', type text}, {'Metric', type text}, {'Date_of_Goal', type date}, {'Goal_Amount', type number}}),    #'Replaced Value' = Table.ReplaceValue(#'Changed Type','TOTAL RFBO','OtherRevenue',Replacer.ReplaceText,{'Metric'}),    #'Added Conditional Column' = Table.AddColumn(#'Replaced Value', 'Renamed Level', each if [Level] = 'Newman' then '0714' else if [Level] = 'TAN' then '0716' else if [Level] = 'Virtual Advice' then '0383' else [Level]),    #'Changed Type2' = Table.TransformColumnTypes(#'Added Conditional Column',{{'Renamed Level', type text}}),    #'Removed Columns' = Table.RemoveColumns(#'Changed Type2',{'Level'}),    #'Renamed Columns' = Table.RenameColumns(#'Removed Columns',{{'Renamed Level', 'Level'}})in    #'Renamed Columns'"}]},{"name":"TENURE","isHidden":false,"storageMode":"Import","columns":[{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ADJ_SVC_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TENURE","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"TENURE_GROUP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CURR_ROW_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_STS_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TENURE_GROUP (groups)","dataType":"String","isHidden":false,"expression":"SWITCH(  TRUE,  ISBLANK(\u0027TENURE\u0027[TENURE_GROUP]),  '(Blank)',  \u0027TENURE\u0027[TENURE_GROUP] IN {'NFR1',    'NFR2',    'NFR3',    'NFR4',    'VET5',    'VET6',    'VET7',    'VET8+'},  'NFR1 \u0026 NFR2 \u0026 NFR3 \u0026 NFR4 \u0026 VET5 \u0026 VET6 \u0026 VET7 \u0026 VET8+',  \u0027TENURE\u0027[TENURE_GROUP])","columnType":"Calculated"},{"name":"JOB_TYP_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TSID for Merge","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TRMN_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = DB2.Database('PODWH021:50000', 'PODWH021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT  A.EMP_ID, #(lf)        A.JOB_TYP_DSCR,#(lf)        A.EMP_STS_TYP_CDE,#(lf)        A.CURR_ROW_IND,#(lf)A.TRMN_DT,#(lf)        A.ADJ_SVC_DT,#(lf)       /* TENURE */ #(lf)       (DAYS(CURRENT_DATE)-DAYS(a.adj_svc_dt) ) / 365.25 AS TENURE, #(lf)       /* TENURE_GROUP */ #(lf)       (CASE WHEN ((DAYS(CURRENT_DATE)-DAYS(A.adj_svc_dt))/365.25 ) \u003c= 1 THEN \u0027NFR1\u0027  #(lf)             WHEN ((DAYS(CURRENT_DATE)-DAYS(A.adj_svc_dt))/365.25 ) \u003e 1 AND#(lf)                  ((DAYS(CURRENT_DATE)-DAYS(A.adj_svc_dt))/365.25 ) \u003c= 2 THEN \u0027NFR2\u0027#(lf)             WHEN ((DAYS(CURRENT_DATE)-DAYS(A.adj_svc_dt))/365.25 ) \u003e 2 AND#(lf)                  ((DAYS(CURRENT_DATE)-DAYS(A.adj_svc_dt))/365.25 ) \u003c= 3 THEN \u0027NFR3\u0027 #(lf)             WHEN ((DAYS(CURRENT_DATE)-DAYS(A.adj_svc_dt))/365.25 ) \u003e 3 AND#(lf)                  ((DAYS(CURRENT_DATE)-DAYS(A.adj_svc_dt))/365.25 ) \u003c= 4 THEN \u0027NFR4\u0027 #(lf)             WHEN ((DAYS(CURRENT_DATE)-DAYS(A.adj_svc_dt))/365.25 ) \u003e 4 AND#(lf)                  ((DAYS(CURRENT_DATE)-DAYS(A.adj_svc_dt))/365.25 ) \u003c= 5 THEN \u0027VET5\u0027 #(lf)             WHEN ((DAYS(CURRENT_DATE)-DAYS(A.adj_svc_dt))/365.25 ) \u003e 5 AND#(lf)                  ((DAYS(CURRENT_DATE)-DAYS(A.adj_svc_dt))/365.25 ) \u003c= 6 THEN \u0027VET6\u0027#(lf)             WHEN ((DAYS(CURRENT_DATE)-DAYS(A.adj_svc_dt))/365.25 ) \u003e 6 AND#(lf)                  ((DAYS(CURRENT_DATE)-DAYS(A.adj_svc_dt))/365.25 ) \u003c= 7 THEN \u0027VET7\u0027#(lf)               ELSE \u0027VET8+\u0027 #(lf)        END) AS TENURE_GROUP   #(lf)      #(lf)   FROM HUMAN_RESOURCES.CNF_EMP_DIM_DTL_CURR_CFDL A #(lf)  WHERE A.EMP_STS_TYP_CDE IN (\u0027A\u0027,\u0027I\u0027,\u0027L\u0027,\u0027D\u0027,\u0027T\u0027,\u0027R\u0027)#(lf)    AND A.CURR_ROW_IND = \u0027Y\u0027          #(lf)    AND (A.JOB_FMLY_CDE LIKE \u0027FLD%\u0027 OR#(lf)         A.JOB_FMLY_CDE =\u0027SALES\u0027 OR#(lf)         A.TF_JOB_CLAS_CDE =\u0027FAC\u0027)#(lf)    AND A.ORZN_DEPT_CDE NOT IN (\u00272410\u0027,\u00273005\u0027,\u00277151\u0027,\u00277152\u0027,#(lf)                                \u00279150\u0027,\u00279134\u0027,\u0027NA\u0027, \u00274100\u0027,#(lf)                                \u00276053\u0027,\u00276100\u0027,\u00278900\u0027)#(lf)    AND (A.JOB_TYP_CDE IN (\u0027002003\u0027,\u0027002010\u0027,\u0027002011\u0027,\u0027002012\u0027,\u0027002016\u0027,\u0027002017\u0027,\u0027002018\u0027,\u0027002019\u0027,#(lf)                           \u0027002000\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027002022\u0027,\u0027002024\u0027,\u0027002026\u0027,\u0027002027\u0027,#(lf)                           \u0027002030\u0027,\u0027002031\u0027,\u0027002032\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027003602\u0027,#(lf)                           \u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027) OR #(lf)         A.ORZN_DEPT_CDE IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00276100\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027))#(lf)   AND A.ADJ_SVC_DT is NOT NULL#(lf)   #(lf)ORDER BY A.EMP_ID']),    #'Filtered Rows' = Table.SelectRows(Source, each true),    #'Changed Type' = Table.TransformColumnTypes(#'Filtered Rows',{{'ADJ_SVC_DT', type date}, {'TENURE', Int64.Type}, {'TRMN_DT', type date}}),    #'Added Custom' = Table.AddColumn(#'Changed Type', 'TSID for Merge', each Text.Trim([EMP_ID]))in    #'Added Custom'"}]},{"name":"Market_Leaders","isHidden":false,"storageMode":"Import","columns":[{"name":"Market","dataType":"String","isHidden":false,"expression":"Market_Leaders[RFO_ZONE_NM] \u0026 '-' \u0026 Market_Leaders[MARKET_LEADER]","columnType":"Calculated"},{"name":"MARKET_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_ZONE_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_STS_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TRMN_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_DEPT_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MARKET_LEADER","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market Number","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Experienced Advisor","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Experienced AdvisorSort","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ExperiencedAdvisor_CombinedNPGMarkets","dataType":"String","isHidden":false,"expression":"SWITCH(Market_Leaders[Experienced Advisor],'NPG - Market 98','NPG','NPG - Market 99','NPG',BLANK())","columnType":"Calculated"},{"name":"TIW_MARKET_LEADER","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Zone DataBase Design.Leader Name","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = DB2.Database('podwh021:50000', 'podwh021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT DISTINCT#(lf)t1.ORZN_DEPT_CDE as RFO_CDE,#(lf)t1.ORZN_ZONE_CDE as RFO_ZONE_NM,#(lf)(SUBSTRING(t1.ORZN_ZONE_CDE,6,5)) AS Market_ID,#(lf)t3.ORZN_DEPT_DSCR,#(lf)t3.EMP_ID,#(lf)t3.EMP_STS_TYP_CDE,#(lf)t3.trmn_dt,#(lf)t3.JOB_TYP_CDE,#(lf)t3.JOB_TYP_DSCR,#(lf)t3.EMP_NM,#(lf)case when t3.emp_nm is null then \u0027Vacant\u0027 Else t3.emp_nm end as market_leader#(lf)FROM SEMANTIC.SALES_HIERARCHY_DIMENSION t1#(lf)left join#(lf)(#(lf)SELECT DISTINCT#(lf)T1.SALE_HIER_ID,#(lf)t1.orzn_zone_cde,#(lf)t1.orzn_dept_dscr,#(lf)t2.orzn_dept_cde,#(lf)t2.EMP_ID,#(lf)t2.EMP_STS_TYP_CDE,#(lf)t2.trmn_dt,#(lf)t2.JOB_TYP_CDE,#(lf)t2.JOB_TYP_DSCR,#(lf)t2.EMP_NM#(lf)FROM#(lf)SEMANTIC.SALES_HIERARCHY_DIMENSION t1#(lf)left JOIN HUMAN_RESOURCES.CNF_EMP_DIM_DTL_CURR_CFDL t2 ON T1.SALE_HIER_ID = T2.emp_id#(lf)where t1.CURR_ROW_IND = \u0027Y\u0027#(lf)and t2.emp_sts_typ_cde in (\u0027A\u0027)#(lf)and t1.EFF_END_TMSP is null#(lf)AND T2.CURR_ROW_IND = \u0027Y\u0027#(lf)and t1.EFF_END_TMSP is null#(lf)and t2.JOB_TYP_CDE IN (\u0027001002\u0027, \u0027001003\u0027,/* \u0027001004\u0027,\u0027001005\u0027,*/ \u0027001007\u0027, \u0027003500\u0027)#(lf)AND T2.EMP_ID NOT IN(\u0027TS62904\u0027,\u0027TS67022\u0027,\u0027TS18670\u0027)#(lf))#(lf)t3#(lf)on t1.orzn_zone_cde = t3.orzn_zone_cde#(lf)where t1.CURR_ROW_IND = \u0027Y\u0027#(lf)and t1.eff_end_tmsp is null#(lf)--and t1.rfo_zone_sts_cde in (\u0027A\u0027)#(lf)and substring(t1.orzn_zone_cde,6,2) \u003c\u003e \u002700\u0027#(lf)--and t1.orzn_zone_cde \u003c\u003e \u0027UKWN\u0027#(lf)and t1.ORZN_DEPT_CDE  \u003c\u003e \u0027UKWN\u0027#(lf)order BY t1.ORZN_ZONE_CDE;#(lf)']),    #'Remove Job Code 003500' = Table.SelectRows(Source, each ([JOB_TYP_CDE] \u003c\u003e '003500')),    #'Inserted Text After Delimiter' = Table.AddColumn(#'Remove Job Code 003500', 'Text After Delimiter', each Text.AfterDelimiter([MARKET_ID], '-'), type text),    #'Renamed Columns' = Table.RenameColumns(#'Inserted Text After Delimiter',{{'Text After Delimiter', 'Market'}}),    #'Added Conditional Column' = Table.AddColumn(#'Renamed Columns', 'Experienced AdvisorSort', each if [Market] = '01' then 1 else if [Market] = '69' then 69 else if [Market] = '79' then 79 else if [Market] = '98' then 98 else if [Market] = '99' then 99 else if [Market] = '59' then 59 else 0),      #'Added Conditional Column1' = Table.AddColumn(#'Added Conditional Column', 'Experienced Advisor', each if [Market] = '01' then 'PMC - Market 1' else if [Market] = '69' then 'GPA - Market 69' else if [Market] = '79' then 'GPD - Market 79' else if [Market] = '98' then 'NPG - Market 98' else if [Market] = '99' then 'NPG - Market 99' else if [Market] = '59' then 'PMC - Market 59' else 'Other Advisors'),    #'Renamed Columns1' = Table.RenameColumns(#'Added Conditional Column1',{{'Market', 'Market Number'}}),    // Added 3/7/24 to bring in Sr Market Leader names from Zone Database Design file    #'Merged Queries' = Table.NestedJoin(#'Renamed Columns1', {'RFO_ZONE_NM'}, #'Zone DataBase Design', {'Organization Zone Code'}, 'Zone DataBase Design', JoinKind.LeftOuter),    #'Expanded Zone DataBase Design' = Table.ExpandTableColumn(#'Merged Queries', 'Zone DataBase Design', {'Leader Name'}, {'Zone DataBase Design.Leader Name'}),    #'Renamed Columns2' = Table.RenameColumns(#'Expanded Zone DataBase Design',{{'MARKET_LEADER', 'TIW_MARKET_LEADER'}}),    #'Added Custom' = Table.AddColumn(#'Renamed Columns2', 'MARKET_LEADER', each if [Zone DataBase Design.Leader Name]\u003c\u003e 'VACANT' then [Zone DataBase Design.Leader Name] else [TIW_MARKET_LEADER])in    #'Added Custom'"}]},{"name":"Mapping","isHidden":false,"storageMode":"Import","columns":[{"name":"Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Product Roll Up","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Group","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Life_SingleVsRecurring","dataType":"String","isHidden":false,"expression":"SWITCH(Mapping[Product Roll Up],'Term','Recurring','Recurring WL','Recurring','UL','Recurring','VUL','Recurring','Single WL','Single','UL/VUL Excess','Single','FA','Deferred Fixed Annuity', 'DIA','SPIA/DIA','FIA','FIA','SO','SO/FPDA/DISO','SPIA','SPIA/DIA','VA','Variable Annuity',Mapping[Product Roll Up])","columnType":"Calculated"},{"name":"LifeProductOrder","dataType":"String","isHidden":false,"expression":"SWITCH(Mapping[Product Roll Up],'Term',01,'Recurring WL',02,'UL',03,'VUL',04,'Single WL',05,'Single WL',06,'UL/VUL Excess',07,'FA',11, 'DIA',10,'FIA',12,'SO',09,'SPIA',10,'VA',08,0)","columnType":"Calculated"},{"name":"ProductGroup_Table","dataType":"String","isHidden":false,"expression":"SWITCH(Mapping[Product],'SPWL19','Whole Life','SWL19','Whole Life','TermIV','Term','ULA19','UL','ULP19','UL','VUL19','VUL','WL19','Whole Life','WLP19','Whole Life','Deferred Fixed Annuity','Deferred Fixed Annuity','DIA','SPIA/DIA','Fixed Indexed Annuity','FIA','FSO','SO/FPDA/DISO','SPIA','SPIA/DIA','VA2020','Variable Annuity','Variable Annuity','Variable Annuity','Variable Annuity 2005','Variable Annuity',Mapping[Product])","columnType":"Calculated"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//SHARED//PUBLIC//DI and BI////Sales Dashboard//RFO_2020_Product_Goals Product Mapping.xlsx'), null, true),    Mapping_Sheet = Source{[Item='Mapping',Kind='Sheet']}[Data],    #'Changed Type' = Table.TransformColumnTypes(Mapping_Sheet,{{'Column1', type text}, {'Column2', type text}}),    #'Promoted Headers' = Table.PromoteHeaders(#'Changed Type', [PromoteAllScalars=true]),    #'Changed Type1' = Table.TransformColumnTypes(#'Promoted Headers',{{'Product', type text}, {'Product Roll Up', type text}})in    #'Changed Type1'"}]},{"name":"RFO_Name","isHidden":false,"storageMode":"Import","columns":[{"name":"RFO_CODE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Effective END Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Current Row Indicator","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Sql.Database('dbedwdwprd', 'EnterpriseDataMart', [Query='SELECT DISTINCT#(lf)       [Department Identifier] RFO_CODE#(lf)      ,[Department Name] RFO_NM#(lf)      ,concat(trim([Department Identifier]),\u0027-\u0027,[Department Name]) as NM#(lf)      ,[Effective END Date]#(lf)      ,[Current Row Indicator]  #(lf)#(lf)  FROM [EnterpriseDataMart].[DM_01].[Organization Dimension] #(lf)  where [Department Identifier] in (\u00270283\u0027, \u00270435\u0027,\u00270115\u0027, \u00270190\u0027, #(lf)                \u00270361\u0027, \u00270384\u0027,\u00270291\u0027, \u00270525\u0027,\u00270001\u0027,\u00270383\u0027,\u00270714\u0027,\u00270716\u0027)#(lf)                and [Current Row Indicator] = \u0027Y\u0027#(lf)                and [Effective END Date] = \u002712/31/9999\u0027#(lf)#(lf)       #(lf)#(lf)#(lf)       ']),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'RFO_CODE', type text}, {'RFO_NM', type text}, {'NM', type text}})in    #'Changed Type'"}]},{"name":"MVP","isHidden":false,"storageMode":"Import","columns":[{"name":"RFO_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_DEPT_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_STS_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TRMN_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP","dataType":"String","isHidden":false,"expression":"MVP[MVP_ID] \u0026 ' - ' \u0026 MVP[MARKET_LEADERS]","columnType":"Calculated"},{"name":"PEFR_FULL_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MARKET_LEADERS","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = DB2.Database('podwh021:50000', 'podwh021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT DISTINCT#(lf)t1.ORZN_DEPT_CDE as RFO_CDE,#(lf)--t1.ORZN_ZONE_CDE as RFO_ZONE_NM,#(lf)t1.ORZN_SUB_DEPT_CDE as MVP_ID,#(lf)--(SUBSTRING(t1.ORZN_ZONE_CDE,6,5)) AS Market_ID,#(lf)t3.ORZN_DEPT_DSCR,#(lf)t3.EMP_ID,#(lf)t3.EMP_STS_TYP_CDE,#(lf)t3.trmn_dt,#(lf)t3.JOB_TYP_CDE,#(lf)t3.JOB_TYP_DSCR,#(lf)t3.EMP_NM,#(lf)t3.PEFR_FULL_NM,#(lf)case when t3.pefr_full_nm is null then \u0027Vacant\u0027 Else t3.pefr_full_nm end as market_leaders#(lf)FROM SEMANTIC.SALES_HIERARCHY_DIMENSION t1#(lf)left join#(lf)(#(lf)SELECT DISTINCT#(lf)T1.SALE_HIER_ID,#(lf)t1.orzn_zone_cde,#(lf)t1.orzn_dept_dscr,#(lf)t1.orzn_sub_dept_cde,#(lf)t2.orzn_dept_cde,#(lf)t2.EMP_ID,#(lf)t2.EMP_STS_TYP_CDE,#(lf)t2.trmn_dt,#(lf)t2.JOB_TYP_CDE,#(lf)t2.JOB_TYP_DSCR,#(lf)t2.EMP_NM,#(lf)t2.PEFR_FULL_NM#(lf)FROM#(lf)SEMANTIC.SALES_HIERARCHY_DIMENSION t1#(lf)left JOIN HUMAN_RESOURCES.CNF_EMP_DIM_DTL_CURR_CFDL t2 ON T1.SALE_HIER_ID = T2.emp_id#(lf)where t1.CURR_ROW_IND = \u0027Y\u0027 #(lf)and t2.emp_sts_typ_cde in (\u0027A\u0027)#(lf)and t1.EFF_END_TMSP is null#(lf)AND T2.CURR_ROW_IND = \u0027Y\u0027#(lf)and t1.EFF_END_TMSP is null#(lf)and t1.orzn_dept_cde IN (\u00270001\u0027,\u00270714\u0027, \u00270716\u0027,\u00270361\u0027, \u00270435\u0027,\u00270283\u0027, \u00270291\u0027, \u00270525\u0027, \u00270115\u0027, \u00270190\u0027, \u00270384\u0027)#(lf)and t2.JOB_TYP_CDE IN (\u0027001001\u0027)#(lf)#(lf))#(lf)t3#(lf)on t1.orzn_sub_dept_cde = t3.orzn_sub_dept_cde#(lf)where t1.CURR_ROW_IND = \u0027Y\u0027#(lf)and t1.eff_end_tmsp is null#(lf)--and t1.rfo_zone_sts_cde in (\u0027A\u0027)#(lf)--and t3.EMP_STS_TYP_CDE = \u0027A\u0027#(lf)--and substring(t1.orzn_zone_cde,6,2) \u003c\u003e \u002700\u0027#(lf)and t1.orzn_zone_cde \u003c\u003e \u0027UKWN\u0027#(lf)and t1.orzn_dept_cde IN (\u00270001\u0027,\u00270714\u0027, \u00270716\u0027,\u00270361\u0027, \u00270435\u0027,\u00270283\u0027, \u00270291\u0027, \u00270525\u0027, \u00270115\u0027, \u00270190\u0027, \u00270384\u0027)#(lf)#(lf)order BY t1.ORZN_SUB_DEPT_CDE;']),    #'Filtered Rows' = Table.SelectRows(Source, each ([MVP_ID] \u003c\u003e '          '))in    #'Filtered Rows'"}]},{"name":"LifeANBPPlan","isHidden":false,"storageMode":"Import","columns":[{"name":"Week #","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"WeeklyPlan","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Column Width","dataType":"String","isHidden":false,"expression":"'************'","columnType":"Calculated"},{"name":"Product Group","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Week Ending","dataType":"DateTime","isHidden":false,"columnType":"Data"}],"measures":[{"name":"ANBP CW Plan","expression":"VAR CurrentDate= DTRB_PERF_DATES[Current Date]var CurWk = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR], DTRB_PERF_DATES[CAL_DAY_DT], CurrentDate) -1returnCALCULATE(SUM(LifeANBPPlan[WeeklyPlan]),  DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current', LifeANBPPlan[Week #] = CurWk)","isHidden":false},{"name":"CW Actual vs Plan%","expression":"if (ISFILTERED(RFO_Market[Advisor Group Shortened])=TRUE,Blank(),if (ISFILTERED(\u0027Tenure Group Bridge Table\u0027[Tenure Group]),BLANK(),IF(LifeANBPPlan[ANBP CW Plan]\u003e0,DIVIDE(ANBP_OTHERREV_SD[ANBP PW],LifeANBPPlan[ANBP CW Plan])-1,'-')))","isHidden":false},{"name":"ANBP YTD Plan","expression":"VAR CurrentDate= DTRB_PERF_DATES[Current Date]var CurWk = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR], DTRB_PERF_DATES[CAL_DAY_DT], CurrentDate) -1returnif (ISFILTERED(RFO_Market[Advisor Group])=TRUE,Blank(),if (ISFILTERED(TENURE[TENURE_GROUP]),BLANK(),CALCULATE(SUM(LifeANBPPlan[WeeklyPlan]),  DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current', LifeANBPPlan[Week #] \u003c= CurWk)))","isHidden":false},{"name":"YTD Above Below Plan","expression":"if (ISFILTERED(RFO_Market[Advisor Group])=TRUE,Blank(),if (ISFILTERED(TENURE[TENURE_GROUP]),BLANK(),LifeANBPPlan[LifeANBPTotal]-LifeANBPPlan[ANBP YTD Plan]))","isHidden":false},{"name":"LifeANBPTotal","expression":"ANBP_OTHERREV_SD[ANBP YTD]","isHidden":false},{"name":"YTD Above Below Plan %","expression":"if (ISFILTERED(RFO_Market[Advisor Group Shortened])=TRUE,Blank(),if (ISFILTERED(\u0027Tenure Group Bridge Table\u0027[Tenure Group]),BLANK(),if(LifeANBPPlan[ANBP YTD Plan]\u003e0,DIVIDE(ANBP_OTHERREV_SD[ANBP YTD],LifeANBPPlan[ANBP YTD Plan])-1,'-')))","isHidden":false},{"name":"vs. PY YTD","expression":"If (DIVIDE(ANBP_OTHERREV_SD[ANBP YTD],ANBP_OTHERREV_SD[ANBP PYTD])=0,Blank(),DIVIDE(ANBP_OTHERREV_SD[ANBP YTD],ANBP_OTHERREV_SD[ANBP PYTD])-1)","isHidden":false},{"name":"LifeANBP_YTD Daily Average","expression":"Divide(ANBP_OTHERREV_SD[ANBP YTD],\u0027Business Day Query\u0027[CY Business Day Count])","isHidden":false},{"name":"LifeANBP_PYTD Daily Average","expression":"Divide(ANBP_OTHERREV_SD[ANBP PYTD], \u0027Business Day Query\u0027[PY Business Day Count])","isHidden":false},{"name":"CY Weekly Plan","expression":"VAR CurrentYear=DTRB_PERF_DATES[Current Year]RETURNif (ISFILTERED(RFO_Market[Advisor Group])=TRUE,Blank(),if (ISFILTERED(\u0027Tenure Group Bridge Table\u0027[Tenure Group]),BLANK(),Calculate(Sum(LifeANBPPlan[WeeklyPlan]),YEAR(LifeANBPPlan[Week Ending])=CurrentYear)))","isHidden":false},{"name":"PY ANBP Percent","expression":"Not available","isHidden":false},{"name":"1.5 Life ANBP","expression":".25*LifeANBPPlan[LifeANBPTotal]","isHidden":false},{"name":"LifeANBP 4 Wk Avg","expression":"DIVIDE([ANBP 4 Wk Total Week Index],4)","isHidden":false},{"name":"LifeYTD Weekly Average","expression":"Var max_week = CALCULATE(    MAX(ANBP_OTHERREV_SD[CalWk]),    FILTER(ANBP_OTHERREV_SD, ANBP_OTHERREV_SD[Current_Year_Cal_Flag]= TRUE()))Var TotalYTDANBP=    CALCULATE(     sum(ANBP_OtherRev_SD[Value]),     ANBP_OtherRev_SD[ANBP_OtherRev] = 'ANBP',    DTRB_PERF_DATES[Cal_YTD_Flag] = {TRUE()})RETURN DIVIDE( TotalYTDANBP,max_week)","isHidden":false},{"name":"NoPlanDataText","expression":"if (ISFILTERED(RFO_Market[Advisor Group]),'Plan Data is not available at Channel, Advisor Group or Market level',if (ISFILTERED(\u0027Tenure Group Bridge Table\u0027[Tenure Group]),'Plan Data is not available at Channel, Advisor Group or Market level',if (ISFILTERED(RFO_Market[Channel]),'Plan Data is not available at Channel, Advisor Group or Market level',if (ISFILTERED(MVP[MVP]),'Plan Data is not available at Channel, Advisor Group or Market level',if (ISFILTERED(Market_Leaders[Market]),'Plan Data is not available at Channel, Advisor Group or Market level','')))))","isHidden":false},{"name":"HideFaceAmount","expression":"Not available","isHidden":false}],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////VSSHR//SHARED//Public//DI and BI//Sales Dashboard//LifeANBPPlan2024.csv'),[Delimiter=',', Columns=5, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Column1', type text}, {'Column2', type text}, {'Column3', type text}, {'Column4', type text}}),    #'Promoted Headers' = Table.PromoteHeaders(#'Changed Type', [PromoteAllScalars=true]),    #'Changed Type1' = Table.TransformColumnTypes(#'Promoted Headers',{{'Week #', Int64.Type}, {'Week Ending', type date}, {'Product', type text}, {'WeeklyPlan', type number}})in    #'Changed Type1'"}]},{"name":"LifeANBPSort","isHidden":false,"storageMode":"Import","columns":[{"name":"Product Roll Up","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Sort","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i45WCkktylXSUTJUitWJVgpKTS4tKsrMS1cI9wEKGoEFQ0FMYzAzDMw2AbODgcpyUiEKTaEK9YEKFFwrklOLi4GiZkqxsQA=', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Group = _t, Sort = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Group', type text}, {'Sort', Int64.Type}}),    #'Renamed Columns' = Table.RenameColumns(#'Changed Type',{{'Group', 'Product Roll Up'}})in    #'Renamed Columns'"}]},{"name":"ANBP_OTHERREV_SD (NPG)","isHidden":false,"storageMode":"Import","columns":[{"name":"RALN_RFO_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RALN_MKT_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"COMP_PYEE_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CalYr","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"CalWk","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"max_cal_dt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Value","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"ANBP_OtherRev","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Mapping.Product Roll Up","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_Name.NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Month_PQ","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Relationship Field PQ","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Product_RFO","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_CDE_With Duplicate NPG Rows","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////VSSHR//SHARED//Public//DI and BI//Distribution Dashboard//ANBP_OtherRev_SD.csv'),[Delimiter=',', Columns=12, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'CalYr', Int64.Type}, {'CalWk', Int64.Type}, {'max_cal_dt', type date}, {'Value', type number}}),    #'Append WID' = Table.Combine({#'Changed Type', WID_Snowflake}),    #'Filtered Rows1' = Table.SelectRows(#'Append WID', each ([Current Week Indicator] \u003c\u003e 'Current Week WID')),    #'Removed Columns' = Table.RemoveColumns(#'Filtered Rows1',{'Current Week Indicator'}),    #'Remove RFRB' = Table.SelectRows(#'Removed Columns', each ([ANBP_OtherRev] \u003c\u003e 'OtherRev')),    #'Merged Queries' = Table.NestedJoin(#'Remove RFRB', {'Product'}, Mapping, {'Product'}, 'Mapping', JoinKind.LeftOuter),    #'Expanded Mapping' = Table.ExpandTableColumn(#'Merged Queries', 'Mapping', {'Product Roll Up'}, {'Mapping.Product Roll Up'}),    #'Merged Queries1' = Table.NestedJoin(#'Expanded Mapping', {'RALN_RFO_CDE'}, RFO_Name, {'RFO_CODE'}, 'RFO_Name', JoinKind.LeftOuter),    #'Expanded RFO_Name' = Table.ExpandTableColumn(#'Merged Queries1', 'RFO_Name', {'NM'}, {'RFO_Name.NM'}),    #'Added Custom1' = Table.AddColumn(#'Expanded RFO_Name', 'Month_PQ', each Date.Month([max_cal_dt])),    #'Added Custom' = Table.AddColumn(#'Added Custom1', 'Relationship Field PQ', each [RALN_RFO_CDE]\u0026'-'\u0026[Product]\u0026'-'\u0026Number.ToText([CalYr])\u0026'-'\u0026Number.ToText([Month_PQ])\u0026'-'\u0026[ANBP_OtherRev]),    #'Added Custom2' = Table.AddColumn(#'Added Custom', 'Product_RFO', each [Mapping.Product Roll Up]\u0026'-'\u0026[RALN_RFO_CDE]),    #'Filtered Rows' = Table.SelectRows(#'Added Custom2', each [Market] = '90' or [Market] = '91' or [Market] = '92' or [Market] = '93' or [Market] = '94' or [Market] = '95' or [Market] = '96' or [Market] = '97' or [Market] = '98' or [Market] = '99'),    #'Added Custom3' = Table.AddColumn(#'Filtered Rows', 'ORZN_CDE_With Duplicate NPG Rows', each 'NPG')in    #'Added Custom3'"}]},{"name":"Business Day Query","isHidden":false,"storageMode":"Import","columns":[{"name":"DT_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CAL_DAY_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"HDAY_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"WKDY_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Year Flag","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Business Day","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"CAL_YR_DAY_NBR","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[{"name":"PY Business Day Count","expression":"Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[CAL_DAY_DT]=(TODAY())))-1-52Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR StartDATE=DATE(YEAR(MaxDay),01,01)VAR EndDATE= DATE(YEAR(MaxDay),MONTH(MaxDay),DAY(MaxDay))VAR CalendarDayCount= DATEDIFF(StartDATE,EndDATE,DAY)+1ReturnCALCULATE(Sum(\u0027Business Day Query\u0027[Business Day]),\u0027Business Day Query\u0027[Year Flag]='CY',\u0027Business Day Query\u0027[CAL_YR_DAY_NBR]\u003c=CalendarDayCount)","isHidden":false},{"name":"CY Business Day Count","expression":"Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[CAL_DAY_DT]=(TODAY())))-1Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR StartDATE=DATE(YEAR(MaxDay),01,01)VAR EndDATE= DATE(YEAR(MaxDay),MONTH(MaxDay),DAY(MaxDay))VAR CalendarDayCount= DATEDIFF(StartDATE,EndDATE,DAY)+1ReturnCALCULATE(Sum(\u0027Business Day Query\u0027[Business Day]),\u0027Business Day Query\u0027[Year Flag]='CY',\u0027Business Day Query\u0027[CAL_YR_DAY_NBR]\u003c=CalendarDayCount)","isHidden":false},{"name":"Business Days In Current Quarter","expression":"CALCULATE(SUM(\u0027Business Day Query\u0027[Year Flag]),QUARTER(\u0027Business Day Query\u0027[CAL_DAY_DT])=QUARTER(TODAY()))","isHidden":false},{"name":"Business Day PW","expression":"// var PrevWk2 = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR], DTRB_PERF_DATES[CAL_DAY_DT], today()) - 3Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[CAL_DAY_DT]=(TODAY())))-1Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_week VAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))returnCALCULATE(SUM(\u0027Business Day Query\u0027[Business Day]), \u0027Business Day Query\u0027[CAL_DAY_DT] \u003c= MaxDay,\u0027Business Day Query\u0027[CAL_DAY_DT] \u003e=StartDay)","isHidden":false},{"name":"Business Day PW2","expression":"// var PrevWk2 = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR], DTRB_PERF_DATES[CAL_DAY_DT], today()) - 3Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[CAL_DAY_DT]=(TODAY())))-2Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_week VAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))returnCALCULATE(SUM(\u0027Business Day Query\u0027[Business Day]), \u0027Business Day Query\u0027[CAL_DAY_DT] \u003c= MaxDay,\u0027Business Day Query\u0027[CAL_DAY_DT] \u003e=StartDay)","isHidden":false},{"name":"Business Day PW3","expression":"// var PrevWk2 = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR], DTRB_PERF_DATES[CAL_DAY_DT], today()) - 3Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[CAL_DAY_DT]=(TODAY())))-3Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_week VAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))returnCALCULATE(SUM(\u0027Business Day Query\u0027[Business Day]), \u0027Business Day Query\u0027[CAL_DAY_DT] \u003c= MaxDay,\u0027Business Day Query\u0027[CAL_DAY_DT] \u003e=StartDay)","isHidden":false},{"name":"Business Day PW4","expression":"// var PrevWk2 = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR], DTRB_PERF_DATES[CAL_DAY_DT], today()) - 3Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[CAL_DAY_DT]=(TODAY())))-4Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_week VAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))returnCALCULATE(SUM(\u0027Business Day Query\u0027[Business Day]), \u0027Business Day Query\u0027[CAL_DAY_DT] \u003c= MaxDay,\u0027Business Day Query\u0027[CAL_DAY_DT] \u003e=StartDay)","isHidden":false},{"name":"PW Business Day Message","expression":"Var PW=If(\u0027Business Day Query\u0027[Business Day PW]\u003c5,ANBP_OTHERREV_SD[ANBP PW Date]\u0026' had ' \u0026 \u0027Business Day Query\u0027[Business Day PW] \u0026 ' Business Days','')Var PW2=If(\u0027Business Day Query\u0027[Business Day PW2]\u003c5,' ' \u0026 ANBP_OTHERREV_SD[ANBP PW2 Date]\u0026' had ' \u0026 \u0027Business Day Query\u0027[Business Day PW2] \u0026 ' Business Days','')Var PW3=If(\u0027Business Day Query\u0027[Business Day PW3]\u003c5,' ' \u0026 ANBP_OTHERREV_SD[ANBP PW3 Date]\u0026' had ' \u0026 \u0027Business Day Query\u0027[Business Day PW3] \u0026 ' Business Days','')Var PW4=If(\u0027Business Day Query\u0027[Business Day PW4]\u003c5,' ' \u0026 ANBP_OTHERREV_SD[ANBP PW4 Date]\u0026' had ' \u0026 \u0027Business Day Query\u0027[Business Day PW4] \u0026 ' Business Days','')Return If((\u0027Business Day Query\u0027[Business Day PW]+\u0027Business Day Query\u0027[Business Day PW2]+\u0027Business Day Query\u0027[Business Day PW3]+\u0027Business Day Query\u0027[Business Day PW4])\u003c20, PW \u0026 PW2 \u0026 PW3 \u0026 PW4 \u0026 '. All other weeks had 5 business days.','')","isHidden":false},{"name":"YTD Business Day Message","expression":"If([CY Business Day Count]=[PY Business Day Count], 'PYTD and YTD had ' \u0026 [CY Business Day Count] \u0026 ' Business Days','PYTD had ' \u0026 [PY Business Day Count] \u0026 ' Business Days \u0026 YTD has ' \u0026 [CY Business Day Count] \u0026 ' Business Days')","isHidden":false}],"source":[{"expression":"let    Source = DB2.Database('podwh021:50000', 'podwh021', [HierarchicalNavigation=true, Implementation='Microsoft']),    COMMON = Source{[Schema='COMMON']}[Data],    IA_DATES = COMMON{[Name='IA_DATES']}[Data],    #'Added Custom2' = Table.AddColumn(IA_DATES, 'Year Flag', each if (Date.Year(DateTime.LocalNow())=[CAL_DIM_YR_NBR]) then 'CY' elseif (Date.Year(DateTime.LocalNow())=[CAL_DIM_YR_NBR]+1) then 'PY' else  ''),    #'Filtered Rows' = Table.SelectRows(#'Added Custom2', each [Year Flag] \u003c\u003e ''),    #'Added Custom1' = Table.AddColumn(#'Filtered Rows', 'Business Day', each if ([WKDY_IND]= 'Y') then if ([HDAY_IND]\u003c\u003e'Y') then '1' else '0'else '0'),    #'Removed Other Columns' = Table.SelectColumns(#'Added Custom1',{'DT_SK', 'CAL_YR_DAY_NBR', 'CAL_DAY_DT', 'HDAY_IND', 'WKDY_IND', 'Year Flag', 'Business Day'}),    #'Changed Type' = Table.TransformColumnTypes(#'Removed Other Columns',{{'Business Day', Int64.Type}})in    #'Changed Type'"}]},{"name":"Life Illustration Data CY","isHidden":false,"storageMode":"Import","columns":[{"name":"Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Day","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Count","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Product_New","dataType":"String","isHidden":false,"expression":"SWITCH(\u0027Life Illustration Data CY\u0027[Product],'SPWL19','SPWL','SWL19','PERM_RECURRING','TermIV','Term','ULA19','UL','ULP19','UL','VUL19','VUL','WL19','PERM_RECURRING','WLP19','PERM_RECURRING','Deferred Fixed Annuity','FA','SECONE2004','FA','SECPLUS2004','FA','FIA2014','FIA','FIAGLWB2016','FIA','DIA','SPIA','Fixed Indexed Annuity','FIA','FSO','SO','SPIA','SPIA','VA2020','VA','Variable Annuity','VA','Variable Annuity 2005','VA',\u0027Life Illustration Data CY\u0027[Product])","columnType":"Calculated"},{"name":"Product_Table","dataType":"String","isHidden":false,"expression":"SWITCH(\u0027Life Illustration Data CY\u0027[Product],'SPWL19','SPWL','SWL19','SWL','TermIV','Term','ULA19','AUL','ULP19','PUL','VUL19','VUL','WL19','WL','WLP19','WLP','Deferred Fixed Annuity','Deferred Fixed Annuity','SECONE2004','Deferred Fixed Annuity','SECPLUS2004','Deferred Fixed Annuity','FIA2014','FIA','FIAGLWB2016','FIA','DIA','SPIA/DIA','Fixed Indexed Annuity','FIA','FSO','SO/FPDA/DISO','SPIA','SPIA/DIA','VA2020','Variable Annuity','Variable Annuity','Variable Annuity','Variable Annuity 2005','Variable Annuity',\u0027Life Illustration Data CY\u0027[Product])","columnType":"Calculated"},{"name":"ProductGroup_Table","dataType":"String","isHidden":false,"expression":"SWITCH(\u0027Life Illustration Data CY\u0027[Product],'SPWL19','Whole Life','SWL19','Whole Life','TermIV','Term','ULA19','UL','ULP19','UL','VUL19','VUL','WL19','Whole Life','WLP19','Whole Life','Deferred Fixed Annuity','Deferred Fixed Annuity','SECONE2004','Deferred Fixed Annuity','SECPLUS2004','Deferred Fixed Annuity','FIA2014','FIA','FIAGLWB2016','FIA','DIA','SPIA/DIA','Fixed Indexed Annuity','FIA','FSO','SO/FPDA/DISO','SPIA','SPIA/DIA','VA2020','Variable Annuity','Variable Annuity','Variable Annuity','Variable Annuity 2005','Variable Annuity',\u0027Life Illustration Data CY\u0027[Product])","columnType":"Calculated"},{"name":"Product Sort","dataType":"String","isHidden":false,"expression":"SWITCH(\u0027Life Illustration Data CY\u0027[Product],'SPWL19','3','SWL19','5','TermIV','1','ULA19','6','ULP19','7','VUL19','8','WL19','2','WLP19','4','Deferred Fixed Annuity','12','SECONE2004','12','SECPLUS2004','12','FIA2014','13','FIAGLWB2016','13','DIA','SPIA','DIA','11','Fixed Indexed Annuity','13','FSO','10','SPIA','11','VA2020','9','Variable Annuity','9','Variable Annuity 2005','9')","columnType":"Calculated"},{"name":"Product Group Sort","dataType":"String","isHidden":false,"expression":"SWITCH(\u0027Life Illustration Data CY\u0027[Product],'SPWL19','2','SWL19','2','TermIV','1','ULA19','3','ULP19','3','VUL19','4','WL19','2','WLP19','2','Deferred Fixed Annuity','8','SECONE2004','8','SECPLUS2004','8','FIA2014','9','FIAGLWB2016','9','DIA','7','Fixed Indexed Annuity','9','FSO','6','SPIA','7','VA2020','5','Variable Annuity','5','Variable Annuity 2005','5')","columnType":"Calculated"},{"name":"WeekIndex","dataType":"String","isHidden":false,"expression":"Var year_num = (YEAR(\u0027Life Illustration Data CY\u0027[Day])-YEAR(MIN(\u0027Life Illustration Data CY\u0027[Day])))+1var year_diff = (YEAR(\u0027Life Illustration Data CY\u0027[Day])-YEAR(MIN(\u0027Life Illustration Data CY\u0027[Day])))Var week_num = WEEKNUM(\u0027Life Illustration Data CY\u0027[Day])RETURN(year_diff*52)+week_num","columnType":"Calculated"},{"name":"WeekNum","dataType":"String","isHidden":false,"expression":"Weeknum(\u0027Life Illustration Data CY\u0027[Day])","columnType":"Calculated"},{"name":"MaxDate","dataType":"String","isHidden":false,"expression":"VAR CurrentDate= DTRB_PERF_DATES[Current Date]Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[CAL_DAY_DT]=(CurrentDate)))-1RETURNCALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))","columnType":"Calculated"},{"name":"Custom","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"CY Illustration","expression":"VAR CurrentYear=DTRB_PERF_DATES[Current Year]RETURNif (ISFILTERED(RFO_Market[Advisor Group])=TRUE,Blank(),if (ISFILTERED(\u0027Tenure Group Bridge Table\u0027[Tenure Group]),BLANK(),CALCULATE(SUM(\u0027Life Illustration Data CY\u0027[Count]),FILTER(\u0027Life Illustration Data CY\u0027,YEAR(\u0027Life Illustration Data CY\u0027[Day])=CurrentYear \u0026\u0026\u0027Life Illustration Data CY\u0027[Count]\u003e0 \u0026\u0026 \u0027Life Illustration Data CY\u0027[Day]\u003c=\u0027Life Illustration Data CY\u0027[MaxDate]  ))))","isHidden":false},{"name":"PW Illustration","expression":"VAR CurrentDate= DTRB_PERF_DATES[Current Date]RETURNif (ISFILTERED(RFO_Market[Advisor Group])=TRUE,'NA',if (ISFILTERED(\u0027Tenure Group Bridge Table\u0027[Tenure Group]),'NA',CALCULATE (SUM(\u0027Life Illustration Data CY\u0027[Count]),YEAR(\u0027Life Illustration Data CY\u0027[Day])=YEAR(CurrentDate),WEEKNUM(\u0027Life Illustration Data CY\u0027[Day])=WeekNUM(CurrentDate)-1)))","isHidden":false},{"name":"PY Illustration Percent","expression":"DIVIDE(Sum(\u0027Life Illustration Data CY\u0027[Count]),[PYTotalIllustrationCount])","isHidden":false},{"name":"PYTotalIllustrationCount","expression":"VAR CurrentDate= DTRB_PERF_DATES[Current Date]RETURNCALCULATE(Sum(\u0027Life Illustration Data CY\u0027[Count]),Filter(\u0027Life Illustration Data CY\u0027,YEAR(\u0027Life Illustration Data CY\u0027[Day])=YEAR(CurrentDate)-1))","isHidden":false},{"name":"Week Ending","expression":"Not available","isHidden":false},{"name":"Illustration Vs Prior Week","expression":"VAR CurrentDate= DTRB_PERF_DATES[Current Date]Var PriorWeek= CALCULATE(SUM(\u0027Life Illustration Data CY\u0027[Count]),DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR]=WEEKNUM(CurrentDate)-3)Var PreviousWeek=CALCULATE (SUM(\u0027Life Illustration Data CY\u0027[Count]),DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR]=WeekNUM(CurrentDate)-2)RETURN(DIVIDE (PreviousWeek,PriorWeek))-1","isHidden":false},{"name":"vs. Prior Week Illustration","expression":"VAR CurrentDate= DTRB_PERF_DATES[Current Date]Var PW2= CALCULATE(SUM(\u0027Life Illustration Data CY\u0027[Count]),WEEKNUM(\u0027Life Illustration Data CY\u0027[Day])=WEEKNUM(CurrentDate)-2,YEAR(\u0027Life Illustration Data CY\u0027[Day])=Year(CurrentDate))Returnif (ISFILTERED(RFO_Market[Advisor Group])=TRUE,Blank(),if (ISFILTERED(\u0027Tenure Group Bridge Table\u0027[Tenure Group]),BLANK(),If(PW2=BLANK(),'-',Divide([PW Illustration2],[PW2 Illustration])-1)))","isHidden":false},{"name":"PW2 Illustration","expression":"// CALCULATE(SUM(\u0027Life Illustration Data CY\u0027[Count]),WEEKNUM(\u0027Life Illustration Data CY\u0027[Day])=WEEKNUM(TODAY())-2,YEAR(\u0027Life Illustration Data CY\u0027[Day])=Year(TODAY()))VAR CurrentDate= DTRB_PERF_DATES[Current Date]Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[CAL_DAY_DT]=(CurrentDate)))-2 Returnif (ISFILTERED(RFO_Market[Advisor Group])=TRUE,'NA',if (ISFILTERED(\u0027Tenure Group Bridge Table\u0027[Tenure Group]),'NA',CALCULATE (SUM(\u0027Life Illustration Data CY\u0027[Count]),DTRB_PERF_DATES[WeekIndex]=max_week)))","isHidden":false},{"name":"4 Week Avg Illustration","expression":"// Var FourWeekTotal= CALCULATE(Sum(\u0027Life Illustration Data CY\u0027[Count]),WEEKNUM(\u0027Life Illustration Data CY\u0027[Day])\u003c=WEEKNUM(TODAY())-1,WEEKNUM(\u0027Life Illustration Data CY\u0027[Day])\u003e=WEEKNUM(TODAY())-4,YEAR(\u0027Life Illustration Data CY\u0027[Day])=YEAR(TODAY()))// Returnif (ISFILTERED(RFO_Market[Advisor Group])=TRUE,Blank(),if (ISFILTERED(\u0027Tenure Group Bridge Table\u0027[Tenure Group]),BLANK(),Divide (\u0027Life Illustration Data CY\u0027[4 Week Total],4)))","isHidden":false},{"name":"vs.4 Week Avg Prior Year","expression":"if (ISFILTERED(RFO_Market[Advisor Group])=TRUE,Blank(),if (ISFILTERED(\u0027Tenure Group Bridge Table\u0027[Tenure Group]),BLANK(),if(\u0027Life Illustration Data CY\u0027[4 Week Avg Illustration]=Blank(),'-',Divide(\u0027Life Illustration Data CY\u0027[4 Week Avg Illustration],\u0027Life Illustration Data CY\u0027[PY 4 Week Avg Illustration])-1)))","isHidden":false},{"name":"PY Illustration","expression":"VAR CurrentYear=DTRB_PERF_DATES[Current Year]RETURNif (ISFILTERED(RFO_Market[Advisor Group])=TRUE,Blank(),if (ISFILTERED(\u0027Tenure Group Bridge Table\u0027[Tenure Group]),BLANK(),CALCULATE (SUM(\u0027Life Illustration Data CY\u0027[Count]),YEAR(\u0027Life Illustration Data CY\u0027[Day])= CurrentYear-1 )))","isHidden":false},{"name":"PY 4 Week Avg Illustration","expression":"VAR CurrentDate= DTRB_PERF_DATES[Current Date]Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[CAL_DAY_DT]=(CurrentDate)))-1-52Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_week -3VAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))Var FourWeekTotal= CALCULATE(              SUM(\u0027Life Illustration Data CY\u0027[Count]),               FILTER(\u0027Life Illustration Data CY\u0027,                             \u0027Life Illustration Data CY\u0027[Day]\u003c=MaxDay              \u0026\u0026 \u0027Life Illustration Data CY\u0027[Day]\u003e=StartDay))ReturnDivide (FourWeekTotal,4)","isHidden":false},{"name":"YTD Weekly Avg Illustrations","expression":"VAR CurrentDate= DTRB_PERF_DATES[Current Date]Var YTDTotal=CALCULATE(Sum(\u0027Life Illustration Data CY\u0027[Count]),YEAR(\u0027Life Illustration Data CY\u0027[Day])=Year(CurrentDate))Var YTDWeekCount=// WEEKNUM(TODAY())-1CALCULATE(    MAX(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[CAL_DAY_DT]=(CurrentDate)))-1Returnif (ISFILTERED(RFO_Market[Advisor Group])=TRUE,Blank(),if (ISFILTERED(\u0027Tenure Group Bridge Table\u0027[Tenure Group]),BLANK(),Divide(YTDTotal,YTDWeekCount)))","isHidden":false},{"name":"PYTD Weekly Avg Illustrations","expression":"VAR CurrentDate= DTRB_PERF_DATES[Current Date]Var WeekCount= // WEEKNUM(TODAY())-1CALCULATE(    MAX(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[CAL_DAY_DT]=(CurrentDate)))-1Var PYTDTotal=CALCULATE(Sum(\u0027Life Illustration Data CY\u0027[Count]),YEAR(\u0027Life Illustration Data CY\u0027[Day])=Year(CurrentDate)-1,DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR]\u003c=WeekCount)Returnif (ISFILTERED(RFO_Market[Advisor Group])=TRUE,Blank(),if (ISFILTERED(\u0027Tenure Group Bridge Table\u0027[Tenure Group]),BLANK(),Divide(PYTDTotal,WeekCount)))","isHidden":false},{"name":"YTD Total Illustrations","expression":"VAR CurrentDate= DTRB_PERF_DATES[Current Date]RETURNif (ISFILTERED(RFO_Market[Advisor Group])=TRUE,Blank(),if (ISFILTERED(\u0027Tenure Group Bridge Table\u0027[Tenure Group]),BLANK(),CALCULATE(SUM(\u0027Life Illustration Data CY\u0027[Count]),YEAR(\u0027Life Illustration Data CY\u0027[Day])=Year(CurrentDate))))","isHidden":false},{"name":"PYTD Total Illustrations","expression":"VAR CurrentDate= DTRB_PERF_DATES[Current Date]Var WeekCount= // WEEKNUM(TODAY())-1CALCULATE(    MAX(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[CAL_DAY_DT]=(CurrentDate)))-1RETURN CALCULATE(Sum(\u0027Life Illustration Data CY\u0027[Count]),YEAR(\u0027Life Illustration Data CY\u0027[Day])=Year(CurrentDate)-1,DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR]\u003c=WeekCount)// CALCULATE(SUM(\u0027Life Illustration Data CY\u0027[Count]),YEAR(\u0027Life Illustration Data CY\u0027[Day])=Year(TODAY())-1,WEEKNUM(\u0027Life Illustration Data CY\u0027[Day])\u003c=WEEKNUM(TODAY())-1)","isHidden":false},{"name":"vs. PY YTD Illustrations","expression":"if (ISFILTERED(RFO_Market[Advisor Group])=TRUE,Blank(),if (ISFILTERED(\u0027Tenure Group Bridge Table\u0027[Tenure Group]),BLANK(),If(\u0027Life Illustration Data CY\u0027[YTD Total Illustrations]=Blank(),'-',DIVIDE(\u0027Life Illustration Data CY\u0027[YTD Total Illustrations], \u0027Life Illustration Data CY\u0027[PYTD Total Illustrations])-1)))","isHidden":false},{"name":"NoIllustrationDataText","expression":"if (ISFILTERED(RFO_Market[Advisor Group])=TRUE,'Illustration Data is not available at Advisor Group or Tenure Group level',if (ISFILTERED(\u0027Tenure Group Bridge Table\u0027[Tenure Group]),'Illustration Data is not available at Advisor Group or Tenure Group level',if (ISFILTERED(RFO_Market[Channel]),'Illustration Data is not available at Advisor Group or Tenure Group level',if (ISFILTERED(MVP[MVP]),'Illustration Data is not available at Advisor Group or Tenure Group level',if (ISFILTERED(Market_Leaders[Market]),'Illustration Data is not available at Advisor Group or Tenure Group level','')))))","isHidden":false},{"name":"ShowHideMeasure","expression":"if (ISFILTERED(RFO_Market[Advisor Group]),'White',if (ISFILTERED(\u0027Tenure Group Bridge Table\u0027[Tenure Group]),'White',if (ISFILTERED(RFO_Market[Channel]),'White',if (ISFILTERED(MVP[MVP]),'White',if (ISFILTERED(Market_Leaders[Market]),'White', '#1C00ff00')))))","isHidden":false},{"name":"4 Week Total","expression":"Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT]='CURRENT'))-1Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_week -3VAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))RETURNCALCULATE(              SUM(\u0027Life Illustration Data CY\u0027[Count]),               FILTER(\u0027Life Illustration Data CY\u0027,                             \u0027Life Illustration Data CY\u0027[Day]\u003c=MaxDay              \u0026\u0026 \u0027Life Illustration Data CY\u0027[Day]\u003e=StartDay))","isHidden":false},{"name":"PW Illustration2","expression":"VAR CurrentDate= DTRB_PERF_DATES[Current Date]Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[CAL_DAY_DT]=(CurrentDate)))-1 Returnif (ISFILTERED(RFO_Market[Advisor Group])=TRUE,'NA',if (ISFILTERED(\u0027Tenure Group Bridge Table\u0027[Tenure Group]),'NA',CALCULATE (SUM(\u0027Life Illustration Data CY\u0027[Count]),DTRB_PERF_DATES[WeekIndex]=max_week)))","isHidden":false}],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////VSSHR//SHARED//Public//DI and BI//Sales Dashboard//Illustration_Application_Annual_Counts.csv'),[Delimiter=',', Columns=4, Encoding=65001, QuoteStyle=QuoteStyle.None]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Column1', type text}, {'Column2', type text}, {'Column3', type text}, {'Column4', type text}}),    #'Removed Top 16 Rows' = Table.Skip(#'Changed Type',16),    #'Removed Columns1' = Table.RemoveColumns(#'Removed Top 16 Rows',{'Column1'}),    #'Renamed Columns2 to Product' = Table.RenameColumns(#'Removed Columns1',{{'Column2', 'Product'}}),    #'Filtered null and Day text  from Column 3' = Table.SelectRows(#'Renamed Columns2 to Product', each ([Column3] \u003c\u003e '' and [Column3] \u003c\u003e 'Day')),    #'Renamed Columns3 to Day' = Table.RenameColumns(#'Filtered null and Day text  from Column 3',{{'Column3', 'Day'}}),    #'Changed Day to Date format' = Table.TransformColumnTypes(#'Renamed Columns3 to Day',{{'Day', type date}}),    #'Renamed Columns3 to Count' = Table.RenameColumns(#'Changed Day to Date format',{{'Column4', 'Count'}}),    #'Changed Count to whole number format' = Table.TransformColumnTypes(#'Renamed Columns3 to Count',{{'Count', Int64.Type}}),    #'Append Solution Studio CY' = Table.Combine({#'Changed Count to whole number format', Illustration_Application_Solution_Studio_Annual_Counts}),    #'Append Solution Studio 2023' = Table.Combine({#'Append Solution Studio CY', Illustration_Application_Solution_Studio_Annual_Counts_2023}),    #'Append Solution Studio 2022' = Table.Combine({#'Append Solution Studio 2023', Illustration_Application_Solution_Studio_Annual_Counts_2022}),    #'Append iPipeline' = Table.Combine({#'Append Solution Studio 2022', #'iPipeline_Illustration 2022'}),    #'Filtered Rows3' = Table.SelectRows(#'Append iPipeline', each [Day] \u003c\u003e null and [Day] \u003c\u003e ''),    #'Added Custom' = Table.AddColumn(#'Filtered Rows3', 'Custom', each if [Day]\u003eDate.From(Date.EndOfWeek(Date.AddDays(DateTime.LocalNow(),-6),Day.Monday)) then 'Post Last Sunday' else 'Pre Last Sunday'),    #'Filtered Rows' = Table.SelectRows(#'Added Custom', each ([Custom] = 'Pre Last Sunday'))in    #'Filtered Rows'"}]},{"name":"Life Illustration Data PY","isHidden":false,"storageMode":"Import","columns":[{"name":"Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Day","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Count","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Product_New","dataType":"String","isHidden":false,"expression":"SWITCH(\u0027Life Illustration Data PY\u0027[Product],'SPWL19','SPWL','SWL19','PERM_RECURRING','TermIV','Term','ULA19','UL','ULP19','UL','VUL19','VUL','WL19','PERM_RECURRING','WLP19','PERM_RECURRING')","columnType":"Calculated"}],"measures":[],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////VSSHR//SHARED//Public//DI and BI//Sales Dashboard//Illustration_Application_Annual_Counts_2021.csv'),[Delimiter=',', Columns=4, Encoding=65001, QuoteStyle=QuoteStyle.None]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Column1', type text}, {'Column2', type text}, {'Column3', type text}, {'Column4', type text}}),    #'Removed Top 16 Rows' = Table.Skip(#'Changed Type',16),    #'Removed Columns1' = Table.RemoveColumns(#'Removed Top 16 Rows',{'Column1'}),    #'Renamed Columns2 to Product' = Table.RenameColumns(#'Removed Columns1',{{'Column2', 'Product'}}),    #'Filtered null and Day text  from Column 3' = Table.SelectRows(#'Renamed Columns2 to Product', each ([Column3] \u003c\u003e '' and [Column3] \u003c\u003e 'Day')),    #'Renamed Columns3 to Day' = Table.RenameColumns(#'Filtered null and Day text  from Column 3',{{'Column3', 'Day'}}),    #'Changed Day to Date format' = Table.TransformColumnTypes(#'Renamed Columns3 to Day',{{'Day', type date}}),    #'Renamed Columns3 to Count' = Table.RenameColumns(#'Changed Day to Date format',{{'Column4', 'Count'}}),    #'Changed Count to whole number format' = Table.TransformColumnTypes(#'Renamed Columns3 to Count',{{'Count', Int64.Type}})in    #'Changed Count to whole number format'"}]},{"name":"UL VUL Excess_Append Query","isHidden":false,"storageMode":"Import","columns":[{"name":"Value","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CalYr","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"CalWk","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"max_cal_dt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Mapping.Product Roll Up","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_CDE_With Duplicate NPG Rows","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ANBP_OtherRev","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Not YTD","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"beg_mth_dt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Endof Month_Friday","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"MonthEndDate","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"MONTH","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////VSDEPT//DEPT7900//7173//Analytics Team//Production Reporting//total_sales_weekly//Total Sales Weekly Output.csv'),[Delimiter=',', Columns=18, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Renamed Columns1' = Table.RenameColumns(#'Promoted Headers',{{'Total Sales', 'sales_amt'}, {'Annual New Business Production', 'anbp_amt'}}),    #'Removed Other Columns1' = Table.SelectColumns(#'Renamed Columns1',{'beg_mth_dt', 'sales_amt', 'modifier', 'etrs_dsply_prod_l1', 'etrs_dsply_prod_l2', 'etrs_dsply_chnl_l2'}),    #'Changed Type' = Table.TransformColumnTypes(#'Removed Other Columns1',{{'beg_mth_dt', type date}, {'sales_amt', type number}, {'modifier', type text}, {'etrs_dsply_prod_l2', type text}}),    #'Filtered Rows' = Table.SelectRows(#'Changed Type', each ([etrs_dsply_prod_l2] = 'UL/VUL Excess') and ([modifier] = 'Actual') and ([etrs_dsply_chnl_l2] = 'Enterprise')),    #'Inserted Year' = Table.AddColumn(#'Filtered Rows', 'Year', each Date.Year([beg_mth_dt]), Int64.Type),    #'Added Custom' = Table.AddColumn(#'Inserted Year', 'EndofMonth', each Date.AddDays(Date.EndOfMonth([beg_mth_dt]),0)),    #'Added Custom7' = Table.AddColumn(#'Added Custom', 'Endof Month_Friday', each if Date.DayOfWeekName([EndofMonth])='Saturday' then Date.AddDays([EndofMonth],-1) else if Date.DayOfWeekName([EndofMonth])='Sunday' then Date.AddDays([EndofMonth],-2) else [EndofMonth]),    #'Changed Type1' = Table.TransformColumnTypes(#'Added Custom7',{{'EndofMonth', type date}, {'Endof Month_Friday', type date}}),    #'Renamed Columns' = Table.RenameColumns(#'Changed Type1',{{'sales_amt', 'Value'}, {'etrs_dsply_prod_l2', 'Product'}, {'Year', 'CalYr'}}),    #'Removed Other Columns' = Table.SelectColumns(#'Renamed Columns',{'beg_mth_dt', 'Value', 'Product', 'CalYr', 'EndofMonth', 'Endof Month_Friday'}),    #'Added Custom1' = Table.AddColumn(#'Removed Other Columns', 'max_cal_dt', each Date.EndOfWeek([Endof Month_Friday],Day.Saturday)),    #'Sorted Rows' = Table.Sort(#'Added Custom1',{{'EndofMonth', Order.Descending}}),    #'Added Custom2' = Table.AddColumn(#'Sorted Rows', 'CalWk', each Date.WeekOfYear([max_cal_dt])-1),    #'Removed Columns' = Table.RemoveColumns(#'Added Custom2',{'EndofMonth'}),    #'Added Custom3' = Table.AddColumn(#'Removed Columns', 'Mapping.Product Roll Up', each 'UL/VUL Excess'),    #'Added Custom4' = Table.AddColumn(#'Added Custom3', 'ORZN_CDE_With Duplicate NPG Rows', each 'UL/VUL Excess'),    #'Added Custom5' = Table.AddColumn(#'Added Custom4', 'ANBP_OtherRev', each 'ANBP'),    #'Changed Type2' = Table.TransformColumnTypes(#'Added Custom5',{{'max_cal_dt', type date}, {'CalWk', Int64.Type}, {'ANBP_OtherRev', type text}, {'Mapping.Product Roll Up', type text}, {'ORZN_CDE_With Duplicate NPG Rows', type text}}),    #'Added Custom6' = Table.AddColumn(#'Changed Type2', 'Not YTD', each if Date.Month([max_cal_dt])\u003c=Date.Month(List.Max(#'Changed Type2'[max_cal_dt]))then '' else 'Not YTD'),    #'Filtered Rows1' = Table.SelectRows(#'Added Custom6', each Date.IsInPreviousNYears([beg_mth_dt], 2) or Date.IsInCurrentYear([beg_mth_dt])),    #'Inserted End of Month' = Table.AddColumn(#'Filtered Rows1', 'MonthEndDate', each Date.EndOfMonth([beg_mth_dt]), type date),    #'Inserted Month' = Table.AddColumn(#'Inserted End of Month', 'MONTH', each Date.Month([beg_mth_dt]), Int64.Type)in    #'Inserted Month'"}]},{"name":"Illustration_Application_Solution_Studio_Annual_Counts","isHidden":false,"storageMode":"Import","columns":[{"name":"Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Day","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Count","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////VSSHR//SHARED//Public//DI and BI//Sales Dashboard//Illustration_Application_Solution_Studio_Annual_Counts.csv'),[Delimiter=',', Columns=3, Encoding=65001, QuoteStyle=QuoteStyle.None]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Column1', type text}, {'Column2', type text}, {'Column3', type text}}),    #'Removed Top Rows' = Table.Skip(#'Changed Type',15),    #'Renamed Columns' = Table.RenameColumns(#'Removed Top Rows',{{'Column1', 'Product'}, {'Column2', 'Day'}, {'Column3', 'Count'}}),    #'Filtered Rows' = Table.SelectRows(#'Renamed Columns', each ([Day] \u003c\u003e '' and [Day] \u003c\u003e 'Day')),    #'Changed Type1' = Table.TransformColumnTypes(#'Filtered Rows',{{'Day', type date}, {'Count', Int64.Type}})in    #'Changed Type1'"}]},{"name":"1 Applications Pend_Recvd_Complete","isHidden":false,"storageMode":"Import","columns":[{"name":"Week_Ending","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Metric","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Value","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Product_New","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Week_Nbr","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"CorporateEmployeeID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TENURE.ADJ_SVC_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Tenure_Years","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TenureGroup_AppDate","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TSID_ForMerge","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////pnfiles002b//fp_cifs_7834_sas$//MarketAnalysis//FieldReporting//SMIS//RECD_PEND_COMPL.csv'),[Delimiter=',', Columns=34, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Week_Ending', type date}, {'Week_Nbr', Int64.Type}, {'ContractNumber', type text}, {'BenefitContractNumber', type text}, {'FileCode', type text}, {'TransCode', Int64.Type}, {'TransDesc', type text}, {'TransReceiveDt', type date}, {'TransCreateDt', type date}, {'TransCloseDt', type date}, {'TransSeqNumber', Int64.Type}, {'Product', type text}, {'ProdType', type text}, {'LOBCode', type text}, {'LOBSubType', type text}, {'SMISLOBCode', type text}, {'SMISPlanCode', Int64.Type}, {'EstimatedSalesCreditAmt', Currency.Type}, {'ActualSalesCreditAmt', Currency.Type}, {'CAPTransmissionNumber', Int64.Type}, {'CorporateEmployeeID', type text}, {'RFOCode', Int64.Type}, {'RFOName', type text}, {'AgentCode', Int64.Type}, {'SMISTRANSKEY', type text}, {'Received', Int64.Type}, {'Pending', Int64.Type}, {'Retired', Int64.Type}, {'Declined', Int64.Type}, {'Issued', Int64.Type}, {'Cancelled', Int64.Type}, {'STATUS', type text}, {'YR', Int64.Type}, {'ContractFaceAmount', type number}}),    #'Merged Queries1' = Table.NestedJoin(#'Changed Type', {'BenefitContractNumber'}, #'Product Dimension for App Received', {'Trimmed Contract Number'}, 'ContractDimension For App Recvd', JoinKind.LeftOuter),    #'Expanded ContractDimension For App Recvd' = Table.ExpandTableColumn(#'Merged Queries1', 'ContractDimension For App Recvd', {'PLOB_NB_CDE', 'PLOB_NB_DSCR', 'PROD_LOB_NBS_TXT', 'PLOB_GRP_NB_CDE', 'PLOB_GRP_NB_DSCR', 'PLOB_GRP_NBS_TXT', 'PLOB_SGRP_NB_CDE', 'PLOB_SGDL_NB_CDE', 'PLOB_SGRP_NB_DSCR', 'PLOB_SGRP_NBS_TXT', 'PLOB_SGDL_NB_DSCR', 'PLOB_SGDL_NBS_TXT', 'Trimmed Contract Number'}, {'ProductDimension.PLOB_NB_CDE', 'ProductDimension.PLOB_NB_DSCR', 'ProductDimension.PROD_LOB_NBS_TXT', 'ProductDimension.PLOB_GRP_NB_CDE', 'ProductDimension.PLOB_GRP_NB_DSCR', 'ProductDimension.PLOB_GRP_NBS_TXT', 'ProductDimension.PLOB_SGRP_NB_CDE', 'ProductDimension.PLOB_SGDL_NB_CDE', 'ProductDimension.PLOB_SGRP_NB_DSCR', 'ProductDimension.PLOB_SGRP_NBS_TXT', 'ProductDimension.PLOB_SGDL_NB_DSCR', 'ProductDimension.PLOB_SGDL_NBS_TXT', 'ProductDimension.Trimmed Contract Number'}),    #'Added Conditional Column' = Table.AddColumn(#'Expanded ContractDimension For App Recvd', 'Product_New', each if [ProdType] = 'TERM' then 'Term' else if [LOBCode] = 'UL' then 'UL' else if [LOBCode] = 'VUL' then 'VUL' else if [LOBSubType] = 'SGLPRMWL' then 'SPWL' else if [LOBSubType] = 'Single Prem LF' then 'SPWL' else if [LOBSubType] = 'SLPMWL21' then 'SPWL' else if [Product] = 'LIFE' then 'PERM_RECURRING' else if [ProductDimension.PLOB_SGRP_NBS_TXT] = 'FIA' then 'FIA' else if [LOBSubType] = 'FIA GLWB' then 'FIA' else if [LOBCode] = 'FA' then 'FA' else if [LOBCode] = 'SO' then 'SO' else if [LOBCode] = 'VSO' then 'SO' else if [LOBCode] = 'SPIA' then 'SPIA' else if [LOBCode] = 'VA' then 'VA' else if [LOBSubType] = 'VARANN' then 'VA' else if [LOBSubType] = 'AdvisorFlex VA' then 'VA' else if Text.StartsWith([LOBSubType], 'MYGA') then 'MYGA' else null),    #'Removed Other Columns' = Table.SelectColumns(#'Added Conditional Column',{'Week_Ending', 'Week_Nbr', 'BenefitContractNumber', 'TransReceiveDt', 'TransCreateDt', 'TransCloseDt', 'Product', 'ProdType', 'LOBCode', 'CorporateEmployeeID', 'Received', 'Pending', 'Retired', 'Declined', 'Issued', 'Cancelled', 'ContractFaceAmount', 'STATUS', 'Product_New'}),    #'FilterRows After 1.1.20' = Table.SelectRows(#'Removed Other Columns', each Date.IsInCurrentYear([Week_Ending]) or Date.IsInPreviousYear([Week_Ending]) or [Week_Ending] \u003e= #date(2021, 12, 1)),    #'Added Custom' = Table.AddColumn(#'FilterRows After 1.1.20', 'Issued Face Amount', each if [Issued]=1 then [ContractFaceAmount] else ''),    #'Added Custom1' = Table.AddColumn(#'Added Custom', 'Total Closed', each [Issued]+[Declined]+[Retired]),    #'Changed Type2' = Table.TransformColumnTypes(#'Added Custom1',{{'Total Closed', Int64.Type}}),    #'Changed Type1' = Table.TransformColumnTypes(#'Changed Type2',{{'Issued Face Amount', type number}}),    #'Grouped Rows' = Table.Group(#'Changed Type1', {'Week_Ending', 'Product_New', 'Week_Nbr', 'CorporateEmployeeID'}, {{'Received', each List.Sum([Received]), type nullable number}, {'Issued', each List.Sum([Issued]), type nullable number}, {'Declined', each List.Sum([Declined]), type nullable number}, {'Retired', each List.Sum([Retired]), type nullable number}, {'End of Period Pending', each List.Sum([Pending]), type nullable number}, {'Total Face Amount', each List.Sum([ContractFaceAmount]), type nullable number}, {'Average Face Amount', each List.Average([ContractFaceAmount]), type nullable number}, {'Issue Face Amount', each List.Sum([Issued Face Amount]), type nullable number}, {'Total Closed', each List.Sum([Total Closed]), type nullable number}}),    #'Unpivoted Other Columns1' = Table.UnpivotOtherColumns(#'Grouped Rows', {'Week_Ending', 'Product_New','Week_Nbr','CorporateEmployeeID'}, 'Attribute', 'Value'),    #'Renamed Columns' = Table.RenameColumns(#'Unpivoted Other Columns1',{{'Attribute', 'Metric'}}),    #'Added Custom3' = Table.AddColumn(#'Renamed Columns', 'TSID_ForMerge', each Text.Trim([CorporateEmployeeID])),    #'Merged Queries' = Table.NestedJoin(#'Added Custom3', {'CorporateEmployeeID'}, TENURE, {'TSID for Merge'}, 'TENURE', JoinKind.LeftOuter),    #'Expanded TENURE' = Table.ExpandTableColumn(#'Merged Queries', 'TENURE', {'ADJ_SVC_DT'}, {'TENURE.ADJ_SVC_DT'}),    #'Added Custom2' = Table.AddColumn(#'Expanded TENURE', 'Tenure_Years', each ([Week_Ending]-[TENURE.ADJ_SVC_DT])/365),    #'Changed Type3' = Table.TransformColumnTypes(#'Added Custom2',{{'Tenure_Years', type number}}),    #'Added Conditional Column1' = Table.AddColumn(#'Changed Type3', 'TenureGroup_AppDate', each if [Tenure_Years] = null then 'Blank' else if [Tenure_Years] \u003c= 1 then 'NFR1' else if [Tenure_Years] \u003c= 2 then 'NFR2' else if [Tenure_Years] \u003c= 3 then 'NFR3' else if [Tenure_Years] \u003c= 4 then 'NFR4' else if [Tenure_Years] \u003c= 5 then 'VET5' else if [Tenure_Years] \u003c= 6 then 'VET6' else if [Tenure_Years] \u003c= 7 then 'VET7' else 'VET8+')in    #'Added Conditional Column1'"}]},{"name":"2 Applications Pend_Recvd_Complete","isHidden":false,"storageMode":"Import","columns":[{"name":"Value","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Week_Ending","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Metric","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Product_New","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Week_Nbr","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"CorporateEmployeeID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TENURE.ADJ_SVC_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Tenure_Years","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TenureGroup_AppDate","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TSID_ForMerge","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = #'1 Applications Pend_Recvd_Complete',    #'Filtered Rows' = Table.SelectRows(Source, each ([Metric] = 'End of Period Pending')),    #'Added Custom' = Table.AddColumn(#'Filtered Rows', 'Week_Ending1', each Date.AddDays([Week_Ending],+7)),    #'Added Custom1' = Table.AddColumn(#'Added Custom', 'Metric1', each 'Begin of Period Pending'),    #'Removed Columns' = Table.RemoveColumns(#'Added Custom1',{'Week_Ending', 'Metric'}),    #'Renamed Columns' = Table.RenameColumns(#'Removed Columns',{{'Week_Ending1', 'Week_Ending'}, {'Metric1', 'Metric'}}),    #'Changed Type' = Table.TransformColumnTypes(#'Renamed Columns',{{'Week_Ending', type date}})in    #'Changed Type'"}]},{"name":"3 Applications Pend_Recvd_Complete","isHidden":false,"storageMode":"Import","columns":[{"name":"Week_Ending","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Metric","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Value","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Product_New","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Sort Order","dataType":"String","isHidden":false,"expression":"SWITCH(\u00273 Applications Pend_Recvd_Complete\u0027[Metric],'Begin of Period Pending',1,'Received',2,'Issued',3,'Retired',4,'Declined',5,'Total Closed',6, 'End of Period Pending',7,'Average Face Amount',7,'Total Face Amount',8)","columnType":"Calculated"},{"name":"Index","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Week_Nbr","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"CorporateEmployeeID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TENURE.ADJ_SVC_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Tenure_Years","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TenureGroup_AppDate","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TSID_ForMerge","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"4 Week Avg","expression":"Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT]='CURRENT'))-1Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_week -3VAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))Var FourWeekTotal= CALCULATE(Sum(\u00273 Applications Pend_Recvd_Complete\u0027[Value]),FILTER(\u00273 Applications Pend_Recvd_Complete\u0027,\u00273 Applications Pend_Recvd_Complete\u0027[Week_Ending]\u003e=StartDay \u0026\u0026 \u00273 Applications Pend_Recvd_Complete\u0027[Week_Ending]\u003c=MaxDay))ReturnDivide (FourWeekTotal,4)","isHidden":false},{"name":"PW Value","expression":"VAR CurrentDate= DTRB_PERF_DATES[Current Date]Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[CAL_DAY_DT]=([Current Date])))-1Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_weekVAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))RETURNCALCULATE(SUM(\u00273 Applications Pend_Recvd_Complete\u0027[Value]), FILTER(\u00273 Applications Pend_Recvd_Complete\u0027,\u00273 Applications Pend_Recvd_Complete\u0027[Week_Ending]\u003e=StartDay \u0026\u0026 \u00273 Applications Pend_Recvd_Complete\u0027[Week_Ending]\u003c=MaxDay))","isHidden":false},{"name":"PYTD Weekly Avg","expression":"VAR CurrentDate= DTRB_PERF_DATES[Current Date]Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[CAL_DAY_DT]=(CurrentDate)))-1-52Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_weekVAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))Var PYTDTotal=CALCULATE(Sum(\u00273 Applications Pend_Recvd_Complete\u0027[Value]),FILTER(\u00273 Applications Pend_Recvd_Complete\u0027,YEAR(\u00273 Applications Pend_Recvd_Complete\u0027[Week_Ending])=YEAR([Current Date])-1 \u0026\u0026 \u00273 Applications Pend_Recvd_Complete\u0027[Week_Ending]\u003c=MaxDay \u0026\u0026 WEEKNUM(\u00273 Applications Pend_Recvd_Complete\u0027[Week_Ending] )\u003c\u003e1))Var WeekCount= CALCULATE(    MAX(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[CAL_DAY_DT]=(CurrentDate)))-1ReturnDivide(PYTDTotal,WeekCount)","isHidden":false},{"name":"vs. Prior Week","expression":"VAR CurrentDate= DTRB_PERF_DATES[Current Date]Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[CAL_DAY_DT]=(CurrentDate)))-2Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR StartDay=MaxDay-6VAR PW2=CALCULATE(SUM(\u00273 Applications Pend_Recvd_Complete\u0027[Value]), FILTER(\u00273 Applications Pend_Recvd_Complete\u0027,\u00273 Applications Pend_Recvd_Complete\u0027[Week_Ending]\u003e=StartDay \u0026\u0026 \u00273 Applications Pend_Recvd_Complete\u0027[Week_Ending]\u003c=MaxDay))Returnif( \u00273 Applications Pend_Recvd_Complete\u0027[YTD Total]=BLANK(),BLANK(),Divide([PW Value],PW2)-1)","isHidden":false},{"name":"vs. PYTD","expression":"VAR CurrentDate= DTRB_PERF_DATES[Current Date]Var PY_YTD=CALCULATE(SUM(\u00273 Applications Pend_Recvd_Complete\u0027[Value]),Filter(\u00273 Applications Pend_Recvd_Complete\u0027,YEAR(\u00273 Applications Pend_Recvd_Complete\u0027[Week_Ending])=Year(CurrentDate)-1 \u0026\u0026 WEEKNUM(\u00273 Applications Pend_Recvd_Complete\u0027[Week_Ending])\u003c=WEEKNUM(CurrentDate)-1 \u0026\u0026 \u00273 Applications Pend_Recvd_Complete\u0027[Metric]\u003c\u003e 'Begin of Period Pending'\u0026\u0026\u00273 Applications Pend_Recvd_Complete\u0027[Metric]\u003c\u003e 'End of Period Pending'))Var PreviousYearBeginPending= Calculate(Sum(\u00273 Applications Pend_Recvd_Complete\u0027[Value]), Year(\u00273 Applications Pend_Recvd_Complete\u0027[Week_Ending])=YEAR(CurrentDate)-1, WEEKNUM(\u00273 Applications Pend_Recvd_Complete\u0027[Week_Ending])=1)ReturnIf (PY_YTD=Blank(),Divide([YTD Total],PreviousYearBeginPending)-1, Divide([YTD Total],PY_YTD)-1)","isHidden":false},{"name":"YTD Total","expression":"VAR CurrentDate= DTRB_PERF_DATES[Current Date]Var YTDMetric= CALCULATE(SUM(\u00273 Applications Pend_Recvd_Complete\u0027[Value]),Filter(\u00273 Applications Pend_Recvd_Complete\u0027,YEAR(\u00273 Applications Pend_Recvd_Complete\u0027[Week_Ending])=Year(CurrentDate)\u0026\u0026 \u00273 Applications Pend_Recvd_Complete\u0027[Metric]\u003c\u003e 'Begin of Period Pending'\u0026\u0026\u00273 Applications Pend_Recvd_Complete\u0027[Metric]\u003c\u003e 'End of Period Pending'))Var YearBeginPending= Calculate(Sum(\u00273 Applications Pend_Recvd_Complete\u0027[Value]), Year(\u00273 Applications Pend_Recvd_Complete\u0027[Week_Ending])=YEAR(CurrentDate), WEEKNUM(\u00273 Applications Pend_Recvd_Complete\u0027[Week_Ending])=1)Var EndOfPeriodPending= CALCULATE(SUM(\u00273 Applications Pend_Recvd_Complete\u0027[Value]),Filter(\u00273 Applications Pend_Recvd_Complete\u0027,YEAR(\u00273 Applications Pend_Recvd_Complete\u0027[Week_Ending])=Year(CurrentDate)\u0026\u0026 WEEKNUM(\u00273 Applications Pend_Recvd_Complete\u0027[Week_Ending])=WEEKNUM(CurrentDate)-1\u0026\u0026 \u00273 Applications Pend_Recvd_Complete\u0027[Metric]= 'End of Period Pending'))Return--If(YTDMetric=Blank(),YearBeginPending,YTDMetric)If(EndOfPeriodPending\u003c\u003eBLANK(),EndOfPeriodPending,If(YTDMetric=Blank(),YearBeginPending,YTDMetric))","isHidden":false},{"name":"YTD Weekly Avg","expression":"VAR CurrentDate= DTRB_PERF_DATES[Current Date]Var YTDTotal=CALCULATE(Sum(\u00273 Applications Pend_Recvd_Complete\u0027[Value]),YEAR(\u00273 Applications Pend_Recvd_Complete\u0027[Week_Ending])=Year(CurrentDate))Var YTDWeekCount=// WEEKNUM(TODAY())-1CALCULATE(    MAX(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[CAL_DAY_DT]=(CurrentDate)))-1ReturnDivide(YTDTotal,YTDWeekCount)","isHidden":false},{"name":"PY Avg Face Value","expression":"VAR CurrentDate= DTRB_PERF_DATES[Current Date]Var TotalIssueFaceAmount= Calculate(Sum(\u00273 Applications Pend_Recvd_Complete\u0027[Value]),\u00273 Applications Pend_Recvd_Complete\u0027[Metric]='Issue Face Amount', YEAR(\u00273 Applications Pend_Recvd_Complete\u0027[Week_Ending])= YEAR(CurrentDate)-1)Var TotalIssueCount= Calculate(Sum(\u00273 Applications Pend_Recvd_Complete\u0027[Value]),\u00273 Applications Pend_Recvd_Complete\u0027[Metric]='Issued', YEAR(\u00273 Applications Pend_Recvd_Complete\u0027[Week_Ending])= YEAR(CurrentDate)-1)ReturnDivide(TotalIssueFaceAmount,TotalIssueCount)","isHidden":false},{"name":"CY Avg Face Value","expression":"VAR CurrentYear=DTRB_PERF_DATES[Current Year]Var TotalIssueFaceAmount= Calculate(Sum(\u00273 Applications Pend_Recvd_Complete\u0027[Value]),\u00273 Applications Pend_Recvd_Complete\u0027[Metric]='Issue Face Amount', YEAR(\u00273 Applications Pend_Recvd_Complete\u0027[Week_Ending])= CurrentYear)Var TotalIssueCount= Calculate(Sum(\u00273 Applications Pend_Recvd_Complete\u0027[Value]),\u00273 Applications Pend_Recvd_Complete\u0027[Metric]='Issued', YEAR(\u00273 Applications Pend_Recvd_Complete\u0027[Week_Ending])= CurrentYear)ReturnDivide(TotalIssueFaceAmount,TotalIssueCount)","isHidden":false},{"name":"PYTD Avg Face Value","expression":"VAR CurrentDate= DTRB_PERF_DATES[Current Date]Var TotalIssueFaceAmount= Calculate(Sum(\u00273 Applications Pend_Recvd_Complete\u0027[Value]),\u00273 Applications Pend_Recvd_Complete\u0027[Metric]='Issue Face Amount', YEAR(\u00273 Applications Pend_Recvd_Complete\u0027[Week_Ending])= YEAR(CurrentDate)-1,WEEKNUM(\u00273 Applications Pend_Recvd_Complete\u0027[Week_Ending])\u003c= WEEKNUM(CurrentDate)-1)Var TotalIssueCount= Calculate(Sum(\u00273 Applications Pend_Recvd_Complete\u0027[Value]),\u00273 Applications Pend_Recvd_Complete\u0027[Metric]='Issued', YEAR(\u00273 Applications Pend_Recvd_Complete\u0027[Week_Ending])= YEAR(CurrentDate)-1,WEEKNUM(\u00273 Applications Pend_Recvd_Complete\u0027[Week_Ending])\u003c= WEEKNUM(CurrentDate)-1)ReturnDivide(TotalIssueFaceAmount,TotalIssueCount)","isHidden":false},{"name":"vs. PYTD Total","expression":"VAR CurrentDate= DTRB_PERF_DATES[Current Date]Var PYTDTotal= CALCULATE(SUM(\u00273 Applications Pend_Recvd_Complete\u0027[Value]),Filter(\u00273 Applications Pend_Recvd_Complete\u0027,YEAR(\u00273 Applications Pend_Recvd_Complete\u0027[Week_Ending])=Year(CurrentDate)-1 \u0026\u0026 WEEKNUM(\u00273 Applications Pend_Recvd_Complete\u0027[Week_Ending])\u003c=WEEKNUM(CurrentDate)-1 \u0026\u0026 WEEKNUM(\u00273 Applications Pend_Recvd_Complete\u0027[Week_Ending]) \u003c\u003e1 \u0026\u0026 \u00273 Applications Pend_Recvd_Complete\u0027[Metric]\u003c\u003e 'Begin of Period Pending'\u0026\u0026\u00273 Applications Pend_Recvd_Complete\u0027[Metric]\u003c\u003e 'End of Period Pending'))Var PreviousYearBeginPending= Calculate(Sum(\u00273 Applications Pend_Recvd_Complete\u0027[Value]), Year(\u00273 Applications Pend_Recvd_Complete\u0027[Week_Ending])=YEAR(CurrentDate)-1, WEEKNUM(\u00273 Applications Pend_Recvd_Complete\u0027[Week_Ending])=2)Var PreviousYearEndOfPeriodPending= CALCULATE(SUM(\u00273 Applications Pend_Recvd_Complete\u0027[Value]),Filter(\u00273 Applications Pend_Recvd_Complete\u0027,YEAR(\u00273 Applications Pend_Recvd_Complete\u0027[Week_Ending])=Year(CurrentDate)-1\u0026\u0026 WEEKNUM(\u00273 Applications Pend_Recvd_Complete\u0027[Week_Ending])=WEEKNUM(CurrentDate)-1\u0026\u0026 \u00273 Applications Pend_Recvd_Complete\u0027[Metric]= 'End of Period Pending'))Return--If(PYTDTotal=Blank(),Divide([YTD Total],PreviousYearBeginPending)-1,Divide([YTD Total],PYTDTotal)-1)If(PreviousYearEndOfPeriodPending\u003c\u003eBLANK(),Divide([YTD Total],PreviousYearEndOfPeriodPending)-1,If(PYTDTotal=Blank(),Divide([YTD Total],PreviousYearBeginPending)-1,Divide([YTD Total],PYTDTotal)-1))","isHidden":false},{"name":"CY Life Issue Rate","expression":"VAR CurrentYear=DTRB_PERF_DATES[Current Year]Var CYTotalIssuedCount= CALCULATE(Sum(\u00273 Applications Pend_Recvd_Complete\u0027[Value]),\u00273 Applications Pend_Recvd_Complete\u0027[Metric]='Issued',Year(\u00273 Applications Pend_Recvd_Complete\u0027[Week_Ending])=CurrentYear)Var CYTotalCount= CALCULATE(Sum(\u00273 Applications Pend_Recvd_Complete\u0027[Value]), \u00273 Applications Pend_Recvd_Complete\u0027[Metric]='Total Closed', Year(\u00273 Applications Pend_Recvd_Complete\u0027[Week_Ending])=CurrentYear)ReturnDivide(CYTotalIssuedCount,CYTotalCount)","isHidden":false},{"name":"PY Life Issue Rate","expression":"VAR CurrentDate= DTRB_PERF_DATES[Current Date]Var PYTotalIssuedCount= CALCULATE(Sum(\u00273 Applications Pend_Recvd_Complete\u0027[Value]),\u00273 Applications Pend_Recvd_Complete\u0027[Metric]='Issued',Year(\u00273 Applications Pend_Recvd_Complete\u0027[Week_Ending])=Year(CurrentDate)-1)Var PYTotalCount= CALCULATE(Sum(\u00273 Applications Pend_Recvd_Complete\u0027[Value]), \u00273 Applications Pend_Recvd_Complete\u0027[Metric]='Total Closed',  Year(\u00273 Applications Pend_Recvd_Complete\u0027[Week_Ending])=Year(CurrentDate)-1)ReturnDivide(PYTotalIssuedCount,PYTotalCount)","isHidden":false},{"name":"PW Life Issue Rate","expression":"VAR CurrentDate= DTRB_PERF_DATES[Current Date]Var PWTotalIssuedCount= CALCULATE(Sum(\u00273 Applications Pend_Recvd_Complete\u0027[Value]),\u00273 Applications Pend_Recvd_Complete\u0027[Metric]='Issued',WEEKNUM(\u00273 Applications Pend_Recvd_Complete\u0027[Week_Ending])=WEEKNUM(CurrentDate)-1)Var PWTotalCount= CALCULATE(Sum(\u00273 Applications Pend_Recvd_Complete\u0027[Value]), \u00273 Applications Pend_Recvd_Complete\u0027[Metric]='Total Closed',  WEEKNUM(\u00273 Applications Pend_Recvd_Complete\u0027[Week_Ending])=WEEKNUM(CurrentDate)-1)ReturnDivide(PWTotalIssuedCount,PWTotalCount)","isHidden":false},{"name":"PW Application Count","expression":"VAR CurrentDate= DTRB_PERF_DATES[Current Date]RETURNCALCULATE(Sum(\u00273 Applications Pend_Recvd_Complete\u0027[Value]),\u00273 Applications Pend_Recvd_Complete\u0027[Metric]='Received', WEEKNUM(\u00273 Applications Pend_Recvd_Complete\u0027[Week_Ending])=WEEKNUM(CurrentDate)-1)","isHidden":false},{"name":"CY App Received","expression":"VAR CurrentYear=DTRB_PERF_DATES[Current Year]RETURNCALCULATE(Sum(\u00273 Applications Pend_Recvd_Complete\u0027[Value]),\u00273 Applications Pend_Recvd_Complete\u0027[Metric]='Received', YEAR(\u00273 Applications Pend_Recvd_Complete\u0027[Week_Ending])=  CurrentYear)","isHidden":false},{"name":"PY App Received","expression":"VAR CurrentYear=DTRB_PERF_DATES[Current Year]RETURNCALCULATE(Sum(\u00273 Applications Pend_Recvd_Complete\u0027[Value]),\u00273 Applications Pend_Recvd_Complete\u0027[Metric]='Received', YEAR(\u00273 Applications Pend_Recvd_Complete\u0027[Week_Ending])=CurrentYear-1)","isHidden":false},{"name":"1.5 Life AppRecvd","expression":".25*\u00273 Applications Pend_Recvd_Complete\u0027[CY App Received]","isHidden":false},{"name":"CY App Pending","expression":"VAR CurrentYear=DTRB_PERF_DATES[Current Year]RETURNCALCULATE(Sum(\u00273 Applications Pend_Recvd_Complete\u0027[Value]),\u00273 Applications Pend_Recvd_Complete\u0027[Metric]='End of Period Pending', YEAR(\u00273 Applications Pend_Recvd_Complete\u0027[Week_Ending])=CurrentYear)","isHidden":false},{"name":"PY App Pending","expression":"VAR CurrentDate= DTRB_PERF_DATES[Current Date]RETURNCALCULATE(Sum(\u00273 Applications Pend_Recvd_Complete\u0027[Value]),\u00273 Applications Pend_Recvd_Complete\u0027[Metric]='End of Period Pending', YEAR(\u00273 Applications Pend_Recvd_Complete\u0027[Week_Ending])=YEAR(CurrentDate)-1)","isHidden":false},{"name":"Prior Week","expression":"Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT]='CURRENT'))-2Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_weekVAR StartDay=MaxDay-6RETURNCALCULATE(SUM(\u00273 Applications Pend_Recvd_Complete\u0027[Value]), FILTER(\u00273 Applications Pend_Recvd_Complete\u0027,\u00273 Applications Pend_Recvd_Complete\u0027[Week_Ending]\u003e=StartDay \u0026\u0026 \u00273 Applications Pend_Recvd_Complete\u0027[Week_Ending]\u003c=MaxDay))","isHidden":false},{"name":"HideFaceAmount2","expression":"If(SELECTEDVALUE(Mapping[Group])='Annuity',1,0)","isHidden":false},{"name":"NoFaceAmountDataText","expression":"if (SELECTEDVALUE(Mapping[Group])='Annuity','Face Amount is not applicable to Annuity products','')","isHidden":false},{"name":"ShowHideMeasureFA","expression":"if (SELECTEDVALUE(Mapping[Group])='Annuity','White','#1C00ff00')","isHidden":false}],"source":[{"expression":"let    Source = Table.Combine({#'1 Applications Pend_Recvd_Complete', #'2 Applications Pend_Recvd_Complete'}),    #'Sorted Rows' = Table.Sort(Source,{{'Week_Ending', Order.Ascending}}),    #'Changed Type' = Table.TransformColumnTypes(#'Sorted Rows',{{'Product_New', type text}, {'Metric', type text}, {'Value', Int64.Type}}),    #'Added Index' = Table.AddIndexColumn(#'Changed Type', 'Index', 0, 1, Int64.Type)in    #'Added Index'"}]},{"name":"ANBP_OTHERREV_SD (DetailTab)","isHidden":false,"storageMode":"Import","columns":[{"name":"RALN_RFO_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RALN_MKT_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"COMP_PYEE_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CalYr","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CalWk","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"max_cal_dt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Value","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"ANBP_OtherRev","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Mapping.Product Roll Up","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_Name.NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Month_PQ","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Relationship Field PQ","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Product_RFO","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_CDE_With Duplicate NPG Rows","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Not YTD","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TS ID for Merge","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TENURE.ADJ_SVC_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TENURE.TSID for Merge","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Tenure Years","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TenureGroup_SaleDate","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"beg_mth_dt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Endof Month_Friday","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Product_SubGroup","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EnterpriseMapping_JoinValue","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ANBP_WID","dataType":"String","isHidden":false,"expression":"SWITCH(\u0027ANBP_OTHERREV_SD (DetailTab)\u0027[ANBP_OtherRev],'ANBP','ANBP', 'WID','WID')","columnType":"Calculated"},{"name":"Sort Table.Sort Order","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Reporting Roll Up Product Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MonthEndDate","dataType":"DateTime","isHidden":false,"columnType":"Data"}],"measures":[{"name":"YoYChange","expression":"IF(AND([ANBP WID YTD DetailTab] \u003c\u003e Blank(),[ANBP WID PYTD DetailTab]\u003c\u003eBLANK()),Divide([ANBP WID YTD DetailTab],[ANBP WID PYTD DetailTab])-1,BLANK())","isHidden":false},{"name":"ANBP WID YTD DetailTab","expression":"CALCULATE(     sum(\u0027ANBP_OTHERREV_SD (DetailTab)\u0027[Value]),     DTRB_PERF_DATES[Cal_YTD_Flag] = {TRUE()})","isHidden":false},{"name":"ANBP WID PYTD DetailTab","expression":"CALCULATE(     sum(\u0027ANBP_OTHERREV_SD (DetailTab)\u0027[Value]),     DTRB_PERF_DATES[Cal_PYTD_Flag] = {TRUE()})","isHidden":false}],"source":[{"expression":"let    Source = ANBP_OTHERREV_SDin    Source"}]},{"name":"Tenure Group Bridge Table","isHidden":false,"storageMode":"Import","columns":[{"name":"Tenure Group","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i45W8nMLMlSK1QEzjGAMYxjDBMwIcw0xhTHMYAxzGMNCG8xyyknMy1aKjQUA', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [#'Tenure Group' = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Tenure Group', type text}})in    #'Changed Type'"}]},{"name":"Hierarchy, Delegation, AD","isHidden":false,"storageMode":"Import","columns":[{"name":"EMPLOYEE_SK","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"EMPLOYEE_TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMPLOYEE_EMAIL","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"REPORT_TO_EMAIL","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"REPORT_TO_SK","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"REPORT_TO_TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Department Number","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Department Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"AD Group","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"HO_Email","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"WRKR_RPT_HIER_SRC_CDE","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = PowerBI.Dataflows(null),    #'f7efdfeb-73c5-4a9b-ab78-f9370190eded' = Source{[workspaceId='f7efdfeb-73c5-4a9b-ab78-f9370190eded']}[Data],    #'a9b06e96-a67b-4f28-b939-3e1ca1047bd2' = #'f7efdfeb-73c5-4a9b-ab78-f9370190eded'{[dataflowId='a9b06e96-a67b-4f28-b939-3e1ca1047bd2']}[Data],    #'Hierarchy, Delegation, AD1' = #'a9b06e96-a67b-4f28-b939-3e1ca1047bd2'{[entity='Hierarchy, Delegation, AD']}[Data]in    #'Hierarchy, Delegation, AD1'"}]},{"name":"iPipeline_Illustration 2022","isHidden":false,"storageMode":"Import","columns":[{"name":"Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Day","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Count","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//SHARED//Public//DI and BI//Sales Dashboard//iPipeline_Illustration_Application_Annual_Counts.xlsx'), null, true),    #'Updated Data_Sheet' = Source{[Item='Data',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'Updated Data_Sheet', [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Client ID', type text}, {'Carrier', type text}, {'Distribution Channel', type text}, {'Agency', type any}, {'Agent', type text}, {'Proposed Insured', type text}, {'State', type text}, {'Product Type', type text}, {'Product', type text}, {'Illustration Run Date', type datetime}, {'iGO Used', type text}, {'App Start Date', type date}, {'App Lock Date', type date}, {'Signature Method', type text}, {'Case Status', type text}, {'App Submit Date', type date}, {'Producer Number', type any}, {'Policy Number', type any}, {'Agent Logon ID', type text}, {'Face Amount', Int64.Type}, {'Premium', type number}}),    #'Removed Other Columns1' = Table.SelectColumns(#'Changed Type',{'Product Type', 'Product', 'Illustration Run Date'}),    #'Inserted Date' = Table.AddColumn(#'Removed Other Columns1', 'Date', each Date.From([Illustration Run Date]), type date),    #'Grouped Rows' = Table.Group(#'Inserted Date', {'Product', 'Date'}, {{'Count', each Table.RowCount(_), Int64.Type}}),    #'Renamed Columns' = Table.RenameColumns(#'Grouped Rows',{{'Date', 'Day'}})in    #'Renamed Columns'"}]},{"name":"Product Dimension for App Received","isHidden":false,"storageMode":"Import","columns":[{"name":"NB_APP_DIM_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"BEN_CTRC_NBR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PLOB_NB_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PLOB_NB_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PROD_LOB_NBS_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PLOB_GRP_NB_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PLOB_GRP_NB_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PLOB_GRP_NBS_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PLOB_SGRP_NB_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PLOB_SGDL_NB_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PLOB_SGRP_NB_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PLOB_SGRP_NBS_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PLOB_SGDL_NB_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PLOB_SGDL_NBS_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Trimmed Contract Number","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = DB2.Database('PODWH021:50000', 'PODWH021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT t1.NB_APP_DIM_SK,#(lf)       t1.BEN_CTRC_NBR,#(lf)       NB_APP_PROD_DIM.PLOB_NB_CDE,#(lf)       NB_APP_PROD_DIM.PLOB_NB_DSCR,#(lf)       NB_APP_PROD_DIM.PROD_LOB_NBS_TXT,#(lf)       NB_APP_PROD_DIM.PLOB_GRP_NB_CDE,#(lf)       NB_APP_PROD_DIM.PLOB_GRP_NB_DSCR,#(lf)       NB_APP_PROD_DIM.PLOB_GRP_NBS_TXT,#(lf)       NB_APP_PROD_DIM.PLOB_SGRP_NB_CDE,#(lf)       NB_APP_PROD_DIM.PLOB_SGDL_NB_CDE,#(lf)       NB_APP_PROD_DIM.PLOB_SGRP_NB_DSCR,#(lf)       NB_APP_PROD_DIM.PLOB_SGRP_NBS_TXT,#(lf)       NB_APP_PROD_DIM.PLOB_SGDL_NB_DSCR,#(lf)       NB_APP_PROD_DIM.PLOB_SGDL_NBS_TXT#(lf)FROM #(lf)#(lf)(SELECT NB_APP_PPLN_ACM_SPSH_FCT.NB_APP_DIM_SK,#(lf)       NB_APP_PPLN_ACM_SPSH_FCT.NB_APP_PROD_DIM_SK,#(lf)       NB_APP_DIM.BEN_CTRC_NBR#(lf)       FROM CONTRACT.NB_APP_PPLN_ACM_SPSH_FCT NB_APP_PPLN_ACM_SPSH_FCT#(lf)     INNER JOIN CONTRACT.NB_APP_DIM NB_APP_DIM#(lf)        ON (NB_APP_PPLN_ACM_SPSH_FCT.NB_APP_DIM_SK = NB_APP_DIM.NB_APP_DIM_SK)) t1#(lf)        #(lf)  INNER JOIN PRODUCT.NB_APP_PROD_DIM NB_APP_PROD_DIM#(lf)        ON (t1.NB_APP_PROD_DIM_SK =#(lf)            NB_APP_PROD_DIM.NB_APP_PROD_DIM_SK)']),    #'Added Custom' = Table.AddColumn(Source, 'Trimmed Contract Number', each Text.Trim([BEN_CTRC_NBR]))in    #'Added Custom'"}]},{"name":"Illustration_Application_Solution_Studio_Annual_Counts_2022","isHidden":false,"storageMode":"Import","columns":[{"name":"Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Day","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Count","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////VSSHR//SHARED//Public//DI and BI//Sales Dashboard//Illustration_Application_Solution_Studio_Annual_Counts_2022.csv'),[Delimiter=',', Columns=3, Encoding=65001, QuoteStyle=QuoteStyle.None]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Column1', type text}, {'Column2', type text}, {'Column3', type text}}),    #'Removed Top Rows' = Table.Skip(#'Changed Type',15),    #'Renamed Columns' = Table.RenameColumns(#'Removed Top Rows',{{'Column1', 'Product'}, {'Column2', 'Day'}, {'Column3', 'Count'}}),    #'Filtered Rows' = Table.SelectRows(#'Renamed Columns', each ([Day] \u003c\u003e '' and [Day] \u003c\u003e 'Day')),    #'Changed Type1' = Table.TransformColumnTypes(#'Filtered Rows',{{'Day', type date}, {'Count', Int64.Type}})in    #'Changed Type1'"}]},{"name":"Sales Hierarchy_Snowflake","isHidden":false,"storageMode":"Import","columns":[{"name":"Sales Hierarchy Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"BEGINDATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"ENDDATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TAG","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ZONE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MARKET","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"GVP_NAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP_NAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MANAGINGDIRECTOR_NAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DEPARTMENT_GVPNAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SUBDEPARTMENT_MVPNAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFOZONE_MDNAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Adjusted Service Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Employee Status Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Type Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"NAME","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'SELECT DISTINCT#(lf)#(lf)//#(tab)A.''Sales Hierarchy Dimension Surrogate Key'',#(lf)#(tab)A.''Sales Hierarchy Identifier'',#(lf)#(tab)A.''Effective Begin Date'' AS BeginDate,#(lf)#(tab)A.''Effective End Date''-1 AS EndDate,#(lf)//#(tab)A.''Current Row Indicator'',#(lf)//    A.''Organization Zone Code'',#(lf)//#(tab)A.''Organization Zone Description'',#(lf)//#(tab)A.''Organization Sub Department Code'',#(lf)//#(tab)A.''Organization Sub Department Description'',#(lf)//#(tab)A.''Organization Department Code'',#(lf)//#(tab)A.''Organization Department Description'',#(lf)//#(tab)A.''Organization Division Code'',#(lf)//#(tab)A.''Organization Division Description'',#(lf)    #(lf)    B.''TAG'',#(lf)    B.''ZONE'',#(lf)    B.''MARKET'',#(lf)    B.GVP_Name,#(lf)    B.MVP_Name,#(lf)    B.ManagingDirector_Name,#(lf)    B.Department_GVPName,#(lf)    B.SubDepartment_MVPName,#(lf)    B.RFOZone_MDName,#(lf)    #(lf)//    C.''Hire Date'',#(lf)    C.''Adjusted Service Date'',#(lf)    C.''Employee Status Type Code'',#(lf)    C.''Job Type Description'',#(lf)//    C.''First Name'',#(lf)//#(tab)C.''Middle Name'',#(lf)//#(tab)C.''Last Name'',#(lf)    CONCAT(C.''Last Name'',\u0027, \u0027,C.''First Name'', \u0027 \u0027,C.''Middle Name'') AS Name#(lf)#(lf)FROM ENTERPRISE_EDW.PRESENTATION_01.''Sale Hierarchy Dimension'' AS A#(lf)#(lf)LEFT JOIN #(lf)#(lf)(SELECT * FROM ENTERPRISE_EDW.PRESENTATION_01.''Workforce Dimension Detail'' WHERE ''Current Row Indicator''=\u0027Y\u0027) AS C ON (A.''Sales Hierarchy Identifier''=C.''Employee Identifier'') #(lf)#(lf)LEFT JOIN #(lf)(#(lf) #(lf) SELECT Distinct#(lf)    OrgDimension.''Department Identifier'' AS TAG,#(lf)    OrgDimension.''Department Name'',#(lf)#(tab)OrgDimension.''Sub Department Identifier'' AS ZONE,#(lf)#(tab)OrgDimension.''RFO Zone Identifier'' AS MARKET,#(lf)    CASE WHEN GVP.''First Name'' IS NOT NULL THEN CONCAT (GVP.''First Name'',\u0027 \u0027 ,GVP.''Last Name'') #(lf)         WHEN OrgDimension.''RFO Zone Identifier'' =\u0027NA\u0027 THEN \u0027\u0027 ELSE \u0027Vacant\u0027 END AS GVP_Name,#(lf)    CASE WHEN MVP.''First Name'' IS NOT NULL THEN CONCAT (MVP.''First Name'',\u0027 \u0027 ,MVP.''Last Name'') #(lf)         WHEN OrgDimension.''RFO Zone Identifier'' =\u0027NA\u0027 THEN \u0027\u0027  ELSE \u0027Vacant\u0027 END AS MVP_Name,#(lf)    CASE WHEN MD.''First Name'' IS NOT NULL THEN CONCAT (MD.''First Name'',\u0027 \u0027 ,MD.''Last Name'') #(lf)         WHEN OrgDimension.''RFO Zone Identifier'' =\u0027NA\u0027 THEN \u0027\u0027 ELSE \u0027Vacant\u0027 END AS ManagingDirector_Name,#(lf)    #(lf)#(tab)CASE #(lf)        WHEN GVP.''First Name'' IS NOT NULL THEN CONCAT(OrgDimension.''Department Identifier'' ,\u0027-\u0027,CONCAT (GVP.''First Name'',\u0027 \u0027 ,GVP.''Last Name'')) #(lf)        WHEN GVP.''First Name'' IS NULL AND OrgDimension.''RFO Zone Identifier'' \u003c\u003e\u0027NA\u0027 THEN CONCAT(OrgDimension.''Department Identifier'' ,\u0027-\u0027,\u0027Vacant\u0027) #(lf)        ELSE \u0027\u0027 END AS Department_GVPName,#(lf)    #(lf)    CASE#(lf)        WHEN MVP.''First Name'' IS NOT NULL THEN CONCAT(OrgDimension.''Sub Department Identifier'' ,\u0027-\u0027,CONCAT (MVP.''First Name'',\u0027 \u0027 ,MVP.''Last Name''))#(lf)        WHEN MVP.''First Name'' IS NULL AND OrgDimension.''RFO Zone Identifier'' \u003c\u003e\u0027NA\u0027 THEN CONCAT(OrgDimension.''Sub Department Identifier'' ,\u0027-\u0027,\u0027Vacant\u0027)#(lf)        ELSE \u0027\u0027 END AS SubDepartment_MVPName,#(lf)        #(lf)    CASE#(lf)        WHEN MD.''First Name'' IS NOT NULL THEN CONCAT(OrgDimension.''RFO Zone Identifier'' ,\u0027-\u0027,CONCAT (MD.''First Name'',\u0027 \u0027 ,MD.''Last Name''))#(lf)        WHEN MD.''First Name'' IS NULL AND OrgDimension.''RFO Zone Identifier'' \u003c\u003e\u0027NA\u0027 THEN CONCAT(OrgDimension.''RFO Zone Identifier'' ,\u0027-\u0027,\u0027Vacant\u0027)#(lf)        ELSE \u0027\u0027 END AS RFOZone_MDName#(lf)     #(lf)    FROM ENTERPRISE_EDW.PRESENTATION_01.''Organization Dimension'' OrgDimension    #(lf)    #(lf)    LEFT JOIN(SELECT Distinct#(lf)#(tab)OrgDimensionGVP.''Current Row Indicator'',#(lf)#(tab)OrgDimensionGVP.''Department Identifier'' AS TAG,#(lf)#(tab)OrgDimensionGVP.''First Name'',#(lf)#(tab)OrgDimensionGVP.''Last Name'',#(lf)#(tab)OrgDimensionGVP.''Job Type Code'',#(lf)#(tab)OrgDimensionGVP.''Job Type Description''  #(lf)              #(lf)    FROM ENTERPRISE_EDW.PRESENTATION_01.''Organization Dimension'' OrgDimensionGVP #(lf)    where OrgDimensionGVP.''Current Row Indicator''=\u0027Y\u0027 and OrgDimensionGVP.''Job Type Code'' IN (\u0027001000\u0027) and OrgDimensionGVP.''Employee Status Type Description''=\u0027Active\u0027) AS GVP ON (OrgDimension.''Department Identifier''= GVP.''TAG'')#(lf)    #(lf)    LEFT JOIN(SELECT Distinct#(lf)#(tab)OrgDimensionMVP.''Current Row Indicator'',#(lf)#(tab)OrgDimensionMVP.''Sub Department Identifier'' AS ZONE,#(lf)#(tab)OrgDimensionMVP.''First Name'',#(lf)#(tab)OrgDimensionMVP.''Last Name'',#(lf)#(tab)OrgDimensionMVP.''Job Type Code'',#(lf)#(tab)OrgDimensionMVP.''Job Type Description''  #(lf)              #(lf)    FROM ENTERPRISE_EDW.PRESENTATION_01.''Organization Dimension'' OrgDimensionMVP #(lf)    where OrgDimensionMVP.''Current Row Indicator''=\u0027Y\u0027 and OrgDimensionMVP.''Job Type Code'' IN (\u0027001001\u0027) and OrgDimensionMVP.''Employee Status Type Description''=\u0027Active\u0027) AS MVP ON (OrgDimension.''Sub Department Identifier''= MVP.''ZONE'' )#(lf)    #(lf)    LEFT JOIN(SELECT Distinct#(lf)#(tab)OrgDimensionMD.''Current Row Indicator'',#(lf)#(tab)OrgDimensionMD.''RFO Zone Identifier'' AS MARKET,#(lf)#(tab)OrgDimensionMD.''First Name'',#(lf)#(tab)OrgDimensionMD.''Last Name'',#(lf)#(tab)OrgDimensionMD.''Job Type Code'',#(lf)#(tab)OrgDimensionMD.''Job Type Description''#(lf)     #(lf)    FROM ENTERPRISE_EDW.PRESENTATION_01.''Organization Dimension'' OrgDimensionMD #(lf)    where OrgDimensionMD.''Current Row Indicator''=\u0027Y\u0027 and OrgDimensionMD.''Job Type Code'' IN (\u0027001007\u0027) and OrgDimensionMD.''Employee Status Type Description''=\u0027Active\u0027 AND OrgDimensionMD.''RFO Zone Identifier'' \u003c\u003e\u0027NA\u0027) AS MD ON (OrgDimension.''RFO Zone Identifier''=MD.''MARKET'')#(lf)    #(lf)    where #(lf)    #(lf)    (OrgDimension.''Current Row Indicator''=\u0027Y\u0027 and OrgDimension.''RFO Zone Identifier'' \u003c\u003e \u0027NA\u0027and OrgDimension.''Employee Status Type Description''=\u0027Active\u0027)#(lf)    OR  (OrgDimension.''Current Row Indicator''=\u0027Y\u0027 and ''Source Sub System Text''=\u0027ORGANIZATION_UNIT\u0027)#(lf)    #(lf)    ORDER BY OrgDimension.''RFO Zone Identifier'') AS B ON (A.''Organization Zone Code''=B.MARKET)#(lf)    #(lf)    WHERE #(lf)#(lf)        A.''Current Row Indicator''=\u0027Y\u0027#(lf)        AND A.''Effective Begin Date''\u003c=(A.''Effective End Date''-1)', null, [EnableFolding=true])in    Source"}]},{"name":"WID_Snowflake","isHidden":false,"storageMode":"Import","columns":[{"name":"RALN_MKT_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RALN_RFO_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CalYr","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"CalWk","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"max_cal_dt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"COMP_PYEE_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ANBP_OtherRev","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Value","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Current Week Indicator","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'SELECT #(lf)#(lf)#(tab)CASE WHEN B.''Total Sales Reporting Product Sub-Group Description''= \u0027TAN Managed Accounts\u0027 THEN \u00270716-01-00\u0027 ELSE A.RALN_MKT_CDE END AS RALN_MKT_CDE,#(lf)#(tab)CASE WHEN B.''Total Sales Reporting Product Sub-Group Description''= \u0027TAN Managed Accounts\u0027 THEN \u00270716\u0027 ELSE A.RALN_RFO_CDE END AS RALN_RFO_CDE,#(lf)    A.MVP,#(lf)    A.Market,#(lf)    #(lf)    C.''Distribution Performance Reporting Year Number'' AS CalYr,#(lf)#(tab)C.''Distribution Performance Reporting Year Week Number'' AS CalWk,#(lf)    (c.max_cal_dt-2) AS max_cal_dt ,#(lf)      B.''Credited Advisor Identifier'' AS COMP_PYEE_ID,#(lf)#(tab)UPPER(B.''Total Sales Reporting Product Sub-Group Description'') AS Product,#(lf)    \u0027WID\u0027 AS ANBP_OtherRev,#(lf)   SUM( B.''WID'') AS Value,#(lf)   D.''Employee Name''#(lf)#(lf)FROM#(lf)#(lf)#(lf)  (SELECT #(lf)#(lf)''Sales Transaction Process Date'',#(lf)''Credited Advisor Identifier'',#(lf)#(tab)''Distribution Channel Code'',#(lf)#(tab)''Distribution Channel Description'',#(lf)#(tab)''Total Sales Reporting Product Type'',#(lf)#(tab)''Total Sales Reporting Product Group Description'',#(lf)#(tab)''Total Sales Reporting Product Sub-Group Description'',#(lf)SUM(''Weighted Investment Deposit Amount'') AS WID#(lf)#(lf)FROM  ENTERPRISE_EDW.PRESENTATION_01.''WID Transaction Confidential''#(lf)#(lf)WHERE YEAR(''Sales Transaction Process Date'') \u003e= YEAR(GETDATE())-2 #(lf)   #(lf)   AND ''Distribution Channel Code'' IN (\u0027CAREER\u0027, \u0027OTH\u0027, \u0027TAN\u0027,\u0027TFGT\u0027,\u0027TRUST\u0027)#(lf)#(lf)GROUP BY #(lf) #(lf)    ''Sales Transaction Process Date'',#(lf)    ''Credited Advisor Identifier'',#(lf)#(tab)''Distribution Channel Code'',#(lf)#(tab)''Distribution Channel Description'',#(lf)#(tab)''Total Sales Reporting Product Type'',#(lf)#(tab)''Total Sales Reporting Product Group Description'',#(lf)#(tab)''Total Sales Reporting Product Sub-Group Description'')#(lf)#(lf) AS B #(lf)#(lf)LEFT JOIN#(lf)#(lf)//Select Current and Transfer rows from Sales Hierarchy--- START#(lf)#(lf)(SELECT DISTINCT#(lf)#(lf)#(tab)''Sales Hierarchy Identifier'',#(lf)#(tab)''Effective Begin Date'' AS BeginDate,#(lf)#(tab)''Effective End Date''-1 AS EndDate,#(lf)    ''Organization Zone Code'' AS RALN_MKT_CDE,#(lf)#(tab)''Organization Sub Department Code'' AS RALN_RFO_CDE,#(lf)    (case when length(''Organization Zone Code'') = 7 then \u002700\u0027#(lf)             else substr(''Organization Zone Code'',6,2)#(lf)           end) as MVP,#(lf)          (case when length(''Organization Zone Code'') = 7 then substr(''Organization Zone Code'',6,2) #(lf)             else substr(''Organization Zone Code'',9,2)#(lf)           end) as Market#(lf)           #(lf)           #(lf)FROM ENTERPRISE_EDW.PRESENTATION_01.''Sale Hierarchy Dimension''#(lf)    WHERE #(lf)#(lf)        ''Current Row Indicator''=\u0027Y\u0027#(lf)        AND ''Effective Begin Date''\u003c=(''Effective End Date''-1)) AS A#(lf)        #(lf)//Select Current and Transfer rows from Sales Hierarchy--- END#(lf)#(lf)ON (A.''Sales Hierarchy Identifier''=B.''Credited Advisor Identifier'' AND B.''Sales Transaction Process Date'' BETWEEN A.BeginDate  AND A.EndDate)#(lf)#(lf)#(lf)LEFT JOIN (#(lf)  #(lf)//Determine Max Cal Day of the week--- START#(lf)#(lf)SELECT#(lf)  #(lf)    T1.''Calendar Day Date'',#(lf)    T1.''Distribution Performance Reporting Year Number'',#(lf)#(tab)T1.''Distribution Performance Reporting Year Week Number'',#(lf)    T2.max_cal_dt#(lf)  #(lf)  FROM ENTERPRISE_EDW.PRESENTATION_01.''Distribution Performance Dates Dimension'' AS T1#(lf)  #(lf)  INNER JOIN#(lf)  #(lf)  (SELECT   #(lf)    ''Distribution Performance Reporting Year Number'',#(lf)#(tab)''Distribution Performance Reporting Year Week Number'',#(lf)    MAX(''Calendar Day Date'') AS max_cal_dt#(lf)#(lf)    FROM ENTERPRISE_EDW.PRESENTATION_01.''Distribution Performance Dates Dimension''#(lf)#(lf)    GROUP BY     #(lf)        ''Distribution Performance Reporting Year Number'',#(lf)#(tab)    ''Distribution Performance Reporting Year Week Number'') AS T2 ON (T1.''Distribution Performance Reporting Year Number''=T2.''Distribution Performance Reporting Year Number'' AND T1.''Distribution Performance Reporting Year Week Number''=T2.''Distribution Performance Reporting Year Week Number'')#(lf) #(lf)  ) AS C #(lf)  #(lf)//Determine Max Cal Day of the week--- END#(lf)    #(lf)    ON (B.''Sales Transaction Process Date''=C.''Calendar Day Date'')#(lf)    #(lf)#(lf)LEFT JOIN ENTERPRISE_EDW.PRESENTATION_01.''Workforce Dimension Detail'' AS D ON (B.''Credited Advisor Identifier''=D.''Employee Identifier'' AND D.''Current Row Indicator''=\u0027Y\u0027)#(lf)  #(lf)  GROUP BY#(lf)  #(tab)A.RALN_MKT_CDE,#(lf)#(tab)A.RALN_RFO_CDE,#(lf)    A.MVP,#(lf)    A.Market,#(lf)    C.''Distribution Performance Reporting Year Number'',#(lf)#(tab)C.''Distribution Performance Reporting Year Week Number'',#(lf)    c.max_cal_dt,#(lf)    ''Distribution Channel Code'',#(lf)#(lf)    B.''Credited Advisor Identifier'',#(lf)#(tab)B.''Total Sales Reporting Product Type'',#(lf)    B.''Total Sales Reporting Product Group Description'',#(lf)#(tab)B.''Total Sales Reporting Product Sub-Group Description'',#(lf)    D.''Employee Name''', null, [EnableFolding=true]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'CALYR', Int64.Type}, {'CALWK', Int64.Type}}),    #'Inserted Text Before Delimiter' = Table.AddColumn(#'Changed Type', 'Text Before Delimiter', each Text.BeforeDelimiter([RALN_RFO_CDE], '-'), type text),    #'Removed Columns' = Table.RemoveColumns(#'Inserted Text Before Delimiter',{'RALN_RFO_CDE'}),    #'Renamed Columns1' = Table.RenameColumns(#'Removed Columns',{{'Text Before Delimiter', 'RALN_RFO_CDE'}}),    #'Renamed Columns' = Table.RenameColumns(#'Renamed Columns1',{{'MARKET', 'Market'}, {'CALYR', 'CalYr'}, {'CALWK', 'CalWk'}, {'MAX_CAL_DT', 'max_cal_dt'}, {'PRODUCT', 'Product'}, {'VALUE', 'Value'}, {'ANBP_OTHERREV', 'ANBP_OtherRev'}, {'Employee Name', 'EMP_NM'}}),    #'Add CurrentWeek Indicator' = Table.AddColumn(#'Renamed Columns', 'Current Week Indicator', each if [max_cal_dt] \u003c Date.From(DateTime.LocalNow()) then 'WID' else 'Current Week WID')in    #'Add CurrentWeek Indicator'"}]},{"name":"ANBP_OtherRev_SD_Daily","isHidden":false,"storageMode":"Import","columns":[{"name":"RALN_RFO_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RALN_MKT_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"COMP_PYEE_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CalYr","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"CalWk","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"ANBP_OtherRev","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Value","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Product_SubGroup","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EnterpriseMapping_JoinValue","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"max_cal_dt","dataType":"DateTime","isHidden":false,"columnType":"Data"}],"measures":[{"name":"ANBP Current Week","expression":"Var CurrentWeekValue= CALCULATE(     sum(ANBP_OtherRev_SD_Daily[Value]),     ANBP_OtherRev_SD_Daily[ANBP_OtherRev] = 'ANBP'     )ReturnIf(CurrentWeekValue\u003e0,CurrentWeekValue,'-')","isHidden":false},{"name":"WID Current Week","expression":"Var CurrentWeekValue= CALCULATE(     sum(ANBP_OtherRev_SD_Daily[Value]),     ANBP_OtherRev_SD_Daily[ANBP_OtherRev] = 'WID'     )ReturnIf(CurrentWeekValue\u003e0,CurrentWeekValue,'-')","isHidden":false},{"name":"Total Sales Current Week","expression":"Var CurrentWeekValue= CALCULATE(     sum(ANBP_OtherRev_SD_Daily[Value]),     OR(ANBP_OtherRev_SD_Daily[ANBP_OtherRev] = 'ANBP', ANBP_OtherRev_SD_Daily[ANBP_OtherRev] = 'WID' )     )ReturnIf(CurrentWeekValue\u003e0,CurrentWeekValue,'-')","isHidden":false}],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////VSSHR//SHARED//Public//DI and BI//Distribution Dashboard//ANBP_OtherRev_SD_Daily.csv'),[Delimiter=',', Columns=14, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'PROC_DT', type date}, {'CalYr', Int64.Type}, {'CalWk', Int64.Type}, {'Value', type number}}),    #'Renamed Columns' = Table.RenameColumns(#'Changed Type',{{'PROC_DT', 'max_cal_dt'}}),    #'Append WID' = Table.Combine({#'Renamed Columns', WID_Snowflake}),    #'Remove Non Current Week WID' = Table.SelectRows(#'Append WID', each ([Current Week Indicator] \u003c\u003e 'WID')),    #'Remove Current Week Indicator WID Column' = Table.RemoveColumns(#'Remove Non Current Week WID',{'Current Week Indicator'})in    #'Remove Current Week Indicator WID Column'"}]},{"name":"Enterprise_ProductMapping","isHidden":false,"storageMode":"Import","columns":[{"name":"L3","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"L4","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"L5","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PSL","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"etrs_dsply_prod_hier_sk","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EnterpriseMapping_JoinValue","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Enterprise Mapping Renamed","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////VSSHR//SHARED//PUBLIC//DI and BI//Sales Dashboard//Enterprise_ProductMapping.csv'),[Delimiter=',', Columns=7, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Column1', type text}, {'Column2', type text}, {'Column3', type text}, {'Column4', type text}, {'Column5', type text}, {'Column6', type text}, {'Column7', type text}}),    #'Promoted Headers' = Table.PromoteHeaders(#'Changed Type', [PromoteAllScalars=true]),    #'Changed Type1' = Table.TransformColumnTypes(#'Promoted Headers',{{'L3', type text}, {'L4', type text}, {'L5', type text}, {'PSL', type text}, {'etrs_dsply_prod_hier_sk', type text}, {'EnterpriseMapping_JoinValue', type text}, {'Enterprise Mapping Renamed', type text}})in    #'Changed Type1'"}]},{"name":"Sort Table","isHidden":false,"storageMode":"Import","columns":[{"name":"Advisor Group_Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Sort Order","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i45WckwpyyzOL1JwL8ovLVDwzEvOKU3JzEtX8AtwV9JRMlSK1YlWgrCNwOxQH/2wUB8F14rk1OJioKgxWDSkqLS4BMgzAfNMjSwVnPNzclLTUxUCchLzQOpMlWJjAQ==', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [#'Advisor Group_Product' = _t, #'Sort Order' = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Advisor Group_Product', type text}, {'Sort Order', Int64.Type}})in    #'Changed Type'"}]},{"name":"Grid Revenue","isHidden":false,"storageMode":"Import","columns":[{"name":"RALN_MKT_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RALN_RFO_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CalYr","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CalWk","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"max_cal_dt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"COMP_PYEE_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Reporting Roll Up Product Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ANBP_OtherRev","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Value","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'SELECT #(lf)#(lf)#(tab)t2.RALN_MKT_CDE,#(lf)#(tab)t2.RALN_RFO_CDE,#(lf)    t2.MVP,#(lf)    t2.Market,#(lf)    #(lf)    t3.''Distribution Performance Reporting Year Number'' AS CalYr,#(lf)#(tab)t3.''Distribution Performance Reporting Year Week Number'' AS CalWk,#(lf)    t3.max_cal_dt,#(lf)    #(lf)    \u0027 \u0027 AS ''COMP_PYEE_ID'',#(lf)    #(lf)#(tab)CASE #(lf)    WHEN t1.''Field Reporting Product Level 1 Name''=\u0027UNKNOWN\u0027 THEN#(lf)        CASE    #(lf)                WHEN t1.''Compensation Level 3 Product Line Of Business Code''= \u0027FEESVS\u0027 THEN \u0027FEE BASED PLAN\u0027#(lf)                WHEN t1.''Compensation Level 3 Product Line Of Business Code''= \u0027VARANN\u0027 THEN \u0027VA\u0027#(lf)                WHEN t1.''Compensation Level 3 Product Line Of Business Code''= \u0027FIXANN\u0027 THEN \u0027FA\u0027#(lf)                WHEN t1.''Compensation Level 3 Product Line Of Business Code''= \u0027RTLBRKG30\u0027 THEN \u0027RTLBRKG30\u0027#(lf)                WHEN t1.''Compensation Level 3 Product Line Of Business Code''= \u0027HLTH\u0027 THEN \u0027HLTH\u0027#(lf)//                WHEN t1.''Compensation Level 3 Product Line Of Business Code''= \u0027LIFE\u0027 THEN \u0027LIFE\u0027#(lf)                WHEN t1.''Compensation Level 3 Product Line Of Business Code''= \u0027INVADV30\u0027 THEN \u0027INVADV30\u0027#(lf)                WHEN t1.''Reporting Roll Up Product Description'' = \u0027Fixed Indexed Annuity\u0027 THEN \u0027FA\u0027#(lf)                WHEN t1.''Reporting Roll Up Product Description'' =  \u0027Long Term Care\u0027 THEN \u0027LTC\u0027#(lf)                WHEN t1.''Reporting Roll Up Product Description'' = \u0027Term Life\u0027 THEN \u0027Term\u0027#(lf)                WHEN t1.''Reporting Roll Up Product Description'' = \u0027Universal Life\u0027 THEN \u0027UL\u0027#(lf)                WHEN t1.''Reporting Roll Up Product Description'' = \u0027Variable Annuity\u0027 THEN \u0027VA\u0027#(lf)                WHEN t1.''Reporting Roll Up Product Description'' = \u0027Variable Universal Life\u0027 THEN \u0027VUL\u0027#(lf)                WHEN t1.''Reporting Roll Up Product Description'' = \u0027Whole Life\u0027 THEN \u0027PERM - RECURRING\u0027#(lf)                #(lf)          ELSE \u0027Unknown\u0027 END#(lf)    ELSE UPPER(t1.''Field Reporting Product Level 1 Name'') END AS Product,#(lf)    t1.''Reporting Roll Up Product Description'',#(lf)    \u0027Grid Revenue\u0027 AS ANBP_OtherRev,#(lf)    SUM( t1.''Grid Credit Amount'') AS Value,#(lf)    \u0027 \u0027 AS ''Employee Name''#(lf)#(lf)FROM#(lf)#(lf)#(lf)(SELECT #(lf)#(lf)    A.''Process Date'',#(lf)    A.''Assigned Representative Identifier'',#(lf)    A.''Grid Credit Amount'',#(lf)    A.''Field Reporting Product Level 1 Name'',#(lf)    A.''Compensation Level 3 Product Line Of Business Code'',#(lf)    A.''Reporting Roll Up Product Description'',#(lf)    A.''Reporting Roll Up Event Description'',#(lf) #(tab)A.''Employee Identifier'',#(lf)#(tab)A.''Rollup Agent Identifier''#(lf)#(lf)FROM ENTERPRISE_EDW.PRESENTATION_01.''Compensation and Sales Metrics Fact'' AS A#(lf)#(lf)WHERE  #(lf)YEAR(A.''Process Date'') \u003e= CASE WHEN MONTH(GETDATE())= 1 THEN (YEAR(GETDATE())-3) ELSE (YEAR(GETDATE())-2) END#(lf)AND A.''Grid Credit Amount'' IS NOT NULL #(lf)AND A.''Grid Credit Amount'' \u003c\u003e 0#(lf)AND A.''Reporting Roll Up Event Description''= \u0027First Year\u0027) AS t1#(lf)#(lf)LEFT JOIN#(lf)#(lf)//Select Current and Transfer rows from Sales Hierarchy--- START#(lf)#(lf)(SELECT DISTINCT#(lf)#(lf)#(tab)C.''Sales Hierarchy Identifier'',#(lf)#(tab)C.''Effective Begin Date'' AS BeginDate,#(lf)#(tab)C.''Effective End Date''-1 AS EndDate,#(lf)    C.''Organization Zone Code'' AS RALN_MKT_CDE,#(lf)#(tab)C.''Organization Sub Department Code'' AS RALN_RFO_CDE,#(lf)    (case when length(C.''Organization Zone Code'') = 7 then \u002700\u0027#(lf)             else substr(C.''Organization Zone Code'',6,2)#(lf)           end) as MVP,#(lf)          (case when length(C.''Organization Zone Code'') = 7 then substr(C.''Organization Zone Code'',6,2) #(lf)             else substr(C.''Organization Zone Code'',9,2)#(lf)           end) as Market#(lf)           #(lf)           #(lf)FROM ENTERPRISE_EDW.PRESENTATION_01.''Sale Hierarchy Dimension'' AS C#(lf)    WHERE #(lf)#(lf)        C.''Current Row Indicator''=\u0027Y\u0027#(lf)        AND C.''Effective Begin Date''\u003c=(''Effective End Date''-1)) AS t2#(lf)        #(lf)//Select Current and Transfer rows from Sales Hierarchy--- END#(lf)#(lf)ON (t2.''Sales Hierarchy Identifier''=t1.''Employee Identifier'' AND t1.''Process Date'' BETWEEN t2.BeginDate  AND t2.EndDate)#(lf)#(lf)#(lf)LEFT JOIN (#(lf)  #(lf)//Determine Max Cal Day of the week--- START#(lf)#(lf)SELECT#(lf)  #(lf)    C.''Calendar Day Date'',#(lf)    C.''Distribution Performance Reporting Year Number'',#(lf)#(tab)C.''Distribution Performance Reporting Year Week Number'',#(lf)    E.max_cal_dt#(lf)  #(lf)  FROM ENTERPRISE_EDW.PRESENTATION_01.''Distribution Performance Dates Dimension'' AS C#(lf)  #(lf)  INNER JOIN#(lf)  #(lf)  (SELECT   #(lf)    D.''Distribution Performance Reporting Year Number'',#(lf)#(tab)D.''Distribution Performance Reporting Year Week Number'',#(lf)    MAX(D.''Calendar Day Date'') AS max_cal_dt#(lf)#(lf)    FROM ENTERPRISE_EDW.PRESENTATION_01.''Distribution Performance Dates Dimension'' AS D#(lf)#(lf)    GROUP BY     #(lf)        D.''Distribution Performance Reporting Year Number'',#(lf)#(tab)    D.''Distribution Performance Reporting Year Week Number'') AS E ON (C.''Distribution Performance Reporting Year Number''=E.''Distribution Performance Reporting Year Number'' AND C.''Distribution Performance Reporting Year Week Number''=E.''Distribution Performance Reporting Year Week Number'')#(lf) #(lf)  ) AS t3#(lf)  #(lf)//Determine Max Cal Day of the week--- END#(lf)    #(lf)    ON ( t1.''Process Date''=t3.''Calendar Day Date'')#(lf)    #(lf)#(lf)LEFT JOIN ENTERPRISE_EDW.PRESENTATION_01.''Workforce Dimension Detail'' AS t4 ON ( t1.''Employee Identifier''=t4.''Employee Identifier'' AND t4.''Current Row Indicator''=\u0027Y\u0027)#(lf)#(lf)WHERE t3.max_cal_dt \u003cGETDATE()#(lf)  #(lf)  GROUP BY#(lf)  #(tab)t2.RALN_MKT_CDE,#(lf)#(tab)t2.RALN_RFO_CDE,#(lf)    t2.MVP,#(lf)    t2.Market,#(lf)    t3.''Distribution Performance Reporting Year Number'',#(lf)#(tab)t3.''Distribution Performance Reporting Year Week Number'',#(lf)    t3.max_cal_dt,#(lf)//    t1.''Employee Identifier'',#(tab)#(lf)    t1.''Field Reporting Product Level 1 Name'',#(lf)    t1.''Compensation Level 3 Product Line Of Business Code'',#(lf)    t1.''Reporting Roll Up Product Description''#(lf)//    t4.''Employee Name''', null, [EnableFolding=true]),    #'Renamed Columns' = Table.RenameColumns(Source,{{'MARKET', 'Market'}, {'CALYR', 'CalYr'}, {'CALWK', 'CalWk'}, {'MAX_CAL_DT', 'max_cal_dt'}, {'PRODUCT', 'Product'}, {'ANBP_OTHERREV', 'ANBP_OtherRev'}, {'VALUE', 'Value'}, {'Employee Name', 'EMP_NM'}})in    #'Renamed Columns'"}]},{"name":"Change Log","isHidden":false,"storageMode":"Import","columns":[{"name":"Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Author","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Description","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//SHARED//Public//DI and BI//Field Reporting//Change Log//Change Log.xlsx'), null, true),    #'Sales Dashboard_Sheet' = Source{[Item='Sales Dashboard',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'Sales Dashboard_Sheet', [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Date', type date}, {'Author', type text}, {'Description', type text}}),    #'Filtered Rows' = Table.SelectRows(#'Changed Type', each ([Date] \u003c\u003e null))in    #'Filtered Rows'"}]},{"name":"ANBP_WID_Monthly","isHidden":false,"storageMode":"Import","columns":[{"name":"RALN_RFO_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RALN_MKT_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"COMP_PYEE_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MONTH","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CalYr","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"ANBP_OtherRev","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Value","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Product_SubGroup","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EnterpriseMapping_JoinValue","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CalWk","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"max_cal_dt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Mapping.Product Roll Up","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_Name.NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Product_RFO","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_CDE_With Duplicate NPG Rows","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"beg_mth_dt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Endof Month_Friday","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Not YTD","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TS ID for Merge","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TENURE.ADJ_SVC_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TENURE.TSID for Merge","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Tenure Years","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TenureGroup_SaleDate","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Sort Table.Sort Order","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"MonthEndDate","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TENURE.TRMN_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Advisor Count","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"ANBP Previous Month","expression":"VAR CurrentMonthIndex= CALCULATE(MAX(DTRB_PERF_DATES[MonthIndex]), DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT]='CURRENT')RETURNCALCULATE(SUM(ANBP_WID_Monthly[Value]), ANBP_WID_Monthly[ANBP_OtherRev]='ANBP',DTRB_PERF_DATES[MonthIndex]= CurrentMonthIndex-1)","isHidden":false},{"name":"ANBP Previous Month 2","expression":"VAR CurrentMonthIndex= CALCULATE(MAX(DTRB_PERF_DATES[MonthIndex]), DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT]='CURRENT')RETURNCALCULATE(SUM(ANBP_WID_Monthly[Value]), ANBP_WID_Monthly[ANBP_OtherRev]='ANBP',DTRB_PERF_DATES[MonthIndex]= CurrentMonthIndex-2)","isHidden":false},{"name":"ANBP PY Previous Month","expression":"VAR CurrentMonthIndex= CALCULATE(MAX(DTRB_PERF_DATES[MonthIndex]), DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT]='CURRENT')RETURNCALCULATE(SUM(ANBP_WID_Monthly[Value]), ANBP_WID_Monthly[ANBP_OtherRev]='ANBP',DTRB_PERF_DATES[MonthIndex]= CurrentMonthIndex-13)","isHidden":false},{"name":"ANBP% MoM","expression":"IF(AND(ANBP_WID_Monthly[ANBP Previous Month]=BLANK(),ANBP_WID_Monthly[ANBP Previous Month 2]=BLANK()),BLANK(),[ANBP Previous Month]/[ANBP Previous Month 2]-1)","isHidden":false},{"name":"ANBP% Month YoY","expression":"IF(AND(ANBP_WID_Monthly[ANBP Previous Month]=BLANK(), ANBP_WID_Monthly[ANBP PY Previous Month]=BLANK()),BLANK(),[ANBP Previous Month]/[ANBP PY Previous Month]-1)","isHidden":false},{"name":"WID Previous Month","expression":"VAR CurrentMonthIndex= CALCULATE(MAX(DTRB_PERF_DATES[MonthIndex]), DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT]='CURRENT')RETURNCALCULATE(SUM(ANBP_WID_Monthly[Value]), ANBP_WID_Monthly[ANBP_OtherRev]='WID',DTRB_PERF_DATES[MonthIndex]= CurrentMonthIndex-1)","isHidden":false},{"name":"WID Previous Month 2","expression":"VAR CurrentMonthIndex= CALCULATE(MAX(DTRB_PERF_DATES[MonthIndex]), DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT]='CURRENT')RETURNCALCULATE(SUM(ANBP_WID_Monthly[Value]), ANBP_WID_Monthly[ANBP_OtherRev]='WID',DTRB_PERF_DATES[MonthIndex]= CurrentMonthIndex-2)","isHidden":false},{"name":"WID PY Previous Month","expression":"VAR CurrentMonthIndex= CALCULATE(MAX(DTRB_PERF_DATES[MonthIndex]), DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT]='CURRENT')RETURNCALCULATE(SUM(ANBP_WID_Monthly[Value]), ANBP_WID_Monthly[ANBP_OtherRev]='WID',DTRB_PERF_DATES[MonthIndex]= CurrentMonthIndex-13)","isHidden":false},{"name":"WID% MoM","expression":"IF(AND(ANBP_WID_Monthly[WID Previous Month]=BLANK(),ANBP_WID_Monthly[WID Previous Month 2]=BLANK()),BLANK(),[WID Previous Month]/[WID Previous Month 2]-1)","isHidden":false},{"name":"WID% Month YoY","expression":"IF(AND(ANBP_WID_Monthly[WID Previous Month]=BLANK(),ANBP_WID_Monthly[WID PY Previous Month]=BLANK()),BLANK(),[WID Previous Month]/[WID PY Previous Month]-1)","isHidden":false},{"name":"ANBP Monthly CY","expression":"CALCULATE( sum(ANBP_WID_Monthly[Value]),DTRB_PERF_DATES[Cal_YTD_Flag] = {TRUE},ANBP_WID_Monthly[ANBP_OtherRev] = 'ANBP')","isHidden":false},{"name":"ANBP Monthly PY","expression":"CALCULATE(     sum(ANBP_WID_Monthly[Value]),     DTRB_PERF_DATES[Cal_Prior_Year_Flag] in {TRUE},    ANBP_WID_Monthly[ANBP_OtherRev] = 'ANBP')","isHidden":false},{"name":"ANBP Monthly PY2","expression":"CALCULATE(     sum(ANBP_WID_Monthly[Value]),     DTRB_PERF_DATES[Cal_Prior_Year_2_Flag] in {TRUE},     ANBP_WID_Monthly[ANBP_OtherRev] = 'ANBP')","isHidden":false},{"name":"ANBP Monthly YTD","expression":"CALCULATE(     sum(ANBP_WID_Monthly[Value]),     ANBP_WID_Monthly[ANBP_OtherRev] = 'ANBP',    DTRB_PERF_DATES[Cal_YTD_Flag] = {TRUE()})","isHidden":false},{"name":"ANBP Monthly PYTD","expression":"CALCULATE(  sum(ANBP_WID_Monthly[Value]),  ANBP_WID_Monthly[ANBP_OtherRev] = 'ANBP',  DTRB_PERF_DATES[Cal_PYTD_Flag] in {TRUE},ANBP_WID_Monthly[Not YTD]\u003c\u003e'Not YTD')","isHidden":false},{"name":"ANBP Monthly YOY Change","expression":"IF(ANBP_WID_Monthly[ANBP Monthly YTD]=BLANK(),BLANK(),IF(ANBP_WID_Monthly[ANBP Monthly PYTD]=BLANK(),BLANK(),(ANBP_WID_Monthly[ANBP Monthly YTD] - ANBP_WID_Monthly[ANBP Monthly PYTD]) / ANBP_WID_Monthly[ANBP Monthly PYTD]))","isHidden":false},{"name":"ANBP Monthly Filter","expression":"ANBP_WID_Monthly[ANBP Monthly YTD]+ANBP_WID_Monthly[ANBP Monthly PYTD]","isHidden":false},{"name":"WID Monthly CY","expression":"CALCULATE( sum(ANBP_WID_Monthly[Value]),DTRB_PERF_DATES[Cal_YTD_Flag] = {TRUE},ANBP_WID_Monthly[ANBP_OtherRev] = 'WID')","isHidden":false},{"name":"WID Monthly PY","expression":"CALCULATE(     sum(ANBP_WID_Monthly[Value]),     DTRB_PERF_DATES[Cal_Prior_Year_Flag] in {TRUE},    ANBP_WID_Monthly[ANBP_OtherRev] = 'WID')","isHidden":false},{"name":"WID Monthly PY2","expression":"CALCULATE(     sum(ANBP_WID_Monthly[Value]),     DTRB_PERF_DATES[Cal_Prior_Year_2_Flag] in {TRUE},     ANBP_WID_Monthly[ANBP_OtherRev] = 'WID')","isHidden":false},{"name":"ANBP_WID Filter","expression":"IF(ISBLANK(ANBP_WID_Monthly[ANBP Monthly YTD]),0,ANBP_WID_Monthly[ANBP Monthly YTD])+                    IF(ISBLANK(ANBP_WID_Monthly[ANBP Monthly PYTD]),0,ANBP_WID_Monthly[ANBP Monthly PYTD])+                        IF(ISBLANK(ANBP_WID_Monthly[WID Monthly YTD]),0,ANBP_WID_Monthly[WID Monthly YTD])+                            IF(ISBLANK(ANBP_WID_Monthly[WID Monthly PYTD]),0,ANBP_WID_Monthly[WID Monthly PYTD])","isHidden":false},{"name":"WID Monthly YTD","expression":"CALCULATE(     sum(ANBP_WID_Monthly[Value]),     ANBP_WID_Monthly[ANBP_OtherRev] = 'WID',    DTRB_PERF_DATES[Cal_YTD_Flag] = {TRUE()})","isHidden":false},{"name":"WID Monthly PYTD","expression":"CALCULATE(  sum(ANBP_WID_Monthly[Value]),  ANBP_WID_Monthly[ANBP_OtherRev] = 'WID',  DTRB_PERF_DATES[Cal_PYTD_Flag] in {TRUE},ANBP_WID_Monthly[Not YTD]\u003c\u003e'Not YTD')","isHidden":false},{"name":"Total Sales Current Month","expression":"VAR CurrentMonthIndex= CALCULATE(MAX(DTRB_PERF_DATES[MonthIndex]), DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT]='CURRENT')RETURNCALCULATE(SUM(ANBP_WID_Monthly[Value]), OR(ANBP_WID_Monthly[ANBP_OtherRev]='ANBP', ANBP_WID_Monthly[ANBP_OtherRev]='WID'),DTRB_PERF_DATES[MonthIndex]= CurrentMonthIndex)","isHidden":false},{"name":"Total Sales Previous Month","expression":"VAR CurrentMonthIndex= CALCULATE(MAX(DTRB_PERF_DATES[MonthIndex]), DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT]='CURRENT')RETURNCALCULATE(SUM(ANBP_WID_Monthly[Value]), OR(ANBP_WID_Monthly[ANBP_OtherRev]='ANBP', ANBP_WID_Monthly[ANBP_OtherRev]='WID'),DTRB_PERF_DATES[MonthIndex]= CurrentMonthIndex-1)","isHidden":false},{"name":"Total Sales Previous Month 2","expression":"VAR CurrentMonthIndex= CALCULATE(MAX(DTRB_PERF_DATES[MonthIndex]), DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT]='CURRENT')RETURNCALCULATE(SUM(ANBP_WID_Monthly[Value]), OR(ANBP_WID_Monthly[ANBP_OtherRev]='ANBP',ANBP_WID_Monthly[ANBP_OtherRev]='WID'),DTRB_PERF_DATES[MonthIndex]= CurrentMonthIndex-2)","isHidden":false},{"name":"Total Sales PY Previous Month","expression":"VAR CurrentMonthIndex= CALCULATE(MAX(DTRB_PERF_DATES[MonthIndex]), DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT]='CURRENT')RETURNCALCULATE(SUM(ANBP_WID_Monthly[Value]), OR(ANBP_WID_Monthly[ANBP_OtherRev]='ANBP',ANBP_WID_Monthly[ANBP_OtherRev]='WID'),DTRB_PERF_DATES[MonthIndex]= CurrentMonthIndex-13)","isHidden":false},{"name":"Total Sales % MoM","expression":"IF(AND(ANBP_WID_Monthly[Total Sales Previous Month]=BLANK(),ANBP_WID_Monthly[Total Sales Previous Month 2]=BLANK()),BLANK(),[Total Sales Previous Month]/[Total Sales Previous Month 2]-1)","isHidden":false},{"name":"Total Sales % Month YoY","expression":"IF(AND(ANBP_WID_Monthly[Total Sales Previous Month]=BLANK(), ANBP_WID_Monthly[Total Sales PY Previous Month]=BLANK()),BLANK(),[Total Sales Previous Month]/[Total Sales PY Previous Month]-1)","isHidden":false},{"name":"Total Sales Monthly CY","expression":"CALCULATE( sum(ANBP_WID_Monthly[Value]),DTRB_PERF_DATES[Cal_YTD_Flag] = {TRUE},OR(ANBP_WID_Monthly[ANBP_OtherRev] = 'WID',ANBP_WID_Monthly[ANBP_OtherRev] = 'ANBP'))","isHidden":false},{"name":"Total Sales Monthly PY","expression":"CALCULATE(     sum(ANBP_WID_Monthly[Value]),     DTRB_PERF_DATES[Cal_Prior_Year_Flag] in {TRUE},    OR(ANBP_WID_Monthly[ANBP_OtherRev] = 'WID',ANBP_WID_Monthly[ANBP_OtherRev] = 'ANBP'))","isHidden":false},{"name":"Total Sales Monthly PY2","expression":"CALCULATE(     sum(ANBP_WID_Monthly[Value]),     DTRB_PERF_DATES[Cal_Prior_Year_2_Flag] in {TRUE},     OR(ANBP_WID_Monthly[ANBP_OtherRev] = 'ANBP',ANBP_WID_Monthly[ANBP_OtherRev] = 'WID'))","isHidden":false}],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////VSSHR//SHARED//Public//DI and BI//Distribution Dashboard//ANBP_OtherRev_SD_Monthly.csv'),[Delimiter=',', Columns=14, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'CalYr', Int64.Type}, {'Value', type number}, {'MONTH', Int64.Type}, {'MonthEndDate', type date}}),    #'Appended WID' = Table.Combine({#'Changed Type', WID_Snowflake_Monthly}),    #'Merged Queries' = Table.NestedJoin(#'Appended WID', {'Product'}, Mapping, {'Product'}, 'Mapping', JoinKind.LeftOuter),    #'Expanded Mapping' = Table.ExpandTableColumn(#'Merged Queries', 'Mapping', {'Product Roll Up'}, {'Mapping.Product Roll Up'}),    #'Merged Queries1' = Table.NestedJoin(#'Expanded Mapping', {'RALN_RFO_CDE'}, RFO_Name, {'RFO_CODE'}, 'RFO_Name', JoinKind.LeftOuter),    #'Expanded RFO_Name' = Table.ExpandTableColumn(#'Merged Queries1', 'RFO_Name', {'NM'}, {'RFO_Name.NM'}),    #'Added Custom2' = Table.AddColumn(#'Expanded RFO_Name', 'Product_RFO', each [Mapping.Product Roll Up]\u0026'-'\u0026[RALN_RFO_CDE]),    #'Added Custom3' = Table.AddColumn(#'Added Custom2', 'ORZN_CDE_With Duplicate NPG Rows', each if [Product] = 'TRUST' then 'Trust' else if [Product] = '529 COLLEGE PLANS' then '529 College Plans' else 'Advisor Group Including NPG'),    #'Append UL VUL Excess' = Table.Combine({#'Added Custom3', #'UL VUL Excess_Append Query'}),    #'Added Custom4' = Table.AddColumn(#'Append UL VUL Excess', 'TS ID for Merge', each Text.Trim([COMP_PYEE_ID])),    #'Merged Queries2' = Table.NestedJoin(#'Added Custom4', {'TS ID for Merge'}, TENURE, {'TSID for Merge'}, 'TENURE', JoinKind.LeftOuter),    #'Expanded TENURE' = Table.ExpandTableColumn(#'Merged Queries2', 'TENURE', {'ADJ_SVC_DT', 'TRMN_DT', 'TSID for Merge'}, {'TENURE.ADJ_SVC_DT', 'TENURE.TRMN_DT', 'TENURE.TSID for Merge'}),    #'Added Custom5' = Table.AddColumn(#'Expanded TENURE', 'Tenure Years', each ([MonthEndDate]-[TENURE.ADJ_SVC_DT])/365),    #'Changed Type1' = Table.TransformColumnTypes(#'Added Custom5',{{'Tenure Years', type number}}),    #'Added Conditional Column' = Table.AddColumn(#'Changed Type1', 'TenureGroup_SaleDate', each if [Tenure Years] \u003c= 1 then 'NFR1' else if [Tenure Years] \u003c= 2 then 'NFR2' else if [Tenure Years] \u003c= 3 then 'NFR3' else if [Tenure Years] \u003c= 4 then 'NFR4' else if [Tenure Years] \u003c= 5 then 'VET5' else if [Tenure Years] \u003c= 6 then 'VET6' else if [Tenure Years] \u003c= 7 then 'VET7' else 'VET8+'),    #'Replaced Errors' = Table.ReplaceErrorValues(#'Added Conditional Column', {{'TenureGroup_SaleDate', 'Blank'}}),    #'Remove RFRB rows' = Table.SelectRows(#'Replaced Errors', each ([ANBP_OtherRev] \u003c\u003e 'OtherRev')),    #'Merge Sort Table' = Table.NestedJoin(#'Remove RFRB rows', {'ORZN_CDE_With Duplicate NPG Rows'}, #'Sort Table', {'Advisor Group_Product'}, 'Sort Table', JoinKind.LeftOuter),    #'Expanded Sort Table' = Table.ExpandTableColumn(#'Merge Sort Table', 'Sort Table', {'Sort Order'}, {'Sort Table.Sort Order'}),    #'Added Custom' = Table.AddColumn(#'Expanded Sort Table', 'Advisor Count', each if [TENURE.TRMN_DT] = null then 1 else if Date.IsInCurrentYear([TENURE.TRMN_DT]) then Date.DayOfYear([TENURE.TRMN_DT])/Date.DayOfYear(DateTime.LocalNow())else Date.DayOfYear([TENURE.TRMN_DT])/365),    #'Sorted Rows' = Table.Sort(#'Added Custom',{{'MonthEndDate', Order.Descending}})in    #'Sorted Rows'"}]},{"name":"WID_Snowflake_Monthly","isHidden":false,"storageMode":"Import","columns":[{"name":"RALN_MKT_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RALN_RFO_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CalYr","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"MONTH","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"COMP_PYEE_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ANBP_OtherRev","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Value","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MonthEndDate","dataType":"DateTime","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'SELECT #(lf)#(lf)#(tab)CASE WHEN B.''Total Sales Reporting Product Sub-Group Description''= \u0027TAN Managed Accounts\u0027 THEN \u00270716-01-00\u0027 ELSE A.RALN_MKT_CDE END AS RALN_MKT_CDE,#(lf)#(tab)CASE WHEN B.''Total Sales Reporting Product Sub-Group Description''= \u0027TAN Managed Accounts\u0027 THEN \u00270716\u0027 ELSE A.RALN_RFO_CDE END AS RALN_RFO_CDE,#(lf)    A.MVP,#(lf)    A.Market,#(lf)    #(lf)    C.''Distribution Performance Reporting Year Number'' AS CalYr,#(lf)#(tab)C.''Month Number'',#(lf)    C.''MonthEndDate'',#(lf)      B.''Credited Advisor Identifier'' AS COMP_PYEE_ID,#(lf)#(tab)UPPER(B.''Total Sales Reporting Product Sub-Group Description'') AS Product,#(lf)    \u0027WID\u0027 AS ANBP_OtherRev,#(lf)   SUM( B.''WID'') AS Value,#(lf)   D.''Employee Name''#(lf)#(lf)FROM#(lf)#(lf)#(lf)  (SELECT #(lf)#(lf)''Sales Transaction Process Date'',#(lf)''Credited Advisor Identifier'',#(lf)#(tab)''Distribution Channel Code'',#(lf)#(tab)''Distribution Channel Description'',#(lf)#(tab)''Total Sales Reporting Product Type'',#(lf)#(tab)''Total Sales Reporting Product Group Description'',#(lf)#(tab)''Total Sales Reporting Product Sub-Group Description'',#(lf)SUM(''Weighted Investment Deposit Amount'') AS WID#(lf)#(lf)FROM  ENTERPRISE_EDW.PRESENTATION_01.''WID Transaction Confidential''#(lf)#(lf)WHERE YEAR(''Sales Transaction Process Date'') \u003e= YEAR(GETDATE())-2 #(lf)   #(lf)   AND ''Distribution Channel Code'' IN (\u0027CAREER\u0027, \u0027OTH\u0027, \u0027TAN\u0027,\u0027TFGT\u0027,\u0027TRUST\u0027)#(lf)#(lf)GROUP BY #(lf) #(lf)    ''Sales Transaction Process Date'',#(lf)    ''Credited Advisor Identifier'',#(lf)#(tab)''Distribution Channel Code'',#(lf)#(tab)''Distribution Channel Description'',#(lf)#(tab)''Total Sales Reporting Product Type'',#(lf)#(tab)''Total Sales Reporting Product Group Description'',#(lf)#(tab)''Total Sales Reporting Product Sub-Group Description'')#(lf)#(lf) AS B #(lf)#(lf)LEFT JOIN#(lf)#(lf)//Select Current and Transfer rows from Sales Hierarchy--- START#(lf)#(lf)(SELECT DISTINCT#(lf)#(lf)#(tab)''Sales Hierarchy Identifier'',#(lf)#(tab)''Effective Begin Date'' AS BeginDate,#(lf)#(tab)''Effective End Date''-1 AS EndDate,#(lf)    ''Organization Zone Code'' AS RALN_MKT_CDE,#(lf)#(tab)''Organization Sub Department Code'' AS RALN_RFO_CDE,#(lf)    (case when length(''Organization Zone Code'') = 7 then \u002700\u0027#(lf)             else substr(''Organization Zone Code'',6,2)#(lf)           end) as MVP,#(lf)          (case when length(''Organization Zone Code'') = 7 then substr(''Organization Zone Code'',6,2) #(lf)             else substr(''Organization Zone Code'',9,2)#(lf)           end) as Market#(lf)           #(lf)           #(lf)FROM ENTERPRISE_EDW.PRESENTATION_01.''Sale Hierarchy Dimension''#(lf)    WHERE #(lf)#(lf)        ''Current Row Indicator''=\u0027Y\u0027#(lf)        AND ''Effective Begin Date''\u003c=(''Effective End Date''-1)) AS A#(lf)        #(lf)//Select Current and Transfer rows from Sales Hierarchy--- END#(lf)#(lf)ON (A.''Sales Hierarchy Identifier''=B.''Credited Advisor Identifier'' AND B.''Sales Transaction Process Date'' BETWEEN A.BeginDate  AND A.EndDate)#(lf)#(lf)#(lf)LEFT JOIN #(lf)  #(lf)//Determine Max Cal Day of the week--- START#(lf)#(lf)(SELECT#(lf)  #(lf)    ''Calendar Day Date'',#(lf)    LAST_DAY(''Calendar Day Date'',MONTH) AS ''MonthEndDate'',#(lf)    ''Distribution Performance Reporting Year Number'',#(lf)#(tab)MONTH(''Calendar Day Date'') AS ''Month Number''#(lf)  #(lf)  FROM ENTERPRISE_EDW.PRESENTATION_01.''Distribution Performance Dates Dimension'') AS C #(lf)  #(lf)//Determine Max Cal Day of the week--- END#(lf)    #(lf)    ON (B.''Sales Transaction Process Date''=C.''Calendar Day Date'')#(lf)    #(lf)#(lf)LEFT JOIN ENTERPRISE_EDW.PRESENTATION_01.''Workforce Dimension Detail'' AS D ON (B.''Credited Advisor Identifier''=D.''Employee Identifier'' AND D.''Current Row Indicator''=\u0027Y\u0027)#(lf)  #(lf)  GROUP BY#(lf)  #(tab)A.RALN_MKT_CDE,#(lf)#(tab)A.RALN_RFO_CDE,#(lf)    A.MVP,#(lf)    A.Market,#(lf)    C.''Distribution Performance Reporting Year Number'',#(lf)#(tab)C.''Month Number'',#(lf)    C.''MonthEndDate'',#(lf)    B.''Distribution Channel Code'',#(lf)#(lf)    B.''Credited Advisor Identifier'',#(lf)#(tab)B.''Total Sales Reporting Product Type'',#(lf)    B.''Total Sales Reporting Product Group Description'',#(lf)#(tab)B.''Total Sales Reporting Product Sub-Group Description'',#(lf)    D.''Employee Name''', null, [EnableFolding=true]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'CALYR', Int64.Type}}),    #'Renamed Columns' = Table.RenameColumns(#'Changed Type',{{'MARKET', 'Market'}, {'CALYR', 'CalYr'}, {'PRODUCT', 'Product'}, {'VALUE', 'Value'}, {'ANBP_OTHERREV', 'ANBP_OtherRev'}, {'Employee Name', 'EMP_NM'}, {'Month Number', 'MONTH'}})in    #'Renamed Columns'"}]},{"name":"Parameter","isHidden":false,"storageMode":"Import","columns":[{"name":"Parameter","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"Parameter Fields","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"Parameter Order","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"}],"measures":[],"source":[{"expression":"{    ('Month End', NAMEOF(\u0027ANBP_WID_Monthly\u0027[MonthEndDate]), 0),    ('Year', NAMEOF(\u0027ANBP_WID_Monthly\u0027[CalYr]), 1),    ('Quarter', NAMEOF(DTRB_PERF_DATES[Year_Quarter]), 2)}"}]},{"name":"Parameter 2","isHidden":false,"storageMode":"Import","columns":[{"name":"Parameter","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"Parameter Fields","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"Parameter Order","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"}],"measures":[],"source":[{"expression":"{    ('Product Group', NAMEOF(\u0027Mapping\u0027[Group]), 0),    ('Product Sub Group', NAMEOF(\u0027Mapping\u0027[Product]), 1),    ('Product', NAMEOF(\u0027Enterprise_ProductMapping\u0027[Enterprise Mapping Renamed]), 2),    ('Advisor Group', NAMEOF(\u0027RFO_Market\u0027[Advisor Group Shortened]), 3),    ('MVP', NAMEOF(MVP[EMP_NM]), 4),    ('Experienced Advisor', NAMEOF(Market_Leaders[Experienced Advisor]), 5)}"}]},{"name":"Whats New_ Alert Messages","isHidden":false,"storageMode":"Import","columns":[{"name":"Start Date","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"End Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Message Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Message","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"What\u0027s New Msg","expression":"VAR EndDate=LOOKUPVALUE(\u0027Whats New_ Alert Messages\u0027[End Date],\u0027Whats New_ Alert Messages\u0027[Message Description],'What\u0027s New')RETURNIF(TODAY()\u003c=EndDate,LOOKUPVALUE(\u0027Whats New_ Alert Messages\u0027[Message],\u0027Whats New_ Alert Messages\u0027[Message Description], 'What\u0027s New'),'')","isHidden":false},{"name":"Show What\u0027s New Msg Box","expression":"VAR EndDate=LOOKUPVALUE(\u0027Whats New_ Alert Messages\u0027[End Date],\u0027Whats New_ Alert Messages\u0027[Message Description],'What\u0027s New')RETURNIF(TODAY()\u003c=EndDate,1,0)","isHidden":false},{"name":"Alert Msg","expression":"VAR ALertMsg=LOOKUPVALUE(\u0027Whats New_ Alert Messages\u0027[Message],\u0027Whats New_ Alert Messages\u0027[Message Description],'Alert!')RETURNIF(ALertMsg\u003c\u003eBLANK(),ALertMsg, '')","isHidden":false},{"name":"Show Alert Msg Box","expression":"VAR ALertMsg=LOOKUPVALUE(\u0027Whats New_ Alert Messages\u0027[Message],\u0027Whats New_ Alert Messages\u0027[Message Description],'Alert!')RETURNIF(ALertMsg\u003c\u003eBLANK(),1,0)","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//SHARED//Public//DI and BI//Field Reporting//What\u0027s New and Alert Message//What\u0027s New and Alert Message.xlsx'), null, true),    #'Sales Dashboard_Sheet' = Source{[Item='Sales',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'Sales Dashboard_Sheet', [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'End Date', type date}})in    #'Changed Type'"}]},{"name":"Illustration_Application_Solution_Studio_Annual_Counts_2023","isHidden":false,"storageMode":"Import","columns":[{"name":"Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Day","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Count","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////VSSHR//SHARED//Public//DI and BI//Sales Dashboard//Illustration_Application_Solution_Studio_Annual_Counts_2023.csv'),[Delimiter=',', Columns=3, Encoding=65001, QuoteStyle=QuoteStyle.None]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Column1', type text}, {'Column2', type text}, {'Column3', type text}}),    #'Removed Top Rows' = Table.Skip(#'Changed Type',15),    #'Renamed Columns' = Table.RenameColumns(#'Removed Top Rows',{{'Column1', 'Product'}, {'Column2', 'Day'}, {'Column3', 'Count'}}),    #'Filtered Rows' = Table.SelectRows(#'Renamed Columns', each ([Day] \u003c\u003e '' and [Day] \u003c\u003e 'Day')),    #'Changed Type1' = Table.TransformColumnTypes(#'Filtered Rows',{{'Day', type date}, {'Count', Int64.Type}})in    #'Changed Type1'"}]},{"name":"ANBP_SummaryPage_Enterprise","isHidden":false,"storageMode":"Import","columns":[{"name":"ANBP_SummaryPage_Enterprise","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"ANBP_SummaryPage_Enterprise Fields","dataType":"String","isHidden":true,"columnType":"CalculatedTableColumn"},{"name":"ANBP_SummaryPage_Enterprise Order","dataType":"String","isHidden":true,"columnType":"CalculatedTableColumn"}],"measures":[],"source":[{"expression":"{    ('ANBP YTD', NAMEOF(\u0027ANBP_OTHERREV_SD\u0027[ANBP YTD]), 0),    ('Summary- YTD ANBP Goal', NAMEOF(\u0027YTD_Goals\u0027[Summary- YTD ANBP Goal]), 1),    ('Summary- ANBP % YTD Goal', NAMEOF(\u0027YTD_Goals\u0027[Summary- ANBP % YTD Goal]), 2),    ('ANBP YOY Change', NAMEOF(\u0027ANBP_OTHERREV_SD\u0027[ANBP YOY Change]), 3)}"}]},{"name":"ANBP_Summary","isHidden":false,"storageMode":"Import","columns":[{"name":"ANBP_Summary","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"ANBP_Summary Fields","dataType":"String","isHidden":true,"columnType":"CalculatedTableColumn"},{"name":"ANBP_Summary Order","dataType":"String","isHidden":true,"columnType":"CalculatedTableColumn"}],"measures":[{"name":"Measure","expression":"var FilterChoice = if(ISFILTERED(MVP[MVP]),0,if(ISFILTERED(RFO_Market[Advisor Group]),0,if(ISFILTERED(RFO_Market[Division]),SELECTEDVALUE(RFO_Market[Division]),if(ISFILTERED(RFO_Market[Region]),0,if(ISFILTERED(RFO_Market[Channel]),0,1)))))VAR ANBP_Summary1 = {    ('ANBP YTD', NAMEOF(\u0027ANBP_OTHERREV_SD\u0027[ANBP YTD]), 0),    ('ANBP PYTD', NAMEOF(\u0027ANBP_OTHERREV_SD\u0027[ANBP PYTD]), 1),    ('ANBP YOY Change', NAMEOF(\u0027ANBP_OTHERREV_SD\u0027[ANBP YOY Change]), 2)}VAR ANBP_SummaryPage_Enterprise1 = {    ('ANBP YTD', NAMEOF(\u0027ANBP_OTHERREV_SD\u0027[ANBP YTD]), 0),    ('Summary- YTD ANBP Goal', NAMEOF(\u0027YTD_Goals\u0027[Summary- YTD ANBP Goal]), 1),    ('Summary- ANBP % YTD Goal', NAMEOF(\u0027YTD_Goals\u0027[Summary- ANBP % YTD Goal]), 2),    ('ANBP YOY Change', NAMEOF(\u0027ANBP_OTHERREV_SD\u0027[ANBP YOY Change]), 3)}RETURNIF(FilterChoice=0, ANBP_Summary, ANBP_SummaryPage_Enterprise)","isHidden":false}],"source":[{"expression":"var FilterChoice = if(ISFILTERED(MVP[MVP]),0,if(ISFILTERED(RFO_Market[Advisor Group]),0,if(ISFILTERED(RFO_Market[Division]),SELECTEDVALUE(RFO_Market[Division]),if(ISFILTERED(RFO_Market[Region]),0,if(ISFILTERED(RFO_Market[Channel]),0,1)))))VAR RETURNIF(FilterChoice=0, {    ('ANBP YTD', NAMEOF(\u0027ANBP_OTHERREV_SD\u0027[ANBP YTD]), 0),    ('ANBP PYTD', NAMEOF(\u0027ANBP_OTHERREV_SD\u0027[ANBP PYTD]), 1),    ('ANBP YOY Change', NAMEOF(\u0027ANBP_OTHERREV_SD\u0027[ANBP YOY Change]), 2)},'na')"}]},{"name":"Zone DataBase Design","isHidden":false,"storageMode":"Import","columns":[{"name":"Organization Zone Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Leader Name","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//SHARED//Public//DI and BI//Distribution Dashboard//Market List from ZDD.xlsx'), null, true),    #'Dist DB lookup_Sheet' = Source{[Item='Dist DB lookup',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'Dist DB lookup_Sheet', [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'TAG-MVP-MKT', type text}, {'TAG-MVP', type text}, {'TAG', type text}, {'Market', type text}, {'MVP', Int64.Type}, {'Mkt', Int64.Type}, {'Leader Name', type text}, {'Lookup', Int64.Type}}),    #'Removed Columns' = Table.RemoveColumns(#'Changed Type',{'MVP', 'Mkt', 'Lookup'}),    #'Renamed Columns' = Table.RenameColumns(#'Removed Columns',{{'TAG-MVP', 'MVP'}, {'TAG-MVP-MKT', 'Organization Zone Code'}, {'TAG', 'RFO'}}),    #'Removed Blank Rows' = Table.SelectRows(#'Renamed Columns', each not List.IsEmpty(List.RemoveMatchingItems(Record.FieldValues(_), {'', null}))),    #'Replaced Value' = Table.ReplaceValue(#'Removed Blank Rows','','',Replacer.ReplaceValue,{'Organization Zone Code'}),    #'Sorted Rows' = Table.Sort(#'Replaced Value',{{'Organization Zone Code', Order.Ascending}})in    #'Sorted Rows'"}]}],"expressions":[{"name":"2. Applications Pend_Recvd_Complete","expression":"let    Source = Csv.Document(File.Contents('////pnfiles002b//fp_cifs_7834_sas$//MarketAnalysis//FieldReporting//SMIS//RECD_PEND_COMPL.csv'),[Delimiter=',', Columns=34, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Week_Ending', type date}, {'Week_Nbr', Int64.Type}, {'ContractNumber', type text}, {'BenefitContractNumber', type text}, {'FileCode', type text}, {'TransCode', Int64.Type}, {'TransDesc', type text}, {'TransReceiveDt', type date}, {'TransCreateDt', type date}, {'TransCloseDt', type date}, {'TransSeqNumber', Int64.Type}, {'Product', type text}, {'ProdType', type text}, {'LOBCode', type text}, {'LOBSubType', type text}, {'SMISLOBCode', type text}, {'SMISPlanCode', Int64.Type}, {'EstimatedSalesCreditAmt', Currency.Type}, {'ActualSalesCreditAmt', Currency.Type}, {'CAPTransmissionNumber', Int64.Type}, {'CorporateEmployeeID', type text}, {'RFOCode', Int64.Type}, {'RFOName', type text}, {'AgentCode', Int64.Type}, {'SMISTRANSKEY', type text}, {'Received', Int64.Type}, {'Pending', Int64.Type}, {'Retired', Int64.Type}, {'Declined', Int64.Type}, {'Issued', Int64.Type}, {'Cancelled', Int64.Type}, {'STATUS', type text}, {'YR', Int64.Type}, {'ContractFaceAmount', type number}}),    #'Filtered Rows1' = Table.SelectRows(#'Changed Type', each ([Product] = 'LIFE')),    #'Added Conditional Column' = Table.AddColumn(#'Filtered Rows1', 'Product_New', each if [ProdType] = 'TERM' then 'Term' else if [LOBCode] = 'UL' then 'UL' else if [LOBCode] = 'VUL' then 'VUL' else if [LOBSubType] = 'SGLPRMWL' then 'SPWL' else if [LOBSubType] = 'Single Prem LF' then 'SPWL' else if [LOBSubType] = 'SLPMWL21' then 'SPWL' else 'PERM_RECURRING'),    #'Removed Other Columns' = Table.SelectColumns(#'Added Conditional Column',{'Week_Ending', 'Week_Nbr', 'BenefitContractNumber', 'TransReceiveDt', 'TransCreateDt', 'TransCloseDt', 'Product', 'ProdType', 'LOBCode', 'CorporateEmployeeID', 'Received', 'Pending', 'Retired', 'Declined', 'Issued', 'Cancelled', 'ContractFaceAmount', 'STATUS', 'Product_New'}),    #'FilterRows After 1.1.20' = Table.SelectRows(#'Removed Other Columns', each Date.IsInPreviousYear([Week_Ending]) or Date.IsInCurrentYear([Week_Ending])),    #'Added Custom2' = Table.AddColumn(#'FilterRows After 1.1.20', 'Year', each if Date.IsInCurrentYear([Week_Ending]) then 'CY' else if Date.IsInPreviousYear([Week_Ending]) then 'PY'else ''),    #'Added Custom' = Table.AddColumn(#'Added Custom2', 'YTD', each if (Date.WeekOfYear([Week_Ending])-1)\u003c= Date.WeekOfYear(DateTime.LocalNow()) then (if Date.IsInCurrentYear([Week_Ending]) then 'CY YTD' else (if Date.IsInPreviousYear([Week_Ending]) then 'PY YTD'else '')) else ''),    #'Added Custom1' = Table.AddColumn(#'Added Custom', 'Previous N Prior Week', each if (Date.WeekOfYear([Week_Ending])-1)= Date.WeekOfYear(DateTime.LocalNow())-1 then 'PW' else if (Date.WeekOfYear([Week_Ending])-1)= Date.WeekOfYear(DateTime.LocalNow())-2 then 'Prior Week' else ''),    #'Added Custom4' = Table.AddColumn(#'Added Custom1', '4 Week', each if (Date.WeekOfYear([Week_Ending])-1)\u003c Date.WeekOfYear(DateTime.LocalNow())-1 then if (Date.WeekOfYear([Week_Ending])-1)\u003e Date.WeekOfYear(DateTime.LocalNow())-5 then '4 Week' else ''else ''),    #'Grouped Rows' = Table.Group(#'Added Custom4', {'Year', 'YTD', '4 Week', 'Previous N Prior Week'}, {{'Received Count', each List.Sum([Received]), type nullable number}, {'Issued Count', each List.Sum([Issued]), type nullable number}, {'Declined Count', each List.Sum([Declined]), type nullable number}, {'Retired Count', each List.Sum([Retired]), type nullable number}, {'Pending Count', each List.Sum([Pending]), type nullable number}, {'Total Face Amount', each List.Sum([ContractFaceAmount]), type nullable number}, {'Average Face Amount', each List.Average([ContractFaceAmount]), type nullable number}}),    #'Added Custom3' = Table.AddColumn(#'Grouped Rows', 'Unpivot Column', each [Year]\u0026'- '\u0026[YTD]\u0026'- '\u0026[Previous N Prior Week]),    #'Removed Columns' = Table.RemoveColumns(#'Added Custom3',{'Year', 'YTD', 'Previous N Prior Week'}),    #'Unpivoted Only Selected Columns' = Table.Unpivot(#'Removed Columns', {'Received Count', 'Issued Count', 'Declined Count', 'Retired Count', 'Pending Count', 'Total Face Amount', 'Average Face Amount'}, 'Attribute', 'Value')in    #'Unpivoted Only Selected Columns'"}],"roles":[{"name":"Field Leader RFO","modelPermission":"Read","members":[{"memberName":"obj:a9d8eb7f-8e75-4e5e-b329-caf9fcffa9ea@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"a9d8eb7f-8e75-4e5e-b329-caf9fcffa9ea","memberType":"Group","identityProvider":"AzureAD"},{"memberName":"obj:de18b88a-5b86-4d5a-bc53-8523bc34bc5c@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"de18b88a-5b86-4d5a-bc53-8523bc34bc5c","memberType":"Group","identityProvider":"AzureAD"},{"memberName":"obj:bc106c61-ca17-4fc1-9713-5893454f8368@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"bc106c61-ca17-4fc1-9713-5893454f8368","memberType":"Group","identityProvider":"AzureAD"},{"memberName":"obj:b519c13d-7366-49fe-ac61-e187ca03ce81@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"b519c13d-7366-49fe-ac61-e187ca03ce81","memberType":"Group","identityProvider":"AzureAD"}],"tablePermissions":[{"name":"Hierarchy, Delegation, AD","filterExpression":"[Department Number] = lookupvalue([Department Number],[REPORT_TO_EMAIL],username())"}]},{"name":"COE","modelPermission":"Read","members":[{"memberName":"obj:2f621ad2-0668-4906-bf26-4d5ce281db46@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"2f621ad2-0668-4906-bf26-4d5ce281db46","memberType":"Group","identityProvider":"AzureAD"},{"memberName":"obj:e2d6b87f-e701-4e68-9ad4-b3024f5d36a5@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"e2d6b87f-e701-4e68-9ad4-b3024f5d36a5","memberType":"Group","identityProvider":"AzureAD"}]},{"name":"Home Office","modelPermission":"Read","members":[{"memberName":"obj:f821cab7-3941-455c-9dae-b6b40e807e53@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"f821cab7-3941-455c-9dae-b6b40e807e53","memberType":"Group","identityProvider":"AzureAD"},{"memberName":"obj:ee437677-f0b8-4264-8c52-e205c5bc1e2a@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"ee437677-f0b8-4264-8c52-e205c5bc1e2a","memberType":"Group","identityProvider":"AzureAD"},{"memberName":"obj:df407e39-f01b-4e0f-9605-85f2c017fa62@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"df407e39-f01b-4e0f-9605-85f2c017fa62","memberType":"Group","identityProvider":"AzureAD"},{"memberName":"obj:0d216a03-5ecb-4979-be8e-7c3904c3a79e@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"0d216a03-5ecb-4979-be8e-7c3904c3a79e","memberType":"Group","identityProvider":"AzureAD"},{"memberName":"obj:08ceaa2b-184d-4f6d-9dd8-e6db2fc49ad9@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"08ceaa2b-184d-4f6d-9dd8-e6db2fc49ad9","memberType":"Group","identityProvider":"AzureAD"},{"memberName":"obj:43bfd34c-d1b3-40a6-9ce6-9d110ae2e6a9@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"43bfd34c-d1b3-40a6-9ce6-9d110ae2e6a9","memberType":"Group","identityProvider":"AzureAD"},{"memberName":"obj:834a49e2-176e-4d36-9fbb-5e94cb23c60c@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"834a49e2-176e-4d36-9fbb-5e94cb23c60c","memberType":"Group","identityProvider":"AzureAD"},{"memberName":"obj:a5c653e4-80c5-4300-bf37-90cc867c65c4@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"a5c653e4-80c5-4300-bf37-90cc867c65c4","memberType":"Group","identityProvider":"AzureAD"},{"memberName":"obj:8fda22c8-bc4a-4aba-bdea-045657fd23df@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"8fda22c8-bc4a-4aba-bdea-045657fd23df","memberType":"Group","identityProvider":"AzureAD"}]}],"configuredBy":"omkar.ehani@thrivent.com","configuredById":"98085fdc-acdf-4e34-9fd9-6e77a3352a74","isEffectiveIdentityRequired":true,"isEffectiveIdentityRolesRequired":true,"refreshSchedule":{"days":["Monday","Tuesday","Wednesday","Thursday","Friday"],"times":["09:00"],"enabled":true,"localTimeZoneId":"Central Standard Time","notifyOption":"NoNotification"},"targetStorageMode":"Abf","createdDate":"2020-10-05T12:44:47.107","contentProviderType":"PbixInImportMode"},{"id":"f1a550a6-bd71-4ce1-a0d6-8c852e9ad587","name":"LIfe Volume Report Old","tables":[{"name":"Life Volumes","isHidden":false,"columns":[{"name":"Level 5 Product Line Of Business Subgroup Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LIFE_VOLUME_AMOUNT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Process Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Product Category","dataType":"String","isHidden":false,"expression":"if(\u0027Life Volumes\u0027[Level 5 Product Line Of Business Subgroup Code] in {'UL','ULIII', 'ULLIFPRO'}, 'UL', if(\u0027Life Volumes\u0027[Level 5 Product Line Of Business Subgroup Code] in {'WL', 'WLSP'}, 'WL',\u0027Life Volumes\u0027[Level 5 Product Line Of Business Subgroup Code]))","columnType":"Calculated"},{"name":"WEEKNBR","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'select#(lf)SALES.''Process Date'',#(lf)week(SALES.''Process Date'') WeekNbr,#(lf)SALES.''Level 5 Product Line Of Business Subgroup Code'',#(lf)WDD.''Employee Identifier'' TSID,#(lf)sum(SALES.''Life Volume Amount'') Life_Volume_Amount#(lf)#(lf)#(lf)from#(lf)''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sales Metrics Transactions'' SALES#(lf)join ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' WDD on#(lf) (SALES.''Compensation Payee Agent Surrogate Key''=WDD.''Workforce Dimension Detail Surrogate Key''#(lf)  and SALES.''Compensation Agent Version Number''=WDD.''Workforce Dimension Version Number'')#(lf)  #(lf) where SALES.''Process Date'' between \u00271/1/2020\u0027 and \u002712/31/2022\u0027#(lf) and SALES.''Level 3 Product Line Of Business Code'' = \u0027LIFE\u0027#(lf) and SALES.''Compensable Event Subtype Code'' \u003c\u003e \u0027DTI\u0027#(lf) #(lf)  #(lf)group by#(lf) SALES.''Process Date'',#(lf) week(SALES.''Process Date''),#(lf) SALES.''Level 5 Product Line Of Business Subgroup Code'',#(lf) WDD.''Employee Identifier''', null, [EnableFolding=true]),    #'Sorted Rows' = Table.Sort(Source,{{'Process Date', Order.Ascending}})in    #'Sorted Rows'"}]},{"name":"Organization Dimension","isHidden":false,"columns":[{"name":"Organization Dimension Surrogate Key","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Organization Dimension Version Number","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Source System Key Text","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Effective Begin Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Effective End Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Current Row Indicator","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Department Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Sub Department Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO Zone Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Financial Professional Tenure Group","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"NPG Indicator","dataType":"String","isHidden":false,"expression":"if(CONTAINSSTRING(\u0027Organization Dimension\u0027[RFO Zone Identifier],'99'),'Y','N')","columnType":"Calculated"},{"name":"Department Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG","dataType":"String","isHidden":false,"expression":"if(\u0027Organization Dimension\u0027[Department Identifier] in {'5405','5407','5408','5409'}, '0383', \u0027Organization Dimension\u0027[Department Identifier])","columnType":"Calculated"}],"measures":[],"source":[{"expression":"let    Source = Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'),    ENTERPRISE_EDW_Database = Source{[Name='ENTERPRISE_EDW',Kind='Database']}[Data],    PRESENTATION_01_Schema = ENTERPRISE_EDW_Database{[Name='PRESENTATION_01',Kind='Schema']}[Data],    #'Organization Dimension_View' = PRESENTATION_01_Schema{[Name='Organization Dimension',Kind='View']}[Data],    #'Filtered Rows' = Table.SelectRows(#'Organization Dimension_View', each ([Current Row Indicator] = 'Y') and ([Effective End Date] = #date(9999, 12, 31))),    #'Removed Columns' = Table.RemoveColumns(#'Filtered Rows',{'Source System Code', 'Source Sub System Text', 'Organization Type Code', 'Company Code', 'Company Name', 'Division Identifier', 'Division Name', 'Sub Department Name', 'RFO Zone Name', 'First Name', 'Last Name', 'Employee Service Date', 'Years Of Service Number', 'Hire Date', 'Age at Hire', 'Years In Position Number', 'Adjusted Service Date', 'Financial Professional Tenure', 'Retirement Date', 'Birth Date', 'Age Range (5 yr) Description', 'Gender Description', 'Marital Status Description', 'Marital Status Effective Date', 'Marital Status Code', 'Deceased Date', 'State Description', 'City Name', 'Job Family Description', 'Zip 5 Code', 'Job Family Code', 'Job Type Code', 'Job Type Description', 'Field Professional Roles', 'Worker Sub Type Description', 'Worker Type Description', 'Worker Time Type Description', 'Worker Sub Type Code', 'Employee Status Type Description', 'Employee Status Type Code', 'Age at Termination', 'Business Title Code', 'Employee Location Text', 'FLSA Status', 'Last Work Date', 'Management Level Code', 'Offer Code', 'Original Hire Date', 'Payroll Group Code', 'Position Effective Date', 'Position Number', 'Report to ID', 'Report to Position ID', 'Standard Hours Value', 'Termination Date', 'TF Job Class Code', 'Agent Continuous District Representative Full Time Service Date', 'Agent Field Total Full Time Service Date', 'Agent Total Full Time Service Date', 'Agent Field Total Service Date', 'Conference Qualification Type Code', 'Marketing Date', 'FRST_RCD_IND', 'NEW_CTRC_IND', 'PREV_JOB_TYP_CDE', 'BSNS_ITRP_CNT', 'Organization Dimension Key'}),    #'Trimmed Text' = Table.TransformColumns(#'Removed Columns',{{'Department Identifier', Text.Trim, type text}})in    #'Trimmed Text'"}]},{"name":"TAG Goals","isHidden":false,"columns":[{"name":"TAG","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Goal","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Percent of Total","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('fc9LDoUwCAXQvTR5M0Lg8lHWYtz/NrTWJnXyBgwgJxc4jiaq0agpFYJEpFfvwchfO6mLeiakUYvY2PYXYLcR4ds3wmWK0nsCUrdVGGe8wnIIOFbhjLnFdv9/hls8ESGfT4JrfhIYIiGrSM66xXkB', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [TAG = _t, Goal = _t, #'Percent Growth' = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Goal', Currency.Type}, {'Percent Growth', Percentage.Type}}),    #'Renamed Columns' = Table.RenameColumns(#'Changed Type',{{'Percent Growth', 'Percent of Total'}})in    #'Renamed Columns'"}]},{"name":"DTRB_PERF_DATES","isHidden":false,"columns":[{"name":"DT_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CAL_DAY_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_END_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_WK_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"SRC_SYS_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CRET_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"LST_UPDT_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"CRET_USER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LST_UPDT_USER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_DAY_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_MTH_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_QTR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"YTD Flag","dataType":"String","isHidden":false,"expression":"if(and(DTRB_PERF_DATES[CAL_DAY_DT] \u003c= LOOKUPVALUE(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT'), \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'CURRENT'), True, False)","columnType":"Calculated"},{"name":"Prior Year Flag","dataType":"String","isHidden":false,"expression":"if(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'PREVIOUS', True, False)","columnType":"Calculated"}],"measures":[],"source":[{"expression":"let    Source = DB2.Database('PODWH021:50000', 'PODWH021', [HierarchicalNavigation=true, Implementation='Microsoft']),    COMMON = Source{[Schema='COMMON']}[Data],    DTRB_PERF_DATES1 = COMMON{[Name='DTRB_PERF_DATES']}[Data]in    DTRB_PERF_DATES1"}]},{"name":"Measure Table","isHidden":false,"columns":[],"measures":[{"name":"Life Vol Running Total","expression":"CALCULATE ([YTD Life Vol],FILTER(ALL(\u0027Life Volumes\u0027[WEEKNBR]),\u0027Life Volumes\u0027[WEEKNBR] \u003c= MAX ( \u0027Life Volumes\u0027[WEEKNBR] )))","isHidden":false},{"name":"YTD Life Vol","expression":"calculate(sum(\u0027Life Volumes\u0027[LIFE_VOLUME_AMOUNT]),DTRB_PERF_DATES[YTD Flag] in {TRUE})","isHidden":false},{"name":"YTD_LifeVol_Cummulative","expression":"CALCULATE(    [Life Vol Running Total],    DTRB_PERF_DATES[YTD Flag] in {TRUE})","isHidden":false},{"name":"PY Life Vol","expression":"calculate(sum(\u0027Life Volumes\u0027[LIFE_VOLUME_AMOUNT]),DTRB_PERF_DATES[Prior Year Flag] in {TRUE})","isHidden":false},{"name":"PY Life Vol Running Total","expression":"CALCULATE ([PY Life Vol],FILTER(ALL(\u0027Life Volumes\u0027[WEEKNBR]),\u0027Life Volumes\u0027[WEEKNBR] \u003c= MAX ( \u0027Life Volumes\u0027[WEEKNBR] )))","isHidden":false},{"name":"YTD Life Vol Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[RFO]),SELECTEDVALUE(RFO_Zone[RFO]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]),'RFO Sum'))var YearToDate = LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT')returncalculate(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = YearToDate)","isHidden":false},{"name":"% of YTD Goal","expression":"divide([YTD Life Vol],[YTD Life Vol Goal])","isHidden":false}],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i44FAA==', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Column1 = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Column1', type text}}),    #'Removed Columns' = Table.RemoveColumns(#'Changed Type',{'Column1'})in    #'Removed Columns'"}]},{"name":"YTD_GOALS_DD","isHidden":false,"columns":[{"name":"Level","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Metric","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Date_of_Goal","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Goal_Amount","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////vsshr//shared////Public//DI and BI//Distribution Dashboard//YTD_GOALS_DD.csv'),[Delimiter=',', Columns=4, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Level', type text}, {'Metric', type text}, {'Date_of_Goal', type date}, {'Goal_Amount', type number}}),    #'Filtered Rows' = Table.SelectRows(#'Changed Type', each ([Metric] = 'LifeVolume'))in    #'Filtered Rows'"}]},{"name":"RFO_Zone","isHidden":false,"columns":[{"name":"Organization Zone Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Channel","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'SELECT DISTINCT #(lf)#(tab)SHD.''Organization Zone Code'',#(lf)        SHD.''Organization Sub Department Code'' as MVP,#(lf)#(tab)(LEFT(SHD.''Organization Zone Code'',4)) as RFO,#(lf)#(tab)(SUBSTRING(SHD.''Organization Zone Code'',6,5)) as Zone#(lf)from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' SHD#(lf)where SHD.''Organization Department Code'' in (\u00270001\u0027,\u00270115\u0027,\u00270190\u0027,\u00270283\u0027,\u00270291\u0027,\u00270361\u0027,\u00270383\u0027,\u00270384\u0027,\u00270435\u0027,\u00270525\u0027,\u00270716\u0027,\u00270810\u0027)#(lf)order by SHD.''Organization Zone Code''', null, [EnableFolding=true]),    #'Renamed Columns' = Table.RenameColumns(Source,{{'ZONE', 'Market'}}),    #'Added Custom' = Table.AddColumn(#'Renamed Columns', 'Channel', each if List.Contains({'0001','0115','0165','0190','0240','0283','0291','0361','0365','0384','0410','0435','0475','0496','0525','0529','0810'}, [RFO]) then 'Thrivent Advisor Group'else if List.Contains({'0383'}, [RFO]) then 'TFGT' else if List.Contains({'0716'}, [RFO]) then 'TAN' else  'Other'),    #'Filtered Rows' = Table.SelectRows(#'Added Custom', each ([MVP] \u003c\u003e 'UKWN') and ([RFO] \u003c\u003e '0529'))in    #'Filtered Rows'"}]}],"configuredBy":"david.bowman@thrivent.com","configuredById":"ffed1576-b128-448d-927e-1d187d9d95ce","isEffectiveIdentityRequired":false,"isEffectiveIdentityRolesRequired":false,"targetStorageMode":"Abf","createdDate":"2022-03-22T19:47:44.453","contentProviderType":"PbixInImportMode","schemaMayNotBeUpToDate":true},{"id":"a5dee350-005f-4698-af42-f00d5c06102e","name":"Experienced Advisors Report","tables":[{"name":"Measure Table","isHidden":false,"storageMode":"Import","columns":[],"measures":[{"name":"ANBP Goal","expression":"519800000","isHidden":false},{"name":"ANBP YTD","expression":"CALCULATE(    SUM(ANBP_OTHERREV_SD[Value]),    DTRB_PERF_DATES[Current Year Flag]={TRUE()},    ANBP_OTHERREV_SD[ANBP_OtherRev]='ANBP')","isHidden":false},{"name":"ANBP PYTD","expression":"//VAR max_date = CALCULATE(MAX(ANBP_OtherRev_SD[max_cal_dt]),ANBP_OtherRev_SD)//var max_date_cy = YEAR(max_date)//var max_date_py = Year(max_date)-1//var max_week_cy = CALCULATE(MAX(ANBP_OtherRev_SD[CalWk]),max_date_cy=YEAR(ANBP_OtherRev_SD[max_cal_dt]))//RETURNCALCULATE(    SUM(ANBP_OtherRev_SD[Value]),    //ANBP_OtherRev_SD[CalWk]\u003c=max_week_cy,    //YEAR(ANBP_OtherRev_SD[max_cal_dt])=max_date_py,    DTRB_PERF_DATES[PYTD Flag] in {TRUE()},    ANBP_OtherRev_SD[ANBP_OtherRev]='ANBP')","isHidden":false},{"name":"ANBP YoY%","expression":"DIVIDE([ANBP YTD]-[ANBP PYTD],[ANBP PYTD])","isHidden":false},{"name":"Capacity Goal","expression":"2923","isHidden":false},{"name":"New Clients Goal","expression":"52500","isHidden":false},{"name":"ANBP % to Goal","expression":"DIVIDE([ANBP YTD],[ANBP Goal])","isHidden":false},{"name":"xxNew Clients YTD","expression":"var cy_start = CALCULATE(    MIN(\u0027New Clients\u0027[Calendar Date]),    ALLEXCEPT(\u0027New Clients\u0027,    \u0027New Clients\u0027[DTRB_PERF_RPT_YR_TXT]),    \u0027New Clients\u0027[DTRB_PERF_RPT_YR_TXT]='Current')var cy_end = CALCULATE(    MAX(\u0027New Clients\u0027[Calendar Date]),    ALLEXCEPT(\u0027New Clients\u0027,    \u0027New Clients\u0027[DTRB_PERF_RPT_YR_TXT]),    \u0027New Clients\u0027[DTRB_PERF_RPT_YR_TXT]='Current')RETURNCALCULATE(SUM(\u0027New Clients\u0027[Financial Customer Point Value]), \u0027New Clients\u0027, \u0027New Clients\u0027[Calendar Date] \u003c= cy_end \u0026\u0026 \u0027New Clients\u0027[Calendar Date] \u003e= cy_start)","isHidden":false},{"name":"xxNew Clients PYTD","expression":"var py_start = CALCULATE(    MIN(\u0027New Clients\u0027[Calendar Date]),    ALLEXCEPT(\u0027New Clients\u0027,    \u0027New Clients\u0027[DTRB_PERF_RPT_YR_TXT]),    \u0027New Clients\u0027[DTRB_PERF_RPT_YR_TXT]='Previous')var cy_end =CALCULATE(    MAX(\u0027New Clients\u0027[Calendar Date]),    ALLEXCEPT(\u0027New Clients\u0027,    \u0027New Clients\u0027[DTRB_PERF_RPT_YR_TXT]),    \u0027New Clients\u0027[DTRB_PERF_RPT_YR_TXT]='Current')var py_end = DATE(YEAR(cy_end)-1,MONTH(cy_end),DAY(cy_end))RETURNCALCULATE(SUM(\u0027New Clients\u0027[Financial Customer Point Value]), \u0027New Clients\u0027, \u0027New Clients\u0027[Calendar Date] \u003c= py_end \u0026\u0026 \u0027New Clients\u0027[Calendar Date] \u003e= py_start)","isHidden":false},{"name":"New Clients YoY%","expression":"VAR __BASELINE_VALUE = [New Clients PYTD]VAR __VALUE_TO_COMPARE = [New Clients YTD]RETURN\\tIF(\\t\\tNOT ISBLANK(__VALUE_TO_COMPARE),\\t\\tDIVIDE(__VALUE_TO_COMPARE - __BASELINE_VALUE, __BASELINE_VALUE)\\t)","isHidden":false},{"name":"New Clients % to Goal","expression":"DIVIDE([New Clients YTD],[New Clients Goal])","isHidden":false},{"name":"New Clients PY","expression":"var py_start = CALCULATE(    MIN(\u0027New Clients\u0027[Calendar Date]),    ALLEXCEPT(\u0027New Clients\u0027,    \u0027New Clients\u0027[DTRB_PERF_RPT_YR_TXT]),    \u0027New Clients\u0027[DTRB_PERF_RPT_YR_TXT]='Previous')var py_end = CALCULATE(    MAX(\u0027New Clients\u0027[Calendar Date]),    ALLEXCEPT(\u0027New Clients\u0027,    \u0027New Clients\u0027[DTRB_PERF_RPT_YR_TXT]),    \u0027New Clients\u0027[DTRB_PERF_RPT_YR_TXT]='Previous')RETURNCALCULATE(    SUM(\u0027New Clients\u0027[Financial Customer Point Value]),     \u0027New Clients\u0027, \u0027New Clients\u0027[Calendar Date] \u003c= py_end     \u0026\u0026 \u0027New Clients\u0027[Calendar Date] \u003e= py_start)","isHidden":false},{"name":"Prospect Connects/Wk Goal","expression":"1961","isHidden":false},{"name":"Capacity As of Date","expression":"VAR max_year = CALCULATE(MAX(WMFC_CD[Year]),WMFC_CD)var max_week = CALCULATE(MAX(WMFC_CD[Perfweek]),max_year=WMFC_CD[Year])var max_week_text = CONCATENATE('W',max_week)RETURN CONCATENATE(max_week_text,CONCATENATE(' - ',max_year))","isHidden":false},{"name":"Client YTD","expression":"CALCULATE(    SUM(\u0027New Clients\u0027[Financial Customer Point Value]),    DATESYTD(\u0027New Clients\u0027[Calendar Date]))","isHidden":false},{"name":"max_date","expression":"CALCULATE(MAX(ANBP_OtherRev_SD[max_cal_dt]),ALL(ANBP_OtherRev_SD))","isHidden":false},{"name":"max_year CY","expression":"YEAR([max_date])","isHidden":false},{"name":"max_year PY","expression":"YEAR([max_date])-1","isHidden":false},{"name":"max_date Year","expression":"YEAR(CALCULATE(MAX(ANBP_OtherRev_SD[max_cal_dt]),ALL(ANBP_OtherRev_SD)))","isHidden":false},{"name":"New Clients YTD","expression":"CALCULATE(    SUM(\u0027New Clients\u0027[Financial Customer Point Value]),    DTRB_PERF_DATES[YTD Flag two Sundays]in {TRUE})","isHidden":false},{"name":"Prior Year","expression":"DTRB_PERF_DATES[Current Year] - 1","isHidden":false},{"name":"New Clients PYTD","expression":"var prev2weeknum = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[CAL_DAY_DT],max(DTRB_PERF_DATES[Two Sundays Ago]))ReturnCALCULATE(sum(\u0027New Clients\u0027[Financial Customer Point Value]),DTRB_PERF_DATES[Prior Year Flag] in {TRUE},DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR]\u003c=prev2weeknum)","isHidden":false},{"name":"max_week_cy","expression":"CALCULATE(MAX(ANBP_OtherRev_SD[CalWk]),YEAR(ANBP_OtherRev_SD[max_cal_dt]))","isHidden":false},{"name":"Current WCFC","expression":"VAR current_year = MAX(\u0027RFO_Mkt_Wk\u0027[Year])RETURNCALCULATE(SUM(WMFC_CD[WCFC]),FILTER(\u0027RFO_Mkt_Wk\u0027,\u0027RFO_Mkt_Wk\u0027[Week]=\u0027RFO_Mkt_Wk\u0027[Current Wk]),FILTER(\u0027RFO_Mkt_Wk\u0027,\u0027RFO_Mkt_Wk\u0027[Year]=current_year))","isHidden":false},{"name":"Prior Year2 WCFC","expression":"VAR previous_year2 = MAX(\u0027RFO_Mkt_Wk\u0027[Year])-2RETURNCALCULATE(SUM(WMFC_CD[WCFC]),    FILTER(\u0027RFO_Mkt_Wk\u0027,\u0027RFO_Mkt_Wk\u0027[Week]=\u0027RFO_Mkt_Wk\u0027[Current Wk]),    FILTER(\u0027RFO_Mkt_Wk\u0027,VALUE(\u0027RFO_Mkt_Wk\u0027[Year])=previous_year2))","isHidden":false},{"name":"Prior Year WCFC","expression":"VAR previous_year = MAX(\u0027RFO_Mkt_Wk\u0027[Year])-1RETURNCALCULATE(SUM(WMFC_CD[WCFC]),    FILTER(\u0027RFO_Mkt_Wk\u0027,\u0027RFO_Mkt_Wk\u0027[Week]=\u0027RFO_Mkt_Wk\u0027[Current Wk]),    FILTER(\u0027RFO_Mkt_Wk\u0027,VALUE(\u0027RFO_Mkt_Wk\u0027[Year])=previous_year))","isHidden":false},{"name":"WCFC YoY%","expression":"DIVIDE([Current WCFC]-[Prior Year WCFC],[Prior Year WCFC])","isHidden":false},{"name":"New Client Test YoY%","expression":"DIVIDE([New Clients YTD]-[New Clients PYTD],[New Clients PYTD])","isHidden":false},{"name":"WID Goal","expression":"654200000","isHidden":false},{"name":"WID % to Goal","expression":"DIVIDE([WID YTD],[WID Goal])","isHidden":false},{"name":"WID YTD","expression":"CALCULATE(    SUM(ANBP_OTHERREV_SD[Value]),    DTRB_PERF_DATES[Current Year Flag]={TRUE()},    ANBP_OTHERREV_SD[ANBP_OtherRev]='WID')","isHidden":false},{"name":"WID PYTD","expression":"//VAR max_date = CALCULATE(MAX(ANBP_OtherRev_SD[max_cal_dt]),ANBP_OtherRev_SD)//var max_date_cy = YEAR(max_date)//var max_date_py = Year(max_date)-1//var max_week_cy = CALCULATE(MAX(ANBP_OtherRev_SD[CalWk]),max_date_cy=YEAR(ANBP_OtherRev_SD[max_cal_dt]))//RETURNCALCULATE(    SUM(ANBP_OtherRev_SD[Value]),    //ANBP_OtherRev_SD[CalWk]\u003c=max_week_cy,    //YEAR(ANBP_OtherRev_SD[max_cal_dt])=max_date_py,    DTRB_PERF_DATES[PYTD Flag] in {TRUE()},    ANBP_OtherRev_SD[ANBP_OtherRev]='WID')","isHidden":false},{"name":"WID YoY%","expression":"DIVIDE([WID YTD]-[WID PYTD],[WID PYTD])","isHidden":false},{"name":"Total Sales PYTD","expression":"//VAR max_date = CALCULATE(MAX(ANBP_OtherRev_SD[max_cal_dt]),ANBP_OtherRev_SD)//var max_date_cy = YEAR(max_date)//var max_date_py = Year(max_date)-1//var max_week_cy = CALCULATE(MAX(ANBP_OtherRev_SD[CalWk]),max_date_cy=YEAR(ANBP_OtherRev_SD[max_cal_dt]))//RETURNCALCULATE(    SUM(ANBP_OtherRev_SD[Value]),    //ANBP_OtherRev_SD[CalWk]\u003c=max_week_cy,    //YEAR(ANBP_OtherRev_SD[max_cal_dt])=max_date_py)    DTRB_PERF_DATES[PYTD Flag] in {TRUE()})","isHidden":false},{"name":"Total Sales YTD","expression":"CALCULATE(    SUM(ANBP_OTHERREV_SD[Value]),    DTRB_PERF_DATES[Current Year Flag]={TRUE()})","isHidden":false},{"name":"Total Sales YoY%","expression":"DIVIDE([Total Sales YTD]-[Total Sales PYTD],[Total Sales PYTD])","isHidden":false},{"name":"Total Sales CY Cumulative","expression":"IF(ISBLANK([Total Sales YTD]),BLANK(),CALCULATE([Total Sales YTD],FILTER(ALL(ANBP_OTHERREV_SD[CalWk]),ANBP_OTHERREV_SD[CalWk]\u003c=MAX(ANBP_OTHERREV_SD[CalWk]))))","isHidden":false},{"name":"Total Sales PY","expression":"CALCULATE(    SUM(ANBP_OTHERREV_SD[Value]),DTRB_PERF_DATES[Prior Year Flag] in {TRUE})","isHidden":false},{"name":"Total Sales PY Cumulative","expression":"CALCULATE([Total Sales PY],FILTER(ALL(ANBP_OTHERREV_SD[CalWk]),ANBP_OTHERREV_SD[CalWk]\u003c=MAX(ANBP_OTHERREV_SD[CalWk])))","isHidden":false},{"name":"Total Sales Cumulative YOY%","expression":"IF(ISBLANK([Total Sales PYTD]),BLANK(),DIVIDE([Total Sales CY Cumulative]-[Total Sales PY Cumulative],[Total Sales PY Cumulative]))","isHidden":false},{"name":"Total Sales Cumulative YOY Difference","expression":"[Total Sales CY Cumulative]-[Total Sales PY Cumulative]","isHidden":false},{"name":"New Clients CY Cumulative","expression":"IF(ISBLANK([New Clients YTD]),BLANK(),CALCULATE([New Clients YTD],FILTER(ALL(\u0027New Clients\u0027[Distribution Performance Reporting Year Week Number]),(\u0027New Clients\u0027[Distribution Performance Reporting Year Week Number]\u003c=MAX(\u0027New Clients\u0027[Distribution Performance Reporting Year Week Number])))))","isHidden":false},{"name":"New Clients PY Cumulative","expression":"CALCULATE([New Clients PY],FILTER(ALL(\u0027New Clients\u0027[Distribution Performance Reporting Year Week Number]),(\u0027New Clients\u0027[Distribution Performance Reporting Year Week Number]\u003c=MAX(\u0027New Clients\u0027[Distribution Performance Reporting Year Week Number]))))","isHidden":false},{"name":"New Clients YOY Difference","expression":"[New Clients YTD]-[New Clients PYTD]","isHidden":false},{"name":"New Clients Cumulative YOY%","expression":"IF(ISBLANK([New Clients PYTD]),BLANK(),DIVIDE([New Clients CY Cumulative]-[New Clients PY Cumulative],[New Clients PY Cumulative]))","isHidden":false},{"name":"Total Sales CY","expression":"CALCULATE(    SUM(ANBP_OTHERREV_SD[Value]),DTRB_PERF_DATES[Current Year Flag] in {TRUE})","isHidden":false},{"name":"Total Sales YOY Difference","expression":"[Total Sales CY]-[Total Sales PY]","isHidden":false},{"name":"WCFC Difference","expression":"[Current WCFC]-[Prior Year WCFC]","isHidden":false}],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i44FAA==', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Measures = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Measures', type text}}),    #'Removed Columns' = Table.RemoveColumns(#'Changed Type',{'Measures'})in    #'Removed Columns'"}]},{"name":"New Clients","isHidden":false,"storageMode":"Import","columns":[{"name":"Date Surrogate Key","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Financial Customer Point Status Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Financial Customer Point Value","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CUST_LGAL_FMT_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Member Type Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CTRC_ISS_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Level 5 Product Line Of Business Subgroup Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Level 4 Product Line Of Business Group Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Level 3 Product Line Of Business Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Assigned FR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee First Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee Middle Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee Last Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Adjusted Service Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TS ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee Status Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee Status Type Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Type Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Current Row Indicator Sales Hierarchy","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Calendar Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Calendar Month Start Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Calendar Month End Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Financial Customer Point Reason Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Financial Customer Point Relationship Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Week End Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Week Number","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Year Number","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Year Week Number","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_DAY_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_MTH_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_QTR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Sales Hierarchy Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Effective Begin Timestamp","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Effective End Timestamp","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Agent Current Row Indicator","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Partner Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Managing Partner Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Organization Department Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Organization Division Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Sales Hierarchy Dimension Surrogate Key","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"YTD NFC Flag","dataType":"String","isHidden":false,"expression":"if(and(\u0027New Clients\u0027[Calendar Date] \u003c= DATE(YEAR(today()),MONTH(today()),DAY(today())),YEAR(\u0027New Clients\u0027[Calendar Date]) = YEAR(today())), 1, 0)","columnType":"Calculated"},{"name":"Employee Name","dataType":"String","isHidden":false,"expression":"CONCATENATE(\u0027New Clients\u0027[Employee First Name],' '\u0026\u0027New Clients\u0027[Employee Last Name])","columnType":"Calculated"},{"name":"Market 2-digit","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Experienced Advisor Markets","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market Sort","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PG COE Markets","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PG COE Mkt Sort","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PG COE Subgroup Markets","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"YTD New Clients 2","expression":"var _total=CALCULATE(sum(\u0027New Clients\u0027[Financial Customer Point Value]), \u0027New Clients\u0027[YTD NFC Flag] = 1)RETURNif(isblank(_total),0,_total)","isHidden":false}],"source":[{"expression":"let    Source = DB2.Database('PODWH021:50000', 'PODWH021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT IA_DATES_ITRL.DT_SK,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.CTRC_VRSN_NBR,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.WRTG_AGT_VRSN_NBR,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_STS_CDE,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.CUST_AGE,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.AGE_CLAS_CDE,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.AGE_CLAS_DSCR,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_VLU,#(lf)       CNF_CUSTOMER_DIM_CFDL.CUST_LGAL_FMT_NM, #(lf)       CNF_CUSTOMER_DIM_CFDL.CUST_BRTH_DT,#(lf)       CNF_CUSTOMER_DIM_CFDL.MBR_TYP_CDE,#(lf)       CNF_CUSTOMER_DIM_CFDL.MBR_TYP_DSCR,#(lf)       CNF_CUSTOMER_DIM_CFDL.RSDL_ST_CDE,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.CTRC_ISS_DT, #(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L5_PLOB_SGRP_CDE,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L5_PLOB_SGRP_DSCR,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L4_PLOB_GRP_CDE,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L4_PLOB_GRP_DSCR,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L3_PROD_LOB_CDE,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L3_PROD_LOB_DSCR,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L2_PROD_CHAR_CDE,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L2_PROD_CHAR_DSCR,#(lf)       AGT_DIM_CURR_CFDL.PARY_DSPL_2_NM,#(lf)       AGT_DIM_CURR_CFDL.FRST_NM,#(lf)       AGT_DIM_CURR_CFDL.MDDL_NM,#(lf)       AGT_DIM_CURR_CFDL.LST_NM,#(lf)       AGT_DIM_CURR_CFDL.ADJ_SVC_DT,#(lf)       AGT_DIM_CURR_CFDL.EMP_ID,#(lf)       AGT_DIM_CURR_CFDL.EMP_STS_TYP_CDE,#(lf)       AGT_DIM_CURR_CFDL.EMP_STS_TYP_DSCR,#(lf)       AGT_DIM_CURR_CFDL.JOB_TYP_CDE,#(lf)       AGT_DIM_CURR_CFDL.JOB_TYP_DSCR,#(lf)       AGT_DIM_CURR_CFDL.CURR_ROW_IND,#(lf)       IA_DATES_ITRL.CAL_DAY_DT,#(lf)       IA_DATES_ITRL.CAL_MTH_NM,#(lf)       IA_DATES_ITRL.CAL_MTH_STRT_DT,#(lf)       IA_DATES_ITRL.CAL_MTH_END_DT,#(lf)       IA_DATES_ITRL.CAL_YR_QTR_NBR,#(lf)       IA_DATES_ITRL.CAL_QTR_NM,#(lf)       IA_DATES_ITRL.CAL_WK_NM,#(lf)       FIN_CUST_ELIG_DIM_CFDL.FIN_CUST_PNT_RSN_CDE,#(lf)       FIN_CUST_ELIG_DIM_CFDL.FIN_CUST_PNT_RSN_DSCR,#(lf)       FIN_CUST_ELIG_DIM_CFDL.CTRC_RLTN_TYP_CDE,#(lf)       FIN_CUST_ELIG_DIM_CFDL.CTRC_RLTN_TYP_DSCR,#(lf)       CASE#(lf)          WHEN (CUST_AGE \u003e= 0) AND (CUST_AGE \u003c= 15) THEN \u00270-15\u0027#(lf)          WHEN (CUST_AGE \u003e= 16) AND (CUST_AGE \u003c= 25) THEN \u002716-25\u0027#(lf)          WHEN (CUST_AGE \u003e= 26) AND (CUST_AGE \u003c= 35) THEN \u002726-35\u0027#(lf)          WHEN (CUST_AGE \u003e= 36) AND (CUST_AGE \u003c= 45) THEN \u002736-45\u0027#(lf)          WHEN (CUST_AGE \u003e= 46) AND (CUST_AGE \u003c= 55) THEN \u002746-55\u0027#(lf)          WHEN (CUST_AGE \u003e= 56) AND (CUST_AGE \u003c= 65) THEN \u002756-65\u0027#(lf)          WHEN (CUST_AGE \u003e= 66) AND (CUST_AGE \u003c= 75) THEN \u002766-75\u0027#(lf)          WHEN CUST_AGE \u003e 75 THEN \u002776+\u0027#(lf)       END#(lf)          AS Member_Age_Group,#(lf)       integer (floor ( (CURRENT DATE - CUST_BRTH_DT) / 10000)) AS Member_Age,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_WK_END_DT,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_WK_NBR,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_YR_NBR,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_YR_WK_NBR,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_WK_TXT,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_YR_TXT,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_DAY_TXT,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_MTH_TXT,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_QTR_TXT,#(lf)       SALE_HIER_DIM.SALE_HIER_ID,#(lf)       SALE_HIER_DIM.EFF_BEG_TMSP,#(lf)       SALE_HIER_DIM.EFF_END_TMSP,#(lf)       SALE_HIER_DIM.CURR_ROW_IND,#(lf)       SALE_HIER_DIM.PRTR_NM,#(lf)       SALE_HIER_DIM.MANP_NM,#(lf)       SALE_HIER_DIM.ORZN_ZONE_CDE,#(lf)       SALE_HIER_DIM.ORZN_ZONE_DSCR,#(lf)  (LEFT(SALE_HIER_DIM.ORZN_ZONE_CDE,4)) as ORZN_DEPT_CDE,#(lf)        SALE_HIER_DIM.ORZN_DEPT_DSCR,#(lf)       SALE_HIER_DIM.ORZN_DIV_CDE,#(lf)       SALE_HIER_DIM.ORZN_DIV_DSCR,#(lf)       SALE_HIER_DIM.SALE_HIER_DIM_SK#(lf)#(lf)  FROM ((((((COMMON.IA_DATES_ITRL IA_DATES_ITRL#(lf)             INNER JOIN COMMON.DTRB_PERF_DATES DTRB_PERF_DATES#(lf)                ON (IA_DATES_ITRL.DT_SK = DTRB_PERF_DATES.DT_SK))#(lf)            LEFT OUTER JOIN#(lf)            SALES.TF_FIN_CUST_EVT_FCT_CFDL TF_FIN_CUST_EVT_FCT_CFDL#(lf)               ON (IA_DATES_ITRL.DT_SK =#(lf)                      TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_CRNG_DT_SK))#(lf)           RIGHT OUTER JOIN HUMAN_RESOURCES.SALE_HIER_DIM SALE_HIER_DIM#(lf)              ON (SALE_HIER_DIM.SALE_HIER_DIM_SK =#(lf)                     TF_FIN_CUST_EVT_FCT_CFDL.SLHR_DIM_CURR_CRNG_AGT_SK))#(lf)          LEFT OUTER JOIN MEMBER.CNF_CUSTOMER_DIM_CFDL CNF_CUSTOMER_DIM_CFDL#(lf)             ON (CNF_CUSTOMER_DIM_CFDL.CUST_SK =#(lf)                    TF_FIN_CUST_EVT_FCT_CFDL.CUST_SK))#(lf)         LEFT OUTER JOIN HUMAN_RESOURCES.AGT_DIM_CURR_CFDL AGT_DIM_CURR_CFDL#(lf)            ON (AGT_DIM_CURR_CFDL.AGT_DIM_SK =#(lf)                   TF_FIN_CUST_EVT_FCT_CFDL.CRNG_AGT_SK))#(lf)        RIGHT OUTER JOIN SALES.FIN_CUST_ELIG_DIM_CFDL FIN_CUST_ELIG_DIM_CFDL#(lf)           ON (FIN_CUST_ELIG_DIM_CFDL.FIN_CUST_PNT_ELIG_DIM_SK =#(lf)                  TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_ELIG_DIM_SK))#(lf)       LEFT OUTER JOIN#(lf)       CONTRACT.CNF_CONTRACT_DIM_DTL_CFDL CNF_CONTRACT_DIM_DTL_CFDL#(lf)          ON     (CNF_CONTRACT_DIM_DTL_CFDL.CTRC_SK =#(lf)                     TF_FIN_CUST_EVT_FCT_CFDL.CTRC_SK)#(lf)            and   (CNF_CONTRACT_DIM_DTL_CFDL.VRSN_NBR =#(lf)                     TF_FIN_CUST_EVT_FCT_CFDL.CTRC_VRSN_NBR)#(lf)WHERE     (AGT_DIM_CURR_CFDL.CURR_ROW_IND = \u0027Y\u0027)#(lf)     #(lf)       AND (SALE_HIER_DIM.CURR_ROW_IND = \u0027Y\u0027)#(lf)       AND sale_hier_dim.ORZN_DEPT_CDE in (\u00270001\u0027, \u00270115\u0027,\u00270165\u0027,\u00270190\u0027,\u00270240\u0027,\u00270283\u0027,\u00270291\u0027,\u00270361\u0027,\u00270365\u0027,\u00270384\u0027,\u00270410\u0027,\u00270435\u0027,\u00270475\u0027,\u00270496\u0027,\u00270525\u0027,\u00270529\u0027,\u00270810\u0027)#(lf)       AND DTRB_PERF_DATES.DTRB_PERF_RPT_YR_NBR in (\u00272022\u0027,\u00272023\u0027,\u00272024\u0027)#(lf)      #(lf)']),    #'Renamed Columns' = Table.RenameColumns(Source,{{'ADJ_SVC_DT', 'Adjusted Service Date'}, {'AGE_CLAS_CDE', 'Age Class Code'}, {'AGE_CLAS_DSCR', 'Age Class Description'}, {'CTRC_RLTN_TYP_CDE', 'Financial Customer Point Relationship Code'}, {'CTRC_RLTN_TYP_DSCR', 'Financial Customer Point Relationship Description'}, {'CTRC_VRSN_NBR', 'Contract Version Number'}, {'CUST_AGE', 'Financial Customer Age'}, {'MEMBER_AGE', 'Member Age'}, {'EFF_BEG_TMSP', 'Effective Begin Timestamp'}, {'EFF_END_TMSP', 'Effective End Timestamp'}, {'EMP_ID', 'Employee Identifier'}, {'EMP_STS_TYP_CDE', 'Employee Status Type Code'}, {'EMP_STS_TYP_DSCR', 'Employee Status Type Description'}, {'FIN_CUST_PNT_RSN_CDE', 'Financial Customer Point Reason Code'}, {'FIN_CUST_PNT_RSN_DSCR', 'Financial Customer Point Reason Description'}, {'FIN_CUST_PNT_STS_CDE', 'Financial Customer Point Status Code'}, {'FIN_CUST_PNT_VLU', 'Financial Customer Point Value'}, {'FRST_NM', 'Employee First Name'}, {'JOB_TYP_CDE', 'Job Type Code'}, {'JOB_TYP_DSCR', 'Job Type Description'}, {'L2_PROD_CHAR_CDE', 'Level 2 Product Character Code'}, {'L2_PROD_CHAR_DSCR', 'Level 2 Product Character Description'}, {'L3_PROD_LOB_CDE', 'Level 3 Product Line Of Business Code'}, {'L3_PROD_LOB_DSCR', 'Level 3 Product Line Of Business Description'}, {'L4_PLOB_GRP_CDE', 'Level 4 Product Line Of Business Group Code'}, {'L4_PLOB_GRP_DSCR', 'Level 4 Product Line Of Business Group Description'}, {'L5_PLOB_SGRP_CDE', 'Level 5 Product Line Of Business Subgroup Code'}, {'L5_PLOB_SGRP_DSCR', 'Level 5 Product Line Of Business Subgroup Description'}, {'LST_NM', 'Employee Last Name'}, {'MANP_NM', 'Managing Partner Name'}, {'MBR_TYP_CDE', 'Member Type Code'}, {'MBR_TYP_DSCR', 'Member Type Description'}, {'ORZN_DEPT_CDE', 'Organization Department Code'}, {'ORZN_DEPT_DSCR', 'Organization Department Description'}, {'ORZN_DIV_CDE', 'Organization Division Code'}, {'ORZN_DIV_DSCR', 'Organization Division Description'}, {'ORZN_ZONE_CDE', 'Organization Zone Code'}, {'ORZN_ZONE_DSCR', 'Organization Zone Description'}, {'PARY_DSPL_2_NM', 'Assigned FR'}, {'PRTR_NM', 'Partner Name'}, {'RSDL_ST_CDE', 'Residential State Code'}, {'SALE_HIER_DIM_SK', 'Sales Hierarchy Dimension Surrogate Key'}, {'SALE_HIER_ID', 'Sales Hierarchy Identifier'}, {'WRTG_AGT_VRSN_NBR', 'Writing Agent Version Number'}, {'MDDL_NM', 'Employee Middle Name'}, {'CAL_DAY_DT', 'Calendar Date'}, {'CAL_MTH_END_DT', 'Calendar Month End Date'}, {'CAL_MTH_STRT_DT', 'Calendar Month Start Date'}, {'DT_SK', 'Date Surrogate Key'}, {'CURR_ROW_IND', 'Current Row Indicator Sales Hierarchy'}, {'CURR_ROW_IND2', 'Agent Current Row Indicator'}, {'MEMBER_AGE_GROUP', 'Financial Customer Age Group'}, {'DTRB_PERF_RPT_WK_END_DT', 'Distribution Performance Reporting Week End Date'}, {'DTRB_PERF_RPT_WK_NBR', 'Distribution Performance Reporting Week Number'}, {'DTRB_PERF_RPT_YR_NBR', 'Distribution Performance Reporting Year Number'}, {'DTRB_PERF_RPT_YR_WK_NBR', 'Distribution Performance Reporting Year Week Number'}}),    #'Removed Columns' = Table.RemoveColumns(#'Renamed Columns',{    'CUST_BRTH_DT', 'CAL_MTH_NM', 'CAL_QTR_NM', 'CAL_WK_NM', 'CAL_YR_QTR_NBR'}),    #'Renamed Columns1' = Table.RenameColumns(#'Removed Columns',{{'Organization Department Code', 'TAG'}, {'Organization Zone Code', 'Market'}, {'Employee Identifier', 'TS ID'}}),    #'Removed Columns1' = Table.RemoveColumns(#'Renamed Columns1',{'Contract Version Number', 'Writing Agent Version Number', 'Financial Customer Age', 'Age Class Code', 'Age Class Description', 'Member Type Code', 'Residential State Code', 'Level 5 Product Line Of Business Subgroup Code', 'Level 4 Product Line Of Business Group Code', 'Level 3 Product Line Of Business Code', 'Level 2 Product Character Code', 'Level 2 Product Character Description', 'Financial Customer Point Reason Code', 'Financial Customer Point Relationship Code', 'Financial Customer Age Group', 'Member Age', 'Organization Zone Description', 'Organization Division Code'}),    Custom1 = #'Removed Columns1',    #'Filtered Rows' = Table.SelectRows(Custom1, each ([TAG] = '0115' or [TAG] = '0190' or [TAG] = '0283' or [TAG] = '0291' or [TAG] = '0361' or [TAG] = '0384' or [TAG] = '0435' or [TAG] = '0525') and ([Financial Customer Point Value] \u003c\u003e 0)),    Custom2 = #'Filtered Rows',    #'Trimmed Text' = Table.TransformColumns(Table.TransformColumnTypes(Custom2, {{'Market', type text}}, 'en-US'),{{'Market', Text.Trim, type text}}),    #'Inserted Last Characters' = Table.AddColumn(#'Trimmed Text', 'Market 2-digit', each Text.End([Market],2)),    #'Exp Adv Markets' = Table.AddColumn(#'Inserted Last Characters', 'Experienced Advisor Markets', each if [#'Market 2-digit'] = '01' then '01' else if [#'Market 2-digit'] = '59' then 'PMC (59)' else if [#'Market 2-digit'] = '69' then 'GPA (69)' else if [#'Market 2-digit'] = '79' then 'GPD (79)' else if [#'Market 2-digit'] = '89' then 'PPC (89)' else if Text.StartsWith([#'Market 2-digit'], '9') then 'NPG (9X)' else 'All Other Markets'),    #'Exp Adv Mkt Sort' = Table.AddColumn(#'Exp Adv Markets', 'Market Sort', each if [Experienced Advisor Markets] = '01' then 1 else if [Experienced Advisor Markets] = 'PMC (59)' then 2 else if [Experienced Advisor Markets] = 'GPA (69)' then 3 else if [Experienced Advisor Markets] = 'GPD (79)' then 4 else if [Experienced Advisor Markets] = 'PPC (89)' then 5 else if [Experienced Advisor Markets] = 'NPG (9X)' then 6 else 7),    #'PG COE Markets' = Table.AddColumn(#'Exp Adv Mkt Sort', 'PG COE Markets', each if [#'Market 2-digit'] = '59' then 'PG COE Engaged Markets (59,69,79)' else if [#'Market 2-digit'] = '69' then 'PG COE Engaged Markets (59,69,79)' else if [#'Market 2-digit'] = '79' then 'PG COE Engaged Markets (59,69,79)' else if Text.StartsWith([#'Market 2-digit'], '9') then 'NPG Markets (9X)' else 'All Other Markets'),    #'PG COE Mkt Sort' = Table.AddColumn(#'PG COE Markets', 'PG COE Mkt Sort', each if [PG COE Markets] = 'PG COE Engaged Markets (59,69,79)' then 2 else if [PG COE Markets] = 'NPG Markets (9X)' then 3 else 1),    #'PG COE Subgroup Mkts' = Table.AddColumn(#'PG COE Mkt Sort', 'PG COE Subgroup Markets', each if [#'Market 2-digit'] = '59' then 'Market 59' else if [#'Market 2-digit'] = '69' then 'Markets\u0027 69 \u0026 79' else if [#'Market 2-digit'] = '79' then 'Markets\u0027 69 \u0026 79' else if Text.StartsWith([#'Market 2-digit'], '9') then 'NPG Markets (9X)' else 'All Other Markets'),    #'Inserted First Characters' = Table.AddColumn(#'PG COE Subgroup Mkts', 'First Characters', each Text.Start([Market], 7), type text),    #'Renamed Columns2' = Table.RenameColumns(#'Inserted First Characters',{{'First Characters', 'MVP'}})in    #'Renamed Columns2'"}]},{"name":"ANBP_OTHERREV_SD","isHidden":false,"description":"ANBP and Other Rev Data for the two categories","storageMode":"Import","columns":[{"name":"TAG","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RALN_MKT_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"COMP_PYEE_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CalYr","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CalWk","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"max_cal_dt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Value","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Mapping.Product Roll Up","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_Name.TAG","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ANBP_OtherRev","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG_MVP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Experienced Advisor Markets","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market Sort","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PG COE Markets","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PG COE Markets Sort","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PG COE Subgroup Markets","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SubGroup PG COE Markets Sort","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ANBP_WID Year","dataType":"String","isHidden":false,"expression":"CONCATENATE(ANBP_OTHERREV_SD[ANBP_OtherRev],ANBP_OTHERREV_SD[CalYr])","columnType":"Calculated"}],"measures":[],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////VSSHR//SHARED//Public//DI and BI//Distribution Dashboard//ANBP_OtherRev_SD.csv'),[Delimiter=',', Columns=12, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'CalYr', Int64.Type}, {'CalWk', Int64.Type}, {'max_cal_dt', type date}, {'Value', type number}}),    #'Append WID' = Table.Combine({#'Changed Type', WID_Snowflake}),    #'Remove WID Current Week' = Table.SelectRows(#'Append WID', each [Current Week Indicator] \u003c\u003e 'Current Week WID'),    #'Removed WID Indicator Column' = Table.RemoveColumns(#'Remove WID Current Week',{'Current Week Indicator'}),    #'Merged Queries' = Table.NestedJoin(#'Removed WID Indicator Column', {'Product'}, Mapping, {'Product'}, 'Mapping', JoinKind.LeftOuter),    #'Expanded Mapping' = Table.ExpandTableColumn(#'Merged Queries', 'Mapping', {'Product Roll Up'}, {'Mapping.Product Roll Up'}),    #'Merged Queries1' = Table.NestedJoin(#'Expanded Mapping', {'RALN_RFO_CDE'}, RFO_Name, {'RFO_CODE'}, 'RFO_Name', JoinKind.LeftOuter),    #'Expanded RFO_Name' = Table.ExpandTableColumn(#'Merged Queries1', 'RFO_Name', {'TAG'}, {'RFO_Name.TAG'}),    #'Group Exp Adv Markets' = Table.AddColumn(#'Expanded RFO_Name', 'Experienced Advisor Markets', each if [Market] = '01' then '01' else if [Market] = '59' then 'PMC (59)' else if [Market] = '69' then 'GPA (69)' else if [Market] = '79' then 'GPD (79)' else if [Market] = '89' then 'PPC (89)' else if Text.StartsWith([Market], '9') then 'NPG (9X)' else 'All Other Markets'),    #'Exp Adv Markets Sort' = Table.AddColumn(#'Group Exp Adv Markets', 'Market Sort', each if [Experienced Advisor Markets] = '01' then 1 else if [Experienced Advisor Markets] = 'PMC (59)' then 2 else if [Experienced Advisor Markets] = 'GPA (69)' then 3 else if [Experienced Advisor Markets] = 'GPD (79)' then 4 else if [Experienced Advisor Markets] = 'PPC (89)' then 5 else if [Experienced Advisor Markets] = 'NPG (9X)' then 6 else 7),    #'Group PG COE Markets' = Table.AddColumn(#'Exp Adv Markets Sort', 'PG COE Markets', each if [Market] = '59' then 'PG COE Engaged Markets (59,69,79)' else if [Market] = '69' then 'PG COE Engaged Markets (59,69,79)' else if [Market] = '79' then 'PG COE Engaged Markets (59,69,79)' else if Text.StartsWith([Market], '9') then 'NPG Markets (9X)' else 'All Other Markets'),    #'PG COE Markets Sort' = Table.AddColumn(#'Group PG COE Markets', 'PG COE Markets Sort', each if [PG COE Markets] = 'PG COE Engaged Markets (59,69,79)' then 2 else if [PG COE Markets] = 'NPG Markets (9X)' then 3 else 1),    #'SubGroup PG COE Markets' = Table.AddColumn(#'PG COE Markets Sort', 'PG COE Subgroup Markets', each if [Market] = '59' then 'Market 59' else if [Market] = '69' then 'Markets\u0027 69 \u0026 79' else if [Market] = '79' then 'Markets\u0027 69 \u0026 79' else if Text.StartsWith([Market], '9') then 'NPG Markets (9X)' else 'All Other Markets'),    #'Subgroup Markets Sort' = Table.AddColumn(#'SubGroup PG COE Markets', 'SubGroup PG COE Markets Sort', each if [PG COE Subgroup Markets] = 'Market 59' then 1 else if [PG COE Subgroup Markets] = 'Markets\u0027 69 \u0026 79' then 2 else if [PG COE Subgroup Markets] = 'NPG Markets (9X)' then 3 else 4),    #'Remove OtherRev' = Table.SelectRows(#'Subgroup Markets Sort', each [ANBP_OtherRev] \u003c\u003e 'OtherRev'),    #'Filtered Rows' = Table.SelectRows(#'Remove OtherRev', each ([RALN_RFO_CDE] \u003c\u003e '0001' and [RALN_RFO_CDE] \u003c\u003e '0383'and [RALN_RFO_CDE] \u003c\u003e '0716')),    #'Renamed Columns' = Table.RenameColumns(#'Filtered Rows',{{'RALN_RFO_CDE', 'TAG'}}),    #'Capture TAG-MVP' = Table.AddColumn(#'Renamed Columns', 'First Characters', each Text.Start([RALN_MKT_CDE], 7), type text),    #'Renamed Columns2' = Table.RenameColumns(#'Capture TAG-MVP',{{'First Characters', 'TAG_MVP'}})in    #'Renamed Columns2'"}]},{"name":"Mapping","isHidden":false,"storageMode":"Import","columns":[{"name":"Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Product Roll Up","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Group","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Type","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//SHARED//PUBLIC//DI and BI////Sales Dashboard//RFO_2020_Product_Goals Product Mapping.xlsx'), null, true),    Mapping_Sheet = Source{[Item='Mapping',Kind='Sheet']}[Data],    #'Changed Type' = Table.TransformColumnTypes(Mapping_Sheet,{{'Column1', type text}, {'Column2', type text}}),    #'Promoted Headers' = Table.PromoteHeaders(#'Changed Type', [PromoteAllScalars=true]),    #'Changed Type1' = Table.TransformColumnTypes(#'Promoted Headers',{{'Product', type text}, {'Product Roll Up', type text}})in    #'Changed Type1'"}]},{"name":"RFO_Name","isHidden":false,"storageMode":"Import","columns":[{"name":"RFO_CODE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Advisor Group","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Advisor Group.2","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Sql.Database('dbedwdwprd', 'EnterpriseDataMart', [Query='SELECT DISTINCT#(lf)       [Department Identifier] RFO_CODE#(lf)      ,[Department Name] RFO_NM#(lf)      ,concat(trim([Department Identifier]),\u0027-\u0027,[Department Name]) as NM#(lf)#(lf) #(lf)#(lf)  FROM [EnterpriseDataMart].[DM_01].[Organization Dimension] #(lf)  where [Department Identifier] in (\u00270283\u0027, \u00270365\u0027, \u00270435\u0027, \u00270496\u0027, \u00270810\u0027,\u00270115\u0027, \u00270165\u0027, \u00270190\u0027, \u00270240\u0027, #(lf)                \u00270361\u0027, \u00270384\u0027,\u00270291\u0027, \u00270410\u0027, \u00270475\u0027, \u00270525\u0027, \u00270529\u0027,\u00270001\u0027,\u00270383\u0027)#(lf)        and [Current Row Indicator] = \u0027Y\u0027#(lf)        and [Effective Begin Date] \u003e \u00271/1/2019\u0027']),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'RFO_CODE', type text}, {'RFO_NM', type text}, {'NM', type text}}),    #'Renamed Columns' = Table.RenameColumns(#'Changed Type',{{'NM', 'TAG'}}),    #'Filtered Rows' = Table.SelectRows(#'Renamed Columns', each ([RFO_CODE] = '0115' or [RFO_CODE] = '0190' or [RFO_CODE] = '0283' or [RFO_CODE] = '0291' or [RFO_CODE] = '0361' or [RFO_CODE] = '0384' or [RFO_CODE] = '0435' or [RFO_CODE] = '0525')),    #'Filtered Rows1' = Table.SelectRows(#'Filtered Rows', each not Text.Contains([RFO_NM], 'Region')),    #'Renamed Columns1' = Table.RenameColumns(#'Filtered Rows1',{{'TAG', 'Advisor Group'}}),    #'Split Column by Position' = Table.SplitColumn(#'Renamed Columns1', 'Advisor Group', Splitter.SplitTextByPositions({0, 14}, true), {'Advisor Group.1', 'Advisor Group.2'}),    #'Changed Type1' = Table.TransformColumnTypes(#'Split Column by Position',{{'Advisor Group.1', type text}, {'Advisor Group.2', type text}}),    #'Renamed Columns2' = Table.RenameColumns(#'Changed Type1',{{'Advisor Group.1', 'Advisor Group'}})in    #'Renamed Columns2'"}]},{"name":"DTRB_PERF_DATES","isHidden":false,"storageMode":"Import","columns":[{"name":"DT_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CAL_DAY_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_END_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_WK_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"SRC_SYS_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CRET_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"LST_UPDT_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"CRET_USER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LST_UPDT_USER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_DAY_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_MTH_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_QTR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"YTD Flag two Sundays","dataType":"String","isHidden":false,"expression":"if(and(DTRB_PERF_DATES[CAL_DAY_DT] \u003c= DTRB_PERF_DATES[Two Sundays Ago], DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR] = DTRB_PERF_DATES[Current Year]), True, False)","columnType":"Calculated"},{"name":"Two Sundays Ago","dataType":"String","isHidden":false,"expression":"LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT], today() - 14)","columnType":"Calculated"},{"name":"Current Year Flag","dataType":"String","isHidden":false,"expression":"if(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR] = DTRB_PERF_DATES[Current Year], True, False)","columnType":"Calculated"},{"name":"Prior Year","dataType":"String","isHidden":false,"expression":"DTRB_PERF_DATES[Current Year] - 1","columnType":"Calculated"},{"name":"Prior Year Flag","dataType":"String","isHidden":false,"expression":"if(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR] = DTRB_PERF_DATES[Prior Year], True, False)","columnType":"Calculated"},{"name":"Prior Year 2 Flag","dataType":"String","isHidden":false,"expression":"if(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR] = DTRB_PERF_DATES[Prior Year 2], True, False)","columnType":"Calculated"},{"name":"PYTD Flag","dataType":"String","isHidden":false,"expression":"var prevweeknum = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[CAL_DAY_DT],max(DTRB_PERF_DATES[Prior Sunday]))return if(and(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] \u003c= prevweeknum, DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='PREVIOUS'), True, False)","columnType":"Calculated"},{"name":"END_OF_WK_DATE_MAX","dataType":"String","isHidden":false,"expression":"calculate(max(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT]), ALLEXCEPT(DTRB_PERF_DATES,DTRB_PERF_DATES[perf_yr_wk]))","columnType":"Calculated"},{"name":"perf_yr_wk","dataType":"String","isHidden":false,"expression":"DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR] \u0026 '-' \u0026 DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR]","columnType":"Calculated"},{"name":"Prior Sunday","dataType":"String","isHidden":false,"expression":"LOOKUPVALUE(DTRB_PERF_DATES[END_OF_WK_DATE_MAX], DTRB_PERF_DATES[CAL_DAY_DT], LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT'))","columnType":"Calculated"}],"measures":[{"name":"Current Year","expression":"year(today()-5)","isHidden":false},{"name":"Prior Year 2","expression":"DTRB_PERF_DATES[Current Year] - 2","isHidden":false}],"source":[{"expression":"let    Source = DB2.Database('podwh021:50000', 'podwh021', [HierarchicalNavigation=true, Implementation='Microsoft']),    COMMON = Source{[Schema='COMMON']}[Data],    DTRB_PERF_DATES1 = COMMON{[Name='DTRB_PERF_DATES']}[Data]in    DTRB_PERF_DATES1"}]},{"name":"WMFC_CD","isHidden":false,"storageMode":"Import","columns":[{"name":"Year","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Zone_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_MKT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Category","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Perfweek","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"MFC","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"WCFC","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Join_Value","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Capacity Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Experienced Advisor Markets","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market Sort","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PG COE Markets","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PG COE Subgroup Markets","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PG COE Markets Sort","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Markets Filter","expression":"IF(    MAX(\u0027Market Parameter - Capacity\u0027[Capacity Market View])='Experienced Advisor Markets'    \u0026\u0026 MAX(WMFC_CD[Experienced Advisor Markets]) IN {'PMC (59)','GPA (69)','GPD (79)'},    1,    0)","isHidden":false},{"name":"Markets Filter v2","expression":"IF(    MAX(\u0027Market Parameter - Capacity\u0027[Capacity Market View])='Experienced Advisor Markets'    \u0026\u0026 MAX(WMFC_CD[PG COE Markets]) = {'PG COE Engaged Markets (59,69,79)'},    1,    0)","isHidden":false},{"name":"Markets Filter v3","expression":"IF(    MAX(\u0027Market Parameter - Capacity\u0027[Capacity Market View])='Experienced Advisor Markets'    \u0026\u0026 MAX(WMFC_CD[Market]) IN {'59','69','79'},    1,    0)","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//SHARED//Public//DI and BI//Capacity Dashboard//WMFC_CD.xlsx'), null, true),    WMFC_CD_Sheet = Source{[Item='WMFC_CD',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(WMFC_CD_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Perfyear', Int64.Type}, {'RFO', Int64.Type}, {'Zone_ID', type text}, {'RFO_MKT', type text}, {'Category', type text}, {'Perfweek', Int64.Type}, {'MFC', Int64.Type}, {'WMFC', type number}, {'Join_Value', type text}}),    #'Categorize Capacity Type' = Table.AddColumn(#'Changed Type', 'Capacity Type', each if [Category] = 'OP-Licensed' then '5-Office Professionals' else if [Category] = 'OP-Unlicensed' then '5-Office Professionals' else if [Category] = 'FR' then '1-Financial Advisors' else if [Category] = 'FR-FC' then '1-Financial Advisors' else if [Category] = 'FR-WA' then '1-Financial Advisors' else if [Category] = 'Associate Representative' then '2-Associate Representatives' else if [Category] = 'Associate-Insurance' then '3-Associates' else if [Category] = 'Associate-Regular' then '3-Associates' else if [Category] = 'Associate-Securities' then '3-Associates' else if [Category] = 'Support Associate' then '3-Associates' else if [Category] = 'Insurance Producer' then '4-Insurance Producers' else if [Category] = 'Field Leader' then '6-Field Leaders' else 'Other'),    #'Pull out TAG' = Table.AddColumn(#'Categorize Capacity Type', 'TAG', each Text.Start ([RFO_MKT],4)),    #'Pull out MVP' = Table.AddColumn(#'Pull out TAG', 'MVP', each Text.Start ([RFO_MKT],7)),    #'Pull out Market' = Table.AddColumn(#'Pull out MVP', 'Market', each Text.End([Zone_ID],2)),    #'Label ExpAdv Markets' = Table.AddColumn(#'Pull out Market', 'Experienced Advisor Markets', each if [Market] = '01' then '01' else if [Market] = '59' then 'PMC (59)' else if [Market] = '69' then 'GPA (69)' else if [Market] = '79' then 'GPD (79)' else if [Market] = '89' then 'PPC (89)' else if Text.StartsWith([Market], '9') then 'NPG (9X)' else 'All Other Markets'),    #'Exp Adv Market Sort' = Table.AddColumn(#'Label ExpAdv Markets', 'Market Sort', each if [Experienced Advisor Markets] = '01' then 1 else if [Experienced Advisor Markets] = 'PMC (59)' then 2 else if [Experienced Advisor Markets] = 'GPA (69)' then 3 else if [Experienced Advisor Markets] = 'GPD (79)' then 4 else if [Experienced Advisor Markets] = 'PPC (89)' then 5 else if [Experienced Advisor Markets] = 'NPG (9X)' then 6 else 7),    #'PG COE Markets' = Table.AddColumn(#'Exp Adv Market Sort', 'PG COE Markets', each if [Market] = '59' then 'PG COE Engaged Markets (59,69,79)' else if [Market] = '69' then 'PG COE Engaged Markets (59,69,79)' else if [Market] = '79' then 'PG COE Engaged Markets (59,69,79)' else if Text.StartsWith([Market], '9') then 'NPG Markets (9X)' else 'All Other Markets'),    #'Added Conditional Column' = Table.AddColumn(#'PG COE Markets', 'PG COE Markets Sort', each if [PG COE Markets] = 'PG COE Engaged Markets (59,69,79)' then 2 else if [PG COE Markets] = 'NPG Markets (9X)' then 3 else 1),    #'PG COE Subgroup Markets' = Table.AddColumn(#'Added Conditional Column', 'PG COE Subgroup Markets', each if [Market] = '59' then 'Market 59' else if [Market] = '69' then 'Markets\u0027 69 \u0026 79' else if [Market] = '79' then 'Markets\u0027 69 \u0026 79' else if Text.StartsWith([Market], '9') then 'NPG Markets (9X)' else 'All Other Markets'),    #'Renamed Columns' = Table.RenameColumns(#'PG COE Subgroup Markets',{{'WMFC', 'WCFC'}}),    #'Renamed Columns1' = Table.RenameColumns(#'Renamed Columns',{{'Perfyear', 'Year'}}),    #'WCFC greater than 0 Flag' = Table.AddColumn(#'Renamed Columns1', 'WCFC Flag', each if [WCFC] \u003e 0 then 1 else if [WCFC] = null then 0 else 0),    #'Removed Columns' = Table.RemoveColumns(#'WCFC greater than 0 Flag',{'WCFC Flag'})in    #'Removed Columns'"}]},{"name":"RFO_Mkt_Wk","isHidden":false,"storageMode":"Import","columns":[{"name":"Region","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Division","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOIN VALUE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"ZONE_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_Mkt","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Year","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Week","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Current Wk","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"MVP Filter","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market Filter","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//SHARED//Public//DI and BI//Capacity Dashboard//RFO-MKT-WK.xlsx'), null, true),    Sheet1_Sheet = Source{[Item='Sheet1',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Region', type text}, {'Division', type text}, {'JOIN VALUE', type text}, {'RFO_ID', Int64.Type}, {'ZONE_ID', type text}, {'RFO_Mkt', type text}, {'Year', Int64.Type}, {'Week', Int64.Type}, {'Current Wk', Int64.Type}, {'MVP Filter', type text}, {'Market Filter', type text}})in    #'Changed Type'"}]},{"name":"MVP Leaders","isHidden":false,"storageMode":"Import","columns":[{"name":"RFO_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_DEPT_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_STS_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TRMN_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MARKET_LEADERS","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = DB2.Database('podwh021:50000', 'podwh021', [Implementation='Microsoft', Query='SELECT DISTINCT#(lf)t1.ORZN_DEPT_CDE as RFO_CDE,#(lf)--t1.ORZN_ZONE_CDE as RFO_ZONE_NM,#(lf)t1.ORZN_SUB_DEPT_CDE as MVP_ID,#(lf)--(SUBSTRING(t1.ORZN_ZONE_CDE,6,5)) AS Market_ID,#(lf)t3.ORZN_DEPT_DSCR,#(lf)t3.EMP_ID,#(lf)t3.EMP_STS_TYP_CDE,#(lf)t3.trmn_dt,#(lf)t3.JOB_TYP_CDE,#(lf)t3.JOB_TYP_DSCR,#(lf)t3.EMP_NM,#(lf)case when t3.emp_nm is null then \u0027Vacant\u0027 Else t3.emp_nm end as market_leaders#(lf)FROM SEMANTIC.SALES_HIERARCHY_DIMENSION t1#(lf)left join#(lf)(#(lf)SELECT DISTINCT#(lf)T1.SALE_HIER_ID,#(lf)t1.orzn_zone_cde,#(lf)t1.orzn_dept_dscr,#(lf)t1.orzn_sub_dept_cde,#(lf)t2.orzn_dept_cde,#(lf)t2.EMP_ID,#(lf)t2.EMP_STS_TYP_CDE,#(lf)t2.trmn_dt,#(lf)t2.JOB_TYP_CDE,#(lf)t2.JOB_TYP_DSCR,#(lf)t2.EMP_NM#(lf)FROM#(lf)SEMANTIC.SALES_HIERARCHY_DIMENSION t1#(lf)left JOIN HUMAN_RESOURCES.CNF_EMP_DIM_DTL_CURR_CFDL t2 ON T1.SALE_HIER_ID = T2.emp_id#(lf)where t1.CURR_ROW_IND = \u0027Y\u0027#(lf)and t2.emp_sts_typ_cde in (\u0027A\u0027)#(lf)and t1.EFF_END_TMSP is null#(lf)AND T2.CURR_ROW_IND = \u0027Y\u0027#(lf)and t1.EFF_END_TMSP is null#(lf)and t2.JOB_TYP_CDE IN (\u0027001001\u0027)#(lf))#(lf)t3#(lf)on t1.orzn_sub_dept_cde = t3.orzn_sub_dept_cde#(lf)where t1.CURR_ROW_IND = \u0027Y\u0027#(lf)and t1.eff_end_tmsp is null#(lf)--and t1.rfo_zone_sts_cde in (\u0027A\u0027)#(lf)--and t3.EMP_STS_TYP_CDE = \u0027A\u0027#(lf)--and substring(t1.orzn_zone_cde,6,2) \u003c\u003e \u002700\u0027#(lf)and t1.orzn_zone_cde \u003c\u003e \u0027UKWN\u0027#(lf)order BY t1.ORZN_SUB_DEPT_CDE;', HierarchicalNavigation=true]),    #'Filtered Rows' = Table.SelectRows(Source, each ([RFO_CDE] = '0115      ' or [RFO_CDE] = '0190      ' or [RFO_CDE] = '0283      ' or [RFO_CDE] = '0291      ' or [RFO_CDE] = '0361      ' or [RFO_CDE] = '0384      ' or [RFO_CDE] = '0435      ' or [RFO_CDE] = '0525      '))in    #'Filtered Rows'"}]},{"name":"Market Leaders","isHidden":false,"storageMode":"Import","columns":[{"name":"RFO_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_ZONE_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MARKET_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_DEPT_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_STS_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TRMN_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MARKET_LEADERS","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = DB2.Database('podwh021:50000', 'podwh021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT DISTINCT#(lf)t1.ORZN_DEPT_CDE as RFO_CDE,#(lf)t1.ORZN_ZONE_CDE as RFO_ZONE_NM,#(lf)(SUBSTRING(t1.ORZN_ZONE_CDE,6,5)) AS Market_ID,#(lf)t3.ORZN_DEPT_DSCR,#(lf)t3.EMP_ID,#(lf)t3.EMP_STS_TYP_CDE,#(lf)t3.trmn_dt,#(lf)t3.JOB_TYP_CDE,#(lf)t3.JOB_TYP_DSCR,#(lf)t3.EMP_NM,#(lf)case when t3.emp_nm is null then \u0027Vacant\u0027 Else t3.emp_nm end as market_leaderS#(lf)FROM SEMANTIC.SALES_HIERARCHY_DIMENSION t1#(lf)left join#(lf)(#(lf)SELECT DISTINCT#(lf)T1.SALE_HIER_ID,#(lf)t1.orzn_zone_cde,#(lf)t1.orzn_dept_dscr,#(lf)t2.orzn_dept_cde,#(lf)t2.EMP_ID,#(lf)t2.EMP_STS_TYP_CDE,#(lf)t2.trmn_dt,#(lf)t2.JOB_TYP_CDE,#(lf)t2.JOB_TYP_DSCR,#(lf)t2.EMP_NM#(lf)FROM#(lf)SEMANTIC.SALES_HIERARCHY_DIMENSION t1#(lf)left JOIN HUMAN_RESOURCES.CNF_EMP_DIM_DTL_CURR_CFDL t2 ON T1.SALE_HIER_ID = T2.emp_id#(lf)where t1.CURR_ROW_IND = \u0027Y\u0027#(lf)and t2.emp_sts_typ_cde in (\u0027A\u0027)#(lf)and t1.EFF_END_TMSP is null#(lf)AND T2.CURR_ROW_IND = \u0027Y\u0027#(lf)and t1.EFF_END_TMSP is null#(lf)and t2.JOB_TYP_CDE IN (\u0027001002\u0027, \u0027001003\u0027,/* \u0027001004\u0027,*/ \u0027001007\u0027, \u0027003500\u0027)#(lf)AND T2.EMP_ID NOT IN(\u0027TS62904\u0027,\u0027TS67022\u0027)#(lf))#(lf)t3#(lf)on t1.orzn_zone_cde = t3.orzn_zone_cde#(lf)where t1.CURR_ROW_IND = \u0027Y\u0027#(lf)and t1.eff_end_tmsp is null#(lf)--and t1.rfo_zone_sts_cde in (\u0027A\u0027)#(lf)and substring(t1.orzn_zone_cde,6,2) \u003c\u003e \u002700\u0027#(lf)and t1.orzn_dept_cde \u003c\u003e \u0027UKWN\u0027#(lf)order BY t1.ORZN_ZONE_CDE;'])in    Source"}]},{"name":"RFO Zone","isHidden":false,"storageMode":"Import","columns":[{"name":"Organization Zone Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Zone","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Sql.Database('dbedwdwprd', 'EnterpriseDataMart', [Query='SELECT DISTINCT #(lf)#(tab)SHD.[Organization Zone Code],#(lf) SHD.[Organization Sub Department Code] as MVP,#(lf)#(tab)(LEFT(SHD.[Organization Zone Code],4)) as RFO,#(lf)#(tab)(SUBSTRING(SHD.[Organization Zone Code],6,2)) as Zone#(lf)from EnterpriseDataMart.[DM_01].[Sale Hierarchy Dimension] SHD#(lf)where SHD.[Organization Department Code] in (\u00270115\u0027,\u00270190\u0027,\u00270283\u0027,\u00270291\u0027,\u00270361\u0027,\u00270384\u0027,\u00270435\u0027,\u00270525\u0027)#(lf)order by SHD.[Organization Zone Code]'])in    Source"}]},{"name":"WID_Snowflake","isHidden":false,"storageMode":"Import","columns":[{"name":"RALN_MKT_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RALN_RFO_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CalYr","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"CalWk","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"max_cal_dt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"COMP_PYEE_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ANBP_OtherRev","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Value","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Current Week Indicator","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'SELECT #(lf)#(lf)#(tab)CASE WHEN B.''Total Sales Reporting Product Sub-Group Description''= \u0027TAN Managed Accounts\u0027 THEN \u00270716-01-00\u0027 ELSE A.RALN_MKT_CDE END AS RALN_MKT_CDE,#(lf)#(tab)CASE WHEN B.''Total Sales Reporting Product Sub-Group Description''= \u0027TAN Managed Accounts\u0027 THEN \u00270716\u0027 ELSE A.RALN_RFO_CDE END AS RALN_RFO_CDE,#(lf)    A.MVP,#(lf)    A.Market,#(lf)    #(lf)    C.''Distribution Performance Reporting Year Number'' AS CalYr,#(lf)#(tab)C.''Distribution Performance Reporting Year Week Number'' AS CalWk,#(lf)    c.max_cal_dt,#(lf)      B.''Credited Advisor Identifier'' AS COMP_PYEE_ID,#(lf)#(tab)UPPER(B.''Total Sales Reporting Product Sub-Group Description'') AS Product,#(lf)    \u0027WID\u0027 AS ANBP_OtherRev,#(lf)   SUM( B.''WID'') AS Value,#(lf)   D.''Employee Name''#(lf)#(lf)FROM#(lf)#(lf)#(lf)  (SELECT #(lf)#(lf)''Sales Transaction Process Date'',#(lf)''Credited Advisor Identifier'',#(lf)#(tab)''Distribution Channel Code'',#(lf)#(tab)''Distribution Channel Description'',#(lf)#(tab)''Total Sales Reporting Product Type'',#(lf)#(tab)''Total Sales Reporting Product Group Description'',#(lf)#(tab)''Total Sales Reporting Product Sub-Group Description'',#(lf)SUM(''Weighted Investment Deposit Amount'') AS WID#(lf)#(lf)FROM  ENTERPRISE_EDW.PRESENTATION_01.''WID Transaction Confidential''#(lf)#(lf)WHERE YEAR(''Sales Transaction Process Date'') \u003e= YEAR(GETDATE())-2#(lf)   #(lf)   AND ''Distribution Channel Code'' IN (\u0027CAREER\u0027, \u0027OTH\u0027, \u0027TAN\u0027,\u0027TFGT\u0027,\u0027TRUST\u0027)#(lf)#(lf)GROUP BY #(lf) #(lf)    ''Sales Transaction Process Date'',#(lf)    ''Credited Advisor Identifier'',#(lf)#(tab)''Distribution Channel Code'',#(lf)#(tab)''Distribution Channel Description'',#(lf)#(tab)''Total Sales Reporting Product Type'',#(lf)#(tab)''Total Sales Reporting Product Group Description'',#(lf)#(tab)''Total Sales Reporting Product Sub-Group Description'')#(lf)#(lf) AS B #(lf)#(lf)LEFT JOIN#(lf)#(lf)//Select Current and Transfer rows from Sales Hierarchy--- START#(lf)#(lf)(SELECT DISTINCT#(lf)#(lf)#(tab)''Sales Hierarchy Identifier'',#(lf)#(tab)''Effective Begin Date'' AS BeginDate,#(lf)#(tab)''Effective End Date''-1 AS EndDate,#(lf)    ''Organization Zone Code'' AS RALN_MKT_CDE,#(lf)#(tab)''Organization Department Code'' AS RALN_RFO_CDE,#(lf)    (case when length(''Organization Zone Code'') = 7 then \u002700\u0027#(lf)             else substr(''Organization Zone Code'',6,2)#(lf)           end) as MVP,#(lf)          (case when length(''Organization Zone Code'') = 7 then substr(''Organization Zone Code'',6,2) #(lf)             else substr(''Organization Zone Code'',9,2)#(lf)           end) as Market#(lf)           #(lf)           #(lf)FROM ENTERPRISE_EDW.PRESENTATION_01.''Sale Hierarchy Dimension''#(lf)    WHERE #(lf)#(lf)        ''Current Row Indicator''=\u0027Y\u0027#(lf)        AND ''Effective Begin Date''\u003c=(''Effective End Date''-1)) AS A#(lf)        #(lf)//Select Current and Transfer rows from Sales Hierarchy--- END#(lf)#(lf)ON (A.''Sales Hierarchy Identifier''=B.''Credited Advisor Identifier'' AND B.''Sales Transaction Process Date'' BETWEEN A.BeginDate  AND A.EndDate)#(lf)#(lf)#(lf)LEFT JOIN (#(lf)  #(lf)//Determine Max Cal Day of the week--- START#(lf)#(lf)SELECT#(lf)  #(lf)    T1.''Calendar Day Date'',#(lf)    T1.''Distribution Performance Reporting Year Number'',#(lf)#(tab)T1.''Distribution Performance Reporting Year Week Number'',#(lf)    T2.max_cal_dt#(lf)  #(lf)  FROM ENTERPRISE_EDW.PRESENTATION_01.''Distribution Performance Dates Dimension'' AS T1#(lf)  #(lf)  INNER JOIN#(lf)  #(lf)  (SELECT   #(lf)    ''Distribution Performance Reporting Year Number'',#(lf)#(tab)''Distribution Performance Reporting Year Week Number'',#(lf)    MAX(''Calendar Day Date'') AS max_cal_dt#(lf)#(lf)    FROM ENTERPRISE_EDW.PRESENTATION_01.''Distribution Performance Dates Dimension''#(lf)#(lf)    GROUP BY     #(lf)        ''Distribution Performance Reporting Year Number'',#(lf)#(tab)    ''Distribution Performance Reporting Year Week Number'') AS T2 ON (T1.''Distribution Performance Reporting Year Number''=T2.''Distribution Performance Reporting Year Number'' AND T1.''Distribution Performance Reporting Year Week Number''=T2.''Distribution Performance Reporting Year Week Number'')#(lf) #(lf)  ) AS C #(lf)  #(lf)//Determine Max Cal Day of the week--- END#(lf)    #(lf)    ON (B.''Sales Transaction Process Date''=C.''Calendar Day Date'')#(lf)    #(lf)#(lf)LEFT JOIN ENTERPRISE_EDW.PRESENTATION_01.''Workforce Dimension Detail'' AS D ON (B.''Credited Advisor Identifier''=D.''Employee Identifier'' AND D.''Current Row Indicator''=\u0027Y\u0027)#(lf)  #(lf)  GROUP BY#(lf)  #(tab)A.RALN_MKT_CDE,#(lf)#(tab)A.RALN_RFO_CDE,#(lf)    A.MVP,#(lf)    A.Market,#(lf)    C.''Distribution Performance Reporting Year Number'',#(lf)#(tab)C.''Distribution Performance Reporting Year Week Number'',#(lf)    c.max_cal_dt,#(lf)    ''Distribution Channel Code'',#(lf)#(lf)    B.''Credited Advisor Identifier'',#(lf)#(tab)B.''Total Sales Reporting Product Type'',#(lf)    B.''Total Sales Reporting Product Group Description'',#(lf)#(tab)B.''Total Sales Reporting Product Sub-Group Description'',#(lf)    D.''Employee Name''', null, [EnableFolding=true]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'CALYR', Int64.Type}, {'CALWK', Int64.Type}}),    #'Renamed Columns' = Table.RenameColumns(#'Changed Type',{{'MARKET', 'Market'}, {'CALYR', 'CalYr'}, {'CALWK', 'CalWk'}, {'MAX_CAL_DT', 'max_cal_dt'}, {'PRODUCT', 'Product'}, {'VALUE', 'Value'}, {'ANBP_OTHERREV', 'ANBP_OtherRev'}, {'Employee Name', 'EMP_NM'}}),    #'Add Current Week Indicator' = Table.AddColumn(#'Renamed Columns', 'Current Week Indicator', each if [max_cal_dt] \u003c Date.From(DateTime.LocalNow()) then 'WID' else 'Current Week WID')in    #'Add Current Week Indicator'"}]},{"name":"Market Parameter - Sales","isHidden":false,"storageMode":"Import","columns":[{"name":"Sales Market View","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"Market Parameter Fields","dataType":"String","isHidden":true,"columnType":"CalculatedTableColumn"},{"name":"Market Parameter Order","dataType":"String","isHidden":true,"columnType":"CalculatedTableColumn"}],"measures":[],"source":[{"expression":"{    ('PG COE Markets', NAMEOF(\u0027ANBP_OTHERREV_SD\u0027[PG COE Markets]), 0),    ('PG COE Subgroup Markets', NAMEOF(\u0027ANBP_OTHERREV_SD\u0027[PG COE Subgroup Markets]), 1),    ('Experienced Advisor Markets', NAMEOF(\u0027ANBP_OTHERREV_SD\u0027[Experienced Advisor Markets]), 2)}"}]},{"name":"Period Parameter Sales","isHidden":false,"storageMode":"Import","columns":[{"name":"Period Parameter","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"Period Parameter Fields","dataType":"String","isHidden":true,"columnType":"CalculatedTableColumn"},{"name":"Period Parameter Order","dataType":"String","isHidden":true,"columnType":"CalculatedTableColumn"},{"name":"Type","dataType":"String","isHidden":false,"expression":"SWITCH(TRUE(),CONTAINSSTRING(\u0027Period Parameter Sales\u0027[Period Parameter],'Cumulative'),'Cumulative','Weekly')","columnType":"Calculated"}],"measures":[],"source":[{"expression":"{    ('Total Sales CY', NAMEOF(\u0027Measure Table\u0027[Total Sales CY]), 0),    ('Total Sales CY Cumulative', NAMEOF(\u0027Measure Table\u0027[Total Sales CY Cumulative]), 1)    --('Total Sales PY', NAMEOF(\u0027Measure Table\u0027[Total Sales PY]), 2),--    --('Total Sales PY Cumulative', NAMEOF(\u0027Measure Table\u0027[Total Sales PY Cumulative]), 3),--    --('Total Sales YOY Difference', NAMEOF(\u0027Measure Table\u0027[Total Sales YOY Difference]), 2),--    --('Total Sales Cumulative YoY%', NAMEOF(\u0027Measure Table\u0027[Total Sales Cumulative YOY%]), 3)--}"}]},{"name":"PY Period Parameter Sales","isHidden":false,"storageMode":"Import","columns":[{"name":"PY Period Parameter","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"PY Period Parameter Fields","dataType":"String","isHidden":true,"columnType":"CalculatedTableColumn"},{"name":"PY Period Parameter Order","dataType":"String","isHidden":true,"columnType":"CalculatedTableColumn"},{"name":"Type","dataType":"String","isHidden":false,"expression":"SWITCH(TRUE(),CONTAINSSTRING(\u0027PY Period Parameter Sales\u0027[PY Period Parameter],'Cumulative'),'Cumulative','Weekly')","columnType":"Calculated"}],"measures":[],"source":[{"expression":"{    ('Total Sales PY', NAMEOF(\u0027Measure Table\u0027[Total Sales PY]), 0),    ('Total Sales PY Cumulative', NAMEOF(\u0027Measure Table\u0027[Total Sales PY Cumulative]), 1)}"}]},{"name":"YOY Parameter Sales","isHidden":false,"storageMode":"Import","columns":[{"name":"YOY Parameter","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"YOY Parameter Fields","dataType":"String","isHidden":true,"columnType":"CalculatedTableColumn"},{"name":"YOY Parameter Order","dataType":"String","isHidden":true,"columnType":"CalculatedTableColumn"},{"name":"Type","dataType":"String","isHidden":false,"expression":"SWITCH(TRUE(),CONTAINSSTRING(\u0027YOY Parameter Sales\u0027[YOY Parameter],'Cumulative'),'Cumulative','Weekly')","columnType":"Calculated"}],"measures":[],"source":[{"expression":"{    ('Total Sales YOY Difference', NAMEOF(\u0027Measure Table\u0027[Total Sales YOY Difference]), 0),    ('Total Sales Cumulative YOY%', NAMEOF(\u0027Measure Table\u0027[Total Sales Cumulative YOY%]), 1)}"}]},{"name":"Period Parameter New Clients","isHidden":false,"storageMode":"Import","columns":[{"name":"Period Parameter New Clients","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"Period Parameter New Clients Fields","dataType":"String","isHidden":true,"columnType":"CalculatedTableColumn"},{"name":"Period Parameter New Clients Order","dataType":"String","isHidden":true,"columnType":"CalculatedTableColumn"},{"name":"Type","dataType":"String","isHidden":false,"expression":"SWITCH(TRUE(),CONTAINSSTRING(\u0027Period Parameter New Clients\u0027[Period Parameter New Clients],'Cumulative'),'Cumulative','Weekly')","columnType":"Calculated"}],"measures":[],"source":[{"expression":"{    ('New Clients YTD', NAMEOF(\u0027Measure Table\u0027[New Clients YTD]), 0),    ('New Clients CY Cumulative', NAMEOF(\u0027Measure Table\u0027[New Clients CY Cumulative]), 1)}"}]},{"name":"PY Period Parameter New Clients","isHidden":false,"storageMode":"Import","columns":[{"name":"PY Period Parameter New Clients","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"PY Period Parameter New Clients Fields","dataType":"String","isHidden":true,"columnType":"CalculatedTableColumn"},{"name":"PY Period Parameter New Clients Order","dataType":"String","isHidden":true,"columnType":"CalculatedTableColumn"},{"name":"Type","dataType":"String","isHidden":false,"expression":"SWITCH(TRUE(),CONTAINSSTRING(\u0027PY Period Parameter New Clients\u0027[PY Period Parameter New Clients],'Cumulative'),'Cumulative','Weekly')","columnType":"Calculated"}],"measures":[],"source":[{"expression":"{    ('New Clients PY', NAMEOF(\u0027Measure Table\u0027[New Clients PY]), 0),    ('New Clients PY Cumulative', NAMEOF(\u0027Measure Table\u0027[New Clients PY Cumulative]), 1)}"}]},{"name":"YOY Parameter New Clients","isHidden":false,"storageMode":"Import","columns":[{"name":"YOY Parameter New Clients","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"YOY Parameter New Clients Fields","dataType":"String","isHidden":true,"columnType":"CalculatedTableColumn"},{"name":"YOY Parameter New Clients Order","dataType":"String","isHidden":true,"columnType":"CalculatedTableColumn"},{"name":"Type","dataType":"String","isHidden":false,"expression":"SWITCH(TRUE(),CONTAINSSTRING(\u0027YOY Parameter New Clients\u0027[YOY Parameter New Clients],'Cumulative'),'Cumulative','Weekly')","columnType":"Calculated"}],"measures":[],"source":[{"expression":"{    ('New Clients Cumulative YoY%', NAMEOF(\u0027Measure Table\u0027[New Clients Cumulative YOY%]), 1),    ('New Clients YOY Difference', NAMEOF(\u0027Measure Table\u0027[New Clients YOY Difference]), 0)}"}]},{"name":"Market Parameter - New Clients","isHidden":false,"storageMode":"Import","columns":[{"name":"New Clients Market View","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"Market Parameter Fields","dataType":"String","isHidden":true,"columnType":"CalculatedTableColumn"},{"name":"Market Parameter Order","dataType":"String","isHidden":true,"columnType":"CalculatedTableColumn"}],"measures":[],"source":[{"expression":"{    ('PG COE Markets', NAMEOF(\u0027New Clients\u0027[PG COE Markets]), 0),    ('PG COE Subgroup Markets', NAMEOF(\u0027New Clients\u0027[PG COE Subgroup Markets]), 1),    ('Experienced Advisor Markets', NAMEOF(\u0027New Clients\u0027[Experienced Advisor Markets]), 2)}"}]},{"name":"Market Parameter - Capacity","isHidden":false,"storageMode":"Import","columns":[{"name":"Capacity Market View","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"Market Parameter - Capacity Fields","dataType":"String","isHidden":true,"columnType":"CalculatedTableColumn"},{"name":"Market Parameter - Capacity Order","dataType":"String","isHidden":true,"columnType":"CalculatedTableColumn"}],"measures":[],"source":[{"expression":"{    ('PG COE Markets', NAMEOF(\u0027WMFC_CD\u0027[PG COE Markets]), 0),    ('PG COE Subgroup Markets', NAMEOF(\u0027WMFC_CD\u0027[PG COE Subgroup Markets]), 1),    ('Experienced Advisor Markets', NAMEOF(\u0027WMFC_CD\u0027[Experienced Advisor Markets]), 2)}"}]},{"name":"Experienced Advisors","isHidden":false,"storageMode":"Import","columns":[{"name":"What\u0027s New Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Alert Message","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Message_Alert_Text","expression":" var _txt1 = SELECTEDVALUE(\u0027Experienced Advisors\u0027[Alert Message]) return IF(ISBLANK(_txt1),'',_txt1)","isHidden":false},{"name":"Message_WhatsNew_Text","expression":" var _txt1 = SELECTEDVALUE(\u0027Experienced Advisors\u0027[What\u0027s New Description]) return IF(ISBLANK(_txt1),'',_txt1)","isHidden":false},{"name":"ShowHideAlert Background","expression":"IF(ISBLANK(SELECTEDVALUE(\u0027Experienced Advisors\u0027[Alert Message])),'White','White')","isHidden":false},{"name":"ShowHideAlert Border","expression":"IF(ISBLANK(SELECTEDVALUE(\u0027Experienced Advisors\u0027[Alert Message])),'White','#BE1D3D')","isHidden":false},{"name":"ShowHideAlertTitle","expression":" IF(ISBLANK(SELECTEDVALUE(\u0027Experienced Advisors\u0027[Alert Message])),' ','ALERT !')","isHidden":false},{"name":"ShowHideWhatsNew Background","expression":"IF(ISBLANK(SELECTEDVALUE(\u0027Experienced Advisors\u0027[What\u0027s New Description])),'White','#C7AB75')","isHidden":false},{"name":"ShowHideWhatsNew Border","expression":"IF(ISBLANK(SELECTEDVALUE(\u0027Experienced Advisors\u0027[What\u0027s New Description])),'White','#63666A')","isHidden":false},{"name":"ShowHideWhatsNewTitle","expression":" IF(ISBLANK(SELECTEDVALUE(\u0027Experienced Advisors\u0027[What\u0027s New Description])),' ','What\u0027s New')","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Field Reporting//What\u0027s New and Alert Message//What\u0027s New and Alert Message.xlsx'), null, true),    #'Experienced Advisors_Sheet' = Source{[Item='Experienced Advisors',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'Experienced Advisors_Sheet', [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'What\u0027s New Description', type any}, {'Alert Message', type any}})in    #'Changed Type'"}]}],"expressions":[{"name":"Errors in WMFC_CD","expression":"letSource = WMFC_CD,  #'Detected Type Mismatches' = let    tableWithOnlyPrimitiveTypes = Table.SelectColumns(Source, Table.ColumnsOfType(Source, {type nullable number, type nullable text, type nullable logical, type nullable date, type nullable datetime, type nullable datetimezone, type nullable time, type nullable duration})),    recordTypeFields = Type.RecordFields(Type.TableRow(Value.Type(tableWithOnlyPrimitiveTypes))),    fieldNames = Record.FieldNames(recordTypeFields),    fieldTypes = List.Transform(Record.ToList(recordTypeFields), each [Type]),    pairs = List.Transform(List.Positions(fieldNames), (i) =\u003e {fieldNames{i}, (v) =\u003e if v = null or Value.Is(v, fieldTypes{i}) then v else error [Message = 'The type of the value does not match the type of the column.', Detail = v], fieldTypes{i}})in    Table.TransformColumns(Source, pairs),  #'Added Index' = Table.AddIndexColumn(#'Detected Type Mismatches', 'Row Number' ,1),  #'Kept Errors' = Table.SelectRowsWithErrors(#'Added Index', {'Year', 'RFO', 'Zone_ID', 'RFO_MKT', 'Category', 'Perfweek', 'MFC', 'WCFC', 'Join_Value', 'Capacity Type', 'TAG', 'MVP', 'Experienced Advisor Markets', 'Market', 'WCFC Flag'}),  #'Reordered Columns' = Table.ReorderColumns(#'Kept Errors', {'Row Number', 'Year', 'RFO', 'Zone_ID', 'RFO_MKT', 'Category', 'Perfweek', 'MFC', 'WCFC', 'Join_Value', 'Capacity Type', 'TAG', 'MVP', 'Experienced Advisor Markets', 'Market', 'WCFC Flag'})in  #'Reordered Columns'"}],"configuredBy":"Brian.Houghton@Thrivent.com","configuredById":"c23084c3-3890-4d73-8268-c18558782893","isEffectiveIdentityRequired":false,"isEffectiveIdentityRolesRequired":false,"refreshSchedule":{"days":["Monday"],"times":["10:00","15:30"],"enabled":true,"localTimeZoneId":"Central Standard Time","notifyOption":"NoNotification"},"targetStorageMode":"Abf","createdDate":"2022-05-02T14:24:40.41","contentProviderType":"PbixInImportMode"},{"id":"9f5cfe5a-3ed0-4df7-a49a-f02f9a5e0df9","name":"Pace to Performance","tables":[{"name":"Vital Stats DB Appointment Detail","isHidden":false,"storageMode":"Import","columns":[{"name":"Person Occurs","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Appointment Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Appointment Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Life Segment Value Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Membership Type Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Appointment Dimension Surrogate Key","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Person Dimension Surrogate Key","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"appt_occurs","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"YTD Flag","dataType":"String","isHidden":false,"expression":"if(and(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c= today()-1, \u0027Vital Stats DB Appointment Detail\u0027[Performance Year Name] = year(today())), True, False)--if(and(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c= DATE(2020, 12, 15), \u0027Vital Stats DB Appointment Detail\u0027[Performance Year Name] = 2020), True, False)","columnType":"Calculated"},{"name":"PYTD Flag","dataType":"String","isHidden":false,"expression":"if(and(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c= DATE(YEAR(today())-1, MONTH(today()), DAY(today()-1)), \u0027Vital Stats DB Appointment Detail\u0027[Performance Year Name] = year(today())-1), 1, 0)--if(and(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c= DATE(2019, 12, 15), \u0027Vital Stats DB Appointment Detail\u0027[Performance Year Name] = 2019), TRUE, FALSE)","columnType":"Calculated"},{"name":"PYTD PC Flag","dataType":"String","isHidden":false,"expression":"if(and(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c= DATE(YEAR(today())-1, MONTH(today()), DAY(today()-1)), \u0027Vital Stats DB Appointment Detail\u0027[Performance Year Name] = YEAR(today())-1), 1, 0)--if(and(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c= DATE(2019, 12, 15), \u0027Vital Stats DB Appointment Detail\u0027[Performance Year Name] = 2019), True, False)","columnType":"Calculated"},{"name":"YTD PC Flag","dataType":"String","isHidden":false,"expression":"if(and(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c= today(), \u0027Vital Stats DB Appointment Detail\u0027[Performance Year Name] = YEAR(today())), 1, 0)","columnType":"Calculated"},{"name":"Reporting Year","dataType":"String","isHidden":false,"expression":"\u0027Vital Stats DB Appointment Detail\u0027[Performance Year Name]","columnType":"Calculated"},{"name":"Month","dataType":"String","isHidden":false,"expression":"month(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date])","columnType":"Calculated"},{"name":"ThriventId","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Column1","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Calendar Year Name","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Appointment Count","expression":"distinctcount([Appointment Dimension Surrogate Key])+0","isHidden":false},{"name":"Prior Appt Total","expression":"var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT])var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT]) var _total =   CALCULATE    (SUMX(DISTINCT(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key]), 1),    DTRB_PERF_DATES[CAL_DAY_DT] \u003e= (min_date-365),    DTRB_PERF_DATES[CAL_DAY_DT] \u003c= (max(\u0027DTRB_PERF_DATES\u0027[End of Year Date])-365))Returnif(isblank(_total),0,_total)  ","isHidden":false},{"name":"YTD Appts","expression":"var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT])Var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])var _total=  CALCULATE    (SUMX(DISTINCT(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key]), 1),    DTRB_PERF_DATES[CAL_DAY_DT] \u003e= min_date,    DTRB_PERF_DATES[CAL_DAY_DT] \u003c= max_date,    \u0027DTRB_PERF_DATES\u0027[Today or Before] = 'Y')ReturnIF(ISBLANK(_total),0,_total)    ","isHidden":false},{"name":"YOY Appts","expression":"IF (([PYTD Appts]) =0,0, ((\u0027Vital Stats DB Appointment Detail\u0027[YTD Appts] - \u0027Vital Stats DB Appointment Detail\u0027[PYTD Appts]) / \u0027Vital Stats DB Appointment Detail\u0027[PYTD Appts]))","isHidden":false},{"name":"PYTD Appts","expression":"var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT])var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])  var _total =  CALCULATE    (SUMX(DISTINCT(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key]), 1),    DTRB_PERF_DATES[CAL_DAY_DT] \u003e= (min_date-365),    DTRB_PERF_DATES[CAL_DAY_DT] \u003c= (max_date-365),   \u0027DTRB_PERF_DATES\u0027[Prior YR or Before] = 'Y')Returnif(isblank(_total),0,_total)    ","isHidden":false},{"name":"PYTD Prospect Connects","expression":"var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT])var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT]) var _total =CALCULATE(    DISTINCTCOUNT(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key]),                   DTRB_PERF_DATES[CAL_DAY_DT] \u003e= (min_date-365),                   DTRB_PERF_DATES[CAL_DAY_DT] \u003c= (max_date-365),                   \u0027DTRB_PERF_DATES\u0027[Prior YR or Before] = 'Y',                   \u0027Vital Stats DB Appointment Detail\u0027[Membership Type Description] \u003c\u003e 'Benefit',                   \u0027Vital Stats DB Appointment Detail\u0027[Appointment Type Code] = 'Connect')ReturnIF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"YTD Prospect Connect","expression":"var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT])Var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])var _total =   CALCULATE(SUMX(DISTINCT(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key]), 1),  DTRB_PERF_DATES[CAL_DAY_DT] \u003e= min_date,  DTRB_PERF_DATES[CAL_DAY_DT] \u003c= max_date,  \u0027DTRB_PERF_DATES\u0027[Today or Before] = 'Y',  \u0027Vital Stats DB Appointment Detail\u0027[Membership Type Description] \u003c\u003e  'Benefit',  \u0027Vital Stats DB Appointment Detail\u0027[Appointment Type Code] = 'Connect'  )  Return  IF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"YOY Prospect Connects","expression":"IF(([PYTD Prospect Connects]) = 0,0, (([YTD Prospect Connect] - [PYTD Prospect Connects])/[PYTD Prospect Connects]))","isHidden":false},{"name":"Prior YR Prospect Connects Totals","expression":"var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT])var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT]) var _total=   CALCULATE    (SUMX(DISTINCT(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key]), 1),    \u0027Vital Stats DB Appointment Detail\u0027[Membership Type Description] \u003c\u003e 'Benefit',    \u0027Vital Stats DB Appointment Detail\u0027[Appointment Type Code] = 'Connect',     DTRB_PERF_DATES[CAL_DAY_DT] \u003e= (min_date-365),     DTRB_PERF_DATES[CAL_DAY_DT] \u003c= (max(\u0027DTRB_PERF_DATES\u0027[End of Year Date])-365)) Returnif(isblank(_total),0,_total)      ","isHidden":false},{"name":"52 wk Appointment Avg","expression":"  var _today_52 =LOOKUPVALUE(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], today()-364)  var Week_Denominator = if(sum(\u0027Pace Performance Snapshot\u0027[Tenure_Months])\u003c12,DATEDIFF(max(\u0027Pace Performance Snapshot\u0027[Tenure Data]),today(),WEEK),52)RETURNCALCULATE((distinctcount(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key])/Week_Denominator)+0, \u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003e _today_52, \u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c today())","isHidden":false},{"name":"13 wk Appointment Avg","expression":"  var _today_13 =LOOKUPVALUE(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], today()-91)RETURNCALCULATE((distinctcount(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key])/13)+0,\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003e _today_13, \u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c today())","isHidden":false},{"name":"8 wk Appointment Avg","expression":"  var _today_8 =LOOKUPVALUE(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], today()-56)RETURNCALCULATE((distinctcount(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key])/8)+0, \u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003e _today_8, \u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c today())","isHidden":false},{"name":"4 wk Appointment Avg","expression":"  var _today_4 =LOOKUPVALUE(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], today()-28)RETURNCALCULATE((distinctcount(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key])/4)+0, \u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003e _today_4, \u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c today())","isHidden":false},{"name":"Last Week Appointment","expression":"--  var _today_7 =LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT], DTRB_PERF_DATES[CAL_DAY_DT], today()-7)--RETURN--CALCULATE((distinctcount(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key]))+0,\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003e _today_7, \u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c today())CALCULATE(DISTINCTCOUNT(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key])+0,DTRB_PERF_DATES[CAL_DAY_DT]\u003ctoday(),DTRB_PERF_DATES[CAL_DAY_DT]\u003e=today()-8)","isHidden":false},{"name":"52 wk Prospect Connect Avg","expression":"  var _today_52=LOOKUPVALUE(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], today()-364)  var Week_Denominator = if(sum(\u0027Pace Performance Snapshot\u0027[Tenure_Months])\u003c12,DATEDIFF(max(\u0027Pace Performance Snapshot\u0027[Tenure Data]),today(),WEEK),52)RETURNCALCULATE((distinctcount(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key])/Week_Denominator)+0,\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003e _today_52, \u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c today(),\u0027Vital Stats DB Appointment Detail\u0027[Membership Type Description] \u003c\u003e  'Benefit',\u0027Vital Stats DB Appointment Detail\u0027[Appointment Type Code] = 'Connect')","isHidden":false},{"name":"13 wk Prospect Connect Avg","expression":"  var _today_13=LOOKUPVALUE(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], today()-91)RETURNCALCULATE((distinctcount(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key])/13)+0,\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003e _today_13, \u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c today(),\u0027Vital Stats DB Appointment Detail\u0027[Membership Type Description] \u003c\u003e  'Benefit',\u0027Vital Stats DB Appointment Detail\u0027[Appointment Type Code] = 'Connect')","isHidden":false},{"name":"8 wk Prospect Connect Avg","expression":"  var _today_8=LOOKUPVALUE(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], today()-56)RETURNCALCULATE((distinctcount(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key])/8)+0,\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003e _today_8, \u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c today(),\u0027Vital Stats DB Appointment Detail\u0027[Membership Type Description] \u003c\u003e  'Benefit',\u0027Vital Stats DB Appointment Detail\u0027[Appointment Type Code] = 'Connect')","isHidden":false},{"name":"4 wk Prospect Connect Avg","expression":"  var _today_4=LOOKUPVALUE(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], today()-28)RETURNCALCULATE((distinctcount(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key])/4)+0,\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003e _today_4, \u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c today(),\u0027Vital Stats DB Appointment Detail\u0027[Membership Type Description] \u003c\u003e  'Benefit',\u0027Vital Stats DB Appointment Detail\u0027[Appointment Type Code] = 'Connect')","isHidden":false},{"name":"Last Week Prospect Connect","expression":"--  var _today_7 =LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT], DTRB_PERF_DATES[CAL_DAY_DT], today()-7)--RETURN--CALCULATE((distinctcount(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key]))+0,\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003e _today_7, \u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c today())CALCULATE(DISTINCTCOUNT(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key])+0,DTRB_PERF_DATES[CAL_DAY_DT]\u003ctoday(),DTRB_PERF_DATES[CAL_DAY_DT]\u003e=today()-8,\u0027Vital Stats DB Appointment Detail\u0027[Membership Type Description] \u003c\u003e  'Benefit',\u0027Vital Stats DB Appointment Detail\u0027[Appointment Type Code] = 'Connect')","isHidden":false},{"name":"52 wk Appointment Test","expression":"  var _today_52 =LOOKUPVALUE(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], today()-364)RETURN_today_52--CALCULATE((distinctcount(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key])/52)+0, --\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003e _today_52, \u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c today())","isHidden":false},{"name":"Message_txt_Appts","expression":"IF(DISTINCTCOUNT(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key]) \u003e 0,    '',  'No Appointments for Current Year')","isHidden":false},{"name":"ShowHideCC_Appts","expression":"IF(DISTINCTCOUNT(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key]) \u003e 0, '#1C00ff00','White')","isHidden":false},{"name":"Prospect Connect Appointment Count","expression":"var _total =   CALCULATE(SUMX(DISTINCT(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key]), 1),  \u0027DTRB_PERF_DATES\u0027[Today or Before] = 'Y',  \u0027Vital Stats DB Appointment Detail\u0027[Membership Type Description] \u003c\u003e  'Benefit',  \u0027Vital Stats DB Appointment Detail\u0027[Appointment Type Code] = 'Connect'  )  Return  IF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"Prospect Connect Client Count","expression":"var _total =   CALCULATE(SUMX(DISTINCT(\u0027Vital Stats DB Appointment Detail\u0027[ThriventId]), 1),  \u0027Vital Stats DB Appointment Detail\u0027[Membership Type Description] \u003c\u003e  'Benefit',  \u0027Vital Stats DB Appointment Detail\u0027[Appointment Type Code] = 'Connect'  )  Return  IF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"Client Count","expression":"distinctcount([ThriventId])+0","isHidden":false},{"name":"Total Appointments","expression":"var _total=  CALCULATE    (SUMX(DISTINCT(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key]), 1),     \u0027DTRB_PERF_DATES\u0027[Today or Before] = 'Y')ReturnIF(ISBLANK(_total),0,_total)    ","isHidden":false}],"source":[{"expression":"let    Source = Sql.Database('dbedwdwprd', 'enterprisedatamart', [Query='select pers_dim.[Source System Key Text] as ThriventId,#(lf)   -- appt_fct.[Worker Appointment Association],#(lf)      appt_fct.[Appointment Dimension Surrogate Key],#(lf)      appt_fct.[Person Dimension Surrogate Key],#(lf)   -- appt_fct.[Appointment Organization Dimension Key],#(lf)   -- appt_fct.[Appointment Organization Dimension Surrogate Key],#(lf)      sum(appt_fct.[Appointment Occurs]) [appt_occurs],#(lf)      max(appt_fct.[Person Occurs]) [Person Occurs],#(lf)      mbr_dim.[Membership Type Description],#(lf)      appt_dim.[Appointment Date],#(lf)      appt_dim.[Appointment Type Description] [Appointment Type Code],#(lf)      date_dim.[Calendar Year Name],#(lf)      org_dim.[Source System Key Text] [EMP_ID],#(lf)    --sale_hier_dim.ORZN_DEPT_CDE [RFO Zone Name],#(lf)    --sale_hier_dim.ORZN_ZONE_CDE [RFO Zone Identifier],#(lf)      org_dim.[First Name] + \u0027 \u0027 + org_dim.[Last Name],#(lf)      (Select max(A.[Life Segment Value Description])#(lf)         from EnterpriseDataMart.DM_01.[Person Dimension] A#(lf)        where appt_fct.[Person Dimension Surrogate Key]=A.[Person Dimension Surrogate Key]#(lf)        and A.[Current Row Indicator] = \u0027Y\u0027) as [Life Segment Value Description] #(lf)#(lf)  from EnterpriseDataMart.DM_01.[Appointment Combine Fact] appt_fct left join #(lf)       EnterpriseDataMart.DM_01.[Person Dimension] as Pers_dim#(lf)    on (appt_fct.[Person Dimension Surrogate Key]=pers_dim.[Person Dimension Surrogate Key] and#(lf)        appt_fct.[Person Dimension Version Number] = pers_dim.[Person Dimension Version Number]) left join#(lf)       EnterpriseDataMart.DM_01.[Membership Type Dimension] mbr_dim#(lf)    on (appt_fct.[Membership Type Dimension Surrogate Key]=mbr_dim.[Membership Type Dimension Surrogate Key]) left join#(lf)#(lf)       EnterpriseDataMart.DM_01.[Appointment Dimension] appt_dim#(lf)    on (appt_fct.[Appointment Dimension Surrogate Key]=appt_dim.[Appointment Dimension Surrogate Key]) left join#(lf)#(lf)       EnterpriseDataMart.DM_01.[Date Dimension] date_dim#(lf)    on (appt_dim.[Appointment Date]=date_dim.[Calendar Date Date]) left join#(lf)#(lf)       EnterpriseDataMart.DM_01.[Organization Dimension] org_dim#(lf)    on ((appt_fct.[Appointment Organization Dimension Surrogate Key]=org_dim.[Organization Dimension Surrogate Key]) and #(lf)       ((org_dim.[Effective Begin Date] \u003c= appt_dim.[Appointment Date]) and (appt_dim.[Appointment Date] \u003c= org_dim.[Effective End Date]))) left join#(lf)#(tab) #(lf)       EnterpriseDataMart.DM_01.[SALE_HIER_DIM] sale_hier_dim#(lf)    on ((org_dim.[Source System Key Text]=sale_hier_dim.[SALE_HIER_ID] and#(lf)#(tab)(sale_hier_dim.EFF_BEG_DT\u003c=appt_dim.[Appointment Date]) and#(lf)#(tab)(appt_dim.[Appointment Date]\u003c= sale_hier_dim.EFF_END_DT) and #(lf)#(tab) sale_hier_dim.CURR_ROW_IND = \u0027Y\u0027))#(lf)#(lf)where appt_dim.[Current Row Indicator] = \u0027Y\u0027#(lf)  and appt_dim.[Appointment Create Date Over 14 Days] = \u0027N\u0027#(lf)  and appt_fct.[Person Dimension Surrogate Key] \u003c\u003e 0#(lf)  and appt_fct.[Appointment Status Name] \u003c\u003e \u0027Declined\u0027#(lf)  and appt_dim.[Appointment Type Code] \u003c\u003e \u0027UNK\u0027#(lf)  and sale_hier_dim.ORZN_DEPT_CDE in (\u00270115\u0027,\u00270165\u0027,\u00270190\u0027,\u00270240\u0027,\u00270283\u0027,\u00270291\u0027,\u00270361\u0027,\u00270365\u0027, \u00270383\u0027,\u00270384\u0027,\u00270410\u0027,\u00270435\u0027,\u00270475\u0027,\u00270496\u0027,\u00270525\u0027,\u00270529\u0027,\u00270810\u0027)#(lf) and (org_dim.[Job Type Code] in (\u0027002000\u0027, \u0027002003\u0027, \u0027002008\u0027, \u0027002010\u0027, \u0027002011\u0027, \u0027002012\u0027, \u0027002016\u0027, \u0027002022\u0027, \u0027002024\u0027, \u0027002025\u0027, \u0027002026\u0027, \u0027002027\u0027, \u0027002030\u0027, \u0027002031\u0027, \u0027002032\u0027, \u0027003100\u0027, \u0027003500\u0027)#(lf)  or  org_dim.[Department Identifier] in (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027)) #(lf)  and appt_dim.[Event Result Description] not in (\u0027No Show\u0027,\u0027Cancelled\u0027)#(lf)  and date_dim.[Calendar Year Name] in (\u00272022\u0027,\u00272023\u0027,\u00272024\u0027)#(lf)group by#(lf)--appt_fct.[Worker Appointment Association],#(lf)  appt_fct.[Appointment Dimension Surrogate Key],#(lf)  appt_fct.[Person Dimension Surrogate Key],#(lf)  mbr_dim.[Membership Type Description],#(lf)  appt_dim.[Appointment Date],#(lf)  appt_dim.[Appointment Type Description],#(lf)  date_dim.[Calendar Year Name],#(lf)--sale_hier_dim.ORZN_DEPT_CDE,#(lf)--sale_hier_dim.ORZN_ZONE_CDE,#(lf)  org_dim.[Source System Key Text],#(lf)  org_dim.[First Name] + \u0027 \u0027 + org_dim.[Last Name],#(lf)  pers_dim.[Source System Key Text] #(lf)--appt_fct.[Appointment Organization Dimension Key],#(lf)--appt_fct.[Appointment Organization Dimension Surrogate Key]#(tab) #(lf)#(lf)having #(lf)sum(appt_fct.[Appointment Occurs])\u003e0']),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Appointment Date', type date}})in    #'Changed Type'"}]},{"name":"Approaches","isHidden":false,"storageMode":"Import","columns":[{"name":"Task Dimension Surrogate Key","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Person Dimension Surrogate Key","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Task Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Task_Occurs","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Person Occurs","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Task Type Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Task Status Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Performance Year Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Performance Year Week Number","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Name","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"52 wk Approaches Avg","expression":"  var _today_52 =LOOKUPVALUE(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], today()-364)  var apptotal= sum(Approaches[Task_Occurs])RETURNCALCULATE((sum(Approaches[Task_Occurs])/52)+0, Approaches[Task Date] \u003e _today_52, Approaches[Task Date] \u003c today())","isHidden":false},{"name":"13 wk Approaches Avg","expression":"  var _today_13 =LOOKUPVALUE(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], today()-91)RETURN--CALCULATE((sum(Approaches[Task_Occurs]))+0, Approaches[Task Date] \u003e _today_13,\u0027Approaches\u0027[Task Date] \u003c today())CALCULATE((sum(Approaches[Task_Occurs])/13)+0, Approaches[Task Date] \u003e _today_13,\u0027Approaches\u0027[Task Date] \u003c today())","isHidden":false},{"name":"8 wk Approaches Avg","expression":"  var _today_8 =LOOKUPVALUE(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], today()-56)RETURNCALCULATE((sum(Approaches[Task_Occurs])/8)+0, Approaches[Task Date] \u003e _today_8, Approaches[Task Date] \u003c today())","isHidden":false},{"name":"4 wk Approaches Avg","expression":"  var _today_4 =LOOKUPVALUE(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], today()-28)RETURNCALCULATE((sum(Approaches[Task_Occurs])/4)+0, Approaches[Task Date] \u003e _today_4, \u0027Approaches\u0027[Task Date] \u003c today())","isHidden":false},{"name":"Last Week Approaches","expression":"--  var _today_7 =LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT], DTRB_PERF_DATES[CAL_DAY_DT], today()-7)--RETURN--CALCULATE((sum(Approaches[Task_Occurs])+0), Approaches[Task Date] \u003e _today_7, Approaches[Task Date] \u003c today())CALCULATE(SUM(Approaches[Task_Occurs])+0,\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_WK_TXT] = 'PREVIOUS',\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'CURRENT')","isHidden":false}],"source":[{"expression":"let    Source = Sql.Database('dbedwdwprd', 'enterprisedatamart', [Query='select task_fct.[Task Dimension Surrogate Key],#(lf)       task_fct.[Person Dimension Surrogate Key],#(lf)       task_dim.[Task Date],#(lf)       sum(task_fct.[Task Occurs]) [Task_Occurs],#(lf)       task_fct.[Person Occurs], #(lf)       task_dim.[Task Type Name],#(lf)       task_dim.[Task Status Name],#(lf)       date_dim.[Calendar Year Name] as ''Performance Year Name'',#(lf)       date_dim.[Calendar Year Week Number] as ''Performance Year Week Number'',#(lf)       org_dim.[Source System Key Text] as TSID,#(lf)       --sale_hier_dim.ORZN_DEPT_CDE,#(lf)       --sale_hier_dim.ORZN_ZONE_CDE,#(lf)       org_dim.[First Name] + \u0027 \u0027 + org_dim.[Last Name] as Name #(lf)       --org_dim.[Job Type Code] as JOB_TYP_CDE,#(lf)       --org_dim.[Adjusted Service Date] as ADJ_SVC_DT,#(lf)       --org_dim.[Employee Status Type Code] as EMP_STS_TYP_CDE#(lf)  from EnterpriseDataMart.[DM_01].[Task Fact] task_fct left join#(lf)       EnterpriseDataMart.[DM_01].[Task Dimension] task_dim#(lf)    on task_fct.[Task Dimension Surrogate Key] = task_dim.[Task Dimension Surrogate Key] left join#(lf)       EnterpriseDataMart.DM_01.[Date Dimension] date_dim#(lf)    on task_dim.[Task Date]=date_dim.[Calendar Date Date] left join#(lf)#(lf)       EnterpriseDataMart.DM_01.[Organization Dimension] org_dim#(lf)    on ((task_fct.[Task Organization Dimension Surrogate Key] = org_dim.[Organization Dimension Surrogate Key]) and#(lf)#(tab)   (task_dim.[Task Date] between org_dim.[Effective Begin Date] and org_dim.[Effective End Date])) left join#(lf)#(lf)       EnterpriseDataMart.DM_01.[SALE_HIER_DIM] sale_hier_dim#(lf)   on ((sale_hier_dim.EFF_BEG_DT \u003c= TASK_DIM.[Task Date]) and#(lf)       (task_dim.[Task Date] \u003c= DATEADD(day,-1,sale_hier_dim.EFF_END_DT)) and #(lf)        sale_hier_dim.CURR_ROW_IND = \u0027Y\u0027 and #(lf)        org_dim.[Source System Key Text]=sale_hier_dim.[SALE_HIER_ID])#(lf)#(lf) where task_dim.[Task Type Name] in (\u0027Approach  Call\u0027,\u0027Approach Call\u0027)#(lf)   and task_dim.[Task Status Name] in (\u0027Completed\u0027, \u0027Auto Completed\u0027, \u0027In Progress\u0027) #(lf)   and task_fct.[Person Dimension Surrogate Key] \u003c\u003e 0#(lf)   and sale_hier_dim.ORZN_DEPT_CDE in (\u00270115\u0027,\u00270165\u0027,\u00270190\u0027,\u00270240\u0027,\u00270283\u0027,\u00270291\u0027,\u00270361\u0027,\u00270365\u0027,\u00270384\u0027,\u00270410\u0027,\u00270435\u0027,\u00270475\u0027,\u00270496\u0027,\u00270525\u0027,\u00270529\u0027,\u00270810\u0027)#(lf)   and (org_dim.[Job Type Code] in (\u0027002000\u0027, \u0027002003\u0027, \u0027002008\u0027, \u0027002010\u0027, \u0027002011\u0027, \u0027002012\u0027, \u0027002016\u0027, \u0027002022\u0027, \u0027002025\u0027, \u0027002026\u0027, \u0027002027\u0027, \u0027002030\u0027, \u0027002032\u0027, \u0027003100\u0027, \u0027003500\u0027)#(lf)    or org_dim.[Department Identifier] in (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027))   #(lf)   and date_dim.[Performance Year Name] in (\u00272022\u0027,\u00272023\u0027)#(lf)    #(lf)group by#(lf)   task_fct.[Task Dimension Surrogate Key],#(lf)   task_fct.[Person Dimension Surrogate Key],#(lf)   task_dim.[Task Date],#(lf)   date_dim.[Calendar Year Name],#(lf)   date_dim.[Calendar Year Week Number],#(lf)   task_fct.[Person Occurs], #(lf)   task_dim.[Task Type Name],#(lf)   task_dim.[Task Status Name],#(lf)   date_dim.[Calendar Year Name],#(lf)   date_dim.[Calendar Year Week Number],#(lf)   date_dim.[Calendar Week End Date],#(lf)   org_dim.[Source System Key Text],#(lf)   --sale_hier_dim.ORZN_DEPT_CDE,#(lf)   --sale_hier_dim.ORZN_ZONE_CDE,#(lf)   org_dim.[First Name] + \u0027 \u0027 + org_dim.[Last Name] #(lf)   --org_dim.[Job Type Code],#(lf)   --org_dim.[Adjusted Service Date],#(lf)   --org_dim.[Employee Status Type Code]#(lf)#(lf) having #(lf)   sum(task_fct.[Task Occurs]) \u003e 0   #(lf)#(lf)'])in    Source"}]},{"name":"Categories Sort Table","isHidden":false,"storageMode":"Import","columns":[{"name":"Order","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"Category","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"}],"measures":[],"source":[{"expression":"  UNION(      ROW('Category', 'Connect', 'Order', 1),      ROW('Category', 'Gather Data', 'Order', 2),      ROW('Category', 'Strategy Call/Meeting', 'Order', 3),      ROW('Category', 'Take Action', 'Order', 4),      ROW('Category', 'Review', 'Order', 5),      ROW('Category', 'Service', 'Order', 6),      ROW('Category', 'Other', 'Order', 7)      )"}]},{"name":"DTRB_PERF_DATES","isHidden":false,"storageMode":"Import","columns":[{"name":"DT_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CAL_DAY_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_END_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_WK_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"SRC_SYS_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CRET_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"LST_UPDT_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"CRET_USER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LST_UPDT_USER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_DAY_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_MTH_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_QTR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PrevWkDt","dataType":"String","isHidden":false,"expression":"if(weekday(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT])=7,[CAL_DAY_DT], [CAL_DAY_DT]-(WEEKDAY([CAL_DAY_DT],1))) ","columnType":"Calculated"},{"name":"Prior YR or Before","dataType":"String","isHidden":false,"expression":"if(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT]\u003eNOW()-367,'N','Y')","columnType":"Calculated"},{"name":"Today or Before","dataType":"String","isHidden":false,"expression":"if(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT]\u003eNOW()-1,'N','Y')","columnType":"Calculated"},{"name":"WorkDayIndex","dataType":"String","isHidden":false,"expression":"If([WeekDay]\u003e 1 \u0026\u0026 [WeekDay] \u003c 7, ([WeekNo]-1)*5 + [WeekDay]-1)","columnType":"Calculated"},{"name":"WeekDay","dataType":"String","isHidden":false,"expression":"WeekDay(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT],1)","columnType":"Calculated"},{"name":"WeekNo","dataType":"String","isHidden":false,"expression":"WEEKNUM([CAL_DAY_DT], 1)","columnType":"Calculated"},{"name":"WorkDayIndex_Test","dataType":"String","isHidden":false,"expression":"IF([WeekDay]\u003e 1 \u0026\u0026 [WeekDay] \u003c 7, ([WeekNo]-1)*5 + [WeekDay]-1,                    IF([WeekDay] = 7, ([WeekNo]-1)*5 + [WeekDay]-2,                    IF([WeekDay] = 1, ([WeekNo]-1)*5 + [WeekDay]-1)))","columnType":"Calculated"},{"name":"Advice Date","dataType":"String","isHidden":false,"expression":"  var _asof=    CALCULATE(Max(Allego_perTSid[asOfDt])) return _asof   ","columnType":"Calculated"},{"name":"End of Year Date","dataType":"String","isHidden":false,"expression":"DATE(YEAR(DTRB_PERF_DATES[CAL_DAY_DT]),12,31)","columnType":"Calculated"},{"name":"Selection Date","dataType":"String","isHidden":false,"expression":"if((DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]=YEAR(NOW()) \u0026\u0026 \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT] \u003c= Now() -1) \u0026\u0026 \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT]  \u003e= \u0027DTRB_PERF_DATES\u0027[BegYR Date], 'Y','N')","columnType":"Calculated"},{"name":"BegYR Date","dataType":"String","isHidden":false,"expression":"DATE(YEAR(DTRB_PERF_DATES[CAL_DAY_DT]),1,1)","columnType":"Calculated"},{"name":"Rolling Off FLAG","dataType":"String","isHidden":false,"expression":"if(DTRB_PERF_DATES[CAL_DAY_DT]\u003e=(NOW()-365) \u0026\u0026 DTRB_PERF_DATES[CAL_DAY_DT]\u003c=(NOW()-358),'Y','N')","columnType":"Calculated"},{"name":"End of Quarter Date","dataType":"String","isHidden":false,"expression":"if(date(year(DTRB_PERF_DATES[CAL_DAY_DT]),month(DTRB_PERF_DATES[CAL_DAY_DT]),day(DTRB_PERF_DATES[CAL_DAY_DT]))\u003c=date(year(DTRB_PERF_DATES[CAL_DAY_DT]),4,15), date(Year(DTRB_PERF_DATES[CAL_DAY_DT]),4,15),if(date(year(DTRB_PERF_DATES[CAL_DAY_DT]),month(DTRB_PERF_DATES[CAL_DAY_DT]),day(DTRB_PERF_DATES[CAL_DAY_DT]))\u003c=date(year(DTRB_PERF_DATES[CAL_DAY_DT]),7,15), date(Year(DTRB_PERF_DATES[CAL_DAY_DT]),7,15),if(date(year(DTRB_PERF_DATES[CAL_DAY_DT]),month(DTRB_PERF_DATES[CAL_DAY_DT]),day(DTRB_PERF_DATES[CAL_DAY_DT]))\u003c=date(year(DTRB_PERF_DATES[CAL_DAY_DT]),10,15), date(Year(DTRB_PERF_DATES[CAL_DAY_DT]),10,15),date(year(DTRB_PERF_DATES[CAL_DAY_DT]),12,31))))","columnType":"Calculated"},{"name":"End of Month Date","dataType":"String","isHidden":false,"expression":"ENDOFMONTH(DTRB_PERF_DATES[CAL_DAY_DT])","columnType":"Calculated"},{"name":"EOW Indicator","dataType":"String","isHidden":false,"expression":"if(DTRB_PERF_DATES[CAL_DAY_DT]=DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT],'Y','N')","columnType":"Calculated"}],"measures":[{"name":"Todays_WKDAY","expression":"CALCULATE(var todayno=max(\u0027DTRB_PERF_DATES\u0027[WorkDayIndex])returntodayno, \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT]=TODAY())","isHidden":false},{"name":"Todays_WKDAY_testxx","expression":"CALCULATE(var todayno=max(\u0027DTRB_PERF_DATES\u0027[WorkDayIndex])returntodayno, \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT]=TODAY())","isHidden":false},{"name":"Ashley_Test","expression":"CALCULATE(var todayno=max(\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_WK_NBR])returntodayno, \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT]=TODAY())","isHidden":false}],"source":[{"expression":"let    Source = DB2.Database('PODWH021:50000', 'PODWH021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT DT_SK, #(lf)       CAL_DAY_DT, #(lf)       DTRB_PERF_RPT_WK_END_DT, #(lf)       DTRB_PERF_RPT_WK_NBR,#(lf)       DTRB_PERF_RPT_YR_NBR,#(lf)       DTRB_PERF_RPT_YR_WK_NBR,#(lf)       SRC_SYS_ID, #(lf)       CRET_TMSP, #(lf)       LST_UPDT_TMSP, #(lf)       CRET_USER_ID, #(lf)       LST_UPDT_USER_ID, #(lf)       DTRB_PERF_RPT_DAY_TXT, #(lf)       DTRB_PERF_RPT_MTH_TXT, #(lf)       DTRB_PERF_RPT_QTR_TXT, #(lf)       DTRB_PERF_RPT_WK_TXT,#(lf)       DTRB_PERF_RPT_YR_TXT#(lf)      FROM COMMON.DTRB_PERF_DATES  #(lf)    WHERE DTRB_PERF_RPT_YR_NBR IN (2022, 2023, 2024)']),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'CAL_DAY_DT', type date}, {'DTRB_PERF_RPT_WK_END_DT', type date}})in    #'Changed Type'"}]},{"name":"Teams","isHidden":false,"storageMode":"Import","columns":[{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TEAM_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TEAM_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EFF_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"teamind","dataType":"String","isHidden":false,"expression":"if(ISBLANK(Teams[TEAM_NM]),0,1)","columnType":"Calculated"},{"name":"Team Name-del","dataType":"String","isHidden":false,"expression":"  var _TeamName = Teams[TEAM_NM]return_TeamName -- if(isblank(_TeamName),' ',_TeamName)","columnType":"Calculated"}],"measures":[{"name":"Team Name","expression":"  var _TeamName = SELECTEDVALUE(Teams[TEAM_NM])returnif(ISBLANK(_TeamName),' ',_TeamName)","isHidden":false},{"name":"Message_txtTeams","expression":"IF(  SELECTEDVALUE(Teams[TEAM_NM]) \u003c\u003e ' ','',' ')  --DISTINCTCOUNT(\u0027Client_HHLD\u0027[CUST_GRP_ID_NBR])\u003e0,--'',' '--)","isHidden":false}],"source":[{"expression":"let    Source = DB2.Database('PODWH021:50000', 'PODWH021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT A.EMP_ID,#(lf)       B.TEAM_ID,#(lf)       B.TEAM_NM, #(lf)       A.EFF_DT#(lf)  FROM HUMAN_RESOURCES.EMP_TEAM_ORZN_RLTN_CURR_VW A INNER JOIN #(lf)       HUMAN_RESOURCES.TEAM_ORZN_CURR_VW B #(lf)    ON (A.TEAM_ID_SK = B.TEAM_ID_SK)#(lf) WHERE B.EFF_STS_CDE = \u0027A\u0027 #(lf)   AND A.TEAM_MBR_ACTN_CDE \u003c\u003e \u0027DROP\u0027 #(lf)   AND B.TEAM_PRPS_CDE IN (\u0027ASSC\u0027)#(lf)   AND A.EFF_DT=(SELECT MAX(aa.EFF_DT)#(lf)                   FROM HUMAN_RESOURCES.EMP_TEAM_ORZN_RLTN_CURR_VW AA INNER JOIN #(lf)                        HUMAN_RESOURCES.TEAM_ORZN_CURR_VW BB #(lf)                     ON (AA.TEAM_ID_SK = BB.TEAM_ID_SK AND A.EMP_ID=AA.EMP_ID)   #(lf)                  WHERE bb.EFF_STS_CDE = \u0027A\u0027 #(lf)                    AND AA.TEAM_MBR_ACTN_CDE \u003c\u003e \u0027DROP\u0027 #(lf)                    AND BB.TEAM_PRPS_CDE IN (\u0027ASSC\u0027))#(lf)    ORDER BY A.EMP_ID     #(lf)  ']),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'EFF_DT', type date}}),    #'Capitalized Each Word' = Table.TransformColumns(#'Changed Type',{{'TEAM_NM', Text.Proper, type text}})in    #'Capitalized Each Word'"}]},{"name":"SelectionSwitch","isHidden":false,"storageMode":"Import","columns":[{"name":"SelectedID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Selected_NM","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i45WMlTSUfLMS8ksy0wpTcxRitWJVjICCoWkJuYqxcYCAA==', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [SelectedID = _t, Selected_NM = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'SelectedID', Int64.Type}, {'Selected_NM', type text}})in    #'Changed Type'"}]},{"name":"NFC","isHidden":false,"storageMode":"Import","columns":[{"name":"Financial Customer Point Status Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Financial Customer Point Value","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CUST_LGAL_FMT_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Contract Issue Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Level 3 Product Line Of Business Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Level 3 Product Line Of Business Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TS ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Calendar Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Financial Customer Point Reason Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Financial Customer Point Reason Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Financial Customer Point Relationship Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Financial Customer Point Relationship Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Year Number","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PYTD NFC Flag","dataType":"String","isHidden":false,"expression":" if(and(\u0027NFC\u0027[Calendar Date] \u003c= DATE(YEAR(today())-1,MONTH(today()),DAY(today())), \u0027NFC\u0027[Distribution Performance Reporting Year Number] = YEAR(today())-1), 1, 0)","columnType":"Calculated"},{"name":"YTD NFC Flag","dataType":"String","isHidden":false,"expression":"if(and(\u0027NFC\u0027[Calendar Date] \u003c= DATE(YEAR(today()),MONTH(today()),DAY(today())),YEAR(\u0027NFC\u0027[Calendar Date]) = YEAR(today())), 1, 0)","columnType":"Calculated"},{"name":"PY2TD NFC Flag","dataType":"String","isHidden":false,"expression":" if(and(\u0027NFC\u0027[Calendar Date] \u003c= DATE(YEAR(today())-2,MONTH(today()),DAY(today())), \u0027NFC\u0027[Distribution Performance Reporting Year Number] = YEAR(today())-2), 1, 0)","columnType":"Calculated"},{"name":"PY NFC Flag","dataType":"String","isHidden":false,"expression":"if(NFC[DTRB_PERF_RPT_YR_TXT] = 'Previous', 1,0) ","columnType":"Calculated"},{"name":"PY2 NFC Flag","dataType":"String","isHidden":false,"expression":" var py_start = CALCULATE(MIN(\u0027NFC\u0027[Calendar Date]),ALLEXCEPT(\u0027NFC\u0027,\u0027NFC\u0027[DTRB_PERF_RPT_YR_TXT]),all(\u0027NFC\u0027),\u0027NFC\u0027[DTRB_PERF_RPT_YR_TXT]='Previous') var py_end = CALCULATE(MAX(\u0027NFC\u0027[Calendar Date]),ALLEXCEPT(\u0027NFC\u0027,\u0027NFC\u0027[DTRB_PERF_RPT_YR_TXT]),all(\u0027NFC\u0027),\u0027NFC\u0027[DTRB_PERF_RPT_YR_TXT]='Previous') var py2_start= date(year(py_start)-1,month(py_start),day(py_start)) var py2_end= date(year(py_end)-1,month(py_end),day(py_end)) var flagind = if(\u0027NFC\u0027[Calendar Date] \u003c= py2_end \u0026\u0026 \u0027NFC\u0027[Calendar Date] \u003e= py2_start,1, 0)Returnflagind","columnType":"Calculated"},{"name":"CUST_ID_NBR","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EMPL_NM","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"PY New Clients","expression":"--var _total=CALCULATE(sum(\u0027NFC\u0027[Financial Customer Point Value]), \u0027NFC\u0027[PY NFC Flag] = 1)--var _total=CALCULATE(sum(\u0027NFC\u0027[Financial Customer Point Value]),\u0027NFC\u0027[DTRB_PERF_RPT_YR_TXT]='Previous')--RETURN--if(isblank(_total),0,_total)--Updated 1/26/2022var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT])var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])var _total = calculate(sum(\u0027NFC\u0027[Financial Customer Point Value]),DTRB_PERF_DATES[CAL_DAY_DT] \u003e= (min_date-365),DTRB_PERF_DATES[CAL_DAY_DT] \u003c= (max(\u0027DTRB_PERF_DATES\u0027[End of Year Date])-365))Returnif(isblank(_total),0,_total)","isHidden":false},{"name":"PY2 New Clients","expression":"var _total=CALCULATE(sum(\u0027NFC\u0027[Financial Customer Point Value]), \u0027NFC\u0027[PY2 NFC Flag] = 1)RETURNif(isblank(_total),0,_total)","isHidden":false},{"name":"PY2TD New Clients","expression":"var cy_start = CALCULATE(MIN(\u0027NFC\u0027[Calendar Date]),ALLEXCEPT(\u0027NFC\u0027,\u0027NFC\u0027[DTRB_PERF_RPT_YR_TXT]),all(\u0027NFC\u0027),\u0027NFC\u0027[DTRB_PERF_RPT_YR_TXT]='Current')var cy_end = CALCULATE(MAX(\u0027NFC\u0027[Calendar Date]),ALLEXCEPT(\u0027NFC\u0027,\u0027NFC\u0027[DTRB_PERF_RPT_YR_TXT]),all(\u0027NFC\u0027),\u0027NFC\u0027[DTRB_PERF_RPT_YR_TXT]='Current')var py2_start = date(YEAR(cy_start)-2,MONTH(cy_start),DAY(cy_start))var py2_end = DATE(YEAR(cy_end)-2,MONTH(cy_end),DAY(cy_end))var _total = CALCULATE(SUM(\u0027NFC\u0027[Financial Customer Point Value]), \u0027NFC\u0027, \u0027NFC\u0027[Calendar Date] \u003c= py2_end \u0026\u0026 \u0027NFC\u0027[Calendar Date] \u003e= py2_start)RETURNif(isblank(_total),0,_total)","isHidden":false},{"name":"PYTD New Clients","expression":"--var _total=CALCULATE(sum(\u0027NFC\u0027[Financial Customer Point Value]), \u0027NFC\u0027[PYTD NFC Flag] = 1)--var _total=CALCULATE(sum(\u0027NFC\u0027[Financial Customer Point Value]), \u0027NFC\u0027[DTRB_PERF_RPT_YR_TXT]='Previous')--RETURN--if(isblank(_total),0,_total)--Updated 1/26/2022var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT]) var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])var _total = calculate(sum(\u0027NFC\u0027[Financial Customer Point Value]),DTRB_PERF_DATES[CAL_DAY_DT] \u003e= (min_date-365),DTRB_PERF_DATES[CAL_DAY_DT] \u003c= (max_date-365))Returnif(isblank(_total),0,_total)","isHidden":false},{"name":"YOY Change","expression":"  VAR __BASELINE_VALUE = [PYTD New Clients]  VAR __VALUE_TO_COMPARE = [YTD New Clients]  var _total =    IF(        NOT ISBLANK(__VALUE_TO_COMPARE),        DIVIDE(__VALUE_TO_COMPARE - __BASELINE_VALUE, __BASELINE_VALUE)    )Returnif(isblank(_total),0,_total)","isHidden":false},{"name":"YTD New Clients","expression":"--var _total=CALCULATE(sum(\u0027NFC\u0027[Financial Customer Point Value]), \u0027NFC\u0027[YTD NFC Flag] = 1)--var cy_start = CALCULATE(MIN(\u0027NFC\u0027[Calendar Date]),ALLEXCEPT(\u0027NFC\u0027,\u0027NFC\u0027[DTRB_PERF_RPT_YR_TXT]),all(\u0027NFC\u0027),\u0027NFC\u0027[DTRB_PERF_RPT_YR_TXT]='Current')--var cy_end = CALCULATE(MAX(\u0027NFC\u0027[Calendar Date]),ALLEXCEPT(\u0027NFC\u0027,\u0027NFC\u0027[DTRB_PERF_RPT_YR_TXT]),all(\u0027NFC\u0027),\u0027NFC\u0027[DTRB_PERF_RPT_YR_TXT]='Current')--var nfc_sum=calculate(sum(\u0027NFC\u0027[Financial Customer Point Value]), \u0027NFC\u0027[Calendar Date] \u003c= cy_end \u0026\u0026 \u0027NFC\u0027[Calendar Date] \u003e= cy_start)--var _total=CALCULATE(sum(\u0027NFC\u0027[Financial Customer Point Value]), \u0027NFC\u0027[DTRB_PERF_RPT_YR_TXT]='Current')--RETURN--if(isblank(_total),0,_total)--CALCULATE(SUM(NFC[Financial Customer Point Value]), NFC, NFC[Calendar Date] \u003c= cy_end \u0026\u0026 NFC[Calendar Date] \u003e= cy_start)--Updated 1/26/2022 var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT])  Var max_date = today()  var _total = CALCULATE(sum(\u0027NFC\u0027[Financial Customer Point Value]), DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current' ,DTRB_PERF_DATES[CAL_DAY_DT] \u003c= max_date)  Return IF(ISBLANK(_total),0,_total)","isHidden":false}],"source":[{"expression":"let    Source = DB2.Database('PODWH021:50000', 'PODWH021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT --IA_DATES_ITRL.DT_SK as ''Date Surrogate Key'',#(lf)      -- TF_FIN_CUST_EVT_FCT_CFDL.CTRC_VRSN_NBR as ''Contract Version Number'',#(lf)      -- TF_FIN_CUST_EVT_FCT_CFDL.WRTG_AGT_VRSN_NBR as ''Writing Agent Version Number'',#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_STS_CDE as ''Financial Customer Point Status Code'',#(lf)      -- TF_FIN_CUST_EVT_FCT_CFDL.CUST_AGE as ''Financial Customer Age'',#(lf)      -- TF_FIN_CUST_EVT_FCT_CFDL.AGE_CLAS_CDE as ''Age Class Code'',#(lf)      -- TF_FIN_CUST_EVT_FCT_CFDL.AGE_CLAS_DSCR as ''Age Class Description'',#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_VLU as ''Financial Customer Point Value'',#(lf)       CNF_CUSTOMER_DIM_CFDL.CUST_ID_NBR,#(lf)       CNF_CUSTOMER_DIM_CFDL.CUST_LGAL_FMT_NM, #(lf)       --CNF_CUSTOMER_DIM_CFDL.CUST_BRTH_DT,#(lf)      -- CNF_CUSTOMER_DIM_CFDL.MBR_TYP_CDE as ''Member Type Code'',#(lf)      -- CNF_CUSTOMER_DIM_CFDL.MBR_TYP_DSCR as ''Member Type Description'',#(lf)      -- CNF_CUSTOMER_DIM_CFDL.RSDL_ST_CDE as ''Residential State Code'',#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.CTRC_ISS_DT as ''Contract Issue Date'', #(lf)      -- CNF_CONTRACT_DIM_DTL_CFDL.L5_PLOB_SGRP_CDE as ''Level 5 Product Line Of Business Subgroup Code'',#(lf)      -- CNF_CONTRACT_DIM_DTL_CFDL.L5_PLOB_SGRP_DSCR as ''Level 5 Product Line Of Business Subgroup Description'',#(lf)      -- CNF_CONTRACT_DIM_DTL_CFDL.L4_PLOB_GRP_CDE as ''Level 4 Product Line Of Business Group Code'',#(lf)      -- CNF_CONTRACT_DIM_DTL_CFDL.L4_PLOB_GRP_DSCR as ''Level 4 Product Line Of Business Group Description'',#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L3_PROD_LOB_CDE as ''Level 3 Product Line Of Business Code'',#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L3_PROD_LOB_DSCR as ''Level 3 Product Line Of Business Description'',#(lf)     --  CNF_CONTRACT_DIM_DTL_CFDL.L2_PROD_CHAR_CDE as ''Level 2 Product Character Code'',#(lf)      -- CNF_CONTRACT_DIM_DTL_CFDL.L2_PROD_CHAR_DSCR as ''Level 2 Product Character Description'',#(lf)      -- AGT_DIM_CURR_CFDL.PARY_DSPL_2_NM as ''Assigned FR'',#(lf)      -- AGT_DIM_CURR_CFDL.FRST_NM as ''Employee First Name'',#(lf)      -- AGT_DIM_CURR_CFDL.MDDL_NM as ''Employee Middle Name'',#(lf)      -- AGT_DIM_CURR_CFDL.LST_NM as ''Employee Last Name'',#(lf)      AGT_DIM_CURR_CFDL.FRST_NM || \u0027 \u0027 || AGT_DIM_CURR_CFDL.LST_NM as EMPL_NM,#(lf)      -- AGT_DIM_CURR_CFDL.ADJ_SVC_DT as ''Adjusted Service Date'',#(lf)       AGT_DIM_CURR_CFDL.EMP_ID as ''TS ID'',#(lf)      -- AGT_DIM_CURR_CFDL.EMP_STS_TYP_CDE as ''Employee Status Type Code'',#(lf)      -- AGT_DIM_CURR_CFDL.EMP_STS_TYP_DSCR as ''Employee Status Type Description'',#(lf)      -- AGT_DIM_CURR_CFDL.JOB_TYP_CDE as ''Job Type Code'',#(lf)      -- AGT_DIM_CURR_CFDL.JOB_TYP_DSCR as ''Job Type Description'',#(lf)      -- AGT_DIM_CURR_CFDL.CURR_ROW_IND as ''Current Row Indicator Sales Hierarchy'',#(lf)       IA_DATES_ITRL.CAL_DAY_DT as ''Calendar Date'',#(lf)       --IA_DATES_ITRL.CAL_MTH_NM,#(lf)      -- IA_DATES_ITRL.CAL_MTH_STRT_DT as ''Calendar Month State Date'',#(lf)      -- IA_DATES_ITRL.CAL_MTH_END_DT as ''Calendar Month End Date'',#(lf)       --IA_DATES_ITRL.CAL_YR_QTR_NBR,#(lf)       --IA_DATES_ITRL.CAL_QTR_NM,#(lf)       --IA_DATES_ITRL.CAL_WK_NM,#(lf)       FIN_CUST_ELIG_DIM_CFDL.FIN_CUST_PNT_RSN_CDE as ''Financial Customer Point Reason Code'',#(lf)       FIN_CUST_ELIG_DIM_CFDL.FIN_CUST_PNT_RSN_DSCR as ''Financial Customer Point Reason Description'',#(lf)       FIN_CUST_ELIG_DIM_CFDL.CTRC_RLTN_TYP_CDE as ''Financial Customer Point Relationship Code'',#(lf)       FIN_CUST_ELIG_DIM_CFDL.CTRC_RLTN_TYP_DSCR as ''Financial Customer Point Relationship Description'',#(lf)      -- CASE#(lf)      --    WHEN (CUST_AGE \u003e= 0) AND (CUST_AGE \u003c= 15) THEN \u00270-15\u0027#(lf)      --    WHEN (CUST_AGE \u003e= 16) AND (CUST_AGE \u003c= 25) THEN \u002716-25\u0027#(lf)      --    WHEN (CUST_AGE \u003e= 26) AND (CUST_AGE \u003c= 35) THEN \u002726-35\u0027#(lf)      --    WHEN (CUST_AGE \u003e= 36) AND (CUST_AGE \u003c= 45) THEN \u002736-45\u0027#(lf)      --    WHEN (CUST_AGE \u003e= 46) AND (CUST_AGE \u003c= 55) THEN \u002746-55\u0027#(lf)      --    WHEN (CUST_AGE \u003e= 56) AND (CUST_AGE \u003c= 65) THEN \u002756-65\u0027#(lf)      --    WHEN (CUST_AGE \u003e= 66) AND (CUST_AGE \u003c= 75) THEN \u002766-75\u0027#(lf)      --    WHEN CUST_AGE \u003e 75 THEN \u002776+\u0027#(lf)      -- END#(lf)      --    AS ''Financial Customer Age Group'',#(lf)      -- integer (floor ( (CURRENT DATE - CUST_BRTH_DT) / 10000)) AS ''Member Age'',#(lf)      -- DTRB_PERF_DATES.DTRB_PERF_RPT_WK_END_DT as ''Distribution Performance Reporting Week End Date'',#(lf)      -- DTRB_PERF_DATES.DTRB_PERF_RPT_WK_NBR as ''Distribution Performance Reporting Week Number'',#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_YR_NBR as ''Distribution Performance Reporting Year Number'',#(lf)      -- DTRB_PERF_DATES.DTRB_PERF_RPT_YR_WK_NBR as ''Distribution Performance Reporting Year Week Number'',#(lf)      -- DTRB_PERF_DATES.DTRB_PERF_RPT_WK_TXT,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_YR_TXT #(lf)     --  DTRB_PERF_DATES.DTRB_PERF_RPT_DAY_TXT,#(lf)     --  DTRB_PERF_DATES.DTRB_PERF_RPT_MTH_TXT,#(lf)     --  DTRB_PERF_DATES.DTRB_PERF_RPT_QTR_TXT,#(lf)     --  SALE_HIER_DIM.SALE_HIER_ID as ''Sales Hierarchy Identifier'' #(lf)      -- SALE_HIER_DIM.EFF_BEG_TMSP as ''Effective Begin Timestamp'',#(lf)      -- SALE_HIER_DIM.EFF_END_TMSP as ''Effective End Timestamp'',#(lf)      -- SALE_HIER_DIM.CURR_ROW_IND as ''Agent Current Row Indicator'',#(lf)      -- SALE_HIER_DIM.PRTR_NM as ''Partner Name'',#(lf)      -- SALE_HIER_DIM.MANP_NM as ''Managing Partner Name'',#(lf)      -- SALE_HIER_DIM.ORZN_ZONE_CDE as ''Market'',#(lf)      -- SALE_HIER_DIM.ORZN_ZONE_DSCR as ''Organization Zone Description'',#(lf)      -- SALE_HIER_DIM.ORZN_DEPT_CDE as ''RFO'',#(lf)      -- SALE_HIER_DIM.ORZN_DEPT_DSCR as ''Organization Department Description'',#(lf)      -- SALE_HIER_DIM.ORZN_DIV_CDE as ''Organization Division Code'',#(lf)      -- SALE_HIER_DIM.ORZN_DIV_DSCR as ''Organization Division Description'',#(lf)      -- SALE_HIER_DIM.SALE_HIER_DIM_SK as ''Sales Hierarchy Dimension Surrogate Key''#(lf)#(lf)  FROM ((((((COMMON.IA_DATES_ITRL IA_DATES_ITRL INNER JOIN#(lf)             COMMON.DTRB_PERF_DATES DTRB_PERF_DATES#(lf)          ON (IA_DATES_ITRL.DT_SK = DTRB_PERF_DATES.DT_SK)) LEFT OUTER JOIN#(lf)             SALES.TF_FIN_CUST_EVT_FCT_CFDL TF_FIN_CUST_EVT_FCT_CFDL#(lf)          ON (IA_DATES_ITRL.DT_SK = TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_CRNG_DT_SK)) RIGHT OUTER JOIN#(lf)             HUMAN_RESOURCES.SALE_HIER_DIM SALE_HIER_DIM#(lf)          ON (SALE_HIER_DIM.SALE_HIER_DIM_SK = TF_FIN_CUST_EVT_FCT_CFDL.SLHR_DIM_CURR_CRNG_AGT_SK)) LEFT OUTER JOIN#(lf)             MEMBER.CNF_CUSTOMER_DIM_CFDL CNF_CUSTOMER_DIM_CFDL#(lf)          ON (CNF_CUSTOMER_DIM_CFDL.CUST_SK = TF_FIN_CUST_EVT_FCT_CFDL.CUST_SK)) LEFT OUTER JOIN#(lf)             HUMAN_RESOURCES.AGT_DIM_CURR_CFDL AGT_DIM_CURR_CFDL#(lf)          ON (AGT_DIM_CURR_CFDL.AGT_DIM_SK = TF_FIN_CUST_EVT_FCT_CFDL.CRNG_AGT_SK)) RIGHT OUTER JOIN#(lf)             SALES.FIN_CUST_ELIG_DIM_CFDL FIN_CUST_ELIG_DIM_CFDL#(lf)          ON (FIN_CUST_ELIG_DIM_CFDL.FIN_CUST_PNT_ELIG_DIM_SK = TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_ELIG_DIM_SK)) LEFT OUTER JOIN#(lf)             CONTRACT.CNF_CONTRACT_DIM_DTL_CFDL CNF_CONTRACT_DIM_DTL_CFDL#(lf)          ON (CNF_CONTRACT_DIM_DTL_CFDL.CTRC_SK = TF_FIN_CUST_EVT_FCT_CFDL.CTRC_SK) and #(lf)             (CNF_CONTRACT_DIM_DTL_CFDL.VRSN_NBR = TF_FIN_CUST_EVT_FCT_CFDL.CTRC_VRSN_NBR)#(lf)                     #(lf) WHERE (AGT_DIM_CURR_CFDL.CURR_ROW_IND = \u0027Y\u0027)#(lf)   AND (SALE_HIER_DIM.CURR_ROW_IND = \u0027Y\u0027)#(lf)   AND (sale_hier_dim.ORZN_DEPT_CDE in (\u00270001\u0027, \u00270115\u0027,\u00270165\u0027,\u00270190\u0027,\u00270240\u0027,\u00270283\u0027,\u00270291\u0027,\u00270361\u0027,\u00270365\u0027,\u00270384\u0027,\u00270410\u0027,\u00270435\u0027,\u00270475\u0027,\u00270496\u0027,\u00270525\u0027,\u00270529\u0027,\u00270810\u0027)#(lf)    or AGT_DIM_CURR_CFDL.ORZN_DEPT_CDE in (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027))  #(lf)AND DTRB_PERF_DATES.DTRB_PERF_RPT_YR_NBR in (\u00272022\u0027,\u00272023\u0027,\u00272024\u0027)#(lf)   AND substring(SALE_HIER_DIM.SALE_HIER_ID,1,2)=\u0027TS\u0027#(lf)   and TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_VLU \u003c\u003e 0']),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Contract Issue Date', type date}, {'Calendar Date', type date}})in    #'Changed Type'"}]},{"name":"AUMAUA","isHidden":false,"storageMode":"Import","columns":[{"name":"vaaum","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"anaum","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"mfaum","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"soaum","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"immaum","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"vulcv","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"ulcv","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"tradcv","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"totwrapaum","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"tottrstaua","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TOTAL AUM","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TOTAL AUA","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TOTAL","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"tsid","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"np_brkgaua","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"AUM \u0026 AUA Sort Order","dataType":"String","isHidden":false,"expression":"Related(AUMAUA_Sort[Order])","columnType":"Calculated"}],"measures":[{"name":"Message_txt_AUA","expression":"IF(SUM(\u0027AUMAUA\u0027[TOTAL AUA]) \u003e 0,  '',  'No Clients with AUA Products')","isHidden":false},{"name":"ShowHideCC_AUA","expression":"IF(SUM(\u0027AUMAUA\u0027[TOTAL AUA]) \u003e 0, '#1C00ff00','White')","isHidden":false},{"name":"Message_txt_AUM","expression":"IF(SUM(\u0027AUMAUA\u0027[TOTAL AUM]) \u003e 0,  '',  'No Clients with AUM Products')","isHidden":false},{"name":"ShowHideCC_AUM","expression":"IF(SUM(\u0027AUMAUA\u0027[TOTAL AUM]) \u003e 0, '#1C00ff00','White')","isHidden":false},{"name":"TOTAL AUM \u0026 AUA","expression":" var _total =  CALCULATE(sum(\u0027AUMAUA\u0027[TOTAL]))Returnif(isblank(_total),0,_total)   ","isHidden":false},{"name":"YTD Flag check","expression":"var flagind = if(and(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT] \u003c= today()-1, \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'Current'), True, False)Return ","isHidden":false}],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////pnfiles002b//fp_cifs_7834_sas$//marketanalysis//fieldreporting//pbi data//aumaua//AUMAUA.csv'),[Delimiter=',', Columns=21, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Removed Columns' = Table.RemoveColumns(#'Promoted Headers',{'', '_1', '_2', '_3', '_4', '_5', '_6', '_7'}),    #'Changed Type' = Table.TransformColumnTypes(#'Removed Columns',{{'tsid', type text}, {'Product', type text}, {'vaaum', type number}, {'anaum', type number}, {'mfaum', type number}, {'soaum', type number}, {'immaum', type number}, {'vulcv', type number}, {'ulcv', type number}, {'tradcv', type number}, {'totwrapaum', type number}, {'tottrstaua', type number},{'np_brkgaua', type number}}),    #'Added Custom' = Table.AddColumn(#'Changed Type', 'TOTAL AUM', each [anaum] + [immaum] + [mfaum] +[vaaum] + [vulcv] + [ulcv] + [tradcv] + [np_brkgaua]),    #'Added Custom1' = Table.AddColumn(#'Added Custom', 'TOTAL AUA', each [totwrapaum]),    #'Added Custom2' = Table.AddColumn(#'Added Custom1', 'TOTAL', each [anaum] +[immaum] +[mfaum] + [soaum] + [vaaum] +[vulcv] +[ulcv] + [tradcv] +[totwrapaum] +[np_brkgaua])in    #'Added Custom2'"}]},{"name":"AUMAUA_Sort","isHidden":false,"storageMode":"Import","columns":[{"name":"Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Order","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('NY47D8IgFEb/imHuYH071kHTRKbqRDoQuVoi0oaHif/ey726cU4+4CglGu+zTR9RiVr0lRIyp6zd7Ji9iSgXJM/2DghLgkMYnxD0o5gVmca8bRwD8pq4Awe3hLhhbCWet/+p9okv78icwEO05a89rwcLzpSe+Y9hGiCQ4cT2NWl6vua6q2wKcF3HwGGXkCMNsav/Ag==', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Product = _t, Order = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Product', type text}, {'Order', Int64.Type}})in    #'Changed Type'"}]},{"name":"Client_HHLD","isHidden":false,"storageMode":"Import","columns":[{"name":"CUST_ID_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"CUST_GRP_ID_NBR","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EMP_ORZN_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MBRTYPE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FUTUREVALUE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CUST_LGAL_FMT_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"STP_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Client Service Model","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CUST_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"FVSortOrder","dataType":"String","isHidden":false,"expression":"RELATED(FVSortOrder[FVOrder])","columnType":"Calculated"},{"name":"Member Sort","dataType":"String","isHidden":false,"expression":"RELATED((\u0027Member Sort\u0027[MBR_ORDER]))","columnType":"Calculated"},{"name":"CUST_AGE_GRP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CLNT_AGE_TYP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CUST_LGAL_FRST_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CUST_LGAL_LST_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CUST_GRLN_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Client_Total","expression":"CALCULATE(count(Client_HHLD[CUST_ID_NBR]))","isHidden":false},{"name":"Client_HHLD","expression":"CALCULATE(DISTINCTCOUNT(Client_HHLD[CUST_GRP_ID_NBR]), \u0027Client_HHLD\u0027[CUST_GRP_ID_NBR] \u003e 0)","isHidden":false},{"name":"ClientIndvShowMeasure","expression":"IF([Client_Total] \u003e 0, [Client_Total], '0')","isHidden":false},{"name":"ClientHHLDShowMeasure","expression":"IF([Client_HHLD] \u003e 0, [Client_HHLD], '0')","isHidden":false},{"name":"FVShowMeasure","expression":"IF(distinctcount(Client_HHLD[CUST_GRP_ID_NBR])\u003e 0, distinctcount(Client_HHLD[CUST_GRP_ID_NBR]), '0')","isHidden":false},{"name":"ShowHideFV","expression":"IF(DISTINCTCOUNT(\u0027Client_HHLD\u0027[CUST_GRP_ID_NBR]) \u003e 0, '#1C00ff00','White')","isHidden":false},{"name":"Message_txt","expression":"IF(DISTINCTCOUNT(\u0027Client_HHLD\u0027[CUST_GRP_ID_NBR])\u003e0,'','Future ValueNo Clients Assigned')","isHidden":false}],"source":[{"expression":"let    Source = DB2.Database('PODWH021:50000', 'PODWH021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT D.CUST_SK,#(lf)       A.CUST_ID_NBR,#(lf)       D.CUST_LGAL_FMT_NM,#(lf)       D.CUST_LGAL_FRST_NM,#(lf)       D.CUST_LGAL_LST_NM,#(lf)       D.CUST_GRLN_TYP_CDE,#(lf)       D.CUST_GRP_ID_NBR,#(lf)       E.STP_STS_CDE,#(lf)       case when E.fut_vlu_indx_cde = \u0027GOLD\u0027 then \u0027Gold\u0027#(lf)            when E.fut_vlu_indx_cde = \u0027SILVR\u0027 then \u0027Silver\u0027#(lf)            when E.fut_vlu_indx_cde = \u0027BRNZE\u0027 then \u0027Bronze\u0027#(lf)            when E.fut_vlu_indx_cde in (\u0027NA\u0027,\u0027UNK\u0027,\u0027 \u0027 ) then \u0027Unknown\u0027#(lf)       end as FutureValue,#(lf)       case when a.mbr_typ_cde = \u0027BEN\u0027 then \u0027Benefit\u0027#(lf)#(tab)    when a.mbr_typ_cde = \u0027ASSOC\u0027 then \u0027Associate\u0027#(lf)#(tab)    when a.mbr_typ_cde = \u0027JUV\u0027 then \u0027Juvenile\u0027#(lf)#(tab)    when a.mbr_typ_cde = \u0027NON\u0027 and D.clas_cust_rpt_cde = \u0027NAOWN\u0027 then \u0027Non-Member\u0027#(lf)#(tab)    when a.mbr_typ_cde = \u0027NON\u0027 and D.clas_cust_rpt_cde \u003c\u003e \u0027NAOWN\u0027 then \u0027Prospect\u0027#(lf)       end as MBRTYPE,#(lf)       case when d.cust_age \u003c 0 then \u0027UKWN\u0027#(lf)#(tab)    when d.cust_age \u003c 18 then \u0027\u003c18\u0027#(lf)#(tab)    when d.cust_age \u003c 25 then \u002718-24\u0027#(lf)#(tab)    when d.cust_age \u003c 35 then \u002725-34\u0027#(lf)#(tab)    when d.cust_age \u003c 45 then \u002735-44\u0027#(lf)#(tab)    when d.cust_age \u003c 55 then \u002745-54\u0027#(lf)#(tab)    when d.cust_age \u003c 65 then \u002755-64\u0027#(lf)#(tab)    when d.cust_age \u003c 75 then \u002765-74\u0027#(lf)#(tab)    when d.cust_age \u003c 85 then \u002775-84\u0027#(lf)#(tab)    when d.cust_age \u003e= 85 then \u002785+\u0027#(lf)#(tab)      else \u0027 \u0027 #(lf)       end as cust_age_grp,#(lf)       case when d.cust_age \u003c 18 then \u0027\u003c18\u0027#(lf)            when d.cust_age \u003e= 18 then \u002718+\u0027#(lf)#(tab) else \u0027 \u0027#(lf)       end as clnt_age_typ,#(lf)       B.EMP_ORZN_ID#(lf)  FROM MEMBER.CUST_MBR_INFO_CURR_CFDL A inner join#(lf)       MEMBER.ITGR_IDVL_ALL_CURR_CFDL D#(lf)    on a.acrt_cust_sk=D.cust_sk left join#(lf)       MEMBER.CNF_CUST_RESID_MAIL_GRP_DIM_CFDL E#(lf)    ON D.CUST_GRP_SK=E.CUST_GRP_SK inner join #(lf)       CLNT_ASMT_DM.CUST_REPR_COMP_RLTN_CURR_CFDL B#(lf)      -- CLNT_ASMT_DM.CUST_REPR_ASGN_CURR_CFDL B#(lf)    ON A.ACRT_CUST_SK = B.ACRT_CUST_SK AND#(lf)       A.MBR_TYP_CDE IN (\u0027BEN\u0027,\u0027NON\u0027,\u0027ASSOC\u0027,\u0027JUV\u0027) AND#(lf)       B.EMP_ORZN_ID LIKE \u0027TS%\u0027 inner join#(lf)       MEMBER.CNF_CUSTOMER_DIM_CFDL C#(lf)    ON B.CUST_ID_NBR = C.CUST_ID_NBR and#(lf)       C.CUST_IDVL_DECD_IND = \u0027N\u0027#(lf) where (a.mbr_typ_cde in (\u0027BEN\u0027,\u0027ASSOC\u0027,\u0027JUV\u0027) or#(lf)        a.mbr_typ_cde = \u0027NON\u0027 and D.clas_cust_rpt_cde = \u0027NAOWN\u0027) ']),    #'Replaced Value' = Table.ReplaceValue(Source,'','Unknown',Replacer.ReplaceValue,{'FUTUREVALUE'}),    #'Filtered Rows' = Table.SelectRows(#'Replaced Value', each true),    #'Replaced Value1' = Table.ReplaceValue(#'Filtered Rows',null,'Unknown',Replacer.ReplaceValue,{'FUTUREVALUE'}),    #'Filtered Rows1' = Table.SelectRows(#'Replaced Value1', each true),    #'Added Custom' = Table.AddColumn(#'Filtered Rows1', 'Client Service Model', each if [FUTUREVALUE] = 'Gold' and [STP_STS_CDE] = 'YES' then 'A'else if [FUTUREVALUE] = 'Silver' and [STP_STS_CDE] = 'YES' then 'B'else if [FUTUREVALUE] = 'Gold' and [STP_STS_CDE] \u003c\u003e 'YES' then 'B'else if [FUTUREVALUE] = 'Bronze' and [STP_STS_CDE] = 'YES' then 'C'else if [FUTUREVALUE] = 'Silver' and [STP_STS_CDE] \u003c\u003e 'YES' then 'C'else if [FUTUREVALUE] = 'Bronze' and [STP_STS_CDE] \u003c\u003e 'YES' then 'D'else ' ')in    #'Added Custom'"}]},{"name":"CONFQUAL","isHidden":false,"storageMode":"Import","columns":[{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CC","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"NM","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"RANK","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"QM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CQ","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"XDAY","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Conf_Qualifer","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Projected Conference Name","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Total Conference Credits","expression":" var _cc=  calculate(sum(\u0027CONFQUAL\u0027[CC])) Return IF(ISBLANK(_cc),0,_cc)","isHidden":false},{"name":"Total New Money","expression":" var _nm=  calculate(sum(\u0027CONFQUAL\u0027[NM])) Return IF(ISBLANK(_nm),0,_nm)","isHidden":false},{"name":"Conference Qualifier","expression":"  var _confQ = SELECTEDVALUE(\u0027CONFQUAL\u0027[Conf_Qualifer])Return IF(ISBLANK(_confQ),'NA',_confQ)","isHidden":false},{"name":"Projected Conference","expression":"  var _ProjConf = SELECTEDVALUE(\u0027CONFQUAL\u0027[Projected Conference Name])Return IF(ISBLANK(_ProjConf),'',if(_ProjConf='None','',_ProjConf))","isHidden":false},{"name":"Projected Extra Day","expression":"  var _xday = SELECTEDVALUE(\u0027CONFQUAL\u0027[XDAY])Return IF(ISBLANK(_xday),'NA',_xday)","isHidden":false}],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////VSPUBLIC//CORPSHAR//Project//FRRecognition//recognition.reports//CONFERENCE//CONFQUAL.CSV'),[Delimiter=',', Columns=7, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'TSID', type text}, {'CC', Int64.Type}, {'NM', Int64.Type}, {'RANK', Int64.Type}, {'QM', type text}, {'CQ', Int64.Type}, {'XDAY', type text}}),    #'Added Conditional Column' = Table.AddColumn(#'Changed Type', 'Projected Conference Name', each if [CQ] = 33 then 'Pinnacle A' else if [CQ] = 32 then 'Pinnacle B' else if [CQ] = 31 then 'Pinnacle C' else if [CQ] = 29 then 'Summit A' else if [CQ] = 28 then 'Summit B' else if [CQ] = 27 then 'Summit C' else if [CQ] = 22 then 'Sierra A' else if [CQ] = 20 then 'Sierra B' else if [CQ] = 40 then 'None' else if [CQ] = 41 then 'None' else null),    #'Added Custom' = Table.AddColumn(#'Added Conditional Column', 'Conf_Qualifer', each [QM] \u0026 ' Conf Cr'),    #'Replaced Value' = Table.ReplaceValue(#'Added Custom','N','No',Replacer.ReplaceText,{'XDAY'}),    #'Replaced Value1' = Table.ReplaceValue(#'Replaced Value','Y','Yes',Replacer.ReplaceText,{'XDAY'})in    #'Replaced Value1'"}]},{"name":"Allego_perTSid","isHidden":false,"storageMode":"Import","columns":[{"name":"wave","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"tsid","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"fld_jobcde_ind","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"asOfDt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"tot_course_cnt","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"pct_complete","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"trained_sts","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Training Completed","expression":"  var _trainingStatus = SELECTEDVALUE(Allego_perTSid[trained_sts])   -- var percent_Complete = sum(Allego_perTSid[pct_course_complete])return  if(isblank(_trainingStatus),'Not Started',_trainingStatus)","isHidden":false}],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////VSSHR//SHARED//Public//DI and BI//Field Reporting//Allego//ForDB//Allego_perTSid_R3.csv'),[Delimiter=',', Columns=19, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Removed Columns' = Table.RemoveColumns(#'Promoted Headers',{'', '_1', '_2', '_3', '_4', '_5', '_6', '_7', '_8', '_9', '_10'}),    #'Replaced Value' = Table.ReplaceValue(#'Removed Columns','InProgr','In Progress',Replacer.ReplaceText,{'trained_sts'}),    #'Replaced Value1' = Table.ReplaceValue(#'Replaced Value','NotStart','Not Started',Replacer.ReplaceText,{'trained_sts'}),    #'Changed Type' = Table.TransformColumnTypes(#'Replaced Value1',{{'asOfDt', type date}})in    #'Changed Type'"}]},{"name":"ConferenceCredits","isHidden":false,"storageMode":"Import","columns":[{"name":"Compensation Payee Agent Surrogate Key","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Compensation Agent Version Number","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Sponsoring Compensation Recipient Surrogate Key","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Sponsoring Agent Version Number","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Contract Surrogate Key","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Process Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Proprietary Product Indicator","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Customer Identification Number","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Conference Credit Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Agent Split Percent","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Metric Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Benefit Contract Number","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Benefit Contract Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Compensation Reporting Roll Up Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Sponsoring Compensation Recipient Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Comp Employee Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Date Surrogate Key","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Calendar Day Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Year Number","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Year Week Number","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Report Year Text","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ROLLUP_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Compensated Job Title Code","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Message_txtCC","expression":"IF(DISTINCTCOUNT(\u0027Client_HHLD\u0027[CUST_GRP_ID_NBR])\u003e0,'',' ')","isHidden":false},{"name":"ShowHideCC","expression":"IF(SUM(\u0027ConferenceCredits\u0027[Conference Credit Amount]) \u003e 0, '#1C00ff00','White')","isHidden":false},{"name":"Message_txtCC_Rptdt","expression":"--today()IF(today() \u003c= 2/21/2022,'**These Conference Credit Report totals has been paused until mid-February from being refreshed','')","isHidden":false},{"name":"ShowHideCC_Rptdt","expression":"IF(today() \u003e= 02/21/2022, '#1C00ff00','White')","isHidden":false}],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'select a.''Compensation Payee Agent Surrogate Key'',#(lf)       a.''Compensation Agent Version Number'',#(lf)       a.''Sponsoring Compensation Recipient Surrogate Key'',#(lf)       a.''Sponsoring Agent Version Number'',#(lf)       a.''Contract Surrogate Key'',#(lf)       a.''Process Date'',#(lf)       a.''Proprietary Product Indicator'',#(lf)       a.''Customer Identification Number'',#(lf)       a.''Conference Credit Amount'',#(lf)       a.''Agent Split Percent'',#(lf)       a.''Metric Type Code'',#(lf)       a.''Benefit Contract Number'',#(lf)       a.''Benefit Contract Type Code'',#(lf)       a.''Compensation Reporting Roll Up Name'',#(lf)       a.''Sponsoring Compensation Recipient Identifier'',#(lf)       b.''Employee Identifier'' as ''Comp Employee Identifier'',#(lf)       b.''Employee Identifier'',#(lf)      -- b.''Employee Name'',#(lf)      -- b.''Workforce Dimension Detail Surrogate Key'',#(lf)       c.''Date Surrogate Key'',#(lf)       c.''Calendar Day Date'',#(lf)       c.''Distribution Performance Reporting Year Number'',#(lf)       c.''Distribution Performance Reporting Year Week Number'',#(lf)       c.''Distribution Performance Report Year Text'',#(lf)       \u0027N\u0027 as Rollup_Ind,#(lf)       a.''Compensated Job Title Code''              #(lf)       #(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sales Metrics Transactions'' as a left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' as b#(lf)    on a.''Compensation Payee Agent Surrogate Key''=b.''Workforce Dimension Detail Surrogate Key''  inner join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Distribution Performance Dates Dimension'' as c#(lf)    on a.''Process Date''= c.''Calendar Day Date''   #(lf)  #(lf) where b.''Current Row Indicator'' = \u0027Y\u0027#(lf)   and a.''Conference Credit Amount'' IS NOT NULL#(lf)  -- and a.''Conference Credit Amount'' \u003e 0#(lf)   and c.''Distribution Performance Report Year Text'' = \u0027CURRENT\u0027#(lf)   and substring(b.''Employee Identifier'',1,2)=\u0027TS\u0027#(lf)#(lf)Union#(lf)select a.''Compensation Payee Agent Surrogate Key'',#(lf)       a.''Compensation Agent Version Number'',#(lf)       a.''Sponsoring Compensation Recipient Surrogate Key'',#(lf)       a.''Sponsoring Agent Version Number'',#(lf)       a.''Contract Surrogate Key'',#(lf)       a.''Process Date'',#(lf)       a.''Proprietary Product Indicator'',#(lf)       a.''Customer Identification Number'',#(lf)       a.''Conference Credit Amount'',#(lf)       a.''Agent Split Percent'',#(lf)       a.''Metric Type Code'',#(lf)       a.''Benefit Contract Number'',#(lf)       a.''Benefit Contract Type Code'',#(lf)       a.''Compensation Reporting Roll Up Name'',#(lf)       a.''Sponsoring Compensation Recipient Identifier'',#(lf)       b.''Employee Identifier'' as ''Comp Employee Identifier'',#(lf)       a.''Sponsoring Compensation Recipient Identifier'' as EMP_ID,#(lf)      -- b.''Employee Name'',#(lf)      -- b.''Workforce Dimension Detail Surrogate Key'',#(lf)       c.''Date Surrogate Key'',#(lf)       c.''Calendar Day Date'',#(lf)       c.''Distribution Performance Reporting Year Number'',#(lf)       c.''Distribution Performance Reporting Year Week Number'',#(lf)       c.''Distribution Performance Report Year Text'',#(lf)       \u0027Y\u0027 as Rollup_Ind,#(lf)       a.''Compensated Job Title Code''#(lf)       #(lf)       #(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sales Metrics Transactions'' as a left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' as b#(lf)    on a.''Compensation Payee Agent Surrogate Key''=b.''Workforce Dimension Detail Surrogate Key''  inner join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Distribution Performance Dates Dimension'' as c#(lf)    on a.''Process Date''= c.''Calendar Day Date''   #(lf)  #(lf) where b.''Current Row Indicator'' = \u0027Y\u0027#(lf)   and a.''Conference Credit Amount'' IS NOT NULL#(lf)   --and a.''Conference Credit Amount'' \u003e 0#(lf)   and c.''Distribution Performance Report Year Text'' = \u0027CURRENT\u0027#(lf)   and substring(b.''Employee Identifier'',1,2)=\u0027TS\u0027#(lf)   and b.''Employee Identifier'' \u003c\u003e a.''Sponsoring Compensation Recipient Identifier''', null, [EnableFolding=true])in    Source"}]},{"name":"Producer_Snowflake","isHidden":false,"storageMode":"Import","columns":[{"name":"SALE_HIER_DIM_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EMP_DIM_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SALE_HIER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ZONE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RPT_TO_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Adjusted Service Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TENURE","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TENURE_GROUP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SFC_FC","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FR_SEGMENT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"GNDR_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LST_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FRST_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MDDL_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ASSIGNED_AFA","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"OP_COUNT","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Credentials","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"License","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Report to Name","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"DisplayFilteredProducer","expression":"  IF([EmployeeNmFiltered]=1,VALUES(Producer_Snowflake[EMP_NM]),   IF([EmployeeNMFiltered]=0 \u0026\u0026 [EmployeeIdFiltered] = 1, VALUES(Producer_Snowflake[EMP_NM]), ' '))","isHidden":false},{"name":"EmployeeIdFiltered","expression":"IF(ISFILTERED(Producer_Snowflake[EMP_ID]),1,0)","isHidden":false},{"name":"EmployeeNmFiltered","expression":"IF(ISFILTERED(Producer_Snowflake[EMP_NM]),1,0)","isHidden":false},{"name":"TeamNmFiltered","expression":"IF(ISFILTERED(Teams[TEAM_NM]),1,0)","isHidden":false},{"name":"DisplayFilteredTenureGrp","expression":"IF([EmployeeNmFiltered]=1,VALUES(Producer_Snowflake[TENURE_GROUP]),'')","isHidden":false},{"name":"DisplayFilteredTeam","expression":" var teamnm = IF([TeamNmFiltered]=1,VALUES(Teams[TEAM_NM]),' ') return IF(ISBLANK(teamnm),' ', teamnm)","isHidden":false}],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'select b.''Sales Hierarchy Dimension Surrogate Key'' as SALE_HIER_DIM_SK,#(lf)       a.''Workforce Dimension Detail Surrogate Key'' as EMP_DIM_SK,#(lf)       a.''Employee Identifier'' as EMP_ID,#(lf)       b.''Sales Hierarchy Identifier'' as SALE_HIER_ID,#(lf)       a.''Employee Name'' as EMP_NM,#(lf)       aa.''Job Type Code'' as JOB_TYP_CDE,#(lf)       aa.''Job Type Description'' as JOB_TYP_DSCR,#(lf)       case when a.''Organization Department Code'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027) then \u00270383\u0027#(lf)         else a.''Organization Department Code''#(lf)       end as RFO,#(lf)       (substr(b.''Organization Zone Code'',6,2))   AS ZONE,#(lf)       c.''Report to ID'' as RPT_TO_ID,#(lf)       cc.''First Name''||\u0027 \u0027||cc.''Last Name'' as ''Report to Name'',#(lf)       a.''Adjusted Service Date'',#(lf)       c.''Financial Professional Tenure'' as Tenure,#(lf)       c.''Financial Professional Tenure Group'' as Tenure_Group,#(lf)       case when a.''Senior Financial Consultant Indicator'' = \u0027Y\u0027 then \u0027SFC\u0027#(lf)#(tab)        when a.''Financial Consultant Indicator'' = \u0027Y\u0027 then \u0027FC\u0027#(lf)#(tab)        when a.''Wealth Advisor Indicator'' = \u0027Y\u0027 then \u0027WA\u0027#(lf)#(tab)   end as SFC_FC,#(lf)       (case when a.''Senior Financial Consultant Indicator'' = \u0027Y\u0027 then \u0027SFC\u0027#(lf)             when a.''Financial Consultant Indicator'' = \u0027Y\u0027 then \u0027FC\u0027#(lf)             when a.''Wealth Advisor Indicator'' = \u0027Y\u0027 then \u0027WA\u0027#(lf)             when a.''Job Type Code'' in (\u0027002003\u0027,\u0027002018\u0027,\u0027002019\u0027) then A.''Job Type Description''#(lf)             when a.''Job Type Code'' = \u0027002016\u0027 then a.''Job Type Description''#(lf)             when ((a.''Senior Financial Consultant Indicator'' = \u0027N\u0027 or a.''Financial Consultant Indicator'' = \u0027N\u0027) and #(lf)                    c.''Financial Professional Tenure'' \u003e= 4 and #(lf)                    a.''Job Type Code'' in (\u0027002000\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027003602\u0027,\u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027))#(lf)                      then \u0027VETFR\u0027#(lf)             when c.''Financial Professional Tenure'' \u003e= 3 and c.''Financial Professional Tenure'' \u003c 4  and   #(lf)                  a.''Job Type Code'' in (\u0027002000\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027003602\u0027,\u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027)#(lf)                      then \u0027NFR4\u0027#(lf)             when c.''Financial Professional Tenure'' \u003e= 2 and c.''Financial Professional Tenure'' \u003c 3  and   #(lf)                  a.''Job Type Code'' in (\u0027002000\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027003602\u0027,\u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027)#(lf)                      then \u0027NFR3\u0027#(lf)             when c.''Financial Professional Tenure'' \u003e= 1 and c.''Financial Professional Tenure'' \u003c 2  and   #(lf)                  a.''Job Type Code'' in (\u0027002000\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027003602\u0027,\u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027)#(lf)                      then \u0027NFR2\u0027 #(lf)             when c.''Financial Professional Tenure'' \u003e= 0 and c.''Financial Professional Tenure'' \u003c 1  and   #(lf)                  a.''Job Type Code'' in (\u0027002000\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027003602\u0027,\u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027)#(lf)                      then \u0027NFR1\u0027 #(lf)        end) as FR_SEGMENT,#(lf)        trim(concat_ws(\u0027 \u0027,dd.CHFC_DSGT_CDE,dd.CLF_DSGT_CDE,dd.CLU_DSGT_CDE,dd.CFA_DSGT_CDE,dd.CFP_DSGT_CDE,dd.FIC_DSGT_CDE,dd.FICF_DSGT_CDE,dd.LUTCF_DSGT_CDE)) AS Credentialsxx,#(lf)        concat_ws(\u0027 \u0027,dd.S1_LIC_STS_CDE,dd.S4_LIC_STS_CDE,dd.S6_LIC_STS_CDE,dd.S7_LIC_STS_CDE,dd.S9_LIC_STS_CDE,#(lf)        dd.S10_LIC_STS_CDE,dd.S22_LIC_STS_CDE,dd.S24_LIC_STS_CDE,dd.S26_LIC_STS_CDE,dd.S27_LIC_STS_CDE,#(lf)        dd.S51_LIC_STS_CDE,dd.S53_LIC_STS_CDE,dd.S62_LIC_STS_CDE,dd.S63_LIC_STS_CDE,dd.S65_LIC_STS_CDE,#(lf)        dd.S66_LIC_STS_CDE,dd.S86_LIC_STS_CDE,dd.S87_LIC_STS_CDE) as Licensesxx,  #(lf)          #(lf)       a.''Gender Code'' as GNDR_CDE, #(lf)       a.''Last Name'' as LST_NM, #(lf)       case when a.''Nick Name'' IN (\u0027 \u0027) then a.''First Name''#(lf)         else a.''Nick Name''#(lf)       end as FRST_NM, #(lf)       a.''Middle Name'' as MDDL_NM,#(lf)       xx.assigned_afa,#(lf)       case when zz.opcount is NULL then 0 #(lf)         else zz.opcount#(lf)       end as OP_Count #(lf)       #(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' a inner join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' as aa#(lf)    on (a.''Employee Identifier''=aa.''Source System Key Text'' and aa.''Current Row Indicator'' = \u0027Y\u0027)  left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' b #(lf)    on (a.''Employee Identifier''= b.''Sales Hierarchy Identifier'') left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' c #(lf)    on (a.''Employee Identifier''= c.''Source System Key Text'' AND c.''Current Row Indicator'' = \u0027Y\u0027) left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' cc #(lf)    on (c.''Report to ID''= cc.''Source System Key Text'' AND cc.''Current Row Indicator'' = \u0027Y\u0027) left join  #(lf)        (select d.''Employee Identifier'',#(lf)                (case when \u0027Y\u0027 = d.''Chartered Financial Consultant Designation Code'' THEN \u0027ChFC\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS CHFC_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Chartered Leadership Fellow Designation Code'' THEN \u0027CLF\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS CLF_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Chartered Life Underwriter Designation Code'' THEN \u0027CLU\u0027#(lf)                   else \u0027 \u0027 #(lf)                 end) AS CLU_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Chartered Financial Analyst Designation Code'' THEN \u0027CFA\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS CFA_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Fraternal Insurance Counselor Designation Code'' THEN \u0027FIC\u0027#(lf)                   else \u0027 \u0027 #(lf)                 end) AS FIC_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Fraternal Insurance Counselor Fellow Designation Code'' THEN \u0027FICF\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS FICF_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Certified Financial Planner Designation Code'' THEN \u0027CFP\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS CFP_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Life Underwriter Training Counsel Fellow Designation Code'' THEN \u0027LUTCF\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS LUTCF_DSGT_CDE,#(lf)                (case when \u0027Y\u0027 = d.''Series One License Status Code'' THEN \u00271\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S1_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Four License Status Code'' THEN \u00274\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S4_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Six License Status Code'' THEN \u00276\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S6_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Seven License Status Code'' THEN \u00277\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S7_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Nine License Status Code'' THEN \u00279\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S9_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Ten License Status Code'' THEN \u002710\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S10_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Twenty-two License Status Code'' THEN \u002722\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S22_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Twenty-four License Status Code'' THEN \u002724\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S24_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Twenty-six License Status Code'' THEN \u002726\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S26_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Twenty-seven License Status Code'' THEN \u002727\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S27_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Fifty-one License Status Code'' THEN \u002751\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S51_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Fifty-three License Status Code'' THEN \u002753\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S53_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Sixty-two License Status Code'' THEN \u002762\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S62_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Sixty-three License Status Code'' THEN \u002763\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S63_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Sixty-five License Status Code'' THEN \u002765\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S65_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Sixty-six License Status Code'' THEN \u002766\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S66_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Eighty-six License Status Code'' THEN \u002786\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S86_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Eighty-seven License Status Code'' THEN \u002787\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S87_LIC_STS_CDE#(lf)              #(lf)           from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' d#(lf)          where d.''Termination Date'' is null   #(lf)            and d.''Current Row Indicator'' = \u0027Y\u0027#(lf)            and d.''Employee Status Type Code'' in (\u0027A\u0027,\u0027L\u0027,\u0027I\u0027)) as dd#(lf)    on A.''Employee Identifier'' = dd.''Employee Identifier''  left join#(lf)           #(lf)        (select distinct aa.''Source System Key Text'',#(lf)#(tab)            (case when e.emp_count = 1 then f.emp_nm#(lf)                      when e.emp_count \u003e 1 then \u0027Multiple Associates\u0027#(lf)                   else \u0027None\u0027#(lf)                 end) as assigned_afa#(lf)           from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' as aa left join  #(lf)              (select e.''Report to ID'', #(lf)                      count(e.''Organization Dimension Surrogate Key'') as emp_count   #(lf)                 from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' e  #(lf)                where e.''Job Type Code'' in (\u0027002000\u0027,\u0027002010\u0027,\u0027002003\u0027,\u0027002011\u0027,\u0027002012\u0027,\u0027003100\u0027,#(lf)                                            \u0027002017\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027002018\u0027,\u0027002019\u0027,\u0027003500\u0027,#(lf)                                            \u0027002022\u0027,\u0027002024\u0027,\u0027002025\u0027,\u0027002026\u0027,\u0027002027\u0027,\u0027002030\u0027,#(lf)                                            \u0027002031\u0027,\u0027002032\u0027)#(lf)                  and e.''Employee Status Type Code'' = \u0027A\u0027 #(lf)                  and e.''Current Row Indicator'' = \u0027Y\u0027#(lf)                  and e.''Report to ID'' \u003c\u003e \u0027'' ''\u0027 #(lf)                  and e.''Effective End Date'' = \u00279999-12-31\u0027 #(lf)               group by ''Report to ID'') as e #(lf)             on aa.''Source System Key Text'' = e.''Report to ID'' left join#(lf)         #(lf)              (select f.''Organization Dimension Surrogate Key'',#(lf)                      f.''Last Name''||\u0027, \u0027||f.''First Name'' as EMP_NM, #(lf)                      f.''Report to ID''  #(lf)                 from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' f#(lf)                where (f.''Job Type Code'' in (\u0027002000\u0027,\u0027002010\u0027,\u0027002003\u0027,\u0027002011\u0027,\u0027002012\u0027,\u0027003100\u0027,#(lf)                                             \u0027002017\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027002018\u0027,\u0027002019\u0027,\u0027003500\u0027,#(lf)                                             \u0027002022\u0027,\u0027002024\u0027,\u0027002025\u0027,\u0027002026\u0027,\u0027002027\u0027,\u0027002030\u0027,#(lf)                                             \u0027002031\u0027,\u0027002032\u0027) or #(lf)                      f.''Department Identifier'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027)) #(lf)                  and f.''Department Identifier'' not in (\u00272410\u0027,\u00273005\u0027,\u00277151\u0027,\u00277152\u0027,\u00279150\u0027,\u00279134\u0027,#(lf)                                                        \u0027NA\u0027,\u00274100\u0027,\u00276053\u0027,\u00276100\u0027,\u00278900\u0027) #(lf)                  and f.''Employee Status Type Code'' = \u0027A\u0027 #(lf)                  and f.''Current Row Indicator'' = \u0027Y\u0027#(lf)                  and f.''Report to ID'' \u003c\u003e \u0027'' ''\u0027 #(lf)                  and f.''Effective End Date'' = \u00279999-12-31\u0027) as f  #(lf)              on e.''Report to ID''=f.''Report to ID''#(lf)          where (aa.''Job Type Code'' in (\u0027002000\u0027,\u0027002010\u0027,\u0027002003\u0027,\u0027002011\u0027,\u0027002012\u0027,\u0027003100\u0027,#(lf)                                        \u0027002017\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027002018\u0027,\u0027002019\u0027,\u0027003500\u0027,#(lf)                                        \u0027002022\u0027,\u0027002024\u0027,\u0027002025\u0027,\u0027002026\u0027,\u0027002027\u0027,\u0027002030\u0027,#(lf)                                        \u0027002031\u0027,\u0027002032\u0027) or #(lf)                aa.''Department Identifier'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027)) #(lf)            and aa.''Department Identifier'' not in (\u00272410\u0027,\u00273005\u0027,\u00277151\u0027,\u00277152\u0027,\u00279150\u0027,\u00279134\u0027,#(lf)                                                   \u0027NA\u0027,\u00274100\u0027,\u00276053\u0027,\u00276100\u0027,\u00278900\u0027) #(lf)            and aa.''Current Row Indicator'' = \u0027Y\u0027#(lf)            and aa.''Employee Status Type Code'' = \u0027A\u0027 #(lf)            and aa.''Report to ID'' \u003c\u003e \u0027'' ''\u0027 #(lf)            and aa.''Effective End Date'' = \u00279999-12-31\u0027) as xx#(lf) #(lf)    on a.''Employee Identifier''=xx.''Source System Key Text'' left join #(lf)      (select count(z.''Organization Dimension Surrogate Key'') as OPCOUNT,   #(lf)                    z.''Report to ID'' #(lf)         from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' z  #(lf)        where z.''Current Row Indicator'' = \u0027Y\u0027#(lf)          and z.''Field Professional Roles'' in (\u0027Unlicensed Office Professionals\u0027,\u0027Licensed Office Professionals\u0027)#(lf)          and z.''Employee Status Type Code'' in (\u0027A\u0027,\u0027I\u0027,\u0027L\u0027)#(lf)       group by ''Report to ID'') as zz#(lf)         #(lf)    on a.''Employee Identifier'' =zz.''Report to ID''  #(lf)#(lf) where a.''Employee Status Type Code'' IN (\u0027A\u0027,\u0027I\u0027,\u0027L\u0027)#(lf)   and (c.''Job Family Code'' LIKE \u0027FLD%\u0027 OR#(lf)        c.''Job Family Code'' =\u0027SALES\u0027 OR#(lf)        c.''TF Job Class Code'' =\u0027FAC\u0027)#(lf)   and a.''Termination Date'' is NULL #(lf)   and (a.''Job Type Code'' in (\u0027002003\u0027,\u0027002010\u0027,\u0027002011\u0027,\u0027002012\u0027,\u0027002016\u0027,\u0027002017\u0027,#(lf)                              \u0027002000\u0027,\u0027002022\u0027,\u0027002024\u0027,\u0027002025\u0027,\u0027002026\u0027,\u0027002027\u0027,#(lf)                              \u0027002030\u0027,\u0027002031\u0027,\u0027002032\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027003602\u0027,#(lf)                              \u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027) or #(lf)       a.''Organization Department Code'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027)) #(lf)   and c.''Department Identifier'' not in (\u00272410\u0027,\u00273005\u0027,\u00277151\u0027,\u00277152\u0027,\u00279150\u0027,\u00279134\u0027,#(lf)                                         \u0027NA\u0027,\u00274100\u0027,\u00276053\u0027,\u00276100\u0027,\u00278900\u0027) #(lf)   and b.''Effective End Date'' = \u00279999-12-31\u0027 #(lf)   and b.''Current Row Indicator'' = \u0027Y\u0027 #(lf)   and a.''Current Row Indicator'' = \u0027Y\u0027 #(lf)order by a.''Employee Identifier''', null, [EnableFolding=true]),    #'Added Custom' = Table.AddColumn(Source, 'Split_Cred', each Text.Split( [CREDENTIALSXX], ' ' )),    #'Added Custom1' = Table.AddColumn(#'Added Custom', 'Shrink_Cred', each List.Select([Split_Cred], each _ \u003c\u003e '')),    #'Added Custom2' = Table.AddColumn(#'Added Custom1', 'Credentials', each Text.Combine([Shrink_Cred], ' ')),    #'Added Custom3' = Table.AddColumn(#'Added Custom2', 'Split_License', each Text.Split( [LICENSESXX], ' ' )),    #'Added Custom4' = Table.AddColumn(#'Added Custom3', 'Shrink_License', each List.Select([Split_License], each _ \u003c\u003e '')),    #'Added Custom5' = Table.AddColumn(#'Added Custom4', 'License', each Text.Combine([Shrink_License], ' ')),    #'Removed Columns' = Table.RemoveColumns(#'Added Custom5',{'Split_Cred', 'Shrink_Cred', 'Split_License', 'Shrink_License', 'CREDENTIALSXX', 'LICENSESXX'})in    #'Removed Columns'"}]},{"name":"Pending_Applications","isHidden":false,"storageMode":"Import","columns":[{"name":"Financial Services Agreement Surrogate Key","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"RFOCODE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFONAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ZONE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ZONE_NAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CORPORATEEMPLOYEEID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"AgentFullName","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"New Business Application Number","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"BENEFITCONTRACTNUMBER","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PRODUCT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LOB","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CIFOWNERFULLNAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Financial Services Agreement Owner Person Surrogate Key","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"MBR_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ESTIMATEDSALESCREDITAMT","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"BENEFIT_AMOUNT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"DAYS_PENDING","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"TRANSRECEIVEDT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TRANSDESC","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CTRC_PND_CATG_EXCD","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"EstSalesCredit","expression":" var _total = calculate(sum(\u0027Pending_Applications\u0027[ESTIMATEDSALESCREDITAMT])) ReturnIF(ISBLANK(_total),' ',_total)","isHidden":false}],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'select Distinct aa.''Financial Services Agreement Surrogate Key'',#(lf)                c.''Department Identifier'' as RFOCode,#(lf)                c.''Department Name'' as RFOName,#(lf)                substring(c.''RFO Zone Identifier'',6,2) as Zone,#(lf)                substring(c.''RFO Zone Name'',1,18) as Zone_Name,#(lf)                c.''Source System Key Text'' as CorporateEmployeeID,#(lf)                --trim(c.''First Name'') || \u0027 \u0027 || trim(c.''Last Name'') as ''AgentFullName'',#(lf)                trim(c.''Last Name'')||\u0027, \u0027||trim(c.''First Name'') as ''AgentFullName'',#(lf)                aa.''New Business Application Number'' as ''New Business Application Number'',#(lf)                d.''Benefit Contract Number'' as BenefitContractNumber,#(lf)                aa.''Adjusted Level 3 Product Line Of Business Code'' as Product,#(lf)                e.''Benefit Contract Type Description'' as LOB,#(lf)                --trim(f.''First Name'')||\u0027 \u0027|| trim(f.''Last Name'') as CIFOwnerFullName,#(lf)                trim(f.''Last Name'')||\u0027, \u0027||trim(f.''First Name'') as CIFOwnerFullName,#(lf)                aa.''Financial Services Agreement Owner Person Surrogate Key'',#(lf)                h.''Membership Type Description'' as MBR_TYP_CDE,#(lf)                aa.''New Sales Credit Estimated Amount'' as EstimatedSalesCreditAmt,#(lf)                aa.''New Business Application Face Amount'' as Benefit_Amount,#(lf)                aa.''New Business Application Days Pending Count'' as Days_Pending,#(lf)                aa.''Application Receive Date Surrogate Key'' as TransReceiveDT,#(lf)                aa.''New Business Application Type Description'' as TransDesc,#(lf)                aa.''New Business Application Current Pending Category Description'' as CTRC_PND_CATG_EXCD#(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''New Business Applications Summarized'' as aa left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Contract Dimension'' as d#(lf)    on aa.''Financial Services Agreement Surrogate Key''=d.''Contract Dimension Surrogate Key'' left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Conformed Contract Dimension Detail''  as e on#(lf)     (d.''Benefit Contract Number''= e.''Benefit Contract Number''  and d.''Benefit Contract Type Code'' = e.''Benefit Contract Type Code'') left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Person Dimension'' as f#(lf)    on aa.''Financial Services Agreement Owner Person Surrogate Key'' = f.''Person Dimension Surrogate Key'' left join#(lf)       (''ENTERPRISE_EDW''.''PRESENTATION_01''.''Membership Fact'' as g inner join #(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Membership Type Dimension'' as h #(lf)        on g.''Membership Type Dimension Surrogate Key'' = h.''Membership Type Dimension Surrogate Key'' and g.''Effective End Date''=\u00279999-12-31\u0027) #(lf)    on f.''Person Dimension Surrogate Key'' = g.''Person Dimension Surrogate Key''  left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' as c#(lf)    on(aa.''Writing Agent Surrogate Key'' = c.''Organization Dimension Surrogate Key'')   #(lf)  where aa.''New Business Application Current Status Description'' =\u0027Pending\u0027 #(lf)    and c.''Current Row Indicator'' = \u0027Y\u0027#(lf)    and d.''Current Row Indicator'' = \u0027Y\u0027#(lf)    and e.''Current Row Indicator'' = \u0027Y\u0027#(lf)    and f.''Current Row Indicator'' = \u0027Y\u0027', null, [EnableFolding=true]),    #'Replaced Value' = Table.ReplaceValue(Source,'LIFE','Life',Replacer.ReplaceText,{'PRODUCT'}),    #'Replaced Value1' = Table.ReplaceValue(#'Replaced Value','HLTH','Health',Replacer.ReplaceText,{'PRODUCT'}),    #'Replaced Value2' = Table.ReplaceValue(#'Replaced Value1','ANN','Annuity',Replacer.ReplaceText,{'PRODUCT'}),    #'Replaced Value3' = Table.ReplaceValue(#'Replaced Value2',null,0,Replacer.ReplaceValue,{'ESTIMATEDSALESCREDITAMT'}),    #'Replaced Value4' = Table.ReplaceValue(#'Replaced Value3',null,0,Replacer.ReplaceValue,{'BENEFIT_AMOUNT'}),    #'Replaced Value5' = Table.ReplaceValue(#'Replaced Value4','Unknown, Unknown','',Replacer.ReplaceText,{'CIFOWNERFULLNAME'})in    #'Replaced Value5'"}]},{"name":"Vital Stats Categories","isHidden":false,"storageMode":"Import","columns":[{"name":"Category","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"Order","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"}],"measures":[],"source":[{"expression":"  Union(Row ('Category','Last Week','Order',1),        Row('Category','4-Week Average','Order',2),        Row('Category','8-Week Average','Order',3),        Row('Category','13-Week Average','Order',4),        Row('Category','52-Week Average','Order',5)  )"}]},{"name":"Prospect Connects","isHidden":false,"storageMode":"Import","columns":[{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"VitalStatus Indicator","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Prospect Connects Total","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Prospect Connect 4 week avg","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Prospect Connect 8 week avg","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Prospect Connect 13 week avg","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Prospect Connect 52 week avg","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Last Week","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Sql.Database('dbedwdwprd', 'enterprisedatamart', [Query='select pers_dim.[Source System Key Text] as ThriventId,#(lf)   -- appt_fct.[Worker Appointment Association],#(lf)      appt_fct.[Appointment Dimension Surrogate Key],#(lf)      appt_fct.[Person Dimension Surrogate Key],#(lf)   -- appt_fct.[Appointment Organization Dimension Key],#(lf)   -- appt_fct.[Appointment Organization Dimension Surrogate Key],#(lf)      sum(appt_fct.[Appointment Occurs]) [appt_occurs],#(lf)      max(appt_fct.[Person Occurs]) [Person Occurs],#(lf)      mbr_dim.[Membership Type Description],#(lf)      appt_dim.[Appointment Date],#(lf)      appt_dim.[Appointment Type Description] [Appointment Type Code],#(lf)      date_dim.[Performance Year Name],#(lf)      org_dim.[Source System Key Text] [EMP_ID],#(lf)    --sale_hier_dim.ORZN_DEPT_CDE [RFO Zone Name],#(lf)    --sale_hier_dim.ORZN_ZONE_CDE [RFO Zone Identifier],#(lf)      org_dim.[First Name] + \u0027 \u0027 + org_dim.[Last Name],#(lf)      (Select max(A.[Life Segment Value Description])#(lf)         from EnterpriseDataMart.DM_01.[Person Dimension] A#(lf)        where appt_fct.[Person Dimension Surrogate Key]=A.[Person Dimension Surrogate Key]#(lf)        and A.[Current Row Indicator] = \u0027Y\u0027) as [Life Segment Value Description] #(lf)#(lf)  from EnterpriseDataMart.DM_01.[Appointment Combine Fact] appt_fct left join #(lf)       EnterpriseDataMart.DM_01.[Person Dimension] as Pers_dim#(lf)    on (appt_fct.[Person Dimension Surrogate Key]=pers_dim.[Person Dimension Surrogate Key] and#(lf)        appt_fct.[Person Dimension Version Number] = pers_dim.[Person Dimension Version Number]) left join#(lf)       EnterpriseDataMart.DM_01.[Membership Type Dimension] mbr_dim#(lf)    on (appt_fct.[Membership Type Dimension Surrogate Key]=mbr_dim.[Membership Type Dimension Surrogate Key]) left join#(lf)#(lf)       EnterpriseDataMart.DM_01.[Appointment Dimension] appt_dim#(lf)    on (appt_fct.[Appointment Dimension Surrogate Key]=appt_dim.[Appointment Dimension Surrogate Key]) left join#(lf)#(lf)       EnterpriseDataMart.DM_01.[Date Dimension] date_dim#(lf)    on (appt_dim.[Appointment Date]=date_dim.[Calendar Date Date]) left join#(lf)#(lf)       EnterpriseDataMart.DM_01.[Organization Dimension] org_dim#(lf)    on ((appt_fct.[Appointment Organization Dimension Surrogate Key]=org_dim.[Organization Dimension Surrogate Key]) and #(lf)       ((org_dim.[Effective Begin Date] \u003c= appt_dim.[Appointment Date]) and (appt_dim.[Appointment Date] \u003c= org_dim.[Effective End Date]))) left join#(lf)#(tab) #(lf)       EnterpriseDataMart.DM_01.[SALE_HIER_DIM] sale_hier_dim#(lf)    on ((org_dim.[Source System Key Text]=sale_hier_dim.[SALE_HIER_ID] and#(lf)#(tab)(sale_hier_dim.EFF_BEG_DT\u003c=appt_dim.[Appointment Date]) and#(lf)#(tab)(appt_dim.[Appointment Date]\u003c= sale_hier_dim.EFF_END_DT) and #(lf)#(tab) sale_hier_dim.CURR_ROW_IND = \u0027Y\u0027))#(lf)#(lf)where appt_dim.[Current Row Indicator] = \u0027Y\u0027#(lf)  and appt_dim.[Appointment Create Date Over 14 Days] = \u0027N\u0027#(lf)  and appt_fct.[Person Dimension Surrogate Key] \u003c\u003e 0#(lf)  and appt_fct.[Appointment Status Name] \u003c\u003e \u0027Declined\u0027#(lf)  and appt_dim.[Appointment Type Code] \u003c\u003e \u0027UNK\u0027#(lf)  and sale_hier_dim.ORZN_DEPT_CDE in (\u00270115\u0027,\u00270165\u0027,\u00270190\u0027,\u00270240\u0027,\u00270283\u0027,\u00270291\u0027,\u00270361\u0027,\u00270365\u0027, \u00270383\u0027,\u00270384\u0027,\u00270410\u0027,\u00270435\u0027,\u00270475\u0027,\u00270496\u0027,\u00270525\u0027,\u00270529\u0027,\u00270810\u0027)#(lf) and (org_dim.[Job Type Code] in (\u0027002000\u0027, \u0027002003\u0027, \u0027002008\u0027, \u0027002010\u0027, \u0027002011\u0027, \u0027002012\u0027, \u0027002016\u0027, \u0027002022\u0027, \u0027002024\u0027, \u0027002025\u0027, \u0027002026\u0027, \u0027002027\u0027, \u0027002030\u0027, \u0027002031\u0027, \u0027002032\u0027, \u0027003100\u0027, \u0027003500\u0027)#(lf)  or  org_dim.[Department Identifier] in (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027)) #(lf)  and appt_dim.[Event Result Description] not in (\u0027No Show\u0027,\u0027Cancelled\u0027)#(lf)  and date_dim.[Performance Year Name] in (\u00272021\u0027,\u00272022\u0027,\u00272023\u0027)#(lf)#(lf)group by#(lf)--appt_fct.[Worker Appointment Association],#(lf)  appt_fct.[Appointment Dimension Surrogate Key],#(lf)  appt_fct.[Person Dimension Surrogate Key],#(lf)  mbr_dim.[Membership Type Description],#(lf)  appt_dim.[Appointment Date],#(lf)  appt_dim.[Appointment Type Description],#(lf)  date_dim.[Performance Year Name],#(lf)--sale_hier_dim.ORZN_DEPT_CDE,#(lf)--sale_hier_dim.ORZN_ZONE_CDE,#(lf)  org_dim.[Source System Key Text],#(lf)  org_dim.[First Name] + \u0027 \u0027 + org_dim.[Last Name],#(lf)  pers_dim.[Source System Key Text] #(lf)--appt_fct.[Appointment Organization Dimension Key],#(lf)--appt_fct.[Appointment Organization Dimension Surrogate Key]#(tab) #(lf)#(lf)having #(lf)sum(appt_fct.[Appointment Occurs])\u003e0']),    #'Filtered Rows' = Table.SelectRows(Source, each ([Appointment Type Code] = 'Connect') and ([Membership Type Description] \u003c\u003e 'Benefit')),    #'Changed Type' = Table.TransformColumnTypes(#'Filtered Rows',{{'Appointment Date', type date}}),    Custom1 = Table.AddColumn(#'Changed Type', 'Tasks Days from Today', each Duration.Days (DateTime.Date(DateTime.LocalNow()) - [Appointment Date] )),    Custom2 = Table.AddColumn(#'Custom1', 'Type', each 'Prospect Connects'),    Custom3 = Table.AddColumn(#'Custom2', 'Start of Week', each Date.StartOfWeek([#'Appointment Date'],1)),    Custom4 = Table.AddColumn(#'Custom3', 'VitalStatus Indicator', each if( [Tasks Days from Today] \u003e= 358 and [Tasks Days from Today] \u003c= 364) then '52'else if( [Tasks Days from Today] \u003e= 57 and [Tasks Days from Today] \u003c= 91) then '13'else if( [Tasks Days from Today] \u003e= 29 and [Tasks Days from Today] \u003c= 56) then '8'else if( [Tasks Days from Today] \u003e= 8 and [Tasks Days from Today] \u003c= 28) then '4'else if ([Tasks Days from Today] \u003e= 0 and [Tasks Days from Today] \u003c= 7) then 'Last Week'else ' '),    Custom5 = Table.SelectRows(#'Custom4', each ([VitalStatus Indicator] \u003c\u003e ' ')),    #'Renamed Columns' = Table.RenameColumns(Custom5,{{'', 'FP Name'}}),    #'Grouped Rows' = Table.Group(#'Renamed Columns', {'EMP_ID', 'Type', 'VitalStatus Indicator'}, {{'Prospect Connects Total', each List.Sum([appt_occurs]), type nullable number}}),    #'Added Custom' = Table.AddColumn(#'Grouped Rows', 'Prospect Connect 4 week avg', each if[VitalStatus Indicator] = '4' then ([Prospect Connects Total]/4) else null),    Custom6 = Table.AddColumn(#'Added Custom', 'Prospect Connect 8 week avg', each if[VitalStatus Indicator] = '8' then ([Prospect Connects Total]/8) else null),    Custom7 = Table.AddColumn(#'Custom6', 'Prospect Connect 13 week avg', each if[VitalStatus Indicator] = '13' then ([Prospect Connects Total]/13) else null),    Custom8 = Table.AddColumn(#'Custom7', 'Prospect Connect 52 week avg', each if[VitalStatus Indicator] = '52' then ([Prospect Connects Total]/52) else null),    #'Added Custom1' = Table.AddColumn(Custom8, 'Last Week', each if [VitalStatus Indicator] = 'Last Week' then [Prospect Connects Total] else null)in    #'Added Custom1'"}]},{"name":"RFO_PENDING_DETAIL","isHidden":false,"storageMode":"Import","columns":[{"name":"ORZN_ZONE_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_SUB_DEPT_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_UNIT_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP_NAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CorporateEmployeeID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"AgentFullName","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LOB","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CIFOwnerFullName","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MBR_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"BenefitContractNumber","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EstimatedSalesCreditAmt","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Benefit_Amount","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Days_Pending","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"TransReceiveDt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TransDesc","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CTRC_PND_CATG_EXCD","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////pnfiles002b//fp_cifs_7834_sas$//MarketAnalysis//FieldReporting//SMIS//RFO_PENDING_DETAIL.csv'),[Delimiter=',', Columns=22, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'RFOCode', Int64.Type}, {'RFOName', type text}, {'Zone', Int64.Type}, {'Zone_Name', type text}, {'CorporateEmployeeID', type text}, {'AgentFullName', type text}, {'Product', type text}, {'LOB', type text}, {'CIFOwnerFullName', type text}, {'MBR_TYP_CDE', type text}, {'BenefitContractNumber', type text}, {'EstimatedSalesCreditAmt', Int64.Type}, {'Benefit_Amount', Int64.Type}, {'Days_Pending', Int64.Type}, {'TransReceiveDt', type date}, {'TransDesc', type text}, {'CTRC_PND_CATG_EXCD', type text}, {'Count', Int64.Type}}),    #'Removed Columns' = Table.RemoveColumns(#'Changed Type',{'RFOCode', 'RFOName', 'Zone', 'Zone_Name', 'Count'}),    #'Filtered Rows' = Table.SelectRows(#'Removed Columns', each Text.StartsWith([CorporateEmployeeID], 'TS'))in    #'Filtered Rows'"}]},{"name":"Pace Performance Snapshot","isHidden":false,"storageMode":"Import","columns":[{"name":"Organization Dimension Surrogate Key","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Organization Dimension Version Number","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Organization Lead Dimension Surrogate Key","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Organization Lead Dimension Version Number","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Pace Performance Target Dimension Surrogate Key","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Pace Performance Target Version Number","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Process Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Tenure Data","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Production Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Snapshot Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Business Interruption Day Value","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Leader_TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Life and Health GRID Credit Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"LH_Pace_Target","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"GRID Credit Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Pace_Target","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"ABOVE_BELOW","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Prior Advisor Experience Indicator","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Tenure_Months","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Tenure Group","dataType":"String","isHidden":false,"expression":"if(\u0027Pace Performance Snapshot\u0027[Tenure_Months] \u003c= 6, 'NFA \u003c 6 mos', if(\u0027Pace Performance Snapshot\u0027[Tenure_Months] \u003c= 12, 'NFA1', if(\u0027Pace Performance Snapshot\u0027[Tenure_Months] \u003c=24, 'NFA2', if(\u0027Pace Performance Snapshot\u0027[Tenure_Months] \u003c= 36, 'NFA3', 'NFA4'))))","columnType":"Calculated"},{"name":"Month","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"EOY_Month","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"EOY_Tenure","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EOQ_Tenure","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EOM_Tenure","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"FP_Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Leader_Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EOY_Target","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EOY_Range_Amt","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EOQ_Target","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EOQ_Range_Amt","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EOM_Target","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EOM_Range_Amt","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EOQ_Month","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Job Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ABOVE_BELOW_LH","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CURR_WK_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"NFA1 Indicator","dataType":"String","isHidden":false,"expression":"if(\u0027Pace Performance Snapshot\u0027[Tenure_Months] \u003c= 12, 'Y', 'N')","columnType":"Calculated"},{"name":"Current Pace Target","dataType":"String","isHidden":false,"expression":"if(\u0027Pace Performance Snapshot\u0027[Process Date]=date(2023,12,31),calculate(sum(\u0027Pace Performance Snapshot\u0027[EOY Pace Target])),if(\u0027Pace Performance Snapshot\u0027[TSID] in {'TS78250','TS75194','TS77919'},calculate(sum(\u0027Pace Performance Snapshot\u0027[Target AMT])+((sum(\u0027Pace Performance Snapshot\u0027[Tenure_Months])-sum(\u0027Pace Performance Snapshot\u0027[Month]))*sum(\u0027Pace Performance Snapshot\u0027[Target Range]))),    calculate(sum(\u0027Pace Performance Snapshot\u0027[Pace_Target]))))","columnType":"Calculated"},{"name":"Target AMT","dataType":"String","isHidden":false,"expression":"related(\u0027DM_01 PACE_PERFORMANCE_TARGET_DIM\u0027[GRID_CR_AMT])","columnType":"Calculated"},{"name":"Target Range","dataType":"String","isHidden":false,"expression":"related(\u0027DM_01 PACE_PERFORMANCE_TARGET_DIM\u0027[GRID_CR_RNG_AMT])","columnType":"Calculated"},{"name":"TSL/Assoc Rep","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EOY Pace Target","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"ABOVE/BELOW EOY","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market Developers.RDL NAME","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Above Count","expression":"var MAXDATE = max(\u0027Pace Performance Snapshot\u0027[Process Date])returncalculate(    distinctcount(\u0027Pace Performance Snapshot\u0027[TSID]),    filter(\u0027Pace Performance Snapshot\u0027,\u0027Pace Performance Snapshot\u0027[ABOVE/BELOW]='ABOVE'),    \u0027Pace Performance Snapshot\u0027[Process Date]= MAXDATE)","isHidden":false},{"name":"Below Count","expression":"var MAXDATE = max(\u0027Pace Performance Snapshot\u0027[Process Date])returncalculate(    distinctcount(\u0027Pace Performance Snapshot\u0027[TSID]),     filter(\u0027Pace Performance Snapshot\u0027,\u0027Pace Performance Snapshot\u0027[ABOVE/BELOW]='BELOW'),    \u0027Pace Performance Snapshot\u0027[Process Date]= MAXDATE)","isHidden":false},{"name":"% Above Pace","expression":"divide(\u0027Pace Performance Snapshot\u0027[Above Count],\u0027Pace Performance Snapshot\u0027[Above Count]+[Below Count])","isHidden":false},{"name":"Current GAP to Target","expression":"calculate(\u0027Pace Performance Snapshot\u0027[Pace Amount]-\u0027Pace Performance Snapshot\u0027[Current_Pace_Target],\u0027Pace Performance Snapshot\u0027[ABOVE_BELOW]\u003c\u003e'',\u0027Pace Performance Snapshot\u0027[Job Type Code]\u003c\u003e'002010')","isHidden":false},{"name":"EOY Target","expression":"var MAXDATE = max(\u0027Pace Performance Snapshot\u0027[Process Date])returncalculate(sum(\u0027Pace Performance Snapshot\u0027[EOY_Target])+(sum(\u0027Pace Performance Snapshot\u0027[EOY_Range_Amt])*(sum(\u0027Pace Performance Snapshot\u0027[EOY_Tenure])-sum(\u0027Pace Performance Snapshot\u0027[EOY_Month]))),\u0027Pace Performance Snapshot\u0027[ABOVE_BELOW]\u003c\u003e'',\u0027Pace Performance Snapshot\u0027[Process Date]=MAXDATE)","isHidden":false},{"name":"GAP to EOY Target","expression":"calculate(sum(\u0027Pace Performance Snapshot\u0027[GRID Credit Amount])+sum(RFO_PENDING_DETAIL[EstimatedSalesCreditAmt])-\u0027Grid Revenue\u0027[Grid Revenue Falling Off EOY]-\u0027Pace Performance Snapshot\u0027[EOY Target],\u0027Pace Performance Snapshot\u0027[ABOVE_BELOW]\u003c\u003e'')","isHidden":false},{"name":"EOQ Target","expression":"var MAXDATE = max(\u0027Pace Performance Snapshot\u0027[Process Date])returncalculate(sum(\u0027Pace Performance Snapshot\u0027[EOQ_Target])+(sum(\u0027Pace Performance Snapshot\u0027[EOQ_Range_Amt])*(sum(\u0027Pace Performance Snapshot\u0027[EOQ_Tenure])-sum(\u0027Pace Performance Snapshot\u0027[EOQ_Month]))),\u0027Pace Performance Snapshot\u0027[Process Date]=MAXDATE)","isHidden":false},{"name":"EOM Target","expression":"var MAXDATE = max(\u0027Pace Performance Snapshot\u0027[Process Date])returncalculate(sum(\u0027Pace Performance Snapshot\u0027[EOM_Target])+(sum(\u0027Pace Performance Snapshot\u0027[EOM_Range_Amt])*(sum(\u0027Pace Performance Snapshot\u0027[EOM_Tenure])-sum(\u0027Pace Performance Snapshot\u0027[Month]))),\u0027Pace Performance Snapshot\u0027[ABOVE_BELOW]\u003c\u003e'',\u0027Pace Performance Snapshot\u0027[Process Date]=MAXDATE)","isHidden":false},{"name":"Background Color","expression":"if(MAX(\u0027Pace Performance Snapshot\u0027[Prior Advisor Experience Indicator])='Y','#87cefa',if(MAX(\u0027Pace Performance Snapshot\u0027[Job Type Code])='002022','#87cefa',if(MAX(\u0027Pace Performance Snapshot\u0027[Job Type Code])='002010','#FF7F7F')))","isHidden":false},{"name":"Current GAP to LH Target","expression":"calculate(sum(\u0027Pace Performance Snapshot\u0027[Life and Health GRID Credit Amount])-sum(\u0027Pace Performance Snapshot\u0027[LH_Pace_Target]),\u0027Pace Performance Snapshot\u0027[ABOVE_BELOW]\u003c\u003e'',\u0027Pace Performance Snapshot\u0027[Job Type Code]\u003c\u003e'002010')","isHidden":false},{"name":"% Below Pace","expression":"divide(\u0027Pace Performance Snapshot\u0027[Below Count],\u0027Pace Performance Snapshot\u0027[Above Count]+[Below Count])","isHidden":false},{"name":"Above Count LH","expression":"var MAXDATE = max(\u0027Pace Performance Snapshot\u0027[Process Date])returncalculate(    distinctcount(\u0027Pace Performance Snapshot\u0027[TSID]),    filter(\u0027Pace Performance Snapshot\u0027,\u0027Pace Performance Snapshot\u0027[ABOVE/BELOW LH]='ABOVE'),    \u0027Pace Performance Snapshot\u0027[Process Date]= MAXDATE)","isHidden":false},{"name":"Below Count LH","expression":"var MAXDATE = max(\u0027Pace Performance Snapshot\u0027[Process Date])returncalculate(    distinctcount(\u0027Pace Performance Snapshot\u0027[TSID]),    filter(\u0027Pace Performance Snapshot\u0027,\u0027Pace Performance Snapshot\u0027[ABOVE/BELOW LH]='BELOW'),    \u0027Pace Performance Snapshot\u0027[Process Date]= MAXDATE)","isHidden":false},{"name":"% Above Pace LH","expression":"divide(\u0027Pace Performance Snapshot\u0027[Above Count LH],\u0027Pace Performance Snapshot\u0027[Above Count LH]+[Below Count LH])","isHidden":false},{"name":"% Below Pace LH","expression":"divide(\u0027Pace Performance Snapshot\u0027[Below Count LH],\u0027Pace Performance Snapshot\u0027[Above Count LH]+[Below Count LH])","isHidden":false},{"name":"Pace Amount","expression":"var MAXDATE = max(\u0027Pace Performance Snapshot\u0027[Process Date])returncalculate(sum(\u0027Pace Performance Snapshot\u0027[GRID Credit Amount]),\u0027Pace Performance Snapshot\u0027[Process Date]=MAXDATE)","isHidden":false},{"name":"Pace Target","expression":"var MAXDATE = max(\u0027Pace Performance Snapshot\u0027[Process Date])returncalculate(sum(\u0027Pace Performance Snapshot\u0027[Pace_Target]),\u0027Pace Performance Snapshot\u0027[Process Date]=MAXDATE)","isHidden":false},{"name":"LH Pace Amount","expression":"var MAXDATE = max(\u0027Pace Performance Snapshot\u0027[Process Date])returncalculate(sum(\u0027Pace Performance Snapshot\u0027[Life and Health GRID Credit Amount]),\u0027Pace Performance Snapshot\u0027[Process Date]=MAXDATE)","isHidden":false},{"name":"LH Pace Target","expression":"var MAXDATE = max(\u0027Pace Performance Snapshot\u0027[Process Date])returncalculate(sum(\u0027Pace Performance Snapshot\u0027[LH_Pace_Target]),\u0027Pace Performance Snapshot\u0027[Process Date]=MAXDATE)","isHidden":false},{"name":"NFA Count","expression":"calculate(    count(\u0027Pace Performance Snapshot\u0027[TSID]),    filter(\u0027Pace Performance Snapshot\u0027,\u0027Pace Performance Snapshot\u0027[ABOVE/BELOW]\u003c\u003e''))","isHidden":false},{"name":"Current GAP to Target Less Pending","expression":"calculate(\u0027Pace Performance Snapshot\u0027[Pace Amount]+sum(RFO_PENDING_DETAIL[EstimatedSalesCreditAmt])-\u0027Pace Performance Snapshot\u0027[Current_Pace_Target],\u0027Pace Performance Snapshot\u0027[ABOVE_BELOW]\u003c\u003e'')","isHidden":false},{"name":"GAP to EOQ Target Less Pending","expression":"calculate(sum(\u0027Pace Performance Snapshot\u0027[GRID Credit Amount])+sum(RFO_PENDING_DETAIL[EstimatedSalesCreditAmt])-\u0027Grid Revenue\u0027[Grid Revenue Falling Off EOQ]-\u0027Pace Performance Snapshot\u0027[EOQ Target],\u0027Pace Performance Snapshot\u0027[ABOVE_BELOW]\u003c\u003e'')","isHidden":false},{"name":"GAP to EOM Target Less Pending","expression":"calculate(sum(\u0027Pace Performance Snapshot\u0027[GRID Credit Amount])+sum(RFO_PENDING_DETAIL[EstimatedSalesCreditAmt])-\u0027Grid Revenue\u0027[Grid Revenue Falling Off EOM]-\u0027Pace Performance Snapshot\u0027[EOM Target],\u0027Pace Performance Snapshot\u0027[ABOVE_BELOW]\u003c\u003e'')","isHidden":false},{"name":"Historical Above Count","expression":"calculate(    count(\u0027Pace Performance Snapshot\u0027[TSID]),    filter(\u0027Pace Performance Snapshot\u0027,\u0027Pace Performance Snapshot\u0027[ABOVE/BELOW]='ABOVE'))","isHidden":false},{"name":"Historical Below Count","expression":"calculate(    count(\u0027Pace Performance Snapshot\u0027[TSID]),    filter(\u0027Pace Performance Snapshot\u0027,\u0027Pace Performance Snapshot\u0027[ABOVE/BELOW]='BELOW'))","isHidden":false},{"name":"Historical % Above Pace","expression":"if(ISBLANK([Historical Above Count])\u0026\u0026 NOT(ISBLANK([NFA Count])),0,divide(\u0027Pace Performance Snapshot\u0027[Historical Above Count],\u0027Pace Performance Snapshot\u0027[Historical Above Count]+[Historical Below Count]))","isHidden":false},{"name":"Current_Pace_Target","expression":"var MAXDATE = max(\u0027Pace Performance Snapshot\u0027[Process Date])returncalculate(sum(\u0027Pace Performance Snapshot\u0027[Current Pace Target]),\u0027Pace Performance Snapshot\u0027[Process Date]=MAXDATE)","isHidden":false},{"name":"ABOVE/BELOW","expression":"Var Pace_Amt = \u0027Pace Performance Snapshot\u0027[Pace Amount]Var Pace_Tgt = \u0027Pace Performance Snapshot\u0027[Current_Pace_Target]Var Diff = Pace_Amt - Pace_TgtReturnIF(FORMAT(\u0027Pace Performance Snapshot\u0027[Current GAP to Target],'Whole Number') \u003c\u003e '',   IF(Diff \u003e 0, 'ABOVE', 'BELOW'),   BLANK())","isHidden":false},{"name":"ABOVE/BELOW LH","expression":"Var Pace_Amt = \u0027Pace Performance Snapshot\u0027[LH Pace Amount]Var Pace_Tgt = \u0027Pace Performance Snapshot\u0027[LH Pace Target]Var Diff = Pace_Amt - Pace_TgtReturnIF(FORMAT(\u0027Pace Performance Snapshot\u0027[Current GAP to LH Target],'Whole Number') \u003c\u003e '',   IF(Diff \u003e 0, 'ABOVE', 'BELOW'),   BLANK())","isHidden":false},{"name":"Tonnage %","expression":"divide([Pace Amount],sum(\u0027Pace Performance Snapshot\u0027[Current Pace Target]))","isHidden":false}],"source":[{"expression":"let    Source = Sql.Database('dbedwdwprd', 'enterprisedatamart', [Query='SELECT #(lf) a.[Organization Dimension Surrogate Key]#(lf)      ,a.[Organization Dimension Version Number]#(lf)      ,a.[Organization Lead Dimension Surrogate Key]#(lf)      ,a.[Organization Lead Dimension Version Number]#(lf)      ,a.[Pace Performance Target Dimension Surrogate Key]#(lf)      ,a.[Pace Performance Target Version Number]#(lf)      ,a.[Process Date]#(lf)      ,case when b.[Source System Key Text] in (\u0027TS77919\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end as [Tenure Data]#(lf)         ,datediff(month, case when b.[Source System Key Text] in (\u0027TS77919\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end, DATEADD(mm, DATEDIFF(mm, 0, GETDATE()) + 1, -1)) as Month#(lf)         --,datediff(month, [Tenure Data], DATEADD (dd, +14, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()) +1, 0))) as EOQ_Month#(lf)#(tab)#(tab) ,datediff(month, case when b.[Source System Key Text] in (\u0027TS77919\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end, case when GETDATE()\u003eDATEFROMPARTS(year(getdate()),10,16) then (DATEADD (dd, -1, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()) + 1, 0)))#(lf)#(tab)#(tab) else DATEADD (dd, +14, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()-15) + 1, 0))#(lf)#(tab)#(tab) end) as EOQ_Month#(lf)#(tab)#(tab) --,(DATEADD (dd, -1, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()) + 1, 0))) as Current_QTR#(lf)#(tab)#(tab) /*,case when GETDATE()\u003eDATEFROMPARTS(year(getdate()),10,16) then (DATEADD (dd, -1, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()) + 1, 0)))#(lf)#(tab)#(tab) else DATEADD (dd, +14, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()-15) + 1, 0))#(lf)#(tab)#(tab) end as Quarter_End*/#(lf)#(tab)#(tab) --,DATEADD (dd, +14, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()), 0)) as Previous_QTR#(lf)         ,datediff(month, case when b.[Source System Key Text] in (\u0027TS77919\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end, DATEADD(yy, DATEDIFF(yy, 0, GETDATE()) + 1, -1)) as EOY_Month#(lf)         ,datediff(month, case when b.[Source System Key Text] in (\u0027TS77919\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end, [Process Date]) - #(lf)         (DATEPART(dd,case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end)*1.0-1.0)/DAY(EOMONTH(case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end)) + #(lf)         (DATEPART(dd,[Process Date])*1.0)/DAY(EOMONTH([Process Date])) as Tenure_Months#(lf)#(lf)       ,datediff(month, case when b.[Source System Key Text] in (\u0027TS77919\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end,DATEADD(yy, DATEDIFF(yy, 0, GETDATE()) + 1, -1)) - 1 +#(lf)  1-1.0*(day(case when b.[Source System Key Text] in (\u0027TS77919\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end)-1)/ day(dateadd(m, datediff(m,-1, case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end), -1))#(lf)  + 1.0*(day(DATEADD(yy, DATEDIFF(yy, 0, GETDATE()) + 1, -1))-1)/ day(dateadd(m, datediff(m,-1, DATEADD(yy, DATEDIFF(yy, 0, GETDATE()) + 1, -1)), -1)) as EOY_Tenure#(lf)#(lf)       ,datediff(month, case when b.[Source System Key Text] in (\u0027TS77919\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end,case when GETDATE()\u003eDATEFROMPARTS(year(getdate()),10,16) then (DATEADD (dd, -1, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()) + 1, 0)))#(lf)#(tab)#(tab) else DATEADD (dd, +14, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()-15) + 1, 0))#(lf)#(tab)#(tab) end) - 1 +#(lf)  1-1.0*(day(case when b.[Source System Key Text] in (\u0027TS77919\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end)-1)/ day(dateadd(m, datediff(m,-1, case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end), -1))#(lf)  + 1.0*(day(case when GETDATE()\u003eDATEFROMPARTS(year(getdate()),10,16) then (DATEADD (dd, -1, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()) + 1, 0)))#(lf)#(tab)#(tab) else DATEADD (dd, +14, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()-15) + 1, 0))#(lf)#(tab)#(tab) end)-1)/ day(dateadd(m, datediff(m,-1, case when GETDATE()\u003eDATEFROMPARTS(year(getdate()),10,16) then (DATEADD (dd, -1, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()) + 1, 0)))#(lf)#(tab)#(tab) else DATEADD (dd, +14, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()-15) + 1, 0))#(lf)#(tab)#(tab) end), -1)) as EOQ_Tenure#(lf)#(lf)      ,datediff(month, case when b.[Source System Key Text] in (\u0027TS77919\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end,DATEADD(mm, DATEDIFF(mm, 0, GETDATE()) + 1, -1)) - 1 +#(lf)  1-1.0*(day(case when b.[Source System Key Text] in (\u0027TS77919\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end)-1)/ day(dateadd(m, datediff(m,-1, case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end), -1))#(lf)  + 1.0*(day(DATEADD(mm, DATEDIFF(mm, 0, GETDATE()) + 1, -1))-1)/ day(dateadd(m, datediff(m,-1, DATEADD(mm, DATEDIFF(mm, 0, GETDATE()) + 1, -1)), -1)) as EOM_Tenure#(lf)      ,a.[Production Date]#(lf)      ,a.[Snapshot Type Code]#(lf)      ,a.[Business Interruption Day Value]#(lf)         ,b.[Source System Key Text] as TSID#(lf)         ,CONCAT(b.[First Name],\u0027 \u0027,b.[Last Name]) as FP_Name#(lf)         ,b.[Job Type Code]#(lf)         ,CONCAT((LEFT(sale_hier_dim.[ORZN_ZONE_CDE],4)),\u0027-\u0027,sale_hier_dim.ORZN_DEPT_DSCR) as TAG#(lf)#(tab)     ,sale_hier_dim.ORZN_ZONE_CDE [Market]#(lf)         ,c.[Source System Key Text] as Leader_TSID#(lf)         ,CONCAT(c.[First Name],\u0027 \u0027,c.[Last Name]) as Leader_Name#(lf)      ,a.[Life and Health GRID Credit Amount]#(lf)      ,a.[Life and Health Prorated GRID Credit Amount] as LH_Pace_Target#(lf)      ,a.[GRID Credit Amount]#(lf)      ,[Prorated GRID Credit Amount] as Pace_Target#(lf)         ,d.[GRID Credit Amount] as EOY_Target#(lf)         ,d.[GRID Credit Range Amount] as EOY_Range_Amt#(lf)         ,e.[GRID Credit Amount] as EOQ_Target#(lf)         ,e.[GRID Credit Range Amount] as EOQ_Range_Amt#(lf)         ,f.[GRID Credit Amount] as EOM_Target#(lf)         ,f.[GRID Credit Range Amount] as EOM_Range_Amt#(lf)         ,case when [Prior Advisor Experience Indicator] = \u0027Y\u0027 or b.[Job Type Code] = \u0027002010\u0027 then \u0027\u0027#(lf)         when a.[GRID Credit Amount] \u003e a.[Prorated GRID Credit Amount] then \u0027ABOVE\u0027#(lf)         when a.[GRID Credit Amount] \u003c a.[Prorated GRID Credit Amount] then \u0027BELOW\u0027#(lf)#(tab)#(tab) else \u0027\u0027#(lf)         end as ABOVE_BELOW#(lf)         ,case when [Prior Advisor Experience Indicator] = \u0027Y\u0027 or b.[Job Type Code] = \u0027002010\u0027 then \u0027\u0027#(lf)         when a.[Life and Health GRID Credit Amount] \u003e a.[Life and Health Prorated GRID Credit Amount] then \u0027ABOVE\u0027#(lf)         when a.[Life and Health GRID Credit Amount] \u003c a.[Life and Health Prorated GRID Credit Amount] then \u0027BELOW\u0027#(lf)#(tab)#(tab) else \u0027\u0027#(lf)         end as ABOVE_BELOW_LH#(lf)     ,[Prior Advisor Experience Indicator]#(lf)       ,case when a.[Process Date] = max_process_date.[Max Process Date]then \u0027Y\u0027#(lf)         else \u0027N\u0027#(lf)         end as CURR_WK_IND#(lf)  FROM [EnterpriseDataMart].[DM_01].[Pace Performance Snapshot Fact] a#(lf)  inner join [EnterpriseDataMart].[DM_01].[Organization Dimension] b#(lf)   on (a.[Organization Dimension Surrogate Key]=b.[Organization Dimension Surrogate Key] and#(lf)       a.[Process Date]\u003e=b.[Effective Begin Date] and a.[Process Date]\u003c=b.[Effective End Date])#(lf)  inner join (SELECT MAX([Process Date]) [Max Process Date] FROM [DM_01].[Pace Performance Snapshot Fact]) as max_process_date on \u0027a\u0027 = \u0027a\u0027#(lf)  inner join [DM_01].[Date Dimension] dd on (a.[Process Date]=dd.[Calendar Date Date])#(lf)   left join [EnterpriseDataMart].[DM_01].[SALE_HIER_DIM] sale_hier_dim#(lf)    on ((#(lf)    (sale_hier_dim.EFF_BEG_DT\u003c=a.[Process Date])#(lf)        or#(lf)        (#(lf)        (a.[Process Date]\u003c(SELECT min(EFF_BEG_DT) FROM [EnterpriseDataMart].[DM_01].[SALE_HIER_DIM] subq WHERE b.[Source System Key Text]=subq.[SALE_HIER_ID] and subq.CURR_ROW_IND = \u0027Y\u0027))#(lf)        and#(lf)        sale_hier_dim.EFF_BEG_DT=(SELECT min(EFF_BEG_DT) FROM [EnterpriseDataMart].[DM_01].[SALE_HIER_DIM] subq WHERE b.[Source System Key Text]=subq.[SALE_HIER_ID] and subq.CURR_ROW_IND = \u0027Y\u0027)#(lf)        ))#(lf)        and #(lf)        (a.[Process Date]\u003c= DATEADD(day,-1,sale_hier_dim.EFF_END_DT))#(lf)        and sale_hier_dim.CURR_ROW_IND = \u0027Y\u0027#(lf)        and b.[Source System Key Text]=sale_hier_dim.[SALE_HIER_ID])#(lf)#(lf)  #(lf)  #(lf)  #(lf)  inner join [EnterpriseDataMart].[DM_01].[Organization Dimension] c#(lf)   on (a.[Organization Lead Dimension Surrogate Key]=c.[Organization Dimension Surrogate Key] and#(lf)    a.[Process Date]\u003e=c.[Effective Begin Date] and a.[Process Date]\u003c=c.[Effective End Date])#(lf)  left join [EnterpriseDataMart].[DM_01].[Pace Performance Target Dimension] d#(lf)   on (datediff(month, case when b.[Source System Key Text] in (\u0027TS77919\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end, DATEADD(yy, DATEDIFF(yy, 0, GETDATE()) + 1, -1))=d.[Calendar Year Month Number])#(lf)  left join [EnterpriseDataMart].[DM_01].[Pace Performance Target Dimension] e#(lf)   on (datediff(month, case when b.[Source System Key Text] in (\u0027TS77919\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end,case when GETDATE()\u003eDATEFROMPARTS(year(getdate()),10,16) then (DATEADD (dd, -1, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()) + 1, 0)))#(lf)#(tab)#(tab) else DATEADD (dd, +14, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()-15) + 1, 0))#(lf)#(tab)#(tab) end)=e.[Calendar Year Month Number])#(lf)  left join [EnterpriseDataMart].[DM_01].[Pace Performance Target Dimension] f#(lf)   on (datediff(month, case when b.[Source System Key Text] in (\u0027TS77919\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end, DATEADD(mm, DATEDIFF(mm, 0, GETDATE()) + 1, -1))=f.[Calendar Year Month Number])']),    #'Added Custom' = Table.AddColumn(Source, 'ABOVE/BELOW', each if [Tenure_Months] \u003c= 2.25 then '' else [ABOVE_BELOW]),    #'Removed Columns' = Table.RemoveColumns(#'Added Custom',{'ABOVE_BELOW'}),    #'Reordered Columns' = Table.ReorderColumns(#'Removed Columns',{'Organization Dimension Surrogate Key', 'Organization Dimension Version Number', 'Organization Lead Dimension Surrogate Key', 'Organization Lead Dimension Version Number', 'Pace Performance Target Dimension Surrogate Key', 'Pace Performance Target Version Number', 'Process Date', 'Tenure Data', 'Month', 'EOQ_Month', 'EOY_Month', 'Tenure_Months', 'EOY_Tenure', 'EOQ_Tenure', 'EOM_Tenure', 'Production Date', 'Snapshot Type Code', 'Business Interruption Day Value', 'TSID', 'FP_Name', 'Job Type Code', 'TAG', 'Market', 'Leader_TSID', 'Leader_Name', 'Life and Health GRID Credit Amount', 'LH_Pace_Target', 'GRID Credit Amount', 'Pace_Target', 'EOY_Target', 'EOY_Range_Amt', 'EOQ_Target', 'EOQ_Range_Amt', 'EOM_Target', 'EOM_Range_Amt', 'ABOVE/BELOW', 'ABOVE_BELOW_LH', 'Prior Advisor Experience Indicator', 'CURR_WK_IND'}),    #'Renamed Columns' = Table.RenameColumns(#'Reordered Columns',{{'ABOVE/BELOW', 'ABOVE_BELOW'}}),    #'Filtered Rows' = Table.SelectRows(#'Renamed Columns', each [Tenure_Months] \u003e= 0),    #'Added Conditional Column' = Table.AddColumn(#'Filtered Rows', 'TSL/Assoc Rep', each if [Job Type Code] = '002022' then '002022 - TSL' else if [Job Type Code] = '002010' then '002010 - Associate Rep' else null),    #'Added Custom1' = Table.AddColumn(#'Added Conditional Column', 'MVP', each Text.Start([Market],7)),    #'Merged Queries' = Table.NestedJoin(#'Added Custom1', {'TSID'}, #'12_31 Pace Export', {'TSID'}, 'Export', JoinKind.LeftOuter),    #'Expanded Export' = Table.ExpandTableColumn(#'Merged Queries', 'Export', {'EOY Target', 'ABOVE/BELOW EOY'}, {'Export.EOY Target', 'Export.ABOVE/BELOW EOY'}),    #'Renamed Columns1' = Table.RenameColumns(#'Expanded Export',{{'Export.EOY Target', 'EOY Pace Target'}, {'Export.ABOVE/BELOW EOY', 'ABOVE/BELOW EOY'}}),    #'Merged Queries1' = Table.NestedJoin(#'Renamed Columns1', {'TSID'}, #'Market Developers', {'CORP_EMP_ID_CDE'}, 'Market Developers', JoinKind.LeftOuter),    #'Expanded Market Developers' = Table.ExpandTableColumn(#'Merged Queries1', 'Market Developers', {'RDL NAME'}, {'Market Developers.RDL NAME'})in    #'Expanded Market Developers'"}]},{"name":"DM_01 PACE_PERFORMANCE_TARGET_DIM","isHidden":false,"storageMode":"Import","columns":[{"name":"PACE_PERF_TGT_DIM_SK","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"PACE_PERF_TGT_VRSN_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"EFF_BEG_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"EFF_END_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"CURR_ROW_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SRC_SYS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SRC_SUB_SYS_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SRC_SYS_KEY_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CAL_YR_MTH_NBR","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"LH_GRID_CR_AMT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"LH_GRID_CR_RNG_AMT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"GRID_CR_AMT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"GRID_CR_RNG_AMT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CRET_USER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CRET_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"LST_UPDT_USER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LST_UPDT_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Sql.Database('dbedwdwprd', 'enterprisedatamart'),    DM_01_PACE_PERFORMANCE_TARGET_DIM = Source{[Schema='DM_01',Item='PACE_PERFORMANCE_TARGET_DIM']}[Data]in    DM_01_PACE_PERFORMANCE_TARGET_DIM"}]},{"name":"Market Developers","isHidden":false,"storageMode":"Import","columns":[{"name":"CORP_MGR_ID_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CORP_EMP_ID_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"BEG_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"END_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"RDL NAME","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////VSSHR//SHARED//Public//DI and BI//Field Reporting//Pace//RDL_Data.csv'),[Delimiter=',', Columns=5, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'CORP_MGR_ID_CDE', type text}, {'CORP_EMP_ID_CDE', type text}, {'BEG_DATE', type date}, {'END_DATE', type date}, {'RDL NAME', type text}})in    #'Changed Type'"}]},{"name":"Grid Revenue","isHidden":false,"storageMode":"Import","columns":[{"name":"Calendar Day Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Report Year Text","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Year Number","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Year Week Number","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Employee Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Rollup Agent Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Compensation Employee Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Compensation Reporting Roll Up Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Compensation Level 5 Product Line Of Business Subgroup Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Reporting Roll Up Product Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Reporting Roll Up Event Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Compensation Level 2 Product Character Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CMPAGT_EQ_ROLLUP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"New Sales Credit Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Gross Dealer Concessions Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Grid Credit Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Rolling Off FLAG","dataType":"String","isHidden":false,"expression":"if(\u0027Grid Revenue\u0027[Calendar Day Date]\u003e=(NOW()-365) \u0026\u0026 \u0027Grid Revenue\u0027[Calendar Day Date]\u003c=(NOW()-358),'Y','N')","columnType":"Calculated"}],"measures":[{"name":"Grid Revenue Falling Off","expression":"calculate(sum(\u0027Grid Revenue\u0027[Grid Credit Amount]),\u0027Grid Revenue\u0027[Rolling Off FLAG]='Y',\u0027Pace Performance Snapshot\u0027[Tenure_Months]\u003e=12)","isHidden":false},{"name":"Grid Revenue Falling Off EOY","expression":"var mindate = DATE(Year(today())-1,Month(today()),day(today()-1))var maxdate = DATE(Year(today())-1,12,31)returncalculate(sum(\u0027Grid Revenue\u0027[Grid Credit Amount]),\u0027Grid Revenue\u0027[Calendar Day Date]\u003e=mindate,\u0027Grid Revenue\u0027[Calendar Day Date]\u003c=maxdate,\u0027Pace Performance Snapshot\u0027[Tenure_Months]\u003e=12)","isHidden":false},{"name":"Grid Revenue Falling Off EOQ","expression":"var mindate = DATE(Year(today())-1,Month(today()),day(today()-1))var maxdate = LOOKUPVALUE(DTRB_PERF_DATES[End of Quarter Date],DTRB_PERF_DATES[CAL_DAY_DT],DATE(year(today())-1,month(today()),day(today())))returncalculate(sum(\u0027Grid Revenue\u0027[Grid Credit Amount]),\u0027Grid Revenue\u0027[Calendar Day Date]\u003e=mindate,\u0027Grid Revenue\u0027[Calendar Day Date]\u003c=maxdate,\u0027Pace Performance Snapshot\u0027[ABOVE_BELOW]\u003c\u003e'',\u0027Pace Performance Snapshot\u0027[Tenure_Months]\u003e=12)","isHidden":false},{"name":"Grid Revenue Falling Off EOM","expression":"var mindate = DATE(Year(today())-1,Month(today()),day(today()-1))var maxdate = LOOKUPVALUE(DTRB_PERF_DATES[End of Month Date],DTRB_PERF_DATES[CAL_DAY_DT],DATE(year(today())-1,month(today()),day(today())))returncalculate(sum(\u0027Grid Revenue\u0027[Grid Credit Amount]),\u0027Grid Revenue\u0027[Calendar Day Date]\u003e=mindate,\u0027Grid Revenue\u0027[Calendar Day Date]\u003c=maxdate,\u0027Pace Performance Snapshot\u0027[Tenure_Months]\u003e=12)","isHidden":false}],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'select b.''Calendar Day Date'',#(lf)       b.''Distribution Performance Report Year Text'',#(lf)       b.''Distribution Performance Reporting Year Number'',#(lf)       b.''Distribution Performance Reporting Year Week Number'',#(lf)       a.''Employee Identifier'',#(lf)       a.''Rollup Agent Identifier'',#(lf)       a.''Employee Identifier'' as ''Compensation Employee Identifier'',#(lf)       a.''Compensation Reporting Roll Up Name'',#(lf)       --c.''Benefit Contract Number'',#(lf)       a.''Compensation Level 5 Product Line Of Business Subgroup Code'',#(lf)       a.''Reporting Roll Up Product Description'',#(lf)       a.''Reporting Roll Up Event Description'',#(lf)       a.''Compensation Level 2 Product Character Code'',#(lf)       case when a.''Employee Identifier'' = a.''Rollup Agent Identifier'' then \u0027Y\u0027#(lf)         else \u0027N\u0027#(lf)       end as CMPAGT_EQ_ROLLUP,#(lf)       sum(a.''New Sales Credit Amount'') as ''New Sales Credit Amount'',#(lf)       sum(a.''Gross Dealer Concessions Amount'') as ''Gross Dealer Concessions Amount'',#(lf)       sum(a.''Grid Credit Amount'') as ''Grid Credit Amount''#(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Compensation and Sales Metrics Fact'' as a left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Distribution Performance Dates Dimension'' as b#(lf)    on a.''Distribution Performance Dates Surrogate Key''=b.''Date Surrogate Key''  left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Conformed Contract Dimension Detail'' as c#(lf)    on (a.''Contract Surrogate Key''=c.''Contract Surrogate Key''),#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' as aa    #(lf)  #(lf) where a.''Employee Identifier''= aa.''Employee Identifier'' #(lf)   and b.''Distribution Performance Reporting Year Number'' in (\u00272023\u0027,\u00272024\u0027)  #(lf)   and ((a.''New Sales Credit Amount'' \u003c 0.00 or a.''New Sales Credit Amount'' \u003e 0.00) or#(lf)        (a.''Gross Dealer Concessions Amount'' \u003c 0.00 or a.''Gross Dealer Concessions Amount'' \u003e 0.00) or#(lf)        (a.''Grid Credit Amount'' is not NULL))#(lf)   and substring(a.''Employee Identifier'',1,2) = \u0027TS\u0027#(lf)   --and a.''Employee Identifier'' in (\u0027TS45118\u0027)#(lf)   --and b.''Calendar Day Date'' \u003e= \u00272022-03-01\u0027 and b.''Calendar Day Date'' \u003c= \u00272022-03-31\u0027#(lf)   and c.''Current Row Indicator'' =\u0027Y\u0027#(lf)   and aa.''Current Row Indicator'' = \u0027Y\u0027#(lf)   and a.''Source System Code Description'' in (\u0027Life and Annuity Trails Fact\u0027,\u0027Sales Metric Transaction\u0027,\u0027Sales Metric Adjustment\u0027)#(lf)#(lf)   and (  aa.''Organization Department Code'' \u003c\u003e \u00270383\u0027   #(lf)     or (a.''Reporting Roll Up Event Code'' \u003c\u003e\u0027REN\u0027#(lf)     and  (a.''Reporting Roll Up Event Code'' \u003c\u003e \u0027AB\u0027 or  ''Compensation Level 2 Product Character Code'' not in (\u0027RISK\u0027, \u0027ANN\u0027))#(lf)     and  a.''Financial Professional Revenue Hierarchy Level 2 Code'' \u003c\u003e (\u0027AB_MF_12B1\u0027)))#(lf)   #(lf)    #(lf) group by b.''Calendar Day Date'', b.''Distribution Performance Report Year Text'', b.''Distribution Performance Reporting Year Number'',#(lf)          b.''Distribution Performance Reporting Year Week Number'', a.''Employee Identifier'', a.''Rollup Agent Identifier'',#(lf)          --c.''Benefit Contract Number'',#(lf)          a.''Compensation Reporting Roll Up Name'',#(lf)          a.''Compensation Level 5 Product Line Of Business Subgroup Code'',#(lf)          a.''Reporting Roll Up Product Description'',#(lf)          a.''Reporting Roll Up Event Description'',#(lf)          a.''Compensation Level 2 Product Character Code'' #(lf)           #(lf)UNION#(lf)select b.''Calendar Day Date'',#(lf)       b.''Distribution Performance Report Year Text'',#(lf)       b.''Distribution Performance Reporting Year Number'',#(lf)       b.''Distribution Performance Reporting Year Week Number'',#(lf)       a.''Rollup Agent Identifier'' as ''Employee Identifier'',#(lf)       a.''Rollup Agent Identifier'',#(lf)       a.''Employee Identifier'' as ''Compensation Employee Identifier'',#(lf)       a.''Compensation Reporting Roll Up Name'',#(lf)       --c.''Benefit Contract Number'',#(lf)       a.''Compensation Level 5 Product Line Of Business Subgroup Code'',#(lf)       a.''Reporting Roll Up Product Description'',#(lf)       a.''Reporting Roll Up Event Description'',#(lf)       a.''Compensation Level 2 Product Character Code'',#(lf)       case when a.''Employee Identifier'' = a.''Rollup Agent Identifier'' then \u0027Y\u0027#(lf)         else \u0027N\u0027#(lf)       end as CMPAGT_EQ_ROLLUP,#(lf)       sum(a.''New Sales Credit Amount'') as ''New Sales Credit Amount'',#(lf)       sum(a.''Gross Dealer Concessions Amount'') as ''Gross Dealer Concessions Amount'',#(lf)       sum(a.''Grid Credit Amount'') as ''Grid Credit Amount''#(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Compensation and Sales Metrics Fact'' as a left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Distribution Performance Dates Dimension'' as b#(lf)    on a.''Distribution Performance Dates Surrogate Key''=b.''Date Surrogate Key''  left join#(lf)         ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Conformed Contract Dimension Detail'' as c#(lf)    on (a.''Contract Surrogate Key''=c.''Contract Surrogate Key''),#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' as aa    #(lf)    #(lf) where a.''Rollup Agent Identifier'' = aa.''Employee Identifier''#(lf)   and b.''Distribution Performance Reporting Year Number'' in (\u00272022\u0027,\u00272023\u0027)  #(lf)   and ((a.''New Sales Credit Amount'' \u003c 0.00 or a.''New Sales Credit Amount'' \u003e 0.00) or#(lf)        (a.''Gross Dealer Concessions Amount'' \u003c 0.00 or a.''Gross Dealer Concessions Amount'' \u003e 0.00) or#(lf)        (a.''Grid Credit Amount'' is not NULL))#(lf)   and substring(a.''Employee Identifier'',1,2) = \u0027TS\u0027#(lf)   --and a.''Rollup Agent Identifier'' in (\u0027TS45118\u0027)#(lf)   --and b.''Calendar Day Date'' \u003e= \u00272022-03-01\u0027 and b.''Calendar Day Date'' \u003c= \u00272022-03-31\u0027#(lf)   and c.''Current Row Indicator'' =\u0027Y\u0027#(lf)   and aa.''Current Row Indicator'' = \u0027Y\u0027#(lf)   and a.''Source System Code Description'' in (\u0027Life and Annuity Trails Fact\u0027,\u0027Sales Metric Transaction\u0027,\u0027Sales Metric Adjustment\u0027)#(lf)#(lf)   and (  aa.''Organization Department Code'' \u003c\u003e \u00270383\u0027   #(lf)      or (a.''Reporting Roll Up Event Code'' \u003c\u003e\u0027REN\u0027#(lf)     and  (a.''Reporting Roll Up Event Code'' \u003c\u003e \u0027AB\u0027 or  ''Compensation Level 2 Product Character Code'' not in (\u0027RISK\u0027, \u0027ANN\u0027))#(lf)     and  a.''Financial Professional Revenue Hierarchy Level 2 Code'' \u003c\u003e (\u0027AB_MF_12B1\u0027)))#(lf) #(lf)group by b.''Calendar Day Date'', b.''Distribution Performance Report Year Text'', b.''Distribution Performance Reporting Year Number'',#(lf)          b.''Distribution Performance Reporting Year Week Number'', a.''Employee Identifier'', a.''Rollup Agent Identifier'',#(lf)          --c.''Benefit Contract Number'',#(lf)          a.''Compensation Reporting Roll Up Name'', a.''Compensation Level 5 Product Line Of Business Subgroup Code'',#(lf)          a.''Reporting Roll Up Product Description'',#(lf)          a.''Reporting Roll Up Event Description'',#(lf)          a.''Compensation Level 2 Product Character Code''', null, [EnableFolding=true])in    Source"}]},{"name":"12_31 Pace Export","isHidden":true,"storageMode":"Import","columns":[{"name":"Market","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"Job Code","dataType":"Int64","isHidden":true,"columnType":"Data"},{"name":"TSID","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"FA Name","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"Tenure Group","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"Tenure Months","dataType":"Double","isHidden":true,"columnType":"Data"},{"name":"Above/Below","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"Leader","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"Pace Amount","dataType":"Double","isHidden":true,"columnType":"Data"},{"name":"Pace Target","dataType":"Double","isHidden":true,"columnType":"Data"},{"name":"EOY Target","dataType":"Double","isHidden":true,"columnType":"Data"},{"name":"ABOVE/BELOW EOY","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"Current GAP to Target","dataType":"Double","isHidden":true,"columnType":"Data"},{"name":"Pending","dataType":"Int64","isHidden":true,"columnType":"Data"},{"name":"Current GAP to Target Less Pending","dataType":"Double","isHidden":true,"columnType":"Data"},{"name":"LH Pace Amount","dataType":"Double","isHidden":true,"columnType":"Data"},{"name":"LH Pace Target","dataType":"Double","isHidden":true,"columnType":"Data"},{"name":"Current GAP to LH Target","dataType":"Double","isHidden":true,"columnType":"Data"},{"name":"Last Week Appts","dataType":"Int64","isHidden":true,"columnType":"Data"},{"name":"Last Week Prospect Connect","dataType":"Int64","isHidden":true,"columnType":"Data"},{"name":"YTD New Clients","dataType":"Int64","isHidden":true,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared////Public//DI and BI//Distribution Dashboard//Pace EOY Targets (Corrected).xlsx'), null, true),    Export_Sheet = Source{[Item='Export',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Export_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Market', type text}, {'Job Code', Int64.Type}, {'TSID', type text}, {'FA Name', type text}, {'Tenure Group', type text}, {'Tenure Months', type number}, {'Above/Below', type text}, {'Leader', type text}, {'Pace Amount', type number}, {'Pace Target', type number}, {'EOY Target', type number}, {'ABOVE/BELOW EOY', type text}, {'Current GAP to Target', type number}, {'Pending', Int64.Type}, {'Current GAP to Target Less Pending', type number}, {'LH Pace Amount', type number}, {'LH Pace Target', type number}, {'Current GAP to LH Target', type number}, {'Last Week Appts', Int64.Type}, {'Last Week Prospect Connect', Int64.Type}, {'YTD New Clients', Int64.Type}})in    #'Changed Type'"}]},{"name":"COMP CONF_QUAL_DTL","isHidden":false,"storageMode":"Import","columns":[{"name":"UNIQ_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"COMP_PYEE_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PROC_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"CONF_YR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CONF_QUAL_TEAM_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TEAM_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"NEW_MONY_CONF_CR_AMT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"NEW_MONY_AFA_CONF_CR_AMT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"NEW_MONY_ADJ_CONF_CR_AMT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"NEW_MONY_TOT_CONF_CR_AMT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"LF_HLH_CONF_CR_AMT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"LF_HLH_AFA_CONF_CR_AMT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"LH_HLH_MISC_CONF_CR_AMT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"FRNT_LINE_LEAD_CONF_CR_AMT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"LF_HLH_TOT_CONF_CR_AMT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"NLCP_YTD_VLU","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"NLCP_CONF_CR_YTD_VLU","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TEAM_AVG_NEW_MONY_CONF_CR_AMT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TEAM_AVG_LF_HLH_CONF_CR_AMT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TEAM_AVG_NLCP_VLU","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TEAM_AVG_NLCP_CONF_CR_VLU","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"ON_TRGT_NEW_MONY_CONF_RQMT_AMT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"ON_TRGT_LF_HLH_CONF_RQMT_AMT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"ATT_CONF_IDVL_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ON_TRGT_CONF_IDVL_CNT","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"CONF_QUAL_IDVL_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"IDVL_CONF_RANK_VLU","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"CONF_PTS_VLU","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"ON_TRGT_CONF_TEAM_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ATT_CONF_TEAM_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CONF_QUAL_TEAM_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CONF_QUAL_PGM_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"IDVL_QUAL_MTHD_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TEAM_QUAL_MTHD_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EXTR_DAY_IDVL_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EXTR_DAY_QUAL_IDVL_METH_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EXTR_DAY_TEAM_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EXTR_DAY_QUAL_TEAM_METH_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"THRI_CHTY_RANK_VLU","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"CRET_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"LST_UPDT_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"CRET_USER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LST_UPDT_USER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Projected Conference Name","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Sql.Database('DBCAREERCOMPENSATIONPRD', 'CareerCompensation'),    COMP_CONF_QUAL_DTL = Source{[Schema='COMP',Item='CONF_QUAL_DTL']}[Data],    #'Renamed Columns' = Table.RenameColumns(COMP_CONF_QUAL_DTL,{{'ON_TRGT_CONF_IDVL_CDE', 'Projected Conference Name'}}),    #'Filtered Rows' = Table.SelectRows(#'Renamed Columns', let latest = List.Max(#'Renamed Columns'[PROC_DT]) in each [PROC_DT] = latest),    #'Added Custom' = Table.AddColumn(#'Filtered Rows', 'Projected Conference', each if [Projected Conference Name] ='NOT QUALIFIED' then 'NOT ON TRACK'else [Projected Conference Name]),    #'Removed Columns' = Table.RemoveColumns(#'Added Custom',{'Projected Conference Name'}),    #'Renamed Columns1' = Table.RenameColumns(#'Removed Columns',{{'Projected Conference', 'Projected Conference Name'}})in    #'Renamed Columns1'"}]}],"expressions":[{"name":"Producer","expression":"let    Source = PowerBI.Dataflows([]),    #'4ed85d6e-e750-4d01-892f-78fc79993e0c' = Source{[workspaceId='4ed85d6e-e750-4d01-892f-78fc79993e0c']}[Data],    #'0b905589-2450-4f3c-9fd8-f4902e4223de' = #'4ed85d6e-e750-4d01-892f-78fc79993e0c'{[dataflowId='0b905589-2450-4f3c-9fd8-f4902e4223de']}[Data],    Producer1 = #'0b905589-2450-4f3c-9fd8-f4902e4223de'{[entity='Producer']}[Data]in    Producer1"},{"name":"CustInfo","expression":"let    Source = DB2.Database('PODWH021:50000', 'PODWH021', [HierarchicalNavigation=true, Implementation='Microsoft']),    MEMBER = Source{[Schema='MEMBER']}[Data],    CNF_CUSTOMER_DIM_CFDL1 = MEMBER{[Name='CNF_CUSTOMER_DIM_CFDL']}[Data],    #'Filtered Rows' = Table.SelectRows(CNF_CUSTOMER_DIM_CFDL1, each [CUST_TYP_IND] = 'I'),    #'Filtered Rows1' = Table.SelectRows(#'Filtered Rows', each [CUST_COMB_DEL_IND] = 'Y' and [CUST_END_DT] \u003e= #date(2022, 1, 1) or [CUST_COMB_DEL_IND] = 'N' and [CUST_END_DT] = null),    #'Filtered Rows2' = Table.SelectRows(#'Filtered Rows1', each [CUST_IDVL_DECD_IND] = 'Y' and [CUST_IDVL_DECD_DT] \u003e= #date(2021, 1, 1) or [CUST_IDVL_DECD_IND] = 'N'),    #'Removed Columns' = Table.RemoveColumns(#'Filtered Rows2',{'CUST_SK', 'CUST_BEG_DT', 'CUST_END_DT', 'TAX_ID_CDE', 'TAX_ID_DSCR', 'CUST_BRTH_DT', 'CUST_BRTH_DTSR_CDE', 'CUST_BRTH_ST_CDE', 'CUST_BRTH_ST_DSCR', 'EST_BRTH_YR', 'CUST_LGAL_TITL_NM', 'CUST_LGAL_FRST_NM', 'CUST_LGAL_MDDL_NM', 'CUST_LGAL_LST_NM', 'CUST_LGAL_SUFX_NM', 'CUST_LGAL_BSNS_NM', 'CUST_MAIL_FMT_NM', 'CUST_MAIL_TITL_NM', 'CUST_MAIL_FRST_NM', 'CUST_MAIL_MDDL_NM', 'CUST_MAIL_LST_NM', 'CUST_MAIL_SUFX_NM', 'BSNS_ORZN_CDE', 'BSNS_ORZN_DSCR', 'FSCL_YR_END_MTH', 'ORZN_ESTB_DT', 'ORZN_ESTB_DTSR_CDE', 'ORZN_DSLV_IND', 'ORZN_DSLV_IND_DSCR', 'ORZN_DSLV_DT', 'ORZN_DSLV_DTSR_CDE', 'CUST_COMB_DEL_IND', 'CUST_SVC_ORSN_CDE', 'CUST_SVC_ORSN_DSCR', 'CUST_OVRD_STRT_DT', 'CUST_OVRD_END_DT', 'CUST_IDVL_DECD_DT', 'CHPT_NBR', 'CHRC_NBR', 'MBR_TYP_CDE_EFF_DT', 'MBR_TYP_CDE_END_DT', 'PRIM_RSDL_AGRP_IND', 'PRIM_RSAD_GRP_DSCR', 'PRIM_RSAG_SRC_CDE', 'PRIM_RSAG_SRC_DSCR', 'FRAT_VLTR_PSTN_IND', 'FRAT_VPOS_DSCR', 'CUST_GRP_SK', 'CUST_GRP_ID_NBR', 'CUST_GRLN_TYP_CDE', 'CUST_GRLN_TYP_DSCR', 'CUST_MLNM_TYP_CDE', 'CUST_MLNM_TYP_DSCR', 'CUST_MLNM_FMT_CDE', 'CUST_MLNM_FMT_DSCR', 'CUST_GRET_NM', 'CUST_GRET_NM_CDE', 'CUST_GRNM_CDE_DSCR', 'MOSS_ID_NBR', 'MOSS_CHK_DGIT_NBR', 'CUST_INIT_ADD_DT', 'CUST_IADD_DTSR_CDE', 'CUST_SEX_CDE', 'CUST_SEX_DSCR', 'MATL_STS_CDE', 'MATL_STS_DSCR', 'MRST_CDE_SRC_CDE', 'MRST_CDE_SRC_DSCR', 'MBR_TYP_CDE', 'MBR_TYP_DSCR', 'MBR_ELIG_CDE', 'MBR_ELIG_DSCR', 'MBR_BAS_CDE', 'MBR_BAS_DSCR', 'MBR_ORDT_KOWN_CDE', 'MBR_ORDT_KOWN_DSCR', 'MBR_ORIG_DT', 'DRIV_MBR_ORIG_DT', 'MBR_ASCT_XCPT_CDE', 'MBR_ASCT_XCPT_DSCR', 'CLAS_CUST_RPT_CDE', 'CLAS_CUST_RPT_DSCR', 'CLAS_CUST_STS_CDE', 'CLAS_CUST_STS_DSCR', 'CLAS_CNRN_STS_CDE', 'CLAS_CNRN_STS_DSCR', 'CLAS_CTRC_RLTN_CDE', 'CLAS_CNRN_DSCR', 'CLAS_OWNR_RLTN_CDE', 'CLAS_OWRL_DSCR', 'CLAS_BRKO_STS_CDE', 'CLAS_BRKO_STS_DSCR', 'MAIL_ADR_UKWN_IND', 'MAIL_ADR_UKWN_DSCR', 'MAIL_ADR_LN1_TXT', 'MAIL_ADR_LN2_TXT', 'MAIL_ADR_LN3_TXT', 'MAIL_ADR_LN4_TXT', 'MAIL_ADR_CITY_NM', 'MAIL_ST_CDE', 'MAIL_ST_DSCR', 'MAIL_ZIP5_CDE', 'MAIL_ZIP4_CDE', 'MAIL_ZIP2_CDE', 'MAIL_ZPCD_CKDG_NBR', 'MAIL_CTST_ZIP_TXT', 'MAIL_ADR_TYP_CDE', 'MAIL_ADR_TYP_DSCR', 'MAIL_ADR_FMT_CDE', 'MAIL_ADR_FMT_DSCR', 'MAIL_CRIR_RUTE_CDE', 'MAIL_ADR_CTRY_CDE', 'MAIL_ADR_CTRY_DSCR', 'MAIL_ADR_STD_CDE', 'MAIL_ADR_STD_DSCR', 'MAIL_BPCD_1_CDE', 'MAIL_BPCD_1_DSCR', 'MLAD_STRT_MTH_DAY', 'MLAD_END_MTH_DAY', 'RSDL_ADR_UKWN_IND', 'RSDL_ADR_UKWN_DSCR', 'RSDL_ADR_LN1_TXT', 'RSDL_ADR_LN2_TXT', 'RSDL_ADR_LN3_TXT', 'RSDL_ADR_LN4_TXT', 'RSDL_ADR_CITY_NM', 'RSDL_ST_CDE', 'RSDL_ST_DSCR', 'RSDL_ZIP5_CDE', 'RSDL_ZIP4_CDE', 'RSDL_ZIP2_CDE', 'RSDL_ZPCD_CKDG_NBR', 'RSDL_CTST_ZIP_TXT', 'RSDL_ADR_TYP_CDE', 'RSDL_ADR_TYP_DSCR', 'RSDL_ADR_FMT_CDE', 'RSDL_ADR_FMT_DSCR', 'RSDL_CRIR_RUTE_CDE', 'RSDL_ADR_CTRY_CDE', 'RSDL_ADR_CTRY_DSCR', 'RSDL_ADR_STD_CDE', 'RSDL_ADR_STD_DSCR', 'RSDL_BPCD_1_CDE', 'RSDL_BPCD_1_DSCR', 'RSAD_STRT_MTH_DAY', 'RSAD_END_MTH_DAY', 'EMAL_ADR_TXT', 'TEL_AREA_CDE_NBR', 'FMT_TEL_NBR_TXT', 'TEL_EXT_NBR', 'TEL_NBR_TYP_CDE', 'TEL_NBR_TYP_DSCR', 'TEL_STRT_DAY', 'TEL_STRT_MTH', 'TEL_END_DAY', 'TEL_END_MTH', 'BEST_DYTM_CALL_TXT', 'TEL_FRGN_NBR', 'TEL_SVC_CDE', 'TEL_SVC_DSCR', 'TIME_ZONE_CDE', 'TIME_ZONE_DSCR', 'PRIM_TEL_IND', 'PRIM_TEL_DSCR', 'VNDR_VERF_STS_CDE', 'VNDR_VERF_STS_DSCR', 'VNDR_VERF_DT', 'VNDR_VFDT_SRC_CDE', 'OPER_RCD_STS_CDE', 'OPER_RCD_STS_DSCR', 'CHK_SUM_HASH_NBR', 'CRET_TMSP', 'LST_UPDT_TMSP', 'ETL_PROC_CNTL_ID', 'ETL_RECORD_VALID', 'ETL_OPER_VLD_IND', 'SRC_SYS_ID', 'CRET_PGM_SK', 'LST_UPDT_PGM_SK', 'CRET_USER_ID', 'LST_UPDT_USER_ID', 'CUST_TYP_IND'}),    #'Filtered Rows3' = Table.SelectRows(#'Removed Columns', each true),    #'Removed Columns1' = Table.RemoveColumns(#'Filtered Rows3',{'CUST_IDVL_DECD_IND'})in    #'Removed Columns1'"},{"name":"FldGoals2022","expression":"let    Source = Csv.Document(File.Contents('////pnfiles002b//fp_cifs_7834_sas$//MarketAnalysis//FieldReporting//FieldGoals//FldGoals.csv'),[Delimiter=',', Columns=39, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'CORP_EMP_ID_CDE', type text}, {'NAME', type text}, {'RFO', Int64.Type}, {'RFO_Name', type text}, {'JOB_TITLE_CODE', Int64.Type}, {'RPT_TO_ID', type text}, {'Zone_Leader_Name', type text}, {'Division_Code', Int64.Type}, {'DIVISION_NAME', type text}, {'Team_Name', type text}, {'SuccessPro_Name', type text}, {'username', type text}, {'userTags', type text}, {'Referrals', Int64.Type}, {'Approaches', Int64.Type}, {'Prospect_Connects_Held', Int64.Type}, {'Appointments', Int64.Type}, {'NewFinancialCustomers', Int64.Type},  {'NSC_Goal', Int64.Type}, {'GDC_Goal', Int64.Type}, {'Total_Gross_Revenue', Int64.Type}, {'FeeBasedPlanningFees', Int64.Type}, {'FinancialPlans', Int64.Type}, {'As_of_Date', type date}}),    #'Removed Columns' = Table.RemoveColumns(#'Changed Type',{'', '_1', '_2', '_3', '_4', '_5', '_6', '_7', '_8', '_9', '_10', '_11', '_12', '_13', '_14'}),    #'Duplicated Column' = Table.DuplicateColumn(#'Removed Columns', 'As_of_Date', 'As_of_Date - Copy'),    #'Inserted Year' = Table.AddColumn(#'Duplicated Column', 'Year', each Date.Year([#'As_of_Date - Copy']), Int64.Type)in    #'Inserted Year'"}],"configuredBy":"Daniel.Syburg@Thrivent.com","configuredById":"54499f33-8e79-4f3b-817f-879c3ff2bb03","isEffectiveIdentityRequired":false,"isEffectiveIdentityRolesRequired":false,"refreshSchedule":{"days":["Monday","Tuesday"],"times":["09:00"],"enabled":true,"localTimeZoneId":"Central Standard Time","notifyOption":"NoNotification"},"targetStorageMode":"Abf","createdDate":"2022-06-29T18:02:10.537","contentProviderType":"PbixInImportMode"},{"id":"5dd59aae-e00e-4a2f-8947-793b75d7c435","name":"Advisor Metrics Detail and Best Day","tables":[{"name":"GIAS\u0026NonGIAS_AppCtrc_Data","isHidden":false,"storageMode":"Import","columns":[{"name":"CTRC_SK","dataType":"Double","isHidden":true,"columnType":"Data"},{"name":"BEN_CTRC_NBR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"BEN_CTRC_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"NB_APP_CPT_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CTRC_ISS_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"PROD_LOB_NBS_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PLOB_NB_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PLOB_GRP_NBS_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PLOB_SGRP_NBS_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FACE_AMT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EstSalesCrAmt","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CORP_EMP_ID_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SalesCr","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CaseStatus","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"EffDate","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"ProductCode","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LineOfBusiness","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CompanyProducerID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PLOB_GRP_NBS_TXT_upd","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Estimated Sales Credit Amt","expression":"var estscamt_ind = CALCULATE(sum(\u0027GIAS\u0026NonGIAS_AppCtrc_Data\u0027[EstSalesCrAmt]),\u0027GIAS\u0026NonGIAS_AppCtrc_Data\u0027[NB_APP_CPT_DSCR] = 'Received',\u0027GIAS\u0026NonGIAS_AppCtrc_Data\u0027[CTRC_ISS_DT] = '') var _total = estscamt_indReturnif(isblank(_total),0,_total)  ","isHidden":false}],"source":[{"expression":"let    Source = PowerBI.Dataflows([]),    #'4ed85d6e-e750-4d01-892f-78fc79993e0c' = Source{[workspaceId='4ed85d6e-e750-4d01-892f-78fc79993e0c']}[Data],    #'e4d9fa5e-afc9-4559-890a-2c0b8f7f5a81' = #'4ed85d6e-e750-4d01-892f-78fc79993e0c'{[dataflowId='e4d9fa5e-afc9-4559-890a-2c0b8f7f5a81']}[Data],    #'GIAS\u0026NonGIAS_AppCtrc_Data1' = #'e4d9fa5e-afc9-4559-890a-2c0b8f7f5a81'{[entity='GIAS\u0026NonGIAS_AppCtrc_Data']}[Data],    #'Removed Columns' = Table.RemoveColumns(#'GIAS\u0026NonGIAS_AppCtrc_Data1',{'APP_RECV_DT', 'APP_CPT_DATE', 'AppCompletedDate', 'APP_DT', 'SubmitForIssueDate', 'UnderwritingDecisionDate', 'UnderwritingOpenedDate', 'RoleCode'}),    #'Replaced Value' = Table.ReplaceValue(#'Removed Columns',null,0,Replacer.ReplaceValue,{'EstSalesCrAmt'}),    #'Added Custom' = Table.AddColumn(#'Replaced Value', 'PLOB_GRP_NBS_TXT_upd', each if([PLOB_GRP_NBS_TXT] = '' and [PROD_LOB_NBS_TXT] = 'Life') then 'Whole Life'else if ([PLOB_GRP_NBS_TXT] = '' and [PROD_LOB_NBS_TXT] = 'Annuity') then 'VA'else if ([PLOB_GRP_NBS_TXT] = '' and [PROD_LOB_NBS_TXT] = 'Health') then [PLOB_SGRP_NBS_TXT]else [PLOB_GRP_NBS_TXT]),    #'Filtered Rows' = Table.SelectRows(#'Added Custom', each [BEN_CTRC_NBR] \u003c\u003e ''),    #'Filtered Rows1' = Table.SelectRows(#'Filtered Rows', each Text.StartsWith([CORP_EMP_ID_CDE], 'TS'))in    #'Filtered Rows1'"}]},{"name":"Vital Stats DB Appointment Detail","isHidden":false,"storageMode":"Import","columns":[{"name":"Person Occurs","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Appointment Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Appointment Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Life Segment Value Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Membership Type Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Appointment Dimension Surrogate Key","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Person Dimension Surrogate Key","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"appt_occurs","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Performance Year Name","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"YTD Flag","dataType":"String","isHidden":false,"expression":"if(and(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c= today()-1, \u0027Vital Stats DB Appointment Detail\u0027[Performance Year Name] = year(today())), True, False)--if(and(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c= DATE(2020, 12, 15), \u0027Vital Stats DB Appointment Detail\u0027[Performance Year Name] = 2020), True, False)","columnType":"Calculated"},{"name":"PYTD Flag","dataType":"String","isHidden":false,"expression":"if(and(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c= DATE(YEAR(today())-1, MONTH(today()), DAY(today()-1)), \u0027Vital Stats DB Appointment Detail\u0027[Performance Year Name] = year(today())-1), 1, 0)--if(and(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c= DATE(2019, 12, 15), \u0027Vital Stats DB Appointment Detail\u0027[Performance Year Name] = 2019), TRUE, FALSE)","columnType":"Calculated"},{"name":"PYTD PC Flag","dataType":"String","isHidden":false,"expression":"if(and(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c= DATE(YEAR(today())-1, MONTH(today()), DAY(today()-1)), \u0027Vital Stats DB Appointment Detail\u0027[Performance Year Name] = YEAR(today())-1), 1, 0)--if(and(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c= DATE(2019, 12, 15), \u0027Vital Stats DB Appointment Detail\u0027[Performance Year Name] = 2019), True, False)","columnType":"Calculated"},{"name":"YTD PC Flag","dataType":"String","isHidden":false,"expression":"if(and(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c= today(), \u0027Vital Stats DB Appointment Detail\u0027[Performance Year Name] = YEAR(today())), 1, 0)","columnType":"Calculated"},{"name":"Reporting Year","dataType":"String","isHidden":false,"expression":"\u0027Vital Stats DB Appointment Detail\u0027[Performance Year Name]","columnType":"Calculated"},{"name":"Month","dataType":"String","isHidden":false,"expression":"month(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date])","columnType":"Calculated"},{"name":"ThriventId","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Column1","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Appointment Count","expression":"distinctcount([Appointment Dimension Surrogate Key])+0","isHidden":false},{"name":"Prior Appt Total","expression":"var _total =   CALCULATE    (SUMX(DISTINCT(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key]), 1),    \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'PREVIOUS',    \u0027DTRB_PERF_DATES\u0027[Today or Before] = 'Y')Returnif(isblank(_total),0,_total)   ","isHidden":false},{"name":"YTD Appts","expression":"var _total=  CALCULATE    (SUMX(DISTINCT(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key]), 1),    \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'CURRENT',     \u0027DTRB_PERF_DATES\u0027[Today or Before] = 'Y')ReturnIF(ISBLANK(_total),0,_total)    ","isHidden":false},{"name":"YOY Appts","expression":"IF (([PYTD Appts]) =0,0, ((\u0027Vital Stats DB Appointment Detail\u0027[YTD Appts] - \u0027Vital Stats DB Appointment Detail\u0027[PYTD Appts]) / \u0027Vital Stats DB Appointment Detail\u0027[PYTD Appts]))","isHidden":false},{"name":"PYTD Appts","expression":" var _total =  CALCULATE    (SUMX(DISTINCT(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key]), 1),    \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'PREVIOUS',    \u0027DTRB_PERF_DATES\u0027[Prior YR or Before] = 'Y')Returnif(isblank(_total),0,_total)    ","isHidden":false},{"name":"PYTD Prospect Connects","expression":"var _total =CALCULATE(    --SUMX(DISTINCT(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key]), 1),    DISTINCTCOUNT(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key]),--\u0027Vital Stats DB Appointment Detail\u0027[PYTD PC Flag] = 1,--\u0027Vital Stats DB Appointment Detail\u0027[PYTD Flag] in {TRUE},\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'PREVIOUS',\u0027DTRB_PERF_DATES\u0027[Prior YR or Before] = 'Y',\u0027Vital Stats DB Appointment Detail\u0027[Membership Type Description] \u003c\u003e 'Benefit',\u0027Vital Stats DB Appointment Detail\u0027[Appointment Type Code] = 'Connect')ReturnIF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"YTD Prospect Connect","expression":"var _total =   CALCULATE(SUMX(DISTINCT(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key]), 1),  \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'CURRENT',   \u0027DTRB_PERF_DATES\u0027[Today or Before] = 'Y',  \u0027Vital Stats DB Appointment Detail\u0027[Membership Type Description] \u003c\u003e  'Benefit',  \u0027Vital Stats DB Appointment Detail\u0027[Appointment Type Code] = 'Connect'  )  Return  IF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"YOY Prospect Connects","expression":"IF(([PYTD Prospect Connects]) = 0,0, (([YTD Prospect Connect] - [PYTD Prospect Connects])/[PYTD Prospect Connects]))","isHidden":false},{"name":"Prior YR Prospect Connects Totals","expression":"var _total=   CALCULATE    (SUMX(DISTINCT(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key]), 1),    \u0027Vital Stats DB Appointment Detail\u0027[Membership Type Description] \u003c\u003e 'Benefit',    \u0027Vital Stats DB Appointment Detail\u0027[Appointment Type Code] = 'Connect',    \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'PREVIOUS')Returnif(isblank(_total),0,_total)      ","isHidden":false},{"name":"Appts_to_Goal","expression":"CALCULATE(var wkday = [Todays_WKDAY]var goal_yr = [Appt YTD Goal]var ApptTotal = (sumx(DISTINCT(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key]),1))return ApptTotal/((goal_yr/261)*WKDAY),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'CURRENT',\u0027DTRB_PERF_DATES\u0027[Today or Before]='Y' )","isHidden":false},{"name":"PC_to_Goal","expression":"CALCULATE(IF(ISBLANK(DIVIDE((SUMX(DISTINCT(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key]), 1)),([Prsp Connect YTD Goal]/261)*[Todays_WKDAY])),0,           DIVIDE((SUMX(DISTINCT(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key]), 1)),([Prsp Connect YTD Goal]/261)*[Todays_WKDAY])),     \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'CURRENT',     \u0027DTRB_PERF_DATES\u0027[Today or Before]='Y',      \u0027Vital Stats DB Appointment Detail\u0027[Membership Type Description] \u003c\u003e 'Benefit',      \u0027Vital Stats DB Appointment Detail\u0027[Appointment Type Code] = 'Connect' )  ","isHidden":false},{"name":"52 wk Appointment Avg","expression":"  var _today_52 =LOOKUPVALUE(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], today()-364)RETURNCALCULATE((distinctcount(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key])/52)+0, \u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003e _today_52, \u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c today())","isHidden":false},{"name":"13 wk Appointment Avg","expression":"  var _today_13 =LOOKUPVALUE(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], today()-91)RETURNCALCULATE((distinctcount(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key])/13)+0,\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003e _today_13, \u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c today())","isHidden":false},{"name":"8 wk Appointment Avg","expression":"  var _today_8 =LOOKUPVALUE(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], today()-56)RETURNCALCULATE((distinctcount(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key])/8)+0, \u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003e _today_8, \u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c today())","isHidden":false},{"name":"4 wk Appointment Avg","expression":"  var _today_4 =LOOKUPVALUE(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], today()-28)RETURNCALCULATE((distinctcount(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key])/4)+0, \u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003e _today_4, \u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c today())","isHidden":false},{"name":"Last Week Appointment","expression":"--  var _today_7 =LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT], DTRB_PERF_DATES[CAL_DAY_DT], today()-7)--RETURN--CALCULATE((distinctcount(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key]))+0,\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003e _today_7, \u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c today())CALCULATE(DISTINCTCOUNT(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key])+0,\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_WK_TXT] = 'PREVIOUS',\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'CURRENT')","isHidden":false},{"name":"52 wk Prospect Connect Avg","expression":"  var _today_52=LOOKUPVALUE(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], today()-364)RETURNCALCULATE((distinctcount(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key])/52)+0,\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003e _today_52, \u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c today(),\u0027Vital Stats DB Appointment Detail\u0027[Membership Type Description] \u003c\u003e  'Benefit',\u0027Vital Stats DB Appointment Detail\u0027[Appointment Type Code] = 'Connect')","isHidden":false},{"name":"13 wk Prospect Connect Avg","expression":"  var _today_13=LOOKUPVALUE(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], today()-91)RETURNCALCULATE((distinctcount(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key])/13)+0,\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003e _today_13, \u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c today(),\u0027Vital Stats DB Appointment Detail\u0027[Membership Type Description] \u003c\u003e  'Benefit',\u0027Vital Stats DB Appointment Detail\u0027[Appointment Type Code] = 'Connect')","isHidden":false},{"name":"8 wk Prospect Connect Avg","expression":"  var _today_8=LOOKUPVALUE(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], today()-56)RETURNCALCULATE((distinctcount(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key])/8)+0,\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003e _today_8, \u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c today(),\u0027Vital Stats DB Appointment Detail\u0027[Membership Type Description] \u003c\u003e  'Benefit',\u0027Vital Stats DB Appointment Detail\u0027[Appointment Type Code] = 'Connect')","isHidden":false},{"name":"4 wk Prospect Connect Avg","expression":"  var _today_4=LOOKUPVALUE(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], today()-28)RETURNCALCULATE((distinctcount(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key])/4)+0,\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003e _today_4, \u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c today(),\u0027Vital Stats DB Appointment Detail\u0027[Membership Type Description] \u003c\u003e  'Benefit',\u0027Vital Stats DB Appointment Detail\u0027[Appointment Type Code] = 'Connect')","isHidden":false},{"name":"Last Week Prospect Connect","expression":"--  var _today_7 =LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT], DTRB_PERF_DATES[CAL_DAY_DT], today()-7)--RETURN--CALCULATE((distinctcount(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key]))+0,\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003e _today_7, \u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c today())CALCULATE(DISTINCTCOUNT(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key])+0,\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_WK_TXT] = 'PREVIOUS',\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'CURRENT', \u0027Vital Stats DB Appointment Detail\u0027[Membership Type Description] \u003c\u003e  'Benefit',\u0027Vital Stats DB Appointment Detail\u0027[Appointment Type Code] = 'Connect')","isHidden":false},{"name":"52 wk Appointment Test","expression":"  var _today_52 =LOOKUPVALUE(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], today()-364)RETURN_today_52--CALCULATE((distinctcount(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key])/52)+0, --\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003e _today_52, \u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c today())","isHidden":false},{"name":"Message_txt_Appts","expression":"IF(DISTINCTCOUNT(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key]) \u003e 0,    '',  'No Appointments for Current Year')","isHidden":false},{"name":"ShowHideCC_Appts","expression":"IF(DISTINCTCOUNT(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key]) \u003e 0, '#1C00ff00','White')","isHidden":false},{"name":"Prospect Connect Appointment Count","expression":"var _total =   CALCULATE(SUMX(DISTINCT(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key]), 1),  \u0027DTRB_PERF_DATES\u0027[Today or Before] = 'Y',  \u0027Vital Stats DB Appointment Detail\u0027[Membership Type Description] \u003c\u003e  'Benefit',  \u0027Vital Stats DB Appointment Detail\u0027[Appointment Type Code] = 'Connect'  )  Return  IF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"Prospect Connect Client Count","expression":"var _total =   CALCULATE(SUMX(DISTINCT(\u0027Vital Stats DB Appointment Detail\u0027[ThriventId]), 1),  \u0027Vital Stats DB Appointment Detail\u0027[Membership Type Description] \u003c\u003e  'Benefit',  \u0027Vital Stats DB Appointment Detail\u0027[Appointment Type Code] = 'Connect'  )  Return  IF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"Client Count","expression":"distinctcount([ThriventId])+0","isHidden":false},{"name":"Total Appointments","expression":"var _total=  CALCULATE    (SUMX(DISTINCT(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key]), 1),     \u0027DTRB_PERF_DATES\u0027[Today or Before] = 'Y')ReturnIF(ISBLANK(_total),0,_total)    ","isHidden":false}],"source":[{"expression":"let    Source = Sql.Database('dbedwdwprd', 'enterprisedatamart', [Query='select pers_dim.[Source System Key Text] as ThriventId,#(lf)   -- appt_fct.[Worker Appointment Association],#(lf)      appt_fct.[Appointment Dimension Surrogate Key],#(lf)      appt_fct.[Person Dimension Surrogate Key],#(lf)   -- appt_fct.[Appointment Organization Dimension Key],#(lf)   -- appt_fct.[Appointment Organization Dimension Surrogate Key],#(lf)      sum(appt_fct.[Appointment Occurs]) [appt_occurs],#(lf)      max(appt_fct.[Person Occurs]) [Person Occurs],#(lf)      mbr_dim.[Membership Type Description],#(lf)      appt_dim.[Appointment Date],#(lf)      appt_dim.[Appointment Type Description] [Appointment Type Code],#(lf)      date_dim.[Performance Year Name],#(lf)      org_dim.[Source System Key Text] [EMP_ID],#(lf)    --sale_hier_dim.ORZN_DEPT_CDE [RFO Zone Name],#(lf)    --sale_hier_dim.ORZN_ZONE_CDE [RFO Zone Identifier],#(lf)      org_dim.[First Name] + \u0027 \u0027 + org_dim.[Last Name],#(lf)      (Select max(A.[Life Segment Value Description])#(lf)         from EnterpriseDataMart.DM_01.[Person Dimension] A#(lf)        where appt_fct.[Person Dimension Surrogate Key]=A.[Person Dimension Surrogate Key]#(lf)        and A.[Current Row Indicator] = \u0027Y\u0027) as [Life Segment Value Description] #(lf)#(lf)  from EnterpriseDataMart.DM_01.[Appointment Combine Fact] appt_fct left join #(lf)       EnterpriseDataMart.DM_01.[Person Dimension] as Pers_dim#(lf)    on (appt_fct.[Person Dimension Surrogate Key]=pers_dim.[Person Dimension Surrogate Key] and#(lf)        appt_fct.[Person Dimension Version Number] = pers_dim.[Person Dimension Version Number]) left join#(lf)       EnterpriseDataMart.DM_01.[Membership Type Dimension] mbr_dim#(lf)    on (appt_fct.[Membership Type Dimension Surrogate Key]=mbr_dim.[Membership Type Dimension Surrogate Key]) left join#(lf)#(lf)       EnterpriseDataMart.DM_01.[Appointment Dimension] appt_dim#(lf)    on (appt_fct.[Appointment Dimension Surrogate Key]=appt_dim.[Appointment Dimension Surrogate Key]) left join#(lf)#(lf)       EnterpriseDataMart.DM_01.[Date Dimension] date_dim#(lf)    on (appt_dim.[Appointment Date]=date_dim.[Calendar Date Date]) left join#(lf)#(lf)       EnterpriseDataMart.DM_01.[Organization Dimension] org_dim#(lf)    on ((appt_fct.[Appointment Organization Dimension Surrogate Key]=org_dim.[Organization Dimension Surrogate Key]) and #(lf)       ((org_dim.[Effective Begin Date] \u003c= appt_dim.[Appointment Date]) and (appt_dim.[Appointment Date] \u003c= org_dim.[Effective End Date]))) left join#(lf)#(tab) #(lf)       EnterpriseDataMart.DM_01.[SALE_HIER_DIM] sale_hier_dim#(lf)    on ((org_dim.[Source System Key Text]=sale_hier_dim.[SALE_HIER_ID] and#(lf)#(tab)(sale_hier_dim.EFF_BEG_DT\u003c=appt_dim.[Appointment Date]) and#(lf)#(tab)(appt_dim.[Appointment Date]\u003c= sale_hier_dim.EFF_END_DT) and #(lf)#(tab) sale_hier_dim.CURR_ROW_IND = \u0027Y\u0027))#(lf)#(lf)where appt_dim.[Current Row Indicator] = \u0027Y\u0027#(lf)  and appt_dim.[Appointment Create Date Over 14 Days] = \u0027N\u0027#(lf)  and appt_fct.[Person Dimension Surrogate Key] \u003c\u003e 0#(lf)  and appt_fct.[Appointment Status Name] \u003c\u003e \u0027Declined\u0027#(lf)  and appt_dim.[Appointment Type Code] \u003c\u003e \u0027UNK\u0027#(lf)  and sale_hier_dim.ORZN_DEPT_CDE in (\u00270115\u0027,\u00270165\u0027,\u00270190\u0027,\u00270240\u0027,\u00270283\u0027,\u00270291\u0027,\u00270361\u0027,\u00270365\u0027, \u00270383\u0027,\u00270384\u0027,\u00270410\u0027,\u00270435\u0027,\u00270475\u0027,\u00270496\u0027,\u00270525\u0027,\u00270529\u0027,\u00270810\u0027)#(lf) and (org_dim.[Job Type Code] in (\u0027002000\u0027, \u0027002003\u0027, \u0027002008\u0027, \u0027002010\u0027, \u0027002011\u0027, \u0027002012\u0027, \u0027002016\u0027, \u0027002022\u0027, \u0027002024\u0027, \u0027002025\u0027, \u0027002026\u0027, \u0027002027\u0027, \u0027002030\u0027, \u0027002031\u0027, \u0027002032\u0027, \u0027003100\u0027, \u0027003500\u0027)#(lf)  or  org_dim.[Department Identifier] in (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027)) #(lf)  and appt_dim.[Event Result Description] not in (\u0027No Show\u0027,\u0027Cancelled\u0027)#(lf)  and date_dim.[Calendar Year Name] in (\u00272023\u0027,\u00272024\u0027)#(lf)#(lf)group by#(lf)--appt_fct.[Worker Appointment Association],#(lf)  appt_fct.[Appointment Dimension Surrogate Key],#(lf)  appt_fct.[Person Dimension Surrogate Key],#(lf)  mbr_dim.[Membership Type Description],#(lf)  appt_dim.[Appointment Date],#(lf)  appt_dim.[Appointment Type Description],#(lf)  date_dim.[Performance Year Name],#(lf)--sale_hier_dim.ORZN_DEPT_CDE,#(lf)--sale_hier_dim.ORZN_ZONE_CDE,#(lf)  org_dim.[Source System Key Text],#(lf)  org_dim.[First Name] + \u0027 \u0027 + org_dim.[Last Name],#(lf)  pers_dim.[Source System Key Text] #(lf)--appt_fct.[Appointment Organization Dimension Key],#(lf)--appt_fct.[Appointment Organization Dimension Surrogate Key]#(tab) #(lf)#(lf)having #(lf)sum(appt_fct.[Appointment Occurs])\u003e0']),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Appointment Date', type date}})in    #'Changed Type'"}]},{"name":"RFO_PENDING_DETAIL","isHidden":false,"storageMode":"Import","columns":[{"name":"CorporateEmployeeID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"AgentFullName","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LOB","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CIFOwnerFullName","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MBR_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"BenefitContractNumber","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EstimatedSalesCreditAmt","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Benefit_Amount","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Days_Pending","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"TransReceiveDt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TransDesc","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CTRC_PND_CATG_EXCD","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_ZONE_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_SUB_DEPT_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_UNIT_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP_NAME","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////pnfiles002b//fp_cifs_7834_sas$//MarketAnalysis//FieldReporting//SMIS//RFO_PENDING_DETAIL.csv'),[Delimiter=',', Columns=22, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'RFOCode', Int64.Type}, {'RFOName', type text}, {'Zone', Int64.Type}, {'Zone_Name', type text}, {'CorporateEmployeeID', type text}, {'AgentFullName', type text}, {'Product', type text}, {'LOB', type text}, {'CIFOwnerFullName', type text}, {'MBR_TYP_CDE', type text}, {'BenefitContractNumber', type text}, {'EstimatedSalesCreditAmt', Int64.Type}, {'Benefit_Amount', Int64.Type}, {'Days_Pending', Int64.Type}, {'TransReceiveDt', type date}, {'TransDesc', type text}, {'CTRC_PND_CATG_EXCD', type text}, {'Count', Int64.Type}}),    #'Removed Columns' = Table.RemoveColumns(#'Changed Type',{'RFOCode', 'RFOName', 'Zone', 'Zone_Name', 'Count'}),    #'Filtered Rows' = Table.SelectRows(#'Removed Columns', each Text.StartsWith([CorporateEmployeeID], 'TS'))in    #'Filtered Rows'"}]},{"name":"Referrals","isHidden":false,"storageMode":"Import","columns":[{"name":"PERS_DIM_SK","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"REFR_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Referral_Occurs","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Employee Display Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"52 wk Referral Avg","expression":"  var _today_52 =LOOKUPVALUE(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], today()-364)RETURNCALCULATE((sum(Referrals[Referral_Occurs])/52)+0, Referrals[REFR_DT] \u003e _today_52, Referrals[REFR_DT] \u003c today())","isHidden":false},{"name":"13 wk Referral Avg","expression":"  var _today_13 =LOOKUPVALUE(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], today()-91)RETURNCALCULATE((sum(Referrals[Referral_Occurs])/13)+0, Referrals[REFR_DT] \u003e _today_13, Referrals[REFR_DT] \u003c today())","isHidden":false},{"name":"8 wk Referral Avg","expression":"  var _today_8 =LOOKUPVALUE(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], today()-56)RETURNCALCULATE((sum(Referrals[Referral_Occurs])/8)+0, Referrals[REFR_DT] \u003e _today_8, Referrals[REFR_DT] \u003c today())","isHidden":false},{"name":"4 wk Referral Avg","expression":"  var _today_4 =LOOKUPVALUE(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], today()-28)RETURNCALCULATE((sum(Referrals[Referral_Occurs])/4)+0, Referrals[REFR_DT] \u003e _today_4, Referrals[REFR_DT] \u003c today())","isHidden":false},{"name":"Last Week Referralxx","expression":"  var _today_7 =LOOKUPVALUE(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], today()-7)RETURNCALCULATE((sum(Referrals[Referral_Occurs]))+0, Referrals[REFR_DT] \u003e= _today_7, Referrals[REFR_DT] \u003c today())","isHidden":false},{"name":"Last Week Referral","expression":"CALCULATE(SUM(Referrals[Referral_Occurs])+0,\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_WK_TXT] = 'PREVIOUS',\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'CURRENT')","isHidden":false}],"source":[{"expression":"let    Source = Sql.Database('dbedwdwprd', 'enterprisedatamart', [Query='SELECT#(tab)#(lf)#(tab)ref_fct.PERS_DIM_SK,#(lf)#(tab)ref_fct.REFR_DT,#(lf)#(tab)sum(ref_fct.OCCURS) [Referral_Occurs],#(lf)#(tab)--date_dim.[Performance Year Name],#(lf)#(tab)--date_dim.[Performance Year Week Number],#(lf)#(tab)--sale_hier_dim.ORZN_DEPT_CDE,#(lf)#(tab)--sale_hier_dim.ORZN_ZONE_CDE,#(lf)#(tab)org_dim.[Source System Key Text] AS EMP_ID,#(lf)#(tab)--org_dim.[Adjusted Service Date],#(lf)#(tab)--org_dim.[Employee Status Type Description],#(lf)#(tab)--org_dim.[Financial Professional Tenure],#(lf)#(tab)--org_dim.[Financial Professional Tenure Group],#(lf)#(tab)--org_dim.[Department Identifier],#(lf)#(tab)--org_dim.[RFO Zone Identifier],#(lf)#(tab)  org_dim.[Last Name]+\u0027, \u0027+org_dim.[First Name] as ''Employee Display Name'' #(lf)#(tab)--org_dim.[Job Type Code],#(lf)#(tab)--org_dim.[Job Type Description]#(lf)#(lf)  FROM [EnterpriseDataMart].[DM_01].[REFERRAL_FCT] ref_fct LEFT JOIN#(lf)       EnterpriseDataMart.DM_01.[Date Dimension] date_dim#(lf)   on (ref_fct.[REFR_DT]=date_dim.[Calendar Date Date]) LEFT JOIN#(lf)       EnterpriseDataMart.DM_01.[Organization Dimension] org_dim#(lf)   on ((ref_fct.REFR_ORZN_DIM_SK=org_dim.[Organization Dimension Surrogate Key]) and#(lf)       (ref_fct.REFR_ORZN_DIM_VRSN_NBR=org_dim.[Organization Dimension Version Number])) LEFT JOIN#(lf)       EnterpriseDataMart.DM_01.[SALE_HIER_DIM] sale_hier_dim#(lf)   on ((sale_hier_dim.EFF_BEG_DT \u003c= ref_fct.REFR_DT) and#(lf)       (ref_fct.REFR_DT \u003c= DATEADD(day,-1,sale_hier_dim.EFF_END_DT)) and  #(lf)       #(tab)sale_hier_dim.CURR_ROW_IND = \u0027Y\u0027 and #(lf)#(tab)org_dim.[Source System Key Text]=sale_hier_dim.[SALE_HIER_ID])#(lf)#(lf)where ref_fct.PERS_DIM_SK \u003c\u003e 0#(lf)  and sale_hier_dim.ORZN_DEPT_CDE in (\u00270115\u0027,\u00270165\u0027,\u00270190\u0027,\u00270240\u0027,\u00270283\u0027,\u00270291\u0027,\u00270361\u0027,\u00270365\u0027,\u00270383\u0027,\u00270384\u0027,\u00270410\u0027,\u00270435\u0027,\u00270475\u0027,\u00270496\u0027,\u00270525\u0027,\u00270529\u0027,\u00270810\u0027)#(lf)  and (org_dim.[Job Type Code] in (\u0027002000\u0027, \u0027002003\u0027, \u0027002008\u0027, \u0027002010\u0027, \u0027002011\u0027, \u0027002012\u0027, \u0027002016\u0027, \u0027002022\u0027, \u0027002024\u0027, \u0027002025\u0027, \u0027002026\u0027, \u0027002027\u0027, \u0027002030\u0027, \u0027002031\u0027, \u0027002032\u0027, \u0027003100\u0027, \u0027003500\u0027)#(lf)   or  org_dim.[Department Identifier] in (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027))  and date_dim.[Calendar Year Name] in (\u00272021\u0027,\u00272022\u0027,\u00272023\u0027)#(lf)#(lf)group by#(lf)#(tab)ref_fct.PERS_DIM_SK,#(lf)#(tab)ref_fct.REFR_DT,#(lf)#(tab)--date_dim.[Performance Year Name],#(lf)#(tab)--date_dim.[Performance Year Week Number],#(lf)#(tab)--sale_hier_dim.ORZN_DEPT_CDE,#(lf)#(tab)--sale_hier_dim.ORZN_ZONE_CDE,#(lf)#(tab)org_dim.[Source System Key Text],#(lf)#(tab)--org_dim.[Adjusted Service Date],#(lf)#(tab)--org_dim.[Employee Status Type Description],#(lf)#(tab)--org_dim.[Financial Professional Tenure],#(lf)#(tab)--org_dim.[Financial Professional Tenure Group],#(lf)#(tab)--org_dim.[Department Identifier],#(lf)#(tab)--org_dim.[RFO Zone Identifier],#(lf)          org_dim.[Last Name]+\u0027, \u0027+org_dim.[First Name]#(lf)#(tab)--org_dim.[Job Type Code],#(lf)#(tab)--org_dim.[Job Type Description]#(lf)#(lf)having #(lf)sum(ref_fct.OCCURS) \u003e 0#(lf)#(lf)#(lf)#(lf)'])in    Source"}]},{"name":"FldGoals","isHidden":false,"storageMode":"Import","columns":[{"name":"CORP_EMP_ID_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"NAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"RFO_Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TITLE_CODE","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"RPT_TO_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Zone_Leader_Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Division_Code","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DIVISION_NAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team_Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SuccessPro_Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"username","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"userTags","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Referrals","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Approaches","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Prospect_Connects_Held","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Appointments","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"NewFinancialCustomers","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"NSC_Goal","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"GDC_Goal","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Total_Gross_Revenue","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"As_of_Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Goal Status","dataType":"String","isHidden":false,"expression":"UNICHAR(11044)","columnType":"Calculated"},{"name":"FeeBasedPlanningFees","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"FinancialPlans","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[{"name":"GDC Goal %","expression":" --var gdcamt_team = CALCULATE(sum(\u0027NSCGDC w_Rollup\u0027[GDC_AMT]), \u0027NSCGDC w_Rollup\u0027[CMPAGT_EQ_EMPID] = 'N',  \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'CURRENT')var gdcamt_ind = CALCULATE(sum(\u0027NSCGDC w/Rollup\u0027[GDC_AMT]),NSCGDC_Snowflake[Distribution Performance Report Year Text]= 'CURRENT')-- var _gdcamt = if([TeamNmFiltered]=1 \u0026\u0026 [EmployeeNmFiltered]=0,gdcamt_team,gdcamt_ind) var _gdcamt=gdcamt_ind var _total = DIVIDE(_gdcamt, SUM(FldGoals[GDC_Goal]),0)ReturnIF(ISBLANK(_total),0,_total) --DIVIDE(\u0027NSCGDC w_Rollup\u0027[YTD GDC], SUM(FldGoals[GDC_Goal]),0)","isHidden":false},{"name":"NSC Goal %xx","expression":" --var nscamt_team = CALCULATE(sum(\u0027NSCGDC w_Rollup\u0027[NSC_AMT]), \u0027NSCGDC w_Rollup\u0027[CMPAGT_EQ_EMPID] = 'N',  \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'CURRENT') var nscamt_ind = CALCULATE(sum(\u0027NSCGDC_Snowflake\u0027[New Sales Credit Amount]),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'CURRENT')  --var _nscamt = if([TeamNmFiltered]=1 \u0026\u0026 [EmployeeNmFiltered]=0,nscamt_team,nscamt_ind)  var _nscamt=nscamt_ind  var _total = DIVIDE(_nscamt, SUM(FldGoals[NSC_Goal]),0)ReturnIF(ISBLANK(_total),0,_total) ","isHidden":false},{"name":"Appt Goal %","expression":"DIVIDE(\u0027Vital Stats DB Appointment Detail\u0027[YTD Appts], SUM(FldGoals[Appointments]),0)","isHidden":false},{"name":"NFC Goal %","expression":"DIVIDE(\u0027NFC\u0027[YTD New Clients], SUM(FldGoals[NewFinancialCustomers]),0)","isHidden":false},{"name":"Prospect Connect Goal %","expression":"DIVIDE(\u0027Vital Stats DB Appointment Detail\u0027[YTD Prospect Connect], SUM(FldGoals[Prospect_Connects_Held]),0)","isHidden":false},{"name":"NFC YTD Goal","expression":"IF(SUM(FldGoals[NewFinancialCustomers]) = 0, 0.00001, SUM(FldGoals[NewFinancialCustomers]))","isHidden":false},{"name":"NSC YTD Goal","expression":"IF(SUM(FldGoals[NSC_Goal]) = 0, 0.00001, SUM(FldGoals[NSC_Goal]))","isHidden":false},{"name":"GDC YTD Goal","expression":"IF(SUM(FldGoals[GDC_Goal]) = 0, 0.00001, SUM(FldGoals[GDC_Goal]))","isHidden":false},{"name":"Appt YTD Goal","expression":"IF(SUM(FldGoals[Appointments]) = 0, 0.00001, SUM(FldGoals[Appointments]))","isHidden":false},{"name":"Prsp Connect YTD Goal","expression":"IF(SUM(FldGoals[Prospect_Connects_Held]) = 0, 0.00001, SUM(FldGoals[Prospect_Connects_Held]))","isHidden":false},{"name":"Appt Goal 3 - DEL","expression":"SUM(FldGoals[Appointments])","isHidden":false},{"name":"Track to Goal","expression":"DIVIDE(\u0027DTRB_PERF_DATES\u0027[Todays_WKDAY], 252)","isHidden":false},{"name":"NSC_Tracking","expression":"SWITCH(TRUE(),[NSC Goal %] \u003c= [Track to Goal], UNICHAR(9660),                         [NSC Goal %] \u003e= [Track to Goal], UNICHAR(9650),                         BLANK())","isHidden":false},{"name":"GDC_Tracking","expression":"SWITCH(TRUE(),[GDC Goal %] \u003c= [Track to Goal], UNICHAR(9660),                         [GDC Goal %] \u003e= [Track to Goal], UNICHAR(9650),                         BLANK())","isHidden":false},{"name":"Appt_Tracking","expression":"SWITCH(TRUE(),[Appt Goal %] \u003c= [Track to Goal], UNICHAR(9660),                         [Appt Goal %] \u003e= [Track to Goal], UNICHAR(9650),                         BLANK())","isHidden":false},{"name":"Prospect Connect Tracking","expression":"SWITCH(TRUE(),[Prospect Connect Goal %] \u003c= [Track to Goal], UNICHAR(9660),                         [Prospect Connect Goal %] \u003e= [Track to Goal], UNICHAR(9650),                         BLANK())","isHidden":false},{"name":"Tracking NSC UP Arrow","expression":"IF ([NSC Goal %xx] \u003e= [Track to Goal], UNICHAR ( 9650),'')","isHidden":false},{"name":"NFC Tracking","expression":"SWITCH(TRUE(),[NFC Goal %] \u003c= [Track to Goal], UNICHAR(9660),                         [NFC Goal %] \u003e= [Track to Goal], UNICHAR(9650),                         BLANK())","isHidden":false},{"name":"NSC Goal %","expression":" --var nscamt_team = CALCULATE(sum(\u0027NSCGDC w_Rollup\u0027[NSC_AMT]), \u0027NSCGDC w_Rollup\u0027[CMPAGT_EQ_EMPID] = 'N',  \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'CURRENT') var nscamt_ind = CALCULATE(sum(\u0027NSCGDC w/Rollup\u0027[NSC_AMT]),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'CURRENT')  --var _nscamt = if([TeamNmFiltered]=1 \u0026\u0026 [EmployeeNmFiltered]=0,nscamt_team,nscamt_ind)  var _nscamt=nscamt_ind  var _total = DIVIDE(_nscamt, SUM(FldGoals[NSC_Goal]),0)ReturnIF(ISBLANK(_total),0,_total) ","isHidden":false}],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////pnfiles002b//fp_cifs_7834_sas$//MarketAnalysis//FieldReporting//FieldGoals//FldGoals.csv'),[Delimiter=',', Columns=39, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'CORP_EMP_ID_CDE', type text}, {'NAME', type text}, {'RFO', Int64.Type}, {'RFO_Name', type text}, {'JOB_TITLE_CODE', Int64.Type}, {'RPT_TO_ID', type text}, {'Zone_Leader_Name', type text}, {'Division_Code', Int64.Type}, {'DIVISION_NAME', type text}, {'Team_Name', type text}, {'SuccessPro_Name', type text}, {'username', type text}, {'userTags', type text}, {'Referrals', Int64.Type}, {'Approaches', Int64.Type}, {'Prospect_Connects_Held', Int64.Type}, {'Appointments', Int64.Type}, {'NewFinancialCustomers', Int64.Type},  {'NSC_Goal', Int64.Type}, {'GDC_Goal', Int64.Type}, {'Total_Gross_Revenue', Int64.Type}, {'FeeBasedPlanningFees', Int64.Type}, {'FinancialPlans', Int64.Type}, {'As_of_Date', type date}}),    #'Removed Columns' = Table.RemoveColumns(#'Changed Type',{'', '_1', '_2', '_3', '_4', '_5', '_6', '_7', '_8', '_9', '_10', '_11', '_12', '_13', '_14'})in    #'Removed Columns'"}]},{"name":"SVC_AGMT","isHidden":false,"storageMode":"Import","columns":[{"name":"BEN_CTRC_NBR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"BEN_CTRC_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SVC_AGMT_PLAN_YR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"BEG_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"SVC_AGMT_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CTRC_STS_EFF_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"SVC_AGMT_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CURRENT_STATUS_DESCRIPTION","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SVC_AGMT_GRP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SVC_AGMT_ISS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"APP_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"ACL_DLIV_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"RCD_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Current Active New Plans","expression":"var ActiveNewPlans = CALCULATE(    DISTINCTCOUNT(\u0027SVC_AGMT\u0027[BEN_CTRC_NBR]),\\t\u0027SVC_AGMT\u0027[CURRENT_STATUS_DESCRIPTION] IN { 'Approved' }, SVC_AGMT[SVC_AGMT_PLAN_YR] = 0 || SVC_AGMT[SVC_AGMT_PLAN_YR] = 1 ) RETURNIF(ISBLANK(ActiveNewPlans),0,ActiveNewPlans)    ","isHidden":false},{"name":"First Year Renewal Rate Orig Not Used","expression":"CALCULATE(DISTINCTCOUNT(SVC_AGMT_HST_CURR[BEN_CTRC_NBR]),                           SVC_AGMT_HST_CURR[SVC_AGMT_STS_CDE] = 'Approved',                           FILTER(SVC_AGMT_HST_CURR, YEAR(SVC_AGMT_HST_CURR[BEG_TMSP]) = YEAR(NOW())-1), SVC_AGMT_HST_CURR[SVC_AGMT_PLAN_YR] = 2,                           FILTER(SVC_AGMT_HST_CURR, YEAR(SVC_AGMT_HST_CURR[ACL_DLIV_DT] ) = YEAR(NOW())-1))/CALCULATE(DISTINCTCOUNT(SVC_AGMT_HST_CURR[BEN_CTRC_NBR]), SVC_AGMT_HST_CURR[SVC_AGMT_STS_CDE] = 'Approved',                           FILTER(SVC_AGMT_HST_CURR, YEAR(SVC_AGMT_HST_CURR[BEG_TMSP]) = YEAR(NOW())-2), SVC_AGMT_HST_CURR[SVC_AGMT_PLAN_YR]=1,                           FILTER(SVC_AGMT_HST_CURR, YEAR(SVC_AGMT_HST_CURR[ACL_DLIV_DT] ) = YEAR(NOW())-2)) ","isHidden":false},{"name":"Current Active Renewals","expression":"var ActiveRenewals =CALCULATE(  DISTINCTCOUNT(\u0027SVC_AGMT\u0027[BEN_CTRC_NBR]),\u0027SVC_AGMT\u0027[CURRENT_STATUS_DESCRIPTION] IN { 'Approved' }, SVC_AGMT[SVC_AGMT_PLAN_YR] \u003c\u003e 0 \u0026\u0026 SVC_AGMT[SVC_AGMT_PLAN_YR] \u003c\u003e 1 )RETURNIF(ISBLANK(ActiveRenewals),0,ActiveRenewals)","isHidden":false}],"source":[{"expression":"let    Source = DB2.Database('PODWH021:50000', 'PODWH021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT BEN_CTRC_NBR,#(lf)       BEN_CTRC_TYP_CDE,#(lf)       SVC_AGMT_PLAN_YR,#(lf)       BEG_TMSP,#(lf)       CASE WHEN SVC_AGMT_TYP_CDE = \u0027PTAGM\u0027 THEN \u0027One Time\u0027#(lf)            WHEN SVC_AGMT_TYP_CDE = \u0027OGAGM\u0027 THEN \u0027Ongoing\u0027#(lf)       END AS SVC_AGMT_TYP_CDE,#(lf)       CTRC_STS_EFF_DT,#(lf)       SVC_AGMT_STS_CDE,#(lf)       CASE WHEN SVC_AGMT_STS_CDE = \u0027A \u0027 THEN \u0027Thrivent Cancel\u0027#(lf)            WHEN SVC_AGMT_STS_CDE = \u0027B \u0027 THEN \u0027Amendment Rejected\u0027#(lf)#(tab)    WHEN SVC_AGMT_STS_CDE = \u0027C \u0027 THEN \u0027Amendment Approved\u0027#(lf)    #(tab)    WHEN SVC_AGMT_STS_CDE = \u0027D \u0027 THEN \u0027Cancel Pending\u0027#(lf)            WHEN SVC_AGMT_STS_CDE = \u0027E \u0027 THEN \u0027Death\u0027#(lf)            WHEN SVC_AGMT_STS_CDE = \u0027F \u0027 THEN \u0027Draft\u0027#(lf)            WHEN SVC_AGMT_STS_CDE = \u0027P \u0027 THEN \u0027Pending Renewal\u0027#(lf)    #(tab)    WHEN SVC_AGMT_STS_CDE = \u0027R \u0027 THEN \u0027Rejected\u0027#(lf)    #(tab)    WHEN SVC_AGMT_STS_CDE = \u0027X \u0027 THEN \u0027Pending Cancel\u0027#(lf)    #(tab)    WHEN SVC_AGMT_STS_CDE = \u00271 \u0027 THEN \u0027Pending\u0027#(lf)    #(tab)    WHEN SVC_AGMT_STS_CDE = \u00272 \u0027 THEN \u0027Approved\u0027#(lf)    #(tab)    WHEN SVC_AGMT_STS_CDE = \u00273 \u0027 THEN \u0027Declined\u0027#(lf)    #(tab)    WHEN SVC_AGMT_STS_CDE = \u00275 \u0027 THEN \u0027Fulfilled\u0027#(lf)    #(tab)    WHEN SVC_AGMT_STS_CDE = \u00276 \u0027 THEN \u0027NIGO\u0027#(lf)    #(tab)    WHEN SVC_AGMT_STS_CDE = \u00277 \u0027 THEN \u0027Amendment Pending\u0027#(lf)    #(tab)    WHEN SVC_AGMT_STS_CDE = \u00278 \u0027 THEN \u0027NSF Pending\u0027#(lf)    #(tab)    WHEN SVC_AGMT_STS_CDE = \u00279 \u0027 THEN \u0027Client Cancel\u0027#(lf)   #(tab)END as Current_Status_Description,#(lf)#(tab)CASE WHEN SVC_AGMT_GRP_CDE = \u0027BUSN\u0027 THEN \u0027Business\u0027#(lf)       #(tab)     WHEN SVC_AGMT_GRP_CDE = \u0027MRRY\u0027 THEN \u0027Married\u0027#(lf)#(tab)     WHEN SVC_AGMT_GRP_CDE = \u0027INDIV\u0027 THEN \u0027Individual\u0027#(lf)#(tab)     WHEN SVC_AGMT_GRP_CDE = \u0027DUAL\u0027 THEN \u0027Dual\u0027#(lf)#(tab)     WHEN SVC_AGMT_GRP_CDE = \u0027TRUST\u0027 THEN \u0027Trust\u0027#(lf)        END AS SVC_AGMT_GRP_CDE,#(lf)        SVC_AGMT_ISS_CDE,#(lf)        APP_DT,#(lf)        ACL_DLIV_DT,#(lf)        -- RMDR_SENT_DT,#(lf)        -- SVC_AGMT_ANV_DT,#(lf)        -- SVC_AGMT_TRMN_DT,#(lf)        -- SVAG_TRMN_RSN_CDE,#(lf)        -- SVAG_TRMN_RSN_TXT,#(lf)        -- CTRC_FLMT_EXT_IND,#(lf)         RCD_STS_CDE#(lf)    FROM CONTRACT.SVC_AGMT#(lf)   WHERE (YEAR(BEG_TMSP) \u003e= YEAR(Current Date)-4)']),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'BEG_TMSP', type date}, {'CTRC_STS_EFF_DT', type date}, {'APP_DT', type date}, {'ACL_DLIV_DT', type date}})in    #'Changed Type'"}]},{"name":"SVC_AGMT_FEE_SCHD","isHidden":false,"storageMode":"Import","columns":[{"name":"BEN_CTRC_NBR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"BEN_CTRC_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SVC_AGMT_FEE_SCHD_ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"BEG_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"SVC_AGMT_PLAN_YR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"END_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"FIN_PLAN_CPXY_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FIN_PLAN_CPXY_AMT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"PMT_FRQ_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"BSNS_VAL_FEE_AMT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"ETAT_PLN_FEE_AMT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"STCK_OPT_ANL_AMT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"SPC_NEED_FEE_AMT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"SVC_AGMT_FEE_AMT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EFF_BEG_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"BEG_YR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"EFF_END_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"RCD_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DVRC_PLN_FEE_AMT","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = DB2.Database('PODWH021:50000', 'PODWH021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT A.BEN_CTRC_NBR, #(lf)          A.BEN_CTRC_TYP_CDE, #(lf)          A.SVC_AGMT_FEE_SCHD_ID, #(lf)          A.BEG_TMSP, #(lf)          A.SVC_AGMT_PLAN_YR, #(lf)          A.END_TMSP, #(lf)          A.FIN_PLAN_CPXY_CDE, #(lf)          A.FIN_PLAN_CPXY_AMT,#(lf)          CASE WHEN PMT_FRQ_CDE = \u0027A\u0027 THEN \u0027Annual\u0027#(lf)#(tab)#(tab)       WHEN PMT_FRQ_CDE = \u0027Q\u0027 THEN \u0027Quarterly\u0027#(lf)#(tab)#(tab)#(tab)   WHEN PMT_FRQ_CDE = \u0027M\u0027 THEN \u0027Monthly\u0027#(lf)#(tab)#(tab)#(tab)   WHEN PMT_FRQ_CDE = \u0027S\u0027 THEN \u0027Semi-Annual\u0027 #(lf)#(tab)#(tab)  END as PMT_FRQ_CDE,#(lf)          A.BSNS_VAL_FEE_AMT, #(lf)          A.ETAT_PLN_FEE_AMT, #(lf)          A.STCK_OPT_ANL_AMT, #(lf)          A.SPC_NEED_FEE_AMT, #(lf)          A.SVC_AGMT_FEE_AMT, #(lf)          A.EFF_BEG_DT, #(lf)#(tab)#(tab)  YEAR(A.EFF_BEG_DT) AS BEG_YR,#(lf)          A.EFF_END_DT, #(lf)          A.RCD_STS_CDE, #(lf)       --   A.CRET_USER_ID, #(lf)       --   A.CRET_TMSP, #(lf)       --   A.LST_UPDT_USER_ID, #(lf)       --   A.LST_UPDT_TMSP, #(lf)          A.DVRC_PLN_FEE_AMT#(lf)     FROM CONTRACT.SVC_AGMT_FEE_SCHD A']),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'BEG_TMSP', type date}, {'END_TMSP', type date}, {'EFF_BEG_DT', type date}, {'EFF_END_DT', type date}})in    #'Changed Type'"}]},{"name":"SVAG_ADVR_RLTN","isHidden":false,"storageMode":"Import","columns":[{"name":"BEN_CTRC_NBR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SVC_AGMT_PLAN_YR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"SPLIT_CR_AGT_INDIC","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"AGT_SPLT_PCT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"SVAG_ADVR_RLTN_BEG_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"SVAG_ADVR_RLTN_END_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"RCD_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"END_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"YR","dataType":"String","isHidden":false,"expression":"YEAR(SVAG_ADVR_RLTN[SVAG_ADVR_RLTN_BEG_DT])","columnType":"Calculated"}],"measures":[],"source":[{"expression":"let    Source = DB2.Database('PODWH021:50000', 'PODWH021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT A.BEN_CTRC_NBR, #(lf)         A.EMP_ID, #(lf)         A.SVC_AGMT_PLAN_YR, #(lf)#(tab)#(tab) A.SPLIT_CR_AGT_INDIC,#(lf)#(tab)#(tab) A.AGT_SPLT_PCT,#(lf)#(tab)#(tab) A.SVAG_ADVR_RLTN_BEG_DT,#(lf)#(tab)#(tab) A.SVAG_ADVR_RLTN_END_DT,#(lf)#(tab)#(tab) A.RCD_STS_CDE,#(lf)#(tab)#(tab) A.END_TMSP,#(lf)#(tab)#(tab) A.CRET_TMSP,#(lf)#(tab)#(tab) A.LST_UPDT_TMSP#(lf)    FROM CONTRACT.SVAG_ADVR_RLTN A#(lf)   ']),    #'Removed Columns' = Table.RemoveColumns(Source,{'CRET_TMSP', 'LST_UPDT_TMSP'}),    #'Changed Type' = Table.TransformColumnTypes(#'Removed Columns',{{'SVAG_ADVR_RLTN_BEG_DT', type date}, {'SVAG_ADVR_RLTN_END_DT', type date}, {'END_TMSP', type date}})in    #'Changed Type'"}]},{"name":"SVC_AGMT_HST_CURR","isHidden":false,"storageMode":"Import","columns":[{"name":"BEN_CTRC_NBR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"BEG_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"SVC_AGMT_PLAN_YR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"SVC_AGMT_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CTRC_STS_EFF_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"SVC_AGMT_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SVC_AGMT_GRP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SVC_AGMT_ISS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SVC_AGMT_TRMN_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"SVAG_TRMN_RSN_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ACL_DLIV_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"APP_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"CTRC_FLMT_EXT_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Last Status","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Lag_Time","dataType":"DateTime","isHidden":false,"columnType":"Data"}],"measures":[{"name":"First Year Renewal Rate1_TEST","expression":"  CALCULATE(DISTINCTCOUNT(SVC_AGMT_HST_CURR[BEN_CTRC_NBR]),    \u0027SVC_AGMT_HST_CURR\u0027[SVC_AGMT_STS_CDE] = 'Approved',    --\u0027SVC_AGMT_HST_CURR\u0027[SVC_AGMT_PLAN_YR] = 2,   YEAR(\u0027SVC_AGMT_HST_CURR\u0027[BEG_TMSP]) = YEAR(NOW())-1,   YEAR(\u0027SVC_AGMT_HST_CURR\u0027[ACL_DLIV_DT]) = YEAR(NOW())-1, filter(SVC_AGMT_HST_CURR,SVC_AGMT_HST_CURR[SVC_AGMT_PLAN_YR] = 2)  )--CALCULATE(DISTINCTCOUNT(SVC_AGMT_HST_CURR[BEN_CTRC_NBR]), --                          SVC_AGMT_HST_CURR[SVC_AGMT_STS_CDE] = 'Approved', --                          FILTER(SVC_AGMT_HST_CURR, YEAR(SVC_AGMT_HST_CURR[BEG_TMSP]) = YEAR(NOW())-1), SVC_AGMT_HST_CURR[SVC_AGMT_PLAN_YR] = 2, --                          FILTER(SVC_AGMT_HST_CURR, YEAR(SVC_AGMT_HST_CURR[ACL_DLIV_DT] ) = YEAR(NOW())-1))/CALCULATE(DISTINCTCOUNT(SVC_AGMT_HST_CURR[BEN_CTRC_NBR]), SVC_AGMT_HST_CURR[SVC_AGMT_STS_CDE] = 'Approved', --                          FILTER(SVC_AGMT_HST_CURR, YEAR(SVC_AGMT_HST_CURR[BEG_TMSP]) = YEAR(NOW())-2), SVC_AGMT_HST_CURR[SVC_AGMT_PLAN_YR]=1, --                          FILTER(SVC_AGMT_HST_CURR, YEAR(SVC_AGMT_HST_CURR[ACL_DLIV_DT] ) = YEAR(NOW())-2)) ","isHidden":false},{"name":"First Year Renewal Rate2_TEST","expression":"  CALCULATE(DISTINCTCOUNT(SVC_AGMT_HST_CURR[BEN_CTRC_NBR]),    \u0027SVC_AGMT_HST_CURR\u0027[SVC_AGMT_STS_CDE] = 'Approved',    --\u0027SVC_AGMT_HST_CURR\u0027[SVC_AGMT_PLAN_YR] = 2,   YEAR(\u0027SVC_AGMT_HST_CURR\u0027[BEG_TMSP]) = YEAR(NOW())-2,   YEAR(\u0027SVC_AGMT_HST_CURR\u0027[ACL_DLIV_DT]) = YEAR(NOW())-2, filter(SVC_AGMT_HST_CURR,SVC_AGMT_HST_CURR[SVC_AGMT_PLAN_YR] = 1)  )--CALCULATE(DISTINCTCOUNT(SVC_AGMT_HST_CURR[BEN_CTRC_NBR]), --                          SVC_AGMT_HST_CURR[SVC_AGMT_STS_CDE] = 'Approved', --                          FILTER(SVC_AGMT_HST_CURR, YEAR(SVC_AGMT_HST_CURR[BEG_TMSP]) = YEAR(NOW())-1), SVC_AGMT_HST_CURR[SVC_AGMT_PLAN_YR] = 2, --                          FILTER(SVC_AGMT_HST_CURR, YEAR(SVC_AGMT_HST_CURR[ACL_DLIV_DT] ) = YEAR(NOW())-1))/CALCULATE(DISTINCTCOUNT(SVC_AGMT_HST_CURR[BEN_CTRC_NBR]), SVC_AGMT_HST_CURR[SVC_AGMT_STS_CDE] = 'Approved', --                          FILTER(SVC_AGMT_HST_CURR, YEAR(SVC_AGMT_HST_CURR[BEG_TMSP]) = YEAR(NOW())-2), SVC_AGMT_HST_CURR[SVC_AGMT_PLAN_YR]=1, --                          FILTER(SVC_AGMT_HST_CURR, YEAR(SVC_AGMT_HST_CURR[ACL_DLIV_DT] ) = YEAR(NOW())-2)) ","isHidden":false},{"name":"First Year Renewal %","expression":" var FirstYR = DIVIDE(CALCULATE(DISTINCTCOUNT(SVC_AGMT_HST_CURR[BEN_CTRC_NBR]),    \u0027SVC_AGMT_HST_CURR\u0027[SVC_AGMT_STS_CDE] = 'Approved',    YEAR(\u0027SVC_AGMT_HST_CURR\u0027[BEG_TMSP]) = YEAR(NOW())-1,   YEAR(\u0027SVC_AGMT_HST_CURR\u0027[ACL_DLIV_DT]) = YEAR(NOW())-1, filter(SVC_AGMT_HST_CURR,SVC_AGMT_HST_CURR[SVC_AGMT_PLAN_YR] = 2)  ),   CALCULATE(DISTINCTCOUNT(SVC_AGMT_HST_CURR[BEN_CTRC_NBR]),    \u0027SVC_AGMT_HST_CURR\u0027[SVC_AGMT_STS_CDE] = 'Approved',    YEAR(\u0027SVC_AGMT_HST_CURR\u0027[BEG_TMSP]) = YEAR(NOW())-2,   YEAR(\u0027SVC_AGMT_HST_CURR\u0027[ACL_DLIV_DT]) = YEAR(NOW())-2, filter(SVC_AGMT_HST_CURR,SVC_AGMT_HST_CURR[SVC_AGMT_PLAN_YR] = 1)  ))  Return  IF(ISBLANK(FIRSTYR),0,FIRSTYR)","isHidden":false}],"source":[{"expression":"let    Source = DB2.Database('PODWH021:50000', 'PODWH021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT *, LAG(SVC_AGMT_STS_CDE) OVER (#(lf)    PARTITION BY BEN_CTRC_NBR #(lf)    ORDER BY BEG_TMSP, BEN_CTRC_NBR) AS ''Last Status'', #(lf)    LAG(BEG_TMSP) OVER (#(lf)             PARTITION BY BEN_CTRC_NBR #(lf)             ORDER BY BEG_TMSP, BEN_CTRC_NBR) AS ''Lag_Time''#(lf)#(lf)FROM (#(lf)#(lf)SELECT#(lf)#(tab)  BEN_CTRC_NBR#(lf)#(tab), BEG_TMSP#(lf)#(tab), SVC_AGMT_PLAN_YR#(lf)#(tab), CASE#(lf)#(tab)#(tab)When SVC_AGMT_TYP_CDE = \u0027PTAGM\u0027 THEN \u0027One Time\u0027#(lf)#(tab)#(tab)When SVC_AGMT_TYP_CDE = \u0027OGAGM\u0027 then \u0027Ongoing\u0027#(lf)#(tab)#(tab)ELSE SVC_AGMT_TYP_CDE#(lf)#(tab)#(tab)END as SVC_AGMT_TYP_CDE#(lf)#(tab), CTRC_STS_EFF_DT#(lf)#(tab), CASE#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u0027A \u0027 THEN \u0027Thrivent Cancel\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u0027B \u0027 THEN \u0027Amendment Rejected\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u0027C \u0027 THEN \u0027Amendment Approved\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u0027D \u0027 THEN \u0027Cancel Pending\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u0027E \u0027 THEN \u0027Death\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u0027F \u0027 THEN \u0027Draft\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u0027P \u0027 THEN \u0027Pending Renewal\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u0027R \u0027 THEN \u0027Rejected\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u0027X \u0027 THEN \u0027Pending Cancel\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u00271 \u0027 THEN \u0027Pending\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u00272 \u0027 THEN \u0027Approved\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u00273 \u0027 THEN \u0027Declined\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u00275 \u0027 THEN \u0027Fulfilled\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u00276 \u0027 THEN \u0027NIGO\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u00277 \u0027 THEN \u0027Amendment Pending\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u00278 \u0027 THEN \u0027NSF Pending\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u00279 \u0027 THEN \u0027Client Cancel\u0027#(lf)#(tab)#(tab)ELSE SVC_AGMT_STS_CDE#(lf)#(tab)#(tab)END as SVC_AGMT_STS_CDE#(lf)#(tab), CASE#(lf)#(tab)#(tab)When SVC_AGMT_GRP_CDE = \u0027BUSN\u0027 then \u0027Business\u0027#(lf)#(tab)#(tab)When SVC_AGMT_GRP_CDE = \u0027MRRY\u0027 then \u0027Married\u0027#(lf)#(tab)#(tab)When SVC_AGMT_GRP_CDE = \u0027INDIV\u0027 then \u0027Individual\u0027#(lf)#(tab)#(tab)When SVC_AGMT_GRP_CDE = \u0027TRUST\u0027 then \u0027Trust\u0027#(lf)#(tab)#(tab)When SVC_AGMT_GRP_CDE = \u0027DUAL\u0027 then \u0027Dual\u0027#(lf)#(tab)#(tab)ELSE SVC_AGMT_GRP_CDE#(lf)#(tab)#(tab)END as SVC_AGMT_GRP_CDE#(lf)#(tab), SVC_AGMT_ISS_CDE#(lf)#(tab), SVC_AGMT_TRMN_DT#(lf)#(tab), SVAG_TRMN_RSN_CDE#(lf)#(tab), ACL_DLIV_DT#(lf)#(tab), APP_DT#(lf)#(tab), CTRC_FLMT_EXT_IND#(lf)#(lf)FROM CONTRACT.SVC_AGMT_HST #(lf)#(lf)UNION ALL #(lf)#(lf)SELECT#(lf)#(tab)  BEN_CTRC_NBR#(lf)#(tab), BEG_TMSP#(lf)#(tab), SVC_AGMT_PLAN_YR#(lf)#(tab), CASE#(lf)#(tab)#(tab)When SVC_AGMT_TYP_CDE = \u0027PTAGM\u0027 THEN \u0027One Time\u0027#(lf)#(tab)#(tab)When SVC_AGMT_TYP_CDE = \u0027OGAGM\u0027 then \u0027Ongoing\u0027#(lf)#(tab)#(tab)ELSE SVC_AGMT_TYP_CDE#(lf)#(tab)#(tab)END as SVC_AGMT_TYP_CDE#(lf)#(tab), CTRC_STS_EFF_DT#(lf)#(tab), CASE#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u0027A \u0027 THEN \u0027Thrivent Cancel\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u0027B \u0027 THEN \u0027Amendment Rejected\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u0027C \u0027 THEN \u0027Amendment Approved\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u0027D \u0027 THEN \u0027Cancel Pending\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u0027E \u0027 THEN \u0027Death\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u0027F \u0027 THEN \u0027Draft\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u0027P \u0027 THEN \u0027Pending Renewal\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u0027R \u0027 THEN \u0027Rejected\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u0027X \u0027 THEN \u0027Pending Cancel\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u00271 \u0027 THEN \u0027Pending\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u00272 \u0027 THEN \u0027Approved\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u00273 \u0027 THEN \u0027Declined\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u00275 \u0027 THEN \u0027Fulfilled\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u00276 \u0027 THEN \u0027NIGO\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u00277 \u0027 THEN \u0027Amendment Pending\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u00278 \u0027 THEN \u0027NSF Pending\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u00279 \u0027 THEN \u0027Client Cancel\u0027#(lf)#(tab)#(tab)ELSE SVC_AGMT_STS_CDE#(lf)#(tab)#(tab)END as SVC_AGMT_STS_CDE#(lf)#(tab), CASE#(lf)#(tab)#(tab)When SVC_AGMT_GRP_CDE = \u0027BUSN\u0027 then \u0027Business\u0027#(lf)#(tab)#(tab)When SVC_AGMT_GRP_CDE = \u0027MRRY\u0027 then \u0027Married\u0027#(lf)#(tab)#(tab)When SVC_AGMT_GRP_CDE = \u0027INDIV\u0027 then \u0027Individual\u0027#(lf)#(tab)#(tab)When SVC_AGMT_GRP_CDE = \u0027TRUST\u0027 then \u0027Trust\u0027#(lf)#(tab)#(tab)When SVC_AGMT_GRP_CDE = \u0027DUAL\u0027 then \u0027Dual\u0027#(lf)#(tab)#(tab)ELSE SVC_AGMT_GRP_CDE#(lf)#(tab)#(tab)END as SVC_AGMT_GRP_CDE#(lf)#(tab), SVC_AGMT_ISS_CDE#(lf)#(tab), SVC_AGMT_TRMN_DT#(lf)#(tab), SVAG_TRMN_RSN_CDE#(lf)#(tab), ACL_DLIV_DT#(lf)#(tab), APP_DT#(lf)#(tab), CTRC_FLMT_EXT_IND#(lf)#(lf)FROM CONTRACT.SVC_AGMT)#(lf)#(lf)WHERE YEAR(BEG_TMSP) \u003e= YEAR(current date) - 3#(lf)#(lf)ORDER BY BEN_CTRC_NBR, BEG_TMSP'])in    Source"}]},{"name":"Categories Sort Table","isHidden":false,"storageMode":"Import","columns":[{"name":"Order","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"Category","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"}],"measures":[],"source":[{"expression":"  UNION(      ROW('Category', 'Connect', 'Order', 1),      ROW('Category', 'Gather Data', 'Order', 2),      ROW('Category', 'Strategy Call/Meeting', 'Order', 3),      ROW('Category', 'Take Action', 'Order', 4),      ROW('Category', 'Review', 'Order', 5),      ROW('Category', 'Service', 'Order', 6),      ROW('Category', 'Other', 'Order', 7)      )"}]},{"name":"login Table","isHidden":false,"storageMode":"Import","columns":[{"name":"USERID","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"}],"measures":[{"name":"USERIDxx","expression":"USERNAME()","isHidden":false},{"name":"FieldLogon","expression":"CONCATENATE('TS',  LEFT(      RIGHT([USERIDxx],        LEN([USERIDxx])-7),5))","isHidden":false}],"source":[{"expression":"       ROW('USERID',' ') "}]},{"name":"DM_01 Vital Stats Summary Fact","isHidden":false,"storageMode":"Import","columns":[{"name":"Appointment Count","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Appointment Organization Dimension Surrogate Key","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Appointment Organization Version Number","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Contract Count","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Gross Dealer Concession Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Gross Dealer Concession Contract Count","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"New Sales Credit Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"New Sales Credit Contract Count","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Person Appointment Count","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Person Contract Count","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Person Contract Gross Dealer Concession Count","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Person Contract New Sales Credit Count","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Person Count","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Referral count","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Vital Stats Calculation Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Appointments_Per_Customer","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Total Close Rate","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Clients Per Appt","expression":"  var _pastyr =LOOKUPVALUE(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], today()-366)RETURNCALCULATE(sum(\u0027DM_01 Vital Stats Summary Fact\u0027[Person Appointment Count]) / sum(\u0027DM_01 Vital Stats Summary Fact\u0027[Appointment Count]), \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT] \u003e _pastyr)","isHidden":false},{"name":"NSC Case Size","expression":"  var _NSCamt =sum(\u0027DM_01 Vital Stats Summary Fact\u0027[New Sales Credit Amount])  var _NSCCtrcCount = sum(\u0027DM_01 Vital Stats Summary Fact\u0027[New Sales Credit Contract Count])RETURNDIVIDE(_NSCamt,_NSCCtrcCount,0)","isHidden":false},{"name":"GDC Case Size","expression":"  var _GDCamt =SUM(\u0027DM_01 Vital Stats Summary Fact\u0027[Gross Dealer Concession Amount])  var _GDCCtrcCount =SUM(\u0027DM_01 Vital Stats Summary Fact\u0027[Gross Dealer Concession Contract Count])RETURNDIVIDE(_GDCamt,_GDCCtrcCount,0)","isHidden":false},{"name":"NSC Contract Efficiency","expression":"  var _NSCContractCount =SUM(\u0027DM_01 Vital Stats Summary Fact\u0027[New Sales Credit Contract Count])  var _PersonContractCount = SUM(\u0027DM_01 Vital Stats Summary Fact\u0027[Person Contract New Sales Credit Count])RETURNDIVIDE(_NSCContractCount,_PersonContractCount,0)","isHidden":false},{"name":"GDC Contract Efficiency","expression":"  var _GDCContractCount =SUM(\u0027DM_01 Vital Stats Summary Fact\u0027[Gross Dealer Concession Contract Count])  var _PersonContractCount = SUM(\u0027DM_01 Vital Stats Summary Fact\u0027[Person Contract Gross Dealer Concession Count])RETURNDIVIDE(_GDCContractCount,_PersonContractCount,0)","isHidden":false},{"name":"NSC Total Close Rate","expression":"  var _NSC_Person_Count = SUM(\u0027DM_01 Vital Stats Summary Fact\u0027[Person Contract New Sales Credit Count])  var _PersonCount = SUM(\u0027DM_01 Vital Stats Summary Fact\u0027[Person Count])ReturnDivide(_NSC_Person_Count,_PersonCount,0)","isHidden":false},{"name":"GDC Total Close Rate","expression":"  var _GDC_Person_Count = SUM(\u0027DM_01 Vital Stats Summary Fact\u0027[Person Contract Gross Dealer Concession Count])  var _PersonCount = SUM(\u0027DM_01 Vital Stats Summary Fact\u0027[Person Count])ReturnDivide(_GDC_Person_Count,_PersonCount,0)","isHidden":false},{"name":"NSC Test","expression":"  var _YTDAPPT = \u0027Vital Stats DB Appointment Detail\u0027[YTD Appts]    var _NSC_Person_Count = SUM(\u0027DM_01 Vital Stats Summary Fact\u0027[Person Contract New Sales Credit Count])  var _PersonCount = SUM(\u0027DM_01 Vital Stats Summary Fact\u0027[Person Count])  var _CloseRate = DIVIDE(_NSC_Person_Count,_PersonCount,0)  var _CaseSize = \u0027DM_01 Vital Stats Summary Fact\u0027[NSC Case Size]  Return  --_CloseRate  CALCULATE((_YTDAPPT*_CloseRate)*_CaseSize)--CALCULATE(\u0027Vital Stats DB Appointment Detail\u0027[YTD Appts] *\u0027DM_01 Vital Stats Summary Fact\u0027[NSC Total Close Rate]*\u0027DM_01 Vital Stats Summary Fact\u0027[NSC Case Size])","isHidden":false}],"source":[{"expression":"let    Source = Sql.Database('dbedwdwprd', 'enterprisedatamart', [Query='Select A.[Appointment Count],#(lf)       A.[Appointment Organization Dimension Surrogate Key],#(lf)       A.[Appointment Organization Version Number],#(lf)       A.[Contract Count],#(lf)       A.[Gross Dealer Concession Amount],#(lf)       A.[Gross Dealer Concession Contract Count],#(lf)       A.[New Sales Credit Amount],#(lf)       A.[New Sales Credit Contract Count],#(lf)#(tab)   A.[Person Appointment Count],#(lf)#(tab)   A.[Person Contract Count],#(lf)#(tab)   A.[Person Contract Gross Dealer Concession Count],#(lf)#(tab)   A.[Person Contract New Sales Credit Count],#(lf)#(tab)   A.[Person Count],#(lf)#(tab)   A.[Referral count],#(lf)#(tab)   A.[Vital Stats Calculation Date],#(lf)#(tab)   B.[Source System Key Text] [EMP_ID]#(lf)#(lf)From EnterpriseDataMart.DM_01.[Vital Stats Summary Fact] as A left join #(lf)     EnterpriseDataMart.DM_01.[Organization Dimension] B#(lf)  on A.[Appointment Organization Dimension Surrogate Key]=B.[Organization Dimension Surrogate Key] and B.[Current Row Indicator] = \u0027Y\u0027#(lf)  ']),    #'Added Custom' = Table.AddColumn(Source, 'Appointments_Per_Customer', each [Person Count]/[Person Appointment Count]),    #'Changed Type' = Table.TransformColumnTypes(#'Added Custom',{{'Appointments_Per_Customer', type number}}),    #'Added Custom1' = Table.AddColumn(#'Changed Type', 'Total Close Rate', each [Person Contract Count] / [Person Count]),    #'Changed Type1' = Table.TransformColumnTypes(#'Added Custom1',{{'Total Close Rate', type number}})in    #'Changed Type1'"}]},{"name":"TFGT Connection Oppty - Mary St","isHidden":false,"storageMode":"Import","columns":[{"name":"Created Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Opportunity Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Client Name: Thrivent ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Client Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Marketing Source","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Marketing Source Detail","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Stage","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JFW Associate: Alias","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JFW Associate: Full Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Referred To","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Client Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Opportunity Owner: Alias","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Opportunity Owner: Full Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Client Name: Assigned Rep: Alias","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Client Name: Assigned Rep: Full Name","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Leads Assigned","expression":"CALCULATE(Count(\u0027TFGT Connection Oppty - Mary St\u0027[Client Name: Thrivent ID])+0,\u0027TFGT Connection Oppty - Mary St\u0027[Stage]='Assigned')","isHidden":false},{"name":"Leads Accepted","expression":"CALCULATE(Count(\u0027TFGT Connection Oppty - Mary St\u0027[Client Name: Thrivent ID])+0,\u0027TFGT Connection Oppty - Mary St\u0027[Stage]='Lead Accepted')","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//Shared//Public//DI and BI//Field Reporting//TFGT Connection Oppty.xlsx'), null, true),    #'TFGT Connection Oppty - Mary St_Sheet' = Source{[Item='TFGT Connection Oppty - Mary St',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'TFGT Connection Oppty - Mary St_Sheet', [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Created Date', type date}, {'Opportunity Name', type text}, {'Client Name: Thrivent ID', Int64.Type}, {'Client Name', type text}, {'Marketing Source', type text}, {'Marketing Source Detail', type text}, {'Lead Capture Form', type text}, {'Stage', type text}, {'Opportunity Remarks', type text}, {'JFW Associate: Alias', type text}, {'JFW Associate: Full Name', type text}, {'Opportunity Notes', type text}, {'Referred To', type text}, {'Client Type', type text}, {'Opportunity Owner: Alias', type text}, {'Opportunity Owner: Full Name', type text}, {'Client Name: Assigned Rep: Alias', type text}, {'Client Name: Assigned Rep: Full Name', type text}}),    #'Filtered Rows' = Table.SelectRows(#'Changed Type', each ([#'JFW Associate: Alias'] \u003c\u003e '')),    #'Removed Other Columns' = Table.SelectColumns(#'Filtered Rows',{'Created Date', 'Opportunity Name', 'Client Name: Thrivent ID', 'Client Name', 'Marketing Source', 'Marketing Source Detail', 'Stage', 'JFW Associate: Alias', 'JFW Associate: Full Name', 'Referred To', 'Client Type', 'Opportunity Owner: Alias', 'Opportunity Owner: Full Name', 'Client Name: Assigned Rep: Alias', 'Client Name: Assigned Rep: Full Name'}),    #'Filtered Rows1' = Table.SelectRows(#'Removed Other Columns', each true)in    #'Filtered Rows1'"}]},{"name":"DTRB_PERF_DATES","isHidden":false,"storageMode":"Import","columns":[{"name":"DT_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CAL_DAY_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_END_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_WK_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"SRC_SYS_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CRET_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"LST_UPDT_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"CRET_USER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LST_UPDT_USER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_DAY_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_MTH_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_QTR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PrevWkDt","dataType":"String","isHidden":false,"expression":"if(weekday(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT])=7,[CAL_DAY_DT], [CAL_DAY_DT]-(WEEKDAY([CAL_DAY_DT],1))) ","columnType":"Calculated"},{"name":"Prior YR or Before","dataType":"String","isHidden":false,"expression":"if(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT]\u003eNOW()-367,'N','Y')","columnType":"Calculated"},{"name":"Today or Before","dataType":"String","isHidden":false,"expression":"if(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT]\u003etoday()-1,'N','Y')","columnType":"Calculated"},{"name":"WorkDayIndex","dataType":"String","isHidden":false,"expression":"If([WeekDay]\u003e 1 \u0026\u0026 [WeekDay] \u003c 7, ([WeekNo]-1)*5 + [WeekDay]-1)","columnType":"Calculated"},{"name":"WeekDay","dataType":"String","isHidden":false,"expression":"WeekDay(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT],1)","columnType":"Calculated"},{"name":"WeekNo","dataType":"String","isHidden":false,"expression":"WEEKNUM([CAL_DAY_DT], 1)","columnType":"Calculated"},{"name":"WorkDayIndex_Test","dataType":"String","isHidden":false,"expression":"IF([WeekDay]\u003e 1 \u0026\u0026 [WeekDay] \u003c 7, ([WeekNo]-1)*5 + [WeekDay]-1,                    IF([WeekDay] = 7, ([WeekNo]-1)*5 + [WeekDay]-2,                    IF([WeekDay] = 1, ([WeekNo]-1)*5 + [WeekDay]-1)))","columnType":"Calculated"},{"name":"Advice Date","dataType":"String","isHidden":false,"expression":"  var _asof=    CALCULATE(Max(Allego_perTSid[asOfDt])) return _asof   ","columnType":"Calculated"}],"measures":[{"name":"Todays_WKDAY","expression":"CALCULATE(var todayno=max(\u0027DTRB_PERF_DATES\u0027[WorkDayIndex])returntodayno, \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT]=TODAY())","isHidden":false},{"name":"Todays_WKDAY_testxx","expression":"CALCULATE(var todayno=max(\u0027DTRB_PERF_DATES\u0027[WorkDayIndex])returntodayno, \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT]=TODAY())","isHidden":false},{"name":"Ashley_Test","expression":"CALCULATE(var todayno=max(\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_WK_NBR])returntodayno, \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT]=TODAY())","isHidden":false}],"source":[{"expression":"let    Source = DB2.Database('PODWH021:50000', 'PODWH021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT DT_SK, #(lf)       CAL_DAY_DT, #(lf)       DTRB_PERF_RPT_WK_END_DT, #(lf)       DTRB_PERF_RPT_WK_NBR,#(lf)       DTRB_PERF_RPT_YR_NBR,#(lf)       DTRB_PERF_RPT_YR_WK_NBR,#(lf)       SRC_SYS_ID, #(lf)       CRET_TMSP, #(lf)       LST_UPDT_TMSP, #(lf)       CRET_USER_ID, #(lf)       LST_UPDT_USER_ID, #(lf)       DTRB_PERF_RPT_DAY_TXT, #(lf)       DTRB_PERF_RPT_MTH_TXT, #(lf)       DTRB_PERF_RPT_QTR_TXT, #(lf)       DTRB_PERF_RPT_WK_TXT,#(lf)       DTRB_PERF_RPT_YR_TXT#(lf)      FROM COMMON.DTRB_PERF_DATES  #(lf)    WHERE DTRB_PERF_RPT_YR_NBR IN (2023, 2024)']),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'CAL_DAY_DT', type date}, {'DTRB_PERF_RPT_WK_END_DT', type date}})in    #'Changed Type'"}]},{"name":"Teams","isHidden":false,"storageMode":"Import","columns":[{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TEAM_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TEAM_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EFF_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"teamind","dataType":"String","isHidden":false,"expression":"if(ISBLANK(Teams[TEAM_NM]),0,1)","columnType":"Calculated"},{"name":"Team Name-del","dataType":"String","isHidden":false,"expression":"  var _TeamName = Teams[TEAM_NM]return_TeamName -- if(isblank(_TeamName),' ',_TeamName)","columnType":"Calculated"}],"measures":[{"name":"Team Name","expression":"  var _TeamName = SELECTEDVALUE(Teams[TEAM_NM])returnif(ISBLANK(_TeamName),' ',_TeamName)","isHidden":false},{"name":"Message_txtTeams","expression":"IF(  SELECTEDVALUE(Teams[TEAM_NM]) \u003c\u003e ' ','',' ')  --DISTINCTCOUNT(\u0027Client_HHLD\u0027[CUST_GRP_ID_NBR])\u003e0,--'',' '--)","isHidden":false}],"source":[{"expression":"let    Source = DB2.Database('PODWH021:50000', 'PODWH021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT A.EMP_ID,#(lf)       B.TEAM_ID,#(lf)       B.TEAM_NM, #(lf)       A.EFF_DT#(lf)  FROM HUMAN_RESOURCES.EMP_TEAM_ORZN_RLTN_CURR_VW A INNER JOIN #(lf)       HUMAN_RESOURCES.TEAM_ORZN_CURR_VW B #(lf)    ON (A.TEAM_ID_SK = B.TEAM_ID_SK)#(lf) WHERE B.EFF_STS_CDE = \u0027A\u0027 #(lf)   AND A.TEAM_MBR_ACTN_CDE \u003c\u003e \u0027DROP\u0027 #(lf)   AND B.TEAM_PRPS_CDE NOT IN (\u0027COAC\u0027,\u0027ENSB\u0027)#(lf)   AND A.EFF_DT=(SELECT MAX(aa.EFF_DT)#(lf)                   FROM HUMAN_RESOURCES.EMP_TEAM_ORZN_RLTN_CURR_VW AA INNER JOIN #(lf)                        HUMAN_RESOURCES.TEAM_ORZN_CURR_VW BB #(lf)                     ON (AA.TEAM_ID_SK = BB.TEAM_ID_SK AND A.EMP_ID=AA.EMP_ID)   #(lf)                  WHERE bb.EFF_STS_CDE = \u0027A\u0027 #(lf)                    AND AA.TEAM_MBR_ACTN_CDE \u003c\u003e \u0027DROP\u0027 #(lf)                    AND BB.TEAM_PRPS_CDE NOT IN (\u0027COAC\u0027,\u0027ENSB\u0027))#(lf)    ORDER BY A.EMP_ID     #(lf)  ']),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'EFF_DT', type date}}),    #'Capitalized Each Word' = Table.TransformColumns(#'Changed Type',{{'TEAM_NM', Text.Proper, type text}})in    #'Capitalized Each Word'"}]},{"name":"SelectionSwitch","isHidden":false,"storageMode":"Import","columns":[{"name":"SelectedID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Selected_NM","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i45WMlTSUfLMS8ksy0wpTcxRitWJVjICCoWkJuYqxcYCAA==', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [SelectedID = _t, Selected_NM = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'SelectedID', Int64.Type}, {'Selected_NM', type text}})in    #'Changed Type'"}]},{"name":"NFC","isHidden":false,"storageMode":"Import","columns":[{"name":"Financial Customer Point Status Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Financial Customer Point Value","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CUST_LGAL_FMT_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Contract Issue Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Level 3 Product Line Of Business Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Level 3 Product Line Of Business Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TS ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Calendar Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Financial Customer Point Reason Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Financial Customer Point Reason Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Financial Customer Point Relationship Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Financial Customer Point Relationship Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Year Number","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PYTD NFC Flag","dataType":"String","isHidden":false,"expression":" if(and(\u0027NFC\u0027[Calendar Date] \u003c= DATE(YEAR(today())-1,MONTH(today()),DAY(today())), \u0027NFC\u0027[Distribution Performance Reporting Year Number] = YEAR(today())-1), 1, 0)","columnType":"Calculated"},{"name":"YTD NFC Flag","dataType":"String","isHidden":false,"expression":"if(and(\u0027NFC\u0027[Calendar Date] \u003c= DATE(YEAR(today()),MONTH(today()),DAY(today())),YEAR(\u0027NFC\u0027[Calendar Date]) = YEAR(today())), 1, 0)","columnType":"Calculated"},{"name":"PY2TD NFC Flag","dataType":"String","isHidden":false,"expression":" if(and(\u0027NFC\u0027[Calendar Date] \u003c= DATE(YEAR(today())-2,MONTH(today()),DAY(today())), \u0027NFC\u0027[Distribution Performance Reporting Year Number] = YEAR(today())-2), 1, 0)","columnType":"Calculated"},{"name":"PY NFC Flag","dataType":"String","isHidden":false,"expression":"if(NFC[DTRB_PERF_RPT_YR_TXT] = 'Previous', 1,0) ","columnType":"Calculated"},{"name":"PY2 NFC Flag","dataType":"String","isHidden":false,"expression":" var py_start = CALCULATE(MIN(\u0027NFC\u0027[Calendar Date]),ALLEXCEPT(\u0027NFC\u0027,\u0027NFC\u0027[DTRB_PERF_RPT_YR_TXT]),all(\u0027NFC\u0027),\u0027NFC\u0027[DTRB_PERF_RPT_YR_TXT]='Previous') var py_end = CALCULATE(MAX(\u0027NFC\u0027[Calendar Date]),ALLEXCEPT(\u0027NFC\u0027,\u0027NFC\u0027[DTRB_PERF_RPT_YR_TXT]),all(\u0027NFC\u0027),\u0027NFC\u0027[DTRB_PERF_RPT_YR_TXT]='Previous') var py2_start= date(year(py_start)-1,month(py_start),day(py_start)) var py2_end= date(year(py_end)-1,month(py_end),day(py_end)) var flagind = if(\u0027NFC\u0027[Calendar Date] \u003c= py2_end \u0026\u0026 \u0027NFC\u0027[Calendar Date] \u003e= py2_start,1, 0)Returnflagind","columnType":"Calculated"},{"name":"CUST_ID_NBR","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EMPL_NM","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"PY New Clients","expression":"var _total=CALCULATE(sum(\u0027NFC\u0027[Financial Customer Point Value]), \u0027NFC\u0027[PY NFC Flag] = 1)--var _total=CALCULATE(sum(\u0027NFC\u0027[Financial Customer Point Value]),\u0027NFC\u0027[DTRB_PERF_RPT_YR_TXT]='Previous')RETURNif(isblank(_total),0,_total)","isHidden":false},{"name":"PY2 New Clients","expression":"var _total=CALCULATE(sum(\u0027NFC\u0027[Financial Customer Point Value]), \u0027NFC\u0027[PY2 NFC Flag] = 1)RETURNif(isblank(_total),0,_total)","isHidden":false},{"name":"PY2TD New Clients","expression":"var cy_start = CALCULATE(MIN(\u0027NFC\u0027[Calendar Date]),ALLEXCEPT(\u0027NFC\u0027,\u0027NFC\u0027[DTRB_PERF_RPT_YR_TXT]),all(\u0027NFC\u0027),\u0027NFC\u0027[DTRB_PERF_RPT_YR_TXT]='Current')var cy_end = CALCULATE(MAX(\u0027NFC\u0027[Calendar Date]),ALLEXCEPT(\u0027NFC\u0027,\u0027NFC\u0027[DTRB_PERF_RPT_YR_TXT]),all(\u0027NFC\u0027),\u0027NFC\u0027[DTRB_PERF_RPT_YR_TXT]='Current')var py2_start = date(YEAR(cy_start)-2,MONTH(cy_start),DAY(cy_start))var py2_end = DATE(YEAR(cy_end)-2,MONTH(cy_end),DAY(cy_end))var _total = CALCULATE(SUM(\u0027NFC\u0027[Financial Customer Point Value]), \u0027NFC\u0027, \u0027NFC\u0027[Calendar Date] \u003c= py2_end \u0026\u0026 \u0027NFC\u0027[Calendar Date] \u003e= py2_start)RETURNif(isblank(_total),0,_total)--CALCULATE(SUM(NFC[Financial Customer Point Value]), NFC, NFC[Calendar Date] \u003c= py2_end \u0026\u0026 NFC[Calendar Date] \u003e= py2_start)","isHidden":false},{"name":"PYTD New Clients","expression":"  var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT])  Var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])  var _total = calculate(sum(\u0027NFC\u0027[Financial Customer Point Value]),DTRB_PERF_DATES[CAL_DAY_DT] \u003e= (min_date-365), DTRB_PERF_DATES[CAL_DAY_DT] \u003c= (max_date-365))ReturnIF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"YOY Change","expression":"  VAR __BASELINE_VALUE = [PYTD New Clients]  VAR __VALUE_TO_COMPARE = [YTD New Clients]  var _total =    IF(        NOT ISBLANK(__VALUE_TO_COMPARE),        DIVIDE(__VALUE_TO_COMPARE - __BASELINE_VALUE, __BASELINE_VALUE)    )Returnif(isblank(_total),0,_total)","isHidden":false},{"name":"YTD New Clients","expression":"  var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT])  Var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])  var _total = calculate(sum(\u0027NFC\u0027[Financial Customer Point Value]),DTRB_PERF_DATES[CAL_DAY_DT] \u003e= min_date, DTRB_PERF_DATES[CAL_DAY_DT] \u003c= max_date)ReturnIF(ISBLANK(_total),0,_total)","isHidden":false}],"source":[{"expression":"let    Source = DB2.Database('PODWH021:50000', 'PODWH021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT --IA_DATES_ITRL.DT_SK as ''Date Surrogate Key'',#(lf)      -- TF_FIN_CUST_EVT_FCT_CFDL.CTRC_VRSN_NBR as ''Contract Version Number'',#(lf)      -- TF_FIN_CUST_EVT_FCT_CFDL.WRTG_AGT_VRSN_NBR as ''Writing Agent Version Number'',#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_STS_CDE as ''Financial Customer Point Status Code'',#(lf)      -- TF_FIN_CUST_EVT_FCT_CFDL.CUST_AGE as ''Financial Customer Age'',#(lf)      -- TF_FIN_CUST_EVT_FCT_CFDL.AGE_CLAS_CDE as ''Age Class Code'',#(lf)      -- TF_FIN_CUST_EVT_FCT_CFDL.AGE_CLAS_DSCR as ''Age Class Description'',#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_VLU as ''Financial Customer Point Value'',#(lf)       CNF_CUSTOMER_DIM_CFDL.CUST_ID_NBR,#(lf)       CNF_CUSTOMER_DIM_CFDL.CUST_LGAL_FMT_NM, #(lf)       --CNF_CUSTOMER_DIM_CFDL.CUST_BRTH_DT,#(lf)      -- CNF_CUSTOMER_DIM_CFDL.MBR_TYP_CDE as ''Member Type Code'',#(lf)      -- CNF_CUSTOMER_DIM_CFDL.MBR_TYP_DSCR as ''Member Type Description'',#(lf)      -- CNF_CUSTOMER_DIM_CFDL.RSDL_ST_CDE as ''Residential State Code'',#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.CTRC_ISS_DT as ''Contract Issue Date'', #(lf)      -- CNF_CONTRACT_DIM_DTL_CFDL.L5_PLOB_SGRP_CDE as ''Level 5 Product Line Of Business Subgroup Code'',#(lf)      -- CNF_CONTRACT_DIM_DTL_CFDL.L5_PLOB_SGRP_DSCR as ''Level 5 Product Line Of Business Subgroup Description'',#(lf)      -- CNF_CONTRACT_DIM_DTL_CFDL.L4_PLOB_GRP_CDE as ''Level 4 Product Line Of Business Group Code'',#(lf)      -- CNF_CONTRACT_DIM_DTL_CFDL.L4_PLOB_GRP_DSCR as ''Level 4 Product Line Of Business Group Description'',#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L3_PROD_LOB_CDE as ''Level 3 Product Line Of Business Code'',#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L3_PROD_LOB_DSCR as ''Level 3 Product Line Of Business Description'',#(lf)     --  CNF_CONTRACT_DIM_DTL_CFDL.L2_PROD_CHAR_CDE as ''Level 2 Product Character Code'',#(lf)      -- CNF_CONTRACT_DIM_DTL_CFDL.L2_PROD_CHAR_DSCR as ''Level 2 Product Character Description'',#(lf)      -- AGT_DIM_CURR_CFDL.PARY_DSPL_2_NM as ''Assigned FR'',#(lf)      -- AGT_DIM_CURR_CFDL.FRST_NM as ''Employee First Name'',#(lf)      -- AGT_DIM_CURR_CFDL.MDDL_NM as ''Employee Middle Name'',#(lf)      -- AGT_DIM_CURR_CFDL.LST_NM as ''Employee Last Name'',#(lf)      AGT_DIM_CURR_CFDL.FRST_NM || \u0027 \u0027 || AGT_DIM_CURR_CFDL.LST_NM as EMPL_NM,#(lf)      -- AGT_DIM_CURR_CFDL.ADJ_SVC_DT as ''Adjusted Service Date'',#(lf)       AGT_DIM_CURR_CFDL.EMP_ID as ''TS ID'',#(lf)      -- AGT_DIM_CURR_CFDL.EMP_STS_TYP_CDE as ''Employee Status Type Code'',#(lf)      -- AGT_DIM_CURR_CFDL.EMP_STS_TYP_DSCR as ''Employee Status Type Description'',#(lf)      -- AGT_DIM_CURR_CFDL.JOB_TYP_CDE as ''Job Type Code'',#(lf)      -- AGT_DIM_CURR_CFDL.JOB_TYP_DSCR as ''Job Type Description'',#(lf)      -- AGT_DIM_CURR_CFDL.CURR_ROW_IND as ''Current Row Indicator Sales Hierarchy'',#(lf)       IA_DATES_ITRL.CAL_DAY_DT as ''Calendar Date'',#(lf)       --IA_DATES_ITRL.CAL_MTH_NM,#(lf)      -- IA_DATES_ITRL.CAL_MTH_STRT_DT as ''Calendar Month State Date'',#(lf)      -- IA_DATES_ITRL.CAL_MTH_END_DT as ''Calendar Month End Date'',#(lf)       --IA_DATES_ITRL.CAL_YR_QTR_NBR,#(lf)       --IA_DATES_ITRL.CAL_QTR_NM,#(lf)       --IA_DATES_ITRL.CAL_WK_NM,#(lf)       FIN_CUST_ELIG_DIM_CFDL.FIN_CUST_PNT_RSN_CDE as ''Financial Customer Point Reason Code'',#(lf)       FIN_CUST_ELIG_DIM_CFDL.FIN_CUST_PNT_RSN_DSCR as ''Financial Customer Point Reason Description'',#(lf)       FIN_CUST_ELIG_DIM_CFDL.CTRC_RLTN_TYP_CDE as ''Financial Customer Point Relationship Code'',#(lf)       FIN_CUST_ELIG_DIM_CFDL.CTRC_RLTN_TYP_DSCR as ''Financial Customer Point Relationship Description'',#(lf)      -- CASE#(lf)      --    WHEN (CUST_AGE \u003e= 0) AND (CUST_AGE \u003c= 15) THEN \u00270-15\u0027#(lf)      --    WHEN (CUST_AGE \u003e= 16) AND (CUST_AGE \u003c= 25) THEN \u002716-25\u0027#(lf)      --    WHEN (CUST_AGE \u003e= 26) AND (CUST_AGE \u003c= 35) THEN \u002726-35\u0027#(lf)      --    WHEN (CUST_AGE \u003e= 36) AND (CUST_AGE \u003c= 45) THEN \u002736-45\u0027#(lf)      --    WHEN (CUST_AGE \u003e= 46) AND (CUST_AGE \u003c= 55) THEN \u002746-55\u0027#(lf)      --    WHEN (CUST_AGE \u003e= 56) AND (CUST_AGE \u003c= 65) THEN \u002756-65\u0027#(lf)      --    WHEN (CUST_AGE \u003e= 66) AND (CUST_AGE \u003c= 75) THEN \u002766-75\u0027#(lf)      --    WHEN CUST_AGE \u003e 75 THEN \u002776+\u0027#(lf)      -- END#(lf)      --    AS ''Financial Customer Age Group'',#(lf)      -- integer (floor ( (CURRENT DATE - CUST_BRTH_DT) / 10000)) AS ''Member Age'',#(lf)      -- DTRB_PERF_DATES.DTRB_PERF_RPT_WK_END_DT as ''Distribution Performance Reporting Week End Date'',#(lf)      -- DTRB_PERF_DATES.DTRB_PERF_RPT_WK_NBR as ''Distribution Performance Reporting Week Number'',#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_YR_NBR as ''Distribution Performance Reporting Year Number'',#(lf)      -- DTRB_PERF_DATES.DTRB_PERF_RPT_YR_WK_NBR as ''Distribution Performance Reporting Year Week Number'',#(lf)      -- DTRB_PERF_DATES.DTRB_PERF_RPT_WK_TXT,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_YR_TXT #(lf)     --  DTRB_PERF_DATES.DTRB_PERF_RPT_DAY_TXT,#(lf)     --  DTRB_PERF_DATES.DTRB_PERF_RPT_MTH_TXT,#(lf)     --  DTRB_PERF_DATES.DTRB_PERF_RPT_QTR_TXT,#(lf)     --  SALE_HIER_DIM.SALE_HIER_ID as ''Sales Hierarchy Identifier'' #(lf)      -- SALE_HIER_DIM.EFF_BEG_TMSP as ''Effective Begin Timestamp'',#(lf)      -- SALE_HIER_DIM.EFF_END_TMSP as ''Effective End Timestamp'',#(lf)      -- SALE_HIER_DIM.CURR_ROW_IND as ''Agent Current Row Indicator'',#(lf)      -- SALE_HIER_DIM.PRTR_NM as ''Partner Name'',#(lf)      -- SALE_HIER_DIM.MANP_NM as ''Managing Partner Name'',#(lf)      -- SALE_HIER_DIM.ORZN_ZONE_CDE as ''Market'',#(lf)      -- SALE_HIER_DIM.ORZN_ZONE_DSCR as ''Organization Zone Description'',#(lf)      -- SALE_HIER_DIM.ORZN_DEPT_CDE as ''RFO'',#(lf)      -- SALE_HIER_DIM.ORZN_DEPT_DSCR as ''Organization Department Description'',#(lf)      -- SALE_HIER_DIM.ORZN_DIV_CDE as ''Organization Division Code'',#(lf)      -- SALE_HIER_DIM.ORZN_DIV_DSCR as ''Organization Division Description'',#(lf)      -- SALE_HIER_DIM.SALE_HIER_DIM_SK as ''Sales Hierarchy Dimension Surrogate Key''#(lf)#(lf)  FROM ((((((COMMON.IA_DATES_ITRL IA_DATES_ITRL INNER JOIN#(lf)             COMMON.DTRB_PERF_DATES DTRB_PERF_DATES#(lf)          ON (IA_DATES_ITRL.DT_SK = DTRB_PERF_DATES.DT_SK)) LEFT OUTER JOIN#(lf)             SALES.TF_FIN_CUST_EVT_FCT_CFDL TF_FIN_CUST_EVT_FCT_CFDL#(lf)          ON (IA_DATES_ITRL.DT_SK = TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_CRNG_DT_SK)) RIGHT OUTER JOIN#(lf)             HUMAN_RESOURCES.SALE_HIER_DIM SALE_HIER_DIM#(lf)          ON (SALE_HIER_DIM.SALE_HIER_DIM_SK = TF_FIN_CUST_EVT_FCT_CFDL.SLHR_DIM_CURR_CRNG_AGT_SK)) LEFT OUTER JOIN#(lf)             MEMBER.CNF_CUSTOMER_DIM_CFDL CNF_CUSTOMER_DIM_CFDL#(lf)          ON (CNF_CUSTOMER_DIM_CFDL.CUST_SK = TF_FIN_CUST_EVT_FCT_CFDL.CUST_SK)) LEFT OUTER JOIN#(lf)             HUMAN_RESOURCES.AGT_DIM_CURR_CFDL AGT_DIM_CURR_CFDL#(lf)          ON (AGT_DIM_CURR_CFDL.AGT_DIM_SK = TF_FIN_CUST_EVT_FCT_CFDL.CRNG_AGT_SK)) RIGHT OUTER JOIN#(lf)             SALES.FIN_CUST_ELIG_DIM_CFDL FIN_CUST_ELIG_DIM_CFDL#(lf)          ON (FIN_CUST_ELIG_DIM_CFDL.FIN_CUST_PNT_ELIG_DIM_SK = TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_ELIG_DIM_SK)) LEFT OUTER JOIN#(lf)             CONTRACT.CNF_CONTRACT_DIM_DTL_CFDL CNF_CONTRACT_DIM_DTL_CFDL#(lf)          ON (CNF_CONTRACT_DIM_DTL_CFDL.CTRC_SK = TF_FIN_CUST_EVT_FCT_CFDL.CTRC_SK) and #(lf)             (CNF_CONTRACT_DIM_DTL_CFDL.VRSN_NBR = TF_FIN_CUST_EVT_FCT_CFDL.CTRC_VRSN_NBR)#(lf)                     #(lf) WHERE (AGT_DIM_CURR_CFDL.CURR_ROW_IND = \u0027Y\u0027)#(lf)   AND (SALE_HIER_DIM.CURR_ROW_IND = \u0027Y\u0027)#(lf)   AND (sale_hier_dim.ORZN_DEPT_CDE in (\u00270001\u0027, \u00270115\u0027,\u00270165\u0027,\u00270190\u0027,\u00270240\u0027,\u00270283\u0027,\u00270291\u0027,\u00270361\u0027,\u00270365\u0027,\u00270384\u0027,\u00270410\u0027,\u00270435\u0027,\u00270475\u0027,\u00270496\u0027,\u00270525\u0027,\u00270529\u0027,\u00270810\u0027)#(lf)    or AGT_DIM_CURR_CFDL.ORZN_DEPT_CDE in (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027))  #(lf)AND DTRB_PERF_DATES.DTRB_PERF_RPT_YR_NBR in (\u00272023\u0027,\u00272024\u0027)#(lf)   AND substring(SALE_HIER_DIM.SALE_HIER_ID,1,2)=\u0027TS\u0027#(lf)   and TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_VLU \u003c\u003e 0']),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Contract Issue Date', type date}, {'Calendar Date', type date}})in    #'Changed Type'"}]},{"name":"AUMAUA","isHidden":false,"storageMode":"Import","columns":[{"name":"vaaum","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"anaum","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"mfaum","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"soaum","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"immaum","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"vulcv","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"ulcv","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"tradcv","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"totwrapaum","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"tottrstaua","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TOTAL AUM","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TOTAL AUA","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TOTAL","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"tsid","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"np_brkgaua","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"AUM \u0026 AUA Sort Order","dataType":"String","isHidden":false,"expression":"Related(AUMAUA_Sort[Order])","columnType":"Calculated"}],"measures":[{"name":"Message_txt_AUA","expression":"IF(SUM(\u0027AUMAUA\u0027[TOTAL AUA]) \u003e 0,  '',  'No Clients with AUA Products')","isHidden":false},{"name":"ShowHideCC_AUA","expression":"IF(SUM(\u0027AUMAUA\u0027[TOTAL AUA]) \u003e 0, '#1C00ff00','White')","isHidden":false},{"name":"Message_txt_AUM","expression":"IF(SUM(\u0027AUMAUA\u0027[TOTAL AUM]) \u003e 0,  '',  'No Clients with AUM Products')","isHidden":false},{"name":"ShowHideCC_AUM","expression":"IF(SUM(\u0027AUMAUA\u0027[TOTAL AUM]) \u003e 0, '#1C00ff00','White')","isHidden":false},{"name":"TOTAL AUM \u0026 AUA","expression":" var _total =  CALCULATE(sum(\u0027AUMAUA\u0027[TOTAL]))Returnif(isblank(_total),0,_total)   ","isHidden":false},{"name":"YTD Flag check","expression":"var flagind = if(and(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT] \u003c= today()-1, \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'Current'), True, False)Return ","isHidden":false}],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////pnfiles002b//fp_cifs_7834_sas$//marketanalysis//fieldreporting//pbi data//aumaua//AUMAUA.csv'),[Delimiter=',', Columns=21, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Removed Columns' = Table.RemoveColumns(#'Promoted Headers',{'', '_1', '_2', '_3', '_4', '_5', '_6', '_7'}),    #'Changed Type' = Table.TransformColumnTypes(#'Removed Columns',{{'tsid', type text}, {'Product', type text}, {'vaaum', type number}, {'anaum', type number}, {'mfaum', type number}, {'soaum', type number}, {'immaum', type number}, {'vulcv', type number}, {'ulcv', type number}, {'tradcv', type number}, {'totwrapaum', type number}, {'tottrstaua', type number},{'np_brkgaua', type number}}),    #'Added Custom' = Table.AddColumn(#'Changed Type', 'TOTAL AUM', each [anaum] + [immaum] + [mfaum] +[vaaum] + [vulcv] + [ulcv] + [tradcv] + [np_brkgaua]),    #'Added Custom1' = Table.AddColumn(#'Added Custom', 'TOTAL AUA', each [totwrapaum]),    #'Added Custom2' = Table.AddColumn(#'Added Custom1', 'TOTAL', each [anaum] +[immaum] +[mfaum] + [soaum] + [vaaum] +[vulcv] +[ulcv] + [tradcv] +[totwrapaum] +[np_brkgaua])in    #'Added Custom2'"}]},{"name":"Distribution Performance Dates Dimension","isHidden":true,"storageMode":"Import","columns":[{"name":"Date Surrogate Key","dataType":"Double","isHidden":true,"columnType":"Data"},{"name":"Calendar Day Date","dataType":"DateTime","isHidden":true,"columnType":"Data"},{"name":"Distribution Performance Reporting Year Number","dataType":"Double","isHidden":true,"columnType":"Data"},{"name":"Distribution Performance Reporting Year Week Number","dataType":"Double","isHidden":true,"columnType":"Data"},{"name":"Distribution Performance Report Year Text","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"Distribution Performance Reporting Week Number","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Day Text","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Month Text","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Quarter Text","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Week Text","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com', 'ENTERPRISE_EDW_PRESENTATION_WH', [Role=null, CreateNavigationProperties=null, ConnectionTimeout=null, CommandTimeout=null]),    ENTERPRISE_EDW_Database = Source{[Name='ENTERPRISE_EDW',Kind='Database']}[Data],    PRESENTATION_01_Schema = ENTERPRISE_EDW_Database{[Name='PRESENTATION_01',Kind='Schema']}[Data],    #'Distribution Performance Dates Dimension_View' = PRESENTATION_01_Schema{[Name='Distribution Performance Dates Dimension',Kind='View']}[Data],    #'Removed Columns' = Table.RemoveColumns(#'Distribution Performance Dates Dimension_View',{'Distribution Performance Reporting Week End Date'}),    #'Filtered Rows' = Table.SelectRows(#'Removed Columns', each [Date Surrogate Key] \u003e= 2459216)in    #'Filtered Rows'"}]},{"name":"Measures Table","isHidden":false,"storageMode":"Import","columns":[{"name":"Column","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"}],"measures":[{"name":"YTD Conf Credit Snflkxx","expression":"  --var ConfCredit_team = CALCULATE(sum(\u0027Conference Credits\u0027[Conference Credit Amount]), \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'CURRENT')  --var ConfCredit_ind = CALCULATE(sum(\u0027Conference Credits\u0027[Conference Credit Amount]) + sum(\u0027Conference Credits - Rollup\u0027[Conference Credit Amount]),\u0027DTRB_PERF_DATES  --[DTRB_PERF_RPT_YR_TXT] = 'CURRENT')  var ConfCredit_ind = CALCULATE(sum(\u0027ConferenceCredits\u0027[Conference Credit Amount]),\u0027DTRB_PERF_DATES\u0027) -- var _ConfCreditTotal = if([TeamNmFiltered]=1 \u0026\u0026 [EmployeeNmFiltered]=0,nscamt_team,nscamt_ind)  var _ConfCreditTotal = ConfCredit_ind  return  IF(ISBLANK(_ConfCreditTotal),0,_ConfCreditTotal)  --if([TeamNmFiltered]=1 \u0026\u0026 [EmployeeNmFiltered]=0,ConfCredit_team,ConfCredit_ind) ","isHidden":false},{"name":"YTD NSC Snflkxx","expression":"-- var nscamt_team = CALCULATE(sum(\u0027NSCGDC\u0027[New Sales Credit Amount]), \u0027NSCGDC\u0027[CMPAGT_EQ_ROLLUP] = 'N',  \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'CURRENT') var nscamt_ind = CALCULATE(sum(\u0027NSCGDC_Snowflake\u0027[New Sales Credit Amount]),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'CURRENT') --var _nsctotal = if([TeamNmFiltered]=1 \u0026\u0026 [EmployeeNmFiltered]=0,nscamt_team,nscamt_ind)  var _nsctotal = nscamt_ind return IF(ISBLANK(_nsctotal),0,_nsctotal)  --if([TeamNmFiltered]=1 \u0026\u0026 [EmployeeNmFiltered]=0,nscamt_team,nscamt_ind) ","isHidden":false},{"name":"YTD GDC Snflkxx","expression":"var gdcamt_ind = CALCULATE(sum(\u0027NSCGDC_Snowflake\u0027[Gross Dealer Concessions Amount]),NSCGDC_Snowflake[Distribution Performance Report Year Text]= 'CURRENT')var _gdctotal = gdcamt_indreturnIF(ISBLANK(_gdctotal),0,_gdctotal)","isHidden":false},{"name":"GDC SNWFLK Goal %xx","expression":" --var gdcamt_team = CALCULATE(sum(\u0027Compensation and Sales Metrics Fact\u0027[Gross Dealer Concessions Amount]), \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'CURRENT') var gdcamt_ind = CALCULATE(sum(\u0027NSCGDC_Snowflake\u0027[Gross Dealer Concessions Amount]),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'CURRENT') --var _gdcamt = if([TeamNmFiltered]=1 \u0026\u0026 [EmployeeNmFiltered]=0,gdcamt_team,gdcamt_ind)  var _gdcamt = gdcamt_ind var _total = DIVIDE(_gdcamt, SUM(FldGoals[GDC_Goal]),0)ReturnIF(ISBLANK(_total),0,_total) ","isHidden":false},{"name":"NSC SNWFLK Goal %xx","expression":" --var nscamt_team = CALCULATE(sum(\u0027NSCGDC w_Rollup\u0027[NSC_AMT]), \u0027NSCGDC w_Rollup\u0027[CMPAGT_EQ_EMPID] = 'N',  \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'CURRENT') -- var nscamt_ind = CALCULATE(sum(\u0027NSCGDC w_Rollup\u0027[NSC_AMT]),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'CURRENT') --var nscamt_team = CALCULATE(sum(\u0027Compensation and Sales Metrics Fact\u0027[New Sales Credit Amount]), \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'CURRENT') var nscamt_ind = CALCULATE(sum(\u0027NSCGDC_Snowflake\u0027[New Sales Credit Amount]),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'CURRENT') --var _nscamt = if([TeamNmFiltered]=1 \u0026\u0026 [EmployeeNmFiltered]=0,nscamt_team,nscamt_ind)  var _nscamt = nscamt_ind var _total = DIVIDE(_nscamt, SUM(FldGoals[NSC_Goal]),0)ReturnIF(ISBLANK(_total),0,_total) ","isHidden":false},{"name":"Prior GDC Total Snflkxx","expression":"var gdc_ytd_ind = CALCULATE(sum(\u0027NSCGDC_Snowflake\u0027[Gross Dealer Concessions Amount]), \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'PREVIOUS') var _total = gdc_ytd_indReturnif(isblank(_total),0,_total)  ","isHidden":false},{"name":"Prior NSC Total Snflkxx","expression":"var nsc_ytd_ind = CALCULATE(sum(\u0027NSCGDC_Snowflake\u0027[New Sales Credit Amount]),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'PREVIOUS')--  var nscamt_team = CALCULATE(sum(\u0027NSCGDC w_Rollup\u0027[NSC_AMT]),\u0027NSCGDC w_Rollup\u0027[CMPAGT_EQ_EMPID] = 'N', --                                  \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'PREVIOUS')--  var nscamt_ind = CALCULATE(sum(\u0027NSCGDC w_Rollup\u0027[NSC_AMT]), \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'PREVIOUS')--  var _total = if([TeamNmFiltered]=1 \u0026\u0026 [EmployeeNmFiltered]=0,nscamt_team,nscamt_ind) var _total = nsc_ytd_indReturnif(isblank(_total),0,_total)    --CALCULATE(sum(\u0027NSCGDC w_Rollup\u0027[NSC_AMT]),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'PREVIOUS')","isHidden":false},{"name":"PYTD GDC Snflkxx","expression":"var gdcamt_ind = CALCULATE(sum(\u0027NSCGDC_Snowflake\u0027[Gross Dealer Concessions Amount]), \u0027NSCGDC_Snowflake\u0027[PYTD GDC Snflk Flag] = 1) var _total= gdcamt_indreturnif(isblank(_total),0,_total) ","isHidden":false},{"name":"PYTD NSC Snflkxx","expression":"--  var nscamt_team = CALCULATE(sum(\u0027NSCGDC w_Rollup\u0027[NSC_AMT]),\u0027NSCGDC w_Rollup\u0027[CMPAGT_EQ_EMPID] = 'N', --                                  \u0027NSCGDC w_Rollup\u0027[PYTD NSC Flag] = 1)--  var nscamt_ind = CALCULATE(sum(\u0027NSCGDC w_Rollup\u0027[NSC_AMT]),\u0027NSCGDC w_Rollup\u0027[PYTD NSC Flag] = 1)--  var _total= if([TeamNmFiltered]=1 \u0026\u0026 [EmployeeNmFiltered]=0,nscamt_team,nscamt_ind) var nscamt_ind = CALCULATE(sum(\u0027NSCGDC_Snowflake\u0027[New Sales Credit Amount]), \u0027NSCGDC_Snowflake\u0027[PYTD NSC Snflk Flag] =1) var _total= nscamt_indreturnif(isblank(_total),0,_total)   --CALCULATE(sum(\u0027NSCGDC w_Rollup\u0027[NSC_AMT]), \u0027NSCGDC w_Rollup\u0027[PYTD NSC Flag] =1)","isHidden":false},{"name":"YOY GDC Snflkxx","expression":"var gdc_ytd_ind = CALCULATE(sum(\u0027NSCGDC_Snowflake\u0027[Gross Dealer Concessions Amount]),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'CURRENT')var _ytd_total = gdc_ytd_indvar gdc_pytd_ind = CALCULATE(sum(\u0027NSCGDC_Snowflake\u0027[Gross Dealer Concessions Amount]), \u0027NSCGDC_Snowflake\u0027[PYTD GDC Snflk Flag] =1) var _pytd_total= gdc_pytd_ind RETURN--_pytd_totalIF((_pytd_total) = 0,0, ((_ytd_total - _pytd_total) / _pytd_total))","isHidden":false},{"name":"YOY NSC Snflkxx","expression":"-- var nsc_ytd_team = CALCULATE(sum(\u0027NSCGDC w_Rollup\u0027[NSC_AMT]), \u0027NSCGDC w_Rollup\u0027[CMPAGT_EQ_EMPID] = 'N',  \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'CURRENT')-- var nsc_ytd_ind = CALCULATE(sum(\u0027NSCGDC w_Rollup\u0027[NSC_AMT]),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'CURRENT')-- var _ytd_total = if([TeamNmFiltered]=1 \u0026\u0026 [EmployeeNmFiltered]=0,nsc_ytd_team,nsc_ytd_ind) --var nsc_pytd_team = CALCULATE(sum(\u0027NSCGDC w_Rollup\u0027[NSC_AMT]),\u0027NSCGDC w_Rollup\u0027[CMPAGT_EQ_EMPID] = 'N', \u0027NSCGDC w_Rollup\u0027[PYTD NSC Flag] = 1)--var nsc_pytd_ind = CALCULATE(sum(\u0027NSCGDC w_Rollup\u0027[NSC_AMT]),\u0027NSCGDC w_Rollup\u0027[PYTD NSC Flag] = 1)--var _pytd_total = if([TeamNmFiltered]=1 \u0026\u0026 [EmployeeNmFiltered]=0,nsc_pytd_team,nsc_pytd_ind) var nsc_ytd_ind = CALCULATE(sum(\u0027NSCGDC_Snowflake\u0027[New Sales Credit Amount]),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'CURRENT')var _ytd_total = nsc_ytd_indvar nsc_pytd_ind = CALCULATE(sum(\u0027NSCGDC_Snowflake\u0027[New Sales Credit Amount]), \u0027NSCGDC_Snowflake\u0027[PYTD NSC Snflk Flag] =1)var _pytd_total= nsc_pytd_ind RETURNIF((_pytd_total) = 0,0, ((_ytd_total - _pytd_total) / _pytd_total))--IF((\u0027NSCGDC w_Rollup\u0027[PYTD NSC]) = 0,0, ((\u0027NSCGDC w_Rollup\u0027[YTD NSC] - \u0027NSCGDC w_Rollup\u0027[PYTD NSC]) / \u0027NSCGDC w_Rollup\u0027[PYTD NSC]))","isHidden":false},{"name":"Legend","expression":"1","isHidden":false},{"name":"GDC SNWFLK Goal %","expression":" --var gdcamt_team = CALCULATE(sum(\u0027Compensation and Sales Metrics Fact\u0027[Gross Dealer Concessions Amount]), \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'CURRENT') var gdcamt_ind = CALCULATE(sum(\u0027NSCGDC_Snowflake\u0027[Gross Dealer Concessions Amount]),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'CURRENT') --var _gdcamt = if([TeamNmFiltered]=1 \u0026\u0026 [EmployeeNmFiltered]=0,gdcamt_team,gdcamt_ind)  var _gdcamt = gdcamt_ind var _total = DIVIDE(_gdcamt, SUM(FldGoals[GDC_Goal]),0)ReturnIF(ISBLANK(_total),0,_total) ","isHidden":false},{"name":"NSC SNWFLK Goal %","expression":" --var nscamt_team = CALCULATE(sum(\u0027NSCGDC w_Rollup\u0027[NSC_AMT]), \u0027NSCGDC w_Rollup\u0027[CMPAGT_EQ_EMPID] = 'N',  \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'CURRENT') -- var nscamt_ind = CALCULATE(sum(\u0027NSCGDC w_Rollup\u0027[NSC_AMT]),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'CURRENT')-- var nscamt_team = CALCULATE(sum(\u0027NSCGDC\u0027[New Sales Credit Amount]), \u0027NSCGDC\u0027[CMPAGT_EQ_ROLLUP] = 'N', \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'CURRENT') var nscamt_ind = CALCULATE(sum(\u0027NSCGDC_Snowflake\u0027[New Sales Credit Amount]),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'CURRENT') --var _nscamt = if([TeamNmFiltered]=1 \u0026\u0026 [EmployeeNmFiltered]=0,nscamt_team,nscamt_ind)  var _nscamt = nscamt_ind var _total = DIVIDE(_nscamt, SUM(FldGoals[NSC_Goal]),0)ReturnIF(ISBLANK(_total),0,_total) ","isHidden":false},{"name":"Prior GDC Total Snflk","expression":"var gdc_ytd_ind = CALCULATE(sum(\u0027NSCGDC_Snowflake\u0027[Gross Dealer Concessions Amount]), \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'PREVIOUS') var _total = gdc_ytd_indReturnif(isblank(_total),0,_total)  ","isHidden":false},{"name":"Prior NSC Total Snflk","expression":"var nsc_ytd_ind = CALCULATE(sum(\u0027NSCGDC_Snowflake\u0027[New Sales Credit Amount]),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'PREVIOUS')--  var nscamt_team = CALCULATE(sum(\u0027NSCGDC w_Rollup\u0027[NSC_AMT]),\u0027NSCGDC w_Rollup\u0027[CMPAGT_EQ_EMPID] = 'N', --                                  \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'PREVIOUS')--  var nscamt_ind = CALCULATE(sum(\u0027NSCGDC w_Rollup\u0027[NSC_AMT]), \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'PREVIOUS')--  var _total = if([TeamNmFiltered]=1 \u0026\u0026 [EmployeeNmFiltered]=0,nscamt_team,nscamt_ind) var _total = nsc_ytd_indReturnif(isblank(_total),0,_total)    --CALCULATE(sum(\u0027NSCGDC w_Rollup\u0027[NSC_AMT]),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'PREVIOUS')","isHidden":false},{"name":"PYTD GDC Snflk","expression":"var gdcamt_ind = CALCULATE(sum(\u0027NSCGDC_Snowflake\u0027[Gross Dealer Concessions Amount]), \u0027NSCGDC_Snowflake\u0027[PYTD GDC Snflk Flag] = 1) var _total= gdcamt_indreturnif(isblank(_total),0,_total) ","isHidden":false},{"name":"PYTD NSC Snflk","expression":"--  var nscamt_team = CALCULATE(sum(\u0027NSCGDC w_Rollup\u0027[NSC_AMT]),\u0027NSCGDC w_Rollup\u0027[CMPAGT_EQ_EMPID] = 'N', --                                  \u0027NSCGDC w_Rollup\u0027[PYTD NSC Flag] = 1)--  var nscamt_ind = CALCULATE(sum(\u0027NSCGDC w_Rollup\u0027[NSC_AMT]),\u0027NSCGDC w_Rollup\u0027[PYTD NSC Flag] = 1)--  var _total= if([TeamNmFiltered]=1 \u0026\u0026 [EmployeeNmFiltered]=0,nscamt_team,nscamt_ind) var nscamt_ind = CALCULATE(sum(\u0027NSCGDC_Snowflake\u0027[New Sales Credit Amount]), \u0027NSCGDC_Snowflake\u0027[PYTD NSC Snflk Flag] =1) var _total= nscamt_indreturnif(isblank(_total),0,_total)   --CALCULATE(sum(\u0027NSCGDC w_Rollup\u0027[NSC_AMT]), \u0027NSCGDC w_Rollup\u0027[PYTD NSC Flag] =1)","isHidden":false},{"name":"YOY GDC Snflk","expression":"var gdc_ytd_ind = CALCULATE(sum(\u0027NSCGDC_Snowflake\u0027[Gross Dealer Concessions Amount]),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'CURRENT')var _ytd_total = gdc_ytd_indvar gdc_pytd_ind = CALCULATE(sum(\u0027NSCGDC_Snowflake\u0027[Gross Dealer Concessions Amount]), \u0027NSCGDC_Snowflake\u0027[PYTD GDC Snflk Flag] =1) var _pytd_total= gdc_pytd_ind RETURN--_pytd_totalIF((_pytd_total) = 0,0, ((_ytd_total - _pytd_total) / _pytd_total))","isHidden":false},{"name":"YOY NSC Snflk","expression":"-- var nsc_ytd_team = CALCULATE(sum(\u0027NSCGDC w_Rollup\u0027[NSC_AMT]), \u0027NSCGDC w_Rollup\u0027[CMPAGT_EQ_EMPID] = 'N',  \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'CURRENT')-- var nsc_ytd_ind = CALCULATE(sum(\u0027NSCGDC w_Rollup\u0027[NSC_AMT]),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'CURRENT')-- var _ytd_total = if([TeamNmFiltered]=1 \u0026\u0026 [EmployeeNmFiltered]=0,nsc_ytd_team,nsc_ytd_ind) --var nsc_pytd_team = CALCULATE(sum(\u0027NSCGDC w_Rollup\u0027[NSC_AMT]),\u0027NSCGDC w_Rollup\u0027[CMPAGT_EQ_EMPID] = 'N', \u0027NSCGDC w_Rollup\u0027[PYTD NSC Flag] = 1)--var nsc_pytd_ind = CALCULATE(sum(\u0027NSCGDC w_Rollup\u0027[NSC_AMT]),\u0027NSCGDC w_Rollup\u0027[PYTD NSC Flag] = 1)--var _pytd_total = if([TeamNmFiltered]=1 \u0026\u0026 [EmployeeNmFiltered]=0,nsc_pytd_team,nsc_pytd_ind) var nsc_ytd_ind = CALCULATE(sum(\u0027NSCGDC_Snowflake\u0027[New Sales Credit Amount]),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'CURRENT')var _ytd_total = nsc_ytd_indvar nsc_pytd_ind = CALCULATE(sum(\u0027NSCGDC_Snowflake\u0027[New Sales Credit Amount]), \u0027NSCGDC_Snowflake\u0027[PYTD NSC Snflk Flag] =1)var _pytd_total= nsc_pytd_ind RETURNIF((_pytd_total) = 0,0, ((_ytd_total - _pytd_total) / _pytd_total))--IF((\u0027NSCGDC w_Rollup\u0027[PYTD NSC]) = 0,0, ((\u0027NSCGDC w_Rollup\u0027[YTD NSC] - \u0027NSCGDC w_Rollup\u0027[PYTD NSC]) / \u0027NSCGDC w_Rollup\u0027[PYTD NSC]))","isHidden":false},{"name":"YTD Conf Credit Snflk","expression":"  --var ConfCredit_team = CALCULATE(sum(\u0027Conference Credits\u0027[Conference Credit Amount]), \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'CURRENT')  --var ConfCredit_ind = CALCULATE(sum(\u0027Conference Credits\u0027[Conference Credit Amount]) + sum(\u0027Conference Credits - Rollup\u0027[Conference Credit Amount]),\u0027DTRB_PERF_DATES  --[DTRB_PERF_RPT_YR_TXT] = 'CURRENT')  var ConfCredit_ind = CALCULATE(sum(\u0027ConferenceCredits\u0027[Conference Credit Amount]),\u0027DTRB_PERF_DATES\u0027) -- var _ConfCreditTotal = if([TeamNmFiltered]=1 \u0026\u0026 [EmployeeNmFiltered]=0,nscamt_team,nscamt_ind)  var _ConfCreditTotal = ConfCredit_ind  return  IF(ISBLANK(_ConfCreditTotal),0,_ConfCreditTotal)  --if([TeamNmFiltered]=1 \u0026\u0026 [EmployeeNmFiltered]=0,ConfCredit_team,ConfCredit_ind)","isHidden":false},{"name":"YTD GDC Snflk","expression":"var gdcamt_ind = CALCULATE(sum(\u0027NSCGDC_Snowflake\u0027[Gross Dealer Concessions Amount]),\u0027NSCGDC_Snowflake\u0027[Distribution Performance Report Year Text]= 'CURRENT')var gdcamt_team = CALCULATE(sum(\u0027NSCGDC_Snowflake\u0027[Gross Dealer Concessions Amount]), \u0027NSCGDC_Snowflake\u0027[CMPAGT_EQ_ROLLUP] \u003c\u003e 'N', \u0027NSCGDC_Snowflake\u0027[Distribution Performance Report Year Text]= 'CURRENT')--var _gdctotal = gdcamt_indvar _gdctotal = if([TeamNmFiltered]=1 \u0026\u0026 [EmployeeNmFiltered]=0,gdcamt_team,gdcamt_ind) returnIF(ISBLANK(_gdctotal),0,_gdctotal)","isHidden":false},{"name":"YTD NSC Snflk","expression":" var nscamt_team = CALCULATE(sum(\u0027NSCGDC_Snowflake\u0027[New Sales Credit Amount]), \u0027NSCGDC_Snowflake\u0027[CMPAGT_EQ_ROLLUP] \u003c\u003e 'N',  \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'CURRENT') var nscamt_ind = CALCULATE(sum(\u0027NSCGDC_Snowflake\u0027[New Sales Credit Amount]),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'CURRENT') var _nsctotal = if([TeamNmFiltered]=1 \u0026\u0026 [EmployeeNmFiltered]=0,nscamt_team,nscamt_ind)  --var _nsctotal = nscamt_ind return IF(ISBLANK(_nsctotal),0,_nsctotal)  --if([TeamNmFiltered]=1 \u0026\u0026 [EmployeeNmFiltered]=0,nscamt_team,nscamt_ind) ","isHidden":false},{"name":"Message_WhatsNew_Text","expression":"var _txt1 = SELECTEDVALUE(BestDay[What\u0027s New Description])returnIF(ISBLANK(_txt1),'',_txt1)","isHidden":false},{"name":"ShowHideWhatsNewTitle","expression":"IF(ISBLANK(SELECTEDVALUE(BestDay[What\u0027s New Description])),' ','What\u0027s New')","isHidden":false},{"name":"ShowHideWhatsNew Background","expression":"IF(ISBLANK(SELECTEDVALUE(BestDay[What\u0027s New Description])),'White','#E9DDC8')","isHidden":false},{"name":"ShowHideWhatsNewBorder","expression":"IF(ISBLANK(SELECTEDVALUE(BestDay[What\u0027s New Description])),'White','#63666A')","isHidden":false},{"name":"ShowHideAlertTitle","expression":"IF(ISBLANK(SELECTEDVALUE(BestDay[Alert Message])),' ','ALERT !')","isHidden":false},{"name":"ShowHideAlertBorder","expression":"IF(ISBLANK(SELECTEDVALUE(BestDay[Alert Message])),'White','#BE1D3D')","isHidden":false},{"name":"ShowHideAlertBackground","expression":"IF(ISBLANK(SELECTEDVALUE(BestDay[Alert Message])),'White','White')","isHidden":false},{"name":"Message_Alert_Text","expression":"var _txt1 = SELECTEDVALUE(BestDay[Alert Message])returnIF(ISBLANK(_txt1),'',_txt1)","isHidden":false}],"source":[{"expression":"Row('Column', BLANK())"}]},{"name":"AUMAUA_Sort","isHidden":false,"storageMode":"Import","columns":[{"name":"Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Order","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('NY47D8IgFEb/imHuYH071kHTRKbqRDoQuVoi0oaHif/ey726cU4+4CglGu+zTR9RiVr0lRIyp6zd7Ji9iSgXJM/2DghLgkMYnxD0o5gVmca8bRwD8pq4Awe3hLhhbCWet/+p9okv78icwEO05a89rwcLzpSe+Y9hGiCQ4cT2NWl6vua6q2wKcF3HwGGXkCMNsav/Ag==', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Product = _t, Order = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Product', type text}, {'Order', Int64.Type}})in    #'Changed Type'"}]},{"name":"Client_HHLD","isHidden":false,"storageMode":"Import","columns":[{"name":"CUST_ID_NBR","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CUST_GRP_ID_NBR","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EMP_ORZN_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MBRTYPE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FUTUREVALUE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CUST_LGAL_FMT_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"STP_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Client Service Model","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CUST_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"FVSortOrder","dataType":"String","isHidden":false,"expression":"RELATED(FVSortOrder[FVOrder])","columnType":"Calculated"},{"name":"Member Sort","dataType":"String","isHidden":false,"expression":"RELATED((\u0027Member Sort\u0027[MBR_ORDER]))","columnType":"Calculated"}],"measures":[{"name":"Client_Total","expression":"CALCULATE(count(Client_HHLD[CUST_ID_NBR]))","isHidden":false},{"name":"Client_HHLD","expression":"CALCULATE(DISTINCTCOUNT(Client_HHLD[CUST_GRP_ID_NBR]), \u0027Client_HHLD\u0027[CUST_GRP_ID_NBR] \u003e 0)","isHidden":false},{"name":"ClientIndvShowMeasure","expression":"IF([Client_Total] \u003e 0, [Client_Total], '0')","isHidden":false},{"name":"ClientHHLDShowMeasure","expression":"IF([Client_HHLD] \u003e 0, [Client_HHLD], '0')","isHidden":false},{"name":"FVShowMeasure","expression":"IF(distinctcount(Client_HHLD[CUST_GRP_ID_NBR])\u003e 0, distinctcount(Client_HHLD[CUST_GRP_ID_NBR]), '0')","isHidden":false},{"name":"ShowHideFV","expression":"IF(DISTINCTCOUNT(\u0027Client_HHLD\u0027[CUST_GRP_ID_NBR]) \u003e 0, '#1C00ff00','White')","isHidden":false},{"name":"Message_txt","expression":"IF(DISTINCTCOUNT(\u0027Client_HHLD\u0027[CUST_GRP_ID_NBR])\u003e0,'','Future ValueNo Clients Assigned')","isHidden":false}],"source":[{"expression":"let    Source = DB2.Database('PODWH021:50000', 'PODWH021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT D.CUST_SK,#(lf)       A.CUST_ID_NBR,#(lf)       D.CUST_LGAL_FMT_NM,#(lf)       D.CUST_GRP_ID_NBR,#(lf)       E.STP_STS_CDE,#(lf)       case when E.fut_vlu_indx_cde = \u0027GOLD\u0027 then \u0027Gold\u0027#(lf)            when E.fut_vlu_indx_cde = \u0027SILVR\u0027 then \u0027Silver\u0027#(lf)            when E.fut_vlu_indx_cde = \u0027BRNZE\u0027 then \u0027Bronze\u0027#(lf)            when E.fut_vlu_indx_cde in (\u0027NA\u0027,\u0027UNK\u0027,\u0027 \u0027 ) then \u0027Unknown\u0027#(lf)       end as FutureValue,#(lf)       case when a.mbr_typ_cde = \u0027BEN\u0027 then \u0027Benefit\u0027#(lf)#(tab)    when a.mbr_typ_cde = \u0027ASSOC\u0027 then \u0027Associate\u0027#(lf)#(tab)    when a.mbr_typ_cde = \u0027JUV\u0027 then \u0027Juvenile\u0027#(lf)#(tab)    when a.mbr_typ_cde = \u0027NON\u0027 and D.clas_cust_rpt_cde = \u0027NAOWN\u0027 then \u0027Non-Member\u0027#(lf)#(tab)    when a.mbr_typ_cde = \u0027NON\u0027 and D.clas_cust_rpt_cde \u003c\u003e \u0027NAOWN\u0027 then \u0027Prospect\u0027#(lf)       end as MBRTYPE,#(lf)       B.EMP_ORZN_ID#(lf)  FROM MEMBER.CUST_MBR_INFO_CURR_CFDL A inner join#(lf)       MEMBER.ITGR_IDVL_ALL_CURR_CFDL D#(lf)    on a.acrt_cust_sk=D.cust_sk left join#(lf)       MEMBER.CNF_CUST_RESID_MAIL_GRP_DIM_CFDL E#(lf)    ON D.CUST_GRP_SK=E.CUST_GRP_SK inner join #(lf)       CLNT_ASMT_DM.CUST_REPR_COMP_RLTN_CURR_CFDL B#(lf)      -- CLNT_ASMT_DM.CUST_REPR_ASGN_CURR_CFDL B#(lf)    ON A.ACRT_CUST_SK = B.ACRT_CUST_SK AND#(lf)       A.MBR_TYP_CDE IN (\u0027BEN\u0027,\u0027NON\u0027,\u0027ASSOC\u0027,\u0027JUV\u0027) AND#(lf)       B.EMP_ORZN_ID LIKE \u0027TS%\u0027 inner join#(lf)       MEMBER.CNF_CUSTOMER_DIM_CFDL C#(lf)    ON B.CUST_ID_NBR = C.CUST_ID_NBR and#(lf)       C.CUST_IDVL_DECD_IND = \u0027N\u0027#(lf) where (a.mbr_typ_cde in (\u0027BEN\u0027,\u0027ASSOC\u0027,\u0027JUV\u0027) or#(lf)        a.mbr_typ_cde = \u0027NON\u0027 and D.clas_cust_rpt_cde = \u0027NAOWN\u0027) ']),    #'Replaced Value' = Table.ReplaceValue(Source,'','Unknown',Replacer.ReplaceValue,{'FUTUREVALUE'}),    #'Filtered Rows' = Table.SelectRows(#'Replaced Value', each true),    #'Replaced Value1' = Table.ReplaceValue(#'Filtered Rows',null,'Unknown',Replacer.ReplaceValue,{'FUTUREVALUE'}),    #'Filtered Rows1' = Table.SelectRows(#'Replaced Value1', each true),    #'Added Custom' = Table.AddColumn(#'Filtered Rows1', 'Client Service Model', each if [FUTUREVALUE] = 'Gold' and [STP_STS_CDE] = 'YES' then 'A'else if [FUTUREVALUE] = 'Silver' and [STP_STS_CDE] = 'YES' then 'B'else if [FUTUREVALUE] = 'Gold' and [STP_STS_CDE] \u003c\u003e 'YES' then 'B'else if [FUTUREVALUE] = 'Bronze' and [STP_STS_CDE] = 'YES' then 'C'else if [FUTUREVALUE] = 'Silver' and [STP_STS_CDE] \u003c\u003e 'YES' then 'C'else if [FUTUREVALUE] = 'Bronze' and [STP_STS_CDE] \u003c\u003e 'YES' then 'D'else ' ')in    #'Added Custom'"}]},{"name":"CONFQUAL","isHidden":false,"storageMode":"Import","columns":[{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CC","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"NM","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"RANK","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"QM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CQ","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"XDAY","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Conf_Qualifer","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Projected Conference Name","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Total Conference Credits","expression":" var _cc=  calculate(sum(\u0027CONFQUAL\u0027[CC])) Return IF(ISBLANK(_cc),0,_cc)","isHidden":false},{"name":"Total New Money","expression":" var _nm=  calculate(sum(\u0027CONFQUAL\u0027[NM])) Return IF(ISBLANK(_nm),0,_nm)","isHidden":false},{"name":"Conference Qualifier","expression":"  var _confQ = SELECTEDVALUE(\u0027CONFQUAL\u0027[Conf_Qualifer])Return IF(ISBLANK(_confQ),'NA',_confQ)","isHidden":false},{"name":"Projected Conference","expression":"  var _ProjConf = SELECTEDVALUE(\u0027CONFQUAL\u0027[Projected Conference Name])Return IF(ISBLANK(_ProjConf),'NA',_ProjConf)","isHidden":false},{"name":"Projected Extra Day","expression":"  var _xday = SELECTEDVALUE(\u0027CONFQUAL\u0027[XDAY])Return IF(ISBLANK(_xday),'NA',_xday)","isHidden":false}],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////VSPUBLIC//CORPSHAR//Project//FRRecognition//recognition.reports//CONFERENCE//CONFQUAL.CSV'),[Delimiter=',', Columns=7, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'TSID', type text}, {'CC', Int64.Type}, {'NM', Int64.Type}, {'RANK', Int64.Type}, {'QM', type text}, {'CQ', Int64.Type}, {'XDAY', type text}}),    #'Added Conditional Column' = Table.AddColumn(#'Changed Type', 'Projected Conference Name', each if [CQ] = 33 then 'Pinnacle A' else if [CQ] = 32 then 'Pinnacle B' else if [CQ] = 31 then 'Pinnacle C' else if [CQ] = 29 then 'Summit A' else if [CQ] = 28 then 'Summit B' else if [CQ] = 27 then 'Summit C' else if [CQ] = 22 then 'Sierra A' else if [CQ] = 20 then 'Sierra B' else if [CQ] = 40 then 'None' else if [CQ] = 41 then 'None' else null),    #'Added Custom' = Table.AddColumn(#'Added Conditional Column', 'Conf_Qualifer', each [QM] \u0026 ' Conf Cr'),    #'Replaced Value' = Table.ReplaceValue(#'Added Custom','N','No',Replacer.ReplaceText,{'XDAY'}),    #'Replaced Value1' = Table.ReplaceValue(#'Replaced Value','Y','Yes',Replacer.ReplaceText,{'XDAY'})in    #'Replaced Value1'"}]},{"name":"FVSortOrder","isHidden":false,"storageMode":"Import","columns":[{"name":"FV","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FVOrder","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i45WUtJRMlWK1YlWCs3LzssvzwPyTcB8p6L8vKpUINcYzA3OzClLLQJyjcBc9/ycFCDHUCk2FgA=', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [FV = _t, FVOrder = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'FV', type text}, {'FVOrder', Int64.Type}})in    #'Changed Type'"}]},{"name":"Member Sort","isHidden":false,"storageMode":"Import","columns":[{"name":"MBR Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MBR_ORDER","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i45W8iotS83LzElV0lEyUYrViVbyy8/T9U3NTUotAgoZg4Uci4vzkzMTS0CKjMAiTql5qWmZJUC+oVJsLAA=', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [#'MBR Type' = _t, MBR_ORDER = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'MBR Type', type text}, {'MBR_ORDER', Int64.Type}})in    #'Changed Type'"}]},{"name":"Licenses \u0026 Credentials","isHidden":false,"storageMode":"Import","columns":[{"name":"Employee Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Credentials","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Licenses1","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Licenses","dataType":"String","isHidden":false,"expression":"trim(\u0027Licenses \u0026 Credentials\u0027[Licenses1])","columnType":"Calculated"},{"name":"Financial Advisor Indicator","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Associate Financial Advisor Indicator","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com', 'ENTERPRISE_EDW_PRESENTATION_WH', null),    ENTERPRISE_EDW_Database = Source{[Name='ENTERPRISE_EDW',Kind='Database']}[Data],    PRESENTATION_01_Schema = ENTERPRISE_EDW_Database{[Name='PRESENTATION_01',Kind='Schema']}[Data],    #'Workforce Dimension Detail_View' = PRESENTATION_01_Schema{[Name='Workforce Dimension Detail',Kind='View']}[Data],    #'Filtered Rows' = Table.SelectRows(#'Workforce Dimension Detail_View', each ([Current Row Indicator] = 'Y')),    #'Added Custom' = Table.AddColumn(#'Filtered Rows', 'SelInd', each if [Job Type Code]= '002003' then 1 else if [Job Type Code] = '002010' then 1 else if [Job Type Code] = '002011' then 1 else if [Job Type Code] = '002012' then 1 else if [Job Type Code] = '002016' then 1 else if [Job Type Code] = '002017' then 1 else if [Job Type Code] = '002000' then 1 else if [Job Type Code] = '002022' then 1 else if [Job Type Code] = '002024' then 1 else if [Job Type Code] = '002025' then 1 else if [Job Type Code] = '002026' then 1 else if [Job Type Code] = '002027' then 1 else if [Job Type Code] = '002030' then 1 else if [Job Type Code] = '002031' then 1 else if [Job Type Code] = '002032' then 1 else if [Job Type Code] = '003100' then 1 else if [Job Type Code] = '003500' then 1 else if [Job Type Code] = '003602' then 1 else if [Job Type Code] = '003604' then 1 else if [Job Type Code] = '003605' then 1 else if [Job Type Code] = '003606' then 1 else if [Job Type Code] = '003607' then 1 else if [Job Type Code] = '003608' then 1 else if [Organization Department Code] = '5405' then 1 else if [Organization Department Code] = '5407' then 1 else if [Organization Department Code] = '5408' then 1 else if [Organization Department Code] = '5409' then 1 else if [Organization Department Code] = '6100' then 1 else if [Organization Department Code] = '1701' then 1 else if [Organization Department Code] = '1702' then 1 else if [Organization Department Code] = '1703' then 1   else '0'),    #'Filtered Rows2' = Table.SelectRows(#'Added Custom', each ([Employee Status Type Code] = 'A' or [Employee Status Type Code] = 'I' or [Employee Status Type Code] = 'L') and ([SelInd] = 1)),    #'Removed Columns' = Table.RemoveColumns(#'Filtered Rows2',{'Employee Dimension Effective Begin Timestamp', 'Current Row Indicator', 'Employee Dimension Effective End Timestamp', 'Employee Organization Type Code', 'Gender Code', 'Gender Description', 'Original Hire Date', 'Hire Date', 'Rehire Date', 'Birth Date', 'Marital Status Code', 'Employee Service Date', 'Field Continuous Full Time Service Date', 'Financial Associate Continuous Full Time Service Date', 'Field Total Full Time Service Date', 'Prefix Name', 'Payroll Company Code', 'Payroll Group Code', 'Employee Category Code', 'Address Type Code', 'Preferred Address State Code', 'Preferred Address Country Code', 'Preferred Address Zip 5 Code', 'Preferred Address Zip 4 Code', 'Organization Division Code', 'Product Support Consultant Investment Group Indicator', 'Product Support Consultant Risk Group Indicator', 'Financial Consultant Indicator', 'Senior Financial Consultant Indicator', 'Department Lead Management Indicator', 'Job Title Subtype Code', 'Standard Hours Value', 'Agent Identifier Number', 'Agent Code', 'Wealth Advisor Indicator', 'Broker Dealer Agent Indicator', 'Investment Advisor Representative Indicator', 'General Securities Registration Indicator', 'Financial Representative Deposit Broker Code', 'Employee First Professional Designation Code', 'Employee Second Professional Designation Code', 'Suffix Name', 'Marital Status Description', 'Party Display Two Name', 'Payroll Group Description', 'Employee Category Description', 'Address Type Description', 'Preferred Address Line 1', 'Preferred Address Line 2', 'Preferred Address Line 3', 'Preferred Address City Name', 'Preferred Address State Description', 'Preferred Address County Name', 'Business Telephone Number', 'Home Telephone Number', 'Cellular Telephone Number', 'Fax Telephone Number', 'Toll Free Telephone Number', 'Workforce Dimension Detail Surrogate Key', 'Workforce Dimension Version Number', 'Financial Representative Segment Code', 'Conference Year', 'Conference Level Number', 'Series One License Status Code', 'Series Four License Status Code', 'Series Nine License Status Code', 'Series Ten License Status Code', 'Series Eighty-six License Status Code', 'Series Eighty-seven License Status Code', 'Organization Department Code', 'Termination Date', 'Adjusted Service Date', 'Job Type Code', 'Employee Status Type Code'}),    #'Replaced Value' = Table.ReplaceValue(#'Removed Columns','N','',Replacer.ReplaceText,{'Chartered Financial Consultant Designation Code', 'Chartered Leadership Fellow Designation Code', 'Chartered Life Underwriter Designation Code', 'Chartered Financial Analyst Designation Code', 'Certified Financial Planner Designation Code', 'Fraternal Insurance Counselor Designation Code', 'Fraternal Insurance Counselor Fellow Designation Code', 'Life Underwriter Training Counsel Fellow Designation Code',  'Series Six License Status Code', 'Series Seven License Status Code', 'Series Twenty-two License Status Code', 'Series Twenty-four License Status Code', 'Series Twenty-six License Status Code', 'Series Twenty-seven License Status Code', 'Series Fifty-one License Status Code', 'Series Fifty-three License Status Code', 'Series Sixty-two License Status Code', 'Series Sixty-three License Status Code', 'Series Sixty-five License Status Code', 'Series Sixty-six License Status Code'}),    #'Replaced Value1' = Table.ReplaceValue(#'Replaced Value','Y','CHFC',Replacer.ReplaceText,{'Chartered Financial Consultant Designation Code'}),    #'Replaced Value2' = Table.ReplaceValue(#'Replaced Value1','Y','CLF',Replacer.ReplaceText,{'Chartered Leadership Fellow Designation Code'}),    #'Replaced Value3' = Table.ReplaceValue(#'Replaced Value2','Y','CLU',Replacer.ReplaceText,{'Chartered Life Underwriter Designation Code'}),    #'Replaced Value4' = Table.ReplaceValue(#'Replaced Value3','Y','CFA',Replacer.ReplaceText,{'Chartered Financial Analyst Designation Code'}),    #'Replaced Value5' = Table.ReplaceValue(#'Replaced Value4','Y','FIC',Replacer.ReplaceText,{'Certified Financial Planner Designation Code'}),    #'Replaced Value6' = Table.ReplaceValue(#'Replaced Value5','Y','FICF',Replacer.ReplaceText,{'Fraternal Insurance Counselor Designation Code'}),    #'Replaced Value7' = Table.ReplaceValue(#'Replaced Value6','Y','CFP',Replacer.ReplaceText,{'Fraternal Insurance Counselor Fellow Designation Code'}),    #'Replaced Value8' = Table.ReplaceValue(#'Replaced Value7','Y','LUTCF',Replacer.ReplaceText,{'Life Underwriter Training Counsel Fellow Designation Code'}),    #'Replaced Value9' = Table.ReplaceValue(#'Replaced Value8','Y','6',Replacer.ReplaceText,{'Series Six License Status Code'}),    #'Replaced Value10' = Table.ReplaceValue(#'Replaced Value9','Y','7',Replacer.ReplaceText,{'Series Seven License Status Code'}),    #'Replaced Value11' = Table.ReplaceValue(#'Replaced Value10','Y','22',Replacer.ReplaceText,{'Series Twenty-two License Status Code'}),    #'Replaced Value12' = Table.ReplaceValue(#'Replaced Value11','Y','24',Replacer.ReplaceText,{'Series Twenty-four License Status Code'}),    #'Replaced Value13' = Table.ReplaceValue(#'Replaced Value12','Y','26',Replacer.ReplaceText,{'Series Twenty-six License Status Code'}),    #'Replaced Value14' = Table.ReplaceValue(#'Replaced Value13','Y','27',Replacer.ReplaceText,{'Series Twenty-seven License Status Code'}),    #'Replaced Value15' = Table.ReplaceValue(#'Replaced Value14','Y','51',Replacer.ReplaceText,{'Series Fifty-one License Status Code'}),    #'Replaced Value16' = Table.ReplaceValue(#'Replaced Value15','Y','53',Replacer.ReplaceText,{'Series Fifty-three License Status Code'}),    #'Replaced Value17' = Table.ReplaceValue(#'Replaced Value16','Y','62',Replacer.ReplaceText,{'Series Sixty-two License Status Code'}),    #'Replaced Value18' = Table.ReplaceValue(#'Replaced Value17','Y','63',Replacer.ReplaceText,{'Series Sixty-three License Status Code'}),    #'Replaced Value19' = Table.ReplaceValue(#'Replaced Value18','Y','65',Replacer.ReplaceText,{'Series Sixty-five License Status Code'}),    #'Replaced Value20' = Table.ReplaceValue(#'Replaced Value19','Y','66',Replacer.ReplaceText,{'Series Sixty-six License Status Code'}),    #'Replaced Value21' = Table.ReplaceValue(#'Replaced Value20','UKW','',Replacer.ReplaceText,{'Chartered Financial Consultant Designation Code', 'Chartered Leadership Fellow Designation Code', 'Chartered Life Underwriter Designation Code', 'Chartered Financial Analyst Designation Code', 'Certified Financial Planner Designation Code', 'Fraternal Insurance Counselor Designation Code', 'Fraternal Insurance Counselor Fellow Designation Code', 'Life Underwriter Training Counsel Fellow Designation Code', 'Series Six License Status Code', 'Series Seven License Status Code', 'Series Twenty-two License Status Code', 'Series Twenty-four License Status Code', 'Series Twenty-six License Status Code', 'Series Twenty-seven License Status Code', 'Series Fifty-one License Status Code', 'Series Fifty-three License Status Code', 'Series Sixty-two License Status Code', 'Series Sixty-three License Status Code', 'Series Sixty-five License Status Code', 'Series Sixty-six License Status Code'}),    #'Added Custom1' = Table.AddColumn(#'Replaced Value21', 'Licenses1', each ([Series Six License Status Code] \u0026 ' ' \u0026 [Series Seven License Status Code] \u0026 ' ' \u0026[#'Series Twenty-two License Status Code'] \u0026 ' ' \u0026[#'Series Twenty-four License Status Code'] \u0026 ' ' \u0026[#'Series Twenty-six License Status Code'] \u0026 ' ' \u0026 [#'Series Sixty-two License Status Code'] \u0026 ' ' \u0026 [#'Series Sixty-three License Status Code'] \u0026 ' ' \u0026 [#'Series Sixty-five License Status Code'] \u0026 ' ' \u0026 [#'Series Sixty-six License Status Code'])),    #'Added Custom2' = Table.AddColumn(#'Added Custom1', 'Credentials', each [Chartered Financial Consultant Designation Code]  \u0026 ' ' \u0026[Chartered Leadership Fellow Designation Code] \u0026 ' ' \u0026[Chartered Life Underwriter Designation Code] \u0026 ' ' \u0026[Chartered Financial Analyst Designation Code] \u0026 ' ' \u0026[Certified Financial Planner Designation Code] \u0026 ' ' \u0026[Fraternal Insurance Counselor Designation Code] \u0026 ' ' \u0026[Fraternal Insurance Counselor Fellow Designation Code] \u0026 ' ' \u0026[Life Underwriter Training Counsel Fellow Designation Code]),    #'Trimmed Text' = Table.TransformColumns(#'Added Custom2',{{'Licenses1', Text.Trim, type text}, {'Credentials', Text.Trim, type text}}),    #'Removed Columns1' = Table.RemoveColumns(#'Trimmed Text',{'Chartered Financial Consultant Designation Code', 'Chartered Leadership Fellow Designation Code', 'Chartered Life Underwriter Designation Code', 'Chartered Financial Analyst Designation Code', 'Certified Financial Planner Designation Code', 'Fraternal Insurance Counselor Designation Code', 'Fraternal Insurance Counselor Fellow Designation Code', 'Life Underwriter Training Counsel Fellow Designation Code', 'Series Six License Status Code', 'Series Seven License Status Code', 'Series Twenty-two License Status Code', 'Series Twenty-four License Status Code', 'Series Twenty-six License Status Code', 'Series Twenty-seven License Status Code', 'Series Fifty-one License Status Code', 'Series Fifty-three License Status Code', 'Series Sixty-two License Status Code', 'Series Sixty-three License Status Code', 'Series Sixty-five License Status Code', 'Series Sixty-six License Status Code', 'Organization Department Description', 'Job Type Description', 'Job Title Subtype Description', 'First Name', 'Middle Name', 'Last Name', 'Nick Name', 'Employee Status Type Description', 'Organization Division Description', 'Employee Electronic Mail Address Text', 'Conference Description', 'SelInd'})in    #'Removed Columns1'"}]},{"name":"Allego_perTSid","isHidden":false,"storageMode":"Import","columns":[{"name":"wave","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"tsid","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"fld_jobcde_ind","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"asOfDt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"tot_course_cnt","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"pct_complete","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"trained_sts","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Training Completed","expression":"  var _trainingStatus = SELECTEDVALUE(Allego_perTSid[trained_sts])   -- var percent_Complete = sum(Allego_perTSid[pct_course_complete])return  if(isblank(_trainingStatus),'Not Started',_trainingStatus)","isHidden":false}],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////VSSHR//SHARED//Public//DI and BI//Field Reporting//Allego//ForDB//Allego_perTSid_R3.csv'),[Delimiter=',', Columns=19, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Removed Columns' = Table.RemoveColumns(#'Promoted Headers',{'', '_1', '_2', '_3', '_4', '_5', '_6', '_7', '_8', '_9', '_10'}),    #'Replaced Value' = Table.ReplaceValue(#'Removed Columns','InProgr','In Progress',Replacer.ReplaceText,{'trained_sts'}),    #'Replaced Value1' = Table.ReplaceValue(#'Replaced Value','NotStart','Not Started',Replacer.ReplaceText,{'trained_sts'}),    #'Changed Type' = Table.TransformColumnTypes(#'Replaced Value1',{{'asOfDt', type date}})in    #'Changed Type'"}]},{"name":"ConferenceCredits","isHidden":false,"storageMode":"Import","columns":[{"name":"Compensation Payee Agent Surrogate Key","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Compensation Agent Version Number","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Sponsoring Compensation Recipient Surrogate Key","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Sponsoring Agent Version Number","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Contract Surrogate Key","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Process Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Proprietary Product Indicator","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Customer Identification Number","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Conference Credit Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Agent Split Percent","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Metric Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Benefit Contract Number","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Benefit Contract Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Compensation Reporting Roll Up Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Sponsoring Compensation Recipient Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Comp Employee Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Date Surrogate Key","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Calendar Day Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Year Number","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Year Week Number","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Report Year Text","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ROLLUP_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Compensated Job Title Code","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Message_txtCC","expression":"IF(DISTINCTCOUNT(\u0027Client_HHLD\u0027[CUST_GRP_ID_NBR])\u003e0,'',' ')","isHidden":false},{"name":"ShowHideCC","expression":"IF(SUM(\u0027ConferenceCredits\u0027[Conference Credit Amount]) \u003e 0, '#1C00ff00','White')","isHidden":false},{"name":"Message_txtCC_Rptdt","expression":"--today()IF(today() \u003e= 2/21/2022,'**These Conference Credit Report totals has been paused until mid-February from being refreshed','')","isHidden":false},{"name":"ShowHideCC_Rptdt","expression":"IF(today() \u003e= 02/21/2022, '#1C00ff00','White')","isHidden":false}],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'select a.''Compensation Payee Agent Surrogate Key'',#(lf)       a.''Compensation Agent Version Number'',#(lf)       a.''Sponsoring Compensation Recipient Surrogate Key'',#(lf)       a.''Sponsoring Agent Version Number'',#(lf)       a.''Contract Surrogate Key'',#(lf)       a.''Process Date'',#(lf)       a.''Proprietary Product Indicator'',#(lf)       a.''Customer Identification Number'',#(lf)       a.''Conference Credit Amount'',#(lf)       a.''Agent Split Percent'',#(lf)       a.''Metric Type Code'',#(lf)       a.''Benefit Contract Number'',#(lf)       a.''Benefit Contract Type Code'',#(lf)       a.''Compensation Reporting Roll Up Name'',#(lf)       a.''Sponsoring Compensation Recipient Identifier'',#(lf)       b.''Employee Identifier'' as ''Comp Employee Identifier'',#(lf)       b.''Employee Identifier'',#(lf)      -- b.''Employee Name'',#(lf)      -- b.''Workforce Dimension Detail Surrogate Key'',#(lf)       c.''Date Surrogate Key'',#(lf)       c.''Calendar Day Date'',#(lf)       c.''Distribution Performance Reporting Year Number'',#(lf)       c.''Distribution Performance Reporting Year Week Number'',#(lf)       c.''Distribution Performance Report Year Text'',#(lf)       \u0027N\u0027 as Rollup_Ind,#(lf)       a.''Compensated Job Title Code''              #(lf)       #(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sales Metrics Transactions'' as a left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' as b#(lf)    on a.''Compensation Payee Agent Surrogate Key''=b.''Workforce Dimension Detail Surrogate Key''  inner join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Distribution Performance Dates Dimension'' as c#(lf)    on a.''Process Date''= c.''Calendar Day Date''   #(lf)  #(lf) where b.''Current Row Indicator'' = \u0027Y\u0027#(lf)   and a.''Conference Credit Amount'' IS NOT NULL#(lf)  -- and a.''Conference Credit Amount'' \u003e 0#(lf)   and c.''Distribution Performance Report Year Text'' = \u0027CURRENT\u0027#(lf)   and substring(b.''Employee Identifier'',1,2)=\u0027TS\u0027#(lf)#(lf)Union#(lf)select a.''Compensation Payee Agent Surrogate Key'',#(lf)       a.''Compensation Agent Version Number'',#(lf)       a.''Sponsoring Compensation Recipient Surrogate Key'',#(lf)       a.''Sponsoring Agent Version Number'',#(lf)       a.''Contract Surrogate Key'',#(lf)       a.''Process Date'',#(lf)       a.''Proprietary Product Indicator'',#(lf)       a.''Customer Identification Number'',#(lf)       a.''Conference Credit Amount'',#(lf)       a.''Agent Split Percent'',#(lf)       a.''Metric Type Code'',#(lf)       a.''Benefit Contract Number'',#(lf)       a.''Benefit Contract Type Code'',#(lf)       a.''Compensation Reporting Roll Up Name'',#(lf)       a.''Sponsoring Compensation Recipient Identifier'',#(lf)       b.''Employee Identifier'' as ''Comp Employee Identifier'',#(lf)       a.''Sponsoring Compensation Recipient Identifier'' as EMP_ID,#(lf)      -- b.''Employee Name'',#(lf)      -- b.''Workforce Dimension Detail Surrogate Key'',#(lf)       c.''Date Surrogate Key'',#(lf)       c.''Calendar Day Date'',#(lf)       c.''Distribution Performance Reporting Year Number'',#(lf)       c.''Distribution Performance Reporting Year Week Number'',#(lf)       c.''Distribution Performance Report Year Text'',#(lf)       \u0027Y\u0027 as Rollup_Ind,#(lf)       a.''Compensated Job Title Code''#(lf)       #(lf)       #(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sales Metrics Transactions'' as a left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' as b#(lf)    on a.''Compensation Payee Agent Surrogate Key''=b.''Workforce Dimension Detail Surrogate Key''  inner join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Distribution Performance Dates Dimension'' as c#(lf)    on a.''Process Date''= c.''Calendar Day Date''   #(lf)  #(lf) where b.''Current Row Indicator'' = \u0027Y\u0027#(lf)   and a.''Conference Credit Amount'' IS NOT NULL#(lf)   --and a.''Conference Credit Amount'' \u003e 0#(lf)   and c.''Distribution Performance Report Year Text'' = \u0027CURRENT\u0027#(lf)   and substring(b.''Employee Identifier'',1,2)=\u0027TS\u0027#(lf)   and b.''Employee Identifier'' \u003c\u003e a.''Sponsoring Compensation Recipient Identifier''', null, [EnableFolding=true])in    Source"}]},{"name":"Producer_Snowflake","isHidden":false,"storageMode":"Import","columns":[{"name":"SALE_HIER_DIM_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EMP_DIM_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SALE_HIER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ZONE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RPT_TO_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Adjusted Service Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TENURE","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TENURE_GROUP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SFC_FC","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FR_SEGMENT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"GNDR_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LST_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FRST_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MDDL_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ASSIGNED_AFA","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"OP_COUNT","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Credentials","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"License","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Report to Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Leader/COE/NPG","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Advisor Group","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MARKET","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MARKET_LEADERS","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP Leader","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Conference Qualification Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team Purpose Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Conference Qualification","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team Purpose Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market with Leader","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP with Leader","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TeamAdvisor_HlthRpt","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FILTER_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Name w/ TSID","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"DisplayFilteredProducer","expression":"  IF([EmployeeNmFiltered]=1,VALUES(Producer_Snowflake[EMP_NM]),   IF([EmployeeNMFiltered]=0 \u0026\u0026 [EmployeeIdFiltered] = 1, VALUES(Producer_Snowflake[EMP_NM]), ' '))","isHidden":false},{"name":"EmployeeIdFiltered","expression":"IF(ISFILTERED(Producer_Snowflake[EMP_ID]),1,0)","isHidden":false},{"name":"EmployeeNmFiltered","expression":"IF(ISFILTERED(Producer_Snowflake[EMP_NM]),1,0)","isHidden":false},{"name":"TeamNmFiltered","expression":"IF(ISFILTERED(Producer_Snowflake[Team Name]),1,0)","isHidden":false},{"name":"DisplayFilteredTenureGrp","expression":"IF([EmployeeNmFiltered]=1,VALUES(Producer_Snowflake[TENURE_GROUP]),'')","isHidden":false},{"name":"DisplayFilteredTeam","expression":" var teamnm = IF([TeamNmFiltered]=1,VALUES(Teams[TEAM_NM]),' ') return IF(ISBLANK(teamnm),' ', teamnm)","isHidden":false}],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'select distinct b.''Sales Hierarchy Dimension Surrogate Key'' as SALE_HIER_DIM_SK,#(lf)       a.''Workforce Dimension Detail Surrogate Key'' as EMP_DIM_SK,#(lf)       a.''Employee Identifier'' as EMP_ID,#(lf)       b.''Sales Hierarchy Identifier'' as SALE_HIER_ID,#(lf)       --a.''Employee Name'' as EMP_NM,#(lf)       case when a.''Employee Name'' = \u0027Johnson,Christopher\u0027 then a.''Last Name''||\u0027,\u0027||a.''Nick Name''#(lf)            when a.''Employee Name'' = \u0027Parker,David\u0027 and a.''Employee Identifier'' = \u0027TS83655\u0027 then a.''Last Name''||\u0027,\u0027||a.''First Name''||\u0027 C.\u0027#(lf)            when a.''Employee Identifier'' = \u0027TS54638\u0027 then a.''Last Name''||\u0027,\u0027||a.''Nick Name''#(lf)            when a.''Employee Identifier'' = \u0027TS11184\u0027 then a.''Last Name''||\u0027,\u0027||a.''Nick Name''#(lf)            when a.''Employee Identifier'' = \u0027TS80048\u0027 then a.''Last Name''||\u0027,\u0027||a.''Nick Name''#(lf)         else a.''Employee Name''#(lf)       end as EMP_NM,       #(lf)          #(lf)       aa.''Job Type Code'' as JOB_TYP_CDE,#(lf)       aa.''Job Type Description'' as JOB_TYP_DSCR,#(lf)       case when a.''Organization Department Code'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027) then \u00270383\u0027#(lf)         else a.''Organization Department Code''#(lf)       end as TAG,#(lf)       case when aa.''Department Identifier'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027) then \u0027Virtual Advice\u0027#(lf)         else aa.''Department Name''#(lf)       end as ''TAG Name'',#(lf)       case when aa.''Department Identifier'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027) then \u00270383-Virtual Advice\u0027#(lf)         else a.''Organization Department Code''||\u0027-\u0027||aa.''Department Name''#(lf)       end as ''Advisor Group'',#(lf)       (substr(b.''Organization Zone Code'',6,2))   AS ZONE,#(lf)       b.''Organization Zone Code'' as Market,#(lf)       case when substr(b.''Organization Zone Code'',9,1) =\u00279\u0027 then \u0027NPG - markets 98 \u0026 99\u0027#(lf)            when substr(b.''Organization Zone Code'',9,2) = \u002769\u0027 then \u0027GPA - market 69\u0027#(lf)            when Substr(b.''Organization Zone Code'',9,2) = \u002779\u0027 then \u0027GPD - market 79\u0027#(lf)            when substr(b.''Organization Zone Code'',9,2) = \u002789\u0027 then \u0027PPC - market 89\u0027#(lf)       end as Filter_Ind,  #(lf)       zz4.market_leaders,#(lf)       c.''Sub Department Identifier'' as MVP_ID,#(lf)       zz3.''MVP Leader'', #(lf)       c.''Report to ID'' as RPT_TO_ID,#(lf)       cc.''First Name''||\u0027 \u0027||cc.''Last Name'' as ''Report to Name'',#(lf)       a.''Adjusted Service Date'',#(lf)       c.''Financial Professional Tenure'' as Tenure,#(lf)       c.''Financial Professional Tenure Group'' as Tenure_Group,#(lf)       case when a.''Senior Financial Consultant Indicator'' = \u0027Y\u0027 then \u0027SFC\u0027#(lf)                        when a.''Financial Consultant Indicator'' = \u0027Y\u0027 then \u0027FC\u0027#(lf)                        when a.''Wealth Advisor Indicator'' = \u0027Y\u0027 then \u0027WA\u0027#(lf)                   end as SFC_FC,#(lf)       (case when a.''Senior Financial Consultant Indicator'' = \u0027Y\u0027 then \u0027SFC\u0027#(lf)            when a.''Financial Consultant Indicator'' = \u0027Y\u0027 then \u0027FC\u0027#(lf)             when a.''Wealth Advisor Indicator'' = \u0027Y\u0027 then \u0027WA\u0027#(lf)             when a.''Job Type Code'' in (\u0027002003\u0027,\u0027002018\u0027,\u0027002019\u0027) then A.''Job Type Description''#(lf)             when a.''Job Type Code'' = \u0027002016\u0027 then a.''Job Type Description''#(lf)             when ((a.''Senior Financial Consultant Indicator'' = \u0027N\u0027 or a.''Financial Consultant Indicator'' = \u0027N\u0027) and #(lf)                    c.''Financial Professional Tenure'' \u003e= 4 and #(lf)                    a.''Job Type Code'' in (\u0027002000\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027003602\u0027,\u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027))#(lf)                      then \u0027VETFR\u0027#(lf)             when c.''Financial Professional Tenure'' \u003e= 3 and c.''Financial Professional Tenure'' \u003c 4  and   #(lf)                  a.''Job Type Code'' in (\u0027002000\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027003602\u0027,\u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027)#(lf)                      then \u0027NFR4\u0027#(lf)             when c.''Financial Professional Tenure'' \u003e= 2 and c.''Financial Professional Tenure'' \u003c 3  and   #(lf)                  a.''Job Type Code'' in (\u0027002000\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027003602\u0027,\u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027)#(lf)                      then \u0027NFR3\u0027#(lf)             when c.''Financial Professional Tenure'' \u003e= 1 and c.''Financial Professional Tenure'' \u003c 2  and   #(lf)                  a.''Job Type Code'' in (\u0027002000\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027003602\u0027,\u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027)#(lf)                      then \u0027NFR2\u0027 #(lf)             when c.''Financial Professional Tenure'' \u003e= 0 and c.''Financial Professional Tenure'' \u003c 1  and   #(lf)                  a.''Job Type Code'' in (\u0027002000\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027003602\u0027,\u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027)#(lf)                      then \u0027NFR1\u0027 #(lf)        end) as FR_SEGMENT,#(lf)        trim(concat_ws(\u0027 \u0027,dd.CHFC_DSGT_CDE,dd.CLF_DSGT_CDE,dd.CLU_DSGT_CDE,dd.CFA_DSGT_CDE,dd.CFP_DSGT_CDE,dd.FIC_DSGT_CDE,dd.FICF_DSGT_CDE,dd.LUTCF_DSGT_CDE)) AS Credentialsxx,#(lf)        concat_ws(\u0027 \u0027,dd.S1_LIC_STS_CDE,dd.S4_LIC_STS_CDE,dd.S6_LIC_STS_CDE,dd.S7_LIC_STS_CDE,dd.S9_LIC_STS_CDE,#(lf)        dd.S10_LIC_STS_CDE,dd.S22_LIC_STS_CDE,dd.S24_LIC_STS_CDE,dd.S26_LIC_STS_CDE,dd.S27_LIC_STS_CDE,#(lf)        dd.S51_LIC_STS_CDE,dd.S53_LIC_STS_CDE,dd.S62_LIC_STS_CDE,dd.S63_LIC_STS_CDE,dd.S65_LIC_STS_CDE,#(lf)        dd.S66_LIC_STS_CDE,dd.S86_LIC_STS_CDE,dd.S87_LIC_STS_CDE) as Licensesxx,  #(lf)          #(lf)       a.''Gender Code'' as GNDR_CDE, #(lf)       a.''Last Name'' as LST_NM, #(lf)       case when a.''Nick Name'' IN (\u0027 \u0027) then a.''First Name''#(lf)         else a.''Nick Name''#(lf)       end as FRST_NM, #(lf)       a.''Middle Name'' as MDDL_NM,#(lf)       xx.assigned_afa,#(lf)       case when zz.opcount is NULL then 0 #(lf)         else zz.opcount#(lf)       end as OP_Count,#(lf)       aa.''Conference Qualification Type Code'',#(lf)       zzz.''Team Identifier'',#(lf)       zzz.''Team Name'',#(lf)       zzz.''Team Purpose Code''#(lf)       #(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' a inner join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' as aa#(lf)    on (a.''Employee Identifier''=aa.''Source System Key Text'' and aa.''Current Row Indicator'' = \u0027Y\u0027)  left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' b #(lf)    on (a.''Employee Identifier''= b.''Sales Hierarchy Identifier'') left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' c #(lf)    on (a.''Employee Identifier''= c.''Source System Key Text'' AND c.''Current Row Indicator'' = \u0027Y\u0027) left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' cc #(lf)    on (c.''Report to ID''= cc.''Source System Key Text'' AND cc.''Current Row Indicator'' = \u0027Y\u0027) left join  #(lf)        (select d.''Employee Identifier'',#(lf)                (case when \u0027Y\u0027 = d.''Chartered Financial Consultant Designation Code'' THEN \u0027ChFC\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS CHFC_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Chartered Leadership Fellow Designation Code'' THEN \u0027CLF\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS CLF_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Chartered Life Underwriter Designation Code'' THEN \u0027CLU\u0027#(lf)                   else \u0027 \u0027 #(lf)                 end) AS CLU_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Chartered Financial Analyst Designation Code'' THEN \u0027CFA\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS CFA_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Fraternal Insurance Counselor Designation Code'' THEN \u0027FIC\u0027#(lf)                   else \u0027 \u0027 #(lf)                 end) AS FIC_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Fraternal Insurance Counselor Fellow Designation Code'' THEN \u0027FICF\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS FICF_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Certified Financial Planner Designation Code'' THEN \u0027CFP\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS CFP_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Life Underwriter Training Counsel Fellow Designation Code'' THEN \u0027LUTCF\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS LUTCF_DSGT_CDE,#(lf)                (case when \u0027Y\u0027 = d.''Series One License Status Code'' THEN \u00271\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S1_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Four License Status Code'' THEN \u00274\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S4_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Six License Status Code'' THEN \u00276\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S6_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Seven License Status Code'' THEN \u00277\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S7_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Nine License Status Code'' THEN \u00279\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S9_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Ten License Status Code'' THEN \u002710\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S10_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Twenty-two License Status Code'' THEN \u002722\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S22_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Twenty-four License Status Code'' THEN \u002724\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S24_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Twenty-six License Status Code'' THEN \u002726\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S26_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Twenty-seven License Status Code'' THEN \u002727\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S27_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Fifty-one License Status Code'' THEN \u002751\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S51_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Fifty-three License Status Code'' THEN \u002753\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S53_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Sixty-two License Status Code'' THEN \u002762\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S62_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Sixty-three License Status Code'' THEN \u002763\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S63_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Sixty-five License Status Code'' THEN \u002765\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S65_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Sixty-six License Status Code'' THEN \u002766\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S66_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Eighty-six License Status Code'' THEN \u002786\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S86_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Eighty-seven License Status Code'' THEN \u002787\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S87_LIC_STS_CDE#(lf)              #(lf)           from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' d#(lf)          where d.''Termination Date'' is null   #(lf)            and d.''Current Row Indicator'' = \u0027Y\u0027#(lf)            and d.''Employee Status Type Code'' in (\u0027A\u0027,\u0027L\u0027,\u0027I\u0027)) as dd#(lf)    on A.''Employee Identifier'' = dd.''Employee Identifier''  left join#(lf)           #(lf)        (select distinct aa.''Source System Key Text'',#(lf)                            (case when e.emp_count = 1 then f.emp_nm#(lf)                      when e.emp_count \u003e 1 then \u0027Multiple Associates\u0027#(lf)                   else \u0027None\u0027#(lf)                 end) as assigned_afa#(lf)           from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' as aa left join  #(lf)              (select e.''Report to ID'', #(lf)                      count(e.''Organization Dimension Surrogate Key'') as emp_count   #(lf)                 from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' e  #(lf)                where e.''Job Type Code'' in (\u0027002000\u0027,\u0027002010\u0027,\u0027002003\u0027,\u0027002011\u0027,\u0027002012\u0027,\u0027003100\u0027,#(lf)                                            \u0027002017\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027002018\u0027,\u0027002019\u0027,\u0027003500\u0027,#(lf)                                            \u0027002022\u0027,\u0027002024\u0027,\u0027002025\u0027,\u0027002026\u0027,\u0027002027\u0027,\u0027002030\u0027,#(lf)                                            \u0027002031\u0027,\u0027002032\u0027)#(lf)                  and e.''Employee Status Type Code'' = \u0027A\u0027 #(lf)                  and e.''Current Row Indicator'' = \u0027Y\u0027#(lf)                  and e.''Report to ID'' \u003c\u003e \u0027'' ''\u0027 #(lf)                  and e.''Effective End Date'' = \u00279999-12-31\u0027 #(lf)               group by ''Report to ID'') as e #(lf)             on aa.''Source System Key Text'' = e.''Report to ID'' left join#(lf)         #(lf)              (select f.''Organization Dimension Surrogate Key'',#(lf)                      f.''Last Name''||\u0027, \u0027||f.''First Name'' as EMP_NM, #(lf)                      f.''Report to ID''  #(lf)                 from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' f#(lf)                where (f.''Job Type Code'' in (\u0027002000\u0027,\u0027002010\u0027,\u0027002003\u0027,\u0027002011\u0027,\u0027002012\u0027,\u0027003100\u0027,#(lf)                                             \u0027002017\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027002018\u0027,\u0027002019\u0027,\u0027003500\u0027,#(lf)                                             \u0027002022\u0027,\u0027002024\u0027,\u0027002025\u0027,\u0027002026\u0027,\u0027002027\u0027,\u0027002030\u0027,#(lf)                                             \u0027002031\u0027,\u0027002032\u0027) or #(lf)                      f.''Department Identifier'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027)) #(lf)                  and f.''Department Identifier'' not in (\u00272410\u0027,\u00273005\u0027,\u00277151\u0027,\u00277152\u0027,\u00279150\u0027,\u00279134\u0027,#(lf)                                                        \u0027NA\u0027,\u00274100\u0027,\u00276053\u0027,\u00276100\u0027,\u00278900\u0027) #(lf)                  and f.''Employee Status Type Code'' = \u0027A\u0027 #(lf)                  and f.''Current Row Indicator'' = \u0027Y\u0027#(lf)                  and f.''Report to ID'' \u003c\u003e \u0027'' ''\u0027 #(lf)                  and f.''Effective End Date'' = \u00279999-12-31\u0027) as f  #(lf)              on e.''Report to ID''=f.''Report to ID''#(lf)          where (aa.''Job Type Code'' in (\u0027002000\u0027,\u0027002010\u0027,\u0027002003\u0027,\u0027002011\u0027,\u0027002012\u0027,\u0027003100\u0027,#(lf)                                        \u0027002017\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027002018\u0027,\u0027002019\u0027,\u0027003500\u0027,#(lf)                                        \u0027002022\u0027,\u0027002024\u0027,\u0027002025\u0027,\u0027002026\u0027,\u0027002027\u0027,\u0027002030\u0027,#(lf)                                        \u0027002031\u0027,\u0027002032\u0027) or #(lf)                aa.''Department Identifier'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027)) #(lf)            and aa.''Department Identifier'' not in (\u00272410\u0027,\u00273005\u0027,\u00277151\u0027,\u00277152\u0027,\u00279150\u0027,\u00279134\u0027,#(lf)                                                   \u0027NA\u0027,\u00274100\u0027,\u00276053\u0027,\u00276100\u0027,\u00278900\u0027) #(lf)            and aa.''Current Row Indicator'' = \u0027Y\u0027#(lf)            and aa.''Employee Status Type Code'' = \u0027A\u0027 #(lf)            and aa.''Report to ID'' \u003c\u003e \u0027'' ''\u0027 #(lf)            and aa.''Effective End Date'' = \u00279999-12-31\u0027) as xx#(lf)#(lf)    on a.''Employee Identifier''=xx.''Source System Key Text'' left join #(lf)      (select count(z.''Organization Dimension Surrogate Key'') as OPCOUNT,   #(lf)                    z.''Report to ID'' #(lf)         from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' z  #(lf)        where z.''Current Row Indicator'' = \u0027Y\u0027#(lf)          and z.''Field Professional Roles'' in (\u0027Unlicensed Office Professionals\u0027,\u0027Licensed Office Professionals\u0027)#(lf)          and z.''Employee Status Type Code'' in (\u0027A\u0027,\u0027I\u0027,\u0027L\u0027)#(lf)       group by ''Report to ID'') as zz#(lf)         #(lf)    on a.''Employee Identifier'' = zz.''Report to ID''   left join#(lf)#(lf)(select a.''Employee Identifier'',#(lf)        b.''Team Identifier'',#(lf)        b.''Team Name'',#(lf)        b.''Team Purpose Code'',#(lf)        A.''Effective Date''#(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Employee Team Organization Relationship Current Dimension''  a inner join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Team Organization Current Dimension'' b#(lf)    on (a.''Team Identifier Surrogate Key'' = b.''Team Identifier Surrogate Key'')  inner join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' c#(lf)    on (a.''Employee Identifier'' = c.''Employee Identifier'')   #(lf)    #(lf) where b.''Effective Status Code'' = \u0027A\u0027#(lf)   and c.''Employee Status Type Code'' = \u0027A\u0027#(lf)   and c.''Current Row Indicator'' = \u0027Y\u0027#(lf)   and a.''Team Member Action Code'' \u003c\u003e \u0027DROP\u0027#(lf)--   and b.''Team Purpose Code'' NOT in (\u0027COAC\u0027,\u0027ENSB\u0027,\u0027MKTG\u0027,\u0027ASSC\u0027) #(lf)   and b.''Team Purpose Code'' NOT in (\u0027COAC\u0027,\u0027ENSB\u0027) #(lf)   and a.''Effective Date'' = (SELECT MAX(aa.''Effective Date'')#(lf)                                FROM ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Employee Team Organization Relationship Current Dimension''  aa inner join#(lf)                                     ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Team Organization Current Dimension'' bb#(lf)                                  on (aa.''Team Identifier Surrogate Key'' = bb.''Team Identifier Surrogate Key'' and a.''Employee Identifier''= aa.''Employee Identifier'') INNER JOIN#(lf)                                     ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' cc#(lf)                                  on (aa.''Employee Identifier''= cc.''Employee Identifier'')#(lf)                                           WHERE bb.''Effective Status Code'' = \u0027A\u0027#(lf)                                 AND cc.''Employee Status Type Code'' = \u0027A\u0027  #(lf)                                 and cc.''Current Row Indicator'' = \u0027Y\u0027#(lf)                                 and aa.''Team Member Action Code'' \u003c\u003e \u0027DROP\u0027#(lf)                                -- and bb.''Team Purpose Code'' NOT in (\u0027COAC\u0027,\u0027ENSB\u0027) #(lf)                                 and bb.''Team Purpose Code'' NOT in (\u0027COAC\u0027,\u0027ENSB\u0027,\u0027MKTG\u0027,\u0027ASSC\u0027) #(lf)                                -- and bb.''Team Purpose Code'' in (\u0027ASSC\u0027)#(lf)                            )#(lf)  order by a.''Employee Identifier'') as zzz#(lf)  #(lf)   on a.''Employee Identifier'' = zzz.''Employee Identifier'' left join#(lf)#(lf)#(lf)       (select distinct a2.''Organization Department Code'' as RFO_CDE,#(lf)                        a2.''Organization Sub Department Code'' as MVP_ID,#(lf)                        cc.''Organization Department Description'',#(lf)                        case when cc.''Employee Name'' is null then \u0027Vacant\u0027#(lf)                          else cc.''Employee Name''#(lf)                        end as ''MVP Leader''    #(lf)          from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' a2  left join#(lf)               (Select Distinct aa.''Organization Sub Department Code'',#(lf)                                aa.''Organization Department Description'',#(lf)                                bb.''Employee Identifier'',#(lf)                                bb.''Employee Name'' #(lf)                  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' as aa left join#(lf)                       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' as bb#(lf)                    on aa.''Sales Hierarchy Identifier''=bb.''Employee Identifier''  #(lf)                 where aa.''Current Row Indicator'' = \u0027Y\u0027#(lf)                   and bb.''Employee Status Type Code'' = \u0027A\u0027#(lf)                   and bb.''Current Row Indicator'' = \u0027Y\u0027#(lf)                   and aa.''Effective End Date'' = \u00279999-12-31\u0027#(lf)                   and bb.''Job Type Code'' = \u0027001001\u0027#(lf)                 order by aa.''Organization Sub Department Code'') cc#(lf)             on a2.''Organization Sub Department Code''=cc.''Organization Sub Department Code''  #(lf)          where a2.''Current Row Indicator'' = \u0027Y\u0027#(lf)            and a2.''Effective End Date'' = \u00279999-12-31\u0027#(lf)            and a2.''Organization Zone Code'' \u003c\u003e \u0027UKWN\u0027#(lf)           order by a2.''Organization Sub Department Code''  ) as zz3#(lf)  on c.''Sub Department Identifier''= zz3.''MVP_ID'' left join#(lf)   #(lf)    #(lf)     (SELECT DISTINCT a4.''Organization Department Code'' as RFO_CDE,#(lf)                      a4.''Organization Zone Code'' as TAG_ZONE_NM, #(lf)                      (substring(a4.''Organization Zone Code'',6,5)) as Market_ID,#(lf)                      case when t4.''Employee Name'' is null then \u0027Vacant\u0027#(lf)                        else t4.''Employee Name''#(lf)                      end as Market_Leaders#(lf)#(lf)        from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' a4 left join #(lf)             (select distinct aa4.''Organization Zone Code'',#(lf)                              bb4.''Employee Name''  #(lf)#(lf)                from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' aa4 left join #(lf)                     ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' bb4#(lf)                  on aa4.''Sales Hierarchy Identifier''=bb4.''Employee Identifier''#(lf)               where aa4.''Current Row Indicator'' = \u0027Y\u0027      #(lf)                 and bb4.''Employee Status Type Code'' in (\u0027A\u0027)#(lf)                 and aa4.''Effective End Date'' = \u00279999-12-31\u0027#(lf)                 and bb4.''Current Row Indicator'' = \u0027Y\u0027#(lf)                 and aa4.''Effective End Date'' = \u00279999-12-31\u0027#(lf)                 and bb4.''Job Type Code'' in (\u0027001002\u0027,\u0027001003\u0027,\u0027001007\u0027)#(lf)                 and bb4.''Employee Identifier'' not in (\u0027TS62904\u0027,\u0027TS67022\u0027,\u0027TS74827\u0027,\u0027TS73067\u0027,\u0027TS77319\u0027,\u0027TS73124\u0027)) t4 #(lf)          on a4.''Organization Zone Code'' = t4.''Organization Zone Code''#(lf)       where a4.''Current Row Indicator'' = \u0027Y\u0027#(lf)         and a4.''Effective End Date'' = \u00279999-12-31\u0027#(lf)         and substring(a4.''Organization Zone Code'',6,2) \u003c\u003e \u002700\u0027#(lf)         and a4.''Organization Department Code'' \u003c\u003e \u0027UKWN\u0027#(lf)       order by a4.''Organization Zone Code'') zz4#(lf)     #(lf)   on  b.''Organization Zone Code''= zz4.''TAG_ZONE_NM'' #(lf)  #(lf)  #(lf) where a.''Employee Status Type Code'' IN (\u0027A\u0027,\u0027I\u0027,\u0027L\u0027)#(lf)   and (c.''Job Family Code'' LIKE \u0027FLD%\u0027 OR#(lf)        c.''Job Family Code'' =\u0027SALES\u0027 OR#(lf)        c.''TF Job Class Code'' =\u0027FAC\u0027)#(lf)   and a.''Termination Date'' is NULL #(lf)   and (a.''Job Type Code'' in (\u0027002003\u0027,\u0027002010\u0027,\u0027002011\u0027,\u0027002012\u0027,\u0027002016\u0027,\u0027002017\u0027,#(lf)                              \u0027002000\u0027,\u0027002022\u0027,\u0027002024\u0027,\u0027002025\u0027,\u0027002026\u0027,\u0027002027\u0027,#(lf)                              \u0027002030\u0027,\u0027002031\u0027,\u0027002032\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027003602\u0027,#(lf)                              \u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027) or #(lf)       a.''Organization Department Code'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027)) #(lf)   and c.''Department Identifier'' not in (\u00272410\u0027,\u00273005\u0027,\u00277151\u0027,\u00277152\u0027,\u00279150\u0027,\u00279134\u0027,#(lf)                                         \u0027NA\u0027,\u00274100\u0027,\u00276053\u0027,\u00276100\u0027,\u00278900\u0027) #(lf)   and b.''Effective End Date'' = \u00279999-12-31\u0027 #(lf)   and b.''Current Row Indicator'' = \u0027Y\u0027 #(lf)   and a.''Current Row Indicator'' = \u0027Y\u0027 #(lf)order by a.''Employee Identifier''', null, [EnableFolding=true]),    #'Added Custom' = Table.AddColumn(Source, 'Split_Cred', each Text.Split( [CREDENTIALSXX], ' ' )),    #'Added Custom1' = Table.AddColumn(#'Added Custom', 'Shrink_Cred', each List.Select([Split_Cred], each _ \u003c\u003e '')),    #'Added Custom2' = Table.AddColumn(#'Added Custom1', 'Credentials', each Text.Combine([Shrink_Cred], ' ')),    #'Added Custom3' = Table.AddColumn(#'Added Custom2', 'Split_License', each Text.Split( [LICENSESXX], ' ' )),    #'Added Custom4' = Table.AddColumn(#'Added Custom3', 'Shrink_License', each List.Select([Split_License], each _ \u003c\u003e '')),    #'Added Custom5' = Table.AddColumn(#'Added Custom4', 'License', each Text.Combine([Shrink_License], ' ')),    #'Removed Columns' = Table.RemoveColumns(#'Added Custom5',{'Split_Cred', 'Shrink_Cred', 'Split_License', 'Shrink_License', 'CREDENTIALSXX', 'LICENSESXX'}),    #'Added Custom6' = Table.AddColumn(#'Removed Columns', 'Leader/COE/NPG', each if Text.EndsWith([MARKET], '-69') then 'GPA - Mkt 69' else if Text.EndsWith([MARKET], '-79') then 'GPD - Mkt 79' else if Text.EndsWith([MARKET], '-89') then 'PPC - Mkt 89' else if Text.EndsWith([MARKET], '-90') then 'NPG' else if Text.EndsWith([MARKET], '-91') then 'NPG' else if Text.EndsWith([MARKET], '-92') then 'NPG' else if Text.EndsWith([MARKET], '-93') then 'NPG' else if Text.EndsWith([MARKET], '-94') then 'NPG' else if Text.EndsWith([MARKET], '-95') then 'NPG' else if Text.EndsWith([MARKET], '-96') then 'NPG' else if Text.EndsWith([MARKET], '-97') then 'NPG' else if Text.EndsWith([MARKET], '-98') then 'NPG' else if Text.EndsWith([MARKET], '-99') then 'NPG' else ''),    #'Added Custom7' = Table.AddColumn(#'Added Custom6', 'Conference Qualification', each if[Conference Qualification Type Code] = '33' then 'Pinnacle A'  else if[Conference Qualification Type Code] = '32' then 'Pinnacle B'else if[Conference Qualification Type Code] = '31' then 'Pinnacle C'else if[Conference Qualification Type Code] = '29' then 'Summit A'else if[Conference Qualification Type Code] = '28' then 'Summit B'else if[Conference Qualification Type Code] = '27' then 'Summit C'else if[Conference Qualification Type Code] = '22' then 'Sierra A'else if[Conference Qualification Type Code] = '20' then 'Sierra B'else 'Non-Qualified'),    #'Added Custom8' = Table.AddColumn(#'Added Custom7', 'Team Purpose Description', each if [Team Purpose Code] = 'PBP' then 'Professional'else if [Team Purpose Code] = 'PBPS' then 'Professional'else if [Team Purpose Code] = 'FRML' then 'Formal'  else if [Team Purpose Code] = 'FRMS' then 'Formal'else if [Team Purpose Code] = 'ASSC' then 'Association'else if [Team Purpose Code] = 'SOLO' then 'Solo'else ' '),    #'Added Custom9' = Table.AddColumn(#'Added Custom8', 'Market with Leader', each [MARKET]\u0026' - '\u0026[MARKET_LEADERS]),    #'Added Custom10' = Table.AddColumn(#'Added Custom9', 'MVP with Leader', each [MVP_ID] \u0026 ' - ' \u0026 [MVP Leader]),    #'Replaced Value' = Table.ReplaceValue(#'Added Custom10',null,'',Replacer.ReplaceValue,{'Team Name'}),    #'Replaced Value1' = Table.ReplaceValue(#'Replaced Value',null,'',Replacer.ReplaceValue,{'Team Identifier'}),    #'Added Custom11' = Table.AddColumn(#'Replaced Value1', 'TeamAdvisor_HlthRpt', each if [Team Identifier] = '' then [EMP_NM] else [Team Name]),    #'Filtered Rows' = Table.SelectRows(#'Added Custom11', each ([ZONE] \u003c\u003e '0997-00')),    #'Removed Duplicates' = Table.Distinct(#'Filtered Rows', {'SALE_HIER_DIM_SK'}),    #'Added Custom12' = Table.AddColumn(#'Removed Duplicates', 'Name w/ TSID', each [EMP_ID]\u0026' '\u0026'-'\u0026' '\u0026[EMP_NM])in    #'Added Custom12'"}]},{"name":"CustInfo","isHidden":false,"storageMode":"Import","columns":[{"name":"CUST_ID_NBR","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CUST_LGAL_FMT_NM","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = DB2.Database('PODWH021:50000', 'PODWH021', [HierarchicalNavigation=true, Implementation='Microsoft']),    MEMBER = Source{[Schema='MEMBER']}[Data],    CNF_CUSTOMER_DIM_CFDL1 = MEMBER{[Name='CNF_CUSTOMER_DIM_CFDL']}[Data],    #'Filtered Rows' = Table.SelectRows(CNF_CUSTOMER_DIM_CFDL1, each [CUST_TYP_IND] = 'I'),    #'Filtered Rows1' = Table.SelectRows(#'Filtered Rows', each [CUST_COMB_DEL_IND] = 'Y' and [CUST_END_DT] \u003e= #date(2022, 1, 1) or [CUST_COMB_DEL_IND] = 'N' and [CUST_END_DT] = null),    #'Filtered Rows2' = Table.SelectRows(#'Filtered Rows1', each [CUST_IDVL_DECD_IND] = 'Y' and [CUST_IDVL_DECD_DT] \u003e= #date(2021, 1, 1) or [CUST_IDVL_DECD_IND] = 'N'),    #'Removed Columns' = Table.RemoveColumns(#'Filtered Rows2',{'CUST_SK', 'CUST_BEG_DT', 'CUST_END_DT', 'TAX_ID_CDE', 'TAX_ID_DSCR', 'CUST_BRTH_DT', 'CUST_BRTH_DTSR_CDE', 'CUST_BRTH_ST_CDE', 'CUST_BRTH_ST_DSCR', 'EST_BRTH_YR', 'CUST_LGAL_TITL_NM', 'CUST_LGAL_FRST_NM', 'CUST_LGAL_MDDL_NM', 'CUST_LGAL_LST_NM', 'CUST_LGAL_SUFX_NM', 'CUST_LGAL_BSNS_NM', 'CUST_MAIL_FMT_NM', 'CUST_MAIL_TITL_NM', 'CUST_MAIL_FRST_NM', 'CUST_MAIL_MDDL_NM', 'CUST_MAIL_LST_NM', 'CUST_MAIL_SUFX_NM', 'BSNS_ORZN_CDE', 'BSNS_ORZN_DSCR', 'FSCL_YR_END_MTH', 'ORZN_ESTB_DT', 'ORZN_ESTB_DTSR_CDE', 'ORZN_DSLV_IND', 'ORZN_DSLV_IND_DSCR', 'ORZN_DSLV_DT', 'ORZN_DSLV_DTSR_CDE', 'CUST_COMB_DEL_IND', 'CUST_SVC_ORSN_CDE', 'CUST_SVC_ORSN_DSCR', 'CUST_OVRD_STRT_DT', 'CUST_OVRD_END_DT', 'CUST_IDVL_DECD_DT', 'CHPT_NBR', 'CHRC_NBR', 'MBR_TYP_CDE_EFF_DT', 'MBR_TYP_CDE_END_DT', 'PRIM_RSDL_AGRP_IND', 'PRIM_RSAD_GRP_DSCR', 'PRIM_RSAG_SRC_CDE', 'PRIM_RSAG_SRC_DSCR', 'FRAT_VLTR_PSTN_IND', 'FRAT_VPOS_DSCR', 'CUST_GRP_SK', 'CUST_GRP_ID_NBR', 'CUST_GRLN_TYP_CDE', 'CUST_GRLN_TYP_DSCR', 'CUST_MLNM_TYP_CDE', 'CUST_MLNM_TYP_DSCR', 'CUST_MLNM_FMT_CDE', 'CUST_MLNM_FMT_DSCR', 'CUST_GRET_NM', 'CUST_GRET_NM_CDE', 'CUST_GRNM_CDE_DSCR', 'MOSS_ID_NBR', 'MOSS_CHK_DGIT_NBR', 'CUST_INIT_ADD_DT', 'CUST_IADD_DTSR_CDE', 'CUST_SEX_CDE', 'CUST_SEX_DSCR', 'MATL_STS_CDE', 'MATL_STS_DSCR', 'MRST_CDE_SRC_CDE', 'MRST_CDE_SRC_DSCR', 'MBR_TYP_CDE', 'MBR_TYP_DSCR', 'MBR_ELIG_CDE', 'MBR_ELIG_DSCR', 'MBR_BAS_CDE', 'MBR_BAS_DSCR', 'MBR_ORDT_KOWN_CDE', 'MBR_ORDT_KOWN_DSCR', 'MBR_ORIG_DT', 'DRIV_MBR_ORIG_DT', 'MBR_ASCT_XCPT_CDE', 'MBR_ASCT_XCPT_DSCR', 'CLAS_CUST_RPT_CDE', 'CLAS_CUST_RPT_DSCR', 'CLAS_CUST_STS_CDE', 'CLAS_CUST_STS_DSCR', 'CLAS_CNRN_STS_CDE', 'CLAS_CNRN_STS_DSCR', 'CLAS_CTRC_RLTN_CDE', 'CLAS_CNRN_DSCR', 'CLAS_OWNR_RLTN_CDE', 'CLAS_OWRL_DSCR', 'CLAS_BRKO_STS_CDE', 'CLAS_BRKO_STS_DSCR', 'MAIL_ADR_UKWN_IND', 'MAIL_ADR_UKWN_DSCR', 'MAIL_ADR_LN1_TXT', 'MAIL_ADR_LN2_TXT', 'MAIL_ADR_LN3_TXT', 'MAIL_ADR_LN4_TXT', 'MAIL_ADR_CITY_NM', 'MAIL_ST_CDE', 'MAIL_ST_DSCR', 'MAIL_ZIP5_CDE', 'MAIL_ZIP4_CDE', 'MAIL_ZIP2_CDE', 'MAIL_ZPCD_CKDG_NBR', 'MAIL_CTST_ZIP_TXT', 'MAIL_ADR_TYP_CDE', 'MAIL_ADR_TYP_DSCR', 'MAIL_ADR_FMT_CDE', 'MAIL_ADR_FMT_DSCR', 'MAIL_CRIR_RUTE_CDE', 'MAIL_ADR_CTRY_CDE', 'MAIL_ADR_CTRY_DSCR', 'MAIL_ADR_STD_CDE', 'MAIL_ADR_STD_DSCR', 'MAIL_BPCD_1_CDE', 'MAIL_BPCD_1_DSCR', 'MLAD_STRT_MTH_DAY', 'MLAD_END_MTH_DAY', 'RSDL_ADR_UKWN_IND', 'RSDL_ADR_UKWN_DSCR', 'RSDL_ADR_LN1_TXT', 'RSDL_ADR_LN2_TXT', 'RSDL_ADR_LN3_TXT', 'RSDL_ADR_LN4_TXT', 'RSDL_ADR_CITY_NM', 'RSDL_ST_CDE', 'RSDL_ST_DSCR', 'RSDL_ZIP5_CDE', 'RSDL_ZIP4_CDE', 'RSDL_ZIP2_CDE', 'RSDL_ZPCD_CKDG_NBR', 'RSDL_CTST_ZIP_TXT', 'RSDL_ADR_TYP_CDE', 'RSDL_ADR_TYP_DSCR', 'RSDL_ADR_FMT_CDE', 'RSDL_ADR_FMT_DSCR', 'RSDL_CRIR_RUTE_CDE', 'RSDL_ADR_CTRY_CDE', 'RSDL_ADR_CTRY_DSCR', 'RSDL_ADR_STD_CDE', 'RSDL_ADR_STD_DSCR', 'RSDL_BPCD_1_CDE', 'RSDL_BPCD_1_DSCR', 'RSAD_STRT_MTH_DAY', 'RSAD_END_MTH_DAY', 'EMAL_ADR_TXT', 'TEL_AREA_CDE_NBR', 'FMT_TEL_NBR_TXT', 'TEL_EXT_NBR', 'TEL_NBR_TYP_CDE', 'TEL_NBR_TYP_DSCR', 'TEL_STRT_DAY', 'TEL_STRT_MTH', 'TEL_END_DAY', 'TEL_END_MTH', 'BEST_DYTM_CALL_TXT', 'TEL_FRGN_NBR', 'TEL_SVC_CDE', 'TEL_SVC_DSCR', 'TIME_ZONE_CDE', 'TIME_ZONE_DSCR', 'PRIM_TEL_IND', 'PRIM_TEL_DSCR', 'VNDR_VERF_STS_CDE', 'VNDR_VERF_STS_DSCR', 'VNDR_VERF_DT', 'VNDR_VFDT_SRC_CDE', 'OPER_RCD_STS_CDE', 'OPER_RCD_STS_DSCR', 'CHK_SUM_HASH_NBR', 'CRET_TMSP', 'LST_UPDT_TMSP', 'ETL_PROC_CNTL_ID', 'ETL_RECORD_VALID', 'ETL_OPER_VLD_IND', 'SRC_SYS_ID', 'CRET_PGM_SK', 'LST_UPDT_PGM_SK', 'CRET_USER_ID', 'LST_UPDT_USER_ID', 'CUST_TYP_IND'}),    #'Filtered Rows3' = Table.SelectRows(#'Removed Columns', each true),    #'Removed Columns1' = Table.RemoveColumns(#'Filtered Rows3',{'CUST_IDVL_DECD_IND'})in    #'Removed Columns1'"}]},{"name":"Producer","isHidden":false,"storageMode":"Import","columns":[{"name":"SALE_HIER_DIM_SK","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"EMP_DIM_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SALE_HIER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ZONE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RPT_TO_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ADJ_SVC_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TENURE","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TENURE_GROUP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FIN_CSLT_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"WLTH_ADVR_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"GNDR_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LST_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FRST_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MDDL_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_SUB_DEPT_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_SUB_DEPT_DSCR","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = PowerBI.Dataflows([]),    #'4ed85d6e-e750-4d01-892f-78fc79993e0c' = Source{[workspaceId='4ed85d6e-e750-4d01-892f-78fc79993e0c']}[Data],    #'0b905589-2450-4f3c-9fd8-f4902e4223de' = #'4ed85d6e-e750-4d01-892f-78fc79993e0c'{[dataflowId='0b905589-2450-4f3c-9fd8-f4902e4223de']}[Data],    Producer1 = #'0b905589-2450-4f3c-9fd8-f4902e4223de'{[entity='Producer']}[Data],    #'Removed Duplicates' = Table.Distinct(Producer1, {'EMP_NM'})in    #'Removed Duplicates'"}]},{"name":"Pending_Applications","isHidden":false,"storageMode":"Import","columns":[{"name":"Financial Services Agreement Surrogate Key","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"RFOCODE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFONAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ZONE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ZONE_NAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CORPORATEEMPLOYEEID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"AgentFullName","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"New Business Application Number","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"BENEFITCONTRACTNUMBER","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PRODUCT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LOB","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CIFOWNERFULLNAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Financial Services Agreement Owner Person Surrogate Key","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"MBR_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ESTIMATEDSALESCREDITAMT","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"BENEFIT_AMOUNT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"DAYS_PENDING","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"TRANSRECEIVEDT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TRANSDESC","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CTRC_PND_CATG_EXCD","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'select Distinct aa.''Financial Services Agreement Surrogate Key'',#(lf)                c.''Department Identifier'' as RFOCode,#(lf)                c.''Department Name'' as RFOName,#(lf)                substring(c.''RFO Zone Identifier'',6,2) as Zone,#(lf)                substring(c.''RFO Zone Name'',1,18) as Zone_Name,#(lf)                c.''Source System Key Text'' as CorporateEmployeeID,#(lf)                --trim(c.''First Name'') || \u0027 \u0027 || trim(c.''Last Name'') as ''AgentFullName'',#(lf)                trim(c.''Last Name'')||\u0027, \u0027||trim(c.''First Name'') as ''AgentFullName'',#(lf)                aa.''New Business Application Number'' as ''New Business Application Number'',#(lf)                d.''Benefit Contract Number'' as BenefitContractNumber,#(lf)                aa.''Adjusted Level 3 Product Line Of Business Code'' as Product,#(lf)                e.''Benefit Contract Type Description'' as LOB,#(lf)                --trim(f.''First Name'')||\u0027 \u0027|| trim(f.''Last Name'') as CIFOwnerFullName,#(lf)                trim(f.''Last Name'')||\u0027, \u0027||trim(f.''First Name'') as CIFOwnerFullName,#(lf)                aa.''Financial Services Agreement Owner Person Surrogate Key'',#(lf)                h.''Membership Type Description'' as MBR_TYP_CDE,#(lf)                aa.''New Sales Credit Estimated Amount'' as EstimatedSalesCreditAmt,#(lf)                aa.''New Business Application Face Amount'' as Benefit_Amount,#(lf)                aa.''New Business Application Days Pending Count'' as Days_Pending,#(lf)                aa.''Application Receive Date Surrogate Key'' as TransReceiveDT,#(lf)                aa.''New Business Application Type Description'' as TransDesc,#(lf)                aa.''New Business Application Current Pending Category Description'' as CTRC_PND_CATG_EXCD#(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''New Business Applications Summarized'' as aa left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Contract Dimension'' as d#(lf)    on aa.''Financial Services Agreement Surrogate Key''=d.''Contract Dimension Surrogate Key'' left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Conformed Contract Dimension Detail''  as e on#(lf)     (d.''Benefit Contract Number''= e.''Benefit Contract Number''  and d.''Benefit Contract Type Code'' = e.''Benefit Contract Type Code'') left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Person Dimension'' as f#(lf)    on aa.''Financial Services Agreement Owner Person Surrogate Key'' = f.''Person Dimension Surrogate Key'' left join#(lf)       (''ENTERPRISE_EDW''.''PRESENTATION_01''.''Membership Fact'' as g inner join #(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Membership Type Dimension'' as h #(lf)        on g.''Membership Type Dimension Surrogate Key'' = h.''Membership Type Dimension Surrogate Key'' and g.''Effective End Date''=\u00279999-12-31\u0027) #(lf)    on f.''Person Dimension Surrogate Key'' = g.''Person Dimension Surrogate Key''  left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' as c#(lf)    on(aa.''Writing Agent Surrogate Key'' = c.''Organization Dimension Surrogate Key'')   #(lf)  where aa.''New Business Application Current Status Description'' =\u0027Pending\u0027 #(lf)    and c.''Current Row Indicator'' = \u0027Y\u0027#(lf)    and d.''Current Row Indicator'' = \u0027Y\u0027#(lf)    and e.''Current Row Indicator'' = \u0027Y\u0027#(lf)    and f.''Current Row Indicator'' = \u0027Y\u0027', null, [EnableFolding=true]),    #'Replaced Value' = Table.ReplaceValue(Source,'LIFE','Life',Replacer.ReplaceText,{'PRODUCT'}),    #'Replaced Value1' = Table.ReplaceValue(#'Replaced Value','HLTH','Health',Replacer.ReplaceText,{'PRODUCT'}),    #'Replaced Value2' = Table.ReplaceValue(#'Replaced Value1','ANN','Annuity',Replacer.ReplaceText,{'PRODUCT'}),    #'Replaced Value3' = Table.ReplaceValue(#'Replaced Value2',null,0,Replacer.ReplaceValue,{'ESTIMATEDSALESCREDITAMT'}),    #'Replaced Value4' = Table.ReplaceValue(#'Replaced Value3',null,0,Replacer.ReplaceValue,{'BENEFIT_AMOUNT'}),    #'Replaced Value5' = Table.ReplaceValue(#'Replaced Value4','Unknown, Unknown','',Replacer.ReplaceText,{'CIFOWNERFULLNAME'})in    #'Replaced Value5'"}]},{"name":"Grid_Rev_Snowflake","isHidden":false,"storageMode":"Import","columns":[{"name":"Calendar Day Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Report Year Text","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Year Number","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Year Week Number","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Employee Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Rollup Agent Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Compensation Employee Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Compensation Reporting Roll Up Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Compensation Level 5 Product Line Of Business Subgroup Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Reporting Roll Up Product Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Reporting Roll Up Event Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Compensation Level 2 Product Character Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Grid Credit Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Line Of Business","dataType":"String","isHidden":false,"expression":"SWITCH(  TRUE,  ISBLANK(\u0027Grid_Rev_Snowflake\u0027[Compensation Reporting Roll Up Name]),  '(Blank)',  \u0027Grid_Rev_Snowflake\u0027[Compensation Reporting Roll Up Name] IN {'FA',    'FIA',    'SO',    'SPIA',    'VA'},  'Annuity',  \u0027Grid_Rev_Snowflake\u0027[Compensation Reporting Roll Up Name] IN {'DI',    'LTC',    'MED PLANS'},  'Health',  \u0027Grid_Rev_Snowflake\u0027[Compensation Reporting Roll Up Name] IN {'PERM - RECURRING',    'SPWL',    'TERM',    'UL',    'VUL'},  'Life',  \u0027Grid_Rev_Snowflake\u0027[Compensation Reporting Roll Up Name] IN {'ADVISOR',    'ADVISOR FLEX',    'FEE BASED PLANS',    'GENESIS',    'IMPACT',    'SELECT',    'SHEPHERD',    'SHIELD',    'SIM',    'SMA',    'THRIVENT ADVANTAGE',    'UMA'},  'Managed Accounts',  \u0027Grid_Rev_Snowflake\u0027[Compensation Reporting Roll Up Name] IN {'COLLEGE SAVINGS',    'MF 12B1',    'MF ACCOUNT SERVICE FEE',    'MF I-SHARE',    'MF SALES',    'SECURITIES'},  'Mutual Fund / Brokerage',  \u0027Grid_Rev_Snowflake\u0027[Compensation Reporting Roll Up Name] IN {'TRUST'},  'Trust',  'Other')","columnType":"Calculated"},{"name":"LOB Sort","dataType":"String","isHidden":false,"expression":"related(\u0027Product Sort\u0027[Sort])","columnType":"Calculated"},{"name":"CMPAGT_EQ_ROLLUP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"New Sales Credit Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Gross Dealer Concessions Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Month Text","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Week Text","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Day Text","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Product Category","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Product Sort","dataType":"String","isHidden":false,"expression":"related(\u0027Product\u0027[Product Sort Order])","columnType":"Calculated"},{"name":"TeamSale_Ind","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"YTD Grid Revenue","expression":"  var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT])  Var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])  var _gridtotal = calculate(sum(\u0027Grid_Rev_Snowflake\u0027[Grid Credit Amount]),DTRB_PERF_DATES[CAL_DAY_DT] \u003e= min_date,DTRB_PERF_DATES[CAL_DAY_DT] \u003c= max_date)  var _gridtotal_team = calculate(sum(\u0027Grid_Rev_Snowflake\u0027[Grid Credit Amount]), \u0027Grid_Rev_Snowflake\u0027[TeamSale_Ind] = 'Y',                         DTRB_PERF_DATES[CAL_DAY_DT] \u003e= min_date,DTRB_PERF_DATES[CAL_DAY_DT] \u003c= max_date) ReturnIF([TeamNmFiltered] = 1, IF(ISBLANK(_gridtotal_team),0,_gridtotal_team), IF(ISBLANK(_gridtotal),0,_gridtotal))","isHidden":false},{"name":"Best Day Amount Grid Revenue","expression":"  var gcamt_ind = MAXX(VALUES(Grid_Rev_Snowflake[Calendar Day Date]),[YTD Grid Revenue])  return  IF(ISBLANK(gcamt_ind),0,gcamt_ind)","isHidden":false},{"name":"Best Date Grid Revenue","expression":"CALCULATE(MAX(\u0027Grid_Rev_Snowflake\u0027[Calendar Day Date]),FILTER(\u0027Grid_Rev_Snowflake\u0027, [Grid Credit Amount]=MAX(Grid_Rev_Snowflake[Grid Credit Amount])))","isHidden":false},{"name":"MTD Grid Revenue","expression":"  var _gridtotal = CALCULATE(sum(\u0027Grid_Rev_Snowflake\u0027[Grid Credit Amount]),DATESMTD(Grid_Rev_Snowflake[Calendar Day Date]))  var _gridtotal_team = calculate(sum(\u0027Grid_Rev_Snowflake\u0027[Grid Credit Amount]), \u0027Grid_Rev_Snowflake\u0027[TeamSale_Ind] = 'Y', DATESMTD(Grid_Rev_Snowflake[Calendar Day Date]))  returnIF([TeamNmFiltered] = 1, IF(ISBLANK(_gridtotal_team),0,_gridtotal_team), IF(ISBLANK(_gridtotal),0,_gridtotal))","isHidden":false},{"name":"WTD Grid Revenue","expression":"  var _gridtotal = CALCULATE(sum(\u0027Grid_Rev_Snowflake\u0027[Grid Credit Amount]), \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_WK_TXT]='CURRENT')  var _gridtotal_team = calculate(sum(\u0027Grid_Rev_Snowflake\u0027[Grid Credit Amount]), \u0027Grid_Rev_Snowflake\u0027[TeamSale_Ind] = 'Y',                        \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_WK_TXT]='CURRENT') ReturnIF([TeamNmFiltered] = 1, IF(ISBLANK(_gridtotal_team),0,_gridtotal_team), IF(ISBLANK(_gridtotal),0,_gridtotal))","isHidden":false},{"name":"Previous Day Grid Revenue","expression":"  var _gridtotal = CALCULATE(sum(\u0027Grid_Rev_Snowflake\u0027[Grid Credit Amount]), \u0027Grid_Rev_Snowflake\u0027[Calendar Day Date] = (today()-1))  var _gridtotal_team = calculate(sum(\u0027Grid_Rev_Snowflake\u0027[Grid Credit Amount]), \u0027Grid_Rev_Snowflake\u0027[TeamSale_Ind] = 'Y',                        \u0027Grid_Rev_Snowflake\u0027[Calendar Day Date] = (today()-1)) ReturnIF([TeamNmFiltered] = 1, IF(ISBLANK(_gridtotal_team),0,_gridtotal_team), IF(ISBLANK(_gridtotal),0,_gridtotal))","isHidden":false},{"name":"PYTD Grid Revenue","expression":"  var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT])  Var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])   var _gridtotal = calculate(sum(\u0027Grid_Rev_Snowflake\u0027[Grid Credit Amount]),DTRB_PERF_DATES[CAL_DAY_DT] \u003e= (min_date-365),DTRB_PERF_DATES[CAL_DAY_DT] \u003c= (max_date-365))  var _gridtotal_team = calculate(sum(\u0027Grid_Rev_Snowflake\u0027[Grid Credit Amount]), \u0027Grid_Rev_Snowflake\u0027[TeamSale_Ind] = 'Y',                         DTRB_PERF_DATES[CAL_DAY_DT] \u003e= (min_date-365),DTRB_PERF_DATES[CAL_DAY_DT] \u003c= (max_date-365)) ReturnIF([TeamNmFiltered] = 1, IF(ISBLANK(_gridtotal_team),0,_gridtotal_team), IF(ISBLANK(_gridtotal),0,_gridtotal))","isHidden":false},{"name":"Advancer/Decliner","expression":"if([YTD Grid Revenue]\u003e[PYTD Grid Revenue],1,0)","isHidden":false},{"name":"Advancer Grid Revnue YTD","expression":"Calculate([YTD Grid Revenue],filter(Producer_Snowflake, Grid_Rev_Snowflake[Advancer/Decliner]=1))","isHidden":false},{"name":"Decliner Grid Revnue YTD","expression":"Calculate([YTD Grid Revenue],filter(Producer_Snowflake, Grid_Rev_Snowflake[Advancer/Decliner]=0))","isHidden":false},{"name":"Advancer Count","expression":"CALCULATE(    DISTINCTCOUNT(Producer_Snowflake[EMP_ID]),    filter(Producer_Snowflake,    [Advancer/Decliner]=1))","isHidden":false},{"name":"Decliner Count","expression":"CALCULATE(    DISTINCTCOUNT(Producer_Snowflake[EMP_ID]),    filter(Producer_Snowflake,    [Advancer/Decliner]=0))","isHidden":false},{"name":"YOY Grid","expression":"  var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT])  Var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])  var _ytd_total = calculate(sum(\u0027Grid_Rev_Snowflake\u0027[Grid Credit Amount]),DTRB_PERF_DATES[CAL_DAY_DT] \u003e= min_date,DTRB_PERF_DATES[CAL_DAY_DT] \u003c= max_date)  var _pytd_total = calculate(sum(\u0027Grid_Rev_Snowflake\u0027[Grid Credit Amount]),DTRB_PERF_DATES[CAL_DAY_DT] \u003e= (min_date-365),DTRB_PERF_DATES[CAL_DAY_DT] \u003c= (max_date-365))ReturnIF((_pytd_total) = 0,0, ((_ytd_total - _pytd_total) / _pytd_total)) ","isHidden":false},{"name":"M12 Grid Revenue","expression":"  var min_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])-365  Var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])  var _gridtotal = calculate(sum(\u0027Grid_Rev_Snowflake\u0027[Grid Credit Amount]),DTRB_PERF_DATES[CAL_DAY_DT] \u003e= min_date, DTRB_PERF_DATES[CAL_DAY_DT] \u003c= max_date)  var _gridtotal_team = calculate(sum(\u0027Grid_Rev_Snowflake\u0027[Grid Credit Amount]), \u0027Grid_Rev_Snowflake\u0027[TeamSale_Ind] = 'Y',                         DTRB_PERF_DATES[CAL_DAY_DT] \u003e= min_date,DTRB_PERF_DATES[CAL_DAY_DT] \u003c= max_date) ReturnIF([TeamNmFiltered] = 1, IF(ISBLANK(_gridtotal_team),0,_gridtotal_team), IF(ISBLANK(_gridtotal),0,_gridtotal))","isHidden":false}],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'select b.''Calendar Day Date'',#(lf)b.''Distribution Performance Report Year Text'',#(lf)b.''Distribution Performance Reporting Month Text'',#(lf)b.''Distribution Performance Reporting Week Text'',#(lf)b.''Distribution Performance Reporting Day Text'',#(lf)b.''Distribution Performance Reporting Year Number'',#(lf)b.''Distribution Performance Reporting Year Week Number'',#(lf)a.''Employee Identifier'',#(lf)a.''Rollup Agent Identifier'',#(lf)a.''Employee Identifier'' as ''Compensation Employee Identifier'',#(lf)a.''Compensation Reporting Roll Up Name'',#(lf)a.''Compensation Level 5 Product Line Of Business Subgroup Code'',#(lf)a.''Reporting Roll Up Product Description'',#(lf)a.''Reporting Roll Up Event Description'',#(lf)a.''Compensation Level 2 Product Character Code'',#(lf)case when a.''Employee Identifier'' = a.''Rollup Agent Identifier'' then \u0027Y\u0027#(lf)else \u0027N\u0027#(lf)end as CMPAGT_EQ_ROLLUP,#(lf)sum(a.''New Sales Credit Amount'') as ''New Sales Credit Amount'',#(lf)sum(a.''Gross Dealer Concessions Amount'') as ''Gross Dealer Concessions Amount'',#(lf)sum(a.''Grid Credit Amount'') as ''Grid Credit Amount''#(lf)from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Compensation and Sales Metrics Fact'' as a left join#(lf)''ENTERPRISE_EDW''.''PRESENTATION_01''.''Distribution Performance Dates Dimension'' as b#(lf)on a.''Distribution Performance Dates Surrogate Key''=b.''Date Surrogate Key'' left join#(lf)''ENTERPRISE_EDW''.''PRESENTATION_01''.''Conformed Contract Dimension Detail'' as c#(lf)on (a.''Contract Surrogate Key''=c.''Contract Surrogate Key''),#(lf)''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' as aa      #(lf)where a.''Employee Identifier''= aa.''Employee Identifier'' #(lf)and b.''Distribution Performance Reporting Year Number'' in (\u00272022\u0027,\u00272023\u0027,\u00272024\u0027)#(lf)and ((a.''New Sales Credit Amount'' \u003c 0.00 or a.''New Sales Credit Amount'' \u003e 0.00) or#(lf)(a.''Gross Dealer Concessions Amount'' \u003c 0.00 or a.''Gross Dealer Concessions Amount'' \u003e 0.00) or#(lf)(a.''Grid Credit Amount'' is not NULL))#(lf)and substring(a.''Employee Identifier'',1,2) = \u0027TS\u0027#(lf)and c.''Current Row Indicator'' =\u0027Y\u0027#(lf)and aa.''Current Row Indicator'' = \u0027Y\u0027#(lf)   and (  aa.''Organization Department Code'' \u003c\u003e \u00270383\u0027   #(lf)      or (a.''Reporting Roll Up Event Code'' \u003c\u003e\u0027REN\u0027#(lf)     and  (a.''Reporting Roll Up Event Code'' \u003c\u003e \u0027AB\u0027 or  ''Compensation Level 2 Product Character Code'' not in (\u0027RISK\u0027, \u0027ANN\u0027))#(lf)     and  a.''Financial Professional Revenue Hierarchy Level 2 Code'' \u003c\u003e (\u0027AB_MF_12B1\u0027)))#(lf)and a.''Source System Code Description'' in (\u0027Life and Annuity Trails Fact\u0027,\u0027Sales Metric Transaction\u0027,\u0027Sales Metric Adjustment\u0027)#(lf)#(lf)group by b.''Calendar Day Date'', b.''Distribution Performance Report Year Text'', b.''Distribution Performance Reporting Year Number'',#(lf)b.''Distribution Performance Reporting Year Week Number'', a.''Employee Identifier'', a.''Rollup Agent Identifier'',#(lf)b.''Distribution Performance Reporting Month Text'',#(lf)b.''Distribution Performance Reporting Week Text'',#(lf)b.''Distribution Performance Reporting Day Text'',#(lf)a.''Compensation Reporting Roll Up Name'',#(lf)a.''Compensation Level 5 Product Line Of Business Subgroup Code'',#(lf)a.''Reporting Roll Up Product Description'',#(lf)a.''Reporting Roll Up Event Description'',#(lf)a.''Compensation Level 2 Product Character Code''#(lf)UNION#(lf)select b.''Calendar Day Date'',#(lf)b.''Distribution Performance Report Year Text'',#(lf)b.''Distribution Performance Reporting Month Text'',#(lf)b.''Distribution Performance Reporting Week Text'',#(lf)b.''Distribution Performance Reporting Day Text'',#(lf)b.''Distribution Performance Reporting Year Number'',#(lf)b.''Distribution Performance Reporting Year Week Number'',#(lf)a.''Rollup Agent Identifier'' as ''Employee Identifier'',#(lf)a.''Rollup Agent Identifier'',#(lf)a.''Employee Identifier'' as ''Compensation Employee Identifier'',#(lf)a.''Compensation Reporting Roll Up Name'',#(lf)a.''Compensation Level 5 Product Line Of Business Subgroup Code'',#(lf)a.''Reporting Roll Up Product Description'',#(lf)a.''Reporting Roll Up Event Description'',#(lf)a.''Compensation Level 2 Product Character Code'',#(lf)case when a.''Employee Identifier'' = a.''Rollup Agent Identifier'' then \u0027Y\u0027#(lf)else \u0027N\u0027#(lf)end as CMPAGT_EQ_ROLLUP,#(lf)sum(a.''New Sales Credit Amount'') as ''New Sales Credit Amount'',#(lf)sum(a.''Gross Dealer Concessions Amount'') as ''Gross Dealer Concessions Amount'',#(lf)sum(a.''Grid Credit Amount'') as ''Grid Credit Amount''#(lf)from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Compensation and Sales Metrics Fact'' as a left join#(lf)''ENTERPRISE_EDW''.''PRESENTATION_01''.''Distribution Performance Dates Dimension'' as b#(lf)on a.''Distribution Performance Dates Surrogate Key''=b.''Date Surrogate Key'' left join#(lf)''ENTERPRISE_EDW''.''PRESENTATION_01''.''Conformed Contract Dimension Detail'' as c#(lf)on (a.''Contract Surrogate Key''=c.''Contract Surrogate Key''),#(lf)''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' as aa     #(lf)    #(lf)where a.''Rollup Agent Identifier'' = aa.''Employee Identifier''#(lf)and b.''Distribution Performance Reporting Year Number'' in (\u00272022\u0027,\u00272023\u0027,\u00272024\u0027)#(lf)and a.''Employee Identifier'' \u003c\u003e a.''Rollup Agent Identifier''#(lf)and ((a.''New Sales Credit Amount'' \u003c 0.00 or a.''New Sales Credit Amount'' \u003e 0.00) or#(lf)(a.''Gross Dealer Concessions Amount'' \u003c 0.00 or a.''Gross Dealer Concessions Amount'' \u003e 0.00) or#(lf)(a.''Grid Credit Amount'' is not NULL))#(lf)and substring(a.''Employee Identifier'',1,2) = \u0027TS\u0027#(lf)and c.''Current Row Indicator'' =\u0027Y\u0027#(lf)and aa.''Current Row Indicator'' = \u0027Y\u0027 #(lf)   and (  aa.''Organization Department Code'' \u003c\u003e \u00270383\u0027   #(lf)      or (a.''Reporting Roll Up Event Code'' \u003c\u003e\u0027REN\u0027#(lf)     and  (a.''Reporting Roll Up Event Code'' \u003c\u003e \u0027AB\u0027 or  ''Compensation Level 2 Product Character Code'' not in (\u0027RISK\u0027, \u0027ANN\u0027))#(lf)     and  a.''Financial Professional Revenue Hierarchy Level 2 Code'' \u003c\u003e (\u0027AB_MF_12B1\u0027)))#(lf)and a.''Source System Code Description'' in (\u0027Life and Annuity Trails Fact\u0027,\u0027Sales Metric Transaction\u0027,\u0027Sales Metric Adjustment\u0027)#(lf)#(lf)group by b.''Calendar Day Date'', b.''Distribution Performance Report Year Text'', b.''Distribution Performance Reporting Year Number'',#(lf)b.''Distribution Performance Reporting Year Week Number'', a.''Employee Identifier'', a.''Rollup Agent Identifier'',#(lf)a.''Compensation Reporting Roll Up Name'', a.''Compensation Level 5 Product Line Of Business Subgroup Code'',#(lf)a.''Reporting Roll Up Product Description'',#(lf)a.''Reporting Roll Up Event Description'',#(lf)a.''Compensation Level 2 Product Character Code'',#(lf)b.''Distribution Performance Reporting Month Text'',#(lf)b.''Distribution Performance Reporting Week Text'',#(lf)b.''Distribution Performance Reporting Day Text''', null, [EnableFolding=true]),    #'Added Conditional Column' = Table.AddColumn(Source, 'Product Category', each if [Compensation Level 2 Product Character Code] = 'ANN' then 'Annuity' else if [Compensation Level 2 Product Character Code] = 'INVEST' then 'Investments' else if [Compensation Level 2 Product Character Code] = 'BANK' then 'Investments' else if [Compensation Level 2 Product Character Code] = 'RISK' then 'Life \u0026 Health' else null),    Custom1 = Table.AddColumn(#'Added Conditional Column', 'TeamSale_Ind', each if [Employee Identifier] = [Compensation Employee Identifier] then 'Y' else 'N')in    Custom1"}]},{"name":"Product Sort","isHidden":false,"storageMode":"Import","columns":[{"name":"Metric","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Sort","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i45W8slMS1WIKTUwMDJT8EhNzCnJUNJRMlSK1YlWcszLK80sqQTyjcB8z7yy1OKS3NS8kmKgmLFSbCwA', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Metric = _t, Sort = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Metric', type text}, {'Sort', Int64.Type}})in    #'Changed Type'"}]},{"name":"Product","isHidden":false,"storageMode":"Import","columns":[{"name":"Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Product Sort Order","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('bZJLb8IwEIT/ipUzlSBAC8c+BEICgRTaHhAHkyxkVWcT+YHg33dtBymUXr/Z8WZms9sl32WtQCzxCEkvGST73i7JkE7MNhoqdJW4m0jDxCfhGbSR6oaHAX9JjfLAww/6KOhb0NWNjANZ1nQSAb9L7fFzwB9o5AEV2qtYUF5XXnkJygoKzHlUZK5pFFRAlrXJ/fpXIsdeFqZBmOEFig4d9Dt4QQX8kWMNi6riZdJ23xvE/BlYG5eLdWOxJuO1WMJrcUZTaw9GXSDmDgsoPB/f8ZmCi6cxelZCU4IOczHyHAgMhg0xZ6xEzOrcmfjgtP0qBbmvI+3fFkiy8hTu1p62RFDekqZtxkZGy7B9opGaI6urWEliK/eS57Uj6/eno9v1j8jKfxPjtlmSlCPff6MkEf9PXosBV846FmaO2PlkSj5mcMawb7r+Ad1+8+TBkHUMMfTaclt8xDMY6w/ipWHMv9XO+GxDzr7/BQ==', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Product = _t, #'Product Sort Order' = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Product', type text}, {'Product Sort Order', Int64.Type}})in    #'Changed Type'"}]},{"name":"Grid_Rev Event Sort","isHidden":false,"storageMode":"Import","columns":[{"name":"Event Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Event Sort Order","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i45WcsssKi5RiExNLFLSUTJUitWJVgpKzUstT8wpBgoYgQUcU8oyi/OLKhXcUlNBosZg0ZCixLzixOSSzPw8BafE4tQUoIwJRH1xcWoJXMwUakZWaXFJbmpeCVDITCk2FgA=', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [#'Event Description' = _t, #'Event Sort Order' = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Event Description', type text}, {'Event Sort Order', Int64.Type}})in    #'Changed Type'"}]},{"name":"Tenure","isHidden":false,"storageMode":"Import","columns":[{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CURR_ROW_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ADJ_SVC_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TENURE","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = DB2.Database('PODWH021:50000', 'PODWH021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT  TRIM(A.EMP_ID) AS EMP_ID, #(lf)        A.CURR_ROW_IND,#(lf)        A.ADJ_SVC_DT,#(lf)       (DAYS(CURRENT_DATE)-DAYS(a.adj_svc_dt) ) / 365.25 AS TENURE #(lf)          #(lf)      #(lf)   FROM HUMAN_RESOURCES.CNF_EMP_DIM_DTL_CURR_CFDL A #(lf)  WHERE A.EMP_STS_TYP_CDE IN (\u0027A\u0027,\u0027I\u0027,\u0027L\u0027,\u0027D\u0027,\u0027T\u0027,\u0027R\u0027)#(lf)    AND A.CURR_ROW_IND = \u0027Y\u0027          #(lf)    AND A.ADJ_SVC_DT is NOT NULL#(lf)   #(lf)ORDER BY A.EMP_ID'])in    Source"}]},{"name":"Large Ticket Data","isHidden":false,"storageMode":"Import","columns":[{"name":"Calendar Day Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Report Year Text","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Month Text","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Week Text","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Day Text","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Year Number","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Year Week Number","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Employee Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Rollup Agent Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Compensation Employee Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Compensation Reporting Roll Up Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Compensation Level 5 Product Line Of Business Subgroup Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Reporting Roll Up Product Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Reporting Roll Up Event Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Compensation Level 2 Product Character Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CMPAGT_EQ_ROLLUP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Organization Department Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Compensation Benefit Contract Number","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Customer ID Number","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Employee Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Grid Credit Base Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Agent Split Percent","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Grid Credit Split Base Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Grid Credit Rate","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Grid Credit Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Organization Zone Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RSC","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TYPE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"YTD Product Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"NPG Indicator","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Threshold","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Threshold Comparison Amt","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Above Threshold Indicator","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CustInfo.CUST_LGAL_FMT_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"First Sale Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"First Sale Indicator","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"NEW_CTRC","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Tenure.TENURE","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Horizon Contracts.BEN_CTRC_NBR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Product Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Above_Below","dataType":"String","isHidden":false,"expression":"if(\u0027Large Ticket Data\u0027[Above Threshold Indicator]='Yes','Above','Below')","columnType":"Calculated"}],"measures":[],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'SELECT#(lf)MAIN.*,#(lf)(CASE#(lf)WHEN MAIN.''Calendar Day Date''=NEW_CTRC_FLAG.''NEW_CTRC_DT'' THEN \u0027Yes\u0027#(lf)ELSE \u0027No\u0027#(lf)END) AS New_CTRC#(lf)#(lf)FROM#(lf)( #(lf)--------------------------ADDED ABOVE THIS LINE TO MAIN QUERY#(lf)#(lf)SELECT#(lf)WEEK.*,#(lf)''First Sale Date'',#(lf)''YTD Product Amount''#(lf)FROM#(lf)----------WEEK SUBQ#(lf)(#(lf)SELECT#(lf)SUBQ.*,#(lf)SALE_HIER_DIM.''Organization Zone Code'',#(lf)SALE_HIER_DIM.''Organization Department Code'' AS ''TAG'',#(lf)(CASE#(lf)WHEN ''Compensation Level 2 Product Character Code'' = \u0027ANN\u0027 AND SALE_HIER_DIM.''Organization Department Code''=\u00270115\u0027 THEN \u0027Christine Hulke\u0027#(lf)WHEN ''Compensation Level 2 Product Character Code'' = \u0027ANN\u0027 AND SALE_HIER_DIM.''Organization Department Code''=\u00270190\u0027 THEN \u0027Brady Berg\u0027#(lf)WHEN ''Compensation Level 2 Product Character Code'' = \u0027ANN\u0027 AND SALE_HIER_DIM.''Organization Department Code''=\u00270283\u0027 THEN \u0027Eric Adair\u0027#(lf)WHEN ''Compensation Level 2 Product Character Code'' = \u0027ANN\u0027 AND SALE_HIER_DIM.''Organization Department Code''=\u00270291\u0027 THEN \u0027Brady Berg\u0027#(lf)WHEN ''Compensation Level 2 Product Character Code'' = \u0027ANN\u0027 AND SALE_HIER_DIM.''Organization Department Code''=\u00270361\u0027 THEN \u0027Christine Hulke\u0027#(lf)WHEN ''Compensation Level 2 Product Character Code'' = \u0027ANN\u0027 AND SALE_HIER_DIM.''Organization Department Code''=\u00270383\u0027 THEN \u0027Nate Perbix\u0027#(lf)WHEN ''Compensation Level 2 Product Character Code'' = \u0027ANN\u0027 AND SALE_HIER_DIM.''Organization Department Code''=\u00270384\u0027 THEN \u0027Marc Hauser\u0027#(lf)WHEN ''Compensation Level 2 Product Character Code'' = \u0027ANN\u0027 AND SALE_HIER_DIM.''Organization Department Code''=\u00270435\u0027 THEN \u0027Eric Adair\u0027#(lf)WHEN ''Compensation Level 2 Product Character Code'' = \u0027ANN\u0027 AND SALE_HIER_DIM.''Organization Department Code''=\u00270525\u0027 THEN \u0027Marc Hauser\u0027#(lf)WHEN ''Compensation Level 2 Product Character Code'' = \u0027RISK\u0027 AND ''Compensation Reporting Roll Up Name''=\u0027DI\u0027 AND SALE_HIER_DIM.''Organization Department Code''=\u00270115\u0027 THEN \u0027Matt Eberle\u0027#(lf)WHEN ''Compensation Level 2 Product Character Code'' = \u0027RISK\u0027 AND ''Compensation Reporting Roll Up Name''=\u0027DI\u0027 AND SALE_HIER_DIM.''Organization Department Code''=\u00270190\u0027 THEN \u0027Matt Eberle\u0027#(lf)WHEN ''Compensation Level 2 Product Character Code'' = \u0027RISK\u0027 AND ''Compensation Reporting Roll Up Name''=\u0027DI\u0027 AND SALE_HIER_DIM.''Organization Department Code''=\u00270283\u0027 THEN \u0027Matt Eberle\u0027#(lf)WHEN ''Compensation Level 2 Product Character Code'' = \u0027RISK\u0027 AND ''Compensation Reporting Roll Up Name''=\u0027DI\u0027 AND SALE_HIER_DIM.''Organization Department Code''=\u00270291\u0027 THEN \u0027Matt Eberle\u0027#(lf)WHEN ''Compensation Level 2 Product Character Code'' = \u0027RISK\u0027 AND ''Compensation Reporting Roll Up Name''=\u0027DI\u0027 AND SALE_HIER_DIM.''Organization Department Code''=\u00270361\u0027 THEN \u0027Matt Eberle\u0027#(lf)WHEN ''Compensation Level 2 Product Character Code'' = \u0027RISK\u0027 AND ''Compensation Reporting Roll Up Name''=\u0027DI\u0027 AND SALE_HIER_DIM.''Organization Department Code''=\u00270383\u0027 THEN \u0027Matt Eberle\u0027#(lf)WHEN ''Compensation Level 2 Product Character Code'' = \u0027RISK\u0027 AND ''Compensation Reporting Roll Up Name''=\u0027DI\u0027 AND SALE_HIER_DIM.''Organization Department Code''=\u00270384\u0027 THEN \u0027Matt Eberle\u0027#(lf)WHEN ''Compensation Level 2 Product Character Code'' = \u0027RISK\u0027 AND ''Compensation Reporting Roll Up Name''=\u0027DI\u0027 AND SALE_HIER_DIM.''Organization Department Code''=\u00270435\u0027 THEN \u0027Matt Eberle\u0027#(lf)WHEN ''Compensation Level 2 Product Character Code'' = \u0027RISK\u0027 AND ''Compensation Reporting Roll Up Name''=\u0027DI\u0027 AND SALE_HIER_DIM.''Organization Department Code''=\u00270525\u0027 THEN \u0027Matt Eberle\u0027#(lf)WHEN ''Compensation Level 2 Product Character Code'' = \u0027RISK\u0027 AND ''Compensation Reporting Roll Up Name''=\u0027DI\u0027 AND SALE_HIER_DIM.''Organization Department Code''=\u00270716\u0027 THEN \u0027Matt Eberle\u0027#(lf)WHEN ''Compensation Level 2 Product Character Code'' = \u0027RISK\u0027 AND ''Compensation Reporting Roll Up Name''=\u0027LTC\u0027 AND SALE_HIER_DIM.''Organization Department Code''=\u00270115\u0027 THEN \u0027Janet Snead\u0027#(lf)WHEN ''Compensation Level 2 Product Character Code'' = \u0027RISK\u0027 AND ''Compensation Reporting Roll Up Name''=\u0027LTC\u0027 AND SALE_HIER_DIM.''Organization Department Code''=\u00270190\u0027 THEN \u0027Janet Snead\u0027#(lf)WHEN ''Compensation Level 2 Product Character Code'' = \u0027RISK\u0027 AND ''Compensation Reporting Roll Up Name''=\u0027LTC\u0027 AND SALE_HIER_DIM.''Organization Department Code''=\u00270283\u0027 THEN \u0027Kayla Tooke\u0027#(lf)WHEN ''Compensation Level 2 Product Character Code'' = \u0027RISK\u0027 AND ''Compensation Reporting Roll Up Name''=\u0027LTC\u0027 AND SALE_HIER_DIM.''Organization Department Code''=\u00270291\u0027 THEN \u0027Janet Snead\u0027#(lf)WHEN ''Compensation Level 2 Product Character Code'' = \u0027RISK\u0027 AND ''Compensation Reporting Roll Up Name''=\u0027LTC\u0027 AND SALE_HIER_DIM.''Organization Department Code''=\u00270361\u0027 THEN \u0027Kayla Tooke\u0027#(lf)WHEN ''Compensation Level 2 Product Character Code'' = \u0027RISK\u0027 AND ''Compensation Reporting Roll Up Name''=\u0027LTC\u0027 AND SALE_HIER_DIM.''Organization Department Code''=\u00270383\u0027 THEN \u0027Janet Snead\u0027#(lf)WHEN ''Compensation Level 2 Product Character Code'' = \u0027RISK\u0027 AND ''Compensation Reporting Roll Up Name''=\u0027LTC\u0027 AND SALE_HIER_DIM.''Organization Department Code''=\u00270384\u0027 THEN \u0027Janet Snead\u0027#(lf)WHEN ''Compensation Level 2 Product Character Code'' = \u0027RISK\u0027 AND ''Compensation Reporting Roll Up Name''=\u0027LTC\u0027 AND SALE_HIER_DIM.''Organization Department Code''=\u00270435\u0027 THEN \u0027Kayla Tooke\u0027#(lf)WHEN ''Compensation Level 2 Product Character Code'' = \u0027RISK\u0027 AND ''Compensation Reporting Roll Up Name''=\u0027LTC\u0027 AND SALE_HIER_DIM.''Organization Department Code''=\u00270525\u0027 THEN \u0027Kayla Tooke\u0027#(lf)WHEN ''Compensation Level 2 Product Character Code'' = \u0027RISK\u0027 AND ''Compensation Reporting Roll Up Name''=\u0027LTC\u0027 AND SALE_HIER_DIM.''Organization Department Code''=\u00270716\u0027 THEN \u0027Janet Snead\u0027#(lf)WHEN ''Compensation Level 2 Product Character Code'' = \u0027RISK\u0027 AND SALE_HIER_DIM.''Organization Department Code''=\u00270115\u0027 THEN \u0027Bridget Fallon\u0027#(lf)WHEN ''Compensation Level 2 Product Character Code'' = \u0027RISK\u0027 AND SALE_HIER_DIM.''Organization Department Code''=\u00270190\u0027 THEN \u0027Joe Hornyak\u0027#(lf)WHEN ''Compensation Level 2 Product Character Code'' = \u0027RISK\u0027 AND SALE_HIER_DIM.''Organization Department Code''=\u00270283\u0027 THEN \u0027Howie Frank\u0027#(lf)WHEN ''Compensation Level 2 Product Character Code'' = \u0027RISK\u0027 AND SALE_HIER_DIM.''Organization Department Code''=\u00270291\u0027 THEN \u0027Bridget Fallon\u0027#(lf)WHEN ''Compensation Level 2 Product Character Code'' = \u0027RISK\u0027 AND SALE_HIER_DIM.''Organization Department Code''=\u00270361\u0027 THEN \u0027Joe Hornyak\u0027#(lf)WHEN ''Compensation Level 2 Product Character Code'' = \u0027RISK\u0027 AND SALE_HIER_DIM.''Organization Department Code''=\u00270383\u0027 THEN \u0027Nate Perbix\u0027#(lf)WHEN ''Compensation Level 2 Product Character Code'' = \u0027RISK\u0027 AND SALE_HIER_DIM.''Organization Department Code''=\u00270384\u0027 THEN \u0027Christian Sweeney\u0027#(lf)WHEN ''Compensation Level 2 Product Character Code'' = \u0027RISK\u0027 AND SALE_HIER_DIM.''Organization Department Code''=\u00270435\u0027 THEN \u0027Howie Frank\u0027#(lf)WHEN ''Compensation Level 2 Product Character Code'' = \u0027RISK\u0027 AND SALE_HIER_DIM.''Organization Department Code''=\u00270525\u0027 THEN \u0027Christian Sweeney\u0027#(lf)ELSE \u0027\u0027#(lf)END) AS RSC,#(lf)(CASE#(lf)WHEN ''Compensation Level 2 Product Character Code'' = \u0027ANN\u0027 THEN \u0027Annuity\u0027#(lf)WHEN ''Compensation Level 2 Product Character Code'' = \u0027RISK\u0027 AND ''Compensation Reporting Roll Up Name''=\u0027DI\u0027 THEN \u0027DI\u0027#(lf)WHEN ''Compensation Level 2 Product Character Code'' = \u0027RISK\u0027 AND ''Compensation Reporting Roll Up Name''=\u0027LTC\u0027 AND LEFT(''Compensation Benefit Contract Number'',2)=\u0027CF\u0027 THEN \u0027CF\u0027#(lf)WHEN ''Compensation Level 2 Product Character Code'' = \u0027RISK\u0027 AND ''Compensation Reporting Roll Up Name''=\u0027LTC\u0027 THEN \u0027LTC\u0027#(lf)WHEN ''Compensation Level 2 Product Character Code'' = \u0027RISK\u0027 THEN \u0027Insurance\u0027#(lf) ELSE \u0027\u0027#(lf) END#(lf)) AS TYPE#(lf)FROM#(lf)(#(lf)---------------------------------Begin Subquery, added fields and Previous Week Filter, lines 104 and 174#(lf)select b.''Calendar Day Date'',#(lf)b.''Distribution Performance Report Year Text'',#(lf)b.''Distribution Performance Reporting Month Text'',#(lf)b.''Distribution Performance Reporting Week Text'',#(lf)b.''Distribution Performance Reporting Day Text'',#(lf)b.''Distribution Performance Reporting Year Number'',#(lf)b.''Distribution Performance Reporting Year Week Number'',#(lf)a.''Employee Identifier'',#(lf)a.''Rollup Agent Identifier'',#(lf)a.''Employee Identifier'' as ''Compensation Employee Identifier'',#(lf)a.''Compensation Reporting Roll Up Name'',#(lf)a.''Compensation Level 5 Product Line Of Business Subgroup Code'',#(lf)a.''Reporting Roll Up Product Description'',#(lf)a.''Reporting Roll Up Event Description'',#(lf)a.''Compensation Level 2 Product Character Code'',#(lf)case when a.''Employee Identifier'' = a.''Rollup Agent Identifier'' then \u0027Y\u0027#(lf)else \u0027N\u0027#(lf)end as CMPAGT_EQ_ROLLUP,#(lf)aa.''Organization Department Code'',#(lf)a.''Compensation Benefit Contract Number'',#(lf)a.''Customer ID Number'',#(lf)aa.''Employee Name'',#(lf)sum(a.''Grid Credit Base Amount'') as ''Grid Credit Base Amount'',#(lf)a.''Agent Split Percent'',#(lf)sum(a.''Grid Credit Split Base Amount'') as ''Grid Credit Split Base Amount'',#(lf)a.''Grid Credit Rate'',#(lf)sum(a.''Grid Credit Amount'') as ''Grid Credit Amount''#(lf)from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Compensation and Sales Metrics Fact'' as a left join#(lf)''ENTERPRISE_EDW''.''PRESENTATION_01''.''Distribution Performance Dates Dimension'' as b#(lf)on a.''Distribution Performance Dates Surrogate Key''=b.''Date Surrogate Key'' left join#(lf)''ENTERPRISE_EDW''.''PRESENTATION_01''.''Conformed Contract Dimension Detail'' as c#(lf)on (a.''Contract Surrogate Key''=c.''Contract Surrogate Key''),#(lf)''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' as aa      #(lf)where a.''Employee Identifier''= aa.''Employee Identifier'' #(lf)and b.''Distribution Performance Reporting Year Number'' in (\u00272022\u0027,\u00272023\u0027,\u00272024\u0027)#(lf)and ((a.''New Sales Credit Amount'' \u003c 0.00 or a.''New Sales Credit Amount'' \u003e 0.00) or#(lf)(a.''Gross Dealer Concessions Amount'' \u003c 0.00 or a.''Gross Dealer Concessions Amount'' \u003e 0.00) or#(lf)(a.''Grid Credit Amount'' is not NULL))#(lf)and substring(a.''Employee Identifier'',1,2) = \u0027TS\u0027#(lf)and c.''Current Row Indicator'' =\u0027Y\u0027#(lf)and aa.''Current Row Indicator'' = \u0027Y\u0027#(lf)   and (  aa.''Organization Department Code'' \u003c\u003e \u00270383\u0027   #(lf)      or (a.''Reporting Roll Up Event Code'' \u003c\u003e\u0027REN\u0027#(lf)     and  (a.''Reporting Roll Up Event Code'' \u003c\u003e \u0027AB\u0027 or  ''Compensation Level 2 Product Character Code'' not in (\u0027RISK\u0027, \u0027ANN\u0027))#(lf)     and  a.''Financial Professional Revenue Hierarchy Level 2 Code'' \u003c\u003e (\u0027AB_MF_12B1\u0027)))#(lf)and a.''Source System Code Description'' in (\u0027Sales Metric Transaction\u0027)#(lf)and b.''Distribution Performance Reporting Week Text''=\u0027PREVIOUS\u0027#(lf)#(lf)group by b.''Calendar Day Date'', b.''Distribution Performance Report Year Text'', b.''Distribution Performance Reporting Year Number'',#(lf)b.''Distribution Performance Reporting Year Week Number'', a.''Employee Identifier'', a.''Rollup Agent Identifier'',#(lf)b.''Distribution Performance Reporting Month Text'',#(lf)b.''Distribution Performance Reporting Week Text'',#(lf)b.''Distribution Performance Reporting Day Text'',#(lf)a.''Compensation Reporting Roll Up Name'',#(lf)a.''Compensation Level 5 Product Line Of Business Subgroup Code'',#(lf)a.''Reporting Roll Up Product Description'',#(lf)a.''Reporting Roll Up Event Description'',#(lf)a.''Compensation Level 2 Product Character Code'',#(lf)aa.''Organization Department Code'',#(lf)a.''Compensation Benefit Contract Number'',#(lf)a.''Customer ID Number'',#(lf)aa.''Employee Name'',#(lf)a.''Agent Split Percent'',#(lf)a.''Grid Credit Rate''#(lf)#(lf)UNION#(lf)#(lf)select b.''Calendar Day Date'',#(lf)b.''Distribution Performance Report Year Text'',#(lf)b.''Distribution Performance Reporting Month Text'',#(lf)b.''Distribution Performance Reporting Week Text'',#(lf)b.''Distribution Performance Reporting Day Text'',#(lf)b.''Distribution Performance Reporting Year Number'',#(lf)b.''Distribution Performance Reporting Year Week Number'',#(lf)a.''Rollup Agent Identifier'' as ''Employee Identifier'',#(lf)a.''Rollup Agent Identifier'',#(lf)a.''Employee Identifier'' as ''Compensation Employee Identifier'',#(lf)a.''Compensation Reporting Roll Up Name'',#(lf)a.''Compensation Level 5 Product Line Of Business Subgroup Code'',#(lf)a.''Reporting Roll Up Product Description'',#(lf)a.''Reporting Roll Up Event Description'',#(lf)a.''Compensation Level 2 Product Character Code'',#(lf)case when a.''Employee Identifier'' = a.''Rollup Agent Identifier'' then \u0027Y\u0027#(lf)else \u0027N\u0027#(lf)end as CMPAGT_EQ_ROLLUP,#(lf)aa.''Organization Department Code'',#(lf)a.''Compensation Benefit Contract Number'',#(lf)a.''Customer ID Number'',#(lf)aa.''Employee Name'',#(lf)#(lf)sum(a.''Grid Credit Base Amount'') as ''Grid Credit Base Amount'',#(lf)a.''Agent Split Percent'',#(lf)sum(a.''Grid Credit Split Base Amount'') as ''Grid Credit Split Base Amount'',#(lf)a.''Grid Credit Rate'',#(lf)sum(a.''Grid Credit Amount'') as ''Grid Credit Amount''#(lf)from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Compensation and Sales Metrics Fact'' as a left join#(lf)''ENTERPRISE_EDW''.''PRESENTATION_01''.''Distribution Performance Dates Dimension'' as b#(lf)on a.''Distribution Performance Dates Surrogate Key''=b.''Date Surrogate Key'' left join#(lf)''ENTERPRISE_EDW''.''PRESENTATION_01''.''Conformed Contract Dimension Detail'' as c#(lf)on (a.''Contract Surrogate Key''=c.''Contract Surrogate Key''),#(lf)''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' as aa     #(lf)    #(lf)where a.''Rollup Agent Identifier'' = aa.''Employee Identifier''#(lf)and b.''Distribution Performance Reporting Year Number'' in (\u00272022\u0027,\u00272023\u0027,\u00272024\u0027)#(lf)and a.''Employee Identifier'' \u003c\u003e a.''Rollup Agent Identifier''#(lf)and ((a.''New Sales Credit Amount'' \u003c 0.00 or a.''New Sales Credit Amount'' \u003e 0.00) or#(lf)(a.''Gross Dealer Concessions Amount'' \u003c 0.00 or a.''Gross Dealer Concessions Amount'' \u003e 0.00) or#(lf)(a.''Grid Credit Amount'' is not NULL))#(lf)and substring(a.''Employee Identifier'',1,2) = \u0027TS\u0027#(lf)and c.''Current Row Indicator'' =\u0027Y\u0027#(lf)and aa.''Current Row Indicator'' = \u0027Y\u0027 #(lf)   and (  aa.''Organization Department Code'' \u003c\u003e \u00270383\u0027   #(lf)      or (a.''Reporting Roll Up Event Code'' \u003c\u003e\u0027REN\u0027#(lf)     and  (a.''Reporting Roll Up Event Code'' \u003c\u003e \u0027AB\u0027 or  ''Compensation Level 2 Product Character Code'' not in (\u0027RISK\u0027, \u0027ANN\u0027))#(lf)     and  a.''Financial Professional Revenue Hierarchy Level 2 Code'' \u003c\u003e (\u0027AB_MF_12B1\u0027)))#(lf)and a.''Source System Code Description'' in (\u0027Sales Metric Transaction\u0027)#(lf)and b.''Distribution Performance Reporting Week Text''=\u0027PREVIOUS\u0027#(lf)#(lf)group by b.''Calendar Day Date'', b.''Distribution Performance Report Year Text'', b.''Distribution Performance Reporting Year Number'',#(lf)b.''Distribution Performance Reporting Year Week Number'', a.''Employee Identifier'', a.''Rollup Agent Identifier'',#(lf)a.''Compensation Reporting Roll Up Name'', a.''Compensation Level 5 Product Line Of Business Subgroup Code'',#(lf)a.''Reporting Roll Up Product Description'',#(lf)a.''Reporting Roll Up Event Description'',#(lf)a.''Compensation Level 2 Product Character Code'',#(lf)b.''Distribution Performance Reporting Month Text'',#(lf)b.''Distribution Performance Reporting Week Text'',#(lf)b.''Distribution Performance Reporting Day Text'',#(lf)aa.''Organization Department Code'',#(lf)a.''Compensation Benefit Contract Number'',#(lf)a.''Customer ID Number'',#(lf)a.''Agent Split Percent'',#(lf)a.''Grid Credit Rate'',#(lf)aa.''Employee Name''#(lf)-------------------------------END Subquery#(lf)) SUBQ#(lf)  LEFT JOIN#(lf)  (#(lf)    SELECT *#(lf)    FROM ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension''#(lf)    WHERE ''Current Row Indicator''=\u0027Y\u0027 AND (''Effective End Date'' = DATE_FROM_PARTS(9999,12,31) OR ''Effective End Date'' is null)#(lf)    ) SALE_HIER_DIM#(lf)    ON SUBQ.''Employee Identifier''=SALE_HIER_DIM.''Sales Hierarchy Identifier''#(lf))#(lf)---------END WEEK SUBQ#(lf)WEEK#(lf)LEFT JOIN#(lf)(#(lf)  SELECT#(lf)  ''Employee Identifier'',#(lf)  (CASE#(lf)WHEN ''Compensation Level 2 Product Character Code'' = \u0027ANN\u0027 THEN \u0027Annuity\u0027#(lf)WHEN ''Compensation Level 2 Product Character Code'' = \u0027RISK\u0027 AND ''Compensation Reporting Roll Up Name''=\u0027DI\u0027 THEN \u0027DI\u0027#(lf)WHEN ''Compensation Level 2 Product Character Code'' = \u0027RISK\u0027 AND ''Compensation Reporting Roll Up Name''=\u0027LTC\u0027 AND LEFT(''Compensation Benefit Contract Number'',2)=\u0027CF\u0027 THEN \u0027CF\u0027#(lf)WHEN ''Compensation Level 2 Product Character Code'' = \u0027RISK\u0027 AND ''Compensation Reporting Roll Up Name''=\u0027LTC\u0027 THEN \u0027LTC\u0027#(lf)WHEN ''Compensation Level 2 Product Character Code'' = \u0027RISK\u0027 THEN \u0027Insurance\u0027#(lf) ELSE \u0027\u0027#(lf) END#(lf)) AS TYPE,#(lf)  Min(''Calendar Day Date'') AS ''First Sale Date'',#(lf)  Sum(''Grid Credit Amount'') AS ''YTD Product Amount''#(lf)  FROM#(lf)  (#(lf)---------------------------------Begin Subquery, added fields and Previous Week Filter    #(lf)  select b.''Calendar Day Date'',#(lf)b.''Distribution Performance Report Year Text'',#(lf)b.''Distribution Performance Reporting Month Text'',#(lf)b.''Distribution Performance Reporting Week Text'',#(lf)b.''Distribution Performance Reporting Day Text'',#(lf)b.''Distribution Performance Reporting Year Number'',#(lf)b.''Distribution Performance Reporting Year Week Number'',#(lf)a.''Employee Identifier'',#(lf)a.''Rollup Agent Identifier'',#(lf)a.''Employee Identifier'' as ''Compensation Employee Identifier'',#(lf)a.''Compensation Reporting Roll Up Name'',#(lf)a.''Compensation Level 5 Product Line Of Business Subgroup Code'',#(lf)a.''Reporting Roll Up Product Description'',#(lf)a.''Reporting Roll Up Event Description'',#(lf)a.''Compensation Level 2 Product Character Code'',#(lf)case when a.''Employee Identifier'' = a.''Rollup Agent Identifier'' then \u0027Y\u0027#(lf)else \u0027N\u0027#(lf)end as CMPAGT_EQ_ROLLUP,#(lf)aa.''Organization Department Code'',#(lf)a.''Compensation Benefit Contract Number'',#(lf)a.''Customer ID Number'',#(lf)aa.''Employee Name'',#(lf)sum(a.''Grid Credit Base Amount'') as ''Grid Credit Base Amount'',#(lf)a.''Agent Split Percent'',#(lf)sum(a.''Grid Credit Split Base Amount'') as ''Grid Credit Split Base Amount'',#(lf)a.''Grid Credit Rate'',#(lf)sum(a.''Grid Credit Amount'') as ''Grid Credit Amount''#(lf)from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Compensation and Sales Metrics Fact'' as a left join#(lf)''ENTERPRISE_EDW''.''PRESENTATION_01''.''Distribution Performance Dates Dimension'' as b#(lf)on a.''Distribution Performance Dates Surrogate Key''=b.''Date Surrogate Key'' left join#(lf)''ENTERPRISE_EDW''.''PRESENTATION_01''.''Conformed Contract Dimension Detail'' as c#(lf)on (a.''Contract Surrogate Key''=c.''Contract Surrogate Key''),#(lf)''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' as aa      #(lf)where a.''Employee Identifier''= aa.''Employee Identifier'' #(lf)and b.''Distribution Performance Reporting Year Number'' in (\u00272022\u0027,\u00272023\u0027,\u00272024\u0027)#(lf)and ((a.''New Sales Credit Amount'' \u003c 0.00 or a.''New Sales Credit Amount'' \u003e 0.00) or#(lf)(a.''Gross Dealer Concessions Amount'' \u003c 0.00 or a.''Gross Dealer Concessions Amount'' \u003e 0.00) or#(lf)(a.''Grid Credit Amount'' is not NULL))#(lf)and substring(a.''Employee Identifier'',1,2) = \u0027TS\u0027#(lf)and c.''Current Row Indicator'' =\u0027Y\u0027#(lf)and aa.''Current Row Indicator'' = \u0027Y\u0027#(lf)   and (  aa.''Organization Department Code'' \u003c\u003e \u00270383\u0027   #(lf)      or (a.''Reporting Roll Up Event Code'' \u003c\u003e\u0027REN\u0027#(lf)     and  (a.''Reporting Roll Up Event Code'' \u003c\u003e \u0027AB\u0027 or  ''Compensation Level 2 Product Character Code'' not in (\u0027RISK\u0027, \u0027ANN\u0027))#(lf)     and  a.''Financial Professional Revenue Hierarchy Level 2 Code'' \u003c\u003e (\u0027AB_MF_12B1\u0027)))#(lf)and a.''Source System Code Description'' in (\u0027Sales Metric Transaction\u0027)#(lf)and b.''Distribution Performance Report Year Text''=\u0027CURRENT\u0027#(lf)#(lf)group by b.''Calendar Day Date'', b.''Distribution Performance Report Year Text'', b.''Distribution Performance Reporting Year Number'',#(lf)b.''Distribution Performance Reporting Year Week Number'', a.''Employee Identifier'', a.''Rollup Agent Identifier'',#(lf)b.''Distribution Performance Reporting Month Text'',#(lf)b.''Distribution Performance Reporting Week Text'',#(lf)b.''Distribution Performance Reporting Day Text'',#(lf)a.''Compensation Reporting Roll Up Name'',#(lf)a.''Compensation Level 5 Product Line Of Business Subgroup Code'',#(lf)a.''Reporting Roll Up Product Description'',#(lf)a.''Reporting Roll Up Event Description'',#(lf)a.''Compensation Level 2 Product Character Code'',#(lf)aa.''Organization Department Code'',#(lf)a.''Compensation Benefit Contract Number'',#(lf)a.''Customer ID Number'',#(lf)aa.''Employee Name'',#(lf)a.''Agent Split Percent'',#(lf)a.''Grid Credit Rate''#(lf)#(lf)UNION#(lf)#(lf)select b.''Calendar Day Date'',#(lf)b.''Distribution Performance Report Year Text'',#(lf)b.''Distribution Performance Reporting Month Text'',#(lf)b.''Distribution Performance Reporting Week Text'',#(lf)b.''Distribution Performance Reporting Day Text'',#(lf)b.''Distribution Performance Reporting Year Number'',#(lf)b.''Distribution Performance Reporting Year Week Number'',#(lf)a.''Rollup Agent Identifier'' as ''Employee Identifier'',#(lf)a.''Rollup Agent Identifier'',#(lf)a.''Employee Identifier'' as ''Compensation Employee Identifier'',#(lf)a.''Compensation Reporting Roll Up Name'',#(lf)a.''Compensation Level 5 Product Line Of Business Subgroup Code'',#(lf)a.''Reporting Roll Up Product Description'',#(lf)a.''Reporting Roll Up Event Description'',#(lf)a.''Compensation Level 2 Product Character Code'',#(lf)case when a.''Employee Identifier'' = a.''Rollup Agent Identifier'' then \u0027Y\u0027#(lf)else \u0027N\u0027#(lf)end as CMPAGT_EQ_ROLLUP,#(lf)aa.''Organization Department Code'',#(lf)a.''Compensation Benefit Contract Number'',#(lf)a.''Customer ID Number'',#(lf)aa.''Employee Name'',#(lf)#(lf)sum(a.''Grid Credit Base Amount'') as ''Grid Credit Base Amount'',#(lf)a.''Agent Split Percent'',#(lf)sum(a.''Grid Credit Split Base Amount'') as ''Grid Credit Split Base Amount'',#(lf)a.''Grid Credit Rate'',#(lf)sum(a.''Grid Credit Amount'') as ''Grid Credit Amount''#(lf)from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Compensation and Sales Metrics Fact'' as a left join#(lf)''ENTERPRISE_EDW''.''PRESENTATION_01''.''Distribution Performance Dates Dimension'' as b#(lf)on a.''Distribution Performance Dates Surrogate Key''=b.''Date Surrogate Key'' left join#(lf)''ENTERPRISE_EDW''.''PRESENTATION_01''.''Conformed Contract Dimension Detail'' as c#(lf)on (a.''Contract Surrogate Key''=c.''Contract Surrogate Key''),#(lf)''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' as aa     #(lf)    #(lf)where a.''Rollup Agent Identifier'' = aa.''Employee Identifier''#(lf)and b.''Distribution Performance Reporting Year Number'' in (\u00272022\u0027,\u00272023\u0027,\u00272024\u0027)#(lf)and a.''Employee Identifier'' \u003c\u003e a.''Rollup Agent Identifier''#(lf)and ((a.''New Sales Credit Amount'' \u003c 0.00 or a.''New Sales Credit Amount'' \u003e 0.00) or#(lf)(a.''Gross Dealer Concessions Amount'' \u003c 0.00 or a.''Gross Dealer Concessions Amount'' \u003e 0.00) or#(lf)(a.''Grid Credit Amount'' is not NULL))#(lf)and substring(a.''Employee Identifier'',1,2) = \u0027TS\u0027#(lf)and c.''Current Row Indicator'' =\u0027Y\u0027#(lf)and aa.''Current Row Indicator'' = \u0027Y\u0027 #(lf)   and (  aa.''Organization Department Code'' \u003c\u003e \u00270383\u0027   #(lf)      or (a.''Reporting Roll Up Event Code'' \u003c\u003e\u0027REN\u0027#(lf)     and  (a.''Reporting Roll Up Event Code'' \u003c\u003e \u0027AB\u0027 or  ''Compensation Level 2 Product Character Code'' not in (\u0027RISK\u0027, \u0027ANN\u0027))#(lf)     and  a.''Financial Professional Revenue Hierarchy Level 2 Code'' \u003c\u003e (\u0027AB_MF_12B1\u0027)))#(lf)and a.''Source System Code Description'' in (\u0027Sales Metric Transaction\u0027)#(lf)and b.''Distribution Performance Report Year Text''=\u0027CURRENT\u0027#(lf)#(lf)group by b.''Calendar Day Date'', b.''Distribution Performance Report Year Text'', b.''Distribution Performance Reporting Year Number'',#(lf)b.''Distribution Performance Reporting Year Week Number'', a.''Employee Identifier'', a.''Rollup Agent Identifier'',#(lf)a.''Compensation Reporting Roll Up Name'', a.''Compensation Level 5 Product Line Of Business Subgroup Code'',#(lf)a.''Reporting Roll Up Product Description'',#(lf)a.''Reporting Roll Up Event Description'',#(lf)a.''Compensation Level 2 Product Character Code'',#(lf)b.''Distribution Performance Reporting Month Text'',#(lf)b.''Distribution Performance Reporting Week Text'',#(lf)b.''Distribution Performance Reporting Day Text'',#(lf)aa.''Organization Department Code'',#(lf)a.''Compensation Benefit Contract Number'',#(lf)a.''Customer ID Number'',#(lf)a.''Agent Split Percent'',#(lf)a.''Grid Credit Rate'',#(lf)aa.''Employee Name''#(lf)    ---------------------------------End Subquery#(lf)  )#(lf)  GROUP BY#(lf)  ''Employee Identifier'',#(lf)  (CASE#(lf)WHEN ''Compensation Level 2 Product Character Code'' = \u0027ANN\u0027 THEN \u0027Annuity\u0027#(lf)WHEN ''Compensation Level 2 Product Character Code'' = \u0027RISK\u0027 AND ''Compensation Reporting Roll Up Name''=\u0027DI\u0027 THEN \u0027DI\u0027#(lf)WHEN ''Compensation Level 2 Product Character Code'' = \u0027RISK\u0027 AND ''Compensation Reporting Roll Up Name''=\u0027LTC\u0027 AND LEFT(''Compensation Benefit Contract Number'',2)=\u0027CF\u0027 THEN \u0027CF\u0027#(lf)WHEN ''Compensation Level 2 Product Character Code'' = \u0027RISK\u0027 AND ''Compensation Reporting Roll Up Name''=\u0027LTC\u0027 THEN \u0027LTC\u0027#(lf)WHEN ''Compensation Level 2 Product Character Code'' = \u0027RISK\u0027 THEN \u0027Insurance\u0027#(lf) ELSE \u0027\u0027#(lf) END#(lf))#(lf)) YTD_Totals#(lf) ON (YTD_Totals.''Employee Identifier''=WEEK.''Employee Identifier'' AND YTD_Totals.TYPE=WEEK.TYPE)#(lf)#(lf)--------------------------ADDED BELOW THIS LINE TO MAIN QUERY#(lf)) MAIN#(lf)LEFT JOIN#(lf)(#(lf)SELECT#(lf)''Compensation Benefit Contract Number'',#(lf)Min(''Process Date'') AS ''NEW_CTRC_DT''#(lf)FROM#(lf)''ENTERPRISE_EDW''.''PRESENTATION_01''.''Compensation and Sales Metrics Fact''#(lf)GROUP BY ''Compensation Benefit Contract Number''#(lf)HAVING Min(''Process Date'')\u003e(CURRENT_DATE-14)#(lf)) NEW_CTRC_FLAG#(lf)ON NEW_CTRC_FLAG.''Compensation Benefit Contract Number''=MAIN.''Compensation Benefit Contract Number''', null, [EnableFolding=true]),    #'Filtered Rows' = Table.SelectRows(Source, each ([TYPE] \u003c\u003e '')),    #'Added Market' = Table.AddColumn(#'Filtered Rows', 'Market', each Text.End([Organization Zone Code],2)),    #'Added NPG Indicator' = Table.AddColumn(#'Added Market', 'NPG Indicator', each if [Market] = '98' or [Market] = '99' then 'Yes' else 'No'),    #'Added Threshold Amount' = Table.AddColumn(#'Added NPG Indicator', 'Threshold', each if [TYPE] = 'DI' then 250 else if [TYPE] = 'LTC' then 100 else if [TYPE] = 'Insurance' then 2000 else if [TYPE] = 'Annuity' then 25000 else -999999999),    #'Added Comparison Amount' = Table.AddColumn(#'Added Threshold Amount', 'Threshold Comparison Amt', each if [TYPE] = 'Annuity' then [Grid Credit Base Amount] else [Grid Credit Amount]),    #'Added Above Threshold Indicator' = Table.AddColumn(#'Added Comparison Amount', 'Above Threshold Indicator', each if [Threshold Comparison Amt]\u003e[Threshold] then 'Yes' else 'No'),    #'Merged Queries' = Table.NestedJoin(#'Added Above Threshold Indicator', {'Customer ID Number'}, CustInfo, {'CUST_ID_NBR'}, 'CustInfo', JoinKind.LeftOuter),    #'Expanded CustInfo' = Table.ExpandTableColumn(#'Merged Queries', 'CustInfo', {'CUST_LGAL_FMT_NM'}, {'CustInfo.CUST_LGAL_FMT_NM'}),    #'Added Conditional Column' = Table.AddColumn(#'Expanded CustInfo', 'First Sale Indicator', each if [First Sale Date] = [Calendar Day Date] then 'Yes' else 'No'),    #'Merged Queries1' = Table.NestedJoin(#'Added Conditional Column', {'Employee Identifier'}, Tenure, {'EMP_ID'}, 'Tenure', JoinKind.LeftOuter),    #'Expanded Tenure' = Table.ExpandTableColumn(#'Merged Queries1', 'Tenure', {'TENURE'}, {'Tenure.TENURE'}),    #'Merged Queries2' = Table.NestedJoin(#'Expanded Tenure', {'Compensation Benefit Contract Number'}, #'Horizon Contracts', {'BEN_CTRC_NBR'}, 'Horizon Contracts', JoinKind.LeftOuter),    #'Expanded Horizon Contracts' = Table.ExpandTableColumn(#'Merged Queries2', 'Horizon Contracts', {'BEN_CTRC_NBR'}, {'Horizon Contracts.BEN_CTRC_NBR'}),    #'Added Custom' = Table.AddColumn(#'Expanded Horizon Contracts', 'Product Type', each if [Compensation Level 5 Product Line Of Business Subgroup Code]='UL' then (if [Horizon Contracts.BEN_CTRC_NBR] is null then 'UL' else 'UL-Horizon') else [Compensation Level 5 Product Line Of Business Subgroup Code])in    #'Added Custom'"}]},{"name":"Horizon Contracts","isHidden":false,"storageMode":"Import","columns":[{"name":"BEN_CTRC_NBR","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = DB2.Database('PODWH021:50000', 'PODWH021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT Trim(A.BEN_CTRC_NBR) AS BEN_CTRC_NBR#(lf)  FROM CONTRACT.CNF_CONTRACT_DIM_DTL_RSTR A,#(lf)       MEMBER.CUST_CTRC_OWNR_CURR_RSTR B LEFT JOIN#(lf)       MEMBER.ITGR_IDVL_ALL_CURR_RSTR C#(lf)     ON B.CUST_ID_NBR=C.CUST_ID_NBR  #(lf) WHERE A.CURR_ROW_IND=\u0027Y\u0027#(lf)   AND A.CTRC_SK=B.CTRC_SK#(lf)   AND B.CNRN_OWNR_TYP_CDE=\u0027PMOR\u0027#(lf)   AND a.PROD_PLAN_DSCR=\u0027Horizon Insurance\u0027#(lf)   and A.CTRC_TRMN_DT is null#(lf)   and (prod_plan_cde in (\u002702000\u0027,\u002702100\u0027) and#(lf)       (ctrc_iss_dt \u003e= DATE(\u00271985-01-01\u0027) and ctrc_iss_dt \u003c= DATE(\u00271988-02-29\u0027))) #(lf)UNION ALL#(lf)SELECT Trim(A.BEN_CTRC_NBR) AS BEN_CTRC_NBR#(lf)  FROM CONTRACT.CNF_CONTRACT_DIM_DTL_RSTR A,#(lf)       MEMBER.CUST_CTRC_OWNR_CURR_RSTR B LEFT JOIN#(lf)       MEMBER.ITGR_IDVL_ALL_CURR_RSTR C#(lf)     ON B.CUST_ID_NBR=C.CUST_ID_NBR  #(lf) WHERE A.CURR_ROW_IND=\u0027Y\u0027#(lf)   AND A.CTRC_SK=B.CTRC_SK#(lf)   AND B.CNRN_OWNR_TYP_CDE=\u0027PMOR\u0027#(lf)   AND a.PROD_PLAN_DSCR=\u0027Horizon Insurance\u0027#(lf)   and A.CTRC_TRMN_DT is null#(lf)   and (prod_plan_cde in (\u002702000\u0027,\u002702100\u0027) and#(lf)       (ctrc_iss_dt \u003e= DATE(\u00271985-01-01\u0027) and ctrc_iss_dt \u003c= DATE(\u00271988-02-29\u0027)))']),    #'Removed Duplicates' = Table.Distinct(Source)in    #'Removed Duplicates'"}]},{"name":"Role Level Security","isHidden":false,"storageMode":"Import","columns":[{"name":"EMPLOYEE_SK","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"EMPLOYEE_TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMPLOYEE_EMAIL","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"REPORT_TO_EMAIL","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"REPORT_TO_SK","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"REPORT_TO_TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"WRKR_RPT_HIER_SRC_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTL_DATA_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SFRC_TEAM_PRPS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RSA_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RSA_TEAM_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SFRC_TEAM_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CRET_USER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CRET_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"LST_UPDT_USER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LST_UPDT_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Department Number","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Department Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"AD Group","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"HO_Email","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = PowerBI.Dataflows(null),    #'f7efdfeb-73c5-4a9b-ab78-f9370190eded' = Source{[workspaceId='f7efdfeb-73c5-4a9b-ab78-f9370190eded']}[Data],    #'a9b06e96-a67b-4f28-b939-3e1ca1047bd2' = #'f7efdfeb-73c5-4a9b-ab78-f9370190eded'{[dataflowId='a9b06e96-a67b-4f28-b939-3e1ca1047bd2']}[Data],    #'Role Level Security1' = #'a9b06e96-a67b-4f28-b939-3e1ca1047bd2'{[entity='Role Level Security']}[Data]in    #'Role Level Security1'"}]},{"name":"BestDay","isHidden":false,"storageMode":"Import","columns":[{"name":"What\u0027s New Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Alert Message","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//Shared//Public//DI and BI//Field Reporting//What\u0027s New and Alert Message//What\u0027s New and Alert Message.xlsx'), null, true),    BestDay_Sheet = Source{[Item='BestDay',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(BestDay_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Alert Message', type text}, {'What\u0027s New Description', type text}})in    #'Changed Type'"}]}],"expressions":[{"name":"Query1","expression":"let    Source = DB2.Database('PODWH021:50000', 'PODWH021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='WITH fp_metrics as (#(lf)#(lf)select#(lf)  CAD.EMP_ID,#(lf)  DT.CAL_DAY_DT,#(lf)  sum(SF.NEW_SC_AMT) as NSC,#(lf)  sum(SF.GDC_AMT) as GDC#(lf)  #(lf)from SEMANTIC.SALES_TRANSACTION_FACT SF#(lf)  inner join SEMANTIC.COMPENSATION_AGENT_DIMENSION CAD on (CAD.CAGT_DIM_SK = SF.CAGT_DIM_CURR_SK)#(lf)  inner join COMMON.DTRB_PERF_DATES DT on (DT.DT_SK = SF.PROC_DT_SK)#(lf)where#(lf)  --CAD.EMP_ID in (\u0027TS66982\u0027,\u0027TS11113\u0027)#(lf)  year(DT.CAL_DAY_DT) \u003e= Year(current_date) -1#(lf)group by#(lf)  CAD.EMP_ID,#(lf)  DT.CAL_DAY_DT#(lf)order by DT.CAL_DAY_DT desc#(lf))#(lf)#(lf)  select #(lf)  x.EMP_ID,#(lf)  x.CAL_DAY_DT,#(lf)  x.NSC,#(lf)  x.GDC,#(lf)  x.NSC_YTD,#(lf)  y.NSC_PY_YTD,#(lf)  x.GDC_YTD,#(lf)  y.GDC_PY_YTD,#(lf)  x.NSC_YR_TOT,#(lf)  x.GDC_YR_TOT,#(lf)  y.NSC_PY_TOT,#(lf)  y.GDC_PY_TOT#(lf)  from #(lf)  (#(lf)  Select#(lf)    EMP_ID,#(lf)    CAL_DAY_DT,#(lf)    NSC,#(lf)    GDC,#(lf)    sum(NSC) over (partition by year(CAL_DAY_DT),EMP_ID order by EMP_ID,CAL_DAY_DT) as NSC_YTD,#(lf)    sum(NSC) over(Partition by EMP_ID, year(CAL_DAY_DT)) as NSC_YR_TOT,#(lf)    sum(GDC) over (partition by year(CAL_DAY_DT),EMP_ID order by EMP_ID,CAL_DAY_DT) as GDC_YTD,#(lf)    sum(GDC) over(Partition by EMP_ID, year(CAL_DAY_DT)) as GDC_YR_TOT#(lf)  FROM fp_metrics#(lf)  WHERE year(CAL_DAY_DT) = year(current_date)#(lf))x#(lf)inner join #(lf)(#(lf)  Select#(lf)    EMP_ID,#(lf)    CAL_DAY_DT,#(lf)    NSC,#(lf)    GDC,#(lf)    sum(NSC) over (partition by year(CAL_DAY_DT),EMP_ID order by EMP_ID,CAL_DAY_DT) as NSC_PY_YTD,#(lf)    sum(NSC) over(Partition by EMP_ID, year(CAL_DAY_DT)) as NSC_PY_TOT,#(lf)    sum(GDC) over (partition by year(CAL_DAY_DT),EMP_ID order by EMP_ID,CAL_DAY_DT) as GDC_PY_YTD,#(lf)    sum(GDC) over(Partition by EMP_ID, year(CAL_DAY_DT)) as GDC_PY_TOT#(lf)  FROM fp_metrics#(lf)WHERE year(CAL_DAY_DT) = year(current_date)-1#(lf))#(lf)y on (x.EMP_ID = y.EMP_ID and month(x.CAL_DAY_DT) = month(y.CAL_DAY_DT) and day(x.CAL_DAY_DT) = day(y.CAL_DAY_DT))'])in    Source"},{"name":"NSCGDC-del","expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PERSIST_WH'){[Name='ENTERPRISE_EDW']}[Data], 'select b.''Calendar Day Date'',#(lf)       b.''Distribution Performance Report Year Text'',#(lf)       b.''Distribution Performance Reporting Year Number'',#(lf)       b.''Distribution Performance Reporting Year Week Number'',#(lf)       a.''Employee Identifier'',#(lf)       a.''Rollup Agent Identifier'',#(lf)       a.''Employee Identifier'' as ''Compensation Employee Identifier'',#(lf)       a.''Compensation Reporting Roll Up Name'',#(lf)       a.''Compensation Level 5 Product Line Of Business Subgroup Code'',#(lf)       --a.''Financial Professional Association Team ID'',#(lf)       --a.''Financial Professional Association Team Name'',#(lf)       case when a.''Employee Identifier'' = a.''Rollup Agent Identifier'' then \u0027Y\u0027#(lf)         else \u0027N\u0027#(lf)       end as CMPAGT_EQ_ROLLUP,#(lf)       sum(a.''New Sales Credit Amount'') as ''New Sales Credit Amount'',#(lf)       sum(a.''Gross Dealer Concessions Amount'') as ''Gross Dealer Concessions Amount''#(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Compensation and Sales Metrics Fact'' as a left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Distribution Performance Dates Dimension'' as b#(lf)    on a.''Distribution Performance Dates Surrogate Key''=b.''Date Surrogate Key''  #(lf) where b.''Distribution Performance Reporting Year Number'' in (\u00272020\u0027,\u00272021\u0027)  #(lf)   and ((a.''New Sales Credit Amount'' \u003c 0.00 or a.''New Sales Credit Amount'' \u003e 0.00) or#(lf)        (a.''Gross Dealer Concessions Amount'' \u003c 0.00 or a.''Gross Dealer Concessions Amount'' \u003e 0.00))#(lf)   and substring(a.''Employee Identifier'',1,2) = \u0027TS\u0027#(lf) group by b.''Calendar Day Date'', b.''Distribution Performance Report Year Text'', b.''Distribution Performance Reporting Year Number'',#(lf)          b.''Distribution Performance Reporting Year Week Number'', a.''Employee Identifier'', a.''Rollup Agent Identifier'',#(lf)          a.''Compensation Reporting Roll Up Name'',#(lf)          a.''Compensation Level 5 Product Line Of Business Subgroup Code''#(lf)--, a.''Financial Professional Association Team ID'', #(lf)        --  a.''Financial Professional Association Team Name''#(lf)            #(lf)UNION#(lf)select b.''Calendar Day Date'',#(lf)       b.''Distribution Performance Report Year Text'',#(lf)       b.''Distribution Performance Reporting Year Number'',#(lf)       b.''Distribution Performance Reporting Year Week Number'',#(lf)       a.''Employee Identifier'' as ''Compensation Employee Identifier'',#(lf)       a.''Rollup Agent Identifier'',#(lf)       a.''Rollup Agent Identifier'' as ''Employee Identifier'',#(lf)       a.''Compensation Reporting Roll Up Name'',#(lf)       a.''Compensation Level 5 Product Line Of Business Subgroup Code'',#(lf)     --  a.''Financial Professional Association Team ID'',#(lf)     --  a.''Financial Professional Association Team Name'',#(lf)       case when a.''Employee Identifier'' = a.''Rollup Agent Identifier'' then \u0027Y\u0027#(lf)         else \u0027N\u0027#(lf)       end as CMPAGT_EQ_ROLLUP,#(lf)       sum(a.''New Sales Credit Amount'') as ''New Sales Credit Amount'',#(lf)       sum(a.''Gross Dealer Concessions Amount'') as ''Gross Dealer Concessions Amount''#(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Compensation and Sales Metrics Fact'' as a left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Distribution Performance Dates Dimension'' as b#(lf)    on a.''Distribution Performance Dates Surrogate Key''=b.''Date Surrogate Key''  #(lf) where b.''Distribution Performance Reporting Year Number'' in (\u00272020\u0027,\u00272021\u0027)  #(lf)   and a.''Employee Identifier'' \u003c\u003e a.''Rollup Agent Identifier''#(lf)   and ((a.''New Sales Credit Amount'' \u003c 0.00 or a.''New Sales Credit Amount'' \u003e 0.00) or#(lf)        (a.''Gross Dealer Concessions Amount'' \u003c 0.00 or a.''Gross Dealer Concessions Amount'' \u003e 0.00))#(lf)   and substring(a.''Employee Identifier'',1,2) = \u0027TS\u0027#(lf) group by b.''Calendar Day Date'', b.''Distribution Performance Report Year Text'', b.''Distribution Performance Reporting Year Number'',#(lf)          b.''Distribution Performance Reporting Year Week Number'', a.''Employee Identifier'', a.''Rollup Agent Identifier'',#(lf)          a.''Compensation Reporting Roll Up Name'', a.''Compensation Level 5 Product Line Of Business Subgroup Code'' #(lf)         -- a.''Financial Professional Association Team ID'', a.''Financial Professional Association Team Name''', null, [EnableFolding=true]),    #'Replaced Value' = Table.ReplaceValue(Source,null,'',Replacer.ReplaceValue,{'Financial Professional Association Team ID'}),    #'Replaced Value1' = Table.ReplaceValue(#'Replaced Value',null,'',Replacer.ReplaceValue,{'Financial Professional Association Team Name'})in    #'Replaced Value1'"}],"roles":[{"name":"COE","modelPermission":"Read","members":[{"memberName":"obj:2f621ad2-0668-4906-bf26-4d5ce281db46@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"2f621ad2-0668-4906-bf26-4d5ce281db46","memberType":"Group","identityProvider":"AzureAD"}],"tablePermissions":[{"name":"Role Level Security","filterExpression":"[AD Group] \u003c\u003e 'PBI_FLD_RPTG_COE'"}]},{"name":"Field Leader RFO","modelPermission":"Read","members":[{"memberName":"obj:a9d8eb7f-8e75-4e5e-b329-caf9fcffa9ea@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"a9d8eb7f-8e75-4e5e-b329-caf9fcffa9ea","memberType":"Group","identityProvider":"AzureAD"},{"memberName":"obj:de18b88a-5b86-4d5a-bc53-8523bc34bc5c@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"de18b88a-5b86-4d5a-bc53-8523bc34bc5c","memberType":"Group","identityProvider":"AzureAD"},{"memberName":"obj:bc106c61-ca17-4fc1-9713-5893454f8368@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"bc106c61-ca17-4fc1-9713-5893454f8368","memberType":"Group","identityProvider":"AzureAD"}],"tablePermissions":[{"name":"Role Level Security","filterExpression":"[Department Number] = lookupvalue([Department Number],[REPORT_TO_EMAIL],username())"}]},{"name":"HomeOffice","modelPermission":"Read","members":[{"memberName":"obj:0d216a03-5ecb-4979-be8e-7c3904c3a79e@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"0d216a03-5ecb-4979-be8e-7c3904c3a79e","memberType":"Group","identityProvider":"AzureAD"},{"memberName":"obj:8fda22c8-bc4a-4aba-bdea-045657fd23df@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"8fda22c8-bc4a-4aba-bdea-045657fd23df","memberType":"Group","identityProvider":"AzureAD"}],"tablePermissions":[{"name":"Role Level Security","filterExpression":"[AD Group] \u003c\u003e 'PBI_FLD_RPTG_HO'"}]},{"name":"TFGT","modelPermission":"Read","members":[{"memberName":"obj:8938cc69-7a18-41b5-a42d-2dce2ea2a893@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"8938cc69-7a18-41b5-a42d-2dce2ea2a893","memberType":"Group","identityProvider":"AzureAD"}],"tablePermissions":[{"name":"Role Level Security","filterExpression":"IFERROR(SEARCH(USERNAME(),[REPORT_TO_EMAIL]),-1)\u003e0"}]}],"configuredBy":"Daniel.Syburg@Thrivent.com","configuredById":"54499f33-8e79-4f3b-817f-879c3ff2bb03","isEffectiveIdentityRequired":true,"isEffectiveIdentityRolesRequired":true,"refreshSchedule":{"days":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"times":["09:00","12:30"],"enabled":true,"localTimeZoneId":"Central Standard Time","notifyOption":"NoNotification"},"targetStorageMode":"Abf","createdDate":"2022-06-29T18:02:25.957","contentProviderType":"PbixInImportMode"},{"id":"4110a40f-30f7-453b-90a3-ba34ce56f2c5","name":"2022 Fall Advisor Meeting Incentive Report","tables":[{"name":"Producer","isHidden":false,"columns":[{"name":"SALE_HIER_DIM_SK","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"EMP_DIM_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SALE_HIER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ZONE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RPT_TO_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Sponsoring FP TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Sponsoring FP Name","dataType":"String","isHidden":false,"expression":"--if(isblank(Producer[Sponsoring FP TSID]),'',LOOKUPVALUE(Producer[EMP_NM],Producer[EMP_ID],Producer[Sponsoring FP TSID])","columnType":"Calculated"},{"name":"Associate Flag","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_SUB_DEPT_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_SUB_DEPT_DSCR","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = PowerBI.Dataflows([]),    #'4ed85d6e-e750-4d01-892f-78fc79993e0c' = Source{[workspaceId='4ed85d6e-e750-4d01-892f-78fc79993e0c']}[Data],    #'0b905589-2450-4f3c-9fd8-f4902e4223de' = #'4ed85d6e-e750-4d01-892f-78fc79993e0c'{[dataflowId='0b905589-2450-4f3c-9fd8-f4902e4223de']}[Data],    Producer1 = #'0b905589-2450-4f3c-9fd8-f4902e4223de'{[entity='Producer']}[Data],    #'Added Conditional Column' = Table.AddColumn(Producer1, 'Sponsoring FP TSID', each if [JOB_TYP_CDE] = '002003' then [RPT_TO_ID] else if [JOB_TYP_CDE] = '002011' then [RPT_TO_ID] else if [JOB_TYP_CDE] = '002012' then [RPT_TO_ID] else if [JOB_TYP_CDE] = '002019' then [RPT_TO_ID] else if [JOB_TYP_CDE] = '002030' then [RPT_TO_ID] else if [JOB_TYP_CDE] = '002031' then [RPT_TO_ID] else if [JOB_TYP_CDE] = '002032' then [RPT_TO_ID] else null),    #'Removed Columns' = Table.RemoveColumns(#'Added Conditional Column',{'TENURE_GROUP', 'FIN_CSLT_IND', 'WLTH_ADVR_IND', 'GNDR_CDE', 'LST_NM', 'FRST_NM', 'MDDL_NM', 'ADJ_SVC_DT', 'TENURE'}),    #'Added Conditional Column1' = Table.AddColumn(#'Removed Columns', 'Associate Flag', each if [JOB_TYP_CDE] = '002003' then 'Y' else if [JOB_TYP_CDE] = '002011' then 'Y' else if [JOB_TYP_CDE] = '002012' then 'Y' else if [JOB_TYP_CDE] = '002019' then 'Y' else if [JOB_TYP_CDE] = '002030' then 'Y' else if [JOB_TYP_CDE] = '002031' then 'Y' else if [JOB_TYP_CDE] = '002032' then 'Y' else 'N')in    #'Added Conditional Column1'"}]},{"name":"DTRB_PERF_DATES","isHidden":false,"columns":[{"name":"DT_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CAL_DAY_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_END_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_WK_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"SRC_SYS_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CRET_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"LST_UPDT_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"CRET_USER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LST_UPDT_USER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_DAY_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_MTH_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_QTR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PrevWkDt","dataType":"String","isHidden":false,"expression":"if(weekday(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT])=7,[CAL_DAY_DT], [CAL_DAY_DT]-(WEEKDAY([CAL_DAY_DT],1))) ","columnType":"Calculated"},{"name":"Prior YR or Before","dataType":"String","isHidden":false,"expression":"if(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT]\u003eNOW()-367,'N','Y')","columnType":"Calculated"},{"name":"Today or Before","dataType":"String","isHidden":false,"expression":"if(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT]\u003eNOW()-1,'N','Y')","columnType":"Calculated"},{"name":"WorkDayIndex","dataType":"String","isHidden":false,"expression":"If([WeekDay]\u003e 1 \u0026\u0026 [WeekDay] \u003c 7, ([WeekNo]-1)*5 + [WeekDay]-1)","columnType":"Calculated"},{"name":"WeekDay","dataType":"String","isHidden":false,"expression":"WeekDay(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT],1)","columnType":"Calculated"},{"name":"WeekNo","dataType":"String","isHidden":false,"expression":"WEEKNUM([CAL_DAY_DT], 1)","columnType":"Calculated"},{"name":"WorkDayIndex_Test","dataType":"String","isHidden":false,"expression":"IF([WeekDay]\u003e 1 \u0026\u0026 [WeekDay] \u003c 7, ([WeekNo]-1)*5 + [WeekDay]-1,                    IF([WeekDay] = 7, ([WeekNo]-1)*5 + [WeekDay]-2,                    IF([WeekDay] = 1, ([WeekNo]-1)*5 + [WeekDay]-1)))","columnType":"Calculated"}],"measures":[{"name":"Todays_WKDAY","expression":"CALCULATE(var todayno=max(\u0027DTRB_PERF_DATES\u0027[WorkDayIndex])returntodayno, \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT]=TODAY())","isHidden":false},{"name":"Todays_WKDAY_testxx","expression":"CALCULATE(var todayno=max(\u0027DTRB_PERF_DATES\u0027[WorkDayIndex])returntodayno, \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT]=TODAY())","isHidden":false},{"name":"Ashley_Test","expression":"CALCULATE(var todayno=max(\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_WK_NBR])returntodayno, \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT]=TODAY())","isHidden":false}],"source":[{"expression":"let    Source = DB2.Database('PODWH021:50000', 'PODWH021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT DT_SK, #(lf)       CAL_DAY_DT, #(lf)       DTRB_PERF_RPT_WK_END_DT, #(lf)       DTRB_PERF_RPT_WK_NBR,#(lf)       DTRB_PERF_RPT_YR_NBR,#(lf)       DTRB_PERF_RPT_YR_WK_NBR,#(lf)       SRC_SYS_ID, #(lf)       CRET_TMSP, #(lf)       LST_UPDT_TMSP, #(lf)       CRET_USER_ID, #(lf)       LST_UPDT_USER_ID, #(lf)       DTRB_PERF_RPT_DAY_TXT, #(lf)       DTRB_PERF_RPT_MTH_TXT, #(lf)       DTRB_PERF_RPT_QTR_TXT, #(lf)       DTRB_PERF_RPT_WK_TXT,#(lf)       DTRB_PERF_RPT_YR_TXT#(lf)      FROM COMMON.DTRB_PERF_DATES  #(lf)    WHERE DTRB_PERF_RPT_YR_NBR IN (\u00272022\u0027)']),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'CAL_DAY_DT', type date}, {'DTRB_PERF_RPT_WK_END_DT', type date}})in    #'Changed Type'"}]},{"name":"NFC","isHidden":false,"columns":[{"name":"Date Surrogate Key","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Contract Version Number","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Writing Agent Version Number","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Financial Customer Point Status Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Financial Customer Point Value","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Contract Issue Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Assigned FR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TS ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee Status Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee Status Type Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Type Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Current Row Indicator Sales Hierarchy","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Calendar Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Week End Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Week Number","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Year Number","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Year Week Number","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_DAY_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_MTH_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_QTR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Sales Hierarchy Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Effective Begin Timestamp","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Effective End Timestamp","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Agent Current Row Indicator","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Organization Zone Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Organization Department Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Organization Division Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Organization Division Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Sales Hierarchy Dimension Surrogate Key","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"YTD NFC Flag","dataType":"String","isHidden":false,"expression":"if(and(\u0027NFC\u0027[Calendar Date] \u003c= DATE(YEAR(today()),MONTH(today()),DAY(today())),YEAR(\u0027NFC\u0027[Calendar Date]) = YEAR(today())), 1, 0)","columnType":"Calculated"},{"name":"Max Cal Date","dataType":"String","isHidden":false,"expression":"CALCULATE(MAX(\u0027NFC\u0027[Calendar Date]),ALLEXCEPT(\u0027NFC\u0027,\u0027NFC\u0027[DTRB_PERF_RPT_YR_TXT]),\u0027NFC\u0027[DTRB_PERF_RPT_YR_TXT]='Current')","columnType":"Calculated"}],"measures":[{"name":"YTD New Clients","expression":"var _total = CALCULATE(sum(\u0027NFC\u0027[Financial Customer Point Value]), \u0027NFC\u0027[YTD NFC Flag] = 1)RETURNif(isblank(_total),0,_total)--var cy_start = CALCULATE(MIN(\u0027NFC\u0027[Calendar Date]),ALLEXCEPT(\u0027NFC\u0027,\u0027NFC\u0027[DTRB_PERF_RPT_YR_TXT]),all(\u0027NFC\u0027),\u0027NFC\u0027[DTRB_PERF_RPT_YR_TXT]='Current')--var cy_end = CALCULATE(MAX(\u0027NFC\u0027[Calendar Date]),ALLEXCEPT(\u0027NFC\u0027,\u0027NFC\u0027[DTRB_PERF_RPT_YR_TXT]),all(\u0027NFC\u0027),\u0027NFC\u0027[DTRB_PERF_RPT_YR_TXT]='Current')--var nfc_sum=calculate(sum(\u0027NFC\u0027[Financial Customer Point Value]), \u0027NFC\u0027[Calendar Date] \u003c= cy_end \u0026\u0026 \u0027NFC\u0027[Calendar Date] \u003e= cy_start)--CALCULATE(SUM(NFC[Financial Customer Point Value]), NFC, NFC[Calendar Date] \u003c= cy_end \u0026\u0026 NFC[Calendar Date] \u003e= cy_start)","isHidden":false}],"source":[{"expression":"let    Source = DB2.Database('PODWH021:50000', 'PODWH021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT IA_DATES_ITRL.DT_SK as ''Date Surrogate Key'',#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.CTRC_VRSN_NBR as ''Contract Version Number'',#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.WRTG_AGT_VRSN_NBR as ''Writing Agent Version Number'',#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_STS_CDE as ''Financial Customer Point Status Code'',#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.CUST_AGE as ''Financial Customer Age'',#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.AGE_CLAS_CDE as ''Age Class Code'',#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.AGE_CLAS_DSCR as ''Age Class Description'',#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_VLU as ''Financial Customer Point Value'',#(lf)       CNF_CUSTOMER_DIM_CFDL.CUST_LGAL_FMT_NM, #(lf)       --CNF_CUSTOMER_DIM_CFDL.CUST_BRTH_DT,#(lf)       CNF_CUSTOMER_DIM_CFDL.MBR_TYP_CDE as ''Member Type Code'',#(lf)       CNF_CUSTOMER_DIM_CFDL.MBR_TYP_DSCR as ''Member Type Description'',#(lf)       CNF_CUSTOMER_DIM_CFDL.RSDL_ST_CDE as ''Residential State Code'',#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.CTRC_ISS_DT as ''Contract Issue Date'', #(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L5_PLOB_SGRP_CDE as ''Level 5 Product Line Of Business Subgroup Code'',#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L5_PLOB_SGRP_DSCR as ''Level 5 Product Line Of Business Subgroup Description'',#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L4_PLOB_GRP_CDE as ''Level 4 Product Line Of Business Group Code'',#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L4_PLOB_GRP_DSCR as ''Level 4 Product Line Of Business Group Description'',#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L3_PROD_LOB_CDE as ''Level 3 Product Line Of Business Code'',#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L3_PROD_LOB_DSCR as ''Level 3 Product Line Of Business Description'',#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L2_PROD_CHAR_CDE as ''Level 2 Product Character Code'',#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L2_PROD_CHAR_DSCR as ''Level 2 Product Character Description'',#(lf)       AGT_DIM_CURR_CFDL.PARY_DSPL_2_NM as ''Assigned FR'',#(lf)       AGT_DIM_CURR_CFDL.FRST_NM as ''Employee First Name'',#(lf)       AGT_DIM_CURR_CFDL.MDDL_NM as ''Employee Middle Name'',#(lf)       AGT_DIM_CURR_CFDL.LST_NM as ''Employee Last Name'',#(lf)       AGT_DIM_CURR_CFDL.ADJ_SVC_DT as ''Adjusted Service Date'',#(lf)       AGT_DIM_CURR_CFDL.EMP_ID as ''TS ID'',#(lf)       AGT_DIM_CURR_CFDL.EMP_STS_TYP_CDE as ''Employee Status Type Code'',#(lf)       AGT_DIM_CURR_CFDL.EMP_STS_TYP_DSCR as ''Employee Status Type Description'',#(lf)       AGT_DIM_CURR_CFDL.JOB_TYP_CDE as ''Job Type Code'',#(lf)       AGT_DIM_CURR_CFDL.JOB_TYP_DSCR as ''Job Type Description'',#(lf)       AGT_DIM_CURR_CFDL.CURR_ROW_IND as ''Current Row Indicator Sales Hierarchy'',#(lf)       IA_DATES_ITRL.CAL_DAY_DT as ''Calendar Date'',#(lf)       --IA_DATES_ITRL.CAL_MTH_NM,#(lf)       IA_DATES_ITRL.CAL_MTH_STRT_DT as ''Calendar Month State Date'',#(lf)       IA_DATES_ITRL.CAL_MTH_END_DT as ''Calendar Month End Date'',#(lf)       --IA_DATES_ITRL.CAL_YR_QTR_NBR,#(lf)       --IA_DATES_ITRL.CAL_QTR_NM,#(lf)       --IA_DATES_ITRL.CAL_WK_NM,#(lf)       FIN_CUST_ELIG_DIM_CFDL.FIN_CUST_PNT_RSN_CDE as ''Financial Customer Point Reason Code'',#(lf)       FIN_CUST_ELIG_DIM_CFDL.FIN_CUST_PNT_RSN_DSCR as ''Financial Customer Point Reason Description'',#(lf)       FIN_CUST_ELIG_DIM_CFDL.CTRC_RLTN_TYP_CDE as ''Financial Customer Point Relationship Code'',#(lf)       FIN_CUST_ELIG_DIM_CFDL.CTRC_RLTN_TYP_DSCR as ''Financial Customer Point Relationship Description'',#(lf)       CASE#(lf)          WHEN (CUST_AGE \u003e= 0) AND (CUST_AGE \u003c= 15) THEN \u00270-15\u0027#(lf)          WHEN (CUST_AGE \u003e= 16) AND (CUST_AGE \u003c= 25) THEN \u002716-25\u0027#(lf)          WHEN (CUST_AGE \u003e= 26) AND (CUST_AGE \u003c= 35) THEN \u002726-35\u0027#(lf)          WHEN (CUST_AGE \u003e= 36) AND (CUST_AGE \u003c= 45) THEN \u002736-45\u0027#(lf)          WHEN (CUST_AGE \u003e= 46) AND (CUST_AGE \u003c= 55) THEN \u002746-55\u0027#(lf)          WHEN (CUST_AGE \u003e= 56) AND (CUST_AGE \u003c= 65) THEN \u002756-65\u0027#(lf)          WHEN (CUST_AGE \u003e= 66) AND (CUST_AGE \u003c= 75) THEN \u002766-75\u0027#(lf)          WHEN CUST_AGE \u003e 75 THEN \u002776+\u0027#(lf)       END#(lf)          AS ''Financial Customer Age Group'',#(lf)       integer (floor ( (CURRENT DATE - CUST_BRTH_DT) / 10000)) AS ''Member Age'',#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_WK_END_DT as ''Distribution Performance Reporting Week End Date'',#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_WK_NBR as ''Distribution Performance Reporting Week Number'',#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_YR_NBR as ''Distribution Performance Reporting Year Number'',#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_YR_WK_NBR as ''Distribution Performance Reporting Year Week Number'',#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_WK_TXT,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_YR_TXT,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_DAY_TXT,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_MTH_TXT,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_QTR_TXT,#(lf)       SALE_HIER_DIM.SALE_HIER_ID as ''Sales Hierarchy Identifier'',#(lf)       SALE_HIER_DIM.EFF_BEG_TMSP as ''Effective Begin Timestamp'',#(lf)       SALE_HIER_DIM.EFF_END_TMSP as ''Effective End Timestamp'',#(lf)       SALE_HIER_DIM.CURR_ROW_IND as ''Agent Current Row Indicator'',#(lf)       SALE_HIER_DIM.PRTR_NM as ''Partner Name'',#(lf)       SALE_HIER_DIM.MANP_NM as ''Managing Partner Name'',#(lf)       SALE_HIER_DIM.ORZN_ZONE_CDE as ''Market'',#(lf)       SALE_HIER_DIM.ORZN_ZONE_DSCR as ''Organization Zone Description'',#(lf)       SALE_HIER_DIM.ORZN_DEPT_CDE as ''RFO'',#(lf)       SALE_HIER_DIM.ORZN_DEPT_DSCR as ''Organization Department Description'',#(lf)       SALE_HIER_DIM.ORZN_DIV_CDE as ''Organization Division Code'',#(lf)       SALE_HIER_DIM.ORZN_DIV_DSCR as ''Organization Division Description'',#(lf)       SALE_HIER_DIM.SALE_HIER_DIM_SK as ''Sales Hierarchy Dimension Surrogate Key''#(lf)#(lf)  FROM ((((((COMMON.IA_DATES_ITRL IA_DATES_ITRL INNER JOIN#(lf)             COMMON.DTRB_PERF_DATES DTRB_PERF_DATES#(lf)          ON (IA_DATES_ITRL.DT_SK = DTRB_PERF_DATES.DT_SK)) LEFT OUTER JOIN#(lf)             SALES.TF_FIN_CUST_EVT_FCT_CFDL TF_FIN_CUST_EVT_FCT_CFDL#(lf)          ON (IA_DATES_ITRL.DT_SK = TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_CRNG_DT_SK)) RIGHT OUTER JOIN#(lf)             HUMAN_RESOURCES.SALE_HIER_DIM SALE_HIER_DIM#(lf)          ON (SALE_HIER_DIM.SALE_HIER_DIM_SK = TF_FIN_CUST_EVT_FCT_CFDL.SLHR_DIM_CURR_CRNG_AGT_SK)) LEFT OUTER JOIN#(lf)             MEMBER.CNF_CUSTOMER_DIM_CFDL CNF_CUSTOMER_DIM_CFDL#(lf)          ON (CNF_CUSTOMER_DIM_CFDL.CUST_SK = TF_FIN_CUST_EVT_FCT_CFDL.CUST_SK)) LEFT OUTER JOIN#(lf)             HUMAN_RESOURCES.AGT_DIM_CURR_CFDL AGT_DIM_CURR_CFDL#(lf)          ON (AGT_DIM_CURR_CFDL.AGT_DIM_SK = TF_FIN_CUST_EVT_FCT_CFDL.CRNG_AGT_SK)) RIGHT OUTER JOIN#(lf)             SALES.FIN_CUST_ELIG_DIM_CFDL FIN_CUST_ELIG_DIM_CFDL#(lf)          ON (FIN_CUST_ELIG_DIM_CFDL.FIN_CUST_PNT_ELIG_DIM_SK = TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_ELIG_DIM_SK)) LEFT OUTER JOIN#(lf)             CONTRACT.CNF_CONTRACT_DIM_DTL_CFDL CNF_CONTRACT_DIM_DTL_CFDL#(lf)          ON (CNF_CONTRACT_DIM_DTL_CFDL.CTRC_SK = TF_FIN_CUST_EVT_FCT_CFDL.CTRC_SK) and #(lf)             (CNF_CONTRACT_DIM_DTL_CFDL.VRSN_NBR = TF_FIN_CUST_EVT_FCT_CFDL.CTRC_VRSN_NBR)#(lf)                     #(lf) WHERE (AGT_DIM_CURR_CFDL.CURR_ROW_IND = \u0027Y\u0027)#(lf)   AND (SALE_HIER_DIM.CURR_ROW_IND = \u0027Y\u0027)#(lf)   AND sale_hier_dim.ORZN_DEPT_CDE in (\u00270001\u0027, \u00270115\u0027,\u00270165\u0027,\u00270190\u0027,\u00270240\u0027,\u00270283\u0027,\u00270291\u0027,\u00270361\u0027,\u00270365\u0027,\u00270384\u0027,\u00270410\u0027,\u00270435\u0027,\u00270475\u0027,\u00270496\u0027,\u00270525\u0027,\u00270529\u0027,\u00270810\u0027)#(lf)   AND DTRB_PERF_DATES.DTRB_PERF_RPT_YR_NBR in (\u00272022\u0027)']),    #'Removed Columns' = Table.RemoveColumns(Source,{'Financial Customer Age', 'Age Class Code', 'Age Class Description', 'CUST_LGAL_FMT_NM', 'Member Type Code', 'Member Type Description', 'Residential State Code', 'Level 5 Product Line Of Business Subgroup Code', 'Level 5 Product Line Of Business Subgroup Description', 'Level 4 Product Line Of Business Group Code', 'Level 4 Product Line Of Business Group Description', 'Level 3 Product Line Of Business Code', 'Level 3 Product Line Of Business Description', 'Level 2 Product Character Code', 'Level 2 Product Character Description', 'Employee First Name', 'Employee Middle Name', 'Employee Last Name', 'Adjusted Service Date', 'Calendar Month State Date', 'Calendar Month End Date', 'Financial Customer Point Reason Code', 'Financial Customer Point Reason Description', 'Financial Customer Point Relationship Code', 'Financial Customer Point Relationship Description', 'Financial Customer Age Group', 'Member Age', 'Partner Name', 'Managing Partner Name'})in    #'Removed Columns'"}]},{"name":"Distribution Performance Dates Dimension","isHidden":false,"columns":[{"name":"Date Surrogate Key","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Calendar Day Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Year Number","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Year Week Number","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Report Year Text","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com', 'ENTERPRISE_EDW_PRESENTATION_WH', null),    ENTERPRISE_EDW_Database = Source{[Name='ENTERPRISE_EDW',Kind='Database']}[Data],    PRESENTATION_01_Schema = ENTERPRISE_EDW_Database{[Name='PRESENTATION_01',Kind='Schema']}[Data],    #'Distribution Performance Dates Dimension_View' = PRESENTATION_01_Schema{[Name='Distribution Performance Dates Dimension',Kind='View']}[Data],    #'Removed Columns' = Table.RemoveColumns(#'Distribution Performance Dates Dimension_View',{'Distribution Performance Reporting Week End Date'}),    #'Filtered Rows' = Table.SelectRows(#'Removed Columns', each [Date Surrogate Key] \u003e= 2458850),    #'Removed Columns2' = Table.RemoveColumns(#'Filtered Rows',{'Distribution Performance Reporting Week Number', 'Distribution Performance Reporting Day Text', 'Distribution Performance Reporting Month Text', 'Distribution Performance Reporting Quarter Text', 'Distribution Performance Reporting Week Text'})in    #'Removed Columns2'"}]},{"name":"Conference Credits","isHidden":false,"columns":[{"name":"Compensation Payee Agent Surrogate Key","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Compensation Agent Version Number","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Sponsoring Compensation Recipient Surrogate Key","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Sponsoring Agent Version Number","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Contract Surrogate Key","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Process Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Proprietary Product Indicator","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Customer Identification Number","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Conference Credit Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Agent Split Percent","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Metric Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Benefit Contract Number","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Benefit Contract Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Compensation Reporting Roll Up Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Sponsoring Compensation Recipient Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Comp Employee Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Date Surrogate Key","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Calendar Day Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Year Number","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Year Week Number","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Report Year Text","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Commission Option Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Manufacturing Allowable Compensation Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Manufacturing Allowable Compensation Rate","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Manufacturing Allowable Compensation Split Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Annual New Business Premium Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Assigned Representative Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Compensation Payout Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Contract Billing Duration Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Grid Credit Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Grid Credit Base Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Grid Credit Payout Rate","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Grid Credit Rate","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Grid Credit Split Base Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Grid Credit Team Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Minimum Production Credit Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Past 12 Months Grid Credit Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Past 12 Months Grid Credit Effective Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Past 12 Months Life and Health Grid Credit Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Past 12 Months Life and Health Grid Credit Indicator","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Payment Source Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Payment Year Number","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Product Hierarchy Node Level 6 Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Product Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Reporting Roll Up Event Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Reporting Roll Up Product Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Revenue From Related Business Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Transaction Reference GUID Text","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Application Sign State Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Member Relationship Incentive Modifier Rate","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Member Relationship Incentive Rate","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Member Relationship Incentive Fixed Rate","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com', 'ENTERPRISE_EDW_PRESENTATION_WH', [Role=null, CreateNavigationProperties=null, ConnectionTimeout=null, CommandTimeout=null]),    ENTERPRISE_EDW_Database = Source{[Name='ENTERPRISE_EDW',Kind='Database']}[Data],    PRESENTATION_01_Schema = ENTERPRISE_EDW_Database{[Name='PRESENTATION_01',Kind='Schema']}[Data],    #'Sales Metrics Transactions_View' = PRESENTATION_01_Schema{[Name='Sales Metrics Transactions',Kind='View']}[Data],    #'Removed Columns' = Table.RemoveColumns(#'Sales Metrics Transactions_View',{'Accredited Organization Unit Surrogate Key', 'Organization Unit Effective Begin Timestamp', 'Accredited Customer Surrogate Key', 'Team Identifier Surrogate Key', 'Regional Financial Office Code', 'Gross Dealer Concession Category Code', 'Gross Dealer Concession Basis Amount', 'Gross Dealer Concession Amount', 'Gross Dealer Concession Split Basis Amount', 'New Sales Credit Amount', 'New Sales Credit Weighting Percent', 'Team Identifier', 'Conference Credit Weighting Percent', 'Life Volume Basis Amount', 'Metric Basis Amount', 'Metric Basis Base Amount', 'Metric Basis Rate', 'Credential Validation State Code', 'Credential Redistribution Code', 'Credential Validation Status Code', 'Credential Validation Effective Date', 'Who To Pay Effective Date', 'Compensation Rule Effective Date', 'Pay Period End Date', 'Settlement Date', 'Adjusted Service Date', 'Field Total Full Time Service Date', 'Commission Basis Amount', 'Commission Basis Split Amount', 'Commission Amount', 'Commission Earning Code', 'Mutual Funds Trail Amount', 'Field Compensation Commission Rate', 'Compensation Split Type Code', 'Primary Service Agent Indicator', 'Field Division Code', 'Product Access Level Code', 'Product Access Role Code', 'Past 12 Months Gross Dealer Concession Type Code', 'Past 12 Months Gross Dealer Concession Amount', 'Transaction Benefit Code', 'Share Class Code', 'Trade Subtype Code', 'Trade Status Code', 'Trade Type Code', 'Vendor Key Code', 'Trust Tax Status Code', 'Source System Code', 'Product Plan Code', 'Level 2 Product Character Code', 'County Code Number', 'Compensable Event Identifier', 'Compensable Event Type Code', 'Month End Market Value Amount', 'Ticket Charge Basis Amount', 'Ticket Charge Split Basis Amount', 'Ticket Charge Amount', 'Ticket Charge Earning Code', 'Administrative Expense Factor Rate', 'Gross Payout Factor Rate', 'Adjust Type Code', 'Reversal Indicator', 'Selling Event Indicator', 'Calculation Type Code', 'True Compensation Sales Transaction Sequence Number', 'Mutual Funds Account Number', 'Mutual Funds Fund Number', 'Application Date', 'Compensable Event Subtype Code', 'Coverage Issue Date', 'Derived Coverage Type Code', 'Face Amount', 'Multi Year Guarantee Reset Indicator', 'Non Proprietary Product Key Code', 'Unpaid Commissions Amount', 'Unpaid Commissions Code', 'Commission Vesting Percent', 'Charge Back Code', 'Charge Back Percent', 'Charge Back Period Month Count', 'Surrender Charge Indicator', 'Customer Compensable Age Value', 'Guarantee Period Years Value', 'Decrease Percent', 'Unscheduled Decrease Amount', 'Financial Representative County Code Number', 'Contract Renew Code', 'Sales Metric Source Process Name', 'Unadjusted Benefit Annual Premium Amount', 'Spousal Discount Percent', 'Risk Class Adjustment Percent', 'Payment Strategy Adjustment Percent', 'Contract Issue Date', 'Contract Issue State Code', 'Compensable Transaction Identifier', 'Truecomp Pay Period Identifier', 'Create User Identifier', 'Vendor Company Name', 'Administrative Officer Name', 'Product Subtype Name', 'Commission Origin Name', 'Compensation Adjustment Reason Full Text', 'Compensation Adjustment Reason Abbreviated Text', 'Compensation Split Subtype Text', 'Invalid Compensation Recipient Identifier', 'Life Volume Amount', 'Sales Metric Transaction Surrogate Key', 'Sales Metric Transaction Identification Number', 'Compensated Job Title Code', 'Level 3 Product Line Of Business Code', 'Level 4 Product Line Of Business Group Code', 'Level 5 Product Line Of Business Subgroup Code'}),    #'Filtered Rows' = Table.SelectRows(#'Removed Columns', each ([Conference Credit Amount] \u003c\u003e null and [Conference Credit Amount] \u003c\u003e 0)),    #'Merged Queries' = Table.NestedJoin(#'Filtered Rows', {'Compensation Payee Agent Surrogate Key'}, #'Workforce Dimension Detail', {'Workforce Dimension Detail Surrogate Key'}, 'Workforce Dimension Detail', JoinKind.Inner),    #'Expanded Workforce Dimension Detail' = Table.ExpandTableColumn(#'Merged Queries', 'Workforce Dimension Detail', {'Employee Identifier'}, {'Employee Identifier'}),    #'Renamed Columns' = Table.RenameColumns(#'Expanded Workforce Dimension Detail',{{'Employee Identifier', 'Comp Employee Identifier'}}),    #'Merged Queries1' = Table.NestedJoin(#'Renamed Columns', {'Process Date'}, #'Distribution Performance Dates Dimension', {'Calendar Day Date'}, 'Distribution Performance Dates Dimension', JoinKind.LeftOuter),    #'Expanded Distribution Performance Dates Dimension' = Table.ExpandTableColumn(#'Merged Queries1', 'Distribution Performance Dates Dimension', {'Date Surrogate Key', 'Calendar Day Date', 'Distribution Performance Reporting Year Number', 'Distribution Performance Reporting Year Week Number', 'Distribution Performance Report Year Text'}, {'Date Surrogate Key', 'Calendar Day Date', 'Distribution Performance Reporting Year Number', 'Distribution Performance Reporting Year Week Number', 'Distribution Performance Report Year Text'}),    #'Filtered Rows1' = Table.SelectRows(#'Expanded Distribution Performance Dates Dimension', each [Distribution Performance Report Year Text] = 'CURRENT'),    #'Duplicated Column' = Table.DuplicateColumn(#'Filtered Rows1', 'Comp Employee Identifier', 'Comp Employee Identifier - Copy'),    #'Renamed Columns1' = Table.RenameColumns(#'Duplicated Column',{{'Comp Employee Identifier - Copy', 'EMP_ID'}})in    #'Renamed Columns1'"}]},{"name":"Workforce Dimension Detail","isHidden":true,"columns":[{"name":"Workforce Dimension Detail Surrogate Key","dataType":"Double","isHidden":true,"columnType":"Data"},{"name":"Employee Identifier","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"Employee Name","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"Financial Advisor Indicator","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Associate Financial Advisor Indicator","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com', 'ENTERPRISE_EDW_PRESENTATION_WH', null),    ENTERPRISE_EDW_Database = Source{[Name='ENTERPRISE_EDW',Kind='Database']}[Data],    PRESENTATION_01_Schema = ENTERPRISE_EDW_Database{[Name='PRESENTATION_01',Kind='Schema']}[Data],    #'Workforce Dimension Detail_View' = PRESENTATION_01_Schema{[Name='Workforce Dimension Detail',Kind='View']}[Data],    #'Filtered Rows' = Table.SelectRows(#'Workforce Dimension Detail_View', each ([Current Row Indicator] = 'Y')),    #'Removed Columns' = Table.RemoveColumns(#'Filtered Rows',{'Workforce Dimension Version Number', 'Employee Dimension Effective Begin Timestamp', 'Employee Dimension Effective End Timestamp', 'Employee Organization Type Code', 'Gender Code', 'Gender Description', 'Original Hire Date', 'Hire Date', 'Rehire Date', 'Termination Date', 'Birth Date', 'Marital Status Code', 'Employee Service Date', 'Adjusted Service Date', 'Field Continuous Full Time Service Date', 'Financial Associate Continuous Full Time Service Date', 'Field Total Full Time Service Date', 'Prefix Name'}),    #'Removed Columns1' = Table.RemoveColumns(#'Removed Columns',{'Payroll Company Code', 'Employee Category Code', 'Address Type Code', 'Preferred Address State Code', 'Preferred Address Country Code', 'Preferred Address Zip 5 Code', 'Preferred Address Zip 4 Code', 'Organization Division Code', 'Payroll Group Code', 'Product Support Consultant Investment Group Indicator', 'Product Support Consultant Risk Group Indicator', 'Financial Consultant Indicator', 'Senior Financial Consultant Indicator', 'Department Lead Management Indicator', 'Job Title Subtype Code', 'Standard Hours Value', 'Wealth Advisor Indicator', 'Agent Identifier Number', 'Agent Code', 'Broker Dealer Agent Indicator', 'Investment Advisor Representative Indicator', 'General Securities Registration Indicator', 'Financial Representative Deposit Broker Code', 'Employee First Professional Designation Code', 'Employee Second Professional Designation Code', 'Chartered Financial Consultant Designation Code', 'Chartered Leadership Fellow Designation Code', 'Chartered Life Underwriter Designation Code', 'Chartered Financial Analyst Designation Code', 'Certified Financial Planner Designation Code', 'Fraternal Insurance Counselor Designation Code', 'Fraternal Insurance Counselor Fellow Designation Code', 'Life Underwriter Training Counsel Fellow Designation Code', 'Series One License Status Code', 'Series Four License Status Code', 'Series Six License Status Code', 'Series Seven License Status Code', 'Series Nine License Status Code', 'Series Ten License Status Code', 'Series Twenty-two License Status Code', 'Series Twenty-four License Status Code', 'Series Twenty-six License Status Code', 'Series Twenty-seven License Status Code', 'Series Fifty-one License Status Code', 'Series Fifty-three License Status Code', 'Series Sixty-two License Status Code', 'Series Sixty-three License Status Code', 'Series Sixty-five License Status Code', 'Series Sixty-six License Status Code', 'Series Eighty-six License Status Code', 'Series Eighty-seven License Status Code', 'Financial Representative Segment Code', 'Organization Department Description', 'Job Type Description', 'Job Title Subtype Description', 'First Name', 'Middle Name', 'Last Name', 'Nick Name', 'Suffix Name', 'Marital Status Description', 'Party Display Two Name', 'Payroll Group Description', 'Employee Category Description', 'Address Type Description', 'Preferred Address Line 1', 'Preferred Address Line 2', 'Preferred Address Line 3', 'Preferred Address City Name', 'Preferred Address State Description', 'Preferred Address County Name', 'Business Telephone Number', 'Home Telephone Number', 'Cellular Telephone Number', 'Fax Telephone Number', 'Toll Free Telephone Number', 'Organization Division Description', 'Employee Electronic Mail Address Text', 'Conference Description'}),    #'Filtered Rows2' = Table.SelectRows(#'Removed Columns1', each ([Employee Status Type Description] = 'Active' or [Employee Status Type Description] = 'Disabled' or [Employee Status Type Description] = 'Leave of Absence')),    #'Removed Columns2' = Table.RemoveColumns(#'Filtered Rows2',{'Employee Status Type Code', 'Job Type Code', 'Conference Year', 'Conference Level Number', 'Organization Department Code', 'Current Row Indicator', 'Employee Status Type Description'})in    #'Removed Columns2'"}]},{"name":"Conference Credits - Rollup","isHidden":true,"columns":[{"name":"Compensation Payee Agent Surrogate Key","dataType":"Double","isHidden":true,"columnType":"Data"},{"name":"Compensation Agent Version Number","dataType":"Double","isHidden":true,"columnType":"Data"},{"name":"Sponsoring Compensation Recipient Surrogate Key","dataType":"Double","isHidden":true,"columnType":"Data"},{"name":"Sponsoring Agent Version Number","dataType":"Double","isHidden":true,"columnType":"Data"},{"name":"Contract Surrogate Key","dataType":"Double","isHidden":true,"columnType":"Data"},{"name":"Process Date","dataType":"DateTime","isHidden":true,"columnType":"Data"},{"name":"Proprietary Product Indicator","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"Customer Identification Number","dataType":"Double","isHidden":true,"columnType":"Data"},{"name":"Conference Credit Amount","dataType":"Double","isHidden":true,"columnType":"Data"},{"name":"Agent Split Percent","dataType":"Double","isHidden":true,"columnType":"Data"},{"name":"Metric Type Code","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"Benefit Contract Number","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"Benefit Contract Type Code","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"Compensation Reporting Roll Up Name","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"Sponsoring Compensation Recipient Identifier","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"Comp Employee Identifier","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"Date Surrogate Key","dataType":"Double","isHidden":true,"columnType":"Data"},{"name":"Calendar Day Date","dataType":"DateTime","isHidden":true,"columnType":"Data"},{"name":"Distribution Performance Reporting Year Number","dataType":"Double","isHidden":true,"columnType":"Data"},{"name":"Distribution Performance Reporting Year Week Number","dataType":"Double","isHidden":true,"columnType":"Data"},{"name":"Distribution Performance Report Year Text","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"Rollup_Ind","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"Commission Option Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Manufacturing Allowable Compensation Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Manufacturing Allowable Compensation Rate","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Manufacturing Allowable Compensation Split Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Annual New Business Premium Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Assigned Representative Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Compensation Payout Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Contract Billing Duration Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Grid Credit Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Grid Credit Base Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Grid Credit Payout Rate","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Grid Credit Rate","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Grid Credit Split Base Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Grid Credit Team Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Minimum Production Credit Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Past 12 Months Grid Credit Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Past 12 Months Grid Credit Effective Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Past 12 Months Life and Health Grid Credit Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Past 12 Months Life and Health Grid Credit Indicator","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Payment Source Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Payment Year Number","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Product Hierarchy Node Level 6 Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Product Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Reporting Roll Up Event Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Reporting Roll Up Product Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Revenue From Related Business Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Transaction Reference GUID Text","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Application Sign State Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Member Relationship Incentive Modifier Rate","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Member Relationship Incentive Rate","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Member Relationship Incentive Fixed Rate","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com', 'ENTERPRISE_EDW_PRESENTATION_WH', [Role=null, CreateNavigationProperties=null, ConnectionTimeout=null, CommandTimeout=null]),    ENTERPRISE_EDW_Database = Source{[Name='ENTERPRISE_EDW',Kind='Database']}[Data],    PRESENTATION_01_Schema = ENTERPRISE_EDW_Database{[Name='PRESENTATION_01',Kind='Schema']}[Data],    #'Sales Metrics Transactions_View' = PRESENTATION_01_Schema{[Name='Sales Metrics Transactions',Kind='View']}[Data],    #'Removed Columns' = Table.RemoveColumns(#'Sales Metrics Transactions_View',{'Accredited Organization Unit Surrogate Key', 'Organization Unit Effective Begin Timestamp', 'Accredited Customer Surrogate Key', 'Team Identifier Surrogate Key', 'Regional Financial Office Code', 'Gross Dealer Concession Category Code', 'Gross Dealer Concession Basis Amount', 'Gross Dealer Concession Amount', 'Gross Dealer Concession Split Basis Amount', 'New Sales Credit Amount', 'New Sales Credit Weighting Percent', 'Team Identifier', 'Conference Credit Weighting Percent', 'Life Volume Basis Amount', 'Metric Basis Amount', 'Metric Basis Base Amount', 'Metric Basis Rate', 'Credential Validation State Code', 'Credential Redistribution Code', 'Credential Validation Status Code', 'Credential Validation Effective Date', 'Who To Pay Effective Date', 'Compensation Rule Effective Date', 'Pay Period End Date', 'Settlement Date', 'Adjusted Service Date', 'Field Total Full Time Service Date', 'Commission Basis Amount', 'Commission Basis Split Amount', 'Commission Amount', 'Commission Earning Code', 'Mutual Funds Trail Amount', 'Field Compensation Commission Rate', 'Compensation Split Type Code', 'Primary Service Agent Indicator', 'Field Division Code', 'Product Access Level Code', 'Product Access Role Code', 'Past 12 Months Gross Dealer Concession Type Code', 'Past 12 Months Gross Dealer Concession Amount', 'Transaction Benefit Code', 'Share Class Code', 'Trade Subtype Code', 'Trade Status Code', 'Trade Type Code', 'Vendor Key Code', 'Trust Tax Status Code', 'Source System Code', 'Product Plan Code', 'Level 2 Product Character Code', 'County Code Number', 'Compensable Event Identifier', 'Compensable Event Type Code', 'Month End Market Value Amount', 'Ticket Charge Basis Amount', 'Ticket Charge Split Basis Amount', 'Ticket Charge Amount', 'Ticket Charge Earning Code', 'Administrative Expense Factor Rate', 'Gross Payout Factor Rate', 'Adjust Type Code', 'Reversal Indicator', 'Selling Event Indicator', 'Calculation Type Code', 'True Compensation Sales Transaction Sequence Number', 'Mutual Funds Account Number', 'Mutual Funds Fund Number', 'Application Date', 'Compensable Event Subtype Code', 'Coverage Issue Date', 'Derived Coverage Type Code', 'Face Amount', 'Multi Year Guarantee Reset Indicator', 'Non Proprietary Product Key Code', 'Unpaid Commissions Amount', 'Unpaid Commissions Code', 'Commission Vesting Percent', 'Charge Back Code', 'Charge Back Percent', 'Charge Back Period Month Count', 'Surrender Charge Indicator', 'Customer Compensable Age Value', 'Guarantee Period Years Value', 'Decrease Percent', 'Unscheduled Decrease Amount', 'Financial Representative County Code Number', 'Contract Renew Code', 'Sales Metric Source Process Name', 'Unadjusted Benefit Annual Premium Amount', 'Spousal Discount Percent', 'Risk Class Adjustment Percent', 'Payment Strategy Adjustment Percent', 'Contract Issue Date', 'Contract Issue State Code', 'Compensable Transaction Identifier', 'Truecomp Pay Period Identifier', 'Create User Identifier', 'Vendor Company Name', 'Administrative Officer Name', 'Product Subtype Name', 'Commission Origin Name', 'Compensation Adjustment Reason Full Text', 'Compensation Adjustment Reason Abbreviated Text', 'Compensation Split Subtype Text', 'Invalid Compensation Recipient Identifier', 'Life Volume Amount', 'Sales Metric Transaction Surrogate Key', 'Sales Metric Transaction Identification Number', 'Compensated Job Title Code', 'Level 3 Product Line Of Business Code', 'Level 4 Product Line Of Business Group Code', 'Level 5 Product Line Of Business Subgroup Code'}),    #'Filtered Rows' = Table.SelectRows(#'Removed Columns', each ([Conference Credit Amount] \u003c\u003e null and [Conference Credit Amount] \u003c\u003e 0)),    #'Merged Queries' = Table.NestedJoin(#'Filtered Rows', {'Compensation Payee Agent Surrogate Key'}, #'Workforce Dimension Detail', {'Workforce Dimension Detail Surrogate Key'}, 'Workforce Dimension Detail', JoinKind.Inner),    #'Expanded Workforce Dimension Detail' = Table.ExpandTableColumn(#'Merged Queries', 'Workforce Dimension Detail', {'Employee Identifier'}, {'Employee Identifier'}),    #'Renamed Columns' = Table.RenameColumns(#'Expanded Workforce Dimension Detail',{{'Employee Identifier', 'Comp Employee Identifier'}}),    #'Merged Queries1' = Table.NestedJoin(#'Renamed Columns', {'Process Date'}, #'Distribution Performance Dates Dimension', {'Calendar Day Date'}, 'Distribution Performance Dates Dimension', JoinKind.LeftOuter),    #'Expanded Distribution Performance Dates Dimension' = Table.ExpandTableColumn(#'Merged Queries1', 'Distribution Performance Dates Dimension', {'Date Surrogate Key', 'Calendar Day Date', 'Distribution Performance Reporting Year Number', 'Distribution Performance Reporting Year Week Number', 'Distribution Performance Report Year Text'}, {'Date Surrogate Key', 'Calendar Day Date', 'Distribution Performance Reporting Year Number', 'Distribution Performance Reporting Year Week Number', 'Distribution Performance Report Year Text'}),    #'Filtered Rows1' = Table.SelectRows(#'Expanded Distribution Performance Dates Dimension', each ([Distribution Performance Report Year Text] = 'CURRENT')),    #'Duplicated Column' = Table.DuplicateColumn(#'Filtered Rows1', 'Sponsoring Compensation Recipient Identifier', 'Sponsoring Compensation Recipient Identifier - Copy'),    #'Renamed Columns1' = Table.RenameColumns(#'Duplicated Column',{{'Sponsoring Compensation Recipient Identifier - Copy', 'EMP_ID'}}),    #'Added Conditional Column' = Table.AddColumn(#'Renamed Columns1', 'Rollup_Ind', each if [EMP_ID] = null then 'N' else if [Comp Employee Identifier] \u003c\u003e [EMP_ID] then 'Y' else 'N'),    #'Filtered Rows3' = Table.SelectRows(#'Added Conditional Column', each ([Rollup_Ind] = 'Y'))in    #'Filtered Rows3'"}]},{"name":"ConfCredits","isHidden":false,"columns":[{"name":"Sponsoring Compensation Recipient Surrogate Key","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Process Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Proprietary Product Indicator","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Customer Identification Number","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Conference Credit Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Agent Split Percent","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Metric Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Benefit Contract Number","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Compensation Reporting Roll Up Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Sponsoring Compensation Recipient Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Comp Employee Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Date Surrogate Key","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Calendar Day Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Year Number","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Year Week Number","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Report Year Text","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Rollup_Ind","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Compensation Payee Agent Surrogate Key","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Compensation Agent Version Number","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Sponsoring Agent Version Number","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Contract Surrogate Key","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Benefit Contract Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Commission Option Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Manufacturing Allowable Compensation Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Manufacturing Allowable Compensation Rate","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Manufacturing Allowable Compensation Split Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Annual New Business Premium Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Assigned Representative Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Compensation Payout Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Contract Billing Duration Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Grid Credit Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Grid Credit Base Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Grid Credit Payout Rate","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Grid Credit Rate","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Grid Credit Split Base Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Grid Credit Team Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Minimum Production Credit Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Past 12 Months Grid Credit Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Past 12 Months Grid Credit Effective Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Past 12 Months Life and Health Grid Credit Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Past 12 Months Life and Health Grid Credit Indicator","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Payment Source Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Payment Year Number","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Product Hierarchy Node Level 6 Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Product Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Reporting Roll Up Event Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Reporting Roll Up Product Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Revenue From Related Business Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Transaction Reference GUID Text","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Application Sign State Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Member Relationship Incentive Modifier Rate","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Member Relationship Incentive Rate","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Member Relationship Incentive Fixed Rate","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[{"name":"ShowHideCC","expression":"IF(SUM(\u0027ConfCredits\u0027[Conference Credit Amount]) \u003e 0, '#1C00ff00','White')","isHidden":false},{"name":"Assoc CC","expression":"CALCULATE(sum(\u0027Conference Credits\u0027[Conference Credit Amount]) - sum(ConfCredits[Conference Credit Amount]), Producer[Associate Flag] = 'Y')","isHidden":false},{"name":"Updated CC Amt","expression":"var CC_Assoc =  ''var CC_Non_Assoc = CALCULATE(sum(ConfCredits[Conference Credit Amount]))returnif(SELECTEDVALUE(\u0027Producer\u0027[Associate Flag]) = 'Y',CC_Assoc, CC_Non_Assoc) ","isHidden":false}],"source":[{"expression":"let    Source = Table.Combine({#'Conference Credits', #'Conference Credits - Rollup'})in    Source"}]},{"name":"CONFQUAL","isHidden":false,"columns":[{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CC","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"NM","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"RANK","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"QM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CQ","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"XDAY","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Conf_Qualifer","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Projected Conference Name","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Total Conference Credits","expression":" var _cc=  calculate(sum(\u0027CONFQUAL\u0027[CC])) Return IF(ISBLANK(_cc),0,_cc)","isHidden":false},{"name":"Total New Money","expression":" var _nm=  calculate(sum(\u0027CONFQUAL\u0027[NM])) Return IF(ISBLANK(_nm),0,_nm)","isHidden":false},{"name":"Conference Qualifier","expression":"  var _confQ = SELECTEDVALUE(\u0027CONFQUAL\u0027[Conf_Qualifer])Return IF(ISBLANK(_confQ),'NA',_confQ)","isHidden":false},{"name":"Projected Conference","expression":"  var _ProjConf = SELECTEDVALUE(\u0027CONFQUAL\u0027[Projected Conference Name])Return IF(ISBLANK(_ProjConf),'NA',_ProjConf)","isHidden":false},{"name":"Projected Extra Day","expression":"  var _xday = SELECTEDVALUE(\u0027CONFQUAL\u0027[XDAY])Return IF(ISBLANK(_xday),'NA',_xday)","isHidden":false}],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////VSPUBLIC//CORPSHAR//Project//FRRecognition//recognition.reports//CONFERENCE//CONFQUAL - 090222.CSV'),[Delimiter=',', Columns=7, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'TSID', type text}, {'CC', Int64.Type}, {'NM', Int64.Type}, {'RANK', Int64.Type}, {'QM', type text}, {'CQ', Int64.Type}, {'XDAY', type text}}),    #'Added Conditional Column' = Table.AddColumn(#'Changed Type', 'Projected Conference Name', each if [CQ] = 33 then 'Pinnacle A' else if [CQ] = 32 then 'Pinnacle B' else if [CQ] = 31 then 'Pinnacle C' else if [CQ] = 29 then 'Summit A' else if [CQ] = 28 then 'Summit B' else if [CQ] = 27 then 'Summit C' else if [CQ] = 22 then 'Sierra A' else if [CQ] = 20 then 'Sierra B' else if [CQ] = 40 then 'None' else if [CQ] = 41 then 'None' else null),    #'Added Custom' = Table.AddColumn(#'Added Conditional Column', 'Conf_Qualifer', each [QM] \u0026 ' Conf Cr'),    #'Replaced Value' = Table.ReplaceValue(#'Added Custom','N','No',Replacer.ReplaceText,{'XDAY'}),    #'Replaced Value1' = Table.ReplaceValue(#'Replaced Value','Y','Yes',Replacer.ReplaceText,{'XDAY'})in    #'Replaced Value1'"}]},{"name":"ConferenceCreditsNEW","isHidden":false,"columns":[{"name":"Compensation Payee Agent Surrogate Key","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Compensation Agent Version Number","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Sponsoring Compensation Recipient Surrogate Key","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Sponsoring Agent Version Number","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Contract Surrogate Key","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Process Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Proprietary Product Indicator","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Customer Identification Number","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Conference Credit Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Agent Split Percent","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Metric Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Benefit Contract Number","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Benefit Contract Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Compensation Reporting Roll Up Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Sponsoring Compensation Recipient Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Comp Employee Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Date Surrogate Key","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Calendar Day Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Year Number","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Year Week Number","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Report Year Text","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ROLLUP_IND","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Updated CC Amt NEW","expression":"var CC_Assoc =  ''var CC_Non_Assoc = CALCULATE(sum(ConferenceCreditsNEW[Conference Credit Amount]))returnif(SELECTEDVALUE(\u0027Producer\u0027[Associate Flag]) = 'Y',CC_Assoc, CC_Non_Assoc)","isHidden":false}],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'select a.''Compensation Payee Agent Surrogate Key'',#(lf)       a.''Compensation Agent Version Number'',#(lf)       a.''Sponsoring Compensation Recipient Surrogate Key'',#(lf)       a.''Sponsoring Agent Version Number'',#(lf)       a.''Contract Surrogate Key'',#(lf)       a.''Process Date'',#(lf)       a.''Proprietary Product Indicator'',#(lf)       a.''Customer Identification Number'',#(lf)       a.''Conference Credit Amount'',#(lf)       a.''Agent Split Percent'',#(lf)       a.''Metric Type Code'',#(lf)       a.''Benefit Contract Number'',#(lf)       a.''Benefit Contract Type Code'',#(lf)       a.''Compensation Reporting Roll Up Name'',#(lf)       a.''Sponsoring Compensation Recipient Identifier'',#(lf)       b.''Employee Identifier'' as ''Comp Employee Identifier'',#(lf)       b.''Employee Identifier'',#(lf)      -- b.''Employee Name'',#(lf)      -- b.''Workforce Dimension Detail Surrogate Key'',#(lf)       c.''Date Surrogate Key'',#(lf)       c.''Calendar Day Date'',#(lf)       c.''Distribution Performance Reporting Year Number'',#(lf)       c.''Distribution Performance Reporting Year Week Number'',#(lf)       c.''Distribution Performance Report Year Text'',#(lf)       \u0027N\u0027 as Rollup_Ind#(lf)       #(lf)       #(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sales Metrics Transactions'' as a left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' as b#(lf)    on a.''Compensation Payee Agent Surrogate Key''=b.''Workforce Dimension Detail Surrogate Key''  inner join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Distribution Performance Dates Dimension'' as c#(lf)    on a.''Process Date''= c.''Calendar Day Date''   #(lf)  #(lf) where b.''Current Row Indicator'' = \u0027Y\u0027#(lf)   and a.''Conference Credit Amount'' IS NOT NULL#(lf)  -- and a.''Conference Credit Amount'' \u003e 0#(lf)   and c.''Distribution Performance Report Year Text'' = \u0027CURRENT\u0027#(lf)   and substring(b.''Employee Identifier'',1,2)=\u0027TS\u0027#(lf)   #(lf)Union#(lf)select a.''Compensation Payee Agent Surrogate Key'',#(lf)       a.''Compensation Agent Version Number'',#(lf)       a.''Sponsoring Compensation Recipient Surrogate Key'',#(lf)       a.''Sponsoring Agent Version Number'',#(lf)       a.''Contract Surrogate Key'',#(lf)       a.''Process Date'',#(lf)       a.''Proprietary Product Indicator'',#(lf)       a.''Customer Identification Number'',#(lf)       a.''Conference Credit Amount'',#(lf)       a.''Agent Split Percent'',#(lf)       a.''Metric Type Code'',#(lf)       a.''Benefit Contract Number'',#(lf)       a.''Benefit Contract Type Code'',#(lf)       a.''Compensation Reporting Roll Up Name'',#(lf)       a.''Sponsoring Compensation Recipient Identifier'',#(lf)       b.''Employee Identifier'' as ''Comp Employee Identifier'',#(lf)       a.''Sponsoring Compensation Recipient Identifier'' as EMP_ID,#(lf)      -- b.''Employee Name'',#(lf)      -- b.''Workforce Dimension Detail Surrogate Key'',#(lf)       c.''Date Surrogate Key'',#(lf)       c.''Calendar Day Date'',#(lf)       c.''Distribution Performance Reporting Year Number'',#(lf)       c.''Distribution Performance Reporting Year Week Number'',#(lf)       c.''Distribution Performance Report Year Text'',#(lf)       \u0027Y\u0027 as Rollup_Ind#(lf)       #(lf)       #(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sales Metrics Transactions'' as a left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' as b#(lf)    on a.''Compensation Payee Agent Surrogate Key''=b.''Workforce Dimension Detail Surrogate Key''  inner join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Distribution Performance Dates Dimension'' as c#(lf)    on a.''Process Date''= c.''Calendar Day Date''   #(lf)  #(lf) where b.''Current Row Indicator'' = \u0027Y\u0027#(lf)   and a.''Conference Credit Amount'' IS NOT NULL#(lf)   --and a.''Conference Credit Amount'' \u003e 0#(lf)   and c.''Distribution Performance Report Year Text'' = \u0027CURRENT\u0027#(lf)   and substring(b.''Employee Identifier'',1,2)=\u0027TS\u0027#(lf)   and b.''Employee Identifier'' \u003c\u003e a.''Sponsoring Compensation Recipient Identifier''', null, [EnableFolding=true])in    Source"}]}],"configuredBy":"ravi.sembeti@thrivent.com","configuredById":"79b17600-c299-431a-9821-8fcbd0c38109","isEffectiveIdentityRequired":true,"isEffectiveIdentityRolesRequired":true,"targetStorageMode":"Abf","createdDate":"2022-09-06T19:32:49.387","contentProviderType":"PbixInCompositeMode","schemaMayNotBeUpToDate":true},{"id":"35012b09-889c-4cab-b6d2-1add160a7294","name":"PGCOE Teaming Report","tables":[{"name":"DM_01 Organization Dimension","isHidden":true,"storageMode":"Import","columns":[{"name":"Reports to Identifier","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"Count","dataType":"Int64","isHidden":true,"columnType":"Data"}],"measures":[{"name":"Measure","expression":"Count(\u0027DM_01 Organization Dimension\u0027[Source System Key Text])","isHidden":true}],"source":[{"expression":"let    Source = Sql.Database('dbedwdwprd', 'EnterpriseDataMart'),    #'DM_01_Organization Dimension' = Source{[Schema='DM_01',Item='Organization Dimension']}[Data],    #'Filtered Rows' = Table.SelectRows(#'DM_01_Organization Dimension', each ([Current Row Indicator] = 'Y') and ([Field Professional Roles] = 'Associates' or [Field Professional Roles] = 'Licensed Office Professionals' or [Field Professional Roles] = 'Unlicensed Office Professionals') and ([Employee Status Type Description] = 'Active')),    #'Grouped Rows' = Table.Group(#'Filtered Rows', {'Reports to Identifier'}, {{'Count', each Table.RowCount(_), Int64.Type}}),    #'Sorted Rows' = Table.Sort(#'Grouped Rows',{{'Reports to Identifier', Order.Ascending}}),    #'Trimmed Text' = Table.TransformColumns(#'Sorted Rows',{{'Reports to Identifier', Text.Trim, type text}})in    #'Trimmed Text'"}]},{"name":"Group Sort Order","isHidden":false,"storageMode":"Import","columns":[{"name":"Group","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Order","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i45W8kktSy1KTE9NUQjOz8lX0lEyUYrViVZyLC7OT85MLMnMz1MISU3MBUoYgyXc8otyE3NgYkZgsYCi/LTU4mKgWoSMIVjGLz9PF8MGU6XYWAA=', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Group = _t, Order = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Group', type text}, {'Order', Int64.Type}})in    #'Changed Type'"}]},{"name":"ANBP_OtherRev_SD","isHidden":false,"storageMode":"Import","columns":[{"name":"RALN_RFO_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RALN_MKT_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"COMP_PYEE_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CalYr","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"CalWk","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"max_cal_dt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Value","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"ANBP_OtherRev","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"ANBP M12","expression":"var CurrentDay = LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT], 'CURRENT')returnCALCULATE(SUM(ANBP_OtherRev_SD[Value]),ANBP_OtherRev_SD[ANBP_OtherRev] = 'ANBP', ANBP_OtherRev_SD[max_cal_dt] \u003e= CurrentDay-365.25)","isHidden":false},{"name":"ANBP","expression":"CALCULATE(SUM(ANBP_OtherRev_SD[Value]),ANBP_OtherRev_SD[ANBP_OtherRev] = 'ANBP')","isHidden":false},{"name":"ANBP/FA YTD","expression":"CALCULATE(divide(SUM(ANBP_OtherRev_SD[Value]),[FA Count]),ANBP_OtherRev_SD[ANBP_OtherRev] = 'ANBP', DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT')","isHidden":false},{"name":"WID/FA YTD","expression":"CALCULATE(divide(SUM(ANBP_OtherRev_SD[Value]),[FA Count]),ANBP_OtherRev_SD[ANBP_OtherRev] = 'WID', DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT')","isHidden":false},{"name":"ANBP/FA M12","expression":"var CurrentDay = LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT], 'CURRENT')returnCALCULATE(divide(SUM(ANBP_OtherRev_SD[Value]),[FA Count]),ANBP_OtherRev_SD[ANBP_OtherRev] = 'ANBP', ANBP_OtherRev_SD[max_cal_dt] \u003e= CurrentDay-365.25)","isHidden":false},{"name":"WID/FA M12","expression":"var CurrentDay = LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT], 'CURRENT')returnCALCULATE(divide(SUM(ANBP_OtherRev_SD[Value]),[FA Count]),ANBP_OtherRev_SD[ANBP_OtherRev] = 'WID', ANBP_OtherRev_SD[max_cal_dt] \u003e= CurrentDay-365.25)","isHidden":false},{"name":"WID M12","expression":"var CurrentDay = LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT], 'CURRENT')returnCALCULATE(SUM(ANBP_OtherRev_SD[Value]),ANBP_OtherRev_SD[ANBP_OtherRev] = 'WID', ANBP_OtherRev_SD[max_cal_dt] \u003e= CurrentDay-365.25)","isHidden":false},{"name":"WID","expression":"CALCULATE(SUM(ANBP_OtherRev_SD[Value]),ANBP_OtherRev_SD[ANBP_OtherRev] = 'WID')","isHidden":false},{"name":"ANBP PYTD","expression":"CALCULATE(  sum(ANBP_OtherRev_SD[Value]),  DTRB_PERF_DATES[Cal_PYTD_Flag] in {TRUE}, ANBP_OtherRev_SD[ANBP_OtherRev] = 'ANBP') ","isHidden":false},{"name":"ANBP/FA PYTD","expression":"CALCULATE(divide(SUM(ANBP_OtherRev_SD[Value]),[FA Count]),ANBP_OtherRev_SD[ANBP_OtherRev] = 'ANBP', DTRB_PERF_DATES[Cal_PYTD_Flag] IN {TRUE})","isHidden":false},{"name":"ANBP YTD","expression":"CALCULATE(  sum(ANBP_OtherRev_SD[Value]),  DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'CURRENT', ANBP_OtherRev_SD[ANBP_OtherRev] = 'ANBP') ","isHidden":false},{"name":"WID PYTD","expression":"CALCULATE(  sum(ANBP_OtherRev_SD[Value]),  DTRB_PERF_DATES[Cal_PYTD_Flag] in {TRUE}, ANBP_OtherRev_SD[ANBP_OtherRev] = 'WID') ","isHidden":false},{"name":"WID YTD","expression":"CALCULATE(  sum(ANBP_OtherRev_SD[Value]),  DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'CURRENT', ANBP_OtherRev_SD[ANBP_OtherRev] = 'WID') ","isHidden":false},{"name":"WID/FA PYTD","expression":"CALCULATE(divide(SUM(ANBP_OtherRev_SD[Value]),[FA Count]),ANBP_OtherRev_SD[ANBP_OtherRev] = 'WID', DTRB_PERF_DATES[Cal_PYTD_Flag] IN {TRUE})","isHidden":false},{"name":"ANBP YoY%","expression":"DIVIDE([ANBP YTD]-ANBP_OtherRev_SD[ANBP PYTD],[ANBP PYTD])","isHidden":false},{"name":"ANBP/FA YoY%","expression":"DIVIDE([ANBP/FA YTD]-ANBP_OtherRev_SD[ANBP/FA PYTD],[ANBP/FA PYTD])","isHidden":false},{"name":"WID YoY%","expression":"DIVIDE([WID YTD]-[WID PYTD],[WID PYTD])","isHidden":false},{"name":"WID/FA YoY%","expression":"DIVIDE([WID/FA YTD]-[WID/FA PYTD],[WID/FA PYTD])","isHidden":false},{"name":"ANBP/FA","expression":"DIVIDE(CALCULATE(SUM(ANBP_OtherRev_SD[Value]),ANBP_OtherRev_SD[ANBP_OtherRev] = 'ANBP'),[FA Count])","isHidden":false},{"name":"WID/FA","expression":"DIVIDE(CALCULATE(SUM(ANBP_OtherRev_SD[Value]),ANBP_OtherRev_SD[ANBP_OtherRev] = 'WID'),[FA Count])","isHidden":false},{"name":"Grid Revenue YTD (csv file)","expression":"CALCULATE(     sum(ANBP_OtherRev_SD[Value]),     DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'CURRENT',    ANBP_OtherRev_SD[ANBP_OtherRev] = 'Grid Revenue')","isHidden":false}],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////vsshr//shared////Public//DI and BI//Distribution Dashboard//ANBP_OtherRev_SD.csv'),[Delimiter=',', Columns=12, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'RALN_RFO_CDE', type text}, {'RALN_MKT_CDE', type text}, {'COMP_PYEE_ID', type text}, {'EMP_NM', type text}, {'CalYr', Int64.Type}, {'CalWk', Int64.Type}, {'max_cal_dt', type date}, {'Product', type text}, {'Value', type number}, {'ANBP_OtherRev', type text}}),    #'Appended WID' = Table.Combine({#'Changed Type', WID_Snowflake}),    #'Remove WID CurrentWeek rows' = Table.SelectRows(#'Appended WID', each [Current Week Indicator] \u003c\u003e 'Current Week WID'),    #'Remove WID CurrentWeek column' = Table.RemoveColumns(#'Remove WID CurrentWeek rows',{'Current Week Indicator'})in    #'Remove WID CurrentWeek column'"}]},{"name":"New Clients","isHidden":false,"storageMode":"Import","columns":[{"name":"DT_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CTRC_VRSN_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"WRTG_AGT_VRSN_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"FIN_CUST_PNT_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CUST_AGE","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"AGE_CLAS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"AGE_CLAS_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FIN_CUST_PNT_VLU","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CUST_LGAL_FMT_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CUST_BRTH_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"MBR_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MBR_TYP_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RSDL_ST_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CTRC_ISS_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"L5_PLOB_SGRP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"L5_PLOB_SGRP_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"L4_PLOB_GRP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"L4_PLOB_GRP_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"L3_PROD_LOB_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"L3_PROD_LOB_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"L2_PROD_CHAR_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"L2_PROD_CHAR_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PARY_DSPL_2_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FRST_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MDDL_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LST_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ADJ_SVC_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_STS_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_STS_TYP_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CURR_ROW_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CAL_DAY_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"CAL_MTH_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CAL_MTH_STRT_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"CAL_MTH_END_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"CAL_YR_QTR_NBR","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CAL_QTR_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CAL_WK_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FIN_CUST_PNT_RSN_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FIN_CUST_PNT_RSN_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CTRC_RLTN_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CTRC_RLTN_TYP_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MEMBER_AGE_GROUP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MEMBER_AGE","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_END_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_WK_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_DAY_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_MTH_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_QTR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SALE_HIER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EFF_BEG_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"EFF_END_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"CURR_ROW_IND2","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PRTR_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MANP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_ZONE_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_ZONE_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_DEPT_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_DEPT_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_DIV_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_DIV_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SALE_HIER_DIM_SK","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[{"name":"New Clients M12","expression":"var CurrentDay = LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT], 'CURRENT')returnCALCULATE(SUM(\u0027New Clients\u0027[FIN_CUST_PNT_VLU]),\u0027New Clients\u0027[CAL_DAY_DT] \u003e= CurrentDay-365.25)","isHidden":false},{"name":"New Clients","expression":"CALCULATE(SUM(\u0027New Clients\u0027[FIN_CUST_PNT_VLU]))","isHidden":false},{"name":"New Clients/FA YTD","expression":"CALCULATE(divide(SUM(\u0027New Clients\u0027[FIN_CUST_PNT_VLU]),[FA Count]),DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT')","isHidden":false},{"name":"New Clients/FA M12","expression":"var CurrentDay = LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT], 'CURRENT')returnCALCULATE(divide(SUM(\u0027New Clients\u0027[FIN_CUST_PNT_VLU]),[FA Count]),\u0027New Clients\u0027[CAL_DAY_DT] \u003e= CurrentDay-365.25)","isHidden":false},{"name":"New Clients/FA PYTD","expression":"CALCULATE(divide(SUM(\u0027New Clients\u0027[FIN_CUST_PNT_VLU]),[FA Count]),DTRB_PERF_DATES[Cal_PYTD_Flag] IN {TRUE})","isHidden":false},{"name":"New Clients YTD","expression":"CALCULATE(SUM(\u0027New Clients\u0027[FIN_CUST_PNT_VLU]),DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT')","isHidden":false},{"name":"New Clients PYTD","expression":"CALCULATE(SUM(\u0027New Clients\u0027[FIN_CUST_PNT_VLU]),DTRB_PERF_DATES[Cal_PYTD_Flag] IN {TRUE})","isHidden":false},{"name":"New Clients YoY%","expression":"DIVIDE([New Clients YTD]-[New Clients PYTD],[New Clients PYTD])","isHidden":false},{"name":"New Clients/FA YoY%","expression":"DIVIDE([New Clients/FA YTD]-[New Clients/FA PYTD],[New Clients/FA PYTD])","isHidden":false},{"name":"New Clients/FA","expression":"DIVIDE(CALCULATE(SUM(\u0027New Clients\u0027[FIN_CUST_PNT_VLU])),[FA Count])","isHidden":false}],"source":[{"expression":"let    Source = DB2.Database('podwh021:50000', 'podwh021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT IA_DATES_ITRL.DT_SK,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.CTRC_VRSN_NBR,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.WRTG_AGT_VRSN_NBR,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_STS_CDE,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.CUST_AGE,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.AGE_CLAS_CDE,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.AGE_CLAS_DSCR,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_VLU,#(lf)       CNF_CUSTOMER_DIM_CFDL.CUST_LGAL_FMT_NM, #(lf)       CNF_CUSTOMER_DIM_CFDL.CUST_BRTH_DT,#(lf)       CNF_CUSTOMER_DIM_CFDL.MBR_TYP_CDE,#(lf)       CNF_CUSTOMER_DIM_CFDL.MBR_TYP_DSCR,#(lf)       CNF_CUSTOMER_DIM_CFDL.RSDL_ST_CDE,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.CTRC_ISS_DT, #(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L5_PLOB_SGRP_CDE,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L5_PLOB_SGRP_DSCR,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L4_PLOB_GRP_CDE,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L4_PLOB_GRP_DSCR,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L3_PROD_LOB_CDE,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L3_PROD_LOB_DSCR,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L2_PROD_CHAR_CDE,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L2_PROD_CHAR_DSCR,#(lf)       AGT_DIM_CURR_CFDL.PARY_DSPL_2_NM,#(lf)       AGT_DIM_CURR_CFDL.FRST_NM,#(lf)       AGT_DIM_CURR_CFDL.MDDL_NM,#(lf)       AGT_DIM_CURR_CFDL.LST_NM,#(lf)       AGT_DIM_CURR_CFDL.ADJ_SVC_DT,#(lf)       AGT_DIM_CURR_CFDL.EMP_ID,#(lf)       AGT_DIM_CURR_CFDL.EMP_STS_TYP_CDE,#(lf)       AGT_DIM_CURR_CFDL.EMP_STS_TYP_DSCR,#(lf)       AGT_DIM_CURR_CFDL.JOB_TYP_CDE,#(lf)       AGT_DIM_CURR_CFDL.JOB_TYP_DSCR,#(lf)       AGT_DIM_CURR_CFDL.CURR_ROW_IND,#(lf)       IA_DATES_ITRL.CAL_DAY_DT,#(lf)       IA_DATES_ITRL.CAL_MTH_NM,#(lf)       IA_DATES_ITRL.CAL_MTH_STRT_DT,#(lf)       IA_DATES_ITRL.CAL_MTH_END_DT,#(lf)       IA_DATES_ITRL.CAL_YR_QTR_NBR,#(lf)       IA_DATES_ITRL.CAL_QTR_NM,#(lf)       IA_DATES_ITRL.CAL_WK_NM,#(lf)       FIN_CUST_ELIG_DIM_CFDL.FIN_CUST_PNT_RSN_CDE,#(lf)       FIN_CUST_ELIG_DIM_CFDL.FIN_CUST_PNT_RSN_DSCR,#(lf)       FIN_CUST_ELIG_DIM_CFDL.CTRC_RLTN_TYP_CDE,#(lf)       FIN_CUST_ELIG_DIM_CFDL.CTRC_RLTN_TYP_DSCR,#(lf)       CASE#(lf)          WHEN (CUST_AGE \u003e= 0) AND (CUST_AGE \u003c= 15) THEN \u00270-15\u0027#(lf)          WHEN (CUST_AGE \u003e= 16) AND (CUST_AGE \u003c= 25) THEN \u002716-25\u0027#(lf)          WHEN (CUST_AGE \u003e= 26) AND (CUST_AGE \u003c= 35) THEN \u002726-35\u0027#(lf)          WHEN (CUST_AGE \u003e= 36) AND (CUST_AGE \u003c= 45) THEN \u002736-45\u0027#(lf)          WHEN (CUST_AGE \u003e= 46) AND (CUST_AGE \u003c= 55) THEN \u002746-55\u0027#(lf)          WHEN (CUST_AGE \u003e= 56) AND (CUST_AGE \u003c= 65) THEN \u002756-65\u0027#(lf)          WHEN (CUST_AGE \u003e= 66) AND (CUST_AGE \u003c= 75) THEN \u002766-75\u0027#(lf)          WHEN CUST_AGE \u003e 75 THEN \u002776+\u0027#(lf)       END#(lf)          AS Member_Age_Group,#(lf)       integer (floor ( (CURRENT DATE - CUST_BRTH_DT) / 10000)) AS Member_Age,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_WK_END_DT,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_WK_NBR,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_YR_NBR,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_YR_WK_NBR,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_WK_TXT,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_YR_TXT,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_DAY_TXT,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_MTH_TXT,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_QTR_TXT,#(lf)       SALE_HIER_DIM.SALE_HIER_ID,#(lf)       SALE_HIER_DIM.EFF_BEG_TMSP,#(lf)       SALE_HIER_DIM.EFF_END_TMSP,#(lf)       SALE_HIER_DIM.CURR_ROW_IND,#(lf)       SALE_HIER_DIM.PRTR_NM,#(lf)       SALE_HIER_DIM.MANP_NM,#(lf)       SALE_HIER_DIM.ORZN_ZONE_CDE,#(lf)       SALE_HIER_DIM.ORZN_ZONE_DSCR,#(lf)       (LEFT(SALE_HIER_DIM.ORZN_ZONE_CDE,4)) as ORZN_DEPT_CDE,#(lf)       SALE_HIER_DIM.ORZN_DEPT_DSCR,#(lf)       SALE_HIER_DIM.ORZN_DIV_CDE,#(lf)       SALE_HIER_DIM.ORZN_DIV_DSCR,#(lf)       SALE_HIER_DIM.SALE_HIER_DIM_SK#(lf)#(lf)  FROM ((((((COMMON.IA_DATES_ITRL IA_DATES_ITRL#(lf)             INNER JOIN COMMON.DTRB_PERF_DATES DTRB_PERF_DATES#(lf)                ON (IA_DATES_ITRL.DT_SK = DTRB_PERF_DATES.DT_SK))#(lf)            LEFT OUTER JOIN#(lf)            SALES.TF_FIN_CUST_EVT_FCT_CFDL TF_FIN_CUST_EVT_FCT_CFDL#(lf)               ON (IA_DATES_ITRL.DT_SK =#(lf)                      TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_CRNG_DT_SK))#(lf)           RIGHT OUTER JOIN HUMAN_RESOURCES.SALE_HIER_DIM SALE_HIER_DIM#(lf)              ON (SALE_HIER_DIM.SALE_HIER_DIM_SK =#(lf)                     TF_FIN_CUST_EVT_FCT_CFDL.SLHR_DIM_CURR_CRNG_AGT_SK))#(lf)          LEFT OUTER JOIN MEMBER.CNF_CUSTOMER_DIM_CFDL CNF_CUSTOMER_DIM_CFDL#(lf)             ON (CNF_CUSTOMER_DIM_CFDL.CUST_SK =#(lf)                    TF_FIN_CUST_EVT_FCT_CFDL.CUST_SK))#(lf)        LEFT OUTER JOIN HUMAN_RESOURCES.AGT_DIM_CURR_CFDL AGT_DIM_CURR_CFDL#(lf)            ON (AGT_DIM_CURR_CFDL.AGT_DIM_SK =#(lf)                   TF_FIN_CUST_EVT_FCT_CFDL.CRNG_AGT_SK))#(lf)        RIGHT OUTER JOIN SALES.FIN_CUST_ELIG_DIM_CFDL FIN_CUST_ELIG_DIM_CFDL#(lf)           ON (FIN_CUST_ELIG_DIM_CFDL.FIN_CUST_PNT_ELIG_DIM_SK =#(lf)                  TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_ELIG_DIM_SK))#(lf)       LEFT OUTER JOIN#(lf)       CONTRACT.CNF_CONTRACT_DIM_DTL_CFDL CNF_CONTRACT_DIM_DTL_CFDL#(lf)          ON     (CNF_CONTRACT_DIM_DTL_CFDL.CTRC_SK =#(lf)                     TF_FIN_CUST_EVT_FCT_CFDL.CTRC_SK)#(lf)            and   (CNF_CONTRACT_DIM_DTL_CFDL.VRSN_NBR =#(lf)                     TF_FIN_CUST_EVT_FCT_CFDL.CTRC_VRSN_NBR)#(lf)WHERE     (AGT_DIM_CURR_CFDL.CURR_ROW_IND = \u0027Y\u0027)#(lf)     #(lf)       AND (SALE_HIER_DIM.CURR_ROW_IND = \u0027Y\u0027)#(lf)       AND sale_hier_dim.ORZN_DEPT_CDE in (\u00270001\u0027, \u00270115\u0027,\u00270190\u0027,\u00270283\u0027,\u00270291\u0027,\u00270361\u0027, \u00270383\u0027, \u00270384\u0027,\u00270435\u0027,\u00270525\u0027,\u00270716\u0027)#(lf)       AND DTRB_PERF_DATES.DTRB_PERF_RPT_YR_NBR in (\u00272022\u0027,\u00272023\u0027,\u00272024\u0027)#(lf)'])in    Source"}]},{"name":"Switch","isHidden":false,"storageMode":"Import","columns":[{"name":"Metric","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team Indicator","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"SelectedMetric","expression":"IF(HASONEVALUE(\u0027Switch\u0027[Metric]),SWITCH(VALUES(\u0027Switch\u0027[Metric]),'ANBP/FA', ANBP_OtherRev_SD[ANBP/FA YTD],'WID/FA', ANBP_OtherRev_SD[WID/FA YTD],'New Clients/FA', \u0027New Clients\u0027[New Clients/FA YTD]))","isHidden":false}],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i45WcvRzCtB3c1TSUfLPUwhJTcxVitWJVgr3dIEI+uWXKOQjSfillis452Sm5pUUQxQoxcYCAA==', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Metric = _t, #'Team Indicator' = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Metric', type text}})in    #'Changed Type'"}]},{"name":"DTRB_PERF_DATES","isHidden":false,"storageMode":"Import","columns":[{"name":"DT_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CAL_DAY_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_END_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_WK_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"SRC_SYS_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CRET_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"LST_UPDT_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"CRET_USER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LST_UPDT_USER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_DAY_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_MTH_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_QTR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Year Month","dataType":"String","isHidden":false,"expression":"DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]\u0026'-'\u0026format(DTRB_PERF_DATES[CAL_DAY_DT],'MMM')","columnType":"Calculated"},{"name":"Today or Before","dataType":"String","isHidden":false,"expression":"if(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT]\u003eNOW()-1,'N','Y')","columnType":"Calculated"},{"name":"Cal_PYTD_Flag","dataType":"String","isHidden":false,"expression":"if(and(DTRB_PERF_DATES[CAL_DAY_DT] \u003c= DTRB_PERF_DATES[PYTD DATE], DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'PREVIOUS'), True, False)","columnType":"Calculated"},{"name":"PYTD Flag","dataType":"String","isHidden":false,"expression":"var prevweeknum = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[CAL_DAY_DT],max(DTRB_PERF_DATES[Prior Sunday]))return if(and(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] \u003c= prevweeknum, DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='PREVIOUS'), True, False)","columnType":"Calculated"},{"name":"Prior Sunday","dataType":"String","isHidden":false,"expression":"LOOKUPVALUE(DTRB_PERF_DATES[END_OF_WK_DATE_MAX], DTRB_PERF_DATES[CAL_DAY_DT], LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT') -6)","columnType":"Calculated"},{"name":"END_OF_WK_DATE_MAX","dataType":"String","isHidden":false,"expression":"calculate(max(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT]), ALLEXCEPT(DTRB_PERF_DATES,DTRB_PERF_DATES[perf_yr_wk]))","columnType":"Calculated"},{"name":"perf_yr_wk","dataType":"String","isHidden":false,"expression":"DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR] \u0026 '-' \u0026 DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR]","columnType":"Calculated"}],"measures":[{"name":"PYTD DATE","expression":"(LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT], today() -5 )) - 364","isHidden":false}],"source":[{"expression":"let    Source = DB2.Database('podwh021:50000', 'podwh021', [HierarchicalNavigation=true, Implementation='Microsoft']),    COMMON = Source{[Schema='COMMON']}[Data],    DTRB_PERF_DATES1 = COMMON{[Name='DTRB_PERF_DATES']}[Data]in    DTRB_PERF_DATES1"}]},{"name":"Date Sort Order","isHidden":false,"storageMode":"Import","columns":[{"name":"Year Month","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Order","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('TdK9agNBDATgd7nagV1Jez9lIKQwOClSGheOOdKExIQ44LfParXcTPuxSDO6Ox4HSSIP+/PXsBvycNp1eF7fKwjgcP6poIDHq4Pxi3uFAtjffOjI8Flhohm3jwoz4G29VlgAr5dfD5YgL99/LpT1ab24bGG1p88GiXB5YvH8uUBiuWRI7BKFRB6hXdEyzyxeMy8kcV6aE9fLI0m7hSRI9JKthfU5UiD9O42Q6CUTJHbJzG/8GrLQ5NZCE4u30ExzWkIVSFxMFRL3UcocN1TKHL10y1x6L50g0UtnSP8BF0j/AxO/8V6WaXLrZcLivUxpTutlBoleViDRyyhz9DLKHL2sZj79Aw==', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [#'Year Month' = _t, Order = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Year Month', type text}, {'Order', Int64.Type}})in    #'Changed Type'"}]},{"name":"Grid Revenue Snowflake","isHidden":false,"storageMode":"Import","columns":[{"name":"Calendar Day Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Report Year Text","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Year Number","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Year Week Number","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Employee Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Rollup Agent Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Compensation Employee Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Compensation Reporting Roll Up Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Compensation Level 5 Product Line Of Business Subgroup Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Reporting Roll Up Product Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Reporting Roll Up Event Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Compensation Level 2 Product Character Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CMPAGT_EQ_ROLLUP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"New Sales Credit Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Gross Dealer Concessions Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Grid Credit Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Product Category","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"First Year Life \u0026 Health Flag (GridRev only)","dataType":"String","isHidden":false,"expression":"IF(\u0027Grid Revenue Snowflake\u0027[Product Category]='Life \u0026 Health' \u0026\u0026 \u0027Grid Revenue Snowflake\u0027[Reporting Roll Up Event Description]='First Year','FY Life \u0026 Health','All Other Products/Events')","columnType":"Calculated"}],"measures":[{"name":"Last 24 Months Grid Revenue","expression":"  var min_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])-730  Var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])  var _gridtotal = calculate(sum(\u0027Grid Revenue Snowflake\u0027[Grid Credit Amount]),DTRB_PERF_DATES[CAL_DAY_DT] \u003e= min_date, DTRB_PERF_DATES[CAL_DAY_DT] \u003c= max_date)ReturnIF(ISBLANK(_gridtotal),0,_gridtotal)","isHidden":false},{"name":"Last 24 Months LH Grid Revenue","expression":"  var min_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])-730  Var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])  var _gridtotal = calculate(sum(\u0027Grid Revenue Snowflake\u0027[Grid Credit Amount]),DTRB_PERF_DATES[CAL_DAY_DT] \u003e= min_date, DTRB_PERF_DATES[CAL_DAY_DT] \u003c= max_date,\u0027Grid Revenue Snowflake\u0027[Product Category]='Life \u0026 Health')ReturnIF(ISBLANK(_gridtotal),0,_gridtotal)","isHidden":false},{"name":"Grid Revenue M12","expression":" var min_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])-365 Var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT]) var _gridtotal = calculate(sum(\u0027Grid Revenue Snowflake\u0027[Grid Credit Amount]),DTRB_PERF_DATES[CAL_DAY_DT] \u003e= min_date, DTRB_PERF_DATES[CAL_DAY_DT] \u003c= max_date)ReturnIF(ISBLANK(_gridtotal),0,_gridtotal)","isHidden":false},{"name":"Grid Revenue YTD","expression":"  var _gridtotal = calculate(sum(\u0027Grid Revenue Snowflake\u0027[Grid Credit Amount]),DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT')ReturnIF(ISBLANK(_gridtotal),0,_gridtotal)","isHidden":false},{"name":"LH Grid Revenue M12","expression":"// var min_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])-365//  Var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT]) var CurrentDay = LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT], 'CURRENT')returnCALCULATE(SUM(\u0027Grid Revenue Snowflake\u0027[Grid Credit Amount]), \u0027Grid Revenue Snowflake\u0027[Calendar Day Date]\u003e= CurrentDay-365.25 \u0026\u0026 \u0027Grid Revenue Snowflake\u0027[Product Category] = 'Life \u0026 Health') // var _gridtotal = calculate(sum(\u0027Grid Revenue Snowflake\u0027[Grid Credit Amount]),DTRB_PERF_DATES[CAL_DAY_DT] \u003e= min_date, DTRB_PERF_DATES[CAL_DAY_DT] \u003c= max_date,\u0027Grid Revenue Snowflake\u0027[Product Category]='Life \u0026 Health')//Return//IF(ISBLANK(_gridtotal),0,_gridtotal)","isHidden":false},{"name":"LH Grid Revenue YTD","expression":"  var _gridtotal = calculate(sum(\u0027Grid Revenue Snowflake\u0027[Grid Credit Amount]),DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT',\u0027Grid Revenue Snowflake\u0027[Product Category]='Life \u0026 Health', \u0027Grid Revenue Snowflake\u0027[Reporting Roll Up Event Description]='First Year')ReturnIF(ISBLANK(_gridtotal),0,_gridtotal)","isHidden":false},{"name":"Grid Revenue/FA YTD","expression":"divide([Grid Revenue YTD],[FA Count])","isHidden":false},{"name":"LH Grid Revenue/FA YTD","expression":"divide([LH Grid Revenue YTD],[FA Count])","isHidden":false},{"name":"Grid Revenue/FA M12","expression":"divide([Grid Revenue M12],[FA Count])","isHidden":false},{"name":"LH Grid Revenue/FA M12","expression":"divide([LH Grid Revenue M12],[FA Count])","isHidden":false},{"name":"Max Grid Revenue Date","expression":"MAX(\u0027Grid Revenue Snowflake\u0027[Calendar Day Date])","isHidden":false},{"name":"Grid Revenue PYTD","expression":"  var _gridtotalpytd = calculate(sum(\u0027Grid Revenue Snowflake\u0027[Grid Credit Amount]),DTRB_PERF_DATES[Cal_PYTD_Flag] IN {TRUE})ReturnIF(ISBLANK(_gridtotalpytd),0,_gridtotalpytd)","isHidden":false},{"name":"Grid Revenue YOY%","expression":"DIVIDE(\u0027Grid Revenue Snowflake\u0027[Grid Revenue YTD]-\u0027Grid Revenue Snowflake\u0027[Grid Revenue PYTD],\u0027Grid Revenue Snowflake\u0027[Grid Revenue PYTD])","isHidden":false}],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'select b.''Calendar Day Date'',#(lf)       b.''Distribution Performance Report Year Text'',#(lf)       b.''Distribution Performance Reporting Year Number'',#(lf)       b.''Distribution Performance Reporting Year Week Number'',#(lf)       a.''Employee Identifier'',#(lf)       a.''Rollup Agent Identifier'',#(lf)       a.''Employee Identifier'' as ''Compensation Employee Identifier'',#(lf)       a.''Compensation Reporting Roll Up Name'',#(lf)       --c.''Benefit Contract Number'',#(lf)       a.''Compensation Level 5 Product Line Of Business Subgroup Code'',#(lf)       a.''Reporting Roll Up Product Description'',#(lf)       a.''Reporting Roll Up Event Description'',#(lf)       a.''Compensation Level 2 Product Character Code'',#(lf)       case when a.''Employee Identifier'' = a.''Rollup Agent Identifier'' then \u0027Y\u0027#(lf)         else \u0027N\u0027#(lf)       end as CMPAGT_EQ_ROLLUP,#(lf)       sum(a.''New Sales Credit Amount'') as ''New Sales Credit Amount'',#(lf)       sum(a.''Gross Dealer Concessions Amount'') as ''Gross Dealer Concessions Amount'',#(lf)       sum(a.''Grid Credit Amount'') as ''Grid Credit Amount''#(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Compensation and Sales Metrics Fact'' as a left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Distribution Performance Dates Dimension'' as b#(lf)    on a.''Distribution Performance Dates Surrogate Key''=b.''Date Surrogate Key''  left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Conformed Contract Dimension Detail'' as c#(lf)    on (a.''Contract Surrogate Key''=c.''Contract Surrogate Key''),#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' as aa    #(lf)  #(lf) where a.''Employee Identifier''= aa.''Employee Identifier'' #(lf)   and b.''Distribution Performance Reporting Year Number'' in (\u00272022\u0027,\u00272023\u0027,\u00272024\u0027)  #(lf)   and ((a.''New Sales Credit Amount'' \u003c 0.00 or a.''New Sales Credit Amount'' \u003e 0.00) or#(lf)        (a.''Gross Dealer Concessions Amount'' \u003c 0.00 or a.''Gross Dealer Concessions Amount'' \u003e 0.00) or#(lf)        (a.''Grid Credit Amount'' is not NULL))#(lf)   and substring(a.''Employee Identifier'',1,2) = \u0027TS\u0027#(lf)   --and a.''Employee Identifier'' in (\u0027TS45118\u0027)#(lf)   --and b.''Calendar Day Date'' \u003e= \u00272022-03-01\u0027 and b.''Calendar Day Date'' \u003c= \u00272022-03-31\u0027#(lf)   and c.''Current Row Indicator'' =\u0027Y\u0027#(lf)   and aa.''Current Row Indicator'' = \u0027Y\u0027#(lf)   and a.''Source System Code Description'' in (\u0027Life and Annuity Trails Fact\u0027,\u0027Sales Metric Transaction\u0027,\u0027Sales Metric Adjustment\u0027)#(lf)#(lf)   and (  aa.''Organization Department Code'' \u003c\u003e \u00270383\u0027   #(lf)     or (a.''Reporting Roll Up Event Code'' \u003c\u003e\u0027REN\u0027#(lf)     and  (a.''Reporting Roll Up Event Code'' \u003c\u003e \u0027AB\u0027 or  ''Compensation Level 2 Product Character Code'' not in (\u0027RISK\u0027, \u0027ANN\u0027))#(lf)     and  a.''Financial Professional Revenue Hierarchy Level 2 Code'' \u003c\u003e (\u0027AB_MF_12B1\u0027)))#(lf)   #(lf)    #(lf) group by b.''Calendar Day Date'', b.''Distribution Performance Report Year Text'', b.''Distribution Performance Reporting Year Number'',#(lf)          b.''Distribution Performance Reporting Year Week Number'', a.''Employee Identifier'', a.''Rollup Agent Identifier'',#(lf)          --c.''Benefit Contract Number'',#(lf)          a.''Compensation Reporting Roll Up Name'',#(lf)          a.''Compensation Level 5 Product Line Of Business Subgroup Code'',#(lf)          a.''Reporting Roll Up Product Description'',#(lf)          a.''Reporting Roll Up Event Description'',#(lf)          a.''Compensation Level 2 Product Character Code'' #(lf)           #(lf)UNION#(lf)select b.''Calendar Day Date'',#(lf)       b.''Distribution Performance Report Year Text'',#(lf)       b.''Distribution Performance Reporting Year Number'',#(lf)       b.''Distribution Performance Reporting Year Week Number'',#(lf)       a.''Rollup Agent Identifier'' as ''Employee Identifier'',#(lf)       a.''Rollup Agent Identifier'',#(lf)       a.''Employee Identifier'' as ''Compensation Employee Identifier'',#(lf)       a.''Compensation Reporting Roll Up Name'',#(lf)       --c.''Benefit Contract Number'',#(lf)       a.''Compensation Level 5 Product Line Of Business Subgroup Code'',#(lf)       a.''Reporting Roll Up Product Description'',#(lf)       a.''Reporting Roll Up Event Description'',#(lf)       a.''Compensation Level 2 Product Character Code'',#(lf)       case when a.''Employee Identifier'' = a.''Rollup Agent Identifier'' then \u0027Y\u0027#(lf)         else \u0027N\u0027#(lf)       end as CMPAGT_EQ_ROLLUP,#(lf)       sum(a.''New Sales Credit Amount'') as ''New Sales Credit Amount'',#(lf)       sum(a.''Gross Dealer Concessions Amount'') as ''Gross Dealer Concessions Amount'',#(lf)       sum(a.''Grid Credit Amount'') as ''Grid Credit Amount''#(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Compensation and Sales Metrics Fact'' as a left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Distribution Performance Dates Dimension'' as b#(lf)    on a.''Distribution Performance Dates Surrogate Key''=b.''Date Surrogate Key''  left join#(lf)         ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Conformed Contract Dimension Detail'' as c#(lf)    on (a.''Contract Surrogate Key''=c.''Contract Surrogate Key''),#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' as aa    #(lf)    #(lf) where a.''Rollup Agent Identifier'' = aa.''Employee Identifier''#(lf)   and b.''Distribution Performance Reporting Year Number'' in (\u00272022\u0027,\u00272023\u0027,\u00272024\u0027)  #(lf)   and ((a.''New Sales Credit Amount'' \u003c 0.00 or a.''New Sales Credit Amount'' \u003e 0.00) or#(lf)        (a.''Gross Dealer Concessions Amount'' \u003c 0.00 or a.''Gross Dealer Concessions Amount'' \u003e 0.00) or#(lf)        (a.''Grid Credit Amount'' is not NULL))#(lf)   and substring(a.''Employee Identifier'',1,2) = \u0027TS\u0027#(lf)   --and a.''Rollup Agent Identifier'' in (\u0027TS45118\u0027)#(lf)   --and b.''Calendar Day Date'' \u003e= \u00272022-03-01\u0027 and b.''Calendar Day Date'' \u003c= \u00272022-03-31\u0027#(lf)   and c.''Current Row Indicator'' =\u0027Y\u0027#(lf)   and aa.''Current Row Indicator'' = \u0027Y\u0027#(lf)   and a.''Source System Code Description'' in (\u0027Life and Annuity Trails Fact\u0027,\u0027Sales Metric Transaction\u0027,\u0027Sales Metric Adjustment\u0027)#(lf)#(lf)   and (  aa.''Organization Department Code'' \u003c\u003e \u00270383\u0027   #(lf)      or (a.''Reporting Roll Up Event Code'' \u003c\u003e\u0027REN\u0027#(lf)     and  (a.''Reporting Roll Up Event Code'' \u003c\u003e \u0027AB\u0027 or  ''Compensation Level 2 Product Character Code'' not in (\u0027RISK\u0027, \u0027ANN\u0027))#(lf)     and  a.''Financial Professional Revenue Hierarchy Level 2 Code'' \u003c\u003e (\u0027AB_MF_12B1\u0027)))#(lf) #(lf)group by b.''Calendar Day Date'', b.''Distribution Performance Report Year Text'', b.''Distribution Performance Reporting Year Number'',#(lf)          b.''Distribution Performance Reporting Year Week Number'', a.''Employee Identifier'', a.''Rollup Agent Identifier'',#(lf)          --c.''Benefit Contract Number'',#(lf)          a.''Compensation Reporting Roll Up Name'', a.''Compensation Level 5 Product Line Of Business Subgroup Code'',#(lf)          a.''Reporting Roll Up Product Description'',#(lf)          a.''Reporting Roll Up Event Description'',#(lf)          a.''Compensation Level 2 Product Character Code''', null, [EnableFolding=true]),    #'Added Conditional Column' = Table.AddColumn(Source, 'Product Category', each if [Compensation Level 2 Product Character Code] = 'ANN' then 'Annuity' else if [Compensation Level 2 Product Character Code] = 'INVEST' then 'Investments' else if [Compensation Level 2 Product Character Code] = 'BANK' then 'Investments' else if [Compensation Level 2 Product Character Code] = 'RISK' then 'Life \u0026 Health' else null)in    #'Added Conditional Column'"}]},{"name":"Splits","isHidden":false,"storageMode":"Import","columns":[{"name":"Compensation Payee Agent Surrogate Key","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Contract","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Non-Split","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"RSA/Blanket","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[{"name":"RSA/Blanket Split %","expression":"sum(Splits[RSA/Blanket])/(sum(Splits[Non-Split])+sum(Splits[Contract])+sum(Splits[RSA/Blanket]))","isHidden":false},{"name":"Contract Split %","expression":"sum(Splits[Contract])/(sum(Splits[Non-Split])+sum(Splits[Contract])+sum(Splits[RSA/Blanket]))","isHidden":false},{"name":"Non Split %","expression":"sum(Splits[Non-Split])/(sum(Splits[Non-Split])+sum(Splits[Contract])+sum(Splits[RSA/Blanket]))","isHidden":false}],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'select ''Compensation Payee Agent Surrogate Key'', ''Compensation Split Type Code'', ''Agent Split Percent'', sum(''Grid Credit Amount'')#(lf)from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sales Metrics Transactions''#(lf)where ''Process Date'' \u003e= add_months(CURRENT_DATE, -12)#(lf)group by ''Compensation Payee Agent Surrogate Key'', ''Compensation Split Type Code'', ''Agent Split Percent''#(lf)order by ''Compensation Payee Agent Surrogate Key'', ''Compensation Split Type Code'', ''Agent Split Percent''', null, [EnableFolding=true]),    #'Renamed Columns' = Table.RenameColumns(Source,{{'Compensation Split Type Code', 'Split Type Code'}}),    #'Appended Query' = Table.Combine({#'Renamed Columns', Query1}),    #'Added Custom' = Table.AddColumn(#'Appended Query', 'Split Type', each if([Agent Split Percent]=100 and [Split Type Code]='CTRC') then 'Non-Split'else if [Split Type Code]='CTRC' then 'Contract'else if [Split Type Code]='BLKT' then 'RSA/Blanket'else if [Split Type Code]='REVS' then 'RSA/Blanket'else 'Non-Split'),    #'Renamed Columns1' = Table.RenameColumns(#'Added Custom',{{'SUM(''GRID CREDIT AMOUNT'')', 'Grid Revenue'}}),    #'Removed Columns' = Table.RemoveColumns(#'Renamed Columns1',{'Split Type Code'}),    #'Grouped Rows' = Table.Group(#'Removed Columns', {'Split Type', 'Compensation Payee Agent Surrogate Key'}, {{'Grid Revenue', each List.Sum([Grid Revenue]), type nullable number}}),    #'Pivoted Column' = Table.Pivot(#'Grouped Rows', List.Distinct(#'Grouped Rows'[#'Split Type']), 'Split Type', 'Grid Revenue', List.Sum),    #'Replaced Value' = Table.ReplaceValue(#'Pivoted Column',null,0,Replacer.ReplaceValue,{'Contract', 'Non-Split', 'RSA/Blanket'}),    #'Merged Queries' = Table.NestedJoin(#'Replaced Value', {'Compensation Payee Agent Surrogate Key'}, #'Workforce Dimension Detail', {'Workforce Dimension Detail Surrogate Key'}, 'Workforce Dimension Detail', JoinKind.LeftOuter),    #'Expanded Workforce Dimension Detail' = Table.ExpandTableColumn(#'Merged Queries', 'Workforce Dimension Detail', {'Employee Identifier'}, {'Workforce Dimension Detail.Employee Identifier'}),    #'Reordered Columns' = Table.ReorderColumns(#'Expanded Workforce Dimension Detail',{'Compensation Payee Agent Surrogate Key', 'Workforce Dimension Detail.Employee Identifier', 'Contract', 'Non-Split', 'RSA/Blanket'}),    #'Renamed Columns2' = Table.RenameColumns(#'Reordered Columns',{{'Workforce Dimension Detail.Employee Identifier', 'TSID'}})in    #'Renamed Columns2'"}]},{"name":"Query1","isHidden":false,"storageMode":"Import","columns":[{"name":"Compensation Payee Agent Surrogate Key","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Split Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SUM('GRID CREDIT AMOUNT')","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Agent Split Percent","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'select ''Compensation Payee Agent Surrogate Key'', ''Agreement Type Code'', ''Agent Split Percent'', sum(''Grid Credit Amount'')#(lf)from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Member Relationship Incentive Detail Fact''#(lf)where ''Process Date'' \u003e= add_months(CURRENT_DATE, -12)#(lf)group by ''Compensation Payee Agent Surrogate Key'', ''Agreement Type Code'', ''Agent Split Percent''#(lf)order by ''Compensation Payee Agent Surrogate Key'', ''Agreement Type Code'', ''Agent Split Percent''', null, [EnableFolding=true]),    #'Renamed Columns' = Table.RenameColumns(Source,{{'Agreement Type Code', 'Split Type Code'}})in    #'Renamed Columns'"}]},{"name":"Workforce Dimension Detail","isHidden":true,"storageMode":"Import","columns":[{"name":"Workforce Dimension Detail Surrogate Key","dataType":"Double","isHidden":true,"columnType":"Data"},{"name":"Employee Dimension Effective Begin Timestamp","dataType":"DateTime","isHidden":true,"columnType":"Data"},{"name":"Current Row Indicator","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"Employee Dimension Effective End Timestamp","dataType":"DateTime","isHidden":true,"columnType":"Data"},{"name":"Employee Identifier","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"Organization Department Code","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"Employee Name","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"Organization Department Description","dataType":"String","isHidden":true,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'SELECT#(lf)''Workforce Dimension Detail Surrogate Key'',#(lf)''Employee Dimension Effective Begin Timestamp'',#(lf)''Employee Dimension Effective End Timestamp'',#(lf)''Current Row Indicator'',#(lf)''Employee Identifier'',#(lf)''Employee Name'',#(lf)''Organization Department Code'',#(lf)''Organization Department Description''#(lf)FROM ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail''#(lf)WHERE ''Current Row Indicator'' = \u0027Y\u0027', null, [EnableFolding=true])in    Source"}]},{"name":"WID_Snowflake","isHidden":false,"storageMode":"Import","columns":[{"name":"RALN_MKT_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RALN_RFO_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CalYr","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"CalWk","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"max_cal_dt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"COMP_PYEE_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ANBP_OtherRev","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Value","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Current Week Indicator","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'SELECT #(lf)#(lf)#(tab)CASE WHEN B.''Total Sales Reporting Product Sub-Group Description''= \u0027TAN Managed Accounts\u0027 THEN \u00270716-01-00\u0027 ELSE A.RALN_MKT_CDE END AS RALN_MKT_CDE,#(lf)#(tab)CASE WHEN B.''Total Sales Reporting Product Sub-Group Description''= \u0027TAN Managed Accounts\u0027 THEN \u00270716\u0027 ELSE A.RALN_RFO_CDE END AS RALN_RFO_CDE,#(lf)    A.MVP,#(lf)    A.Market,#(lf)    #(lf)    C.''Distribution Performance Reporting Year Number'' AS CalYr,#(lf)#(tab)C.''Distribution Performance Reporting Year Week Number'' AS CalWk,#(lf)    c.max_cal_dt,#(lf)      B.''Credited Advisor Identifier'' AS COMP_PYEE_ID,#(lf)#(tab)UPPER(B.''Total Sales Reporting Product Sub-Group Description'') AS Product,#(lf)    \u0027WID\u0027 AS ANBP_OtherRev,#(lf)   SUM( B.''WID'') AS Value,#(lf)   D.''Employee Name''#(lf)#(lf)FROM#(lf)#(lf)#(lf)  (SELECT #(lf)#(lf)''Sales Transaction Process Date'',#(lf)''Credited Advisor Identifier'',#(lf)#(tab)''Distribution Channel Code'',#(lf)#(tab)''Distribution Channel Description'',#(lf)#(tab)''Total Sales Reporting Product Type'',#(lf)#(tab)''Total Sales Reporting Product Group Description'',#(lf)#(tab)''Total Sales Reporting Product Sub-Group Description'',#(lf)SUM(''Weighted Investment Deposit Amount'') AS WID#(lf)#(lf)FROM  ENTERPRISE_EDW.PRESENTATION_01.''WID Transaction Confidential''#(lf)#(lf)WHERE YEAR(''Sales Transaction Process Date'') \u003e= YEAR(GETDATE())-2 #(lf)   #(lf)   AND ''Distribution Channel Code'' IN (\u0027CAREER\u0027, \u0027OTH\u0027, \u0027TAN\u0027,\u0027TFGT\u0027,\u0027TRUST\u0027)#(lf)#(lf)GROUP BY #(lf) #(lf)    ''Sales Transaction Process Date'',#(lf)    ''Credited Advisor Identifier'',#(lf)#(tab)''Distribution Channel Code'',#(lf)#(tab)''Distribution Channel Description'',#(lf)#(tab)''Total Sales Reporting Product Type'',#(lf)#(tab)''Total Sales Reporting Product Group Description'',#(lf)#(tab)''Total Sales Reporting Product Sub-Group Description'')#(lf)#(lf) AS B #(lf)#(lf)LEFT JOIN#(lf)#(lf)//Select Current and Transfer rows from Sales Hierarchy--- START#(lf)#(lf)(SELECT DISTINCT#(lf)#(lf)#(tab)''Sales Hierarchy Identifier'',#(lf)#(tab)''Effective Begin Date'' AS BeginDate,#(lf)#(tab)''Effective End Date''-1 AS EndDate,#(lf)    ''Organization Zone Code'' AS RALN_MKT_CDE,#(lf)#(tab)''Organization Department Code'' AS RALN_RFO_CDE,#(lf)    (case when length(''Organization Zone Code'') = 7 then \u002700\u0027#(lf)             else substr(''Organization Zone Code'',6,2)#(lf)           end) as MVP,#(lf)          (case when length(''Organization Zone Code'') = 7 then substr(''Organization Zone Code'',6,2) #(lf)             else substr(''Organization Zone Code'',9,2)#(lf)           end) as Market#(lf)           #(lf)           #(lf)FROM ENTERPRISE_EDW.PRESENTATION_01.''Sale Hierarchy Dimension''#(lf)    WHERE #(lf)#(lf)        ''Current Row Indicator''=\u0027Y\u0027#(lf)        AND ''Effective Begin Date''\u003c=(''Effective End Date''-1)) AS A#(lf)        #(lf)//Select Current and Transfer rows from Sales Hierarchy--- END#(lf)#(lf)ON (A.''Sales Hierarchy Identifier''=B.''Credited Advisor Identifier'' AND B.''Sales Transaction Process Date'' BETWEEN A.BeginDate  AND A.EndDate)#(lf)#(lf)#(lf)LEFT JOIN (#(lf)  #(lf)//Determine Max Cal Day of the week--- START#(lf)#(lf)SELECT#(lf)  #(lf)    T1.''Calendar Day Date'',#(lf)    T1.''Distribution Performance Reporting Year Number'',#(lf)#(tab)T1.''Distribution Performance Reporting Year Week Number'',#(lf)    T2.max_cal_dt#(lf)  #(lf)  FROM ENTERPRISE_EDW.PRESENTATION_01.''Distribution Performance Dates Dimension'' AS T1#(lf)  #(lf)  INNER JOIN#(lf)  #(lf)  (SELECT   #(lf)    ''Distribution Performance Reporting Year Number'',#(lf)#(tab)''Distribution Performance Reporting Year Week Number'',#(lf)    MAX(''Calendar Day Date'') AS max_cal_dt#(lf)#(lf)    FROM ENTERPRISE_EDW.PRESENTATION_01.''Distribution Performance Dates Dimension''#(lf)#(lf)    GROUP BY     #(lf)        ''Distribution Performance Reporting Year Number'',#(lf)#(tab)    ''Distribution Performance Reporting Year Week Number'') AS T2 ON (T1.''Distribution Performance Reporting Year Number''=T2.''Distribution Performance Reporting Year Number'' AND T1.''Distribution Performance Reporting Year Week Number''=T2.''Distribution Performance Reporting Year Week Number'')#(lf) #(lf)  ) AS C #(lf)  #(lf)//Determine Max Cal Day of the week--- END#(lf)    #(lf)    ON (B.''Sales Transaction Process Date''=C.''Calendar Day Date'')#(lf)    #(lf)#(lf)LEFT JOIN ENTERPRISE_EDW.PRESENTATION_01.''Workforce Dimension Detail'' AS D ON (B.''Credited Advisor Identifier''=D.''Employee Identifier'' AND D.''Current Row Indicator''=\u0027Y\u0027)#(lf)  #(lf)  GROUP BY#(lf)  #(tab)A.RALN_MKT_CDE,#(lf)#(tab)A.RALN_RFO_CDE,#(lf)    A.MVP,#(lf)    A.Market,#(lf)    C.''Distribution Performance Reporting Year Number'',#(lf)#(tab)C.''Distribution Performance Reporting Year Week Number'',#(lf)    c.max_cal_dt,#(lf)    ''Distribution Channel Code'',#(lf)#(lf)    B.''Credited Advisor Identifier'',#(lf)#(tab)B.''Total Sales Reporting Product Type'',#(lf)    B.''Total Sales Reporting Product Group Description'',#(lf)#(tab)B.''Total Sales Reporting Product Sub-Group Description'',#(lf)    D.''Employee Name''', null, [EnableFolding=true]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'CALYR', Int64.Type}, {'CALWK', Int64.Type}}),    #'Renamed Columns' = Table.RenameColumns(#'Changed Type',{{'MARKET', 'Market'}, {'CALYR', 'CalYr'}, {'CALWK', 'CalWk'}, {'MAX_CAL_DT', 'max_cal_dt'}, {'PRODUCT', 'Product'}, {'VALUE', 'Value'}, {'ANBP_OTHERREV', 'ANBP_OtherRev'}, {'Employee Name', 'EMP_NM'}}),    #'Add CurrentWeek Indicator' = Table.AddColumn(#'Renamed Columns', 'Current Week Indicator', each if [max_cal_dt] \u003c Date.From(DateTime.LocalNow()) then 'WID' else 'Current Week WID')in    #'Add CurrentWeek Indicator'"}]},{"name":"Teaming Snowflake TEAM","isHidden":false,"storageMode":"Import","columns":[{"name":"Employee Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Max Effective Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"AllRows.Effective Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"AllRows.TEAM ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"AllRows.Team Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"AllRows.Team Purpose Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"AllRows.Team Type","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'select #(lf)       a.''Employee Identifier'',#(lf)       b.''Team Identifier'',#(lf)       b.''Team Name'',#(lf)       b.''Team Purpose Code'',#(lf)       a.''Effective Date''#(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Employee Team Organization Relationship Current Dimension'' as a inner join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Team Organization Current Dimension'' as b#(lf)    on (a.''Team Identifier Surrogate Key'' = b.''Team Identifier Surrogate Key'')#(lf)  where b.''Effective Status Code'' = \u0027A\u0027#(lf)   and a.''Team Member Action Code'' \u003c\u003e \u0027DROP\u0027#(lf)   and b. ''Team Purpose Code'' NOT IN (\u0027COAC\u0027,\u0027ENSB\u0027)#(lf)   /*and (a.''Accredited Employee Surrogate Key'', a.''Effective Date'') in #(lf)              (select aa.''Accredited Employee Surrogate Key'',max(aa.''Effective Date'') #(lf)                 from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Employee Team Organization Relationship Current Dimension'' as aa#(lf)               group by aa.''Accredited Employee Surrogate Key'')*/', null, [EnableFolding=true]),    #'Added Custom3' = Table.AddColumn(Source, 'Team Type', each if [Team Purpose Code] = 'SOLO' then 'Association - Leveraged Solo'else if [Team Purpose Code] = 'ASSC' then 'Association'else if [Team Purpose Code] = 'FRML' then 'Formal'else if [Team Purpose Code] = 'FRMS' then 'Formal - Leveraged Solo'else if [Team Purpose Code] = 'PBP' then 'Professional Practice'else if [Team Purpose Code] = 'PBPS' then 'Professional Practice - Leveraged Solo'else if [Team Purpose Code] = 'MKTG' then 'Marketing Group'else 'Non-Leveraged Solo'),    #'Renamed Columns' = Table.RenameColumns(#'Added Custom3',{{'Team Identifier', 'TEAM ID'}}),    #'Trimmed Text' = Table.TransformColumns(#'Renamed Columns',{{'Employee Identifier', Text.Trim, type text}}),    #'Sorted Rows' = Table.Sort(#'Trimmed Text',{{'Employee Identifier', Order.Ascending}}),    #'Grouped Rows' = Table.Group(#'Sorted Rows', {'Employee Identifier'}, {{'Max Effective Date', each List.Max([Effective Date]), type date}, {'AllRows', each _, type table [Employee Identifier=text, TEAM ID=text, Team Name=text, Team Purpose Code=text, Effective Date=date, Team Type=text]}}),    #'Expanded AllRows' = Table.ExpandTableColumn(#'Grouped Rows', 'AllRows', {'Effective Date', 'TEAM ID', 'Team Name', 'Team Purpose Code', 'Team Type'}, {'AllRows.Effective Date', 'AllRows.TEAM ID', 'AllRows.Team Name', 'AllRows.Team Purpose Code', 'AllRows.Team Type'}),    #'Filtered Rows' = Table.SelectRows(#'Expanded AllRows', each [Max Effective Date] = [AllRows.Effective Date])in    #'Filtered Rows'"}]},{"name":"Teaming Snowflake ENSB","isHidden":false,"storageMode":"Import","columns":[{"name":"Employee Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Max Effective Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"All Rows.Effective Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"All Rows.ENSB ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"All Rows.Ensemble Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"All Rows.Team Purpose Code","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'select #(lf)       a.''Employee Identifier'',#(lf)       b.''Team Identifier'',#(lf)       b.''Team Name'',#(lf)       b.''Team Purpose Code'',#(lf)       a.''Effective Date''#(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Employee Team Organization Relationship Current Dimension'' as a inner join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Team Organization Current Dimension'' as b#(lf)    on (a.''Team Identifier Surrogate Key'' = b.''Team Identifier Surrogate Key'')#(lf)  where b.''Effective Status Code'' = \u0027A\u0027#(lf)   and a.''Team Member Action Code'' \u003c\u003e \u0027DROP\u0027#(lf)   and b. ''Team Purpose Code'' = \u0027ENSB\u0027#(lf)', null, [EnableFolding=true]),    #'Renamed Columns' = Table.RenameColumns(Source,{{'Team Identifier', 'ENSB ID'}, {'Team Name', 'Ensemble Name'}}),    #'Trimmed Text' = Table.TransformColumns(#'Renamed Columns',{{'Employee Identifier', Text.Trim, type text}}),    #'Sorted Rows' = Table.Sort(#'Trimmed Text',{{'Employee Identifier', Order.Ascending}}),    #'Grouped Rows' = Table.Group(#'Sorted Rows', {'Employee Identifier'}, {{'Max Effective Date', each List.Max([Effective Date]), type date}, {'All Rows', each _, type table [Employee Identifier=text, ENSB ID=text, Ensemble Name=text, Team Purpose Code=text, Effective Date=date]}}),    #'Expanded All Rows' = Table.ExpandTableColumn(#'Grouped Rows', 'All Rows', {'Effective Date', 'ENSB ID', 'Ensemble Name', 'Team Purpose Code'}, {'All Rows.Effective Date', 'All Rows.ENSB ID', 'All Rows.Ensemble Name', 'All Rows.Team Purpose Code'}),    #'Filtered Rows' = Table.SelectRows(#'Expanded All Rows', each [Max Effective Date] = [All Rows.Effective Date])in    #'Filtered Rows'"}]},{"name":"Producer with Teaming Snowflake","isHidden":false,"storageMode":"Import","columns":[{"name":"SALE_HIER_DIM_SK","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"EMP_DIM_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SALE_HIER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ZONE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RPT_TO_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ADJ_SVC_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TENURE","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TENURE_GROUP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FIN_CSLT_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"WLTH_ADVR_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"GNDR_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LST_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FRST_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MDDL_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_SUB_DEPT_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_SUB_DEPT_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Count","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Job Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Teaming Snowflake TEAM.AllRows.TEAM ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Teaming Snowflake TEAM.AllRows.Team Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Teaming Snowflake TEAM.AllRows.Team Purpose Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Teaming Snowflake TEAM.AllRows.Team Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Teaming Snowflake ENSB.All Rows.ENSB ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Teaming Snowflake ENSB.All Rows.Ensemble Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FA On Team Indicator","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team Type (groups)","dataType":"String","isHidden":false,"expression":"SWITCH(\\tTRUE,\\tISBLANK(\u0027Producer with Teaming Snowflake\u0027[Teaming Snowflake TEAM.AllRows.Team Type]),\\t'(Blank)',\\t\u0027Producer with Teaming Snowflake\u0027[Teaming Snowflake TEAM.AllRows.Team Type] IN {'Association',\\t\\t'Association - Leveraged Solo'},\\t'Association',\\t\u0027Producer with Teaming Snowflake\u0027[Teaming Snowflake TEAM.AllRows.Team Type] IN {'Formal',\\t\\t'Formal - Leveraged Solo'},\\t'Formal',\\t\u0027Producer with Teaming Snowflake\u0027[Teaming Snowflake TEAM.AllRows.Team Type] IN {'Non-Leveraged Solo'},\\t'Not on a Team',\\t\u0027Producer with Teaming Snowflake\u0027[Teaming Snowflake TEAM.AllRows.Team Type] IN {'Professional Practice',\\t\\t'Professional Practice - Leveraged Solo'},\\t'Professional Practice',\\t\u0027Producer with Teaming Snowflake\u0027[Teaming Snowflake TEAM.AllRows.Team Type])","columnType":"Calculated"},{"name":"PGCOE Engaged - 59,69,79","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PGCOE Practice Group","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Experienced Advisors","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Practice Growth Markets","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Sort_Order","dataType":"String","isHidden":false,"expression":"RELATED(\u0027Experienced Advisors Filter\u0027[Order])","columnType":"Calculated"}],"measures":[{"name":"FA Count","expression":"DISTINCTCOUNT(\u0027Producer with Teaming Snowflake\u0027[EMP_ID])","isHidden":false},{"name":"FA on Team Count","expression":"CALCULATE(DISTINCTCOUNT(\u0027Producer with Teaming Snowflake\u0027[EMP_ID]), \u0027Producer with Teaming Snowflake\u0027[FA On Team Indicator] = 'On Team')","isHidden":false},{"name":"% FAs on Teams","expression":"divide([FA on Team Count],[FA Count])","isHidden":false}],"source":[{"expression":"let    Source = PowerBI.Dataflows(null),    #'4ed85d6e-e750-4d01-892f-78fc79993e0c' = Source{[workspaceId='4ed85d6e-e750-4d01-892f-78fc79993e0c']}[Data],    #'0b905589-2450-4f3c-9fd8-f4902e4223de' = #'4ed85d6e-e750-4d01-892f-78fc79993e0c'{[dataflowId='0b905589-2450-4f3c-9fd8-f4902e4223de']}[Data],    Producer1 = #'0b905589-2450-4f3c-9fd8-f4902e4223de'{[entity='Producer']}[Data],    #'Trimmed Text2' = Table.TransformColumns(Producer1,{{'EMP_ID', Text.Trim, type text}}),    #'Merged Queries' = Table.NestedJoin(#'Trimmed Text2', {'EMP_ID'}, #'Teaming Snowflake TEAM', {'Employee Identifier'}, 'Teaming Snowflake TEAM', JoinKind.LeftOuter),    #'Expanded Teaming Snowflake TEAM' = Table.ExpandTableColumn(#'Merged Queries', 'Teaming Snowflake TEAM', {'AllRows.TEAM ID', 'AllRows.Team Name', 'AllRows.Team Purpose Code', 'AllRows.Team Type'}, {'Teaming Snowflake TEAM.AllRows.TEAM ID', 'Teaming Snowflake TEAM.AllRows.Team Name', 'Teaming Snowflake TEAM.AllRows.Team Purpose Code', 'Teaming Snowflake TEAM.AllRows.Team Type'}),    #'Merged Queries1' = Table.NestedJoin(#'Expanded Teaming Snowflake TEAM', {'EMP_ID'}, #'Teaming Snowflake ENSB', {'Employee Identifier'}, 'Teaming Snowflake ENSB', JoinKind.LeftOuter),    #'Expanded Teaming Snowflake ENSB' = Table.ExpandTableColumn(#'Merged Queries1', 'Teaming Snowflake ENSB', {'All Rows.ENSB ID', 'All Rows.Ensemble Name'}, {'Teaming Snowflake ENSB.All Rows.ENSB ID', 'Teaming Snowflake ENSB.All Rows.Ensemble Name'}),    #'Filtered Rows' = Table.SelectRows(#'Expanded Teaming Snowflake ENSB', each [RPT_TO_ID] \u003c\u003e '           '),    #'Trimmed Text' = Table.TransformColumns(#'Filtered Rows',{{'EMP_ID', Text.Trim, type text}}),    #'Merged Queries2' = Table.NestedJoin(#'Trimmed Text', {'EMP_ID'}, #'DM_01 Organization Dimension', {'Reports to Identifier'}, 'DM_01 Organization Dimension', JoinKind.LeftOuter),    #'Expanded DM_01 Organization Dimension' = Table.ExpandTableColumn(#'Merged Queries2', 'DM_01 Organization Dimension', {'Count'}, {'Count'}),    #'Replaced Value' = Table.ReplaceValue(#'Expanded DM_01 Organization Dimension',null,0,Replacer.ReplaceValue,{'Count'}),    #'Trimmed Text1' = Table.TransformColumns(#'Replaced Value',{{'TENURE_GROUP', Text.Trim, type text}}),    #'Concatenate Job Code_Desc' = Table.AddColumn(#'Trimmed Text1', 'Job Type', each [JOB_TYP_CDE]\u0026' - '\u0026[JOB_TYP_DSCR]),    #'Replaced Value1' = Table.ReplaceValue(#'Concatenate Job Code_Desc','NFR1','NFA1',Replacer.ReplaceText,{'TENURE_GROUP'}),    #'Replaced Value2' = Table.ReplaceValue(#'Replaced Value1','NFR2','NFA2',Replacer.ReplaceText,{'TENURE_GROUP'}),    #'Replaced Value3' = Table.ReplaceValue(#'Replaced Value2','NFR3','NFA3',Replacer.ReplaceText,{'TENURE_GROUP'}),    #'Replaced Value4' = Table.ReplaceValue(#'Replaced Value3','NFR4','NFA4',Replacer.ReplaceText,{'TENURE_GROUP'}),    #'Label non-team \u0027non-lev solo\u0027' = Table.ReplaceValue(#'Replaced Value4',null,'Non-Leveraged Solo',Replacer.ReplaceValue,{'Teaming Snowflake TEAM.AllRows.Team Type'}),    #'Team_NonTeam Indicator' = Table.AddColumn(#'Label non-team \u0027non-lev solo\u0027', 'FA On Team Indicator', each if[Teaming Snowflake TEAM.AllRows.Team Type] = 'Non-Leveraged Solo' then 'Not on Team'else 'On Team'),    #'Reordered Columns' = Table.ReorderColumns(#'Team_NonTeam Indicator',{'SALE_HIER_DIM_SK', 'EMP_DIM_SK', 'EMP_ID', 'SALE_HIER_ID', 'EMP_NM', 'JOB_TYP_CDE', 'JOB_TYP_DSCR', 'RFO', 'ZONE', 'RPT_TO_ID', 'ADJ_SVC_DT', 'TENURE', 'TENURE_GROUP', 'FIN_CSLT_IND', 'WLTH_ADVR_IND', 'GNDR_CDE', 'LST_NM', 'FRST_NM', 'MDDL_NM', 'ORZN_SUB_DEPT_CDE', 'ORZN_SUB_DEPT_DSCR', 'Teaming Snowflake TEAM.AllRows.TEAM ID', 'Teaming Snowflake TEAM.AllRows.Team Name', 'Teaming Snowflake TEAM.AllRows.Team Purpose Code', 'Teaming Snowflake TEAM.AllRows.Team Type', 'FA On Team Indicator', 'Teaming Snowflake ENSB.All Rows.ENSB ID', 'Teaming Snowflake ENSB.All Rows.Ensemble Name', 'Count', 'Job Type'}),    #'Label Markets - Engaged' = Table.AddColumn(#'Reordered Columns', 'PGCOE Engaged - 59,69,79', each if [ZONE] = '59' then 'Engaged (59,69,79)' else if [ZONE] = '69' then 'Engaged (59,69,79)' else if [ZONE] = '79' then 'Engaged (59,69,79)' else if Text.StartsWith([ZONE], '9') then 'NPG (98,99)' else 'All Other Markets'),    #'Label Markets - Practice Group' = Table.AddColumn(#'Label Markets - Engaged', 'PGCOE Practice Group', each if [ZONE] = '59' then 'Practice Management (59)' else if [ZONE] = '69' then 'Practice Productivity (69,79)' else if [ZONE] = '79' then 'Practice Productivity (69,79)' else if Text.StartsWith([ZONE], '9') then 'NPG (98,99)' else 'All Other Markets'),    #'Label Markets - PG,NPG,Other' = #'Label Markets - Practice Group',    #'Added Conditional Column' = Table.AddColumn(#'Label Markets - PG,NPG,Other', 'Practice Growth Markets', each if [ZONE] = '59' then 59 else if [ZONE] = '69' then 69 else if [ZONE] = '79' then 79 else if Text.StartsWith([ZONE], '9') then 'NPG' else 'All Other Markets'),    #'Experienced Advisors filter' = Table.AddColumn(#'Added Conditional Column', 'Experienced Advisors', each if [ZONE] = '01' then 'PMC - Market 01' else if [ZONE] = '58' then 'PMC - Market 58' else if [ZONE] = '59' then 'PMC - Market 59' else if [ZONE] = '69' then 'GPA - Market 69' else if [ZONE] = '79' then 'GPD - Market 79' else if [ZONE] = '89' then 'PPC - Market 89' else if [ZONE] = '98' then 'NPG - Market 98' else if [ZONE] = '99' then 'NPG - Market 99' else 'All Other Markets')in    #'Experienced Advisors filter'"}]},{"name":"RFO_Name","isHidden":false,"storageMode":"Import","columns":[{"name":"RFO_CODE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Advisor Group","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Sql.Database('dbedwdwprd', 'EnterpriseDataMart', [Query='SELECT DISTINCT#(lf)       [Department Identifier] RFO_CODE#(lf)      ,[Department Name] RFO_NM#(lf)      ,concat(trim([Department Identifier]),\u0027-\u0027,[Department Name]) as NM#(lf)#(lf) #(lf)#(lf)  FROM [EnterpriseDataMart].[DM_01].[Organization Dimension] #(lf)  where [Department Identifier] in (\u00270283\u0027, \u00270365\u0027, \u00270435\u0027, \u00270496\u0027, \u00270810\u0027,\u00270115\u0027, \u00270165\u0027, \u00270190\u0027, \u00270240\u0027, #(lf)                \u00270361\u0027, \u00270384\u0027,\u00270291\u0027, \u00270410\u0027, \u00270475\u0027, \u00270525\u0027, \u00270529\u0027,\u00270001\u0027,\u00270383\u0027)#(lf)        and [Current Row Indicator] = \u0027Y\u0027#(lf)        and [Effective Begin Date] \u003e \u00271/1/2019\u0027']),    #'Renamed Columns' = Table.RenameColumns(Source,{{'NM', 'Advisor Group'}}),    #'Filtered Rows' = Table.SelectRows(#'Renamed Columns', each ([RFO_CODE] = '0115' or [RFO_CODE] = '0190' or [RFO_CODE] = '0283' or [RFO_CODE] = '0291' or [RFO_CODE] = '0361' or [RFO_CODE] = '0383' or [RFO_CODE] = '0384' or [RFO_CODE] = '0435' or [RFO_CODE] = '0525')),    #'Filtered Rows1' = Table.SelectRows(#'Filtered Rows', each not Text.Contains([RFO_NM], 'Region'))in    #'Filtered Rows1'"}]},{"name":"Experienced Advisors Filter","isHidden":false,"storageMode":"Import","columns":[{"name":"Filter Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Order","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i45WCvB1VtBV8E0syk4tUTAwVNJRMlSK1UETN7UAihuBxd0DHBHiZpZAcROouAtC3BwkbgoxJwDJHAuQuBlY3C/AHSFuCTLfHIu9IPXGWNSDxC2UYmMB', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [#'Filter Description' = _t, Order = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Filter Description', type text}, {'Order', Int64.Type}}),    #'Sorted Rows' = Table.Sort(#'Changed Type',{{'Order', Order.Ascending}})in    #'Sorted Rows'"}]},{"name":"PGCOE","isHidden":false,"storageMode":"Import","columns":[{"name":"What\u0027s New Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Alert Message","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Message_WhatsNew_Text","expression":" var _txt1 = SELECTEDVALUE(\u0027PGCOE\u0027[What\u0027s New Description]) return IF(ISBLANK(_txt1),'',_txt1)","isHidden":false},{"name":"ShowHideWhatsNewTitle","expression":" IF(ISBLANK(SELECTEDVALUE(\u0027PGCOE\u0027[What\u0027s New Description])),' ','What\u0027s New')","isHidden":false},{"name":"ShowHideWhatsNew Background","expression":"IF(ISBLANK(SELECTEDVALUE(\u0027PGCOE\u0027[What\u0027s New Description])),'White','#C7AB75')","isHidden":false},{"name":"ShowHideWhatsNew Border","expression":"IF(ISBLANK(SELECTEDVALUE(\u0027PGCOE\u0027[What\u0027s New Description])),'White','#63666A')","isHidden":false},{"name":"Message_Alert_Text","expression":" var _txt1 = SELECTEDVALUE(\u0027PGCOE\u0027[Alert Message]) return IF(ISBLANK(_txt1),'',_txt1)","isHidden":false},{"name":"ShowHideAlertTitle","expression":" IF(ISBLANK(SELECTEDVALUE(\u0027PGCOE\u0027[Alert Message])),' ','ALERT !')","isHidden":false},{"name":"ShowHideAlert Background","expression":"IF(ISBLANK(SELECTEDVALUE(\u0027PGCOE\u0027[Alert Message])),'White','White')","isHidden":false},{"name":"ShowHideAlert Border","expression":"IF(ISBLANK(SELECTEDVALUE(\u0027PGCOE\u0027[Alert Message])),'White','#BE1D3D')","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Field Reporting//What\u0027s New and Alert Message//What\u0027s New and Alert Message.xlsx'), null, true),    PGCOE_Sheet = Source{[Item='PGCOE',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(PGCOE_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'What\u0027s New Description', type any}, {'Alert Message', type any}})in    #'Changed Type'"}]}],"expressions":[{"name":"Teaming Snowflake TEAM v2 test","expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'SELECT#(lf)a.''Employee Identifier'',#(lf)b.''Team Identifier'',#(lf)b.''Team Name'',#(lf)b.''Team Purpose Code'',#(lf)a.''Effective Date''#(lf)FROM ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Employee Team Organization Relationship Current Dimension'' as a inner join#(lf)''ENTERPRISE_EDW''.''PRESENTATION_01''.''Team Organization Current Dimension'' as b#(lf)on (a.''Team Identifier Surrogate Key'' = b.''Team Identifier Surrogate Key'') inner join#(lf)''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' as c#(lf)on (a.''Employee Identifier'' = c.''Employee Identifier'')#(lf)WHERE b.''Effective Status Code'' = \u0027A\u0027#(lf)AND c.''Employee Status Type Code'' = \u0027A\u0027#(lf)AND c.''Current Row Indicator'' = \u0027Y\u0027#(lf)AND a.''Team Member Action Code'' \u003c\u003e \u0027DROP\u0027#(lf)AND b.''Team Purpose Code'' NOT in (\u0027COAC\u0027,\u0027ENSB\u0027)#(lf)AND a.''Effective Date'' = (SELECT MAX(aa.''Effective Date'')#(lf)FROM ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Employee Team Organization Relationship Current Dimension'' as aa inner join#(lf)''ENTERPRISE_EDW''.''PRESENTATION_01''.''Team Organization Current Dimension'' as bb#(lf)on (aa.''Team Identifier Surrogate Key'' = bb.''Team Identifier Surrogate Key'' and a.''Employee Identifier''= aa.''Employee Identifier'') INNER JOIN#(lf)''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' as cc#(lf)on (aa.''Employee Identifier''= cc.''Employee Identifier'')#(lf)WHERE bb.''Effective Status Code'' = \u0027A\u0027#(lf)AND cc.''Employee Status Type Code'' = \u0027A\u0027#(lf)AND cc.''Current Row Indicator'' = \u0027Y\u0027#(lf)AND aa.''Team Member Action Code'' \u003c\u003e \u0027DROP\u0027#(lf)AND bb.''Team Purpose Code'' NOT in (\u0027COAC\u0027,\u0027ENSB\u0027)', null, [EnableFolding=true]),    #'Added Custom3' = Table.AddColumn(Source, 'Team Type', each if [Team Purpose Code] = 'SOLO' then 'Association - Leveraged Solo'else if [Team Purpose Code] = 'ASSC' then 'Association'else if [Team Purpose Code] = 'FRML' then 'Formal'else if [Team Purpose Code] = 'FRMS' then 'Formal - Leveraged Solo'else if [Team Purpose Code] = 'PBP' then 'Professional Practice'else if [Team Purpose Code] = 'PBPS' then 'Professional Practice - Leveraged Solo'else if [Team Purpose Code] = 'MKTG' then 'Marketing Group'else 'Non-Leveraged Solo'),    #'Renamed Columns' = Table.RenameColumns(#'Added Custom3',{{'Team Identifier', 'TEAM ID'}}),    #'Trimmed Text' = Table.TransformColumns(#'Renamed Columns',{{'Employee Identifier', Text.Trim, type text}}),    #'Sorted Rows' = Table.Sort(#'Trimmed Text',{{'Employee Identifier', Order.Ascending}}),    #'Grouped Rows' = Table.Group(#'Sorted Rows', {'Employee Identifier'}, {{'Max Effective Date', each List.Max([Effective Date]), type date}, {'AllRows', each _, type table [Employee Identifier=text, TEAM ID=text, Team Name=text, Team Purpose Code=text, Effective Date=date, Team Type=text]}}),    #'Expanded AllRows' = Table.ExpandTableColumn(#'Grouped Rows', 'AllRows', {'Effective Date', 'TEAM ID', 'Team Name', 'Team Purpose Code', 'Team Type'}, {'AllRows.Effective Date', 'AllRows.TEAM ID', 'AllRows.Team Name', 'AllRows.Team Purpose Code', 'AllRows.Team Type'}),    #'Filtered Rows' = Table.SelectRows(#'Expanded AllRows', each [Max Effective Date] = [AllRows.Effective Date])in    #'Filtered Rows'"}],"configuredBy":"Brian.Houghton@Thrivent.com","configuredById":"c23084c3-3890-4d73-8268-c18558782893","isEffectiveIdentityRequired":false,"isEffectiveIdentityRolesRequired":false,"refreshSchedule":{"days":["Monday"],"times":["09:00","15:00"],"enabled":true,"localTimeZoneId":"Central Standard Time","notifyOption":"NoNotification"},"targetStorageMode":"Abf","createdDate":"2022-10-20T16:53:09.31","contentProviderType":"PbixInImportMode"},{"id":"6e72563c-394d-417f-b900-955b07f38417","name":"Applications Dashboard","tables":[{"name":"RECD_PEND_COMPL","isHidden":false,"storageMode":"Import","columns":[{"name":"Week_Ending","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Week_Nbr","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"ContractNumber","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"BenefitContractNumber","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FileCode","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TransCode","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"TransDesc","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TransReceiveDt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TransCreateDt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TransCloseDt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TransSeqNumber","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ProdType","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LOBCode","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LOBSubType","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SMISLOBCode","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SMISPlanCode","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"EstimatedSalesCreditAmt","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"ActualSalesCreditAmt","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CAPTransmissionNumber","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CorporateEmployeeID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFOCode","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFOName","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"AgentCode","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SMISTRANSKEY","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Received","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Pending","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Retired","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Declined","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Issued","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Cancelled","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"STATUS","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"weekStart","dataType":"String","isHidden":false,"expression":"var dayOfWeek = WEEKDAY(RECD_PEND_COMPL[TransReceiveDt],2)returnRECD_PEND_COMPL[TransReceiveDt] - dayOfWeek + 1","columnType":"Calculated"},{"name":"runningMonthIndex","dataType":"String","isHidden":false,"expression":"var MinWeekStart = min(RECD_PEND_COMPL[TransReceiveDt]) var weekNumber = CEILING((DATEDIFF(MinWeekStart , RECD_PEND_COMPL[TransReceiveDt] , DAY) + 1) / 7 , 1)returnweekNumber","columnType":"Calculated"},{"name":"year_num","dataType":"String","isHidden":false,"expression":"(YEAR(RECD_PEND_COMPL[TransReceiveDt])-YEAR(MIN(RECD_PEND_COMPL[TransReceiveDt])))+1  ","columnType":"Calculated"},{"name":"Date Year","dataType":"String","isHidden":false,"expression":"YEAR(RECD_PEND_COMPL[TransReceiveDt])","columnType":"Calculated"},{"name":"Issued CW","dataType":"String","isHidden":false,"expression":"CALCULATE(    SUM(RECD_PEND_COMPL[Issued]),     FILTER(RECD_PEND_COMPL,RECD_PEND_COMPL[Week_Ending]=            MAX(RECD_PEND_COMPL[Week_Ending])))","columnType":"Calculated"},{"name":"ContractFaceAmount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"YR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Year","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Written YTD_Received Row","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Received average per Week_Ending","expression":"AVERAGEX(\\tKEEPFILTERS(VALUES(\u0027RECD_PEND_COMPL\u0027[Week_Ending])),\\tCALCULATE(SUM(\u0027RECD_PEND_COMPL\u0027[Received])))","isHidden":false}],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////pnfiles002b//fp_cifs_7834_sas$//MarketAnalysis//FieldReporting//SMIS//RECD_PEND_COMPL.csv'),[Delimiter=',', Columns=34, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Week_Ending', type date}, {'Week_Nbr', Int64.Type}, {'ContractNumber', type text}, {'BenefitContractNumber', type text}, {'FileCode', type text}, {'TransCode', Int64.Type}, {'TransDesc', type text}, {'TransReceiveDt', type date}, {'TransCreateDt', type date}, {'TransCloseDt', type date}, {'TransSeqNumber', Int64.Type}, {'Product', type text}, {'ProdType', type text}, {'LOBCode', type text}, {'LOBSubType', type text}, {'SMISLOBCode', type text}, {'SMISPlanCode', Int64.Type}, {'EstimatedSalesCreditAmt', type number}, {'ActualSalesCreditAmt', type number}, {'CAPTransmissionNumber', type text}, {'CorporateEmployeeID', type text}, {'RFOCode', type text}, {'RFOName', type text}, {'AgentCode', type text}, {'SMISTRANSKEY', type text}, {'Received', Int64.Type}, {'Pending', Int64.Type}, {'Retired', Int64.Type}, {'Declined', Int64.Type}, {'Issued', Int64.Type}, {'Cancelled', Int64.Type}, {'STATUS', type text}, {'ContractFaceAmount', type number}}),    #'Filtered Rows' = Table.SelectRows(#'Changed Type', each [Week_Ending] \u003e #date(2021, 12, 31)),    #'Inserted Year' = Table.AddColumn(#'Filtered Rows', 'Year', each Date.Year([TransReceiveDt]), Int64.Type),    #'Written YTD flag' = Table.AddColumn(#'Inserted Year', 'Written YTD_Received Row', each if [Received]=1 and [Year]=2024 then 'Received Current Year-Week 1' else if [Received]=0 and [Year]=2023 then 'Received Current Year-Later Weeks'else 'Other')in    #'Written YTD flag'"}]},{"name":"Table","isHidden":true,"storageMode":"Import","columns":[{"name":"Status","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"Order","dataType":"Int64","isHidden":true,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i45W8iwuLk1NUdJRMlSK1YlWcklNzsnMAwsYgQWcE/OSU3NywCLGYJGg1JLMIjDfRCk2FgA=', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Status = _t, Order = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Status', type text}, {'Order', Int64.Type}})in    #'Changed Type'"}]},{"name":"NSC_RATES","isHidden":true,"storageMode":"Import","columns":[{"name":"PRODUCT","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"AGE_LOW","dataType":"Int64","isHidden":true,"columnType":"Data"},{"name":"AGE_HIGH","dataType":"Int64","isHidden":true,"columnType":"Data"},{"name":"COMM_RATE","dataType":"Int64","isHidden":true,"columnType":"Data"},{"name":"NSC_RATE","dataType":"Int64","isHidden":true,"columnType":"Data"},{"name":"POLICY_FEE","dataType":"Int64","isHidden":true,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////vsshr//shared////Public//DI and BI//Applications Dashboard//NSC_RATES.csv'),[Delimiter=',', Columns=6, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'PRODUCT', type text}, {'AGE_LOW', Int64.Type}, {'AGE_HIGH', Int64.Type}, {'COMM_RATE', Int64.Type}, {'NSC_RATE', Int64.Type}, {'POLICY_FEE', Int64.Type}})in    #'Changed Type'"}]},{"name":"RFO_PENDING_DETAIL","isHidden":false,"storageMode":"Import","columns":[{"name":"RFO Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFOName","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Zone_Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CorporateEmployeeID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LOB Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Owner Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Owner Membership Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Contract Number","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Estimated Sales Credit Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Benefit Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Days Pending","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Received Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Transaction Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Pending Category","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Count","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Products","dataType":"String","isHidden":false,"expression":"SWITCH(  TRUE,  ISBLANK(\u0027RFO_PENDING_DETAIL\u0027[Product]),  '(Blank)',  \u0027RFO_PENDING_DETAIL\u0027[Product] IN {'ANNUITY',    'SO'},  'Annuity',  \u0027RFO_PENDING_DETAIL\u0027[Product] IN {'HEALTH',    'WLLTC'},  'Health',  \u0027RFO_PENDING_DETAIL\u0027[Product] IN {'LIFE'},  'Life',  \u0027RFO_PENDING_DETAIL\u0027[Product])","columnType":"Calculated"},{"name":"Markets","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Product_Name","dataType":"String","isHidden":false,"expression":"SWITCH(  TRUE,  ISBLANK(\u0027RFO_PENDING_DETAIL\u0027[LOB Description]),  '(Blank)',  \u0027RFO_PENDING_DETAIL\u0027[LOB Description] IN {'DI'},  'DI',  \u0027RFO_PENDING_DETAIL\u0027[LOB Description] IN {'FA',    'FIA',    'FIA GLWB'},  'FA',  \u0027RFO_PENDING_DETAIL\u0027[LOB Description] IN {'HEALTH'},  'HEALTH',  \u0027RFO_PENDING_DETAIL\u0027[LOB Description] IN {'LLTC10YR',    'LLTC20YR',    'LLTCAG95',    'LLTCSGPM'},  'LIFE LTC',  \u0027RFO_PENDING_DETAIL\u0027[LOB Description] IN {'LTC'},  'LTC',  \u0027RFO_PENDING_DETAIL\u0027[LOB Description] IN {'MS'},  'MS',  \u0027RFO_PENDING_DETAIL\u0027[LOB Description] IN {'SO',    'VSO'},  'SO',  \u0027RFO_PENDING_DETAIL\u0027[LOB Description] IN {'TERM'},  'TERM',  \u0027RFO_PENDING_DETAIL\u0027[LOB Description] IN {'ACCMUNLF',    'PROTUNLF'},  'UL',  \u0027RFO_PENDING_DETAIL\u0027[LOB Description] IN {'AdvisorFlex VA',    'VA',    'VARANN'},  'VA',  \u0027RFO_PENDING_DETAIL\u0027[LOB Description] IN {'VARIUNLF'},  'VUL',  \u0027RFO_PENDING_DETAIL\u0027[LOB Description] IN {'Single Prem LF',    'WL 95',    'WL10YEAR',    'WL20YEAR',    'SGLPRMWL',    'SLPMWL21',    'Survivor WL',    'WL Plus',    'WL Plus Term',    'WL10YR21',    'WL20YR21',    'WL2AGE70',    'WL2AGE95',    'WLAG7021',    'WLAG9521'},  'WL',  \u0027RFO_PENDING_DETAIL\u0027[LOB Description])","columnType":"Calculated"},{"name":"Division","dataType":"String","isHidden":false,"expression":"SWITCH(  TRUE,  ISBLANK(\u0027RFO_PENDING_DETAIL\u0027[RFO Code]),  '(Blank)',  \u0027RFO_PENDING_DETAIL\u0027[RFO Code] IN {'0283',    '0365',    '0435',    '0496',    '0810'},  'Central',  \u0027RFO_PENDING_DETAIL\u0027[RFO Code] IN {'0115',    '0165',    '0190',    '0240',    '0361',    '0384'},  'East',  \u0027RFO_PENDING_DETAIL\u0027[RFO Code] IN {'0716'},  'TAN',  \u0027RFO_PENDING_DETAIL\u0027[RFO Code] IN {'0383'},  'TFGT',  \u0027RFO_PENDING_DETAIL\u0027[RFO Code] IN {'0291',    '0410',    '0475',    '0525',    '0529'},  'West',  'Other')","columnType":"Calculated"},{"name":"Region","dataType":"String","isHidden":false,"expression":"SWITCH(  TRUE,  ISBLANK(\u0027RFO_PENDING_DETAIL\u0027[RFO Code]),  '(Blank)',  \u0027RFO_PENDING_DETAIL\u0027[RFO Code] IN {'0810'},  'Colorado Springs',  \u0027RFO_PENDING_DETAIL\u0027[RFO Code] IN {'0361',    '0365',    '0435',    '0496'},  'Established',  \u0027RFO_PENDING_DETAIL\u0027[RFO Code] IN {'0165',    '0240',    '0283',    '0291',    '0410',    '0525'},  'Growth',  \u0027RFO_PENDING_DETAIL\u0027[RFO Code] IN {'0115',    '0190',    '0384',    '0475',    '0529'},  'Invest',  \u0027RFO_PENDING_DETAIL\u0027[RFO Code] IN {'0716'},  'TAN',  \u0027RFO_PENDING_DETAIL\u0027[RFO Code] IN {'0383'},  'TFGT',  'Other')","columnType":"Calculated"},{"name":"Channel","dataType":"String","isHidden":false,"expression":"SWITCH(  TRUE,  ISBLANK(\u0027RFO_PENDING_DETAIL\u0027[RFO Code]),  '(Blank)',  \u0027RFO_PENDING_DETAIL\u0027[RFO Code] IN {'0115',    '0165',    '0190',    '0240',    '0283',    '0291',    '0361',    '0365',    '0384',    '0410',    '0435',    '0475',    '0496',    '0525',    '0529',    '0810'},  'Career',  \u0027RFO_PENDING_DETAIL\u0027[RFO Code] IN {'0716'},  'TAN',  \u0027RFO_PENDING_DETAIL\u0027[RFO Code] IN {'0383'},  'TFGT',  'Other')","columnType":"Calculated"},{"name":"Days Pending Groups","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market (Filter)","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_ZONE_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_SUB_DEPT_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_UNIT_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP_NAME","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////pnfiles002b//fp_cifs_7834_sas$//MarketAnalysis//FieldReporting//SMIS//RFO_PENDING_DETAIL.csv'),[Delimiter=',', Columns=22, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'RFOCode', type text}, {'RFOName', type text}, {'Zone', type text}, {'Zone_Name', type text}, {'CorporateEmployeeID', type text}, {'AgentFullName', type text}, {'Product', type text}, {'LOB', type text}, {'CIFOwnerFullName', type text}, {'MBR_TYP_CDE', type text}, {'BenefitContractNumber', type text}, {'EstimatedSalesCreditAmt', Currency.Type}, {'Benefit_Amount', Currency.Type}, {'Days_Pending', Int64.Type}, {'TransReceiveDt', type date}, {'TransDesc', type text}, {'CTRC_PND_CATG_EXCD', type text}, {'Count', Int64.Type}}),    #'Renamed Columns' = Table.RenameColumns(#'Changed Type',{{'Zone', 'Market'}, {'CTRC_PND_CATG_EXCD', 'Pending Category'}, {'TransDesc', 'Transaction Description'}, {'EstimatedSalesCreditAmt', 'Estimated Sales Credit Amount'}, {'Benefit_Amount', 'Benefit Amount'}, {'BenefitContractNumber', 'Contract Number'}, {'LOB', 'LOB Description'}, {'CIFOwnerFullName', 'Owner Name'}, {'AgentFullName', 'Employee Name'}, {'MBR_TYP_CDE', 'Owner Membership Type'}, {'Days_Pending', 'Days Pending'}, {'TransReceiveDt', 'Received Date'}, {'RFOCode', 'RFO Code'}}),    #'Days Pending Buckets' = Table.AddColumn(#'Renamed Columns', 'Days Pending Groups', each if [Days Pending]\u003e28 then '29+ Days'else if [Days Pending]\u003e14 then '15-28 Days'else if [Days Pending]\u003e7 then '8-14 Days'else if [Days Pending]\u003e=0 then '0-7 Days'else ''),    #'2 digit Market' = Table.AddColumn(#'Days Pending Buckets', 'Markets', each Text.PadStart(Text.From([Market]),2,'0')),    #'RFO-Market filter field' = Table.AddColumn(#'2 digit Market', 'Market (Filter)', each [RFO Code] \u0026 '-' \u0026 [Markets])in    #'RFO-Market filter field'"}]},{"name":"RES_DATA","isHidden":true,"storageMode":"Import","columns":[{"name":"BenefitContractNumber","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"COMM_PREM_AMT","dataType":"Double","isHidden":true,"columnType":"Data"},{"name":"BASECOVERAGE_ID","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"Res_ProductCode","dataType":"String","isHidden":true,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Sql.Database('DBRESONANTPRD', 'Resonant', [Query='SELECT DISTINCT RTRIM(LTRIM(Replace(A.PolNumber,\u0027?\u0027,\u0027\u0027))) as BenefitContractNumber,#(lf)     A.CommissionablePremiumAmt as COMM_PREM_AMT,#(lf)     A.BASECOVERAGE_ID, #(lf)     B.ProductCode as Res_ProductCode #(lf)  FROM Resonant.dbo.life_lifepolicy #(lf)  A LEFT JOIN#(lf)     Resonant.dbo.life_coverage B #(lf)        ON (A.BaseCoverage_ID = B.ID)#(lf)  WHERE A.CommissionablePremiumAmt \u003e 0'])in    Source"}]},{"name":"CALC_ESC_MOD","isHidden":true,"storageMode":"Import","columns":[{"name":"BenefitContractNumber","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"COMM_PREM_AMT","dataType":"Double","isHidden":true,"columnType":"Data"},{"name":"BASECOVERAGE_ID","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"Res_ProductCode","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"NSC_RATES.PRODUCT","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"NSC_RATES.AGE_LOW","dataType":"Int64","isHidden":true,"columnType":"Data"},{"name":"NSC_RATES.AGE_HIGH","dataType":"Int64","isHidden":true,"columnType":"Data"},{"name":"NSC_RATES.COMM_RATE","dataType":"Int64","isHidden":true,"columnType":"Data"},{"name":"NSC_RATES.NSC_RATE","dataType":"Int64","isHidden":true,"columnType":"Data"},{"name":"NSC_RATES.POLICY_FEE","dataType":"Int64","isHidden":true,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.NestedJoin(RES_DATA, {'Res_ProductCode'}, NSC_RATES, {'PRODUCT'}, 'NSC_RATES', JoinKind.LeftOuter),    #'Expanded NSC_RATES' = Table.ExpandTableColumn(Source, 'NSC_RATES', {'PRODUCT', 'AGE_LOW', 'AGE_HIGH', 'COMM_RATE', 'NSC_RATE', 'POLICY_FEE'}, {'NSC_RATES.PRODUCT', 'NSC_RATES.AGE_LOW', 'NSC_RATES.AGE_HIGH', 'NSC_RATES.COMM_RATE', 'NSC_RATES.NSC_RATE', 'NSC_RATES.POLICY_FEE'}),    #'Filtered Rows' = Table.SelectRows(#'Expanded NSC_RATES', each [BenefitContractNumber] \u003c\u003e null and [BenefitContractNumber] \u003c\u003e ''),    #'Removed Duplicates' = Table.Distinct(#'Filtered Rows', {'BenefitContractNumber'}),    #'Filtered Rows1' = Table.SelectRows(#'Removed Duplicates', each ([NSC_RATES.PRODUCT] = 'LTIV10YR' or [NSC_RATES.PRODUCT] = 'LTIV15YR' or [NSC_RATES.PRODUCT] = 'LTIV20YR' or [NSC_RATES.PRODUCT] = 'LTIV30YR'))in    #'Filtered Rows1'"}]},{"name":"NEW_ZBE","isHidden":true,"storageMode":"Import","columns":[{"name":"RFO","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"ZONE_ID","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"TSID","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"EFF_BEG_TMSP","dataType":"DateTime","isHidden":true,"columnType":"Data"},{"name":"EFF_END_TMSP","dataType":"DateTime","isHidden":true,"columnType":"Data"},{"name":"TSID_trimmed","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"TAG_MVP_MKT","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"MVP_ID","dataType":"String","isHidden":true,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = DB2.Database('PODWH021:50000', 'PODWH021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT DISTINCT t1.ORZN_DEPT_CDE AS RFO, #(lf)          /* TAG_MVP_Mkt */#(lf)          t1.ORZN_ZONE_CDE AS TAG_MVP_Mkt,/* MVP_ID */#(lf)      SUBSTRING(t1.ORZN_ZONE_CDE,1,7) AS MVP_ID,/* Zone_ID */#(lf)          RIGHT(RTRIM(t1.ORZN_ZONE_CDE),2) AS Zone_ID,#(lf)         t1.SALE_HIER_ID AS TSID, #(lf)          /* Strt_Dt */#(lf)          t1.EFF_BEG_TMSP,#(lf)          /* END_DATE */#(lf)          (CASE WHEN t1.EFF_END_TMSP is null #(lf)             THEN \u002712-31-9999\u0027#(lf)               ELSE t1.EFF_END_TMSP-1#(lf)          END)AS EFF_END_TMSP#(lf)      FROM SEMANTIC.SALES_HIERARCHY_DIMENSION t1#(lf)      WHERE SUBSTRING(t1.SALE_HIER_ID,1,2) in (\u0027DP\u0027,\u0027TS\u0027) #(lf)        AND t1.CURR_ROW_IND = \u0027Y\u0027 #(lf)        AND ( t1.EFF_END_TMSP \u003e t1.EFF_BEG_TMSP OR t1.EFF_END_TMSP IS null )']),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'EFF_BEG_TMSP', type date}, {'EFF_END_TMSP', type date}}),    #'Duplicated Column' = Table.DuplicateColumn(#'Changed Type', 'TSID', 'TSID - Copy'),    #'Renamed Columns' = Table.RenameColumns(#'Duplicated Column',{{'TSID - Copy', 'TSID_trimmed'}}),    #'Trimmed Text' = Table.TransformColumns(#'Renamed Columns',{{'TSID_trimmed', Text.Trim, type text}, {'RFO', Text.Trim, type text}, {'ZONE_ID', Text.Trim, type text}})in    #'Trimmed Text'"}]},{"name":"RECD_PEND_COMPL_ZBE","isHidden":false,"storageMode":"Import","columns":[{"name":"Week_Ending","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Week_Nbr","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Benefit Contract Number","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Transaction Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Transaction Receive Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TransCreateDt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TransCloseDt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ProdType","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LOBCode","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LOBSubType","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EstimatedSalesCreditAmt","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"ActualSalesCreditAmt","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CorporateEmployeeID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFOName","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Received","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Pending","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Retired","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Declined","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Issued","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Cancelled","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"STATUS","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EFF_BEG_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"EFF_END_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TSID_trimmed","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"date_filter_ind","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Week_Index","dataType":"String","isHidden":false,"expression":"Var year_num = (YEAR(RECD_PEND_COMPL_ZBE[Transaction Receive Date])-YEAR(MIN(RECD_PEND_COMPL_ZBE[Transaction Receive Date])))+1var year_diff = (YEAR(RECD_PEND_COMPL_ZBE[Transaction Receive Date])-YEAR(MIN(RECD_PEND_COMPL_ZBE[Transaction Receive Date])))Var week_num = WEEKNUM(RECD_PEND_COMPL_ZBE[Transaction Receive Date])RETURN(year_diff*52)+week_num","columnType":"Calculated"},{"name":"Week Ending_Index","dataType":"String","isHidden":false,"expression":"Var year_num = (YEAR(RECD_PEND_COMPL_ZBE[Week_Ending])-YEAR(MIN(RECD_PEND_COMPL_ZBE[Week_Ending])))+1var year_diff = (YEAR(RECD_PEND_COMPL_ZBE[Week_Ending])-YEAR(MIN(RECD_PEND_COMPL_ZBE[Week_Ending])))Var week_num = WEEKNUM(RECD_PEND_COMPL_ZBE[Week_Ending])RETURN(year_diff*52)+week_num","columnType":"Calculated"},{"name":"Sort_Order","dataType":"String","isHidden":false,"expression":"RELATED(\u0027Table\u0027[Order])","columnType":"Calculated"},{"name":"CALC_ESC_MOD.BenefitContractNumber","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CALC_ESC_MOD.COMM_PREM_AMT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CALC_ESC_MOD.BASECOVERAGE_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CALC_ESC_MOD.Res_ProductCode","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CALC_ESC_MOD.NSC_RATES.PRODUCT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CALC_ESC_MOD.NSC_RATES.AGE_LOW","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"CALC_ESC_MOD.NSC_RATES.AGE_HIGH","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"CALC_ESC_MOD.NSC_RATES.COMM_RATE","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"CALC_ESC_MOD.NSC_RATES.NSC_RATE","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"CALC_ESC_MOD.NSC_RATES.POLICY_FEE","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Est Sales Credits","dataType":"String","isHidden":false,"expression":"IF(AND(RECD_PEND_COMPL_ZBE[Benefit Contract Number]=RECD_PEND_COMPL_ZBE[CALC_ESC_MOD.BenefitContractNumber],(ISBLANK(RECD_PEND_COMPL_ZBE[EstimatedSalesCreditAmt]))),RECD_PEND_COMPL_ZBE[CALC_ESC_MOD.COMM_PREM_AMT],RECD_PEND_COMPL_ZBE[EstimatedSalesCreditAmt])","columnType":"Calculated"},{"name":"Pending Category","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_PENDING_DETAIL.CorporateEmployeeID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_PENDING_DETAIL.RFO Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LOB Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Owner Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Member Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_PENDING_DETAIL.Benefit Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Days Pending Calculation","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Days Pend Groups","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Pending Sort","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Cycle_Time","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Cycle_Time Group","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Cycle Time Sort","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"diff rfo?","dataType":"String","isHidden":false,"expression":"IF(RECD_PEND_COMPL_ZBE[TAG]\u003c\u003eRECD_PEND_COMPL_ZBE[RFO Code],1,0)","columnType":"Calculated"},{"name":"Region","dataType":"String","isHidden":false,"expression":"SWITCH(  TRUE,  ISBLANK(\u0027RECD_PEND_COMPL_ZBE\u0027[TAG]),  '(Blank)',  \u0027RECD_PEND_COMPL_ZBE\u0027[TAG] IN {'0810'},  'Colorado Springs',  \u0027RECD_PEND_COMPL_ZBE\u0027[TAG] IN {'0361',    '0365',    '0435',    '0496'},  'Established',  \u0027RECD_PEND_COMPL_ZBE\u0027[TAG] IN {'0165',    '0240',    '0283',    '0291',    '0410',    '0525'},  'Growth',  \u0027RECD_PEND_COMPL_ZBE\u0027[TAG] IN {'0115',    '0190',    '0384',    '0475',    '0529'},  'Invest',  \u0027RECD_PEND_COMPL_ZBE\u0027[TAG] IN {'0716'},  'TAN',  \u0027RECD_PEND_COMPL_ZBE\u0027[TAG] IN {'0383'},  'TFGT',  'Other')","columnType":"Calculated"},{"name":"Division","dataType":"String","isHidden":false,"expression":"SWITCH(  TRUE,  ISBLANK(\u0027RECD_PEND_COMPL_ZBE\u0027[TAG]),  '(Blank)',  \u0027RECD_PEND_COMPL_ZBE\u0027[TAG] IN {'0283',    '0365',    '0435',    '0496',    '0810'},  'Central',  \u0027RECD_PEND_COMPL_ZBE\u0027[TAG] IN {'0115',    '0165',    '0190',    '0240',    '0361',    '0384'},  'East',  \u0027RECD_PEND_COMPL_ZBE\u0027[TAG] IN {'0716'},  'TAN',  \u0027RECD_PEND_COMPL_ZBE\u0027[TAG] IN {'0383'},  'TFGT',  \u0027RECD_PEND_COMPL_ZBE\u0027[TAG] IN {'0291',    '0410',    '0475',    '0525',    '0529'},  'West',  'Other')","columnType":"Calculated"},{"name":"Product_Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Product Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Products","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Channels","dataType":"String","isHidden":false,"expression":"SWITCH(  TRUE,  ISBLANK(\u0027RECD_PEND_COMPL_ZBE\u0027[TAG]),  '(Blank)',  \u0027RECD_PEND_COMPL_ZBE\u0027[TAG] IN {'0716'},  'TAN',  \u0027RECD_PEND_COMPL_ZBE\u0027[TAG] IN {'0001',    '0115',    '0190',    '0283',    '0291',    '0361',    '0384',    '0435',    '0525'},  'Thrivent Advisor Group',  \u0027RECD_PEND_COMPL_ZBE\u0027[TAG] IN {'0383'},  'Virtual Advice',  'Other')","columnType":"Calculated"},{"name":"Advisor Group","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG-MVP-Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Year","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Product_RecdYear","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ContractFaceAmount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"YR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TIW Emp Dim - Name.EMPLOYEE_NAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TIW Emp Dim - Name.EMP_STATUS","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Trim","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Pend CW_Flag","dataType":"String","isHidden":false,"expression":"VAR MaxWeek = CALCULATE(            MAX(RECD_PEND_COMPL_ZBE[Week_Ending]),ALL(RECD_PEND_COMPL_ZBE))RETURN    IF(            ((RECD_PEND_COMPL_ZBE[Week_Ending]=MaxWeek)+0) \u0026\u0026 (RECD_PEND_COMPL_ZBE[Pending]=1),'CW Pend','No')","columnType":"Calculated"},{"name":"Contract Max Week","dataType":"String","isHidden":false,"expression":"  VAR ContractMaxWeek = CALCULATE(        MAX(RECD_PEND_COMPL_ZBE[Week_Ending]),        ALLEXCEPT(RECD_PEND_COMPL_ZBE,RECD_PEND_COMPL_ZBE[Benefit Contract Number])    )    VAR MaxYear = YEAR(CALCULATE(            MAX(RECD_PEND_COMPL_ZBE[Week_Ending]),ALL(RECD_PEND_COMPL_ZBE)))RETURNIF((RECD_PEND_COMPL_ZBE[Week_Ending]=ContractMaxWeek) \u0026\u0026 YEAR(RECD_PEND_COMPL_ZBE[Transaction Receive Date])=MaxYear,'Contract MaxWeek','Not Contract MaxWeek')","columnType":"Calculated"},{"name":"Contract MaxWeek Status","dataType":"String","isHidden":false,"expression":"    IF(RECD_PEND_COMPL_ZBE[Contract Max Week]='Contract MaxWeek',RECD_PEND_COMPL_ZBE[STATUS])","columnType":"Calculated"},{"name":"Written YTD_Received Row","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Contract Status Summary","dataType":"String","isHidden":false,"expression":"SWITCH(  TRUE,  ISBLANK(\u0027RECD_PEND_COMPL_ZBE\u0027[Contract MaxWeek Status]),  '(Blank)',  \u0027RECD_PEND_COMPL_ZBE\u0027[Contract MaxWeek Status] IN {'Cancelled'},  'Cancelled',  \u0027RECD_PEND_COMPL_ZBE\u0027[Contract MaxWeek Status] IN {'Declined'},  'Declined',  \u0027RECD_PEND_COMPL_ZBE\u0027[Contract MaxWeek Status] IN {'Issued'},  'Issued',  \u0027RECD_PEND_COMPL_ZBE\u0027[Contract MaxWeek Status] IN {'Pending',    'Received'},  'Pending',  \u0027RECD_PEND_COMPL_ZBE\u0027[Contract MaxWeek Status] IN {'Retired'},  'Retired',  \u0027RECD_PEND_COMPL_ZBE\u0027[Contract MaxWeek Status])","columnType":"Calculated"},{"name":"Contract Min Week","dataType":"String","isHidden":false,"expression":"  VAR ContractMinWeek = CALCULATE(        MIN(RECD_PEND_COMPL_ZBE[Week_Ending]),        ALLEXCEPT(RECD_PEND_COMPL_ZBE,RECD_PEND_COMPL_ZBE[Benefit Contract Number])    )    VAR MaxYear = YEAR(CALCULATE(            MAX(RECD_PEND_COMPL_ZBE[Week_Ending]),ALL(RECD_PEND_COMPL_ZBE)))RETURNIF((RECD_PEND_COMPL_ZBE[Week_Ending]=ContractMinWeek) \u0026\u0026 YEAR(RECD_PEND_COMPL_ZBE[Transaction Receive Date])=MaxYear,1,0)","columnType":"Calculated"},{"name":"Pending Dropped Record","dataType":"String","isHidden":false,"expression":"if(RECD_PEND_COMPL_ZBE[Contract Status Summary]='Pending' \u0026\u0026 RECD_PEND_COMPL_ZBE[Pend CW_Flag]='No','Dropped Record',RECD_PEND_COMPL_ZBE[Contract Status Summary])","columnType":"Calculated"},{"name":"Contract Max_Week","dataType":"String","isHidden":false,"expression":"  VAR ContractMaxWeek = CALCULATE(        MAX(RECD_PEND_COMPL_ZBE[Week_Ending]),        ALLEXCEPT(RECD_PEND_COMPL_ZBE,RECD_PEND_COMPL_ZBE[Benefit Contract Number])    )    VAR MaxYear = YEAR(CALCULATE(            MAX(RECD_PEND_COMPL_ZBE[Week_Ending]),ALL(RECD_PEND_COMPL_ZBE)))RETURNIF((RECD_PEND_COMPL_ZBE[Week_Ending]=ContractMaxWeek) \u0026\u0026 YEAR(RECD_PEND_COMPL_ZBE[Transaction Receive Date])=MaxYear,1,0)","columnType":"Calculated"},{"name":"WeekNum","dataType":"String","isHidden":false,"expression":"WEEKNUM(RECD_PEND_COMPL_ZBE[Transaction Receive Date])","columnType":"Calculated"},{"name":"Future Received Dates Filter","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Contract Max Week any year","dataType":"String","isHidden":false,"expression":"  VAR ContractMaxWeek = CALCULATE(        MAX(RECD_PEND_COMPL_ZBE[Week_Ending]),        ALLEXCEPT(RECD_PEND_COMPL_ZBE,RECD_PEND_COMPL_ZBE[Benefit Contract Number])    )   RETURNIF((RECD_PEND_COMPL_ZBE[Week_Ending]=ContractMaxWeek),'Contract MaxWeek','Not Contract MaxWeek')","columnType":"Calculated"},{"name":"Contract Min Week any year","dataType":"String","isHidden":false,"expression":"  VAR ContractMinWeek = CALCULATE(        MIN(RECD_PEND_COMPL_ZBE[Week_Ending]),        ALLEXCEPT(RECD_PEND_COMPL_ZBE,RECD_PEND_COMPL_ZBE[Benefit Contract Number])    )   RETURNIF((RECD_PEND_COMPL_ZBE[Week_Ending]=ContractMinWeek),'Contract MinWeek','Not Contract MinWeek')","columnType":"Calculated"},{"name":"RECD_PEND_COMPL_FA.CUST_ID_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"RECD_PEND_COMPL_FA.CUST_LGAL_FMT_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RECD_PEND_COMPL_FA.MBR_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RECD_PEND_COMPL_FA.BEN_CTRC_NBR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RECD_PEND_COMPL_FA.BEN_CTRC_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RECD_PEND_COMPL_FA.CTRC_STS_DTL_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RECD_PEND_COMPL_FA.CTRC_STS_DTL_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RECD_PEND_COMPL_FA.Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RECD_PEND_COMPL_FA.LOBCode","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RECD_PEND_COMPL_FA.EstimatedSalesCreditAmt","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"RECD_PEND_COMPL_FA.ActualSalesCreditAmt","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"RECD_PEND_COMPL_FA.TransReceiveDt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"RECD_PEND_COMPL_FA.TransDesc","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RECD_PEND_COMPL_FA.RFOCode","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RECD_PEND_COMPL_FA.RFOName","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RECD_PEND_COMPL_FA.CorporateEmployeeID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RECD_PEND_COMPL_FA.TransYR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Prior Year 2 Flag","dataType":"String","isHidden":false,"expression":"if(RECD_PEND_COMPL_ZBE[Year]=[Prior Year 2],True,False)","columnType":"Calculated"}],"measures":[{"name":"Received CW","expression":"//VAR MaxWeek = WEEKNUM(CALCULATE(//            MAX(RECD_PEND_COMPL_ZBE[Week_Ending]),ALL(RECD_PEND_COMPL_ZBE)))//VAR MaxYear = YEAR(CALCULATE(//            MAX(RECD_PEND_COMPL_ZBE[Week_Ending]),ALL(RECD_PEND_COMPL_ZBE)))//RETURN//    CALCULATE(//        SUM(RECD_PEND_COMPL_ZBE[Received]),//            FILTER(RECD_PEND_COMPL_ZBE,WEEKNUM(RECD_PEND_COMPL_ZBE[Week_Ending])=MaxWeek \u0026\u0026 YEAR(RECD_PEND_COMPL_ZBE[Transaction Receive Date])=MaxYear))+0//            ANBP PW = // var PreWk = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR], DTRB_PERF_DATES[CAL_DAY_DT], today()) - 2Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[CAL_DAY_DT]=(TODAY())))-1Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_week VAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))returnCALCULATE(SUM(RECD_PEND_COMPL_ZBE[Received]),  RECD_PEND_COMPL_ZBE[Transaction Receive Date]\u003c= MaxDay,RECD_PEND_COMPL_ZBE[Transaction Receive Date]\u003e=StartDay)","isHidden":false},{"name":"Received YTD","expression":"//VAR MaxYear = YEAR(CALCULATE(//            MAX(RECD_PEND_COMPL_ZBE[Transaction Receive Date]),ALL(RECD_PEND_COMPL_ZBE)))//RETURN//CALCULATE(//   SUM(RECD_PEND_COMPL_ZBE[Received]),//    FILTER((RECD_PEND_COMPL_ZBE),//        YEAR(RECD_PEND_COMPL_ZBE[Transaction Receive Date])=MaxYear))+0CALCULATE(   SUM(RECD_PEND_COMPL_ZBE[Received]),   DTRB_PERF_DATES[Cal_YTD_Flag]={TRUE()},RECD_PEND_COMPL_ZBE[Contract Min Week any year]='Contract MinWeek')","isHidden":false},{"name":"Received PYTD","expression":"//var py = YEAR(CALCULATE(//            MAX(RECD_PEND_COMPL_ZBE[Week_Ending]),ALL(RECD_PEND_COMPL_ZBE)))-1//var cw = WEEKNUM(CALCULATE(//            MAX(RECD_PEND_COMPL_ZBE[Week_Ending]),ALL(RECD_PEND_COMPL_ZBE)))//RETURN//CALCULATE(//   SUM(RECD_PEND_COMPL_ZBE[Received]),//    FILTER(RECD_PEND_COMPL_ZBE,//        YEAR(RECD_PEND_COMPL_ZBE[Week_Ending])=py//        \u0026\u0026 WEEKNUM(RECD_PEND_COMPL_ZBE[Week_Ending])\u003c=cw//    )//)+0CALCULATE(   SUM(RECD_PEND_COMPL_ZBE[Received]),   DTRB_PERF_DATES[Cal_PYTD_Flag] in {TRUE},RECD_PEND_COMPL_ZBE[Contract Min Week any year]='Contract MinWeek')","isHidden":false},{"name":"Pending Count CW","expression":"VAR MaxWeek = CALCULATE(            MAX(RECD_PEND_COMPL_ZBE[Week_Ending]),ALL(RECD_PEND_COMPL_ZBE))RETURN    CALCULATE(        SUM(RECD_PEND_COMPL_ZBE[Pending]),            FILTER((RECD_PEND_COMPL_ZBE),RECD_PEND_COMPL_ZBE[Week_Ending]=MaxWeek))+0","isHidden":false},{"name":"Received 13 Wk Total Week_Index","expression":"VAR MaxWeek = CALCULATE(            MAX(RECD_PEND_COMPL_ZBE[Week Ending_Index]),ALL(RECD_PEND_COMPL_ZBE))Var start_week = MaxWeek - 12RETURNCALCULATE(              SUM(RECD_PEND_COMPL_ZBE[Received]),              FILTER(RECD_PEND_COMPL_ZBE,                 RECD_PEND_COMPL_ZBE[Week Ending_Index]\u003e= start_week                 \u0026\u0026 RECD_PEND_COMPL_ZBE[Week Ending_Index]\u003c= MaxWeek))+0","isHidden":false},{"name":"Received 4 Wk Total Week_Index","expression":"VAR MaxWeek = CALCULATE(            MAX(RECD_PEND_COMPL_ZBE[Week Ending_Index]),ALL(RECD_PEND_COMPL_ZBE))Var start_week = MaxWeek - 3RETURNCALCULATE(              SUM(RECD_PEND_COMPL_ZBE[Received]),              FILTER(RECD_PEND_COMPL_ZBE,                 RECD_PEND_COMPL_ZBE[Week Ending_Index]\u003e= start_week                 \u0026\u0026 RECD_PEND_COMPL_ZBE[Week Ending_Index]\u003c= MaxWeek))+0","isHidden":false},{"name":"Received 52 Wk Total Week_Index","expression":"VAR MaxWeek = CALCULATE(            MAX(RECD_PEND_COMPL_ZBE[Week Ending_Index]),ALL(RECD_PEND_COMPL_ZBE))Var start_week = MaxWeek - 51RETURNCALCULATE(              SUM(RECD_PEND_COMPL_ZBE[Received]),              FILTER(RECD_PEND_COMPL_ZBE,                 RECD_PEND_COMPL_ZBE[Week Ending_Index]\u003e= start_week                 \u0026\u0026 RECD_PEND_COMPL_ZBE[Week Ending_Index]\u003c= MaxWeek))+0","isHidden":false},{"name":"Received 13 Week Avg","expression":"DIVIDE([Received 13 Wk Total Week_Index DistDt],13)","isHidden":false},{"name":"Received 4 Week Avg","expression":"DIVIDE([Received 4 Wk Total Week_Index DistDt],4)","isHidden":false},{"name":"Received 52 Week Avg","expression":"DIVIDE([Received 52 Wk Total Week_Index DistDt],52)","isHidden":false},{"name":"Pending 13 Wk Total Week_Index","expression":"VAR MaxWeek = CALCULATE(            MAX(RECD_PEND_COMPL_ZBE[Week Ending_Index]),ALL(RECD_PEND_COMPL_ZBE))Var start_week = MaxWeek - 12RETURNCALCULATE(              SUM(RECD_PEND_COMPL_ZBE[Pending]),              FILTER(RECD_PEND_COMPL_ZBE,                 RECD_PEND_COMPL_ZBE[Week Ending_Index]\u003e= start_week                 \u0026\u0026 RECD_PEND_COMPL_ZBE[Week Ending_Index]\u003c= MaxWeek))+0","isHidden":false},{"name":"Pending 4 Wk Total Week_Index","expression":"VAR MaxWeek = CALCULATE(            MAX(RECD_PEND_COMPL_ZBE[Week Ending_Index]),ALL(RECD_PEND_COMPL_ZBE))Var start_week = MaxWeek - 3RETURNCALCULATE(              SUM(RECD_PEND_COMPL_ZBE[Pending]),              FILTER(RECD_PEND_COMPL_ZBE,                 RECD_PEND_COMPL_ZBE[Week Ending_Index]\u003e= start_week                 \u0026\u0026 RECD_PEND_COMPL_ZBE[Week Ending_Index]\u003c= MaxWeek))+0","isHidden":false},{"name":"Pending 52 Wk Total Week_Index","expression":"VAR MaxWeek = CALCULATE(            MAX(RECD_PEND_COMPL_ZBE[Week Ending_Index]),ALL(RECD_PEND_COMPL_ZBE))Var start_week = MaxWeek - 51RETURNCALCULATE(              SUM(RECD_PEND_COMPL_ZBE[Pending]),              FILTER(RECD_PEND_COMPL_ZBE,                 RECD_PEND_COMPL_ZBE[Week Ending_Index]\u003e= start_week                 \u0026\u0026 RECD_PEND_COMPL_ZBE[Week Ending_Index]\u003c= MaxWeek))+0","isHidden":false},{"name":"Pending 13 Week Avg","expression":"DIVIDE([Pending 13 Wk Total Week Index DistDt],13)","isHidden":false},{"name":"Pending 4 Week Avg","expression":"DIVIDE([Pending 4 Wk Total Week Index DistDt],4)","isHidden":false},{"name":"Pending 52 Week Avg","expression":"DIVIDE([Pending 52 Wk Total Week Index DistDt],52)","isHidden":false},{"name":"Products YTD (Not Pending_Rcvd)","expression":"VAR MaxYear = YEAR(CALCULATE(            MAX(RECD_PEND_COMPL_ZBE[Transaction Receive Date]),ALL(RECD_PEND_COMPL_ZBE)))RETURNCALCULATE(    COUNT(RECD_PEND_COMPL_ZBE[Benefit Contract Number]),    FILTER(RECD_PEND_COMPL_ZBE,    RECD_PEND_COMPL_ZBE[STATUS]\u003c\u003e'Pending' \u0026\u0026    RECD_PEND_COMPL_ZBE[STATUS]\u003c\u003e'Received' \u0026\u0026    YEAR(RECD_PEND_COMPL_ZBE[Transaction Receive Date])=MaxYear    ))","isHidden":false},{"name":"Estimated Sales Credit by Week","expression":"CALCULATE(    SUM(RECD_PEND_COMPL_ZBE[Est Sales Credits]),     FILTER(RECD_PEND_COMPL_ZBE,RECD_PEND_COMPL_ZBE[Week_Ending]=            MAX(RECD_PEND_COMPL_ZBE[Week_Ending])            \u0026\u0026 RECD_PEND_COMPL_ZBE[Pending]=1))","isHidden":false},{"name":"Issued % YTD","expression":"VAR MaxYear = YEAR(CALCULATE(            MAX(RECD_PEND_COMPL_ZBE[Transaction Receive Date]),ALL(RECD_PEND_COMPL_ZBE)))RETURN(CALCULATE(    COUNT(RECD_PEND_COMPL_ZBE[Benefit Contract Number]),    FILTER(RECD_PEND_COMPL_ZBE,    RECD_PEND_COMPL_ZBE[STATUS]='Issued' \u0026\u0026    YEAR(RECD_PEND_COMPL_ZBE[Transaction Receive Date])=MaxYear    )))/(CALCULATE(    COUNT(RECD_PEND_COMPL_ZBE[Benefit Contract Number]),    FILTER(RECD_PEND_COMPL_ZBE,    RECD_PEND_COMPL_ZBE[STATUS]\u003c\u003e'Pending' \u0026\u0026    RECD_PEND_COMPL_ZBE[STATUS]\u003c\u003e'Received' \u0026\u0026    YEAR(RECD_PEND_COMPL_ZBE[Transaction Receive Date])=MaxYear    )))","isHidden":false},{"name":"Avg Apps Received per FP","expression":"CALCULATE(    SUM(RECD_PEND_COMPL_ZBE[Received]),    FILTER(RECD_PEND_COMPL_ZBE,        YEAR(RECD_PEND_COMPL_ZBE[Week_Ending])=YEAR(MAX(RECD_PEND_COMPL_ZBE[Week_Ending]))    ))/DISTINCTCOUNT(RECD_PEND_COMPL_ZBE[CorporateEmployeeID])","isHidden":false},{"name":"Received Measure Select","expression":"IF(    HASONEVALUE(\u0027Received Measures Table\u0027[Measure]),        SWITCH(            VALUES(\u0027Received Measures Table\u0027[Measure]),                'Received YTD',RECD_PEND_COMPL_ZBE[Received YTD],                'Received 4 Week Average',RECD_PEND_COMPL_ZBE[Received 4 Week Avg],                'Received 13 Week Average',RECD_PEND_COMPL_ZBE[Received 13 Week Avg],    RECD_PEND_COMPL_ZBE[Received YTD]))","isHidden":false},{"name":"Received PW","expression":"//VAR MaxWeek = CALCULATE(//            MAX(RECD_PEND_COMPL_ZBE[Week Ending_Index]),ALL(RECD_PEND_COMPL_ZBE))//RETURN//    CALCULATE(//        SUM(RECD_PEND_COMPL_ZBE[Received]),//            FILTER((RECD_PEND_COMPL_ZBE),RECD_PEND_COMPL_ZBE[Week Ending_Index]=MaxWeek-1))+0Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[CAL_DAY_DT]=(TODAY())))-2Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_week VAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))returnCALCULATE(SUM(RECD_PEND_COMPL_ZBE[Received]),  RECD_PEND_COMPL_ZBE[Transaction Receive Date] \u003c= MaxDay,RECD_PEND_COMPL_ZBE[Transaction Receive Date]\u003e=StartDay)","isHidden":false},{"name":"Received YTD vs PYTD %","expression":"DIVIDE([Received YTD]-[Received PYTD],[Received PYTD])","isHidden":false},{"name":"Products YTD Issued","expression":"VAR MaxYear = YEAR(CALCULATE(            MAX(RECD_PEND_COMPL_ZBE[Transaction Receive Date]),ALL(RECD_PEND_COMPL_ZBE)))RETURNCALCULATE(    COUNT(RECD_PEND_COMPL_ZBE[Benefit Contract Number]),    FILTER(RECD_PEND_COMPL_ZBE,    RECD_PEND_COMPL_ZBE[STATUS]='Issued' \u0026\u0026    YEAR(RECD_PEND_COMPL_ZBE[Transaction Receive Date])=MaxYear    ))","isHidden":false},{"name":"Estimated Sales Credit CW","expression":"VAR MaxWeek = CALCULATE(            MAX(RECD_PEND_COMPL_ZBE[Week_Ending]),ALL(RECD_PEND_COMPL_ZBE))RETURNCALCULATE(    SUM(RECD_PEND_COMPL_ZBE[Est Sales Credits]),     FILTER(RECD_PEND_COMPL_ZBE,RECD_PEND_COMPL_ZBE[Week_Ending]=            MaxWeek            \u0026\u0026 RECD_PEND_COMPL_ZBE[Pending]=1))+0","isHidden":false},{"name":"Pending CW Flag","expression":"VAR MaxWeek = CALCULATE(            MAX(RECD_PEND_COMPL_ZBE[Week_Ending]),ALL(RECD_PEND_COMPL_ZBE))RETURN    CALCULATE(        COUNT(RECD_PEND_COMPL_ZBE[Pending]),            FILTER((RECD_PEND_COMPL_ZBE),RECD_PEND_COMPL_ZBE[Week_Ending]=MaxWeek))+0","isHidden":false},{"name":"Received YTD revised","expression":"VAR MaxYear = YEAR(CALCULATE(            MAX(RECD_PEND_COMPL_ZBE[Transaction Receive Date]),ALL(RECD_PEND_COMPL_ZBE)))RETURNCALCULATE(    SUM(RECD_PEND_COMPL_ZBE[Received]),    FILTER((RECD_PEND_COMPL_ZBE),        YEAR(RECD_PEND_COMPL_ZBE[Transaction Receive Date])=MaxYear))+0","isHidden":false},{"name":"Received YTD v2","expression":"VAR MaxYear = YEAR(CALCULATE(            MAX(RECD_PEND_COMPL_ZBE[Transaction Receive Date]),ALL(RECD_PEND_COMPL_ZBE)))RETURNCALCULATE(    SUM(RECD_PEND_COMPL_ZBE[Contract Max_Week]),    FILTER((RECD_PEND_COMPL_ZBE),        YEAR(RECD_PEND_COMPL_ZBE[Transaction Receive Date])=MaxYear))+0","isHidden":false},{"name":"Received CWvsPW %","expression":"DIVIDE([Received CW]-[Received PW],[Received PW])","isHidden":false},{"name":"Received CW DistDt","expression":"//VAR MaxWeek = WEEKNUM(CALCULATE(//            MAX(RECD_PEND_COMPL_ZBE[Week_Ending]),ALL(RECD_PEND_COMPL_ZBE)))//VAR MaxYear = YEAR(CALCULATE(//            MAX(RECD_PEND_COMPL_ZBE[Week_Ending]),ALL(RECD_PEND_COMPL_ZBE)))//RETURN//    CALCULATE(//        SUM(RECD_PEND_COMPL_ZBE[Received]),//            FILTER(RECD_PEND_COMPL_ZBE,WEEKNUM(RECD_PEND_COMPL_ZBE[Week_Ending])=MaxWeek \u0026\u0026 YEAR(RECD_PEND_COMPL_ZBE[Transaction Receive Date])=MaxYear))+0//            ANBP PW = // var PreWk = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR], DTRB_PERF_DATES[CAL_DAY_DT], today()) - 2Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[CAL_DAY_DT]=(TODAY())))-1Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_week VAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))returnCALCULATE(SUM(RECD_PEND_COMPL_ZBE[Received]),  RECD_PEND_COMPL_ZBE[Transaction Receive Date]\u003c= MaxDay,RECD_PEND_COMPL_ZBE[Transaction Receive Date]\u003e=StartDay)","isHidden":false},{"name":"Received YTD DistDt","expression":"//VAR MaxYear = YEAR(CALCULATE(//            MAX(RECD_PEND_COMPL_ZBE[Transaction Receive Date]),ALL(RECD_PEND_COMPL_ZBE)))//RETURN//CALCULATE(//   SUM(RECD_PEND_COMPL_ZBE[Received]),//    FILTER((RECD_PEND_COMPL_ZBE),//        YEAR(RECD_PEND_COMPL_ZBE[Transaction Receive Date])=MaxYear))+0CALCULATE(   SUM(RECD_PEND_COMPL_ZBE[Received]),   DTRB_PERF_DATES[Cal_YTD_Flag]={TRUE()})","isHidden":false},{"name":"Received PYTD DistDt","expression":"//var py = YEAR(CALCULATE(//            MAX(RECD_PEND_COMPL_ZBE[Week_Ending]),ALL(RECD_PEND_COMPL_ZBE)))-1//var cw = WEEKNUM(CALCULATE(//            MAX(RECD_PEND_COMPL_ZBE[Week_Ending]),ALL(RECD_PEND_COMPL_ZBE)))//RETURN//CALCULATE(//   SUM(RECD_PEND_COMPL_ZBE[Received]),//    FILTER(RECD_PEND_COMPL_ZBE,//        YEAR(RECD_PEND_COMPL_ZBE[Week_Ending])=py//        \u0026\u0026 WEEKNUM(RECD_PEND_COMPL_ZBE[Week_Ending])\u003c=cw//    )//)+0CALCULATE(   SUM(RECD_PEND_COMPL_ZBE[Received]),   DTRB_PERF_DATES[Cal_PYTD_Flag] in {TRUE})","isHidden":false},{"name":"Received 4 Wk Total Week_Index DistDt","expression":"//VAR MaxWeek = CALCULATE(//            MAX(RECD_PEND_COMPL_ZBE[Week Ending_Index]),ALL(RECD_PEND_COMPL_ZBE))//Var start_week = MaxWeek - 3//RETURN//CALCULATE(//              SUM(RECD_PEND_COMPL_ZBE[Received]),//              FILTER(RECD_PEND_COMPL_ZBE,//                 RECD_PEND_COMPL_ZBE[Week Ending_Index]\u003e= start_week//                 \u0026\u0026 RECD_PEND_COMPL_ZBE[Week Ending_Index]\u003c= MaxWeek))+0Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[CAL_DAY_DT]=(TODAY())))-1Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_week -3VAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))RETURNCALCULATE(              SUM(RECD_PEND_COMPL_ZBE[Received]),              RECD_PEND_COMPL_ZBE[Transaction Receive Date]\u003e=StartDay \u0026\u0026 RECD_PEND_COMPL_ZBE[Transaction Receive Date]\u003c=MaxDay \u0026\u0026 RECD_PEND_COMPL_ZBE[Contract Min Week any year]='Contract MinWeek')","isHidden":false},{"name":"Received 13 Wk Total Week_Index DistDt","expression":"//VAR MaxWeek = CALCULATE(//            MAX(RECD_PEND_COMPL_ZBE[Week Ending_Index]),ALL(RECD_PEND_COMPL_ZBE))//Var start_week = MaxWeek - 12//RETURN//CALCULATE(//              SUM(RECD_PEND_COMPL_ZBE[Received]),//              FILTER(RECD_PEND_COMPL_ZBE,//                 RECD_PEND_COMPL_ZBE[Week Ending_Index]\u003e= start_week//                 \u0026\u0026 RECD_PEND_COMPL_ZBE[Week Ending_Index]\u003c= MaxWeek))+0Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[CAL_DAY_DT]=(TODAY())))-1Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_week -12VAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))RETURNCALCULATE(              SUM(RECD_PEND_COMPL_ZBE[Received]),              RECD_PEND_COMPL_ZBE[Transaction Receive Date]\u003e=StartDay \u0026\u0026 RECD_PEND_COMPL_ZBE[Transaction Receive Date]\u003c=MaxDay \u0026\u0026 RECD_PEND_COMPL_ZBE[Contract Min Week any year]='Contract MinWeek')","isHidden":false},{"name":"Received 52 Wk Total Week_Index DistDt","expression":"//VAR MaxWeek = CALCULATE(//            MAX(RECD_PEND_COMPL_ZBE[Week Ending_Index]),ALL(RECD_PEND_COMPL_ZBE))//Var start_week = MaxWeek - 51//RETURN//CALCULATE(//              SUM(RECD_PEND_COMPL_ZBE[Received]),//              FILTER(RECD_PEND_COMPL_ZBE,//                 RECD_PEND_COMPL_ZBE[Week Ending_Index]\u003e= start_week//                 \u0026\u0026 RECD_PEND_COMPL_ZBE[Week Ending_Index]\u003c= MaxWeek))+0Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[CAL_DAY_DT]=(TODAY())))-1Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_week -51VAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))RETURNCALCULATE(              SUM(RECD_PEND_COMPL_ZBE[Received]),              RECD_PEND_COMPL_ZBE[Transaction Receive Date]\u003e=StartDay \u0026\u0026 RECD_PEND_COMPL_ZBE[Transaction Receive Date]\u003c=MaxDay \u0026\u0026 RECD_PEND_COMPL_ZBE[Contract Min Week any year]='Contract MinWeek')","isHidden":false},{"name":"Received PW DistDt","expression":"Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[CAL_DAY_DT]=(TODAY())))-2Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_week VAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))returnCALCULATE(SUM(RECD_PEND_COMPL_ZBE[Received]),  RECD_PEND_COMPL_ZBE[Transaction Receive Date] \u003c= MaxDay,RECD_PEND_COMPL_ZBE[Transaction Receive Date]\u003e=StartDay)","isHidden":false},{"name":"Pending Count CW DistDt","expression":"//VAR MaxWeek = CALCULATE(//            MAX(RECD_PEND_COMPL_ZBE[Week_Ending]),ALL(RECD_PEND_COMPL_ZBE))//RETURN//    CALCULATE(//        SUM(RECD_PEND_COMPL_ZBE[Pending]),//            FILTER((RECD_PEND_COMPL_ZBE),RECD_PEND_COMPL_ZBE[Week_Ending]=MaxWeek))+0Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[CAL_DAY_DT]=(TODAY())))-1Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_week VAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))returnCALCULATE(SUM(RECD_PEND_COMPL_ZBE[Pending]),  RECD_PEND_COMPL_ZBE[Week_Ending]\u003c= MaxDay,RECD_PEND_COMPL_ZBE[Week_Ending]\u003e=StartDay)","isHidden":false},{"name":"Pending 4 Wk Total Week Index DistDt","expression":"Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[CAL_DAY_DT]=(TODAY())))-1Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_week -3VAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))RETURNCALCULATE(              SUM(RECD_PEND_COMPL_ZBE[Pending]),              RECD_PEND_COMPL_ZBE[Week_Ending]\u003e=StartDay \u0026\u0026 RECD_PEND_COMPL_ZBE[Week_Ending]\u003c=MaxDay )","isHidden":false},{"name":"Pending 13 Wk Total Week Index DistDt","expression":"Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[CAL_DAY_DT]=(TODAY())))-1Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_week -12VAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))RETURNCALCULATE(              SUM(RECD_PEND_COMPL_ZBE[Pending]),              RECD_PEND_COMPL_ZBE[Week_Ending]\u003e=StartDay \u0026\u0026 RECD_PEND_COMPL_ZBE[Week_Ending]\u003c=MaxDay )","isHidden":false},{"name":"Pending 52 Wk Total Week Index DistDt","expression":"Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[CAL_DAY_DT]=(TODAY())))-1Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_week -51VAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))RETURNCALCULATE(              SUM(RECD_PEND_COMPL_ZBE[Pending]),              RECD_PEND_COMPL_ZBE[Week_Ending]\u003e=StartDay \u0026\u0026 RECD_PEND_COMPL_ZBE[Week_Ending]\u003c=MaxDay )","isHidden":false},{"name":"Received CY","expression":"CALCULATE(   SUM(RECD_PEND_COMPL_ZBE[Received]),   DTRB_PERF_DATES[Cal_YTD_Flag]={TRUE()},RECD_PEND_COMPL_ZBE[Contract Min Week any year]='Contract MinWeek')","isHidden":false},{"name":"Received PY","expression":"CALCULATE(   SUM(RECD_PEND_COMPL_ZBE[Received]),   DTRB_PERF_DATES[Prior Year Flag] in {TRUE},RECD_PEND_COMPL_ZBE[Contract Min Week any year]='Contract MinWeek')","isHidden":false},{"name":"Received PY2","expression":"CALCULATE(   SUM(RECD_PEND_COMPL_ZBE[Received]),  RECD_PEND_COMPL_ZBE[Prior Year 2 Flag] in {TRUE},RECD_PEND_COMPL_ZBE[Contract Min Week any year]='Contract MinWeek')","isHidden":false},{"name":"Pending CY","expression":"var MaxPendYear = CALCULATE(    YEAR(MAX(RECD_PEND_COMPL_ZBE[Week_Ending])),ALL(RECD_PEND_COMPL_ZBE))RETURNCALCULATE(    SUM(RECD_PEND_COMPL_ZBE[Pending]),    FILTER(RECD_PEND_COMPL_ZBE,YEAR(RECD_PEND_COMPL_ZBE[Week_Ending])=MaxPendYear))","isHidden":false},{"name":"Pending PY","expression":"var MaxPendYear = CALCULATE(    YEAR(MAX(RECD_PEND_COMPL_ZBE[Week_Ending])),ALL(RECD_PEND_COMPL_ZBE))RETURNCALCULATE(    SUM(RECD_PEND_COMPL_ZBE[Pending]),    FILTER(RECD_PEND_COMPL_ZBE,YEAR(RECD_PEND_COMPL_ZBE[Week_Ending])=MaxPendYear-1))","isHidden":false},{"name":"Pending PY2","expression":"var MaxPendYear = CALCULATE(    YEAR(MAX(RECD_PEND_COMPL_ZBE[Week_Ending])),ALL(RECD_PEND_COMPL_ZBE))RETURNCALCULATE(    SUM(RECD_PEND_COMPL_ZBE[Pending]),    FILTER(RECD_PEND_COMPL_ZBE,YEAR(RECD_PEND_COMPL_ZBE[Week_Ending])=MaxPendYear-2))","isHidden":false}],"source":[{"expression":"let    Source = Table.NestedJoin(RECD_PEND_COMPL, {'CorporateEmployeeID'}, NEW_ZBE, {'TSID_trimmed'}, 'NEW_ZBE', JoinKind.Inner),    #'Expanded NEW_ZBE' = Table.ExpandTableColumn(Source, 'NEW_ZBE', {'RFO', 'TAG_MVP_MKT', 'MVP_ID', 'ZONE_ID', 'TSID', 'EFF_BEG_TMSP', 'EFF_END_TMSP', 'TSID_trimmed'}, {'RFO', 'TAG_MVP_MKT', 'MVP_ID', 'ZONE_ID', 'TSID', 'EFF_BEG_TMSP', 'EFF_END_TMSP', 'TSID_trimmed'}),    #'Weeks Filter Flag' = Table.AddColumn(#'Expanded NEW_ZBE', 'date_filter_ind', each if [Week_Ending] \u003e= [EFF_BEG_TMSP] and [Week_Ending] \u003c= [EFF_END_TMSP] then 1 else if [EFF_BEG_TMSP] is null then 1 else 0),    #'Filtered Rows' = Table.SelectRows(#'Weeks Filter Flag', each ([date_filter_ind] = 1)),    #'Filter for earliest year' = Table.SelectRows(#'Filtered Rows', each Date.IsInPreviousNYears([Week_Ending], 2) or Date.IsInCurrentYear([Week_Ending])),    #'Filtered Rows1' = Table.SelectRows(#'Filter for earliest year', each true),    #'Filter Future Dated' = Table.AddColumn(#'Filtered Rows1', 'Future Received Dates Filter', each if [TransReceiveDt] \u003e [Week_Ending] then 0 else 1),    #'Filtered Rows4' = Table.SelectRows(#'Filter Future Dated', each ([Future Received Dates Filter] = 1)),    #'Renamed Columns' = Table.RenameColumns(#'Filtered Rows4',{{'ZONE_ID', 'Market'},{'TAG_MVP_MKT','TAG-MVP-Market'},{'MVP_ID','MVP'}}),    #'Merged Queries' = Table.NestedJoin(#'Renamed Columns', {'BenefitContractNumber'}, CALC_ESC_MOD, {'BenefitContractNumber'}, 'CALC_ESC_MOD', JoinKind.LeftOuter),    #'Expanded CALC_ESC_MOD' = Table.ExpandTableColumn(#'Merged Queries', 'CALC_ESC_MOD', {'BenefitContractNumber', 'COMM_PREM_AMT', 'BASECOVERAGE_ID', 'Res_ProductCode', 'NSC_RATES.PRODUCT', 'NSC_RATES.AGE_LOW', 'NSC_RATES.AGE_HIGH', 'NSC_RATES.COMM_RATE', 'NSC_RATES.NSC_RATE', 'NSC_RATES.POLICY_FEE'}, {'CALC_ESC_MOD.BenefitContractNumber', 'CALC_ESC_MOD.COMM_PREM_AMT', 'CALC_ESC_MOD.BASECOVERAGE_ID', 'CALC_ESC_MOD.Res_ProductCode', 'CALC_ESC_MOD.NSC_RATES.PRODUCT', 'CALC_ESC_MOD.NSC_RATES.AGE_LOW', 'CALC_ESC_MOD.NSC_RATES.AGE_HIGH', 'CALC_ESC_MOD.NSC_RATES.COMM_RATE', 'CALC_ESC_MOD.NSC_RATES.NSC_RATE', 'CALC_ESC_MOD.NSC_RATES.POLICY_FEE'}),    #'Merged Queries1' = Table.NestedJoin(#'Expanded CALC_ESC_MOD', {'BenefitContractNumber'}, RFO_PENDING_DETAIL, {'Contract Number'}, 'RFO_PENDING_DETAIL', JoinKind.LeftOuter),    #'Expanded RFO_PENDING_DETAIL' = Table.ExpandTableColumn(#'Merged Queries1', 'RFO_PENDING_DETAIL', {'RFO Code', 'RFOName', 'Market', 'Zone_Name', 'CorporateEmployeeID', 'Employee Name', 'Product', 'LOB Description', 'Owner Name', 'Owner Membership Type', 'Contract Number', 'Estimated Sales Credit Amount', 'Benefit Amount', 'Days Pending', 'Received Date', 'Transaction Description', 'Pending Category', 'Count', 'Days Pending Groups', 'Markets'}, {'RFO_PENDING_DETAIL.RFO Code', 'RFO_PENDING_DETAIL.RFOName', 'RFO_PENDING_DETAIL.Market', 'RFO_PENDING_DETAIL.Zone_Name', 'RFO_PENDING_DETAIL.CorporateEmployeeID', 'RFO_PENDING_DETAIL.Employee Name', 'RFO_PENDING_DETAIL.Product', 'RFO_PENDING_DETAIL.LOB Description', 'RFO_PENDING_DETAIL.Owner Name', 'RFO_PENDING_DETAIL.Owner Membership Type', 'RFO_PENDING_DETAIL.Contract Number', 'RFO_PENDING_DETAIL.Estimated Sales Credit Amount', 'RFO_PENDING_DETAIL.Benefit Amount', 'RFO_PENDING_DETAIL.Days Pending', 'RFO_PENDING_DETAIL.Received Date', 'RFO_PENDING_DETAIL.Transaction Description', 'RFO_PENDING_DETAIL.Pending Category', 'RFO_PENDING_DETAIL.Count', 'RFO_PENDING_DETAIL.Days Pending Groups', 'RFO_PENDING_DETAIL.Markets'}),    #'Filtered Rows2' = Table.SelectRows(#'Expanded RFO_PENDING_DETAIL', each true),    #'Uppercased Text' = Table.TransformColumns(#'Filtered Rows2',{{'RFO_PENDING_DETAIL.Pending Category', Text.Upper, type text}}),    #'Renamed Columns1' = Table.RenameColumns(#'Uppercased Text',{{'RFO_PENDING_DETAIL.Pending Category', 'Pending Category'}, {'RFO_PENDING_DETAIL.Employee Name', 'Employee Name'}}),    #'Removed Columns' = Table.RemoveColumns(#'Renamed Columns1',{'RFO_PENDING_DETAIL.RFOName', 'RFO_PENDING_DETAIL.Market', 'RFO_PENDING_DETAIL.Zone_Name', 'RFO_PENDING_DETAIL.Product', 'RFO_PENDING_DETAIL.Contract Number', 'RFO_PENDING_DETAIL.Estimated Sales Credit Amount', 'RFO_PENDING_DETAIL.Days Pending', 'RFO_PENDING_DETAIL.Received Date', 'RFO_PENDING_DETAIL.Transaction Description', 'RFO_PENDING_DETAIL.Count', 'RFO_PENDING_DETAIL.Days Pending Groups', 'RFO_PENDING_DETAIL.Markets'}),    #'Renamed Columns2' = Table.RenameColumns(#'Removed Columns',{{'RFO_PENDING_DETAIL.Owner Membership Type', 'Member Type'}, {'RFO_PENDING_DETAIL.Owner Name', 'Owner Name'}, {'RFO_PENDING_DETAIL.LOB Description', 'LOB Description'}}),    #'Days Pending Column' = Table.AddColumn(#'Renamed Columns2', 'Days Pending Calculation', each [Week_Ending]-[TransCreateDt]),    #'Changed Type' = Table.TransformColumnTypes(#'Days Pending Column',{{'Days Pending Calculation', Int64.Type}}),    #'Days Pend Group' = Table.AddColumn(#'Changed Type', 'Days Pend Groups', each if [Days Pending Calculation] \u003e 28 then '29+ Days' else if [Days Pending Calculation] \u003e 14 then '15-28 Days' else if [Days Pending Calculation] \u003e 7 then '8-14 Days' else if [Days Pending Calculation] \u003e= 0 then '0-7 Days' else null),    #'Pend Group sort' = Table.AddColumn(#'Days Pend Group', 'Pending Sort', each if [Days Pend Groups] = '0-7 Days' then 1 else if [Days Pend Groups] = '8-14 Days' then 2 elseif [Days Pend Groups] = '15-28 Days' then 3 elseif [Days Pend Groups] = '29+ Days' then 4 else''),    #'Product labels' = Table.AddColumn(#'Pend Group sort', 'Products Name', each if [ProdType]= 'TERM' and [LOBCode] = 'NA' then 'TERM' else if [LOBCode]='NA' and Text.StartsWith([BenefitContractNumber],'VA') then 'VA' elseif Text.StartsWith([LOBSubType],'MYGA') then 'MYGA' else  [LOBCode]),    #'Removed Columns1' = Table.RemoveColumns(#'Product labels',{'ContractNumber', 'FileCode', 'TransCode', 'TransSeqNumber', 'SMISLOBCode', 'SMISPlanCode', 'CAPTransmissionNumber', 'AgentCode', 'SMISTRANSKEY'}),    #'Product Filter' = Table.AddColumn(#'Removed Columns1', 'Products', each if [Products Name] = 'TERM' then 'Life-TERM' else if [Products Name] = 'WL' then 'Life-WL' else if [Products Name] = 'UL' then 'Life-UL' else if [Products Name] = 'VUL' then 'Life-VUL' else if [Products Name] = 'LTC' then 'Health-LTC' else if [Products Name] = 'MS' then 'Health-MS' else if [Products Name] = 'DI' then 'Health-DI' else if [Products Name] = 'SO' then 'Annuity-SO' else if [Products Name] = 'VA' then 'Annuity-VA' else if [Products Name] = 'FA' then 'Annuity-FA' else if [Products Name] = 'SPIA' then 'Annuity-SPIA' else if [Products Name] = 'VSO' then 'Annuity-VSO' else if [Products Name] = 'CAREFORWARD' then 'Health-CAREFORWARD' else if [Products Name] = 'MYGA' then 'Annuity-MYGA' else 'Other'),    #'Product Rollup' = Table.AddColumn(#'Product Filter', 'Products.1', each if [Products Name] = 'TERM' then 'Life' else if [Products Name] = 'WL' then 'Life' else if [Products Name] = 'UL' then 'Life' else if [Products Name] = 'VUL' then 'Life' else if [Products Name] = 'LTC' then 'Health' else if [Products Name] = 'MS' then 'Health' else if [Products Name] = 'DI' then 'Health' else if [Products Name] = 'SO' then 'Annuity' else if [Products Name] = 'VA' then 'Annuity' else if [Products Name] = 'FA' then 'Annuity' else if [Products Name] = 'SPIA' then 'Annuity' else if [Products Name] = 'VSO' then 'Annuity' else if [Products Name] = 'CAREFORWARD' then 'Health' else if [Products Name] = 'MYGA' then 'Annuity' else 'Other'),    #'Cycle Time Calc' = Table.AddColumn(#'Product Rollup', 'Cycle_Time', each if [TransCloseDt]='' then '' else [TransCloseDt]-[TransCreateDt]),    #'Changed Type1' = Table.TransformColumnTypes(#'Cycle Time Calc',{{'Cycle_Time', Int64.Type}}),    #'Cycle Time Group' = Table.AddColumn(#'Changed Type1', 'Cycle_Time Group', each if [Cycle_Time] = null then null else if [Cycle_Time] \u003e 63 then '10+ Weeks' else if [Cycle_Time] \u003e 56 then '9 Weeks' else if [Cycle_Time] \u003e 49 then '8 Weeks' else if [Cycle_Time] \u003e 42 then '7 Weeks' else if [Cycle_Time] \u003e 35 then '6 Weeks' else if [Cycle_Time] \u003e 28 then '5 Weeks' else if [Cycle_Time] \u003e 21 then '4 Weeks' else if [Cycle_Time] \u003e 14 then '3 Weeks' else if [Cycle_Time] \u003e 7 then '2 Weeks' else if [Cycle_Time]\u003e= 0 then '1 Week' else ''),    #'Cycle Time Sort' = Table.AddColumn(#'Cycle Time Group', 'Cycle Time Sort', each if [Cycle_Time Group]= null then null else if [Cycle_Time Group]= '1 Week' then 1 elseif [Cycle_Time Group]= '2 Weeks' then 2 elseif [Cycle_Time Group]= '3 Weeks' then 3 elseif [Cycle_Time Group]= '4 Weeks' then 4 elseif [Cycle_Time Group]= '5 Weeks' then 5 elseif [Cycle_Time Group]= '6 Weeks' then 6 elseif [Cycle_Time Group]= '7 Weeks' then 7 elseif [Cycle_Time Group]= '8 Weeks' then 8 elseif [Cycle_Time Group]= '9 Weeks' then 9 else 10),    #'Renamed Columns3' = Table.RenameColumns(#'Cycle Time Sort',{{'BenefitContractNumber', 'Benefit Contract Number'}, {'TransReceiveDt', 'Transaction Receive Date'}, {'TransDesc', 'Transaction Description'}, {'RFOCode', 'RFO Code'}}),    #'Renamed Columns4' = Table.RenameColumns(#'Renamed Columns3',{{'Products Name', 'Product_Name'}, {'Products', 'Product Name'}, {'Products.1', 'Products'},{'RFO','TAG'}}),    #'TAG Label' = Table.AddColumn(#'Renamed Columns4', 'Advisor Group', each if [TAG]= '0115' then '0115-Northeast Advisor Group' elseif [TAG]= '0190' then '0190-Southeast Advisor Group' elseif [TAG]= '0283' then '0283-North Star Advisor Group' elseif [TAG]= '0291' then '0291-Heartland Advisor Group' elseif [TAG]= '0361' then '0361-Great Lakes Advisor Group' elseif [TAG]= '0384' then '0384-South Central Advisor Group' elseif [TAG]= '0435' then '0435-Midwest Rockies Advisor Group' elseif [TAG]= '0525' then '0525-West Advisor Group' elseif [TAG]= '0383' then '0383-Virtual Advice' else if [TAG]= '0716' then '0716-Thrivent Advisors Network' else 'Other'),    #'Changed Type2' = Table.TransformColumnTypes(#'TAG Label',{{'Year', type text}}),    #'Product Year Combo' = Table.AddColumn(#'Changed Type2', 'Product_RecdYear', each [Products]\u0026' '\u0026[Year]),    #'Inserted Trimmed Text' = Table.AddColumn(#'Product Year Combo', 'Trim', each Text.Trim([Benefit Contract Number]), type text),    #'Merged Queries2' = Table.NestedJoin(#'Inserted Trimmed Text', {'CorporateEmployeeID'}, #'TIW Emp Dim - Name', {'TSID'}, 'TIW Emp Dim - Name', JoinKind.LeftOuter),    #'Expanded TIW Emp Dim - Name' = Table.ExpandTableColumn(#'Merged Queries2', 'TIW Emp Dim - Name', {'EMPLOYEE_NAME', 'EMP_STATUS'}, {'TIW Emp Dim - Name.EMPLOYEE_NAME', 'TIW Emp Dim - Name.EMP_STATUS'}),    #'Merged Queries4' = Table.NestedJoin(#'Expanded TIW Emp Dim - Name', {'Benefit Contract Number'}, RECD_PEND_COMPL_FA, {'BEN_CTRC_NBR'}, 'RECD_PEND_COMPL_FA', JoinKind.LeftOuter),    #'Expanded RECD_PEND_COMPL_FA' = Table.ExpandTableColumn(#'Merged Queries4', 'RECD_PEND_COMPL_FA', {'CUST_ID_NBR', 'CUST_LGAL_FMT_NM', 'MBR_TYP_CDE', 'BEN_CTRC_NBR', 'BEN_CTRC_TYP_CDE', 'CTRC_STS_DTL_CDE', 'CTRC_STS_DTL_DSCR', 'Product', 'LOBCode', 'EstimatedSalesCreditAmt', 'ActualSalesCreditAmt', 'TransReceiveDt', 'TransDesc', 'RFOCode', 'RFOName', 'CorporateEmployeeID', 'TransYR'}, {'RECD_PEND_COMPL_FA.CUST_ID_NBR', 'RECD_PEND_COMPL_FA.CUST_LGAL_FMT_NM', 'RECD_PEND_COMPL_FA.MBR_TYP_CDE', 'RECD_PEND_COMPL_FA.BEN_CTRC_NBR', 'RECD_PEND_COMPL_FA.BEN_CTRC_TYP_CDE', 'RECD_PEND_COMPL_FA.CTRC_STS_DTL_CDE', 'RECD_PEND_COMPL_FA.CTRC_STS_DTL_DSCR', 'RECD_PEND_COMPL_FA.Product', 'RECD_PEND_COMPL_FA.LOBCode', 'RECD_PEND_COMPL_FA.EstimatedSalesCreditAmt', 'RECD_PEND_COMPL_FA.ActualSalesCreditAmt', 'RECD_PEND_COMPL_FA.TransReceiveDt', 'RECD_PEND_COMPL_FA.TransDesc', 'RECD_PEND_COMPL_FA.RFOCode', 'RECD_PEND_COMPL_FA.RFOName', 'RECD_PEND_COMPL_FA.CorporateEmployeeID', 'RECD_PEND_COMPL_FA.TransYR'})in    #'Expanded RECD_PEND_COMPL_FA'"}]},{"name":"Products Table","isHidden":true,"storageMode":"Import","columns":[{"name":"Products","dataType":"String","isHidden":true,"columnType":"CalculatedTableColumn"},{"name":"Order","dataType":"String","isHidden":true,"columnType":"CalculatedTableColumn"}],"measures":[],"source":[{"expression":"DATATABLE('Products',STRING,'Order',INTEGER,{{'Life',1},{'Health',2},{'Annuity',3},{'Other',4}})"}]},{"name":"Days Pending Sort","isHidden":false,"storageMode":"Import","columns":[{"name":"Days_Pending","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Order","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i45WMtA1V3BJrCxW0lEyVIrViVay0DU0gYkYgUUMTXWNLGBCxmAhI0ttmICJUmwsAA==', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [Days_Pending = _t, Order = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Days_Pending', type text}, {'Order', Int64.Type}})in    #'Changed Type'"}]},{"name":"Received Measures Table","isHidden":true,"storageMode":"Import","columns":[{"name":"Measure","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"Measure Sort","dataType":"Int64","isHidden":true,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i45WCkpNTs0sS01RiAxxUdJRMlSK1UESNFEIT03NVnAsSy1KTE8FyhuhyhsaoyswVoqNBQA=', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Measure = _t, #'Measure Sort' = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Measure', type text}, {'Measure Sort', Int64.Type}})in    #'Changed Type'"}]},{"name":"RFO_Zone","isHidden":false,"storageMode":"Import","columns":[{"name":"Organization Zone Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Advisor Group","dataType":"String","isHidden":false,"expression":"RELATED(RFO_NM[Adj Name])","columnType":"Calculated"},{"name":"Channel","dataType":"String","isHidden":false,"expression":"SWITCH(  TRUE,  ISBLANK(\u0027RFO_Zone\u0027[Advisor Group]),  '(Blank)',  \u0027RFO_Zone\u0027[Advisor Group] IN {'0714-Strategic Partners'},  'Strategic Partners',  \u0027RFO_Zone\u0027[Advisor Group] IN {'0001-Appleton Office Region',    '0115-Northeast Advisor Group',    '0190-Southeast Advisor Group',    '0283-North Star Advisor Group',    '0291-Heartland Advisor Group',    '0361-Great Lakes Advisor Group',    '0384-South Central Advisor Group',    '0435-Midwest Rockies Advisor Group',    '0525-West Advisor Group'},  'Thrivent Advisor Groups',  \u0027RFO_Zone\u0027[Advisor Group] IN {'0716-Thrivent Advisor Network'},  'Thrivent Advisor Network',  \u0027RFO_Zone\u0027[Advisor Group] IN {'0383-Virtual Advice'},  'Virtual Advice',  'Other')","columnType":"Calculated"}],"measures":[],"source":[{"expression":"let    Source = Sql.Database('dbedwdwprd', 'EnterpriseDataMart', [Query='SELECT DISTINCT #(lf)#(tab)SHD.[Organization Zone Code],#(lf) SHD.[Organization Sub Department Code] as MVP,#(lf)#(tab)(LEFT(SHD.[Organization Zone Code],4)) as RFO,#(lf)#(tab)(SUBSTRING(SHD.[Organization Zone Code],6,2)) as Zone#(lf)from EnterpriseDataMart.[DM_01].[Sale Hierarchy Dimension] SHD#(lf)where SHD.[Organization Department Code] in (\u00270001\u0027,\u00270115\u0027,\u00270190\u0027,\u00270283\u0027,\u00270291\u0027,\u00270361\u0027,\u00270383\u0027,\u00270384\u0027,\u00270435\u0027,\u00270525\u0027,\u00270716\u0027,\u00270714\u0027)#(lf)order by SHD.[Organization Zone Code]']),    #'Renamed Columns' = Table.RenameColumns(Source,{{'Zone', 'Market'}}),    #'Filtered Rows' = Table.SelectRows(#'Renamed Columns', each ([MVP] \u003c\u003e '0410-00' and [MVP] \u003c\u003e '0529-00' and [MVP] \u003c\u003e 'UKWN'))in    #'Filtered Rows'"}]},{"name":"MVP Leaders","isHidden":true,"storageMode":"Import","columns":[{"name":"RFO_CDE","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"MVP_ID","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"ORZN_DEPT_DSCR","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"EMP_STS_TYP_CDE","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"TRMN_DT","dataType":"DateTime","isHidden":true,"columnType":"Data"},{"name":"JOB_TYP_CDE","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"JOB_TYP_DSCR","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"MARKET_LEADERS","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"MVP Leader","dataType":"String","isHidden":true,"expression":"\u0027MVP Leaders\u0027[MVP_ID] \u0026 ' - ' \u0026 \u0027MVP Leaders\u0027[MARKET_LEADERS]","columnType":"Calculated"}],"measures":[],"source":[{"expression":"let    Source = DB2.Database('podwh021:50000', 'podwh021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT DISTINCT#(lf)t1.ORZN_DEPT_CDE as RFO_CDE,#(lf)--t1.ORZN_ZONE_CDE as RFO_ZONE_NM,#(lf)t1.ORZN_SUB_DEPT_CDE as MVP_ID,#(lf)--(SUBSTRING(t1.ORZN_ZONE_CDE,6,5)) AS Market_ID,#(lf)t3.ORZN_DEPT_DSCR,#(lf)t3.EMP_ID,#(lf)t3.EMP_STS_TYP_CDE,#(lf)t3.trmn_dt,#(lf)t3.JOB_TYP_CDE,#(lf)t3.JOB_TYP_DSCR,#(lf)t3.EMP_NM,#(lf)case when t3.emp_nm is null then \u0027Vacant\u0027 Else t3.emp_nm end as market_leaders#(lf)FROM SEMANTIC.SALES_HIERARCHY_DIMENSION t1#(lf)left join#(lf)(#(lf)SELECT DISTINCT#(lf)T1.SALE_HIER_ID,#(lf)t1.orzn_zone_cde,#(lf)t1.orzn_dept_dscr,#(lf)t1.orzn_sub_dept_cde,#(lf)t2.orzn_dept_cde,#(lf)t2.EMP_ID,#(lf)t2.EMP_STS_TYP_CDE,#(lf)t2.trmn_dt,#(lf)t2.JOB_TYP_CDE,#(lf)t2.JOB_TYP_DSCR,#(lf)t2.EMP_NM#(lf)FROM#(lf)SEMANTIC.SALES_HIERARCHY_DIMENSION t1#(lf)left JOIN HUMAN_RESOURCES.CNF_EMP_DIM_DTL_CURR_CFDL t2 ON T1.SALE_HIER_ID = T2.emp_id#(lf)where t1.CURR_ROW_IND = \u0027Y\u0027#(lf)and t2.emp_sts_typ_cde in (\u0027A\u0027)#(lf)and t1.EFF_END_TMSP is null#(lf)AND T2.CURR_ROW_IND = \u0027Y\u0027#(lf)and t1.EFF_END_TMSP is null#(lf)and t2.JOB_TYP_CDE IN (\u0027001001\u0027)#(lf))#(lf)t3#(lf)on t1.orzn_sub_dept_cde = t3.orzn_sub_dept_cde#(lf)where t1.CURR_ROW_IND = \u0027Y\u0027#(lf)and t1.eff_end_tmsp is null#(lf)--and t1.rfo_zone_sts_cde in (\u0027A\u0027)#(lf)--and t3.EMP_STS_TYP_CDE = \u0027A\u0027#(lf)--and substring(t1.orzn_zone_cde,6,2) \u003c\u003e \u002700\u0027#(lf)and t1.orzn_zone_cde \u003c\u003e \u0027UKWN\u0027#(lf)order BY t1.ORZN_SUB_DEPT_CDE;']),    #'Filtered Rows' = Table.SelectRows(Source, each ([RFO_CDE] \u003c\u003e '0386      ' and [RFO_CDE] \u003c\u003e '0710      ' and [RFO_CDE] \u003c\u003e '0714      ' and [RFO_CDE] \u003c\u003e '0715      ' and [RFO_CDE] \u003c\u003e '0718      ' and [RFO_CDE] \u003c\u003e '0997      ' and [RFO_CDE] \u003c\u003e 'UKWN      ') and ([MVP_ID] \u003c\u003e '          ' and [MVP_ID] \u003c\u003e '0410-00   ' and [MVP_ID] \u003c\u003e '0529-00   '))in    #'Filtered Rows'"}]},{"name":"Market Leaders","isHidden":false,"storageMode":"Import","columns":[{"name":"RFO_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_ZONE_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MARKET_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_DEPT_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_STS_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TRMN_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MARKET_LEADERS","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market Leader","dataType":"String","isHidden":false,"expression":"\u0027Market Leaders\u0027[RFO_ZONE_NM] \u0026 ' - ' \u0026\u0027Market Leaders\u0027[MARKET_LEADERS]","columnType":"Calculated"},{"name":"Last Characters","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Experienced Advisors","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Sort_Order","dataType":"String","isHidden":false,"expression":"RELATED(\u0027Experienced Advisors Filter\u0027[Order])","columnType":"Calculated"}],"measures":[],"source":[{"expression":"let    Source = DB2.Database('podwh021:50000', 'podwh021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT DISTINCT#(lf)t1.ORZN_DEPT_CDE as RFO_CDE,#(lf)t1.ORZN_ZONE_CDE as RFO_ZONE_NM,#(lf)(SUBSTRING(t1.ORZN_ZONE_CDE,6,5)) AS Market_ID,#(lf)t3.ORZN_DEPT_DSCR,#(lf)t3.EMP_ID,#(lf)t3.EMP_STS_TYP_CDE,#(lf)t3.trmn_dt,#(lf)t3.JOB_TYP_CDE,#(lf)t3.JOB_TYP_DSCR,#(lf)t3.EMP_NM,#(lf)case when t3.emp_nm is null then \u0027Vacant\u0027 Else t3.emp_nm end as market_leaderS#(lf)FROM SEMANTIC.SALES_HIERARCHY_DIMENSION t1#(lf)left join#(lf)(#(lf)SELECT DISTINCT#(lf)T1.SALE_HIER_ID,#(lf)t1.orzn_zone_cde,#(lf)t1.orzn_dept_dscr,#(lf)t2.orzn_dept_cde,#(lf)t2.EMP_ID,#(lf)t2.EMP_STS_TYP_CDE,#(lf)t2.trmn_dt,#(lf)t2.JOB_TYP_CDE,#(lf)t2.JOB_TYP_DSCR,#(lf)t2.EMP_NM#(lf)FROM#(lf)SEMANTIC.SALES_HIERARCHY_DIMENSION t1#(lf)left JOIN HUMAN_RESOURCES.CNF_EMP_DIM_DTL_CURR_CFDL t2 ON T1.SALE_HIER_ID = T2.emp_id#(lf)where t1.CURR_ROW_IND = \u0027Y\u0027#(lf)and t2.emp_sts_typ_cde in (\u0027A\u0027)#(lf)and t1.EFF_END_TMSP is null#(lf)AND T2.CURR_ROW_IND = \u0027Y\u0027#(lf)and t1.EFF_END_TMSP is null#(lf)and t2.JOB_TYP_CDE IN (\u0027001002\u0027, \u0027001003\u0027,/* \u0027001004\u0027,*/ \u0027001007\u0027)#(lf)AND T2.EMP_ID NOT IN(\u0027TS62904\u0027,\u0027TS67022\u0027,\u0027TS74557\u0027,\u0027TS76499\u0027)#(lf))#(lf)t3#(lf)on t1.orzn_zone_cde = t3.orzn_zone_cde#(lf)where t1.CURR_ROW_IND = \u0027Y\u0027#(lf)and t1.eff_end_tmsp is null#(lf)--and t1.rfo_zone_sts_cde in (\u0027A\u0027)#(lf)and substring(t1.orzn_zone_cde,6,2) \u003c\u003e \u002700\u0027#(lf)and t1.orzn_dept_cde \u003c\u003e \u0027UKWN\u0027#(lf)order BY t1.ORZN_ZONE_CDE;']),    #'Two Digit Market' = Table.AddColumn(Source, 'Last Characters', each Text.End([MARKET_ID], 2), type text),    #'Added Custom' = Table.AddColumn(#'Two Digit Market', 'Experienced Advisors', each if [Last Characters] = '01' then 'PMC - Market 01' else if [Last Characters] = '58' then 'PMC - Market 58' else if [Last Characters] = '59' then 'PMC - Market 59' else if [Last Characters] = '69' then 'GPA - Market 69' else if [Last Characters] = '79' then 'GPD - Market 79' else if [Last Characters] = '89' then 'PPC - Market 89' else if [Last Characters] = '98' then 'NPG - Market 98' else if [Last Characters] = '99' then 'NPG - Market 99' else null)in    #'Added Custom'"}]},{"name":"RFO_NM","isHidden":false,"storageMode":"Import","columns":[{"name":"RFO_CODE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Adj Name","dataType":"String","isHidden":false,"expression":"IF(RFO_NM[RFO_CODE]='0383','0383-Virtual Advice', RFO_NM[NM])","columnType":"Calculated"}],"measures":[],"source":[{"expression":"let    Source = Sql.Database('dbedwdwprd', 'EnterpriseDataMart', [Query='SELECT DISTINCT#(lf)       [Department Identifier] RFO_CODE#(lf)      ,[Department Name] RFO_NM#(lf)      ,concat(trim([Department Identifier]),\u0027-\u0027,[Department Name]) as NM#(lf)#(lf) #(lf)#(lf)  FROM [EnterpriseDataMart].[DM_01].[Organization Dimension] #(lf)  where [Department Identifier] in (\u00270283\u0027, \u00270435\u0027,\u00270115\u0027, \u00270190\u0027, #(lf)                \u00270361\u0027, \u00270384\u0027,\u00270291\u0027, \u00270525\u0027,\u00270001\u0027,\u00270383\u0027,\u00270716\u0027,\u00270714\u0027)#(lf)        and [Current Row Indicator] = \u0027Y\u0027#(lf)        and [Effective Begin Date] \u003e \u00271/1/2019\u0027#(lf)        and [Effective End Date] = \u002712/31/9999\u0027'])in    Source"}]},{"name":"Teaming","isHidden":false,"storageMode":"Import","columns":[{"name":"Employee Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team Purpose Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Effective Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Team","dataType":"String","isHidden":false,"expression":"Teaming[Team Name]\u0026' ('\u0026Teaming[Team Identifier]\u0026')'","columnType":"Calculated"}],"measures":[],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'select a.''Employee Identifier'',#(lf)b.''Team Identifier'',#(lf)b.''Team Name'',#(lf)b.''Team Purpose Code'',#(lf)A.''Effective Date''#(lf)from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Employee Team Organization Relationship Current Dimension'' a inner join#(lf)''ENTERPRISE_EDW''.''PRESENTATION_01''.''Team Organization Current Dimension'' b#(lf)on (a.''Team Identifier Surrogate Key'' = b.''Team Identifier Surrogate Key'')#(lf)where b.''Effective Status Code'' = \u0027A\u0027#(lf)and a.''Team Member Action Code'' \u003c\u003e \u0027DROP\u0027#(lf)and b.''Team Purpose Code'' not in (\u0027COAC\u0027,\u0027ENSB\u0027)#(lf)and a.''Effective Date'' = (SELECT MAX(aa.''Effective Date'')#(lf)FROM ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Employee Team Organization Relationship Current Dimension'' aa inner join#(lf)''ENTERPRISE_EDW''.''PRESENTATION_01''.''Team Organization Current Dimension'' bb#(lf)on (aa.''Team Identifier Surrogate Key'' = bb.''Team Identifier Surrogate Key'' and a.''Employee Identifier''= aa.''Employee Identifier'')#(lf)WHERE bb.''Effective Status Code'' = \u0027A\u0027#(lf)and aa.''Team Member Action Code'' \u003c\u003e \u0027DROP\u0027#(lf)and bb.''Team Purpose Code'' not in (\u0027COAC\u0027,\u0027ENSB\u0027))', null, [EnableFolding=true])in    Source"}]},{"name":"TIW Emp Dim - Name","isHidden":true,"storageMode":"Import","columns":[{"name":"TSID","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"EMPLOYEE_NAME","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"EMP_STATUS","dataType":"String","isHidden":true,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = DB2.Database('podwh021:50000', 'podwh021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT#(lf)EMP_ID AS TSID,#(lf)EMP_NM AS EMPLOYEE_NAME,#(lf)EMP_STS_TYP_DSCR AS EMP_STATUS#(lf)FROM ''HUMAN_RESOURCES''.''CNF_EMP_DIM_DTL_CURR_CFDL''#(lf)WHERE CURR_ROW_IND = \u0027Y\u0027']),    #'Trimmed Text' = Table.TransformColumns(Source,{{'TSID', Text.Trim, type text}})in    #'Trimmed Text'"}]},{"name":"Contract Max Status Lookup","isHidden":false,"storageMode":"Import","columns":[{"name":"Benefit Contract Number","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"Contract Max Status","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"Contract Max Week Flag","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"Contract Status","dataType":"String","isHidden":false,"expression":"SWITCH(  TRUE,  ISBLANK(\u0027Contract Max Status Lookup\u0027[Contract Max Status]),  '(Blank)',  \u0027Contract Max Status Lookup\u0027[Contract Max Status] IN {'Cancelled'},  'Cancelled',  \u0027Contract Max Status Lookup\u0027[Contract Max Status] IN {'Declined'},  'Declined',  \u0027Contract Max Status Lookup\u0027[Contract Max Status] IN {'Issued'},  'Issued',  \u0027Contract Max Status Lookup\u0027[Contract Max Status] IN {'Pending',    'Received'},  'Pending',  \u0027Contract Max Status Lookup\u0027[Contract Max Status] IN {'Retired'},  'Retired',  \u0027Contract Max Status Lookup\u0027[Contract Max Status])","columnType":"Calculated"},{"name":"Estimated Credits","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"Actual Credits","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"}],"measures":[],"source":[{"expression":"SELECTCOLUMNS(FILTER(RECD_PEND_COMPL_ZBE,RECD_PEND_COMPL_ZBE[Contract Max Week]='Contract MaxWeek'),'Benefit Contract Number',RECD_PEND_COMPL_ZBE[Benefit Contract Number],'Contract Max Week Flag',RECD_PEND_COMPL_ZBE[Contract Max Week],'Contract Max Status',RECD_PEND_COMPL_ZBE[Contract MaxWeek Status],'Estimated Credits',RECD_PEND_COMPL_ZBE[EstimatedSalesCreditAmt],'Actual Credits',RECD_PEND_COMPL_ZBE[ActualSalesCreditAmt])"}]},{"name":"DTRB_PERF_DATES","isHidden":false,"storageMode":"Import","columns":[{"name":"DT_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CAL_DAY_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_END_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_WK_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"SRC_SYS_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CRET_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"LST_UPDT_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"CRET_USER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LST_UPDT_USER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_DAY_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_MTH_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_QTR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"WeekIndex","dataType":"String","isHidden":false,"expression":"YEAR(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT])*52+DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR]","columnType":"Calculated"},{"name":"CalYear","dataType":"String","isHidden":false,"expression":"year(DTRB_PERF_DATES[CAL_DAY_DT])","columnType":"Calculated"},{"name":"perf_yr_wk","dataType":"String","isHidden":false,"expression":"DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR] \u0026 '-' \u0026 DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR]","columnType":"Calculated"},{"name":"END_OF_WK_DATE_MAX","dataType":"String","isHidden":false,"expression":"calculate(max(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT]), ALLEXCEPT(DTRB_PERF_DATES,DTRB_PERF_DATES[perf_yr_wk]))","columnType":"Calculated"},{"name":"CalWeekDay","dataType":"String","isHidden":false,"expression":"weekday( DTRB_PERF_DATES[CAL_DAY_DT])","columnType":"Calculated"},{"name":"join_date","dataType":"String","isHidden":false,"expression":"DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR] \u0026 '-' \u0026 DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] \u0026 '-' \u0026 DTRB_PERF_DATES[CalWeekDay]","columnType":"Calculated"},{"name":"Cal_Prior_Year_Flag","dataType":"String","isHidden":false,"expression":"if(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'PREVIOUS', True, False)","columnType":"Calculated"},{"name":"Cal_PYTD_Flag","dataType":"String","isHidden":false,"expression":"if(and(DTRB_PERF_DATES[CAL_DAY_DT] \u003c= DTRB_PERF_DATES[PYTD DATE], DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'PREVIOUS'), True, False)","columnType":"Calculated"},{"name":"Prior Sunday","dataType":"String","isHidden":false,"expression":"LOOKUPVALUE(DTRB_PERF_DATES[END_OF_WK_DATE_MAX], DTRB_PERF_DATES[CAL_DAY_DT], LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT') -6)","columnType":"Calculated"},{"name":"Prior Week Flag","dataType":"String","isHidden":false,"expression":"if( (LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT')-1 ) = DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR], 'TRUE')","columnType":"Calculated"},{"name":"Cal_YTD_Flag","dataType":"String","isHidden":false,"expression":"if(and(DTRB_PERF_DATES[CAL_DAY_DT] \u003c= DTRB_PERF_DATES[Prior Sunday], DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'CURRENT'), True, False)","columnType":"Calculated"},{"name":"Current Year Flag","dataType":"String","isHidden":false,"expression":"if(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT', True, False)","columnType":"Calculated"},{"name":"Prior Year Flag","dataType":"String","isHidden":false,"expression":"if(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'PREVIOUS', True, False)","columnType":"Calculated"},{"name":"PYTD Flag","dataType":"String","isHidden":false,"expression":"var prevweeknum = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[CAL_DAY_DT],max(DTRB_PERF_DATES[Prior Sunday]))return if(and(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] \u003c= prevweeknum, DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='PREVIOUS'), True, False)","columnType":"Calculated"},{"name":"PYTD Flag SF","dataType":"String","isHidden":false,"expression":"if(and(DTRB_PERF_DATES[CAL_DAY_DT] \u003c= DATE(YEAR(today())-1,MONTH(today()),DAY(today()-1)),DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR] = year(today())-1), True, False)","columnType":"Calculated"},{"name":"YTD Flag","dataType":"String","isHidden":false,"expression":"if(and(DTRB_PERF_DATES[CAL_DAY_DT] \u003c= DTRB_PERF_DATES[Prior Sunday], DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT'), True, False)","columnType":"Calculated"},{"name":"YTD_PYTD","dataType":"String","isHidden":false,"expression":"IF(DTRB_PERF_DATES[PYTD Flag]= TRUE(),'PYTD',if(DTRB_PERF_DATES[Cal_YTD_Flag]=True(),'YTD',''))","columnType":"Calculated"}],"measures":[{"name":"PYTD DATE","expression":"(LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT], today() -5 )) - 364","isHidden":false},{"name":"Current Year","expression":"LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT],'CURRENT')","isHidden":false},{"name":"Current Date","expression":"today()","isHidden":false},{"name":"Prior Year","expression":"DTRB_PERF_DATES[Current Year] - 1","isHidden":false},{"name":"Prior Year 2","expression":"DTRB_PERF_DATES[Current Year] - 2","isHidden":false},{"name":"Current Year Max Week","expression":"CALCULATE(MAX(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR]), DTRB_PERF_DATES[YTD Flag]=TRUE())","isHidden":false},{"name":"DTRB Current Year","expression":"LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT],'CURRENT')","isHidden":false}],"source":[{"expression":"let    Source = DB2.Database('podwh021:50000', 'podwh021', [HierarchicalNavigation=true, Implementation='Microsoft']),    COMMON = Source{[Schema='COMMON']}[Data],    DTRB_PERF_DATES1 = COMMON{[Name='DTRB_PERF_DATES']}[Data]in    DTRB_PERF_DATES1"}]},{"name":"Experienced Advisors Filter","isHidden":false,"storageMode":"Import","columns":[{"name":"Filter Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Order","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i45WCvB1VtBV8E0syk4tUTAwVNJRMlSK1UETN7UAihuBxd0DHBHiZpZAcROouAtC3BwkbgoxJwDJHAuQuBlY3C/AHSFuCTLfHIu9IPXGWNSDxC2UYmMB', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [#'Filter Description' = _t, Order = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Filter Description', type text}, {'Order', Int64.Type}})in    #'Changed Type'"}]},{"name":"RECD_PEND_COMPL_FA","isHidden":false,"storageMode":"Import","columns":[{"name":"CUST_ID_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"CUST_LGAL_FMT_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MBR_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"BEN_CTRC_NBR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"BEN_CTRC_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CTRC_STS_DTL_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CTRC_STS_DTL_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LOBCode","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EstimatedSalesCreditAmt","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"ActualSalesCreditAmt","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TransReceiveDt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TransDesc","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFOCode","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFOName","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CorporateEmployeeID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TransYR","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////pnfiles002b//fp_cifs_7834_sas$//MarketAnalysis//FieldReporting//SMIS//RECD_PEND_COMPL_FA.csv'),[Delimiter=',', Columns=17, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'CUST_ID_NBR', Int64.Type}, {'CUST_LGAL_FMT_NM', type text}, {'MBR_TYP_CDE', type text}, {'BEN_CTRC_NBR', type text}, {'BEN_CTRC_TYP_CDE', type text}, {'CTRC_STS_DTL_CDE', type text}, {'CTRC_STS_DTL_DSCR', type text}, {'Product', type text}, {'LOBCode', type text}, {'EstimatedSalesCreditAmt', type number}, {'ActualSalesCreditAmt', type number}, {'TransReceiveDt', type date}, {'TransDesc', type text}, {'RFOCode', type text}, {'RFOName', type text}, {'CorporateEmployeeID', type text}, {'TransYR', type text}})in    #'Changed Type'"}]},{"name":"Parameter - Scorecard","isHidden":false,"storageMode":"Import","columns":[{"name":"Parameter - Scorecard","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"Parameter - Scorecard Fields","dataType":"String","isHidden":true,"columnType":"CalculatedTableColumn"},{"name":"Parameter - Scorecard Order","dataType":"String","isHidden":true,"columnType":"CalculatedTableColumn"},{"name":"View Type","dataType":"String","isHidden":false,"expression":"SWITCH(TRUE(),CONTAINSSTRING(\u0027Parameter - Scorecard\u0027[Parameter - Scorecard],'Product'),'Product','Organization')","columnType":"Calculated"}],"measures":[],"source":[{"expression":"{    ('Advisor Group', NAMEOF(\u0027RECD_PEND_COMPL_ZBE\u0027[Advisor Group]), 0),    ('MVP', NAMEOF(\u0027RECD_PEND_COMPL_ZBE\u0027[MVP]), 1),    ('TAG-MVP-Market', NAMEOF(\u0027RECD_PEND_COMPL_ZBE\u0027[TAG-MVP-Market]), 2),    ('Products', NAMEOF(\u0027RECD_PEND_COMPL_ZBE\u0027[Products]), 3),    ('Product_Name', NAMEOF(\u0027RECD_PEND_COMPL_ZBE\u0027[Product_Name]), 4)}"}]},{"name":"Updates Icon","isHidden":false,"storageMode":"Import","columns":[{"name":"Text","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i45WCs9ILIkpNTAwMi9WyEstt1eKjQUA', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Text = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Text', type text}})in    #'Changed Type'"}]},{"name":"Updates Icon (2)","isHidden":false,"storageMode":"Import","columns":[{"name":"Text","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i45WCs9ILIkpNTAwMi9WyEstt1eK1YlWylSKjQUA', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Text = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Text', type text}})in    #'Changed Type'"}]},{"name":"Applications","isHidden":false,"storageMode":"Import","columns":[{"name":"What\u0027s New Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Alert Message","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Message_WhatsNew_Text","expression":" var _txt1 = SELECTEDVALUE(Applications[What\u0027s New Description]) return IF(ISBLANK(_txt1),'',_txt1)","isHidden":false},{"name":"ShowHideWhatsNewTitle","expression":" IF(ISBLANK(SELECTEDVALUE(Applications[What\u0027s New Description])),' ','What\u0027s New')","isHidden":false},{"name":"ShowHideWhatsNew Background","expression":"IF(ISBLANK(SELECTEDVALUE(Applications[What\u0027s New Description])),'White','#C7AB75')","isHidden":false},{"name":"ShowHideWhatsNew Border","expression":"IF(ISBLANK(SELECTEDVALUE(Applications[What\u0027s New Description])),'White','#63666A')","isHidden":false},{"name":"ShowHideAlert Background","expression":"IF(ISBLANK(SELECTEDVALUE(Applications[Alert Message])),'White','White')","isHidden":false},{"name":"Message_Alert_Text","expression":" var _txt1 = SELECTEDVALUE(Applications[Alert Message]) return IF(ISBLANK(_txt1),'',_txt1)","isHidden":false},{"name":"ShowHideAlertTitle","expression":" IF(ISBLANK(SELECTEDVALUE(Applications[Alert Message])),' ','ALERT !')","isHidden":false},{"name":"ShowHideAlert Border","expression":"IF(ISBLANK(SELECTEDVALUE(Applications[Alert Message])),'White','#BE1D3D')","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//SHARED////Public//DI and BI//Field Reporting//What\u0027s New and Alert Message//What\u0027s New and Alert Message.xlsx'), null, true),    Applications_Sheet = Source{[Item='Applications',Kind='Sheet']}[Data],    #'Changed Type' = Table.TransformColumnTypes(Applications_Sheet,{{'Column1', type text}}),    #'Promoted Headers' = Table.PromoteHeaders(#'Changed Type', [PromoteAllScalars=true]),    #'Changed Type1' = Table.TransformColumnTypes(#'Promoted Headers',{{'What\u0027s New Description', type text}})in    #'Changed Type1'"}]}],"configuredBy":"Brian.Houghton@Thrivent.com","configuredById":"c23084c3-3890-4d73-8268-c18558782893","isEffectiveIdentityRequired":false,"isEffectiveIdentityRolesRequired":false,"refreshSchedule":{"days":["Monday"],"times":["09:00"],"enabled":true,"localTimeZoneId":"Central Standard Time","notifyOption":"MailOnFailure"},"targetStorageMode":"Abf","createdDate":"2022-12-08T17:10:33.427","contentProviderType":"PbixInImportMode"},{"id":"7dd1908e-2257-4d5c-9609-77bee40e500d","name":"LIfe Volume Report","tables":[{"name":"Life Volumes","isHidden":false,"storageMode":"Import","columns":[{"name":"Level 5 Product Line Of Business Subgroup Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LIFE_VOLUME_AMOUNT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Process Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Product Category","dataType":"String","isHidden":false,"expression":"if(\u0027Life Volumes\u0027[Level 5 Product Line Of Business Subgroup Code] in {'UL','ULIII', 'ULLIFPRO'}, 'UL', if(\u0027Life Volumes\u0027[Level 5 Product Line Of Business Subgroup Code] in {'WL', 'WLSP'}, 'WL',\u0027Life Volumes\u0027[Level 5 Product Line Of Business Subgroup Code]))","columnType":"Calculated"},{"name":"WEEKNBR","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'select#(lf)SALES.''Process Date'',#(lf)week(SALES.''Process Date'') WeekNbr,#(lf)SALES.''Level 5 Product Line Of Business Subgroup Code'',#(lf)WDD.''Employee Identifier'' TSID,#(lf)sum(SALES.''Life Volume Amount'') Life_Volume_Amount#(lf)#(lf)#(lf)from#(lf)''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sales Metrics Transactions'' SALES#(lf)join ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' WDD on#(lf) (SALES.''Compensation Payee Agent Surrogate Key''=WDD.''Workforce Dimension Detail Surrogate Key''#(lf)  and SALES.''Compensation Agent Version Number''=WDD.''Workforce Dimension Version Number'')#(lf)  #(lf) where SALES.''Process Date'' between \u00271/1/2021\u0027 and \u002712/31/2023\u0027#(lf) and SALES.''Level 3 Product Line Of Business Code'' = \u0027LIFE\u0027#(lf) and SALES.''Compensable Event Subtype Code'' \u003c\u003e \u0027DTI\u0027#(lf) #(lf)  #(lf)group by#(lf) SALES.''Process Date'',#(lf) week(SALES.''Process Date''),#(lf) SALES.''Level 5 Product Line Of Business Subgroup Code'',#(lf) WDD.''Employee Identifier''', null, [EnableFolding=true]),    #'Sorted Rows' = Table.Sort(Source,{{'Process Date', Order.Ascending}})in    #'Sorted Rows'"}]},{"name":"Organization Dimension","isHidden":false,"storageMode":"Import","columns":[{"name":"Organization Dimension Surrogate Key","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Organization Dimension Version Number","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Source System Key Text","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Effective Begin Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Effective End Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Current Row Indicator","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Department Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Sub Department Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO Zone Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Financial Professional Tenure Group","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"NPG Indicator","dataType":"String","isHidden":false,"expression":"if(CONTAINSSTRING(\u0027Organization Dimension\u0027[RFO Zone Identifier],'99'),'Y','N')","columnType":"Calculated"},{"name":"Department Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG","dataType":"String","isHidden":false,"expression":"if(\u0027Organization Dimension\u0027[Department Identifier] in {'5405','5407','5408','5409'}, '0383', \u0027Organization Dimension\u0027[Department Identifier])","columnType":"Calculated"}],"measures":[],"source":[{"expression":"let    Source = Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'),    ENTERPRISE_EDW_Database = Source{[Name='ENTERPRISE_EDW',Kind='Database']}[Data],    PRESENTATION_01_Schema = ENTERPRISE_EDW_Database{[Name='PRESENTATION_01',Kind='Schema']}[Data],    #'Organization Dimension_View' = PRESENTATION_01_Schema{[Name='Organization Dimension',Kind='View']}[Data],    #'Filtered Rows' = Table.SelectRows(#'Organization Dimension_View', each ([Current Row Indicator] = 'Y') and ([Effective End Date] = #date(9999, 12, 31))),    #'Removed Columns' = Table.RemoveColumns(#'Filtered Rows',{'Source System Code', 'Source Sub System Text', 'Organization Type Code', 'Company Code', 'Company Name', 'Division Identifier', 'Division Name', 'Sub Department Name', 'RFO Zone Name', 'First Name', 'Last Name', 'Employee Service Date', 'Years Of Service Number', 'Hire Date', 'Age at Hire', 'Years In Position Number', 'Adjusted Service Date', 'Financial Professional Tenure', 'Retirement Date', 'Birth Date', 'Age Range (5 yr) Description', 'Gender Description', 'Marital Status Description', 'Marital Status Effective Date', 'Marital Status Code', 'Deceased Date', 'State Description', 'City Name', 'Job Family Description', 'Zip 5 Code', 'Job Family Code', 'Job Type Code', 'Job Type Description', 'Field Professional Roles', 'Worker Sub Type Description', 'Worker Type Description', 'Worker Time Type Description', 'Worker Sub Type Code', 'Employee Status Type Description', 'Employee Status Type Code', 'Age at Termination', 'Business Title Code', 'Employee Location Text', 'FLSA Status', 'Last Work Date', 'Management Level Code', 'Offer Code', 'Original Hire Date', 'Payroll Group Code', 'Position Effective Date', 'Position Number', 'Report to ID', 'Report to Position ID', 'Standard Hours Value', 'Termination Date', 'TF Job Class Code', 'Agent Continuous District Representative Full Time Service Date', 'Agent Field Total Full Time Service Date', 'Agent Total Full Time Service Date', 'Agent Field Total Service Date', 'Conference Qualification Type Code', 'Marketing Date', 'FRST_RCD_IND', 'NEW_CTRC_IND', 'PREV_JOB_TYP_CDE', 'BSNS_ITRP_CNT', 'Organization Dimension Key'}),    #'Trimmed Text' = Table.TransformColumns(#'Removed Columns',{{'Department Identifier', Text.Trim, type text}})in    #'Trimmed Text'"}]},{"name":"TAG Goals","isHidden":false,"storageMode":"Import","columns":[{"name":"TAG","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Goal","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Percent of Total","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('fc9LDoUwCAXQvTR5M0Lg8lHWYtz/NrTWJnXyBgwgJxc4jiaq0agpFYJEpFfvwchfO6mLeiakUYvY2PYXYLcR4ds3wmWK0nsCUrdVGGe8wnIIOFbhjLnFdv9/hls8ESGfT4JrfhIYIiGrSM66xXkB', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [TAG = _t, Goal = _t, #'Percent Growth' = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Goal', Currency.Type}, {'Percent Growth', Percentage.Type}}),    #'Renamed Columns' = Table.RenameColumns(#'Changed Type',{{'Percent Growth', 'Percent of Total'}})in    #'Renamed Columns'"}]},{"name":"DTRB_PERF_DATES","isHidden":false,"storageMode":"Import","columns":[{"name":"DT_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CAL_DAY_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_END_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_WK_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"SRC_SYS_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CRET_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"LST_UPDT_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"CRET_USER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LST_UPDT_USER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_DAY_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_MTH_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_QTR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"YTD Flag","dataType":"String","isHidden":false,"expression":"if(and(DTRB_PERF_DATES[CAL_DAY_DT] \u003c= LOOKUPVALUE(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT'), \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'CURRENT'), True, False)","columnType":"Calculated"},{"name":"Prior Year Flag","dataType":"String","isHidden":false,"expression":"if(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'PREVIOUS', True, False)","columnType":"Calculated"}],"measures":[],"source":[{"expression":"let    Source = DB2.Database('PODWH021:50000', 'PODWH021', [HierarchicalNavigation=true, Implementation='Microsoft']),    COMMON = Source{[Schema='COMMON']}[Data],    DTRB_PERF_DATES1 = COMMON{[Name='DTRB_PERF_DATES']}[Data]in    DTRB_PERF_DATES1"}]},{"name":"Measure Table","isHidden":false,"storageMode":"Import","columns":[],"measures":[{"name":"Life Vol Running Total","expression":"CALCULATE ([YTD Life Vol],FILTER(ALL(\u0027Life Volumes\u0027[WEEKNBR]),\u0027Life Volumes\u0027[WEEKNBR] \u003c= MAX ( \u0027Life Volumes\u0027[WEEKNBR] )))","isHidden":false},{"name":"YTD Life Vol","expression":"calculate(sum(\u0027Life Volumes\u0027[LIFE_VOLUME_AMOUNT]),DTRB_PERF_DATES[YTD Flag] in {TRUE})","isHidden":false},{"name":"YTD_LifeVol_Cummulative","expression":"CALCULATE(    [Life Vol Running Total],    DTRB_PERF_DATES[YTD Flag] in {TRUE})","isHidden":false},{"name":"PY Life Vol","expression":"calculate(sum(\u0027Life Volumes\u0027[LIFE_VOLUME_AMOUNT]),DTRB_PERF_DATES[Prior Year Flag] in {TRUE})","isHidden":false},{"name":"PY Life Vol Running Total","expression":"CALCULATE ([PY Life Vol],FILTER(ALL(\u0027Life Volumes\u0027[WEEKNBR]),\u0027Life Volumes\u0027[WEEKNBR] \u003c= MAX ( \u0027Life Volumes\u0027[WEEKNBR] )))","isHidden":false},{"name":"YTD Life Vol Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[RFO]),SELECTEDVALUE(RFO_Zone[RFO]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]),'RFO Sum'))var YearToDate = LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT')returncalculate(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = YearToDate)","isHidden":false},{"name":"% of YTD Goal","expression":"divide([YTD Life Vol],[YTD Life Vol Goal])","isHidden":false}],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i44FAA==', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Column1 = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Column1', type text}}),    #'Removed Columns' = Table.RemoveColumns(#'Changed Type',{'Column1'})in    #'Removed Columns'"}]},{"name":"YTD_GOALS_DD","isHidden":false,"storageMode":"Import","columns":[{"name":"Level","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Metric","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Date_of_Goal","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Goal_Amount","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////vsshr//shared////Public//DI and BI//Distribution Dashboard//YTD_GOALS_DD.csv'),[Delimiter=',', Columns=4, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Level', type text}, {'Metric', type text}, {'Date_of_Goal', type date}, {'Goal_Amount', type number}}),    #'Filtered Rows' = Table.SelectRows(#'Changed Type', each ([Metric] = 'LifeVolume'))in    #'Filtered Rows'"}]},{"name":"RFO_Zone","isHidden":false,"storageMode":"Import","columns":[{"name":"Organization Zone Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Channel","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'SELECT DISTINCT #(lf)#(tab)SHD.''Organization Zone Code'',#(lf)        SHD.''Organization Sub Department Code'' as MVP,#(lf)#(tab)(LEFT(SHD.''Organization Zone Code'',4)) as RFO,#(lf)#(tab)(SUBSTRING(SHD.''Organization Zone Code'',6,5)) as Zone#(lf)from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' SHD#(lf)where SHD.''Organization Department Code'' in (\u00270001\u0027,\u00270115\u0027,\u00270190\u0027,\u00270283\u0027,\u00270291\u0027,\u00270361\u0027,\u00270383\u0027,\u00270384\u0027,\u00270435\u0027,\u00270525\u0027,\u00270716\u0027,\u00270810\u0027)#(lf)order by SHD.''Organization Zone Code''', null, [EnableFolding=true]),    #'Renamed Columns' = Table.RenameColumns(Source,{{'ZONE', 'Market'}}),    #'Added Custom' = Table.AddColumn(#'Renamed Columns', 'Channel', each if List.Contains({'0001','0115','0165','0190','0240','0283','0291','0361','0365','0384','0410','0435','0475','0496','0525','0529','0810'}, [RFO]) then 'Thrivent Advisor Group'else if List.Contains({'0383'}, [RFO]) then 'TFGT' else if List.Contains({'0716'}, [RFO]) then 'TAN' else  'Other'),    #'Filtered Rows' = Table.SelectRows(#'Added Custom', each ([MVP] \u003c\u003e 'UKWN') and ([RFO] \u003c\u003e '0529'))in    #'Filtered Rows'"}]}],"configuredBy":"Brian.Houghton@Thrivent.com","configuredById":"c23084c3-3890-4d73-8268-c18558782893","isEffectiveIdentityRequired":false,"isEffectiveIdentityRolesRequired":false,"refreshSchedule":{"days":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"times":[],"enabled":true,"localTimeZoneId":"Central Standard Time","notifyOption":"MailOnFailure"},"targetStorageMode":"Abf","createdDate":"2023-01-24T18:47:31.873","contentProviderType":"PbixInImportMode"},{"id":"05b30f72-45ed-4595-8fbf-f5935ae0e099","name":"High Value Household Report","tables":[{"name":"Producer_Snowflake","isHidden":false,"storageMode":"Import","columns":[{"name":"SALE_HIER_DIM_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EMP_DIM_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SALE_HIER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Advisor Group","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ZONE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MARKET","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MARKET_LEADERS","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP Leader","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LST_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FRST_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market with Leader","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP with Leader","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FILTER_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Experience Advisor Sort.Sort","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[{"name":"DisplayFilteredProducer","expression":"  IF([EmployeeNmFiltered]=1,VALUES(Producer_Snowflake[EMP_NM]),   IF([EmployeeNMFiltered]=0 \u0026\u0026 [EmployeeIdFiltered] = 1, VALUES(Producer_Snowflake[EMP_NM]), ' '))","isHidden":false},{"name":"DisplayFilteredTeam","expression":"-- var teamnm = IF([TeamNmFiltered]=1,VALUES(Teams[TEAM_NM]),' ')var teamnm = IF([TeamNmFiltered]=1,VALUES(Producer_Snowflake[Team Name]),' ') return IF(ISBLANK(teamnm),' ', teamnm)","isHidden":false},{"name":"DisplayFilteredTenureGrp","expression":"IF([EmployeeNmFiltered]=1,VALUES(Producer_Snowflake[TENURE_GROUP]),'')","isHidden":false},{"name":"EmployeeIdFiltered","expression":"IF(ISFILTERED(Producer_Snowflake[EMP_ID]),1,0)","isHidden":false},{"name":"EmployeeNmFiltered","expression":"IF(ISFILTERED(Producer_Snowflake[EMP_NM]),1,0)","isHidden":false},{"name":"TeamNmFiltered","expression":"IF(ISFILTERED(Producer_Snowflake[Team Name]),1,0)--IF(ISFILTERED(Teams[TEAM_NM]),1,0)","isHidden":false},{"name":"Message_Filter","expression":"IF([EmployeeNmFiltered] = 1,   '',' ')","isHidden":false},{"name":"ShowHideFilter","expression":"IF([EmployeeNmFiltered] = 1, '#1C00ff00','White')","isHidden":false}],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'select distinct b.''Sales Hierarchy Dimension Surrogate Key'' as SALE_HIER_DIM_SK,#(lf)       a.''Workforce Dimension Detail Surrogate Key'' as EMP_DIM_SK,#(lf)       a.''Employee Identifier'' as EMP_ID,#(lf)       b.''Sales Hierarchy Identifier'' as SALE_HIER_ID,#(lf)       case when a.''Organization Department Code'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027) and substring(a.''Employee Identifier'',1,2) = \u0027DP\u0027 then \u0027TAG 0383-Virtual Advice Orphans\u0027#(lf)           when a.''Organization Department Code'' NOT IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027) and substring(a.''Employee Identifier'',1,2) = \u0027DP\u0027 then \u0027TAG \u0027|| a.''Organization Department Code''||\u0027-\u0027||aa.''Department Name''||\u0027 Orphans\u0027#(lf)           when a.''Employee Name'' = \u0027Johnson,Christopher\u0027 then a.''Last Name''||\u0027,\u0027||a.''Nick Name''#(lf)         else a.''Employee Name''#(lf)       end as EMP_NM,  #(lf)       a.''Last Name'' as LST_NM,#(lf)       case when a.''Nick Name'' IN (\u0027 \u0027) then a.''First Name''#(lf)         else a.''Nick Name''#(lf)       end as FRST_NM, #(lf)       aa.''Job Type Code'' as JOB_TYP_CDE,#(lf)       aa.''Job Type Description'' as JOB_TYP_DSCR,#(lf)       case when a.''Organization Department Code'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027) then \u00270383\u0027#(lf)         else a.''Organization Department Code''#(lf)       end as TAG,#(lf)       case when aa.''Department Identifier'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027) then \u0027Virtual Advice\u0027#(lf)         else aa.''Department Name''#(lf)       end as ''TAG Name'',#(lf)       case when aa.''Department Identifier'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027) then \u00270383-Virtual Advice\u0027#(lf)         else a.''Organization Department Code''||\u0027-\u0027||aa.''Department Name''#(lf)       end as ''Advisor Group'',#(lf)       (substr(b.''Organization Zone Code'',6,2))   AS ZONE,#(lf)       b.''Organization Zone Code'' as Market,#(lf)       case when substr(b.''Organization Zone Code'',9,2) = \u002798\u0027 then \u0027NPG - market 98\u0027#(lf)            when substr(b.''Organization Zone Code'',9,2) = \u002799\u0027 then \u0027NPG - market 99\u0027#(lf)            when substr(b.''Organization Zone Code'',9,2) = \u002759\u0027 then \u0027PMC - market 59\u0027#(lf)            when substr(b.''Organization Zone Code'',9,2) = \u002701\u0027 then \u0027PMC - market 01\u0027#(lf)            when substr(b.''Organization Zone Code'',9,2) = \u002769\u0027 then \u0027GPA - market 69\u0027#(lf)            when Substr(b.''Organization Zone Code'',9,2) = \u002779\u0027 then \u0027GPD - market 79\u0027#(lf)            when substr(b.''Organization Zone Code'',9,2) = \u002789\u0027 then \u0027PPC - market 89\u0027#(lf)       end as Filter_Ind, #(lf)       aa.''Sub Department Identifier'' as MVP_ID,#(lf)       zz4.market_leaders,#(lf)       zz3.''MVP Leader''#(lf)       #(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' a inner join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' as aa#(lf)    on ((a.''Employee Identifier''=aa.''Source System Key Text'' and aa.''Current Row Indicator'' = \u0027Y\u0027) or  #(lf)        (\u0027DP0\u0027||aa.''Source System Key Text'' =  a.''Employee Identifier'' and a.''Current Row Indicator'' = \u0027Y\u0027 and aa.''Current Row Indicator'' = \u0027Y\u0027)) left join#(lf)        ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' b #(lf)    on (a.''Employee Identifier''= b.''Sales Hierarchy Identifier'') left join#(lf)#(lf)#(lf)       (select distinct a2.''Organization Department Code'' as RFO_CDE,#(lf)                        a2.''Organization Sub Department Code'' as MVP_ID,#(lf)                        cc.''Organization Department Description'',#(lf)                        case when cc.''Employee Name'' is null then \u0027Vacant\u0027#(lf)                          else cc.''Employee Name''#(lf)                        end as ''MVP Leader''    #(lf)          from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' a2  left join#(lf)               (Select Distinct aa.''Organization Sub Department Code'',#(lf)                                aa.''Organization Department Description'',#(lf)                                bb.''Employee Identifier'',#(lf)                                bb.''Employee Name'' #(lf)                  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' as aa left join#(lf)                       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' as bb#(lf)                    on aa.''Sales Hierarchy Identifier''=bb.''Employee Identifier''  #(lf)                 where aa.''Current Row Indicator'' = \u0027Y\u0027#(lf)                   and bb.''Employee Status Type Code'' = \u0027A\u0027#(lf)                   and bb.''Current Row Indicator'' = \u0027Y\u0027#(lf)                   and aa.''Effective End Date'' = \u00279999-12-31\u0027#(lf)                   and bb.''Job Type Code'' = \u0027001001\u0027#(lf)                 order by aa.''Organization Sub Department Code'') cc#(lf)             on a2.''Organization Sub Department Code''=cc.''Organization Sub Department Code''  #(lf)          where a2.''Current Row Indicator'' = \u0027Y\u0027#(lf)            and a2.''Effective End Date'' = \u00279999-12-31\u0027#(lf)            and a2.''Organization Zone Code'' \u003c\u003e \u0027UKWN\u0027#(lf)           order by a2.''Organization Sub Department Code''  ) as zz3#(lf)  on aa.''Sub Department Identifier''= zz3.''MVP_ID'' left join#(lf)   #(lf)    #(lf)     (SELECT DISTINCT a4.''Organization Department Code'' as RFO_CDE,#(lf)                      a4.''Organization Zone Code'' as TAG_ZONE_NM, #(lf)                      (substring(a4.''Organization Zone Code'',6,5)) as Market_ID,#(lf)                      case when t4.''Employee Name'' is null then \u0027Vacant\u0027#(lf)                        else t4.''Employee Name''#(lf)                      end as Market_Leaders#(lf)#(lf)        from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' a4 left join #(lf)             (select distinct aa4.''Organization Zone Code'',#(lf)                              bb4.''Employee Name''  #(lf)#(lf)                from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' aa4 left join #(lf)                     ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' bb4#(lf)                  on aa4.''Sales Hierarchy Identifier''=bb4.''Employee Identifier''#(lf)               where aa4.''Current Row Indicator'' = \u0027Y\u0027      #(lf)                 and bb4.''Employee Status Type Code'' in (\u0027A\u0027)#(lf)                 and aa4.''Effective End Date'' = \u00279999-12-31\u0027#(lf)                 and bb4.''Current Row Indicator'' = \u0027Y\u0027#(lf)                 and aa4.''Effective End Date'' = \u00279999-12-31\u0027#(lf)                 and (bb4.''Job Type Code'' in (\u0027001002\u0027,\u0027001003\u0027,\u0027001007\u0027) or #(lf)                      bb4.''Employee Identifier'' in (\u0027TS60295\u0027,\u0027TS49431\u0027,\u0027TS22024\u0027,\u0027TS26677\u0027))#(lf)                 and bb4.''Employee Identifier'' not in (\u0027TS62904\u0027,\u0027TS67022\u0027,\u0027TS74827\u0027,\u0027TS73067\u0027,\u0027TS77319\u0027,\u0027TS73124\u0027)) t4 #(lf)          on a4.''Organization Zone Code'' = t4.''Organization Zone Code''#(lf)       where a4.''Current Row Indicator'' = \u0027Y\u0027#(lf)         and a4.''Effective End Date'' = \u00279999-12-31\u0027#(lf)         and substring(a4.''Organization Zone Code'',6,2) \u003c\u003e \u002700\u0027#(lf)         and a4.''Organization Department Code'' \u003c\u003e \u0027UKWN\u0027#(lf)       order by a4.''Organization Zone Code'') zz4#(lf)     #(lf)   on  b.''Organization Zone Code''= zz4.''TAG_ZONE_NM'' #(lf)  #(lf) where a.''Employee Status Type Code'' IN (\u0027A\u0027,\u0027I\u0027,\u0027L\u0027)#(lf)   and (aa.''Job Family Code'' LIKE \u0027FLD%\u0027 OR#(lf)        aa.''Job Family Code'' =\u0027SALES\u0027 OR#(lf)        aa.''TF Job Class Code'' =\u0027FAC\u0027 or#(lf)        aa.''Source Sub System Text'' = \u0027ORGANIZATION_UNIT\u0027)#(lf)   and a.''Termination Date'' is NULL #(lf)   and a.''Organization Department Code'' not in (\u00277186\u0027,\u00270810\u0027,\u00270529\u0027,\u00270165\u0027,\u00270240\u0027,\u00270365\u0027,\u00270386\u0027,\u00270410\u0027,\u00270475\u0027,\u00270496\u0027,\u00270715\u0027)                                      #(lf)   and aa.''Job Type Code'' not in (\u0027001356\u0027,\u0027001500\u0027,\u0027001505\u0027,\u0027001506\u0027,\u0027001512\u0027,\u0027001658\u0027,\u0027001705\u0027,\u0027001747\u0027,\u0027002598\u0027,\u0027006160\u0027,\u0027009011\u0027,\u0027009015\u0027,\u0027009016\u0027,\u0027009021\u0027)   #(lf)and b.''Effective End Date'' = \u00279999-12-31\u0027 #(lf)   and b.''Current Row Indicator'' = \u0027Y\u0027 #(lf)   and a.''Current Row Indicator'' = \u0027Y\u0027 #(lf)   #(lf)  order by a.''Employee Identifier''', null, [EnableFolding=true]),    #'Removed Duplicates' = Table.Distinct(Source, {'SALE_HIER_DIM_SK'}),    #'Added Custom8' = Table.AddColumn(#'Removed Duplicates', 'Market with Leader', each [MARKET]\u0026' - '\u0026[MARKET_LEADERS]),    #'Added Custom9' = Table.AddColumn(#'Added Custom8', 'MVP with Leader', each [MVP_ID] \u0026 ' - ' \u0026 [MVP Leader]),    #'Replaced Value' = Table.ReplaceValue(#'Added Custom9',null,'',Replacer.ReplaceValue,{'FILTER_IND'}),    #'Merged Queries' = Table.NestedJoin(#'Replaced Value', {'FILTER_IND'}, #'Experience Advisor Sort', {'Filter_Ind'}, 'Experience Advisor Sort', JoinKind.LeftOuter),    #'Expanded Experience Advisor Sort' = Table.ExpandTableColumn(#'Merged Queries', 'Experience Advisor Sort', {'Sort'}, {'Experience Advisor Sort.Sort'})in    #'Expanded Experience Advisor Sort'"}]},{"name":"Sales","isHidden":false,"storageMode":"Import","columns":[{"name":"GRPIDNBR","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"M12 FYLH Sales","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"M12 Sales","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Sales_FYLH_CY","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Sales_FYLH_5Yrs","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Sales_CY","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Sales_5yrs","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'WITH SALES as(#(lf)select a.''Customer ID Number'' as CIFID, #(lf)       c.''Customer Group Identification Number'' as GRPIDNBR,#(lf)       b.''Distribution Performance Reporting Year Number'',#(lf)       b.''Calendar Day Date'' as Cal_DT,#(lf)       a.''Reporting Roll Up Event Description'',#(lf)       sum(a.''Grid Credit Amount'') as ''Grid Credit Amount'',#(lf)       case when a.''Compensation Level 2 Product Character Code'' = \u0027ANN\u0027 then \u0027Annuity\u0027#(lf)            when a.''Compensation Level 2 Product Character Code'' = \u0027INVEST\u0027 then \u0027Investments\u0027#(lf)            when a.''Compensation Level 2 Product Character Code'' = \u0027BANK\u0027 then \u0027Investments\u0027#(lf)            when a.''Compensation Level 2 Product Character Code'' = \u0027RISK\u0027 then \u0027Life \u0026 Health\u0027#(lf)            when a.''Compensation Level 2 Product Character Code'' = \u0027UKWN\u0027 and a.''Compensation Reporting Roll Up Name'' = \u0027Fixed Indexed Annuity\u0027 then \u0027Annuity\u0027#(lf)            when a.''Compensation Level 2 Product Character Code'' = \u0027UKWN\u0027 and a.''Compensation Reporting Roll Up Name'' = \u0027Variable Annuity\u0027 then \u0027Annuity\u0027#(lf)            when a.''Compensation Level 2 Product Character Code'' = \u0027UKWN\u0027 and a.''Compensation Reporting Roll Up Name'' = \u0027Term Life\u0027 then \u0027Life \u0026 Health\u0027#(lf)            when a.''Compensation Level 2 Product Character Code'' = \u0027UKWN\u0027 and a.''Compensation Reporting Roll Up Name'' = \u0027Universal Life\u0027 then \u0027Life \u0026 Health\u0027#(lf)            when a.''Compensation Level 2 Product Character Code'' = \u0027UKWN\u0027 and a.''Compensation Reporting Roll Up Name'' = \u0027Whole Life\u0027 then \u0027Life \u0026 Health\u0027#(lf)            when a.''Compensation Level 2 Product Character Code'' = \u0027UKWN\u0027 and a.''Compensation Reporting Roll Up Name'' = \u0027Variable Universal Life\u0027 then \u0027Life \u0026 Health\u0027#(lf)             else \u0027 \u0027#(lf)       end as ''Product Category''   #(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Compensation and Sales Metrics Fact'' as a left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Distribution Performance Dates Dimension'' as b#(lf)    on a.''Distribution Performance Dates Surrogate Key''=b.''Date Surrogate Key'' left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Conformed Customer Dimension Detail'' c#(lf)    on a.''Customer ID Number'' = c.''Customer Identification Number'' and c.''Current Row Indicator'' = \u0027Y\u0027 #(lf)       #(lf) #(lf) where b.''Distribution Performance Reporting Year Number'' in (\u00272020\u0027,\u00272021\u0027,\u00272022\u0027,\u00272023\u0027,\u00272024\u0027)  #(lf)   and (a.''Grid Credit Amount'' is not NULL) #(lf)     #(lf) group by c.''Customer Group Identification Number'',#(lf)          b.''Distribution Performance Reporting Year Number'',#(lf)          a.''Customer ID Number'', #(lf)          a.''Employee Identifier'', #(lf)          a.''Compensation Reporting Roll Up Name'',#(lf)          a.''Reporting Roll Up Event Description'',#(lf)          a.''Compensation Level 2 Product Character Code'',#(lf)          b.''Calendar Day Date''#(lf) )#(lf) #(lf)  (select GRPIDNBR,#(lf)          Sales, #(lf)          Type#(lf)    #(lf)     from (#(lf)            select grpidnbr,#(lf)                   sum(''Grid Credit Amount'') as Sales, #(lf)                   \u0027Sales_5yrs\u0027 as TYPE#(lf)              from sales#(lf)             where grpidnbr \u003e 0 #(lf)            group by grpidnbr) #(lf)   group by grpidnbr, Type, Sales)     #(lf)#(lf)   UNION#(lf)           (select grpidnbr,#(lf)                   Sales,#(lf)                   Type#(lf)             from (select grpidnbr,#(lf)                          sum(''Grid Credit Amount'') as Sales,#(lf)                          \u0027Sales_CY\u0027 as Type#(lf)                     from SALES#(lf)                    where grpidnbr \u003e 0 #(lf)                and ''Distribution Performance Reporting Year Number'' = 2024#(lf)             group by grpidnbr)  #(lf)   group by grpidnbr, Type, Sales )    #(lf)     #(lf)  UNION#(lf)          (select grpidnbr,#(lf)                  Sales,#(lf)                  Type#(lf)             from (select grpidnbr,#(lf)                          sum(''Grid Credit Amount'') as Sales,#(lf)                          \u0027Sales_FYLH_5Yrs\u0027 as Type#(lf)                     from SALES#(lf)                    where grpidnbr \u003e 0 #(lf)                      and ''Reporting Roll Up Event Description'' = \u0027First Year\u0027#(lf)                      and ''Product Category'' = \u0027Life \u0026 Health\u0027#(lf)              group by grpidnbr)#(lf)   group by grpidnbr, Type, Sales )      #(lf)       #(lf)       #(lf)  UNION#(lf)          (select grpidnbr,#(lf)                  Sales,#(lf)                  Type#(lf)             from (select grpidnbr,#(lf)                          sum(''Grid Credit Amount'') as Sales,#(lf)                          \u0027Sales_FYLH_CY\u0027 as Type#(lf)                     from SALES#(lf)                    where grpidnbr \u003e 0 #(lf)                      and ''Reporting Roll Up Event Description'' = \u0027First Year\u0027#(lf)                      and ''Product Category'' = \u0027Life \u0026 Health\u0027#(lf)                      and ''Distribution Performance Reporting Year Number'' = 2024#(lf)             group by grpidnbr)#(lf)   group by grpidnbr, Type, Sales )#(lf)#(lf) UNION#(lf)      (select grpidnbr,#(lf)              Sales,#(lf)              Type#(lf)         from (Select grpidnbr,#(lf)                      sum(''Grid Credit Amount'') as Sales,#(lf)                      \u0027M12 Sales\u0027 as Type#(lf)                 from SALES#(lf)                where grpidnbr \u003e 0 #(lf)                  and (Cal_DT between dateadd(MONTH,-11, date_trunc(\u0027MONTH\u0027, CURRENT_DATE())) and DATEADD(DAY, -1, DATE_TRUNC(\u0027MONTH\u0027, DATEADD(MONTH,1,CURRENT_DATE())))) #(lf)         group by grpidnbr)#(lf)   group by grpidnbr, Type, Sales  ) #(lf)   #(lf) UNION#(lf)      (select grpidnbr,#(lf)              Sales,#(lf)              Type#(lf)         from (Select grpidnbr,#(lf)                      sum(''Grid Credit Amount'') as Sales,#(lf)                      \u0027M12 FYLH Sales\u0027 as Type#(lf)                 from SALES#(lf)                where grpidnbr \u003e 0 #(lf)                  and ''Reporting Roll Up Event Description'' = \u0027First Year\u0027#(lf)                  and ''Product Category'' = \u0027Life \u0026 Health\u0027#(lf)                  and (Cal_DT between dateadd(MONTH,-11, date_trunc(\u0027MONTH\u0027, CURRENT_DATE())) and DATEADD(DAY, -1, DATE_TRUNC(\u0027MONTH\u0027, DATEADD(MONTH,1,CURRENT_DATE())))) #(lf)         group by grpidnbr)#(lf)   group by grpidnbr, Type, Sales  )', null, [EnableFolding=true]),    #'Unpivoted Columns' = Table.UnpivotOtherColumns(Source, {'GRPIDNBR', 'SALES'}, 'Attribute', 'Value'),    #'Reversed Rows' = Table.ReverseRows(#'Unpivoted Columns'),    #'Pivoted Column' = Table.Pivot(#'Reversed Rows', List.Distinct(#'Reversed Rows'[Value]), 'Value', 'SALES', List.Sum),    #'Removed Columns' = Table.RemoveColumns(#'Pivoted Column',{'Attribute'}),    #'Replaced Value' = Table.ReplaceValue(#'Removed Columns',null,0,Replacer.ReplaceValue,{'Sales_5yrs', 'Sales_CY', 'Sales_FYLH_5Yrs', 'Sales_FYLH_CY', 'M12 Sales', 'M12 FYLH Sales'})in    #'Replaced Value'"}]},{"name":"superoat","isHidden":false,"storageMode":"Import","columns":[{"name":"cifidnbr","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"grpidnbr","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"FIRSTNM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LASTNM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"hhage","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"MEET_KIDS","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"yearsmember","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"COL_HORIZON1","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"COL_HORIZON2","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"COL_NONQUAL","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"COL_MF","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"PHONE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"hhetrs_assets","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"hhsa","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"ASSET_DB_RATIO","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"DB_ASSET_RATIO","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"LTC_FLAG","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"hhtotctrcs","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"hhtermown","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"hhtradown","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"hhulown","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"hhvulown","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"hhdiown","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"hhltcown","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"hhfaown","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"hhvaown","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"hhmfown","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"hhsoown","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"INHERITED_IRAS","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SEP_SIMPLE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"category","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Category_Highlighting","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"TTA","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"SEGMENT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"HHMFAUM","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"HHANNAUM","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"lifecv","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"hhwrapaum","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TTA Filter","dataType":"String","isHidden":false,"expression":"IF(\u0027superoat\u0027[TTA] \u003e 0, 'Target Account', ' ')","columnType":"Calculated"},{"name":"Over150K Filter","dataType":"String","isHidden":false,"expression":"IF(\u0027superoat\u0027[hhetrs_assets] \u003e 150000, 'Over $150K', ' ')","columnType":"Calculated"},{"name":"HHAUM","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"HHAUA","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TOTLOB","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"YTD Total Grid Revenue","dataType":"Int64","isHidden":false,"expression":"  var _sales = RELATED(\u0027Sales\u0027[Sales_CY])RETURNIF(ISBLANK(_sales),0,_sales)","columnType":"Calculated"},{"name":"YTD FYLH Total Grid Revenue","dataType":"Int64","isHidden":false,"expression":"  var _sales = RELATED(\u0027Sales\u0027[Sales_FYLH_CY])RETURNIF(ISBLANK(_sales),0,_sales)","columnType":"Calculated"},{"name":"Total Grid Revenue Last 5yrs","dataType":"Int64","isHidden":false,"expression":"  var _sales = RELATED(\u0027Sales\u0027[Sales_5yrs])RETURNIF(ISBLANK(_sales),0,_sales) ","columnType":"Calculated"},{"name":"FYLH Total Grid Revenue Last 5yrs","dataType":"Int64","isHidden":false,"expression":"  var _sales = RELATED(\u0027Sales\u0027[Sales_FYLH_5Yrs])RETURNIF(ISBLANK(_sales),0,_sales)","columnType":"Calculated"},{"name":"M12 Total Grid Revenue","dataType":"String","isHidden":false,"expression":" var _sales = RELATED(\u0027Sales\u0027[M12 Sales])RETURNIF(ISBLANK(_sales),0,_sales)","columnType":"Calculated"},{"name":"M12 FYLH Total Grid Revenue","dataType":"String","isHidden":false,"expression":"  var _sales = RELATED(\u0027Sales\u0027[M12 FYLH Sales])RETURNIF(ISBLANK(_sales),0,_sales)","columnType":"Calculated"},{"name":"hhimmown","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"hhwrapown","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CategoryFilter","dataType":"String","isHidden":false,"expression":"SWITCH(Superoat[Category],  'Blue - Insurance', 'Insurance',  'Green - Asset Gather', 'Asset Gather',  'Orange - Meet the Kids', 'Meet the Kids',  'Purple - Horizon', 'Horizon',  'Yellow - LTC', 'LTC',  ' ')","columnType":"Calculated"}],"measures":[{"name":"CategoryColor","expression":"SWITCH(SELECTEDVALUE(superoat[Category]),  'Blue - Insurance', '#6DB6FF',  'Green - Asset Gather', '#1AAA55',  'Orange - Meet the Kids', '#F4633A',  'Purple - Horizon', '#9482FF',  'Yellow - LTC', '#F2F0A1',   'White')","isHidden":false},{"name":"TOTAL HHLD","expression":" var _total =  CALCULATE(DISTINCTCOUNT(\u0027superoat\u0027[grpidnbr]))Returnif(isblank(_total),0,_total) ","isHidden":false},{"name":"Blank Measure","expression":"blank()","isHidden":false},{"name":"Asset/Death Benefit Ratio middle","expression":"PERCENTILE.INC(\u0027superoat\u0027[ASSET_DB_RATIO],0.5)","isHidden":false},{"name":"Death Benefit/Asset Ratio middle","expression":"PERCENTILE.INC(superoat[DB_ASSET_RATIO],0.5)","isHidden":false},{"name":"Top Filter Over 150k Display","expression":"  IF(\u0027Producer_Snowflake\u0027[EmployeeNmFiltered]= 0 \u0026\u0026 MAX(superoat[Over150K Filter]) = BLANK(),0,1)","isHidden":false},{"name":"Top Filter TTA Display","expression":"  IF(\u0027Producer_Snowflake\u0027[EmployeeNmFiltered]= 0 \u0026\u0026 MAX(superoat[TTA Filter]) = BLANK(),0,1)","isHidden":false}],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////pnfiles002b//fp_cifs_7834_sas$//MarketAnalysis//FieldReporting//PBI Data//Clients//superoat.csv'),[Delimiter=',', Columns=43, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Replaced Value' = Table.ReplaceValue(#'Promoted Headers',null,0,Replacer.ReplaceValue,{'COL_HORIZON1', 'COL_HORIZON2', 'COL_NONQUAL', 'COL_MF'}),    #'Replaced Value1' = Table.ReplaceValue(#'Replaced Value','','0',Replacer.ReplaceValue,{'COL_HORIZON1', 'COL_HORIZON2', 'COL_NONQUAL', 'COL_MF'}),    #'Changed Type' = Table.TransformColumnTypes(#'Replaced Value1',{{'grpidnbr', Int64.Type}}),    #'Added Custom' = Table.AddColumn(#'Changed Type', 'Category_Highlighting', each if[category] = 'Blue - Insurance' then 2else if [category] = 'Green - Asset Gather' then 3else if [category] = 'Orange - Meet the Kids' then 4 else if [category] = 'Purple - Horizon' then 5else if [category] = 'Yellow - LTC' then 6else 1),    #'Changed Type2' = Table.TransformColumnTypes(#'Added Custom',{{'hhage', Int64.Type}, {'yearsmember', Int64.Type}, {'COL_HORIZON1', Int64.Type}, {'COL_HORIZON2', Int64.Type}, {'COL_NONQUAL', Int64.Type}, {'COL_MF', Int64.Type}, {'TTA', Int64.Type}, {'hhtotctrcs', Int64.Type}, {'hhtermown', Int64.Type}, {'hhtradown', Int64.Type}, {'hhulown', Int64.Type}, {'hhvulown', Int64.Type}, {'hhdiown', Int64.Type}, {'hhltcown', Int64.Type}, {'hhfaown', Int64.Type}, {'hhvaown', Int64.Type}, {'hhmfown', Int64.Type}, {'hhsoown', Int64.Type}, {'TOTLOB', Int64.Type}, {'HHAUM', type number}, {'HHAUA', type number}, {'hhetrs_assets', type number}, {'hhsa', type number}, {'ASSET_DB_RATIO', type number}, {'DB_ASSET_RATIO', type number}, {'hhwrapaum', type number}, {'HHMFAUM', type number}, {'HHANNAUM', type number}, {'lifecv', type number}})in    #'Changed Type2'"}]},{"name":"Category Key","isHidden":false,"storageMode":"Import","columns":[{"name":"Key","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Category","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Sort Order","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"CategoryKey","expression":"SWITCH(SELECTEDVALUE(\u0027Category Key\u0027[Key]),  'Insurance', '#6DB6FF',  'Asset Gather', '#1AAA55',  'Meet the Kids', '#F4633A',  'Horizon', '#9482FF',  'LTC', '#F2F0A1',   'White')","isHidden":false},{"name":"Color","expression":"SWITCH ( TRUE (),  IF(\u0027superoat\u0027[CategoryColor] = 'Blue', 2), IF(\u0027superoat\u0027[CategoryColor] = 'Green', 3),  IF(\u0027superoat\u0027[CategoryColor] = 'Orange', 4), IF(\u0027superoat\u0027[CategoryColor] = 'Purple', 5), IF(\u0027superoat\u0027[CategoryColor] = 'Yellow', 6), 1)","isHidden":false}],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i45W8swrLi1KzEtOVdJRcsopTVXQVUAWMlSK1YlWciwuTi1RcE8syUgtAgq6F6Wm5gEVogkbgdX6pgLFgCIK3pkpxUBRf6BR6SBj0SWMwco98osyq/LzgPyA0qKCHJBChJAJWIlPiDOQHZmak5NfDpSGcE2VYmMB', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Key = _t, Category = _t, #'Sort Order' = _t]),    #'Sorted Rows' = Table.Sort(Source,{{'Sort Order', Order.Ascending}}),    #'Changed Type' = Table.TransformColumnTypes(#'Sorted Rows',{{'Key', type text}})in    #'Changed Type'"}]},{"name":"Definitions","isHidden":false,"storageMode":"Import","columns":[{"name":"Column","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Defintion","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Order","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Field Reporting//Financial Advisor Dashboard//HVHH Definitions.xlsx'), null, true),    Sheet1_Sheet = Source{[Item='Sheet1',Kind='Sheet']}[Data],    #'Changed Type' = Table.TransformColumnTypes(Sheet1_Sheet,{{'Column1', type text}, {'Column2', type text}}),    #'Promoted Headers' = Table.PromoteHeaders(#'Changed Type', [PromoteAllScalars=true]),    #'Changed Type1' = Table.TransformColumnTypes(#'Promoted Headers',{{'Column', type text}, {'Defintion', type text}, {'Order', Int64.Type}}),    #'Sorted Rows' = Table.Sort(#'Changed Type1',{{'Order', Order.Ascending}})in    #'Sorted Rows'"}]},{"name":"Role Level Security","isHidden":false,"storageMode":"Import","columns":[{"name":"EMPLOYEE_TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMPLOYEE_EMAIL","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"REPORT_TO_EMAIL","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"REPORT_TO_TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"WRKR_RPT_HIER_SRC_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTL_DATA_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SFRC_TEAM_PRPS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RSA_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RSA_TEAM_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SFRC_TEAM_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CRET_USER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CRET_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"LST_UPDT_USER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LST_UPDT_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Department Number","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"AD Group","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = PowerBI.Dataflows(null),    #'f7efdfeb-73c5-4a9b-ab78-f9370190eded' = Source{[workspaceId='f7efdfeb-73c5-4a9b-ab78-f9370190eded']}[Data],    #'a9b06e96-a67b-4f28-b939-3e1ca1047bd2' = #'f7efdfeb-73c5-4a9b-ab78-f9370190eded'{[dataflowId='a9b06e96-a67b-4f28-b939-3e1ca1047bd2']}[Data],    #'Role Level Security1' = #'a9b06e96-a67b-4f28-b939-3e1ca1047bd2'{[entity='Role Level Security']}[Data],    #'Filtered Rows' = Table.SelectRows(#'Role Level Security1',  each ([AD Group] = 'PBI_FLD_RPTG_COE' or [AD Group] = 'PBI_FLD_RPTG_FR' or [AD Group] = 'PBI_FLD_RPTG_HO' or [AD Group] = 'PBI_FLD_RPTG_LDR' or [AD Group] = 'PBI_FLD_RPTG_LDRSTF' or [AD Group] = 'PBI_FLD_RPTG_RFOSTF' or [AD Group] = 'PBI_FLD_RPTG_TFGT')),    #'Removed Columns' = Table.RemoveColumns(#'Filtered Rows',{'EMPLOYEE_SK', 'REPORT_TO_SK', 'Department Name', 'HO_Email'}),    #'Add Custom' = Table.AddColumn(#'Removed Columns', 'Custom', each if ([AD Group] = 'PBI_FLD_RPTG_HO' and ([EMPLOYEE_TSID]=[REPORT_TO_TSID])) then 1 else if ([AD Group] = 'PBI_FLD_RPTG_HO' and ([EMPLOYEE_TSID] \u003c\u003e [REPORT_TO_TSID])) then 0else if [AD Group] \u003c\u003e 'PBI_FLD_RPTG_HO' then 1 else 2),    #'Filtered Rows2' = Table.SelectRows(#'Add Custom', each ([Custom] = 1)),    #'Removed Columns1' = Table.RemoveColumns(#'Filtered Rows2',{'Custom'}),    #'Replaced Value' = Table.ReplaceValue(#'Removed Columns1','115','0115',Replacer.ReplaceValue,{'Department Number'}),    #'Replaced Value1' = Table.ReplaceValue(#'Replaced Value','291','0291',Replacer.ReplaceValue,{'Department Number'}),    #'Replaced Value2' = Table.ReplaceValue(#'Replaced Value1','361','0361',Replacer.ReplaceValue,{'Department Number'}),    #'Replaced Value3' = Table.ReplaceValue(#'Replaced Value2','435','0435',Replacer.ReplaceValue,{'Department Number'}),    #'Replaced Value4' = Table.ReplaceValue(#'Replaced Value3','525','0525',Replacer.ReplaceValue,{'Department Number'})in    #'Replaced Value4'"}]},{"name":"Change Log","isHidden":false,"storageMode":"Import","columns":[{"name":"Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Version","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Author","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Description","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//SHARED//Public//DI and BI//Field Reporting//Change Log//Change Log.xlsx'), null, true),    HVHH_Sheet = Source{[Item='HVHH',Kind='Sheet']}[Data],    #'Promoted Headers1' = Table.PromoteHeaders(HVHH_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers1',{{'Date', type date}, {'Version', type number}, {'Author', type text}, {'Description', type text}}),    #'Replaced Value' = Table.ReplaceValue(#'Changed Type',3.1,3.1,Replacer.ReplaceValue,{'Version'})in    #'Replaced Value'"}]},{"name":"Whats New_ Alert Msg","isHidden":false,"storageMode":"Import","columns":[{"name":"Message Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Message","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"End Date","dataType":"DateTime","isHidden":false,"columnType":"Data"}],"measures":[{"name":"What\u0027s New Msg","expression":"  var _enddate = LOOKUPVALUE(\u0027Whats New_ Alert Msg\u0027[End Date],\u0027Whats New_ Alert Msg\u0027[Message Description],'What\u0027s New')RETURN if(today() \u003c= _enddate,LOOKUPVALUE(\u0027Whats New_ Alert Msg\u0027[Message],\u0027Whats New_ Alert Msg\u0027[Message Description],'What\u0027s New'),'')","isHidden":false},{"name":"Show What\u0027s New Msg Box","expression":"  var _enddate = LOOKUPVALUE (\u0027Whats New_ Alert Msg\u0027[End Date],\u0027Whats New_ Alert Msg\u0027[Message Description],'What\u0027s New')RETURNif(today() \u003c= _enddate,1,0)","isHidden":false},{"name":"Alert Msg","expression":"  var _alertmsg = LOOKUPVALUE(\u0027Whats New_ Alert Msg\u0027[Message],\u0027Whats New_ Alert Msg\u0027[Message Description],'ALERT!')RETURNif(_alertmsg \u003c\u003e BLANK(), _alertmsg,'') ","isHidden":false},{"name":"Show Alert Msg Box","expression":"  var _alertmsg=LOOKUPVALUE(\u0027Whats New_ Alert Msg\u0027[Message],\u0027Whats New_ Alert Msg\u0027[Message Description],'ALERT!')RETURNif(_alertmsg\u003c\u003eBLANK(),1,0)","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//SHARED//Public//DI and BI//Field Reporting//What\u0027s New and Alert Message//What\u0027s New and Alert Message.xlsx'), null, true),    HVHHv2_Sheet = Source{[Item='HVHHv2',Kind='Sheet']}[Data],    #'Promoted Headers1' = Table.PromoteHeaders(HVHHv2_Sheet, [PromoteAllScalars=true]),    #'Changed Type1' = Table.TransformColumnTypes(#'Promoted Headers1',{{'Message Description', type text}, {'Message', type text}, {'End Date', type date}})in    #'Changed Type1'"}]},{"name":"ClientServiceGroup","isHidden":false,"storageMode":"Import","columns":[{"name":"Customer Identifier","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"SERVICEGROUP","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'WITH CTE AS (  #(lf)   select distinct A.''Customer Identifier'',#(lf)                   A.''Service Group Code'' as servicegroup,#(lf)                   A.''Source System Sequence Number'',#(lf)                   ROW_NUMBER() OVER (PARTITION BY a.''Customer Identifier'' ORDER BY A.''Source System Sequence Number'' desc) AS rn#(lf)              #(lf)     from ''ENTERPRISE_INTERACTION_CUST''.''PRESENTATION_01''.''Individual Account Confidential'' a  #(lf)    where  A.''Service Group Code'' in (\u0027A\u0027,\u0027B\u0027,\u0027C\u0027,\u0027D\u0027,\u0027E\u0027,\u0027Natural Market\u0027,\u0027Prospect - Green\u0027,\u0027Prospect - Yellow\u0027,\u0027Prospect - Red\u0027,\u0027Other\u0027)    #(lf)group by A.''Customer Identifier'', A.''Service Group Code'', A.''Source System Sequence Number'' #(lf)    order by A.''Customer Identifier'', A.''Source System Sequence Number'', A.''Service Group Code'')#(lf)#(lf)#(lf)SELECT ''Customer Identifier'',#(lf)       servicegroup#(lf)FROM cte#(lf)WHERE rn = 1', null, [EnableFolding=true]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Customer Identifier', Int64.Type}})in    #'Changed Type'"}]},{"name":"ClientServiceGroupSort","isHidden":false,"storageMode":"Import","columns":[{"name":"ServiceGroup","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Order","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i45WclTSUTJUitWJVnICsozALGcgyxjMcgGyTMAsVyDLFMzySywpLUrMUfBNLMpOLQEKm4GFA4ryiwtSk0sUdBXci1JT84AS5ugSkak5OfnlQBkLdJmg1BSgsCVY2L8kI7UI5CwDpdhYAA==', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [ServiceGroup = _t, Order = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'ServiceGroup', type text}, {'Order', Int64.Type}})in    #'Changed Type'"}]}],"expressions":[{"name":"Experience Advisor Sort","expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i45WUtJRMlSK1YlWCvB1VtBVyE0syk4tUTAwBIobYYqbWgLFjcHi7gGOCHEzkLgJVNwFIW4OEjcFi/sFuCPELS2A4mZYxEHqzZViYwE=', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Filter_Ind = _t, Sort = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Filter_Ind', type text}, {'Sort', Int64.Type}})in    #'Changed Type'"}],"roles":[{"name":"Field_Virtual_Leaders","modelPermission":"Read","members":[{"memberName":"obj:79d35099-a3c2-4a22-8d79-d84cebdf1b38@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"79d35099-a3c2-4a22-8d79-d84cebdf1b38","memberType":"Group","identityProvider":"AzureAD"},{"memberName":"obj:a9d8eb7f-8e75-4e5e-b329-caf9fcffa9ea@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"a9d8eb7f-8e75-4e5e-b329-caf9fcffa9ea","memberType":"Group","identityProvider":"AzureAD"},{"memberName":"obj:de18b88a-5b86-4d5a-bc53-8523bc34bc5c@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"de18b88a-5b86-4d5a-bc53-8523bc34bc5c","memberType":"Group","identityProvider":"AzureAD"},{"memberName":"obj:8938cc69-7a18-41b5-a42d-2dce2ea2a893@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"8938cc69-7a18-41b5-a42d-2dce2ea2a893","memberType":"Group","identityProvider":"AzureAD"}],"tablePermissions":[{"name":"Role Level Security","filterExpression":"IFERROR(SEARCH(USERNAME(),[REPORT_TO_EMAIL]),-1)\u003e0"}]},{"name":"RFO Staff","modelPermission":"Read","members":[{"memberName":"obj:bc106c61-ca17-4fc1-9713-5893454f8368@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"bc106c61-ca17-4fc1-9713-5893454f8368","memberType":"Group","identityProvider":"AzureAD"}],"tablePermissions":[{"name":"Role Level Security","filterExpression":"[Department Number] = lookupvalue([Department Number],[REPORT_TO_EMAIL],username())"}]},{"name":"Home Office/COE","modelPermission":"Read","members":[{"memberName":"obj:0d216a03-5ecb-4979-be8e-7c3904c3a79e@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"0d216a03-5ecb-4979-be8e-7c3904c3a79e","memberType":"Group","identityProvider":"AzureAD"},{"memberName":"obj:2f621ad2-0668-4906-bf26-4d5ce281db46@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"2f621ad2-0668-4906-bf26-4d5ce281db46","memberType":"Group","identityProvider":"AzureAD"},{"memberName":"obj:43bfd34c-d1b3-40a6-9ce6-9d110ae2e6a9@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"43bfd34c-d1b3-40a6-9ce6-9d110ae2e6a9","memberType":"Group","identityProvider":"AzureAD"},{"memberName":"obj:df407e39-f01b-4e0f-9605-85f2c017fa62@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"df407e39-f01b-4e0f-9605-85f2c017fa62","memberType":"Group","identityProvider":"AzureAD"}]}],"configuredBy":"Tina.Timmer@Thrivent.com","configuredById":"8e6dc12f-c7a1-4bb3-91f3-ea2dc014a46e","isEffectiveIdentityRequired":true,"isEffectiveIdentityRolesRequired":true,"refreshSchedule":{"days":["Monday"],"times":["10:00"],"enabled":true,"localTimeZoneId":"Central Standard Time","notifyOption":"MailOnFailure"},"targetStorageMode":"Abf","createdDate":"2023-05-12T21:41:45.953","contentProviderType":"PbixInImportMode"},{"id":"c0acac8b-57ef-4e56-a2ed-5387df2e3b21","name":"Advice Adoption Dashboard","tables":[{"name":"login Table","isHidden":false,"storageMode":"Import","columns":[{"name":"USERID","dataType":"String","isHidden":true,"columnType":"CalculatedTableColumn"}],"measures":[{"name":"Message_AIPToggle","expression":" IF(\u0027login Table\u0027[Login_DisplayInd] = 1, '', ' ')","isHidden":false},{"name":"ShowHideAIPToggle","expression":"IF(\u0027login Table\u0027[Login_DisplayInd] = 1,'#1C00ff00','White')","isHidden":false},{"name":"Login_User","expression":"Userprincipalname ()","isHidden":false},{"name":"Login_DisplayInd","expression":" IF(\u0027login Table\u0027[Login_User] in{'Tina.Timmer@Thrivent.com', 'Loren.Hansen@Thrivent.com','matt.walker@thrivent.com','nicholas.cecere@thrivent.com','Steven.Klein@Thrivent.com','sara.juran@thrivent.com','kristi.swanson@thrivent.com','calvin.zimmerman@thrivent.com','karen.birr@thrivent.com','mary.steele@thrivent.com','marlisse.guest@thrivent.com','ludy.cuello@thrivent.com','Christoph.vonRechenberg@Thrivent.com','Ashley.Allen@Thrivent.com','Brian.Houghton@Thrivent.com','Daniel.Syburg@Thrivent.com','Jacob.Huseby@Thrivent.com','Lori.ZovarLanser@Thrivent.com','omkar.ehani@thrivent.com','Thomas.Blackman@Thrivent.com','michael.hoffman@thrivent.com','Jessica.Kassekert@thrivent.com','shannon.lundberg@thrivent.com'},1,0)","isHidden":false},{"name":"Message_ReportingToggle","expression":" IF(\u0027login Table\u0027[Login_DisplayRpt] = 1, '', ' ')","isHidden":false},{"name":"Login_DisplayRpt","expression":" IF(\u0027login Table\u0027[Login_User] in{'Tina.Timmer@Thrivent.com','Steven.Klein@Thrivent.com','mary.steele@thrivent.com','marlisse.guest@thrivent.com','Christoph.vonRechenberg@Thrivent.com','Ashley.Allen@Thrivent.com','Brian.Houghton@Thrivent.com','Daniel.Syburg@Thrivent.com','Jacob.Huseby@Thrivent.com','Lori.ZovarLanser@Thrivent.com','omkar.ehani@thrivent.com','Thomas.Blackman@Thrivent.com','michael.hoffman@thrivent.com','Jessica.Kassekert@thrivent.com','shannon.lundberg@thrivent.com'},1,0)","isHidden":false},{"name":"ShowHideRPTToggle","expression":"IF(\u0027login Table\u0027[Login_DisplayRpt] = 1,'#1C00ff00','White')","isHidden":false},{"name":"Login_DisplayCSM","expression":" IF(\u0027login Table\u0027[Login_User] in{'Tina.Timmer@Thrivent.com','mary.steele@thrivent.com','marlisse.guest@thrivent.com','Ashley.Allen@Thrivent.com','Brian.Houghton@Thrivent.com','Daniel.Syburg@Thrivent.com','Jacob.Huseby@Thrivent.com','Lori.ZovarLanser@Thrivent.com','omkar.ehani@thrivent.com','Thomas.Blackman@Thrivent.com','michael.hoffman@thrivent.com','Jessica.Kassekert@thrivent.com','shannon.lundberg@thrivent.com'},1,0)","isHidden":false},{"name":"Message_CSMToggle","expression":" IF(\u0027login Table\u0027[Login_DisplayCSM] = 1, '', ' ')","isHidden":false},{"name":"ShowHideCSMToggle","expression":"IF(\u0027login Table\u0027[Login_DisplayCSM] = 1,'#1C00ff00','White')","isHidden":false},{"name":"Login_DisplayCEO","expression":" IF(\u0027login Table\u0027[Login_User] in{'Tina.Timmer@Thrivent.com','mary.steele@thrivent.com','marlisse.guest@thrivent.com','Ashley.Allen@Thrivent.com','Brian.Houghton@Thrivent.com','Daniel.Syburg@Thrivent.com','Jacob.Huseby@Thrivent.com','Lori.ZovarLanser@Thrivent.com','omkar.ehani@thrivent.com','Thomas.Blackman@Thrivent.com','michael.hoffman@thrivent.com','Jessica.Kassekert@thrivent.com','shannon.lundberg@thrivent.com'},1,0)","isHidden":false},{"name":"Message_CEOToggle","expression":" IF(\u0027login Table\u0027[Login_DisplayCEO] = 1, '', ' ')","isHidden":false},{"name":"ShowHideCEOToggle","expression":"IF(\u0027login Table\u0027[Login_DisplayCEO] = 1,'#1C00ff00','White')","isHidden":false}],"source":[{"expression":"       ROW('USERID',' ') "}]},{"name":"DTRB_PERF_DATES","isHidden":false,"storageMode":"Import","columns":[{"name":"DT_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CAL_DAY_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_END_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_WK_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_DAY_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_MTH_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_QTR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Week Start Date","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Week End Date","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Current Year","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Current Month","dataType":"String","isHidden":false,"expression":"Month(Today())","columnType":"Calculated"},{"name":"CAL_MTH_STRT_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"CAL_MTH_END_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"HDAY_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"WKDY_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Business Day Ind","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Current BD of the month","expression":" VAR CurrentMonthStartDate= LOOKUPVALUE(DTRB_PERF_DATES[CAL_MTH_STRT_DT],DTRB_PERF_DATES[CAL_DAY_DT],TODAY()) RETURN CALCULATE(SUM(DTRB_PERF_DATES[Business Day Ind]),DTRB_PERF_DATES,DTRB_PERF_DATES[CAL_DAY_DT]\u003e=CurrentMonthStartDate,  DTRB_PERF_DATES[CAL_DAY_DT]\u003c= TODAY())","isHidden":false}],"source":[{"expression":"let    Source = DB2.Database('PODWH021:50000', 'PODWH021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT A.DT_SK, #(lf)       A.CAL_DAY_DT, #(lf)       A.DTRB_PERF_RPT_WK_END_DT, #(lf)       A.DTRB_PERF_RPT_WK_NBR,#(lf)       A.DTRB_PERF_RPT_YR_NBR,#(lf)       A.DTRB_PERF_RPT_YR_WK_NBR,#(lf)       A.SRC_SYS_ID, #(lf)       A.CRET_TMSP, #(lf)       A.LST_UPDT_TMSP, #(lf)       A.CRET_USER_ID, #(lf)       A.LST_UPDT_USER_ID, #(lf)       A.DTRB_PERF_RPT_DAY_TXT, #(lf)       A.DTRB_PERF_RPT_MTH_TXT, #(lf)       A.DTRB_PERF_RPT_QTR_TXT, #(lf)       A.DTRB_PERF_RPT_WK_TXT,#(lf)       A.DTRB_PERF_RPT_YR_TXT,#(lf)       B.CAL_WK_STRT_DT,#(lf)       B.CAL_WK_END_DT,#(lf)       B.CAL_MTH_STRT_DT,#(lf)       B.CAL_MTH_END_DT,#(lf)       B.HDAY_IND,#(lf)       B.WKDY_IND#(lf)  FROM COMMON.DTRB_PERF_DATES  AS A INNER JOIN#(lf)       COMMON.IA_DATES_ITRL AS B#(lf)    ON A.DT_SK=B.DT_SK#(lf) WHERE A.DTRB_PERF_RPT_YR_NBR IN (2021, 2022, 2023, 2024)#(lf)    #(lf)']),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'CAL_DAY_DT', type date}, {'DTRB_PERF_RPT_WK_END_DT', type date}, {'CAL_WK_STRT_DT', type date}, {'CAL_WK_END_DT', type date}}),    #'Added Custom' = Table.AddColumn(#'Changed Type', 'Week Start Date', each Date.AddDays([CAL_WK_STRT_DT],1)),    #'Added Custom1' = Table.AddColumn(#'Added Custom', 'Week End Date', each Date.AddDays([CAL_WK_END_DT],1)),    #'Removed Columns' = Table.RemoveColumns(#'Added Custom1',{'CAL_WK_STRT_DT', 'CAL_WK_END_DT'}),    #'Added Custom2' = Table.AddColumn(#'Removed Columns', 'Current Year', each if Date.Year(DateTime.LocalNow()) = [DTRB_PERF_RPT_YR_NBR] then 'Current Year' else [DTRB_PERF_RPT_YR_NBR]),    #'Removed Columns1' = Table.RemoveColumns(#'Added Custom2',{'SRC_SYS_ID', 'CRET_TMSP', 'LST_UPDT_TMSP', 'CRET_USER_ID', 'LST_UPDT_USER_ID'}),    #'Added Conditional Column' = Table.AddColumn(#'Removed Columns1', 'Business Day Ind', each if [HDAY_IND] = 'Y' then 0 else if [WKDY_IND] = 'Y' then 1 else 0),    #'Changed Type1' = Table.TransformColumnTypes(#'Added Conditional Column',{{'Business Day Ind', Int64.Type}})in    #'Changed Type1'"}]},{"name":"Client_HHLD","isHidden":false,"storageMode":"Import","columns":[{"name":"HOH_NAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Discovery Indicator","dataType":"String","isHidden":false,"expression":"'N'","columnType":"Calculated"},{"name":"Advisor Name","dataType":"String","isHidden":false,"expression":"RELATED(Producer_Snowflake[Advisor Name])","columnType":"Calculated"},{"name":"Foundations","dataType":"String","isHidden":false,"expression":"RELATED(Producer_Snowflake[Foundations])","columnType":"Calculated"},{"name":"Discover_Binary","dataType":"String","isHidden":false,"expression":"0","columnType":"Calculated"},{"name":"Adoption","dataType":"String","isHidden":false,"expression":"  var _Foundations = \u0027Client_HHLD\u0027[Foundations]     var _Risk = CALCULATE(COUNTROWS(\u0027Client_HHLD\u0027),\u0027Client_HHLD\u0027[Analyze Risk Tolerance Ind] = 'Y')  var _newClient = CALCULATE(COUNTROWS(\u0027Client_HHLD\u0027), \u0027Client_HHLD\u0027[Client Description] IN {'New Client'})     var _Client = CALCULATE(COUNTROWS(\u0027Client_HHLD\u0027), \u0027Client_HHLD\u0027[Client Description] IN {'New Client','Client'})            var _totalgoals = IF(CALCULATE(COUNTROWS(\u0027Client_HHLD\u0027),\u0027Client_HHLD\u0027[Goals Binary] = 1),1.0)                       var _deliver = IF (CALCULATE(COUNTROWS(\u0027Client_HHLD\u0027),\u0027Client_HHLD\u0027[Deliver Adoption Ind] =1),1,0)                    var _results = IF(_client \u003e= 1 \u0026\u0026 _deliver \u003e= 1 \u0026\u0026 _totalgoals \u003e=1 \u0026\u0026 _Risk \u003e= 1, 1,0)     RETURNIF(ISBLANK(_results),0,_results)","columnType":"Calculated"},{"name":"Goals Binary","dataType":"String","isHidden":false,"expression":"  var _goals=RELATED(\u0027Snowflake_Goals\u0027[GOALS_MORE_THAN_2_BINARY])  Return  IF(ISBLANK(_goals), 0, _goals)","columnType":"Calculated"},{"name":"Goal Indicator","dataType":"String","isHidden":false,"expression":"  var _goalind = RELATED(\u0027Snowflake_Goals\u0027[GOALS_MORE_THAN_2_IND])  Return  IF(ISBLANK(_goalind), 'N', _goalind)","columnType":"Calculated"},{"name":"Adopting Household Filter","dataType":"String","isHidden":false,"expression":"var _calc = IF(\u0027Client_HHLD\u0027[Adoption CEO] = 1, 'Adopting','Not Adopting')RETURNIF(ISBLANK(_calc),'Not Adopting', _calc)","columnType":"Calculated"},{"name":"Goals Icon","dataType":"Int64","isHidden":false,"expression":"  var _goalind =RELATED(\u0027Snowflake_Goals\u0027[GOALS_MORE_THAN_2_IND])  var _goals = IF(_goalind='Y' \u0026\u0026(\u0027Client_HHLD\u0027[MaxUpdDt MGP] \u003e= Date(2023,02,26)), 1,                IF(_goalind='Y'  \u0026\u0026(\u0027Client_HHLD\u0027[MaxUpdDt MGP] \u003c Date(2023,02,26)), 99,0)) Return   IF(ISBLANK(_goals), 0, _goals)","columnType":"Calculated"},{"name":"Advisor Group","dataType":"String","isHidden":false,"expression":"related(\u0027Producer_Snowflake\u0027[TAG])","columnType":"Calculated"},{"name":"Analyze Risk Tolerance Binary","dataType":"String","isHidden":false,"expression":"  var _Risk = RELATED(\u0027MGP_Risk\u0027[TOLERANCE_BINARY])  RETURNIF(ISBLANK(_Risk),0,_Risk)","columnType":"Calculated"},{"name":"Total Client Goals","dataType":"String","isHidden":false,"expression":"  var _goals = RELATED(\u0027Snowflake_Goals\u0027[TOTAL_GOALS])RETURN  IF(ISBLANK(_goals),0,_goals) ","columnType":"Calculated"},{"name":"MaxUpdDt MGP","dataType":"DateTime","isHidden":false,"expression":"RELATED(\u0027Snowflake_Goals\u0027[GOAL_LAST_UPDATE_DATE])","columnType":"Calculated"},{"name":"Analyze Risk Tolerance Ind","dataType":"String","isHidden":false,"expression":"  var _ind = RELATED(\u0027MGP_Risk\u0027[TOLERANCE_IND])Return  IF(ISBLANK(_ind), 'N', _ind)","columnType":"Calculated"},{"name":"Deliver Icon","dataType":"String","isHidden":false,"expression":"  var _deliver = IF(\u0027Client_HHLD\u0027[Deliver Adoption Ind] = 1, 1,                IF(\u0027Client_HHLD\u0027[Deliver CEO] = 1,99,0))  return  IF(ISBLANK(_deliver),0,_deliver)","columnType":"Calculated"},{"name":"Deliver ImplChkList Ind","dataType":"String","isHidden":false,"expression":"  var _ind = RELATED(\u0027Implementation_CheckList\u0027[IMPL_CHKLST_IND])Return  IF(ISBLANK(_ind), 'N', _ind)  ","columnType":"Calculated"},{"name":"MaxUpdDt ImplChkLst","dataType":"String","isHidden":false,"expression":"RELATED(\u0027Implementation_CheckList\u0027[WF_LAST_MODIFIED_DATE])","columnType":"Calculated"},{"name":"MaxUpdDt DedPlan","dataType":"String","isHidden":false,"expression":"RELATED(\u0027Dedicated Planning\u0027[ACL_DLIV_DT])","columnType":"Calculated"},{"name":"Deliver ImpChkLst Adoption","dataType":"String","isHidden":false,"expression":"  var _implInd = (\u0027Client_HHLD\u0027[Deliver ImplChkList Ind])  var _deliverDateInd =IF(\u0027Client_HHLD\u0027[MaxUpdDt ImplChkLst] \u003e DATE(2023,12,31),'Y','N')   var _total = IF(_implInd = 'Y' \u0026\u0026 _deliverDateInd ='Y',1,0)  ReturnIF(ISBLANK(_total),0,_total)","columnType":"Calculated"},{"name":"Deliver Adoption Ind","dataType":"String","isHidden":false,"expression":"  var _implInd =(\u0027Client_HHLD\u0027[Deliver ImpChkLst Adoption])  var _dpInd = (\u0027Client_HHLD\u0027[Deliver DedPlan Adoption])      var _totalInd = IF((_dpInd =1 || _implInd =1), 1, 0)      ReturnIF(ISBLANK(_totalInd),0,_totalInd)","columnType":"Calculated"},{"name":"maxDeliverDt","dataType":"String","isHidden":false,"expression":"  var _ImplDt = \u0027Client_HHLD\u0027[MaxUpdDt ImplChkLst]  var _DPDt = \u0027Client_HHLD\u0027[MaxUpdDt DedPlan]  var _maxDt = IF(_DPDt\u003e_ImplDt,_DPDt,_ImplDt) Return _maxDt","columnType":"Calculated"},{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Deliver DedPlan Adoption","dataType":"String","isHidden":false,"expression":"  var _dpInd = (\u0027Client_HHLD\u0027[Deliver Ded Planning Ind])  var _deliverDateInd =IF(\u0027Client_HHLD\u0027[MaxUpdDt DedPlan]\u003e DATE(2023,12,31),'Y','N')   var _total = IF(_dpInd = 'Y' \u0026\u0026 _deliverDateInd ='Y',1,0)  ReturnIF(ISBLANK(_total),0,_total)","columnType":"Calculated"},{"name":"Deliver DedPlan CEO","dataType":"String","isHidden":false,"expression":"  var _dpInd = (\u0027Client_HHLD\u0027[Deliver Ded Planning Ind])     var _total = IF(_dpInd = 'Y' ,1,0)  ReturnIF(ISBLANK(_total),0,_total)","columnType":"Calculated"},{"name":"Deliver ImpChkLst CEO","dataType":"String","isHidden":false,"expression":"  var _implInd = (\u0027Client_HHLD\u0027[Deliver ImplChkList Ind])   var _total = IF(_implInd = 'Y',1,0)  ReturnIF(ISBLANK(_total),0,_total)","columnType":"Calculated"},{"name":"Deliver ImplChkList Binary","dataType":"String","isHidden":false,"expression":"    var _ind = RELATED(\u0027Implementation_CheckList\u0027[IMPL_CHKLST_BINARY])Return   IF(ISBLANK(_ind), 0, _ind)","columnType":"Calculated"},{"name":"Deliver DedPlan Binary","dataType":"String","isHidden":false,"expression":"  var _ind = IF(\u0027Client_HHLD\u0027[Deliver Ded Planning Ind]='Y',1,0)Return  IF(ISBLANK(_ind), 0, _ind) ","columnType":"Calculated"},{"name":"Client Type","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Deliver Ded Planning Ind","dataType":"String","isHidden":false,"expression":"  var _ind = RELATED(\u0027Dedicated Planning\u0027[Ded Planning Ind])Return  IF(ISBLANK(_ind), 'N', _ind)  ","columnType":"Calculated"},{"name":"SF_HH_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Thrivent ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CIF_GRPID","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Client Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Deliver CEO","dataType":"String","isHidden":false,"expression":"  var _implInd = (\u0027Client_HHLD\u0027[Deliver ImpChkLst CEO])  var _dpInd = (\u0027Client_HHLD\u0027[Deliver DedPlan CEO])      var _totalInd = IF((_dpInd =1 || _implInd =1), 1,0)      ReturnIF(ISBLANK(_totalInd),0,_totalInd)","columnType":"Calculated"},{"name":"Adoption CEO","dataType":"String","isHidden":false,"expression":"  var _Foundations = \u0027Client_HHLD\u0027[Foundations]     var _Risk = CALCULATE(COUNTROWS(\u0027Client_HHLD\u0027),\u0027Client_HHLD\u0027[Analyze Risk Tolerance Ind] = 'Y')  var _newClient = CALCULATE(COUNTROWS(\u0027Client_HHLD\u0027), \u0027Client_HHLD\u0027[Client Description] IN {'New Client'})     var _Client = CALCULATE(COUNTROWS(\u0027Client_HHLD\u0027), \u0027Client_HHLD\u0027[Client Description] IN {'New Client','Client'})         var _totalgoals = IF(CALCULATE(COUNTROWS(\u0027Client_HHLD\u0027),\u0027Client_HHLD\u0027[Goals Binary] = 1),1.0)                       var _deliver = IF (CALCULATE(COUNTROWS(\u0027Client_HHLD\u0027),\u0027Client_HHLD\u0027[Deliver CEO] =1),1,0)                    var _results = IF(_client \u003e= 1 \u0026\u0026 _deliver \u003e= 1 \u0026\u0026 _totalgoals \u003e=1 \u0026\u0026 _Risk \u003e= 1, 1,0)     RETURNIF(ISBLANK(_results),0,_results)","columnType":"Calculated"},{"name":"Product Risk","dataType":"String","isHidden":false,"expression":"  var _prod = RELATED(\u0027ALLMBRs\u0027[Risk Ind Binary])    ReturnIF(ISBLANK(_prod),0,_prod)","columnType":"Calculated"},{"name":"Product Accum","dataType":"String","isHidden":false,"expression":"  var _prod = RELATED(\u0027ALLMBRs\u0027[Accum Ind Binary])    ReturnIF(ISBLANK(_prod),0,_prod)","columnType":"Calculated"},{"name":"Product Risk and Accum","dataType":"String","isHidden":false,"expression":"  var _prod = RELATED(\u0027ALLMBRs\u0027[Both ind Binary])    ReturnIF(ISBLANK(_prod),0,_prod)","columnType":"Calculated"},{"name":"Household Role","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"HH_SEL","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Client Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Membership Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Membership Type Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Membership Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CLNT_AGE_TYP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee Display Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Age","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"TmpGoalInd","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"RN","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"New Client Indicator","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Prospect Ind","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"New Client Ind","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Total Households with Goals","expression":"  var _chk = CALCULATE(distinctcount(Client_HHLD[SF_HH_ID]))  var _total = CALCULATE(distinctcount(Client_HHLD[SF_HH_ID]),                \u0027Client_HHLD\u0027[SF_HH_ID] \u003c\u003e BLANK(),                \u0027Client_HHLD\u0027[Goal Indicator] = 'Y')       ReturnIF(_chk \u003e 0,IF(ISBLANK(_total),0,_total),0) ","isHidden":false},{"name":"Total Households with Goals %","expression":"var _total = DIVIDE(Client_HHLD[Total Households with Goals], _Measures[Total Households])  ReturnIF(ISBLANK(_total),0,_total)","description":"The percent of total households with 2 more connect goals entered in Salesforce","isHidden":false},{"name":"Total Households with Client Discovery","expression":"''// var _check = CALCULATE(DISTINCTCOUNT(\u0027Client_HHLD\u0027[SF_HH_ID]),\u0027Client_HHLD\u0027[SF_HH_ID] \u003c\u003e BLANK())// var _total = 0//   RETURN//  IF(_check \u003e 0,IF(ISBLANK(_total),0,_total),0) ","isHidden":false},{"name":"Total SF Households","expression":"  var _total = CALCULATE(count(Client_HHLD[SF_HH_ID]))ReturnIF(ISBLANK(_total),0,_total) ","isHidden":false},{"name":"Total Households with Analyze %","expression":"  var _check = CALCULATE(DISTINCTCOUNT(\u0027Client_HHLD\u0027[SF_HH_ID]),\u0027Client_HHLD\u0027[SF_HH_ID] \u003c\u003e BLANK())var _total = DIVIDE(Client_HHLD[Total Households Analyze], _Measures[Total Households])  ReturnIF(_check \u003e 0,IF(ISBLANK(_total),0,_total),0)","isHidden":false},{"name":"Total Households DedPlan","expression":"var _chk = CALCULATE(distinctcount(Client_HHLD[SF_HH_ID]))var _total = CALCULATE(DISTINCTCOUNT(Client_HHLD[SF_HH_ID]),            \u0027Client_HHLD\u0027[SF_HH_ID]\u003c\u003e BLANK(),            \u0027Client_HHLD\u0027[Deliver Ded Planning Ind] = 'Y')  Return      IF( _chk \u003e 0,IF(ISBLANK(_total),0,_total),0)   ","isHidden":false},{"name":"Total Deliver Household Adoption  %","expression":"var _total = DIVIDE(Client_HHLD[Total Households Deliver Adoption], _Measures[Total Households])  ReturnIF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"Total Households ImplChkLst","expression":"    var _chk = CALCULATE(distinctcount(Client_HHLD[SF_HH_ID]))    var _total = CALCULATE(distinctcount(Client_HHLD[SF_HH_ID]),                \u0027Client_HHLD\u0027[SF_HH_ID] \u003c\u003e BLANK(),                \u0027Client_HHLD\u0027[Deliver ImplChkList Ind] = 'Y')       ReturnIF(_chk \u003e 0, IF(ISBLANK(_total),0,_total) ,0)","isHidden":false},{"name":"Total Households Deliver Adoption","expression":"  var _total = CALCULATE(distinctcount(Client_HHLD[SF_HH_ID]),                \u0027Client_HHLD\u0027[SF_HH_ID] \u003c\u003e BLANK(),                \u0027Client_HHLD\u0027[Deliver Adoption Ind] = 1)ReturnIF(ISBLANK(_total),0,_total) ","isHidden":false},{"name":"Total Households Analyze","expression":"    var _total = CALCULATE(DISTINCTCOUNT(Client_HHLD[SF_HH_ID]),            \u0027Client_HHLD\u0027[SF_HH_ID]\u003c\u003e BLANK(),            \u0027Client_HHLD\u0027[Analyze Risk Tolerance Binary] = 1)               ReturnIF(ISBLANK(_total),0,_total) ","isHidden":false},{"name":"Total Households with Impl Chk List %","expression":"var _total = DIVIDE(Client_HHLD[Total Households ImplChkLst], _Measures[Total Households])  ReturnIF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"Total Households with Ded Plan %","expression":"var _total = DIVIDE(Client_HHLD[Total Households DedPlan], _Measures[Total Households])  ReturnIF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"Total Deliver Household COE  %","expression":"var _total = DIVIDE(Client_HHLD[Total Households Deliver], _Measures[Total Households])  ReturnIF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"Total Households Adpt Ded Plan %","expression":"var _total = DIVIDE(Client_HHLD[Total Households Ded Plan Adoption], _Measures[Total Households])  ReturnIF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"Total Households Impl Chk Lst Adoption","expression":"  var _total = CALCULATE(distinctcount(Client_HHLD[SF_HH_ID]),                \u0027Client_HHLD\u0027[SF_HH_ID] \u003c\u003e BLANK(),                \u0027Client_HHLD\u0027[Deliver ImpChkLst Adoption] = 1)ReturnIF(ISBLANK(_total),0,_total) ","isHidden":false},{"name":"Total Households Ded Plan Adoption","expression":"  var _total = CALCULATE(distinctcount(Client_HHLD[SF_HH_ID]),                \u0027Client_HHLD\u0027[SF_HH_ID] \u003c\u003e BLANK(),                \u0027Client_HHLD\u0027[Deliver DedPlan Adoption] = 1)ReturnIF(ISBLANK(_total),0,_total) ","isHidden":false},{"name":"Total Households Adpt Impl Chk Lst %","expression":"var _total = DIVIDE(Client_HHLD[Total Households Impl Chk Lst Adoption], _Measures[Total Households])  ReturnIF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"Deliver tooltip","expression":"'IC - '\u0026(\u0027Client_HHLD\u0027[Total Households ImplChkLst]) \u0026 UNICHAR(10)\u0026'WR - ' \u0026(Client_HHLD[Total Households DedPlan])\u0026 UNICHAR(10) \u0026 'Deliver - '\u0026(Client_HHLD[Total Households Deliver])","isHidden":false},{"name":"Total Households Deliver","expression":"  var _chk = CALCULATE(distinctcount(Client_HHLD[SF_HH_ID]))  var _total = CALCULATE(distinctcount(Client_HHLD[SF_HH_ID]),                \u0027Client_HHLD\u0027[SF_HH_ID] \u003c\u003e BLANK(),                \u0027Client_HHLD\u0027[Deliver CEO] = 1)ReturnIF(_chk \u003e 0,IF(ISBLANK(_total),0,_total),0) ","isHidden":false}],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'WITH CTE AS(#(lf)select *,#(lf)       ROW_NUMBER() OVER (PARTITION BY ''Household ID''   ORDER BY ''Household ID'', HH_Sel, ''Age'' desc) AS rn #(lf)  from #(lf)    #(lf)(select distinct#(lf)       a.''Customer Identification Number'',#(lf)       a.''Customer Group Identification Number'' AS CIF_GRPID,#(lf)       case when c.''Household Durable ID'' IS NULL then TO_CHAR(a.''Customer Identification Number'')#(lf)         else c.''Household Durable ID''#(lf)       end as ''Household ID'',#(lf)       c.''Household Member Role Description'' AS ''Household Role'',#(lf)       case when c.''Household Member Role Description'' = \u0027Primary\u0027 then 1#(lf)            when c.''Household Member Role Description'' = \u0027Spouse\u0027  then 2#(lf)            when c.''Household Member Role Description'' = \u0027Other\u0027   then 3#(lf)            when c.''Household Member Role Description'' = \u0027Child\u0027   then 4#(lf)            when c.''Household Member Role Description'' = \u0027 \u0027       then 5#(lf)       end as HH_Sel,#(lf)       case when xx.HOH_NAMExx \u003c\u003e \u0027\u0027 then xx.HOH_NAMExx#(lf)          else b.''Last Name'' || \u0027, \u0027 || b.''First Name''#(lf)       end as HOH_NAME,#(lf)       b.''Last Name'' || \u0027, \u0027 || b.''First Name'' AS ''Client Name'',#(lf)       a.''Membership Type Code'',#(lf)       a.''Membership Type Description'',#(lf)       case when a.''Membership Type Code'' = \u0027NON\u0027 and a.''Classification Contractual Relationship Code'' \u003c\u003e \u0027NA\u0027 then \u0027Non-Member\u0027#(lf)            when a.''Membership Type Code'' = \u0027NON\u0027 and a.''Classification Contractual Relationship Code'' = \u0027NA\u0027 then \u0027Prospect\u0027#(lf)            when a.''Membership Type Code'' IN (\u0027BEN\u0027, \u0027ASSOC\u0027, \u0027JUV\u0027) then a.''Membership Type Description''#(lf)       end as ''Membership Type'',#(lf)       case when b.''Age Number'' \u003c 18 THEN \u0027\u003c18\u0027#(lf)            when b.''Age Number'' \u003e= 18 THEN \u002718+\u0027#(lf)              else \u0027 \u0027#(lf)       end as clnt_age_typ,#(lf)       xx2.TSID,#(lf)       xx2.''Employee Display Name'',#(lf)       b.''Age Number'' as ''Age'', #(lf)       gx.''TmpGoalInd''#(lf)#(lf)       #(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Conformed Customer Dimension Detail'' a inner join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Person Dimension'' b#(lf)    on a.''Customer Identification Number'' = try_to_number (b.''Source System Key Text'') left join #(lf)       (select distinct * #(lf)          from ''SALESFORCE_B2C_ODS''.''PRESENTATION_01''.''Salesforce Dataready Customergroups Confidential''#(lf)         where ''Household Member IsDeleted'' = FALSE #(lf)           and ''IsDeleted'' = FALSE#(lf)        QUALIFY ROW_NUMBER() OVER (PARTITION BY ''Household Member Customer ID'' ORDER BY ''Last Modified Date'' DESC, ''Commit Timestamp'' DESC)=1) AS c#(lf)    on c.''Household Member Customer ID''= a.''Customer Identification Number'' left join#(lf)       (select distinct#(lf)               d.''Person Dimension Surrogate Key'',#(lf)               e.''Source System Key Text'' AS TSID,#(lf)               e.''Employee Display Name'',#(lf)               case when d.''Advisor Type Code'' = \u0027SR\u0027 then 1 #(lf)                      else 2 #(lf)               end as selind,#(lf)               ROW_NUMBER() OVER (PARTITION BY d.''Person Dimension Surrogate Key'' ORDER BY d.''Person Dimension Surrogate Key'', d.''Advisor Type Code'' desc, d.''Effective Begin Date'' desc) as rn#(lf)          from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Assignment Fact'' d inner join #(lf)               ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Assignment Organization Dimension'' e#(lf)            on d.''Assignment Organization Dimension Key'' = e.''Assignment Organization Dimension Key''#(lf)         where d.''Effective End Date'' = \u00279999-12-31\u0027#(lf)           and e.''Source Sub System Text'' = \u0027WORKER\u0027#(lf)      group by d.''Person Dimension Surrogate Key'',#(lf)               d.''Advisor Type Code'',#(lf)               d.''Effective Begin Date'',#(lf)               e.''Source System Key Text'',#(lf)               e.''Employee Display Name'') xx2#(lf)     on b.''Person Dimension Surrogate Key'' = xx2.''Person Dimension Surrogate Key'' and xx2.rn = 1 left join #(lf)        ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' f#(lf)     on (xx2.TSID = f.''Employee Identifier'' and f.''Current Row Indicator'' = \u0027Y\u0027 ) left join #(lf)        (select cc.''Household Durable ID'',#(lf)                bb.''Last Name'' || \u0027, \u0027 || bb.''First Name'' AS HOH_NAMExx#(lf)           from (select distinct * #(lf)                   from ''SALESFORCE_B2C_ODS''.''PRESENTATION_01''.''Salesforce Dataready Customergroups Confidential''#(lf)                  where ''Household Member IsDeleted'' = FALSE #(lf)                    and ''IsDeleted'' = FALSE#(lf)                    and ''Household Member Role Description'' = \u0027Primary\u0027#(lf)                  QUALIFY ROW_NUMBER() OVER (PARTITION BY ''Household Durable ID'',''Household Member Role Description''ORDER BY ''Last Modified Date'' DESC, ''Commit Timestamp'' DESC)=1) as cc inner join  #(lf)                 ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Person Dimension'' bb#(lf)             on try_to_number (cc.''Household Member Customer ID'') = try_to_number (bb.''Source System Key Text'')#(lf)          where cc.''Household Member Role Description'' = \u0027Primary\u0027#(lf)            and bb.''Current Row Indicator'' = \u0027Y\u0027) AS xx#(lf)     on c.''Household Durable ID'' = xx.''Household Durable ID'' left join#(lf)        (select distinct a2.''Customer Identification Number'',#(lf)                1 as ''TmpGoalInd''#(lf)           from ''ENTERPRISE_FINANCIAL_SERVICES_AGMT''.''PRESENTATION_01''.''Client Advice Goal Confidential'' a2#(lf)          where (a2.''Operation Type Code'' \u003c\u003e \u0027DELETE\u0027 and a2.''Record Status Code'' \u003c\u003e \u0027D\u0027))as gx#(lf)     on a.''Customer Identification Number'' = gx.''Customer Identification Number''  #(lf)  where a.''Current Row Indicator'' = \u0027Y\u0027#(lf)    and b.''Current Row Indicator'' = \u0027Y\u0027#(lf)    and b.''Deceased Indicator'' = \u0027N\u0027#(lf)    and (a.''Membership Type Code'' IN (\u0027BEN\u0027,\u0027ASSOC\u0027) or#(lf)        (a.''Membership Type Code'' = \u0027NON\u0027 and gx.''TmpGoalInd'' = 1) or #(lf)        (a.''Membership Type Code'' = \u0027NON\u0027 and a.''Classification Contractual Relationship Code'' \u003c\u003e \u0027NA\u0027))  #(lf)    and f.''Organization Department Code'' NOT IN (\u00270714\u0027, \u00270716\u0027, \u00277151\u0027)#(lf)    and (f.''Job Type Code'' IN (\u0027002000\u0027,\u0027002010\u0027,\u0027002003\u0027,\u0027002011\u0027,\u0027002012\u0027,\u0027003100\u0027,\u0027002017\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027002018\u0027,#(lf)                              \u0027002019\u0027,\u0027003500\u0027,\u0027002022\u0027,\u0027002024\u0027,\u0027002025\u0027,\u0027002026\u0027,\u0027002027\u0027,\u0027002030\u0027,\u0027002031\u0027,\u0027002032\u0027) or#(lf)        f.''Organization Department Code'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027) and #(lf)        f.''Job Type Code'' NOT IN (\u00271356\u0027,\u00271658\u0027,\u00272598\u0027,\u00273458\u0027))#(lf)    and b.''Age Number'' \u003e= 18#(lf)    and f.''Employee Status Type Code'' = \u0027A\u0027#(lf)    #(lf)) #(lf)     )  #(lf)select *#(lf)  from CTE #(lf) where (''Membership Type'' in (\u0027Benefit\u0027, \u0027Associate\u0027, \u0027Non-Member\u0027) or (''Membership Type'' = \u0027Prospect\u0027 and ''TmpGoalInd'' = 1))#(lf)   and rn=1 #(lf)   and ''Age'' \u003e= 18', null, [EnableFolding=true]),    #'Removed Duplicates' = Table.Distinct(Source, {'Customer Identification Number'}),    #'Changed Type' = Table.TransformColumnTypes(#'Removed Duplicates',{{'Customer Identification Number', Int64.Type}}),    #'Merged Queries' = Table.NestedJoin(#'Changed Type', {'Customer Identification Number'}, NFC_Summary, {'CUST_ID_NBR'}, 'NFC_Summary', JoinKind.LeftOuter),    #'Expanded NFC_Summary' = Table.ExpandTableColumn(#'Merged Queries', 'NFC_Summary', {'NFC_Total_Points'}, {'NFC_Total_Points'}),    #'Replaced Value' = Table.ReplaceValue(#'Expanded NFC_Summary',null,0,Replacer.ReplaceValue,{'NFC_Total_Points'}),    #'Changed Type1' = Table.TransformColumnTypes(#'Replaced Value',{{'NFC_Total_Points', Int64.Type}}),    #'Added Conditional Column' = Table.AddColumn(#'Changed Type1', 'New Client Indicator', each if [NFC_Total_Points] = 1 then 'Y' else 'N'),    #'Removed Columns' = Table.RemoveColumns(#'Added Conditional Column',{'NFC_Total_Points'}),    #'Replaced Value1' = Table.ReplaceValue(#'Removed Columns','Juvenile','Youth',Replacer.ReplaceText,{'Membership Type'}),    #'Added Custom' = Table.AddColumn(#'Replaced Value1', 'CLNT_TYP_DSCR', each if([New Client Indicator] = 'Y' and [Membership Type] \u003c\u003e 'Prospect') then 'New Client' else if([New Client Indicator] = 'N' and [Membership Type] = 'Prospect') then 'Prospect' else 'Client'),    #'Added Conditional Column1' = Table.AddColumn(#'Added Custom', 'Prospect Ind', each if [CLNT_TYP_DSCR] = 'Prospect' then 1 else 0),    #'Added Conditional Column2' = Table.AddColumn(#'Added Conditional Column1', 'New Client Ind', each if [New Client Indicator] = 'Y' then 1 else 0),    #'Added Conditional Column3' = Table.AddColumn(#'Added Conditional Column2', 'Client Ind', each if [CLNT_TYP_DSCR] = 'Client' then 1 else if [New Client Ind] = 1 then 2 else if [Prospect Ind] = 1 then 3 else 0),    #'Removed Duplicates1' = Table.Distinct(#'Added Conditional Column3', {'Household ID'}),    #'Changed Type2' = Table.TransformColumnTypes(#'Removed Duplicates1',{{'Client Ind', Int64.Type}, {'Customer Identification Number', type text}}),    #'Renamed Columns' = Table.RenameColumns(#'Changed Type2',{{'CLNT_TYP_DSCR', 'Client Description'}}),    #'Renamed Columns1' = Table.RenameColumns(#'Renamed Columns',{{'Client Ind', 'Client Type'}}),    #'Changed Type3' = Table.TransformColumnTypes(#'Renamed Columns1',{{'Age', Int64.Type}}),    #'Replaced Value2' = Table.ReplaceValue(#'Changed Type3',null,0,Replacer.ReplaceValue,{'TmpGoalInd'}),    #'Changed Type4' = Table.TransformColumnTypes(#'Replaced Value2',{{'TmpGoalInd', Int64.Type}, {'RN', Int64.Type}}),    #'Renamed Columns2' = Table.RenameColumns(#'Changed Type4',{{'Household ID', 'SF_HH_ID'}, {'Customer Identification Number', 'Thrivent ID'}})in    #'Renamed Columns2'"}]},{"name":"NFC_Summary","isHidden":false,"storageMode":"Import","columns":[{"name":"CUST_ID_NBR","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"NFC_Total_Points","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = DB2.Database('PODWH021:50000', 'PODWH021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_STS_CDE as ''Financial Customer Point Status Code'',#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_VLU as ''Financial Customer Point Value'',#(lf)       CNF_CUSTOMER_DIM_CFDL.CUST_ID_NBR,#(lf)       CNF_CUSTOMER_DIM_CFDL.CUST_LGAL_FMT_NM, #(lf)       CNF_CONTRACT_DIM_DTL_CFDL.CTRC_ISS_DT as ''Contract Issue Date'', #(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L3_PROD_LOB_CDE as ''Level 3 Product Line Of Business Code'',#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L3_PROD_LOB_DSCR as ''Level 3 Product Line Of Business Description'',#(lf)       AGT_DIM_CURR_CFDL.FRST_NM || \u0027 \u0027 || AGT_DIM_CURR_CFDL.LST_NM as EMPL_NM,#(lf)       AGT_DIM_CURR_CFDL.EMP_ID as ''TS ID'',#(lf)       IA_DATES_ITRL.CAL_DAY_DT as ''Calendar Date'',#(lf)       FIN_CUST_ELIG_DIM_CFDL.FIN_CUST_PNT_RSN_CDE as ''Financial Customer Point Reason Code'',#(lf)       FIN_CUST_ELIG_DIM_CFDL.FIN_CUST_PNT_RSN_DSCR as ''Financial Customer Point Reason Description'',#(lf)       FIN_CUST_ELIG_DIM_CFDL.CTRC_RLTN_TYP_CDE as ''Financial Customer Point Relationship Code'',#(lf)       FIN_CUST_ELIG_DIM_CFDL.CTRC_RLTN_TYP_DSCR as ''Financial Customer Point Relationship Description'',#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_YR_NBR as ''Distribution Performance Reporting Year Number'',#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_YR_TXT #(lf) #(lf)  FROM ((((((COMMON.IA_DATES_ITRL IA_DATES_ITRL INNER JOIN#(lf)             COMMON.DTRB_PERF_DATES DTRB_PERF_DATES#(lf)          ON (IA_DATES_ITRL.DT_SK = DTRB_PERF_DATES.DT_SK)) LEFT OUTER JOIN#(lf)             SALES.TF_FIN_CUST_EVT_FCT_CFDL TF_FIN_CUST_EVT_FCT_CFDL#(lf)          ON (IA_DATES_ITRL.DT_SK = TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_CRNG_DT_SK)) RIGHT OUTER JOIN#(lf)             HUMAN_RESOURCES.SALE_HIER_DIM SALE_HIER_DIM#(lf)          ON (SALE_HIER_DIM.SALE_HIER_DIM_SK = TF_FIN_CUST_EVT_FCT_CFDL.SLHR_DIM_CURR_CRNG_AGT_SK)) LEFT OUTER JOIN#(lf)             MEMBER.CNF_CUSTOMER_DIM_CFDL CNF_CUSTOMER_DIM_CFDL#(lf)          ON (CNF_CUSTOMER_DIM_CFDL.CUST_SK = TF_FIN_CUST_EVT_FCT_CFDL.CUST_SK)) LEFT OUTER JOIN#(lf)             HUMAN_RESOURCES.AGT_DIM_CURR_CFDL AGT_DIM_CURR_CFDL#(lf)          ON (AGT_DIM_CURR_CFDL.AGT_DIM_SK = TF_FIN_CUST_EVT_FCT_CFDL.CRNG_AGT_SK)) RIGHT OUTER JOIN#(lf)             SALES.FIN_CUST_ELIG_DIM_CFDL FIN_CUST_ELIG_DIM_CFDL#(lf)          ON (FIN_CUST_ELIG_DIM_CFDL.FIN_CUST_PNT_ELIG_DIM_SK = TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_ELIG_DIM_SK)) LEFT OUTER JOIN#(lf)             CONTRACT.CNF_CONTRACT_DIM_DTL_CFDL CNF_CONTRACT_DIM_DTL_CFDL#(lf)          ON (CNF_CONTRACT_DIM_DTL_CFDL.CTRC_SK = TF_FIN_CUST_EVT_FCT_CFDL.CTRC_SK) and #(lf)             (CNF_CONTRACT_DIM_DTL_CFDL.VRSN_NBR = TF_FIN_CUST_EVT_FCT_CFDL.CTRC_VRSN_NBR)#(lf)                     #(lf) WHERE (AGT_DIM_CURR_CFDL.CURR_ROW_IND = \u0027Y\u0027)#(lf)   AND (SALE_HIER_DIM.CURR_ROW_IND = \u0027Y\u0027)#(lf)   AND (sale_hier_dim.ORZN_DEPT_CDE in (\u00270001\u0027,\u00270115\u0027,\u00270190\u0027,\u00270283\u0027,\u00270291\u0027,\u00270361\u0027,\u00270384\u0027,\u00270435\u0027,\u00270525\u0027)#(lf)    or AGT_DIM_CURR_CFDL.ORZN_DEPT_CDE in (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027))  #(lf)   AND DTRB_PERF_DATES.DTRB_PERF_RPT_YR_NBR in (\u00272023\u0027,\u00272024\u0027)#(lf)   AND substring(SALE_HIER_DIM.SALE_HIER_ID,1,2)=\u0027TS\u0027#(lf)   AND TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_VLU \u003c\u003e 0']),    #'Filtered Rows1' = Table.SelectRows(Source, each ([DTRB_PERF_RPT_YR_TXT] = 'CURRENT')),    #'Changed Type' = Table.TransformColumnTypes(#'Filtered Rows1',{{'Contract Issue Date', type date}, {'Calendar Date', type date}}),    #'Grouped Rows' = Table.Group(#'Changed Type', {'CUST_ID_NBR'}, {{'NFC_Total_Points', each List.Sum([Financial Customer Point Value]), type nullable number}}),    #'Filtered Rows' = Table.SelectRows(#'Grouped Rows', each ([NFC_Total_Points] = 1))in    #'Filtered Rows'"}]},{"name":"Change Log","isHidden":false,"storageMode":"Import","columns":[{"name":"Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Version","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Author","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Description","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//SHARED//Public//DI and BI//Field Reporting//Change Log//Change Log.xlsx'), null, true),    #'FA _Sheet' = Source{[Item='Advice Reporting',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'FA _Sheet', [PromoteAllScalars=true]),    #'Changed Type1' = Table.TransformColumnTypes(#'Promoted Headers',{{'Date', type date}, {'Version', Currency.Type}, {'Author', type text}, {'Description', type text}})in    #'Changed Type1'"}]},{"name":"Role Level Security","isHidden":false,"storageMode":"Import","columns":[{"name":"EMPLOYEE_TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMPLOYEE_EMAIL","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"REPORT_TO_EMAIL","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"REPORT_TO_TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"WRKR_RPT_HIER_SRC_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTL_DATA_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CRET_USER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CRET_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"LST_UPDT_USER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LST_UPDT_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Department Number","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"AD Group","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SFRC_TEAM_PRPS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RSA_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RSA_TEAM_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SFRC_TEAM_ID","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = PowerBI.Dataflows([]),    #'f7efdfeb-73c5-4a9b-ab78-f9370190eded' = Source{[workspaceId='f7efdfeb-73c5-4a9b-ab78-f9370190eded']}[Data],    #'a9b06e96-a67b-4f28-b939-3e1ca1047bd2' = #'f7efdfeb-73c5-4a9b-ab78-f9370190eded'{[dataflowId='a9b06e96-a67b-4f28-b939-3e1ca1047bd2']}[Data],    #'Role Level Security1' = #'a9b06e96-a67b-4f28-b939-3e1ca1047bd2'{[entity='Role Level Security']}[Data],    #'Filtered Rows' = Table.SelectRows(#'Role Level Security1',  each ([AD Group] = 'PBI_FLD_RPTG_COE' or [AD Group] = 'PBI_FLD_RPTG_FR' or [AD Group] = 'PBI_FLD_RPTG_HO' or [AD Group] = 'PBI_FLD_RPTG_LDR' or [AD Group] = 'PBI_FLD_RPTG_LDRSTF' or [AD Group] = 'PBI_FLD_RPTG_RFOSTF' or [AD Group] = 'PBI_FLD_RPTG_TFGT')),    #'Removed Columns' = Table.RemoveColumns(#'Filtered Rows',{'EMPLOYEE_SK', 'REPORT_TO_SK', 'Department Name', 'HO_Email'}),    #'Add Custom' = Table.AddColumn(#'Removed Columns', 'Custom', each if ([AD Group] = 'PBI_FLD_RPTG_HO' and ([EMPLOYEE_TSID]=[REPORT_TO_TSID])) then 1 else if ([AD Group] = 'PBI_FLD_RPTG_HO' and ([EMPLOYEE_TSID] \u003c\u003e [REPORT_TO_TSID])) then 0else if [AD Group] \u003c\u003e 'PBI_FLD_RPTG_HO' then 1 else 2),    #'Filtered Rows2' = Table.SelectRows(#'Add Custom', each ([Custom] = 1)),    #'Removed Columns1' = Table.RemoveColumns(#'Filtered Rows2',{'Custom'}),    #'Replaced Value' = Table.ReplaceValue(#'Removed Columns1','115','0115',Replacer.ReplaceValue,{'Department Number'}),    #'Replaced Value1' = Table.ReplaceValue(#'Replaced Value','291','0291',Replacer.ReplaceValue,{'Department Number'}),    #'Replaced Value2' = Table.ReplaceValue(#'Replaced Value1','361','0361',Replacer.ReplaceValue,{'Department Number'}),    #'Replaced Value3' = Table.ReplaceValue(#'Replaced Value2','435','0435',Replacer.ReplaceValue,{'Department Number'}),    #'Replaced Value4' = Table.ReplaceValue(#'Replaced Value3','525','0525',Replacer.ReplaceValue,{'Department Number'})in    #'Replaced Value4'"}]},{"name":"_Measures","isHidden":false,"storageMode":"Import","columns":[],"measures":[{"name":"Total Households","expression":"  var _total = CALCULATE(distinctcount(Client_HHLD[SF_HH_ID]),                \u0027Client_HHLD\u0027[SF_HH_ID] \u003c\u003e BLANK() ,                \u0027Producer_Snowflake\u0027[TAG] in {'0115','0190','0283','0291','0361','0383','0384','0435','0525'}) ReturnIF(ISBLANK(_total),0,_total) ","isHidden":false},{"name":"Zero %","expression":"0.0","isHidden":false},{"name":"Zero #","expression":"0","isHidden":false},{"name":"Foundations Display","expression":"  IF(_Measures[Advisor Name Filtered] = 1 \u0026\u0026 SELECTEDVALUE(\u0027Client_HHLD\u0027[Foundations]) = 0, 'Foundations: Before April 2023',  IF(_Measures[Advisor Name Filtered] = 1 \u0026\u0026 SELECTEDVALUE(\u0027Client_HHLD\u0027[Foundations]) = 1, 'Foundations: After April 2023', ' '))","isHidden":false},{"name":"Blank","expression":"' '","isHidden":false},{"name":"Transparent","expression":"'#ffffff00'","isHidden":false},{"name":"Adoption HHLDs","expression":"  var _check = CALCULATE(DISTINCTCOUNT(\u0027Client_HHLD\u0027[SF_HH_ID]),\u0027Client_HHLD\u0027[SF_HH_ID] \u003c\u003e BLANK())   var _total = CALCULATE(DISTINCTCOUNT(\u0027Client_HHLD\u0027[SF_HH_ID]),\u0027Client_HHLD\u0027[SF_HH_ID] \u003c\u003e BLANK(), \u0027Client_HHLD\u0027[Adoption] = 1)RETURN IF(ISBLANK(_check),BLANK(),IF(ISBLANK(_total),0,_total))","isHidden":false},{"name":"Adoption HHLD %","expression":"  var _total = DIVIDE(CALCULATE(_Measures[Adoption HHLDs]), \u0027_Measures\u0027[Total Households])ReturnIF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"ClientID","expression":"  var _id = \u0027_Measures\u0027[HouseholdID]  var _chk = CALCULATE(IF(ISFILTERED(\u0027Client_HHLD\u0027[Advisor Name]) \u0026\u0026 COUNTROWS(\u0027Client_HHLD\u0027)=0, '', _id))returnIF(ISBLANK(_chk),'',_chk)","isHidden":false},{"name":"NFA1-VET Plan","expression":"0","isHidden":false},{"name":"Adopting Advisors %","expression":"  var _adopt = CALCULATE(DISTINCTCOUNT(\u0027Producer_Snowflake\u0027[EMP_ID]),\u0027Producer_Snowflake\u0027[RULE FA] = 'Y')  var _totadvisors = CALCULATE(COUNT(\u0027Producer_Snowflake\u0027[EMP_ID]), all(Client_HHLD[CLNT_AGE_TYP]))  var _rating = CALCULATE(DIVIDE(_adopt,_totadvisors))ReturnIF(ISBLANK(_rating),0,_rating)","isHidden":false},{"name":"Total Advisors","expression":"  var _total = CALCULATE(distinctcount(\u0027Producer_Snowflake\u0027[EMP_ID]))ReturnIF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"Rank Market","expression":"  RANKX(ALLSELECTED(\u0027Producer_Snowflake\u0027[Market with Leader]), \u0027_Measures\u0027[Ranking Market %])","isHidden":false},{"name":"Adopting Advisors","expression":"  var _check = CALCULATE(DISTINCTCOUNT(\u0027Client_HHLD\u0027[SF_HH_ID]),\u0027Client_HHLD\u0027[SF_HH_ID] \u003c\u003e BLANK())  var _total = CALCULATE(DISTINCTCOUNT(\u0027Producer_Snowflake\u0027[EMP_ID]),  \u0027Producer_Snowflake\u0027[RULE FA] = 'Y') ReturnIF(ISBLANK(_check),BLANK(),IF(ISBLANK(_total),0,_total))","isHidden":false},{"name":"NFA0 Rule Actual Advisor Total","expression":"0//   var _check = CALCULATE(DISTINCTCOUNT(\u0027Client_HHLD\u0027[SF_HH_ID]),\u0027Client_HHLD\u0027[SF_HH_ID] \u003c\u003e BLANK())//   var _total = CALCULATE(DISTINCTCOUNT(\u0027Producer_Snowflake\u0027[EMP_ID]),\u0027Producer_Snowflake\u0027[Foundations] = 1, \u0027Producer_Snowflake\u0027[RULE FA AIP] = 'Y')// RETURN// IF(_check \u003e 0,IF(ISBLANK(_total),0,_total),0)","isHidden":false},{"name":"NFA1-4 Rule Actual Advisors","expression":"0//   var _total = CALCULATE(DISTINCTCOUNT(\u0027Producer_Snowflake\u0027[EMP_ID]),\u0027Producer_Snowflake\u0027[Foundations] = 0 \u0026\u0026 (\u0027Producer_Snowflake\u0027[TENURE_GROUP] in {'Associate Rep','NFA1','NFA2','NFA3','NFA4'} || (\u0027Producer_Snowflake\u0027[TENURE_GROUP] = 'TSL' \u0026\u0026 \u0027Producer_Snowflake\u0027[TENURE] \u003e 0  \u0026\u0026 \u0027Producer_Snowflake\u0027[TENURE] \u003c= 4)) \u0026\u0026 \u0027Producer_Snowflake\u0027[RULE FA AIP] = 'Y')// RETURN// IF(ISBLANK(_total),0,_total) ","isHidden":false},{"name":"VET Rule Actual Advisors","expression":"0//  var _total = CALCULATE(DISTINCTCOUNT(\u0027Producer_Snowflake\u0027[EMP_ID]),\u0027Producer_Snowflake\u0027[Foundations] = 0 \u0026\u0026 (\u0027Producer_Snowflake\u0027[TENURE_GROUP] in {'VET5','VET6','VET7','VET8+'} || (\u0027Producer_Snowflake\u0027[TENURE_GROUP] = 'TSL' \u0026\u0026 \u0027Producer_Snowflake\u0027[TENURE] \u003e 4)) \u0026\u0026 \u0027Producer_Snowflake\u0027[RULE FA AIP] = 'Y') // RETURN// IF(ISBLANK(_total),0,_total) ","isHidden":false},{"name":"Total AIP Actual Advisors","expression":"0//   var _total = \u0027_Measures\u0027[NFA0 Rule Actual Advisor Total] + \u0027_Measures\u0027[NFA1-4 Rule Actual Advisors] + \u0027_Measures\u0027[VET Rule Actual Advisors] // RETURN// IF(ISBLANK(_total),0,_total) ","isHidden":false},{"name":"Total AIP Plan Advisors","expression":"0//   var _total = 350// RETURN// IF(ISBLANK(_total),0,_total) ","isHidden":false},{"name":"Max Advice Target","expression":" CALCULATE(Max(\u0027ProRate Dim\u0027[Target]),  USERELATIONSHIP(\u0027DTRB_PERF_DATES\u0027[Current Month],\u0027ProRate Dim\u0027[Month]))","isHidden":false},{"name":"Ranking All Market Advisors","expression":"CALCULATE(DISTINCTCOUNT(\u0027Producer_Snowflake\u0027[EMP_ID]),                        \u0027Producer_Snowflake\u0027[MARKET_LEADERS] \u003c\u003e 'Vacant',                        \u0027Producer_Snowflake\u0027[MARKET_NUMBER] IN {'01','02','03','04','05','06','07','08','09','10','11','12','13','14','15','16','17','18','19'},                        \u0027Producer_Snowflake\u0027[JOB_TYP_CDE] in {'002000','002010','002025','002026','003100','003500'},                        \u0027Producer_Snowflake\u0027[TENURE_GROUP] in {'Associate Rep','NFA1','NFA2','NFA3','NFA4'})","isHidden":false},{"name":"Rank Advisor Group","expression":"RANKX(ALLSELECTED(\u0027Producer_Snowflake\u0027[Advisor Group]),\u0027_Measures\u0027[Ranking Advisor Group %])","isHidden":false},{"name":"Ranking Advisor Group - Adopting","expression":" CALCULATE(DISTINCTCOUNT(\u0027Producer_Snowflake\u0027[EMP_ID]),                        \u0027Producer_Snowflake\u0027[RULE FA]='Y',                        \u0027Producer_Snowflake\u0027[TENURE_GROUP] in {'Associate Rep','NFA1','NFA2','NFA3','NFA4'},                        \u0027Producer_Snowflake\u0027[JOB_TYP_CDE] in {'002000','002010','002025','002026','003100','003500'})","isHidden":false},{"name":"Ranking All Advisor Group","expression":"CALCULATE(DISTINCTCOUNT(\u0027Producer_Snowflake\u0027[EMP_ID]), \u0027Producer_Snowflake\u0027[JOB_TYP_CDE] in {'002000','002010','002025','002026','003100','003500'} \u0026\u0026                        \u0027Producer_Snowflake\u0027[TENURE_GROUP] in {'Associate Rep','NFA1','NFA2','NFA3','NFA4'})","isHidden":false},{"name":"Ranking Advisor Group %","expression":"   var _total = DIVIDE(\u0027_Measures\u0027[Ranking Advisor Group - Adopting],\u0027_Measures\u0027[Ranking All Advisor Group]) RETURNIF(ISBLANK(_total),0,_total) ","isHidden":false},{"name":"Ranking Market %","expression":"   var _total = DIVIDE(\u0027_Measures\u0027[Ranking Market - Adopting],\u0027_Measures\u0027[Ranking All Market Advisors]) RETURNIF(ISBLANK(_total),0,_total) ","isHidden":false},{"name":"Ranking Market - Adopting","expression":" CALCULATE(DISTINCTCOUNT(\u0027Producer_Snowflake\u0027[EMP_ID]),                        \u0027Producer_Snowflake\u0027[RULE FA]='Y',                        \u0027Producer_Snowflake\u0027[MARKET_LEADERS] \u003c\u003e 'Vacant',                        \u0027Producer_Snowflake\u0027[MARKET_NUMBER] IN {'01','02','03','04','05','06','07','08','09','10','11','12','13','14','15','16','17','18','19'},                        \u0027Producer_Snowflake\u0027[TENURE_GROUP] in {'Associate Rep','NFA1','NFA2','NFA3','NFA4'},                        \u0027Producer_Snowflake\u0027[JOB_TYP_CDE] in {'002000','002010','002025','002026','003100','003500'}                       )","isHidden":false},{"name":"Total Actual %","expression":"0//   var _total = CALCULATE(DIVIDE(\u0027_Measures\u0027[Total AIP Actual Advisors],350))// RETURN// IF(ISBLANK(_total),0,_total) ","isHidden":false},{"name":"Advisor Name Filtered","expression":"IF(ISFILTERED(\u0027Producer_Snowflake\u0027[Advisor Name]),1,0)","isHidden":false},{"name":"Ranking MVP - Adopting","expression":" CALCULATE(DISTINCTCOUNT(\u0027Producer_Snowflake\u0027[EMP_ID]),                        \u0027Producer_Snowflake\u0027[RULE FA]='Y',                        \u0027Producer_Snowflake\u0027[MVP Leader] \u003c\u003e 'Vacant',                        \u0027Producer_Snowflake\u0027[TENURE_GROUP] in {'Associate Rep','NFA1','NFA2','NFA3','NFA4'},                        \u0027Producer_Snowflake\u0027[JOB_TYP_CDE] in {'002000','002010','002025','002026','003100','003500'})","isHidden":false},{"name":"Ranking All MVP Advisors","expression":"CALCULATE(DISTINCTCOUNT(\u0027Producer_Snowflake\u0027[EMP_ID]),                        \u0027Producer_Snowflake\u0027[MVP Leader] \u003c\u003e 'Vacant',                        \u0027Producer_Snowflake\u0027[JOB_TYP_CDE] in {'002000','002010','002025','002026','003100','003500'},                        \u0027Producer_Snowflake\u0027[TENURE_GROUP] in {'Associate Rep','NFA1','NFA2','NFA3','NFA4'})","isHidden":false},{"name":"Ranking MVP %","expression":"   var _total = DIVIDE(\u0027_Measures\u0027[Ranking MVP - Adopting],\u0027_Measures\u0027[Ranking All MVP Advisors]) RETURNIF(ISBLANK(_total),0,_total) ","isHidden":false},{"name":"Rank MVP","expression":"  RANKX(ALLSELECTED(\u0027Producer_Snowflake\u0027[MVP with Leader]), \u0027_Measures\u0027[Ranking MVP %])","isHidden":false},{"name":"Total Households Display","expression":"  var _total = CALCULATE(distinctcount(Client_HHLD[SF_HH_ID]),                \u0027Client_HHLD\u0027[SF_HH_ID] \u003c\u003e BLANK(),                \u0027Producer_Snowflake\u0027[TAG] in {'0115','0190','0283','0291','0361','0383','0384','0435','0525'}) Return'Total Households: ' \u0026 FORMAT(IF(ISBLANK(_total),0,_total),'###,###')","isHidden":false},{"name":"Total Advisors Display","expression":"  var _total = CALCULATE(distinctcount(\u0027Producer_Snowflake\u0027[EMP_ID]))Return'Total Advisors (incl. Associates): ' \u0026 FORMAT(IF(ISBLANK(_total),0,_total),'###,###')","isHidden":false},{"name":"Goal Icon Display","expression":"  IF(SELECTEDVALUE(\u0027Client_HHLD\u0027[Total Client Goals] ) \u003e= 2 \u0026\u0026 SELECTEDVALUE(\u0027Client_HHLD\u0027[MaxUpdDt MGP]) \u003e= Date(2023,02,26),1,  IF(SELECTEDVALUE(\u0027Client_HHLD\u0027[Total Client Goals] ) \u003e= 2 \u0026\u0026 SELECTEDVALUE(\u0027Client_HHLD\u0027[MaxUpdDt MGP]) \u003c= Date(2023,02,26),99,0))","isHidden":false},{"name":"ClientType_Desc","expression":"var _check =  SELECTEDVALUE(\u0027Client_HHLD\u0027[Client Type]) var _total = IF( SELECTEDVALUE(\u0027Client_HHLD\u0027[Client Type]) =1,'Client',IF(SELECTEDVALUE(\u0027Client_HHLD\u0027[Client Type]) = 2, 'New Client','Prospect'))Return IF(_check \u003e 0, IF(ISBLANK(_total),0,_total),BLANK())","isHidden":false},{"name":"HouseholdID","expression":"SELECTEDVALUE(\u0027Report_HHLD\u0027[SF_HH_ID])","isHidden":false},{"name":"Monthly Ranking Advisor Group %","expression":" VAR MonthlyPercentage= SUMX(GROUPBY(\u0027Monthly CSV\u0027, \u0027Monthly CSV\u0027[Advisor Group Shortened], \u0027Monthly CSV\u0027[Month Ending],'Adopting',SUMX(CURRENTGROUP(),\u0027Monthly CSV\u0027[Ranking Advisor Group - Adopting]), 'Total',SUMX(CURRENTGROUP(),\u0027Monthly CSV\u0027[Ranking All Advisor Group])),DIVIDE([Adopting],[Total])) Var MonthCount= DISTINCTCOUNT(\u0027Monthly CSV\u0027[Month Ending]) VAR MonthlyAverage= DIVIDE(AVERAGEX(VALUES(\u0027Monthly CSV\u0027[Month Ending]),MonthlyPercentage),MonthCount) RETURN IF(HASONEVALUE(\u0027Monthly CSV\u0027[Month Ending]), IF(ISBLANK(MonthlyPercentage),0,MonthlyPercentage),MonthlyAverage)","isHidden":false},{"name":"Monthly Rank Advisor Group","expression":"RANKX(ALLSELECTED(\u0027Monthly CSV\u0027[Advisor Group Shortened]),\u0027_Measures\u0027[Monthly Ranking Advisor Group %])","isHidden":false},{"name":"Monthly Ranking MVP Group %","expression":" VAR MonthlyPercentage= SUMX(GROUPBY(\u0027Monthly CSV\u0027, \u0027Monthly CSV\u0027[MVP with Leader], \u0027Monthly CSV\u0027[Month Ending],'Adopting',SUMX(CURRENTGROUP(),\u0027Monthly CSV\u0027[Ranking MVP - Adopting]), 'Total',SUMX(CURRENTGROUP(),\u0027Monthly CSV\u0027[Ranking All MVP Advisors])),DIVIDE([Adopting],[Total])) Var MonthCount= DISTINCTCOUNT(\u0027Monthly CSV\u0027[Month Ending]) VAR MonthlyAverage= DIVIDE(AVERAGEX(VALUES(\u0027Monthly CSV\u0027[Month Ending]),MonthlyPercentage),MonthCount) RETURN IF(HASONEVALUE(\u0027Monthly CSV\u0027[Month Ending]), IF(ISBLANK(MonthlyPercentage),0,MonthlyPercentage),MonthlyAverage)","isHidden":false},{"name":"Monthly Rank MVP","expression":"RANKX(ALLSELECTED(\u0027Monthly CSV\u0027[MVP with Leader]),\u0027_Measures\u0027[Monthly Ranking MVP Group %])","isHidden":false},{"name":"Monthly Ranking Market Group %","expression":"VAR MonthlyPercentage= SUMX(GROUPBY(\u0027Monthly CSV\u0027, \u0027Monthly CSV\u0027[Market with Leader], \u0027Monthly CSV\u0027[Month Ending],'Adopting',SUMX(CURRENTGROUP(),\u0027Monthly CSV\u0027[Ranking Market - Adopting]), 'Total',SUMX(CURRENTGROUP(),\u0027Monthly CSV\u0027[Ranking All Market Advisors])),DIVIDE([Adopting],[Total])) Var MonthCount= DISTINCTCOUNT(\u0027Monthly CSV\u0027[Month Ending]) VAR MonthlyAverage= DIVIDE(AVERAGEX(VALUES(\u0027Monthly CSV\u0027[Month Ending]),MonthlyPercentage),MonthCount) RETURN IF(HASONEVALUE(\u0027Monthly CSV\u0027[Month Ending]), IF(ISBLANK(MonthlyPercentage),0,MonthlyPercentage),IF(ISBLANK(MonthlyAverage),0,MonthlyAverage))","isHidden":false},{"name":"Monthly Rank Market","expression":"RANKX(ALLSELECTED(\u0027Monthly CSV\u0027[Market with Leader]),\u0027_Measures\u0027[Monthly Ranking Market Group %])","isHidden":false},{"name":"Ranking MKT Developer - Adopting","expression":" CALCULATE(DISTINCTCOUNT(\u0027Producer_Snowflake\u0027[EMP_ID]),                        \u0027Producer_Snowflake\u0027[RULE FA]='Y',                        \u0027Producer_Snowflake\u0027[Market Developer] \u003c\u003e BLANK(),                        \u0027Producer_Snowflake\u0027[TENURE_GROUP] in {'Associate Rep','NFA1','NFA2','NFA3','NFA4'},                        \u0027Producer_Snowflake\u0027[JOB_TYP_CDE] in {'002000','002010','002025','002026','003100','003500'})","isHidden":false},{"name":"Ranking All MKT Developer Advisors","expression":"CALCULATE(DISTINCTCOUNT(\u0027Producer_Snowflake\u0027[EMP_ID]),                        \u0027Producer_Snowflake\u0027[Market Developer] \u003c\u003e BLANK(),                        \u0027Producer_Snowflake\u0027[JOB_TYP_CDE] in {'002000','002010','002025','002026','003100','003500'},                        \u0027Producer_Snowflake\u0027[TENURE_GROUP] in {'Associate Rep','NFA1','NFA2','NFA3','NFA4'})","isHidden":false},{"name":"Ranking MKT DEV %","expression":"   var _total = DIVIDE(\u0027_Measures\u0027[Ranking MKT Developer - Adopting],\u0027_Measures\u0027[Ranking All MKT Developer Advisors]) RETURNIF(ISBLANK(_total),0,_total) ","isHidden":false},{"name":"Rank MKT DEV","expression":"  RANKX(ALLSELECTED(\u0027Producer_Snowflake\u0027[Market Developer]), \u0027_Measures\u0027[Ranking MKT DEV %])","isHidden":false},{"name":"Monthly Ranking MKT Dev Group %","expression":" VAR MonthlyPercentage= SUMX(GROUPBY(\u0027Monthly CSV\u0027, \u0027Monthly CSV\u0027[Market Developer], \u0027Monthly CSV\u0027[Month Ending],'Adopting',SUMX(CURRENTGROUP(),\u0027Monthly CSV\u0027[Ranking MKT Developer - Adopting]), 'Total',SUMX(CURRENTGROUP(),\u0027Monthly CSV\u0027[Ranking All MKT Developer Advisors])),DIVIDE([Adopting],[Total])) Var MonthCount= DISTINCTCOUNT(\u0027Monthly CSV\u0027[Month Ending]) VAR MonthlyAverage= DIVIDE(AVERAGEX(VALUES(\u0027Monthly CSV\u0027[Month Ending]),MonthlyPercentage),MonthCount) RETURN IF(HASONEVALUE(\u0027Monthly CSV\u0027[Month Ending]), IF(ISBLANK(MonthlyPercentage),0,MonthlyPercentage),IF(ISBLANK(MonthlyAverage),0,MonthlyAverage))","isHidden":false},{"name":"Monthly Rank MKT Dev","expression":"RANKX(ALLSELECTED(\u0027Monthly CSV\u0027[Market Developer]),\u0027_Measures\u0027[Monthly Ranking MKT Dev Group %])","isHidden":false},{"name":"CEO Switch Measure","expression":"SUMX(    \u0027Axis Table\u0027,SWITCH(    [ID],1,\u0027Monthly CEO csv\u0027[Prior YE % measure for Adopted HH w/ R\u0026A to Adopted HH - No Time Constraint],2,\u0027Monthly CEO csv\u0027[Current % measure for Adopted HH with Risk \u0026 Accum to Adopted HH - No Time Constraint],3,\u0027Monthly CEO csv\u0027[Target % measure for Adopted HH w/ R\u0026A to Adopted HH - No Time Constraint]))","isHidden":false},{"name":"Adoption % w/ R\u0026A: Actual vs Plan","expression":"((\u0027Monthly CEO csv\u0027[Current % measure for Adopted HH with Risk \u0026 Accum to Adopted HH - No Time Constraint]-\u0027Monthly CEO csv\u0027[Target % measure for Adopted HH w/ R\u0026A to Adopted HH - No Time Constraint])/\u0027Monthly CEO csv\u0027[Target % measure for Adopted HH w/ R\u0026A to Adopted HH - No Time Constraint])","isHidden":false},{"name":"Label CEO Bar Chart Prior Year Actual","expression":"FORMAT(\u0027Monthly CEO csv\u0027[Prior YE % measure for Adopted HH w/ R\u0026A to Adopted HH - No Time Constraint],'0.0%')\u0026 UNICHAR(10) \u0026'Actual'","isHidden":false},{"name":"Label CEO Bar Chart Current Year Actual","expression":"FORMAT(\u0027Monthly CEO csv\u0027[Current % measure for Adopted HH with Risk \u0026 Accum to Adopted HH - No Time Constraint],'0.0%')\u0026 UNICHAR(10) \u0026 FORMAT(_Measures[Adoption % w/ R\u0026A: Actual vs Plan],'+0.0%;-0.0%')\u0026' vs. Plan'","isHidden":false},{"name":"Label CEO Bar Chart Plan","expression":"FORMAT(\u0027Monthly CEO csv\u0027[Target % measure for Adopted HH w/ R\u0026A to Adopted HH - No Time Constraint],'0.0%')\u0026 UNICHAR(10) \u0026'Plan'","isHidden":false}],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i44FAA==', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Column1 = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Column1', type text}}),    #'Removed Columns' = Table.RemoveColumns(#'Changed Type',{'Column1'})in    #'Removed Columns'"}]},{"name":"Key","isHidden":false,"storageMode":"Import","columns":[{"name":"Value","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Numeric ","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"SortOrder","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"ICON","expression":"SWITCH(SELECTEDVALUE(\u0027Key\u0027[Value]),      'N', UNICHAR(128308), --'🔴'     'Y', UNICHAR(128994), --'🟢'     'X', UNICHAR(128993)  --'🟡')","isHidden":false}],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i45WilTSUTJUitWJVvIDsgzArAiIWCwA', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Value = _t, #'Numeric ' = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Value', type text}, {'Numeric ', Int64.Type}}),    #'Added Custom' = Table.AddColumn(#'Changed Type', 'SortOrder', each if [Value] = 'Y' then 1 else if [Value] = 'N' then 2 else 3)in    #'Added Custom'"}]},{"name":"Foundations Key","isHidden":false,"storageMode":"Import","columns":[{"name":"Value","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Numeric","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Training","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Foundation ICON","expression":"SWITCH(SELECTEDVALUE(\u0027Foundations Key\u0027[Value]),      'N', UNICHAR(9898),     'Y', UNICHAR(9899))","isHidden":false}],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i45W8lPSUTJQitWJVooEsgyVYmMB', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Value = _t, Numeric = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Value', type text}, {'Numeric', Int64.Type}}),    #'Added Custom' = Table.AddColumn(#'Changed Type', 'Training', each if([Value]) = 'N' then 'Before Apr 2023' else 'After Apr 2023')in    #'Added Custom'"}]},{"name":"Attendance Data","isHidden":false,"storageMode":"Import","columns":[{"name":"% Attended Required","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TS","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Class Month","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Targeting TSL","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Display Class","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(Web.Contents('https://thrivent.sharepoint.com/sites/PRJThriventAdvisorOnboarding/Shared Documents/Logistics - Behind the Scenes/Master Attendance Tracker/Master Attendance Tracker.xlsx'), null, true),    #'2023 Master Attendance Tracker_Sheet' = Source{[Item='2023 Master Attendance Tracker',Kind='Sheet']}[Data],    #'Promoted Headers1' = Table.PromoteHeaders(#'2023 Master Attendance Tracker_Sheet', [PromoteAllScalars=true]),    #'Changed Type3' = Table.TransformColumnTypes(#'Promoted Headers1',{{'Class Month', type date}, {'Name', type text}, {'TS', type any}, {'% Attended Required', type number}, {'Targeting TSL', type text}, {'Column6', type any}, {'Column7', type any}, {'Column8', type any}, {'Column9', type any}}),    #'Changed Type' = Table.TransformColumnTypes(#'Changed Type3',{{'Name', type text}, {'TS', type text}, {'% Attended Required', Percentage.Type}}),    #'Removed Other Columns' = Table.SelectColumns(#'Changed Type',{'Class Month', 'Name', 'TS', '% Attended Required', 'Targeting TSL'}),    #'Filtered Rows' = Table.SelectRows(#'Removed Other Columns', each ([TS] \u003c\u003e null)),    #'Trimmed Text' = Table.TransformColumns(#'Filtered Rows',{{'TS', Text.Trim, type text}}),    #'Changed Type1' = Table.TransformColumnTypes(#'Trimmed Text',{{'Class Month', type date}}),    #'Added Custom' = Table.AddColumn(#'Changed Type1', 'Display Class', each if [Class Month] \u003e=  #date(2023,4,1) then [Class Month] else ''),    #'Added Custom1' = Table.AddColumn(#'Added Custom', 'Today\u0027s_Date', each DateTime.LocalNow()),    #'Changed Type2' = Table.TransformColumnTypes(#'Added Custom1',{{'Today\u0027s_Date', type date}}),    #'Added Custom2' = Table.AddColumn(#'Changed Type2', 'Rec_Keep', each if [Class Month] \u003e= [#'Today\u0027s_Date'] then 'N' else 'Y'),    #'Filtered Rows1' = Table.SelectRows(#'Added Custom2', each ([Rec_Keep] = 'Y')),    #'Removed Columns' = Table.RemoveColumns(#'Filtered Rows1',{'Today\u0027s_Date', 'Rec_Keep'})in    #'Removed Columns'"}]},{"name":"ProRate Dim","isHidden":false,"storageMode":"Import","columns":[{"name":"Month Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Month","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Target","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Prorate","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('RY8xC8IwEIX/S+YOJtZaR0EcCtXBMXRIw6FCbUtsBP+9eXdRh/eg33d3odaqxo3RhbcqlE4xnK6w6kh9yAKw5EC0Lvhb+lqnVBzQ/RzuQ56rOTKL/Q2Or6RAmzhSXtZGSvCA6S1IKcWX4zU+l3xWV1IQF5oXevQUEtoB11JwZ79MYvhhwyX3TtPru6X5l83fHcj/XMbiug8=', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [#'Month Description' = _t, Month = _t, Target = _t, Prorate = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Month Description', type text}, {'Month', Int64.Type}, {'Target', Int64.Type}, {'Prorate', Int64.Type}})in    #'Changed Type'"}]},{"name":"Last Refreshed Date","isHidden":false,"storageMode":"Import","columns":[{"name":"Last Refresh Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Last Refresh","dataType":"String","isHidden":false,"expression":"'Last Refresh Date: ' \u0026 \u0027Last Refreshed Date\u0027[Last Refresh Date]","columnType":"Calculated"}],"measures":[],"source":[{"expression":"let    Source = DateTime.LocalNow(),    #'Converted to Table' = #table(1, {{Source}}),    #'Changed Type' = Table.TransformColumnTypes(#'Converted to Table',{{'Column1', type date}}),    #'Renamed Columns' = Table.RenameColumns(#'Changed Type',{{'Column1', 'Last Refresh Date'}})in    #'Renamed Columns'"}]},{"name":"Adopted HHLD Filter Sort","isHidden":false,"storageMode":"Import","columns":[{"name":"Total Adopted Households Filter","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Sort Order","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('Lc+5EcQwDEPRXpiuAgOWr1o07r+NJQAnnM+Eb7hWbTUK9Y7VcxRd7Npde9d0za7DdXSdrrPrcl1dt+vuelyPLm85beVj5CAQJCEUZCEYpCEc5CEgJCIkZCIopCIs5DIu5TIu/d/3oFzGpVzG5fxpafj9Aw==', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [#'Total Adopted Households Filter' = _t, #'Sort Order' = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Total Adopted Households Filter', type text}, {'Sort Order', Int64.Type}})in    #'Changed Type'"}]},{"name":"Tenure Group Sort","isHidden":false,"storageMode":"Import","columns":[{"name":"TENURE_GROUP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Sort Order","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i45Wciwuzk/OTCxJVQhKLVDSUTJUitWJVgoJ9gGyjcBsPzdHQyDHGMYxAnJMYBxjIMcUxjEBcszAnDDXEFMgxxzGMQNyLGAccyDHEsax0AZZagAxwhHEBrogFgA=', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [TENURE_GROUP = _t, #'Sort Order' = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'TENURE_GROUP', type text}, {'Sort Order', Int64.Type}})in    #'Changed Type'"}]},{"name":"Household Report","isHidden":false,"storageMode":"Import","columns":[{"name":"Advisor Name","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"Household Name","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"Adopted Household","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"Advisor Group","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"MVP","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"Advisor Tenure","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"Client Name","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"HOH Indicator","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"ClientID","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"Client Type","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"Connect","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"Connect Goals Household","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"Analyze","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"MGP Max Update Date","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"Household ID","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"Deliver","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"Deliver Adoption","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"}],"measures":[],"source":[{"expression":"   SELECTCOLUMNS(\u0027Client_HHLD\u0027,'Advisor Name', \u0027Client_HHLD\u0027[Advisor Name],                'Household Name', \u0027Client_HHLD\u0027[HOH_NAME],                'Household ID', \u0027Client_HHLD\u0027[SF_HH_ID],                'ClientID', \u0027Client_HHLD\u0027[Thrivent ID],                'Client Name', \u0027Client_HHLD\u0027[HOH_NAME],                'Client Type', \u0027Client_HHLD\u0027[CLNT_AGE_TYP],                'HOH Indicator',Client_HHLD[Client Type],                'Connect', \u0027Client_HHLD\u0027[Goal Indicator],                'Connect Goals Household',\u0027Client_HHLD\u0027[Total Client Goals],                'Deliver',\u0027Client_HHLD\u0027[Deliver CEO],                'Deliver Adoption',\u0027Client_HHLD\u0027[Deliver Adoption Ind],                'Analyze', \u0027Client_HHLD\u0027[Total Households Analyze],                'MGP Max Update Date',\u0027Client_HHLD\u0027[maxDeliverDt],                'Adopted Household',\u0027Client_HHLD\u0027[Deliver Adoption Ind],                'EMP_ID', RELATED(\u0027Producer_Snowflake\u0027[EMP_ID]),                'Advisor Group', RELATED(\u0027Producer_Snowflake\u0027[Advisor Group]),                'Market', RELATED(\u0027Producer_Snowflake\u0027[Market with Leader]),                'MVP', RELATED(\u0027Producer_Snowflake\u0027[MVP with Leader]),                'Advisor Tenure', RELATED(\u0027Producer_Snowflake\u0027[TENURE_GROUP]))"}]},{"name":"Advisors RLS","isHidden":false,"storageMode":"Import","columns":[{"name":"Advisor Name","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"Advisor Group","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"MVP","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"Advisor Tenure","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"}],"measures":[],"source":[{"expression":"   SELECTCOLUMNS(\u0027Producer_Snowflake\u0027,'Advisor Name', \u0027Producer_Snowflake\u0027[Advisor Name],                  'EMP_ID',\u0027Producer_Snowflake\u0027[EMP_ID],                  'Advisor Group', \u0027Producer_Snowflake\u0027[Advisor Group],                  'Market', \u0027Producer_Snowflake\u0027[Market with Leader],                  'MVP', \u0027Producer_Snowflake\u0027[MVP with Leader],                  'Advisor Tenure', \u0027Producer_Snowflake\u0027[TENURE_GROUP] )"}]},{"name":"Report_HHLD","isHidden":false,"storageMode":"Import","columns":[{"name":"Thrivent ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CIF_GRPID","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"SF_HH_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Household Role","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"HH_SEL","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"HOH_NAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Client Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Membership Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Membership Type Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Membership Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CLNT_AGE_TYP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee Display Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"New Client Indicator","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CLNT_TYP_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Prospect Ind","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"New Client Ind","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Client Ind","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Age","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TmpGoalInd","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"RN","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"NFC_Total_Points","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'WITH CTE AS(#(lf)select *,#(lf)       ROW_NUMBER() OVER (PARTITION BY ''Household ID''   ORDER BY ''Household ID'', HH_Sel, ''Age'' desc) AS rn #(lf)  from #(lf)    #(lf)(select distinct#(lf)       a.''Customer Identification Number'',#(lf)       a.''Customer Group Identification Number'' AS CIF_GRPID,#(lf)       case when c.''Household Durable ID'' IS NULL then TO_CHAR(a.''Customer Identification Number'')#(lf)         else c.''Household Durable ID''#(lf)       end as ''Household ID'',#(lf)       c.''Household Member Role Description'' AS ''Household Role'',#(lf)       case when c.''Household Member Role Description'' = \u0027Primary\u0027 then 1#(lf)            when c.''Household Member Role Description'' = \u0027Spouse\u0027  then 2#(lf)            when c.''Household Member Role Description'' = \u0027Other\u0027   then 3#(lf)            when c.''Household Member Role Description'' = \u0027Child\u0027   then 4#(lf)            when c.''Household Member Role Description'' = \u0027 \u0027       then 5#(lf)       end as HH_Sel,#(lf)       case when xx.HOH_NAMExx \u003c\u003e \u0027\u0027 then xx.HOH_NAMExx#(lf)          else b.''Last Name'' || \u0027, \u0027 || b.''First Name''#(lf)       end as HOH_NAME,#(lf)       b.''Last Name'' || \u0027, \u0027 || b.''First Name'' AS ''Client Name'',#(lf)       a.''Membership Type Code'',#(lf)       a.''Membership Type Description'',#(lf)       case when a.''Membership Type Code'' = \u0027NON\u0027 and a.''Classification Contractual Relationship Code'' \u003c\u003e \u0027NA\u0027 then \u0027Non-Member\u0027#(lf)            when a.''Membership Type Code'' = \u0027NON\u0027 and a.''Classification Contractual Relationship Code'' = \u0027NA\u0027 then \u0027Prospect\u0027#(lf)            when a.''Membership Type Code'' IN (\u0027BEN\u0027, \u0027ASSOC\u0027, \u0027JUV\u0027) then a.''Membership Type Description''#(lf)       end as ''Membership Type'',#(lf)       case when b.''Age Number'' \u003c 18 THEN \u0027\u003c18\u0027#(lf)            when b.''Age Number'' \u003e= 18 THEN \u002718+\u0027#(lf)              else \u0027 \u0027#(lf)       end as clnt_age_typ,#(lf)       xx2.TSID,#(lf)       xx2.''Employee Display Name'',#(lf)       b.''Age Number'' as ''Age'', #(lf)       gx.''TmpGoalInd''#(lf)#(lf)       #(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Conformed Customer Dimension Detail'' a inner join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Person Dimension'' b#(lf)    on a.''Customer Identification Number'' = try_to_number (b.''Source System Key Text'') left join #(lf)       (select distinct * #(lf)          from ''SALESFORCE_B2C_ODS''.''PRESENTATION_01''.''Salesforce Dataready Customergroups Confidential''#(lf)         where ''Household Member IsDeleted'' = FALSE #(lf)           and ''IsDeleted'' = FALSE#(lf)        QUALIFY ROW_NUMBER() OVER (PARTITION BY ''Household Member Customer ID'' ORDER BY ''Last Modified Date'' DESC, ''Commit Timestamp'' DESC)=1) AS c#(lf)    on c.''Household Member Customer ID''= a.''Customer Identification Number'' left join#(lf)       (select distinct#(lf)               d.''Person Dimension Surrogate Key'',#(lf)               e.''Source System Key Text'' AS TSID,#(lf)               e.''Employee Display Name'',#(lf)               case when d.''Advisor Type Code'' = \u0027SR\u0027 then 1 #(lf)                      else 2 #(lf)               end as selind,#(lf)               ROW_NUMBER() OVER (PARTITION BY d.''Person Dimension Surrogate Key'' ORDER BY d.''Person Dimension Surrogate Key'', d.''Advisor Type Code'' desc, d.''Effective Begin Date'' desc) as rn#(lf)          from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Assignment Fact'' d inner join #(lf)               ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Assignment Organization Dimension'' e#(lf)            on d.''Assignment Organization Dimension Key'' = e.''Assignment Organization Dimension Key''#(lf)         where d.''Effective End Date'' = \u00279999-12-31\u0027#(lf)           and e.''Source Sub System Text'' = \u0027WORKER\u0027#(lf)      group by d.''Person Dimension Surrogate Key'',#(lf)               d.''Advisor Type Code'',#(lf)               d.''Effective Begin Date'',#(lf)               e.''Source System Key Text'',#(lf)               e.''Employee Display Name'') xx2#(lf)     on b.''Person Dimension Surrogate Key'' = xx2.''Person Dimension Surrogate Key'' and xx2.rn = 1 left join #(lf)        ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' f#(lf)     on (xx2.TSID = f.''Employee Identifier'' and f.''Current Row Indicator'' = \u0027Y\u0027 ) left join #(lf)        (select cc.''Household Durable ID'',#(lf)                bb.''Last Name'' || \u0027, \u0027 || bb.''First Name'' AS HOH_NAMExx#(lf)           from (select distinct * #(lf)                   from ''SALESFORCE_B2C_ODS''.''PRESENTATION_01''.''Salesforce Dataready Customergroups Confidential''#(lf)                  where ''Household Member IsDeleted'' = FALSE #(lf)                    and ''IsDeleted'' = FALSE#(lf)                    and ''Household Member Role Description'' = \u0027Primary\u0027#(lf)                  QUALIFY ROW_NUMBER() OVER (PARTITION BY ''Household Durable ID'',''Household Member Role Description''ORDER BY ''Last Modified Date'' DESC, ''Commit Timestamp'' DESC)=1) as cc inner join  #(lf)                 ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Person Dimension'' bb#(lf)             on try_to_number (cc.''Household Member Customer ID'') = try_to_number (bb.''Source System Key Text'')#(lf)          where cc.''Household Member Role Description'' = \u0027Primary\u0027#(lf)            and bb.''Current Row Indicator'' = \u0027Y\u0027) AS xx#(lf)     on c.''Household Durable ID'' = xx.''Household Durable ID'' left join#(lf)        (select distinct a2.''Customer Identification Number'',#(lf)                1 as ''TmpGoalInd''#(lf)           from ''ENTERPRISE_FINANCIAL_SERVICES_AGMT''.''PRESENTATION_01''.''Client Advice Goal Confidential'' a2#(lf)          where (a2.''Operation Type Code'' \u003c\u003e \u0027DELETE\u0027 and a2.''Record Status Code'' \u003c\u003e \u0027D\u0027))as gx#(lf)     on a.''Customer Identification Number'' = gx.''Customer Identification Number''  #(lf)  where a.''Current Row Indicator'' = \u0027Y\u0027#(lf)    and b.''Current Row Indicator'' = \u0027Y\u0027#(lf)    and b.''Deceased Indicator'' = \u0027N\u0027#(lf)    and (a.''Membership Type Code'' IN (\u0027BEN\u0027,\u0027ASSOC\u0027) or#(lf)        (a.''Membership Type Code'' = \u0027NON\u0027 and gx.''TmpGoalInd'' = 1) or #(lf)        (a.''Membership Type Code'' = \u0027NON\u0027 and a.''Classification Contractual Relationship Code'' \u003c\u003e \u0027NA\u0027))  #(lf)    and f.''Organization Department Code'' NOT IN (\u00270714\u0027, \u00270716\u0027, \u00277151\u0027)#(lf)    and (f.''Job Type Code'' IN (\u0027002000\u0027,\u0027002010\u0027,\u0027002003\u0027,\u0027002011\u0027,\u0027002012\u0027,\u0027003100\u0027,\u0027002017\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027002018\u0027,#(lf)                              \u0027002019\u0027,\u0027003500\u0027,\u0027002022\u0027,\u0027002024\u0027,\u0027002025\u0027,\u0027002026\u0027,\u0027002027\u0027,\u0027002030\u0027,\u0027002031\u0027,\u0027002032\u0027) or#(lf)        f.''Organization Department Code'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027) and #(lf)        f.''Job Type Code'' NOT IN (\u00271356\u0027,\u00271658\u0027,\u00272598\u0027,\u00273458\u0027))#(lf)    and b.''Age Number'' \u003e= 18#(lf)    and f.''Employee Status Type Code'' = \u0027A\u0027#(lf)    #(lf)) #(lf)     )  #(lf)select *#(lf)  from CTE #(lf) where (''Membership Type'' in (\u0027Benefit\u0027, \u0027Associate\u0027, \u0027Non-Member\u0027) or (''Membership Type'' = \u0027Prospect\u0027 and ''TmpGoalInd'' = 1))#(lf)    and ''Age'' \u003e= 18', null, [EnableFolding=true]),    #'Removed Duplicates' = Table.Distinct(Source, {'Customer Identification Number'}),    #'Changed Type' = Table.TransformColumnTypes(#'Removed Duplicates',{{'Customer Identification Number', Int64.Type}}),    #'Merged Queries' = Table.NestedJoin(#'Changed Type', {'Customer Identification Number'}, NFC_Summary, {'CUST_ID_NBR'}, 'NFC_Summary', JoinKind.LeftOuter),    #'Expanded NFC_Summary' = Table.ExpandTableColumn(#'Merged Queries', 'NFC_Summary', {'NFC_Total_Points'}, {'NFC_Total_Points'}),    #'Replaced Value' = Table.ReplaceValue(#'Expanded NFC_Summary',null,0,Replacer.ReplaceValue,{'NFC_Total_Points'}),    #'Changed Type1' = Table.TransformColumnTypes(#'Replaced Value',{{'NFC_Total_Points', Int64.Type}}),    Custom1 = Table.AddColumn(#'Changed Type1', 'New Client Indicator', each if([NFC_Total_Points]) = 1 then 'Y' else 'N'),    #'Replaced Value1' = Table.ReplaceValue(Custom1,'Juvenile','Youth',Replacer.ReplaceText,{'Membership Type'}),    Custom2 = Table.AddColumn(#'Replaced Value1', 'CLNT_TYP_DSCR', each if([New Client Indicator] = 'Y' and [Membership Type] \u003c\u003e 'Prospect') then 'New Client' else if([New Client Indicator] = 'N' and [Membership Type] = 'Prospect') then 'Prospect' else 'Client'),    #'Renamed Columns' = Table.RenameColumns(Custom2,{{'Customer Identification Number', 'Thrivent ID'}, {'Household ID', 'SF_HH_ID'}}),    #'Added Conditional Column' = Table.AddColumn(#'Renamed Columns', 'Prospect Ind', each if [CLNT_TYP_DSCR] = 'Prospect' then 1 else 0),    #'Added Conditional Column1' = Table.AddColumn(#'Added Conditional Column', 'New Client Ind', each if [New Client Indicator] = 'Y' then 1 else 0),    #'Added Conditional Column2' = Table.AddColumn(#'Added Conditional Column1', 'Client Ind', each if [CLNT_TYP_DSCR] = 'Client' then 1 else if [New Client Ind] = 1 then 2 else if [Prospect Ind] = 1 then 3 else 0),    #'Changed Type2' = Table.TransformColumnTypes(#'Added Conditional Column2',{{'Thrivent ID', type text}})in    #'Changed Type2'"}]},{"name":"Advisor Job Codes","isHidden":false,"storageMode":"Import","columns":[{"name":"Job Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Code Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Column#","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('fZFNa8MwDIb/ism5MNuhpTuOfUBgY6WBXUoPxtGCWeYYWc7vn5wNFodlN7/WI+mVdLlUUmopZbWrnpw33joziLsYR34Q8K+qrrsfqGb5d0jJZUicISBE8GTITStSsWzBJnTkIG60Uppl42NCdgQbkNaF6ROOXbKAoimpfVGKrYlmRRxm85a2StR5uhMaS44rtClQ4Uj/gqvh/kPLCTfJWsmi+wNMMIwBcMnsZ+YMvRs9b+LF4AeQeAbTLbiDrG9ZvDmklG/cTbkej/wOMc6JC/R4ZHE/OL6hePS96eEzP9sA9oZdo3gNxDkx7/M77foF', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [#'Job Code' = _t, #'Job Code Description' = _t, #'Column#' = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Job Code', type text}, {'Job Code Description', type text}})in    #'Changed Type'"}]},{"name":"AdviceMessage","isHidden":false,"storageMode":"Import","columns":[{"name":"Message Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Message","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"End Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Start Date","dataType":"DateTime","isHidden":false,"columnType":"Data"}],"measures":[{"name":"What\u0027s New Msg","expression":" VAR EndDate=LOOKUPVALUE(\u0027AdviceMessage\u0027[End Date],\u0027AdviceMessage\u0027[Message Description],'What\u0027s New')RETURNIF(TODAY()\u003c=EndDate,LOOKUPVALUE(\u0027AdviceMessage\u0027[Message],\u0027AdviceMessage\u0027[Message Description], 'What\u0027s New'),'')","isHidden":false},{"name":"Show What\u0027s New Msg Box","expression":"VAR EndDate=LOOKUPVALUE(\u0027AdviceMessage\u0027[End Date],\u0027AdviceMessage\u0027[Message Description],'What\u0027s New')RETURNIF(TODAY()\u003c=EndDate,1,0)","isHidden":false},{"name":"Alert Msg","expression":"VAR AlertMsg=LOOKUPVALUE(\u0027AdviceMessage\u0027[Message],\u0027AdviceMessage\u0027[Message Description],'Alert!')RETURNIF(AlertMsg\u003c\u003eBLANK(),AlertMsg, '')","isHidden":false},{"name":"Show Alert Msg Box","expression":"VAR AlertMsg=LOOKUPVALUE(\u0027AdviceMessage\u0027[Message],\u0027AdviceMessage\u0027[Message Description],'Alert!')RETURNIF(AlertMsg\u003c\u003eBLANK(),1,0)","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//SHARED//Public//DI and BI//Field Reporting//What\u0027s New and Alert Message//What\u0027s New and Alert Message.xlsx'), null, true),    Advice_Sheet = Source{[Item='Advice',Kind='Sheet']}[Data],    #'Promoted Headers1' = Table.PromoteHeaders(Advice_Sheet, [PromoteAllScalars=true]),    #'Changed Type1' = Table.TransformColumnTypes(#'Promoted Headers1',{{'Message Description', type text}, {'Message', type text}, {'End Date', type date}, {'Start Date', type date}})in    #'Changed Type1'"}]},{"name":"Producer_Snowflake","isHidden":false,"storageMode":"Import","columns":[{"name":"SALE_HIER_DIM_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EMP_DIM_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SALE_HIER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Advisor Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ZONE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Adjusted Service Date","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TENURE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SFC_FC","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FR_Segment","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LST_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FRST_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MDDL_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MARKET_LEADERS","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP Leader","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Advisor Group","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market with Leader","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP with Leader","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FILTER_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MARKET_NUMBER","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TSL/Assoc Rep","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Financial Professional Tenure Group","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TENURE_GROUP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team Purpose Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team Purpose Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Adopted Client Households","dataType":"String","isHidden":false,"expression":"  var _total = Calculate(DISTINCTCOUNT(Client_HHLD[SF_HH_ID]),                        Client_HHLD[SF_HH_ID] \u003c\u003e  BLANK(), Client_HHLD[Client Description]= 'Client' ,                        Client_HHLD[Adoption CEO] = 1)Return  IF(ISBLANK(_total),0,_total)  ","columnType":"Calculated"},{"name":"Foundations","dataType":"String","isHidden":false,"expression":"    var _Train = IF(RELATED(\u0027Attendance Data\u0027[Class Month]) \u003e= DATE(2023,3,1),1,0)RETURNIF(ISBLANK(_train),0,_train)","columnType":"Calculated"},{"name":"Foundation Class","dataType":"String","isHidden":false,"expression":"RELATED(\u0027Attendance Data\u0027[Class Month]) ","columnType":"Calculated"},{"name":"Foundations Indicator","dataType":"String","isHidden":false,"expression":"  var _ind = IF(\u0027Producer_Snowflake\u0027[Foundations] = 1, 'Y', 'N')Return  IF(ISBLANK(_ind), 'N',_ind)","columnType":"Calculated"},{"name":"Adopted Households","dataType":"String","isHidden":false,"expression":"  var _total = Calculate(DISTINCTCOUNT(Client_HHLD[SF_HH_ID]),                        Client_HHLD[SF_HH_ID] \u003c\u003e BLANK(), Client_HHLD[Client Description]= 'Client' || Client_HHLD[Client Description] = 'New Client',                        Client_HHLD[Adoption] = 1)Return  IF(ISBLANK(_total),0,_total)       ","columnType":"Calculated"},{"name":"Adopted New Client Households","dataType":"String","isHidden":false,"expression":"  var _total = Calculate(DISTINCTCOUNT(Client_HHLD[SF_HH_ID]),                        Client_HHLD[SF_HH_ID] \u003c\u003e BLANK(), Client_HHLD[Client Description] = 'New Client',                        Client_HHLD[Adoption CEO] = 1)Return  IF(ISBLANK(_total),0,_total)  ","columnType":"Calculated"},{"name":"Adopting Advisor","dataType":"String","isHidden":false,"expression":"  var _calc = IF(\u0027Producer_Snowflake\u0027[RULE FA] = 'Y', 1,0)RETURNIF(ISBLANK(_calc),0, _calc)","columnType":"Calculated"},{"name":"RULE FA","dataType":"String","isHidden":false,"expression":"  var _adoptHHLD = \u0027Producer_Snowflake\u0027[Adopted Households] + \u0027Producer_Snowflake\u0027[Advice Prorate]  var _rulechk = IF(_adoptHHLD \u003e= \u0027Producer_Snowflake\u0027[Advice Target], 'Y', 'N')RETURNIF(ISBLANK(_rulechk),'N',_rulechk)","columnType":"Calculated"},{"name":"Advice Prorate","dataType":"String","isHidden":false,"expression":"  var _hireYear = 2024  var _hireMonth = If(year(RELATED(\u0027Attendance Data\u0027[Class Month]))= _hireYear, month(related(\u0027Attendance Data\u0027[Class Month])), 0)  var _foundations = \u0027Producer_Snowflake\u0027[Foundations]    var _calc =     IF(_foundations = 1,       CALCULATE(Max(\u0027ProRate Dim\u0027[Prorate]),       USERELATIONSHIP(\u0027DTRB_PERF_DATES\u0027[Current Month],\u0027ProRate Dim\u0027[Month]), \u0027ProRate Dim\u0027[Month] = _hireMonth),0)         RETURN _calc","columnType":"Calculated"},{"name":"Advice Target","dataType":"String","isHidden":false,"expression":"VAR CurrentMonthNumber= IF(MONTH(TODAY())=1,12,MONTH(TODAY()))VAR PreviousMonthNumber= IF(MONTH(TODAY())=1,12,MONTH(TODAY())-1) VAR MonthForGoal= IF(DTRB_PERF_DATES[Current BD of the month]\u003e2, CurrentMonthNumber, PreviousMonthNumber)return  CALCULATE(Max(\u0027ProRate Dim\u0027[Target]), USERELATIONSHIP(\u0027DTRB_PERF_DATES\u0027[Current Month],\u0027ProRate Dim\u0027[Month]), \u0027ProRate Dim\u0027[Month] = MonthForGoal)","columnType":"Calculated"},{"name":"Adopting Advisor Filter","dataType":"String","isHidden":false,"expression":"  var _calc = IF(\u0027Producer_Snowflake\u0027[RULE FA] = 'Y', 'Adopting','Not Adopting')RETURNIF(ISBLANK(_calc),'Not Adopting', _calc)","columnType":"Calculated"},{"name":"Advisor Group Full Desc","dataType":"String","isHidden":false,"expression":"'Advisor Group: ' \u0026 Producer_Snowflake[Advisor Group] ","columnType":"Calculated"},{"name":"Field Recognition","dataType":"String","isHidden":false,"expression":"  var _ind = IF(\u0027Producer_Snowflake\u0027[JOB_TYP_CDE] in {'002000','002010','002025','002026','003100','003500'} \u0026\u0026 \u0027Producer_Snowflake\u0027[TENURE_GROUP] in {'Associate Rep','NFA1','NFA2','NFA3','NFA4'}, 'Yes', 'No')ReturnIF(ISBLANK(_ind),'No',_ind)","columnType":"Calculated"},{"name":"Job Code Description","dataType":"String","isHidden":false,"expression":"\u0027Producer_Snowflake\u0027[JOB_TYP_CDE] \u0026 ' - ' \u0026 \u0027Producer_Snowflake\u0027[JOB_TYP_DSCR]","columnType":"Calculated"},{"name":"Market Full Desc","dataType":"String","isHidden":false,"expression":"'Market: ' \u0026 Producer_Snowflake[Market] ","columnType":"Calculated"},{"name":"Ranking Advisor","dataType":"String","isHidden":false,"expression":"  IF(\u0027Producer_Snowflake\u0027[MARKET_LEADERS] \u003c\u003e 'Vacant' \u0026\u0026                        \u0027Producer_Snowflake\u0027[MARKET_NUMBER] IN {'01','02','03','04','05','06','07','08','09','10','11','12','13','14','15','16','17','18','19'},1,0)","columnType":"Calculated"},{"name":"RULE FA AIP","dataType":"String","isHidden":false,"expression":"--No Prorate included in the calculation  var _adoptHHLD = \u0027Producer_Snowflake\u0027[Adopted Households]  var _rulechk = IF(_adoptHHLD \u003e= \u0027Producer_Snowflake\u0027[Advice Target], 'Y', 'N')RETURNIF(ISBLANK(_rulechk),'N',_rulechk)","columnType":"Calculated"},{"name":"Tenure Group Filter Sort","dataType":"String","isHidden":false,"expression":"RELATED((\u0027Tenure Group Sort\u0027[Sort Order]))","columnType":"Calculated"},{"name":"Total Adopted HHLDS Filter Sort","dataType":"String","isHidden":false,"expression":"RELATED((\u0027Adopted HHLD Filter Sort\u0027[Sort Order]))","columnType":"Calculated"},{"name":"Total Adopted Households Filter","dataType":"String","isHidden":false,"expression":"  SWITCH(       TRUE(),      \u0027Producer_Snowflake\u0027[Adopted Households] = 0, '0',      \u0027Producer_Snowflake\u0027[Adopted Households] = 1, '1',      \u0027Producer_Snowflake\u0027[Adopted Households] = 2, '2',      \u0027Producer_Snowflake\u0027[Adopted Households] = 3, '3',      \u0027Producer_Snowflake\u0027[Adopted Households] = 4, '4',      \u0027Producer_Snowflake\u0027[Adopted Households] = 5, '5',      \u0027Producer_Snowflake\u0027[Adopted Households] = 6, '6',      \u0027Producer_Snowflake\u0027[Adopted Households] = 7, '7',      \u0027Producer_Snowflake\u0027[Adopted Households] = 8, '8',      \u0027Producer_Snowflake\u0027[Adopted Households] = 9, '9',      \u0027Producer_Snowflake\u0027[Adopted Households] = 10, '10',      \u0027Producer_Snowflake\u0027[Adopted Households] = 11, '11',      \u0027Producer_Snowflake\u0027[Adopted Households] = 12, '12',      \u0027Producer_Snowflake\u0027[Adopted Households] = 13, '13',      \u0027Producer_Snowflake\u0027[Adopted Households] = 14, '14',      \u0027Producer_Snowflake\u0027[Adopted Households] = 15, '15',      \u0027Producer_Snowflake\u0027[Adopted Households] = 16, '16',      \u0027Producer_Snowflake\u0027[Adopted Households] = 17, '17',      \u0027Producer_Snowflake\u0027[Adopted Households] = 18, '18',      \u0027Producer_Snowflake\u0027[Adopted Households] = 19, '19',      \u0027Producer_Snowflake\u0027[Adopted Households] = 20, '20',      \u0027Producer_Snowflake\u0027[Adopted Households] = 21, '21',      \u0027Producer_Snowflake\u0027[Adopted Households] = 22, '22',      \u0027Producer_Snowflake\u0027[Adopted Households] = 23, '23',      \u0027Producer_Snowflake\u0027[Adopted Households] \u003e 24, '24+')","columnType":"Calculated"},{"name":"Sort","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"rule fa binary","dataType":"String","isHidden":false,"expression":"if(\u0027Producer_Snowflake\u0027[RULE FA]='Y',1,0)","columnType":"Calculated"},{"name":"Market Developer","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Advisor Group Shortened","dataType":"String","isHidden":false,"expression":"SWITCH(\u0027Producer_Snowflake\u0027[Advisor Group],'0115-Northeast Advisor Group', '0115-Northeast','0190-Southeast Advisor Group', '0190-Southeast','0283-North Star Advisor Group', '0283-North Star','0291-Heartland Advisor Group', '0291-Heartland','0361-Great Lakes Advisor Group', '0361-Great Lakes','0384-South Central Advisor Group', '0384-South Central','0435-Midwest Rockies Advisor Group', '0435-Midwest Rockies','0525-West Advisor Group', '0525-West','0383-Virtual Advice Team','0383-Virtual Advice','0714-Newman Sales Comp','0714-Strategic Partners','0716-Thrivent Advisor Network','0716-TAN',\u0027Producer_Snowflake\u0027[Advisor Group])","columnType":"Calculated"},{"name":"Prod Risk Client Households","dataType":"String","isHidden":false,"expression":"  var _total = Calculate(DISTINCTCOUNT(Client_HHLD[SF_HH_ID]),                        Client_HHLD[SF_HH_ID] \u003c\u003e  BLANK(), Client_HHLD[CLNT_AGE_TYP]= 'Client' ,                        Client_HHLD[Product Risk] = 1)Return  IF(ISBLANK(_total),0,_total)  ","columnType":"Calculated"},{"name":"Prod Accum Client Households","dataType":"String","isHidden":false,"expression":"  var _total = Calculate(DISTINCTCOUNT(Client_HHLD[SF_HH_ID]),                        Client_HHLD[SF_HH_ID] \u003c\u003e  BLANK(), Client_HHLD[CLNT_AGE_TYP]= 'Client' ,                        Client_HHLD[Product Accum] = 1)Return  IF(ISBLANK(_total),0,_total) ","columnType":"Calculated"},{"name":"Prod Both Risk \u0026 Accum Client Households","dataType":"String","isHidden":false,"expression":"  var _total = Calculate(DISTINCTCOUNT(Client_HHLD[SF_HH_ID]),                        Client_HHLD[SF_HH_ID] \u003c\u003e  BLANK(), Client_HHLD[CLNT_AGE_TYP]= 'Client' ,                        Client_HHLD[Product Risk and Accum] = 1)Return  IF(ISBLANK(_total),0,_total) ","columnType":"Calculated"},{"name":"Adopted Households CEO","dataType":"String","isHidden":false,"expression":"  var _total = Calculate(DISTINCTCOUNT(Client_HHLD[SF_HH_ID]),                        Client_HHLD[SF_HH_ID] \u003c\u003e BLANK(), Client_HHLD[Client Description]= 'Client' || Client_HHLD[Client Description] = 'New Client',                        Client_HHLD[Adoption CEO] = 1)Return  IF(ISBLANK(_total),0,_total)  ","columnType":"Calculated"},{"name":"Adopted Households CEO with Risk \u0026 Accum","dataType":"String","isHidden":false,"expression":"  var _total = Calculate(DISTINCTCOUNT(Client_HHLD[SF_HH_ID]),                        Client_HHLD[SF_HH_ID] \u003c\u003e BLANK(), Client_HHLD[Client Description]= 'Client' || Client_HHLD[Client Description] = 'New Client',                        Client_HHLD[Adoption CEO] = 1,Client_HHLD[Product Risk and Accum]=1)Return  IF(ISBLANK(_total),0,_total)  ","columnType":"Calculated"},{"name":"Adopted Households with Risk \u0026 Accum","dataType":"String","isHidden":false,"expression":"  var _total = Calculate(DISTINCTCOUNT(Client_HHLD[SF_HH_ID]),                        Client_HHLD[SF_HH_ID] \u003c\u003e BLANK(), Client_HHLD[Client Description]= 'Client' || Client_HHLD[Client Description] = 'New Client',                        Client_HHLD[Adoption] = 1,Client_HHLD[Product Risk and Accum]=1)Return  IF(ISBLANK(_total),0,_total)  ","columnType":"Calculated"}],"measures":[{"name":"Advice Target Display","expression":"VAR CurrentMonthNumber= IF(MONTH(TODAY())=1,12,MONTH(TODAY()))VAR PreviousMonthNumber= IF(MONTH(TODAY())=1,12,MONTH(TODAY())-1) VAR MonthForGoal= IF(DTRB_PERF_DATES[Current BD of the month]\u003e2, CurrentMonthNumber, PreviousMonthNumber)var _total = CALCULATE(Max(\u0027ProRate Dim\u0027[Target]), USERELATIONSHIP(\u0027DTRB_PERF_DATES\u0027[Current Month],\u0027ProRate Dim\u0027[Month]), \u0027ProRate Dim\u0027[Month] = MonthForGoal)RETURNIF(ISBLANK(_total),_total,_total)","isHidden":false},{"name":"AdvisorGroupFiltered","expression":"IF(ISFILTERED(Producer_Snowflake[Advisor Group Shortened]),1,0)","isHidden":false},{"name":"DisplayFilteredTAGInfo","expression":"VAR __DISTINCT_VALUES_COUNT1 = DISTINCTCOUNT(\u0027Producer_Snowflake\u0027[Advisor Group Shortened])VAR __MAX_VALUES_TO_SHOW = 1var __DISTINCT_VALUES_COUNT = IF(__DISTINCT_VALUES_COUNT1 = BLANK(), 0, __DISTINCT_VALUES_COUNT1)RETURN    IF(        __DISTINCT_VALUES_COUNT \u003c __MAX_VALUES_TO_SHOW,        ' ',        CONCATENATEX(            VALUES(\u0027Producer_Snowflake\u0027[Advisor Group Shortened]),            \u0027Producer_Snowflake\u0027[Advisor Group Shortened],            ', ',            \u0027Producer_Snowflake\u0027[Advisor Group Shortened],            ASC        )    ) ","isHidden":false},{"name":"Minus Sign","expression":"UNICHAR(9473)","isHidden":false},{"name":"see details","expression":"IF (SELECTEDVALUE ( Producer_Snowflake[Advisor Group Shortened] ) = '','Click on Advisor Group, Market or Advisor in table to see Details','See Details for ' \u0026 SELECTEDVALUE (Producer_Snowflake[Advisor Group Shortened]))","isHidden":false}],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'select distinct b.''Sales Hierarchy Dimension Surrogate Key'' as SALE_HIER_DIM_SK,#(lf)       a.''Workforce Dimension Detail Surrogate Key'' as EMP_DIM_SK,#(lf)       a.''Employee Identifier'' as EMP_ID,#(lf)       b.''Sales Hierarchy Identifier'' as SALE_HIER_ID,#(lf)       case when a.''Employee Name'' = \u0027Johnson,Christopher\u0027 then a.''Last Name''||\u0027,\u0027||a.''Nick Name''#(lf)            when a.''Employee Name'' = \u0027Parker,David\u0027 and a.''Employee Identifier'' = \u0027TS83655\u0027 then a.''Last Name''||\u0027,\u0027||a.''First Name''||\u0027 C.\u0027#(lf)            when a.''Employee Identifier'' = \u0027TS54638\u0027 then a.''Last Name''||\u0027,\u0027||a.''Nick Name''#(lf)            when a.''Employee Identifier'' = \u0027TS11184\u0027 then a.''Last Name''||\u0027,\u0027||a.''Nick Name''#(lf)            when a.''Employee Identifier'' = \u0027TS80048\u0027 then a.''Last Name''||\u0027,\u0027||a.''Nick Name''#(lf)         else a.''Employee Name''#(lf)       end as EMP_NM,   #(lf)       aa.''Job Type Code'' as JOB_TYP_CDE,#(lf)       aa.''Job Type Description'' as JOB_TYP_DSCR,#(lf)       case when a.''Organization Department Code'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027) then \u00270383\u0027#(lf)         else a.''Organization Department Code''#(lf)       end as TAG,#(lf)       case when aa.''Department Identifier'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027) then \u0027Virtual Advice\u0027#(lf)         else aa.''Department Name''#(lf)       end as ''TAG Name'',#(lf)       case when aa.''Department Identifier'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027) then \u00270383-Virtual Advice\u0027#(lf)         else a.''Organization Department Code''||\u0027-\u0027||aa.''Department Name''#(lf)       end as ''Advisor Group'',#(lf)       (substr(b.''Organization Zone Code'',6,2))   AS ZONE,#(lf)       b.''Organization Zone Code'' as Market,#(lf)       case when substr(b.''Organization Zone Code'',9,2) = \u002798\u0027 then \u0027NPG - market 98\u0027#(lf)            when substr(b.''Organization Zone Code'',9,2) = \u002799\u0027 then \u0027NPG - market 99\u0027#(lf)            when substr(b.''Organization Zone Code'',9,2) = \u002759\u0027 then \u0027PMC - market 59\u0027#(lf)            when substr(b.''Organization Zone Code'',9,2) = \u002701\u0027 then \u0027PMC - market 01\u0027#(lf)            when substr(b.''Organization Zone Code'',9,2) = \u002769\u0027 then \u0027GPA - market 69\u0027#(lf)            when Substr(b.''Organization Zone Code'',9,2) = \u002779\u0027 then \u0027GPD - market 79\u0027#(lf)            when substr(b.''Organization Zone Code'',9,2) = \u002789\u0027 then \u0027PPC - market 89\u0027#(lf)       end as Filter_Ind,  #(lf)       substr(b.''Organization Zone Code'',9,2) as Market_Number,               #(lf)       zz4.market_leaders,#(lf)       c.''Sub Department Identifier'' as MVP_ID,#(lf)       zz3.''MVP Leader'', #(lf)       a.''Adjusted Service Date'' as ''Adjusted_Service_Date'',#(lf)       case when c.''Financial Professional Tenure'' \u003c 0 then #(lf)                 (datediff(\u0027days\u0027, a.''Employee Service Date'',current_date())/365.25) #(lf)           else c.''Financial Professional Tenure''#(lf)       end as Tenure1,#(lf)       case when a.''Organization Department Code'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00270383\u0027) then \u0027VET5\u0027#(lf)         else c.''Financial Professional Tenure Group''#(lf)       end as ''Financial Professional Tenure Group1'',   #(lf)       case when a.''Senior Financial Consultant Indicator'' = \u0027Y\u0027 then \u0027SFC\u0027#(lf)#(tab)    when a.''Financial Consultant Indicator'' = \u0027Y\u0027 then \u0027FC\u0027#(lf)#(tab)    when a.''Wealth Advisor Indicator'' = \u0027Y\u0027 then \u0027WA\u0027#(lf)       end as SFC_FC,#(lf)       (case when a.''Senior Financial Consultant Indicator'' = \u0027Y\u0027 then \u0027SFC\u0027#(lf)             when a.''Financial Consultant Indicator'' = \u0027Y\u0027 then \u0027FC\u0027#(lf)             when a.''Wealth Advisor Indicator'' = \u0027Y\u0027 then \u0027WA\u0027#(lf)             when a.''Job Type Code'' in (\u0027002003\u0027,\u0027002018\u0027,\u0027002019\u0027) then A.''Job Type Description''#(lf)             when a.''Job Type Code'' = \u0027002016\u0027 then a.''Job Type Description''#(lf)             when ((a.''Senior Financial Consultant Indicator'' = \u0027N\u0027 or a.''Financial Consultant Indicator'' = \u0027N\u0027) and #(lf)                    c.''Financial Professional Tenure'' \u003e= 4 and #(lf)                    a.''Job Type Code'' in (\u0027002000\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027003602\u0027,\u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027))#(lf)                      then \u0027VETFR\u0027#(lf)             when c.''Financial Professional Tenure'' \u003e= 3 and c.''Financial Professional Tenure'' \u003c 4  and   #(lf)                  a.''Job Type Code'' in (\u0027002000\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027003602\u0027,\u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027)#(lf)                      then \u0027NFA4\u0027#(lf)             when c.''Financial Professional Tenure'' \u003e= 2 and c.''Financial Professional Tenure'' \u003c 3  and   #(lf)                  a.''Job Type Code'' in (\u0027002000\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027003602\u0027,\u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027)#(lf)                      then \u0027NFA3\u0027#(lf)             when c.''Financial Professional Tenure'' \u003e= 1 and c.''Financial Professional Tenure'' \u003c 2  and   #(lf)                  a.''Job Type Code'' in (\u0027002000\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027003602\u0027,\u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027)#(lf)                      then \u0027NFA2\u0027 #(lf)             when c.''Financial Professional Tenure'' \u003e= 0 and c.''Financial Professional Tenure'' \u003c 1  and   #(lf)                  a.''Job Type Code'' in (\u0027002000\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027003602\u0027,\u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027)#(lf)                      then \u0027NFA1\u0027 #(lf)        end) as FR_SEGMENT1,#(lf)       a.''Last Name'' as LST_NM, #(lf)       case when a.''Nick Name'' IN (\u0027 \u0027) then a.''First Name''#(lf)         else a.''Nick Name''#(lf)       end as FRST_NM, #(lf)       a.''Middle Name'' as MDDL_NM,#(lf)       zzz.''Team Identifier'',#(lf)       zzz.''Team Name'',#(lf)       zzz.''Team Purpose Code''#(lf)       #(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' a inner join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' as aa#(lf)    on (a.''Employee Identifier''=aa.''Source System Key Text'' and aa.''Current Row Indicator'' = \u0027Y\u0027)  left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' b #(lf)    on (a.''Employee Identifier''= b.''Sales Hierarchy Identifier'') left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' c  #(lf)    on (a.''Employee Identifier''= c.''Source System Key Text'' AND c.''Current Row Indicator'' = \u0027Y\u0027) left join#(lf)      ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' cc #(lf)    on (c.''Report to ID''= cc.''Source System Key Text'' AND cc.''Current Row Indicator'' = \u0027Y\u0027) left join  #(lf)        (select distinct a2.''Organization Department Code'' as RFO_CDE,#(lf)                        a2.''Organization Sub Department Code'' as MVP_ID,#(lf)                        cc.''Organization Department Description'',#(lf)                        case when cc.''Employee Name'' is null then \u0027Vacant\u0027#(lf)                          else cc.''Employee Name''#(lf)                        end as ''MVP Leader''    #(lf)          from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' a2  left join#(lf)               (Select Distinct aa.''Organization Sub Department Code'',#(lf)                                aa.''Organization Department Description'',#(lf)                                bb.''Employee Identifier'',#(lf)                                bb.''Employee Name'' #(lf)                  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' as aa left join#(lf)                       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' as bb#(lf)                    on aa.''Sales Hierarchy Identifier''=bb.''Employee Identifier''  #(lf)                 where aa.''Current Row Indicator'' = \u0027Y\u0027#(lf)                   and bb.''Employee Status Type Code'' = \u0027A\u0027#(lf)                   and bb.''Current Row Indicator'' = \u0027Y\u0027#(lf)                   and aa.''Effective End Date'' = \u00279999-12-31\u0027#(lf)                   and bb.''Job Type Code'' = \u0027001001\u0027#(lf)                 order by aa.''Organization Sub Department Code'') cc#(lf)             on a2.''Organization Sub Department Code''=cc.''Organization Sub Department Code''  #(lf)          where a2.''Current Row Indicator'' = \u0027Y\u0027#(lf)            and a2.''Effective End Date'' = \u00279999-12-31\u0027#(lf)            and a2.''Organization Zone Code'' \u003c\u003e \u0027UKWN\u0027#(lf)           order by a2.''Organization Sub Department Code''  ) as zz3#(lf)  on c.''Sub Department Identifier''= zz3.''MVP_ID'' left join#(lf)   #(lf)    #(lf)     (SELECT DISTINCT a4.''Organization Department Code'' as RFO_CDE,#(lf)                      a4.''Organization Zone Code'' as TAG_ZONE_NM, #(lf)                      (substring(a4.''Organization Zone Code'',6,5)) as Market_ID,#(lf)                      case when t4.''Employee Name'' is null then \u0027Vacant\u0027#(lf)                        else t4.''Employee Name''#(lf)                      end as Market_Leaders#(lf)#(lf)        from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' a4 left join #(lf)             (select distinct aa4.''Organization Zone Code'',#(lf)                              bb4.''Employee Name''  #(lf)#(lf)                from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' aa4 left join #(lf)                     ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' bb4#(lf)                  on aa4.''Sales Hierarchy Identifier''=bb4.''Employee Identifier''#(lf)               where aa4.''Current Row Indicator'' = \u0027Y\u0027      #(lf)                 and bb4.''Employee Status Type Code'' in (\u0027A\u0027)#(lf)                 and aa4.''Effective End Date'' = \u00279999-12-31\u0027#(lf)                 and bb4.''Current Row Indicator'' = \u0027Y\u0027#(lf)                 and aa4.''Effective End Date'' = \u00279999-12-31\u0027#(lf)                 and (bb4.''Job Type Code'' in (\u0027001002\u0027,\u0027001003\u0027,\u0027001007\u0027) or #(lf)                      bb4.''Employee Identifier'' in (\u0027TS60295\u0027,\u0027TS49431\u0027,\u0027TS22024\u0027,\u0027TS26677\u0027))#(lf)                 and bb4.''Employee Identifier'' not in (\u0027TS62904\u0027,\u0027TS67022\u0027,\u0027TS74827\u0027,\u0027TS73067\u0027,\u0027TS77319\u0027,\u0027TS73124\u0027)) t4#(lf)          on a4.''Organization Zone Code'' = t4.''Organization Zone Code''#(lf)       where a4.''Current Row Indicator'' = \u0027Y\u0027#(lf)         and a4.''Effective End Date'' = \u00279999-12-31\u0027#(lf)         and substring(a4.''Organization Zone Code'',6,2) \u003c\u003e \u002700\u0027#(lf)         and a4.''Organization Department Code'' \u003c\u003e \u0027UKWN\u0027#(lf)       order by a4.''Organization Zone Code'') zz4#(lf)     #(lf)   on  b.''Organization Zone Code''= zz4.''TAG_ZONE_NM''  left join #(lf)  #(lf)(select a.''Employee Identifier'',#(lf)        b.''Team Identifier'',#(lf)        b.''Team Name'',#(lf)        b.''Team Purpose Code'',#(lf)        A.''Effective Date''#(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Employee Team Organization Relationship Current Dimension''  a inner join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Team Organization Current Dimension'' b#(lf)    on (a.''Team Identifier Surrogate Key'' = b.''Team Identifier Surrogate Key'')  inner join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' c#(lf)    on (a.''Employee Identifier'' = c.''Employee Identifier'')   #(lf)    #(lf) where b.''Effective Status Code'' = \u0027A\u0027#(lf)   and c.''Employee Status Type Code'' = \u0027A\u0027#(lf)   and c.''Current Row Indicator'' = \u0027Y\u0027#(lf)   and a.''Team Member Action Code'' \u003c\u003e \u0027DROP\u0027#(lf)   and b.''Team Purpose Code'' NOT in (\u0027COAC\u0027,\u0027ENSB\u0027,\u0027MKTG\u0027,\u0027ASSC\u0027) #(lf)   and a.''Effective Date'' = (SELECT MAX(aa.''Effective Date'')#(lf)                                FROM ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Employee Team Organization Relationship Current Dimension''  aa inner join#(lf)                                     ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Team Organization Current Dimension'' bb#(lf)                                  on (aa.''Team Identifier Surrogate Key'' = bb.''Team Identifier Surrogate Key'' and a.''Employee Identifier''= aa.''Employee Identifier'') INNER JOIN#(lf)                                     ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' cc#(lf)                                  on (aa.''Employee Identifier''= cc.''Employee Identifier'')#(lf)#(tab)                           WHERE bb.''Effective Status Code'' = \u0027A\u0027#(lf)                                 AND cc.''Employee Status Type Code'' = \u0027A\u0027  #(lf)                                 and cc.''Current Row Indicator'' = \u0027Y\u0027#(lf)                                 and aa.''Team Member Action Code'' \u003c\u003e \u0027DROP\u0027#(lf)                                 and bb.''Team Purpose Code'' NOT in (\u0027COAC\u0027,\u0027ENSB\u0027,\u0027MKTG\u0027,\u0027ASSC\u0027) #(lf)                                )#(lf)  order by a.''Employee Identifier'') as zzz#(lf)  #(lf)   on a.''Employee Identifier'' = zzz.''Employee Identifier''  #(lf)  #(lf) where a.''Employee Status Type Code'' IN (\u0027A\u0027)#(lf)   and (c.''Job Family Code'' LIKE \u0027FLD%\u0027 OR#(lf)        c.''Job Family Code'' =\u0027SALES\u0027 OR#(lf)        c.''TF Job Class Code'' =\u0027FAC\u0027)#(lf)   and a.''Termination Date'' is NULL #(lf)   and (a.''Job Type Code'' in (\u0027002000\u0027,\u0027002010\u0027,\u0027002003\u0027,\u0027002011\u0027,\u0027002012\u0027,\u0027003100\u0027,\u0027002017\u0027,#(lf)                       \u0027002020\u0027,\u0027002021\u0027,\u0027002018\u0027,\u0027002019\u0027,\u0027003500\u0027,\u0027002022\u0027,\u0027002024\u0027,#(lf)                       \u0027002025\u0027,\u0027002026\u0027,\u0027002027\u0027,\u0027002030\u0027,\u0027002031\u0027,\u0027002032\u0027) or#(lf)        a.''Organization Department Code'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027)#(lf)    and a.''Job Type Code'' not in (\u00271356\u0027,\u00271658\u0027,\u00272598\u0027,\u00273458\u0027,\u00276160\u0027)) #(lf)#(lf)   and b.''Effective End Date'' = \u00279999-12-31\u0027 #(lf)   and b.''Current Row Indicator'' = \u0027Y\u0027 #(lf)   and a.''Current Row Indicator'' = \u0027Y\u0027 #(lf)order by a.''Employee Identifier''', null, [EnableFolding=true]),    #'Merged Queries1' = Table.NestedJoin(Source, {'EMP_ID'}, #'Capacity Detail', {'TSID'}, 'Capacity Detail', JoinKind.LeftOuter),    #'Expanded Capacity Detail' = Table.ExpandTableColumn(#'Merged Queries1', 'Capacity Detail', {'Adjusted Service Date with BI', 'Tenure_BI', 'Tenure Group_BI', 'Tenure Year_BI'}, {'Adjusted Service Date with BI', 'Tenure_BI', 'Tenure Group_BI', 'Tenure Year_BI'}),    #'Added Custom3' = Table.AddColumn(#'Expanded Capacity Detail', 'Adjusted Service Date', each if [Adjusted Service Date with BI] \u003c\u003e null and [Adjusted Service Date with BI] \u003e [Adjusted_Service_Date] then [Adjusted Service Date with BI]  else [Adjusted_Service_Date]),    #'Added Custom4' = Table.AddColumn(#'Added Custom3', 'TENURE', each if [Tenure_BI] \u003c\u003e null and [Tenure_BI] \u003e [TENURE1] then [Tenure_BI] else [TENURE1]),    #'Added Custom' = Table.AddColumn(#'Added Custom4', 'Financial Professional Tenure Group', each if[Tenure Year_BI] \u003c\u003e null and [Tenure Year_BI] \u003c\u003e [Financial Professional Tenure Group1] then [Tenure Year_BI]  else[Financial Professional Tenure Group1]),    #'Added Custom1' = Table.AddColumn(#'Added Custom', 'FR_Segment', each if[Tenure Group_BI] \u003c\u003e null and [Tenure Group_BI] \u003c\u003e [FR_SEGMENT1] then [Tenure Group_BI]  else [FR_SEGMENT1]),    #'Replaced Value' = Table.ReplaceValue(#'Added Custom1',null,' ',Replacer.ReplaceValue,{'FR_Segment'}),    #'Removed Columns' = Table.RemoveColumns(#'Replaced Value',{'Adjusted_Service_Date', 'TENURE1', 'Financial Professional Tenure Group1', 'FR_SEGMENT1', 'Adjusted Service Date with BI', 'Tenure_BI', 'Tenure Group_BI', 'Tenure Year_BI'}),    #'Filtered Rows1' = Table.SelectRows(#'Removed Columns', each true),    Custom1 = Table.AddColumn(#'Filtered Rows1', 'TENURE_GROUP', each if[Financial Professional Tenure Group] = 'NFR1' and    [JOB_TYP_CDE] = '002010' then 'Associate Rep' else if[JOB_TYP_CDE] = '002022' then 'TSL' else [Financial Professional Tenure Group]),    Custom2 = Table.AddColumn(#'Custom1', 'Market with Leader', each [MARKET]\u0026' - '\u0026[MARKET_LEADERS]),    Custom3 = Table.AddColumn(#'Custom2', 'MVP with Leader', each [MVP_ID] \u0026 ' - ' \u0026 [MVP Leader]),    #'Removed Duplicates' = Table.Distinct(Custom3, {'SALE_HIER_DIM_SK'}),    Custom4 = Table.NestedJoin(#'Removed Duplicates', {'FILTER_IND'}, #'Experience Advisor Sort', {'Filter_Ind'}, 'Experience Advisor Sort', JoinKind.LeftOuter),    #'Expanded Experience Advisor Sort' = Table.ExpandTableColumn(Custom4, 'Experience Advisor Sort', {'Sort'}, {'Sort'}),    Custom5 = Table.RenameColumns(#'Expanded Experience Advisor Sort',{{'EMP_NM', 'Advisor Name'}, {'MARKET', 'Market'}}),    Custom6 = Table.ReplaceValue(#'Custom5','NFR','NFA',Replacer.ReplaceText,{'TENURE_GROUP'}),    Custom7 = Table.AddColumn(#'Custom6', 'TSL/Assoc Rep', each if [JOB_TYP_CDE] = '002022' then '002022 - TSL' else if [JOB_TYP_CDE] = '002010' then '002010 - Associate Rep' else ''),    Custom8 = Table.AddColumn(#'Custom7', 'Team Purpose Description', each if[Team Purpose Code] = 'PBP' then 'Professional'   else if [Team Purpose Code] = 'PBPS' then 'Professional'   else if [Team Purpose Code] = 'FRML' then 'Formal'  else if [Team Purpose Code] = 'FRMS' then 'Formal'  else if [Team Purpose Code] = 'ASSC' then 'Association'  else if [Team Purpose Code] = 'SOLO' then 'Solo'  else ' '),    #'Filtered Rows' = Table.SelectRows(Custom8, each ([TAG] \u003c\u003e '0716')),    #'Merged Queries' = Table.NestedJoin(#'Filtered Rows', {'EMP_ID'}, RDL_Data, {'CORP_EMP_ID_CDE'}, 'RDL_Data', JoinKind.LeftOuter),    #'Expanded RDL_Data' = Table.ExpandTableColumn(#'Merged Queries', 'RDL_Data', {'RDL NAME'}, {'RDL_Data.RDL NAME'}),    #'Renamed Columns' = Table.RenameColumns(#'Expanded RDL_Data',{{'RDL_Data.RDL NAME', 'Market Developer'}})in    #'Renamed Columns'"}]},{"name":"Dedicated Planning","isHidden":false,"storageMode":"Import","columns":[{"name":"BEN_CTRC_NBR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ACL_DLIV_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"SF_HH_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Ded Planning Ind","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Ded Planning Binary","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Total Written Recommendations","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CUST_ID_NBR","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = DB2.Database('PODWH021:50000', 'PODWH021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='WITH CTE AS (#(lf)SELECT *, LAG(ACL_DLIV_DT) OVER (#(lf)    PARTITION BY BEN_CTRC_NBR #(lf)    ORDER BY LST_UPDT_TMSP, BEN_CTRC_NBR) AS ''PREV_DLIV_DT''#(lf)FROM #(lf)#(lf)(SELECT BEN_CTRC_NBR, #(lf)        BEN_CTRC_TYP_CDE, #(lf)        SVC_AGMT_STS_CDE, #(lf)        SVC_AGMT_TYP_CDE,#(lf)        SVC_AGMT_PLAN_YR,#(lf)        SVC_AGMT_ANV_DT,#(lf)        ACL_DLIV_DT, #(lf)        REPR_RCD_ID, #(lf)        APP_DT, #(lf)        BEG_TMSP, #(lf)        LST_UPDT_TMSP, #(lf)        RCD_STS_CDE, #(lf)        ROW_NUMBER() OVER (PARTITION BY BEN_CTRC_NBR   ORDER BY BEN_CTRC_NBR, ACL_DLIV_DT desc) AS rn#(lf)   FROM CONTRACT.SVC_AGMT_HST #(lf)  WHERE YEAR(ACL_DLIV_DT) \u003e= \u00272017\u0027#(lf)    AND BEN_CTRC_TYP_CDE = \u0027SA2\u0027#(lf)    AND SVC_AGMT_STS_CDE IN (\u00272\u0027,\u0027X\u0027,\u0027C\u0027,\u0027P\u0027,\u00276\u0027,\u00279\u0027,\u00275\u0027,\u0027A\u0027)#(lf)    AND ACL_DLIV_DT IS NOT NULL#(lf)#(lf)UNION ALL #(lf)#(lf)SELECT BEN_CTRC_NBR, #(lf)       BEN_CTRC_TYP_CDE, #(lf)       SVC_AGMT_STS_CDE,#(lf)       SVC_AGMT_TYP_CDE, #(lf)       SVC_AGMT_PLAN_YR,#(lf)       SVC_AGMT_ANV_DT, #(lf)       ACL_DLIV_DT, #(lf)       REPR_RCD_ID,#(lf)       APP_DT, #(lf)       BEG_TMSP, #(lf)       LST_UPDT_TMSP, #(lf)       RCD_STS_CDE, #(lf)       ROW_NUMBER() OVER (PARTITION BY BEN_CTRC_NBR   ORDER BY BEN_CTRC_NBR, ACL_DLIV_DT desc) AS rn#(lf)#(lf)  FROM CONTRACT.SVC_AGMT #(lf)#(lf))#(lf)WHERE BEN_CTRC_TYP_CDE = \u0027SA2\u0027#(lf) AND SVC_AGMT_STS_CDE IN (\u00272\u0027,\u0027X\u0027,\u0027C\u0027,\u0027P\u0027,\u00276\u0027,\u00279\u0027,\u00275\u0027,\u0027A\u0027)#(lf) #(lf)#(lf)ORDER BY BEN_CTRC_NBR #(lf)#(lf))#(lf)SELECT DISTINCT A.BEN_CTRC_NBR,#(lf)       A.SVC_AGMT_STS_CDE,#(lf)       A.SVC_AGMT_TYP_CDE,#(lf)       A.SVC_AGMT_PLAN_YR,#(lf)       A.SVC_AGMT_ANV_DT,#(lf)       A.ACL_DLIV_DT,#(lf)       CASE WHEN A.ACL_DLIV_DT IS NULL AND A.PREV_DLIV_DT IS NOT NULL THEN A.PREV_DLIV_DT#(lf)          ELSE A.ACL_DLIV_DT#(lf)       END AS ACL_DLIV_DTxx,   #(lf)       A.REPR_RCD_ID AS PRIMARY_EMPID,#(lf)       A.RCD_STS_CDE,#(lf)       A.PREV_DLIV_DT,#(lf)       B.CUST_ID_NBR,#(lf)       B.PRIM_IND,#(lf)       A.RN#(lf)  FROM CTE A LEFT JOIN#(lf)       CONTRACT.SVC_AGMT_CUST_RLTN B#(lf)    ON A.BEN_CTRC_NBR = B.BEN_CTRC_NBR #(lf) WHERE A.RN=1 AND A.RCD_STS_CDE = \u0027A\u0027#(lf)   AND B.RCD_STS_CDE =\u0027A\u0027#(lf)      AND (A.PREV_DLIV_DT IS NOT NULL OR ACL_DLIV_DT IS NOT NULL)#(lf)   AND (YEAR(A.PREV_DLIV_DT) \u003e= 2017 or YEAR(A.ACL_DLIV_DT) \u003e= 2017)']),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'ACL_DLIV_DT', type date}}),    #'Remove all extra columns' = Table.RemoveColumns(#'Changed Type',{'SVC_AGMT_STS_CDE', 'ACL_DLIV_DT', 'PRIMARY_EMPID', 'RCD_STS_CDE', 'PREV_DLIV_DT', 'SVC_AGMT_PLAN_YR', 'SVC_AGMT_ANV_DT', 'PRIM_IND', 'RN'}),    #'Changed Type2' = Table.TransformColumnTypes(#'Remove all extra columns',{{'ACL_DLIV_DTXX', type date}}),    #'Added Custom' = Table.AddColumn(#'Changed Type2', 'Written Recommendation Indicator', each if([ACL_DLIV_DTXX] is date)then 'Y' else 'N'),    #'Changed Type1' = Table.TransformColumnTypes(#'Added Custom',{{'CUST_ID_NBR', type text}}),    #'Merged Queries' = Table.NestedJoin(#'Changed Type1', {'CUST_ID_NBR'}, Report_HHLD, {'Thrivent ID'}, 'Client_HHLD', JoinKind.LeftOuter),    #'Expanded Client_HHLD' = Table.ExpandTableColumn(#'Merged Queries', 'Client_HHLD', {'SF_HH_ID', 'Household Role'}, {'SF_HH_ID', 'Household Role'}),    #'Filtered Rows3' = Table.SelectRows(#'Expanded Client_HHLD', each [BEN_CTRC_NBR] \u003c\u003e null and [BEN_CTRC_NBR] \u003c\u003e ''),    #'Added Conditional Column1' = Table.AddColumn(#'Filtered Rows3', 'Written Recommendation Binary', each if [Written Recommendation Indicator] = 'Y' then 1 else 0),    #'Added Conditional Column2' = Table.AddColumn(#'Added Conditional Column1', 'Client Type', each if [Household Role] = 'Primary' then 1 else if [Household Role] = 'Spouse' then 2 else if [Household Role] = 'Child' then 3 else 4),    #'Grouped Rows' = Table.Group(#'Added Conditional Column2', {'SF_HH_ID'}, {{'BEN_CTRC_NBR', each List.Max([BEN_CTRC_NBR]), type text}, {'ACL_DLIV_DT', each List.Max([ACL_DLIV_DTXX]), type nullable date}, {'Written Recommentation Indicator', each List.Max([Written Recommendation Indicator]), type text}, {'Total Written Recommendations', each List.Sum([Written Recommendation Binary]), type number}, {'CUST_ID_NBR', each List.Min([CUST_ID_NBR]), type nullable text}}),    #'Added Conditional Column' = Table.AddColumn(#'Grouped Rows', 'Ded Planning Binary', each if [Written Recommentation Indicator] = 'Y' then 1 else 0),    #'Renamed Columns' = Table.RenameColumns(#'Added Conditional Column',{{'Written Recommentation Indicator', 'Ded Planning Ind'}}),    #'Removed Duplicates' = Table.Distinct(#'Renamed Columns', {'SF_HH_ID'}),    #'Trimmed Text' = Table.TransformColumns(#'Removed Duplicates',{{'SF_HH_ID', Text.Trim, type text}}),    #'Filtered Rows4' = Table.SelectRows(#'Trimmed Text', each [SF_HH_ID] \u003c\u003e null and [SF_HH_ID] \u003c\u003e '')in    #'Filtered Rows4'"}]},{"name":"Snowflake_Goals","isHidden":false,"storageMode":"Import","columns":[{"name":"GOAL_CREATE_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"GOAL_LAST_UPDATE_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"SF_HH_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"THRIVENT_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"GOAL_IDENTIFIER","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TOTAL_GOALS","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"GOALS_MORE_THAN_2_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"GOALS_MORE_THAN_2_BINARY","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_FINANCIAL_SERVICES_AGMT']}[Data], 'SELECT DISTINCT#(lf)       TO_DATE (#(lf)                 SPLIT_PART (#(lf)                              ''G''.''Create Timestamp'',#(lf)                              \u0027 \u0027,#(lf)                              1),#(lf)                 \u0027YYYY-MM-DD\u0027)#(lf)          AS ''GOAL_CREATE_DATE'',#(lf)       ''G''.''Create User Identifier'',#(lf)       ''G''.''Customer Identification Number'',#(lf)       ''G''.''Financial Plan Goal Text'',#(lf)       ''G''.''Financial Plan Goal Type Description'',#(lf)       ''G''.''Goal Identifier'',#(lf)       TO_DATE (#(lf)                 SPLIT_PART (#(lf)                              ''G''.''Last Update Timestamp'',#(lf)                              \u0027 \u0027,#(lf)                              1),#(lf)                 \u0027YYYY-MM-DD\u0027)#(lf)          AS ''GOAL_LAST_UPDATE_DATE'',#(lf)       TO_DATE (#(lf)                 SPLIT_PART (#(lf)                              ''G''.''Source Timestamp'',#(lf)                              \u0027 \u0027,#(lf)                              1),#(lf)                 \u0027YYYY-MM-DD\u0027)#(lf)          AS ''GOAL_SOURCE_TIMESTAMP'',#(lf)          CASE WHEN ''SF''.''Household Durable ID'' IS NULL #(lf)  THEN TO_CHAR(''G''.''Customer Identification Number'')#(lf)  ELSE ''SF''.''Household Durable ID''#(lf)END AS ''Household Durable ID'',#(lf)       ''PD''.''Household Number'',#(lf)       CASE WHEN ''SF''.''Household Member Role Description'' IS NULL#(lf)    THEN \u0027Primary\u0027#(lf)    ELSE ''SF''.''Household Member Role Description''#(lf)       END AS ''Household Role''#(lf)FROM #(lf)(SELECT *#(lf)  FROM(SELECT DISTINCT * FROM #(lf)''ENTERPRISE_FINANCIAL_SERVICES_AGMT''.''PRESENTATION_01''.''Client Advice Goal Confidential''#(lf)     WHERE ''Customer Identification Number'' IS NOT NULL#(lf)     #(lf) QUALIFY ROW_NUMBER() OVER (PARTITION BY ''Goal Identifier'' ORDER BY ''Last Update Timestamp'' DESC, ''Source Timestamp'' DESC)=1)) AS G#(lf) #(lf) #(lf)  LEFT JOIN ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Person Dimension'' AS PD#(lf)        ON (TRY_TO_NUMBER(PD.''Source System Key Text'') =''G''.''Customer Identification Number''#(lf)            AND PD.''Current Row Indicator'' = \u0027Y\u0027#(lf)            AND PD.''Deceased Indicator'' = \u0027N\u0027)#(lf)#(lf)    #(lf) LEFT JOIN #(lf) #(lf) (SELECT DISTINCT * FROM SALESFORCE_B2C_ODS.PRESENTATION_01.''Salesforce Dataready Customergroups Confidential''#(lf)  QUALIFY ROW_NUMBER() OVER (PARTITION BY ''Household Member Customer ID'' ORDER BY ''Last Modified Date'' DESC, ''Commit Timestamp'' DESC)=1) AS SF#(lf)  ON (SF.''Household Member Customer ID''= ''G''.''Customer Identification Number'' AND SF.''Household Member IsDeleted'' = FALSE AND SF.''IsDeleted'' = FALSE)#(lf)  #(lf)    #(lf)#(lf)WHERE ''G''.''Operation Type Code'' \u003c\u003e \u0027DELETE\u0027#(lf)AND ''G''.''Record Status Code'' \u003c\u003e \u0027D\u0027#(lf)ORDER BY ''G''.''Customer Identification Number'' ASC', null, [EnableFolding=true]),    #'Replaced Value' = Table.ReplaceValue(Source,null,#date(2023, 2, 25),Replacer.ReplaceValue,{'GOAL_LAST_UPDATE_DATE'}),    #'Changed Type' = Table.TransformColumnTypes(#'Replaced Value',{{'Customer Identification Number', type text}}),    #'Renamed Columns' = Table.RenameColumns(#'Changed Type',{{'Customer Identification Number', 'Thrivent ID'}}),    #'Filtered Rows' = Table.SelectRows(#'Renamed Columns', each [GOAL_LAST_UPDATE_DATE] \u003c\u003e null and [GOAL_LAST_UPDATE_DATE] \u003c\u003e ''),    #'Added Conditional Column' = Table.AddColumn(#'Filtered Rows', 'Goal_Count', each if [Goal Identifier] \u003c\u003e null then 1 else 0),    #'Removed Other Columns' = Table.SelectColumns(#'Added Conditional Column',{'GOAL_CREATE_DATE', 'Thrivent ID', 'Goal Identifier', 'GOAL_LAST_UPDATE_DATE', 'GOAL_SOURCE_TIMESTAMP', 'Household Durable ID', 'Household Number', 'Household Role', 'Goal_Count'}),    #'Renamed Columns1' = Table.RenameColumns(#'Removed Other Columns',{{'Household Durable ID', 'SF_HH_ID'}, {'Household Number', 'CIF_HH_ID'}}),    #'Grouped Rows' = Table.Group(#'Renamed Columns1', {'SF_HH_ID'}, {{'THRIVENT_ID', each List.Min([Thrivent ID]), type nullable text}, {'GOAL_IDENTIFIER', each List.Max([Goal Identifier]), type nullable text}, {'GOAL_CREATE_DATE', each List.Max([GOAL_CREATE_DATE]), type nullable date}, {'GOAL_LAST_UPDATE_DATE', each List.Max([GOAL_LAST_UPDATE_DATE]), type nullable date}, {'TOTAL_GOALS', each List.Sum([Goal_Count]), type number}}),    #'Added Conditional Column1' = Table.AddColumn(#'Grouped Rows', 'GOALS_MORE_THAN_2_IND', each if [TOTAL_GOALS] \u003e 1 then 'Y' else 'N'),    #'Added Conditional Column2' = Table.AddColumn(#'Added Conditional Column1', 'GOALS_MORE_THAN_2_BINARY', each if [GOALS_MORE_THAN_2_IND] = 'Y' then 1 else 0)in    #'Added Conditional Column2'"}]},{"name":"MGP_Risk","isHidden":false,"storageMode":"Import","columns":[{"name":"SF_HH_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MGP_HH_ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"THRIVENT_ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"CREATE_TIMESTAMP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"LAST_UPDATE_TIMESTAMP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TOLERANCE_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TOLERANCE_BINARY","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_FINANCIAL_SERVICES_AGMT']}[Data], 'SELECT #(lf)       ''RF''.''Financial Planning Group Identifier'',#(lf)       ''FC''.''Customer Identification Number'',#(lf)       CASE WHEN ''SF''.''Household Durable ID'' IS NULL #(lf)  THEN TO_CHAR(''FC''.''Customer Identification Number'')#(lf)  ELSE ''SF''.''Household Durable ID''#(lf)END AS ''Household Durable ID'',#(lf)       CASE WHEN ''SF''.''Household Member Role Description'' IS NULL#(lf)    THEN \u0027Primary\u0027#(lf)    ELSE ''SF''.''Household Member Role Description''#(lf)       END AS ''Household Role'',#(lf)       ''PD''.''Household Number'',#(lf)       ''RF''.''Financial Plan Collection Status Code'',#(lf)       ''RF''.''Source Create Timestamp'',#(lf)       ''RF''.''Source System Last Update Timestamp'',#(lf)       ''RF''.''Recommended Financial Plan Status Code'',#(lf)       ''RF''.''Recommended Financial Plan Status Description'',#(lf)       ''RF''.''Recommended Financial Plan Source Create Timestamp'',#(lf)       ''RF''.''Recommended Financial Plan Source System Last Update Timestamp'',#(lf)       ''RF''.''Financial Plan Household Loss Tolerance Code'',#(lf)       ''RF''.''Financial Plan Household Loss Tolerance Description'',#(lf)        TO_DATE (SUBSTRING (''RF''.''Last Update Timestamp'', 1, 10),#(lf)                \u0027YYYY-MM-DD\u0027) AS LastUpdateDate#(lf)              #(lf)                #(lf)FROM#(lf)#(lf)(SELECT *#(lf)  FROM(SELECT DISTINCT * FROM #(lf)  ''ENTERPRISE_FINANCIAL_SERVICES_AGMT''.''PRESENTATION_01''.''Recommended Financial Plan Loss Tolerance Confidential'' #(lf)   #(lf)  QUALIFY ROW_NUMBER() OVER (PARTITION BY ''Financial Planning Group Identifier'' ORDER BY ''Source System Last Update Timestamp'' DESC, ''Last Update Timestamp'' DESC   )=1)) AS RF#(lf)  #(lf)  #(lf)  #(lf)#(lf)LEFT JOIN#(lf)#(lf)(SELECT DISTINCT * FROM #(lf)  ''ENTERPRISE_FINANCIAL_SERVICES_AGMT''.''PRESENTATION_01''.''Financial Plan Client Confidential'' #(lf)  WHERE ''Customer Identification Number'' IS NOT NULL#(lf)  QUALIFY ROW_NUMBER() OVER (PARTITION BY ''Customer Identification Number''  ORDER BY ''Last Update Timestamp'' DESC)=1) AS FC#(lf)   #(lf)  ON ''FC''.''Financial Planning Group Identifier''= ''RF''.''Financial Planning Group Identifier''#(lf)#(lf)#(lf)   LEFT JOIN ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Person Dimension'' AS PD#(lf)        ON (TRY_TO_NUMBER(PD.''Source System Key Text'') =''FC''.''Customer Identification Number''#(lf)            AND PD.''Current Row Indicator'' = \u0027Y\u0027#(lf)            AND PD.''Deceased Indicator'' = \u0027N\u0027)#(lf)#(lf)    #(lf) LEFT JOIN #(lf) #(lf) (SELECT DISTINCT * FROM SALESFORCE_B2C_ODS.PRESENTATION_01.''Salesforce Dataready Customergroups Confidential''#(lf)  QUALIFY ROW_NUMBER() OVER (PARTITION BY ''Household Member Customer ID'' ORDER BY ''Last Modified Date'' DESC, ''Commit Timestamp'' DESC)=1) AS SF#(lf)  ON (SF.''Household Member Customer ID''= ''FC''.''Customer Identification Number'' AND SF.''Household Member IsDeleted'' = FALSE AND SF.''IsDeleted'' = FALSE)#(lf)  #(lf)  WHERE ''RF''.''Financial Planning Group Identifier'' IS NOT NULL#(lf)  AND ''RF''.''Recommended Financial Plan Status Code'' = \u0027A\u0027#(lf)   AND ''RF''.''Financial Plan Collection Status Code'' = \u0027A\u0027#(lf)   AND ''RF''.''Financial Plan Household Loss Tolerance Code''\u003c\u003e 0#(lf)   AND ''RF''.''Financial Plan Household Loss Tolerance Code'' IS NOT NULL#(lf)   AND ''FC''.''Customer Identification Number'' IS NOT NULL#(lf)  ORDER BY ''RF''.''Financial Planning Group Identifier''', null, [EnableFolding=true]),    #'Added Custom' = Table.AddColumn(Source, 'mgp_rcmd_LatestUpdate', each List.Max({[Recommended Financial Plan Source Create Timestamp],[Recommended Financial Plan Source System Last Update Timestamp]})),    #'Changed Type' = Table.TransformColumnTypes(#'Added Custom',{{'mgp_rcmd_LatestUpdate', type date}}),    #'Changed Type1' = Table.TransformColumnTypes(#'Changed Type',{{'Financial Plan Household Loss Tolerance Code', Int64.Type}, {'Recommended Financial Plan Source Create Timestamp', type date}, {'Recommended Financial Plan Source System Last Update Timestamp', type date}}),    #'Removed Duplicates1' = Table.Distinct(#'Changed Type1', {'Customer Identification Number'}),    #'Replaced Value' = Table.ReplaceValue(#'Removed Duplicates1',null,0,Replacer.ReplaceValue,{'Financial Plan Household Loss Tolerance Code'}),    #'Added Conditional Column' = Table.AddColumn(#'Replaced Value', 'ToleranceInd', each if [Financial Plan Household Loss Tolerance Code] \u003c\u003e 0 then 'Y' else 'N'),    #'Added Conditional Column1' = Table.AddColumn(#'Added Conditional Column', 'Tolerance Binary', each if [ToleranceInd] = 'Y' then 1 else 0),    #'Changed Type3' = Table.TransformColumnTypes(#'Added Conditional Column1',{{'Tolerance Binary', Int64.Type}}),    #'Filtered Rows' = Table.SelectRows(#'Changed Type3', each ([ToleranceInd] = 'Y')),    #'Renamed Columns' = Table.RenameColumns(#'Filtered Rows',{{'Household Durable ID', 'SF_HH_ID'}}),    #'Grouped Rows' = Table.Group(#'Renamed Columns', {'SF_HH_ID'}, {{'MGP_HH_ID', each List.Max([Financial Planning Group Identifier]), type nullable number}, {'THRIVENT_ID', each List.Max([Customer Identification Number]), type nullable number}, {'CREATE_TIMESTAMP', each List.Max([Source Create Timestamp]), type nullable datetime}, {'LAST_UPDATE_TIMESTAMP', each List.Max([Source System Last Update Timestamp]), type nullable datetime}, {'TOLERANCE_IND', each List.Max([ToleranceInd]), type text}, {'TOLERANCE_BINARY', each List.Max([Tolerance Binary]), type number}}),    #'Changed Type2' = Table.TransformColumnTypes(#'Grouped Rows',{{'TOLERANCE_BINARY', Int64.Type}, {'MGP_HH_ID', Int64.Type}, {'THRIVENT_ID', Int64.Type}}),    #'Cleaned Text' = Table.TransformColumns(#'Changed Type2',{{'SF_HH_ID', Text.Clean, type text}}),    #'Trimmed Text' = Table.TransformColumns(#'Cleaned Text',{{'SF_HH_ID', Text.Trim, type text}}),    #'Changed Type4' = Table.TransformColumnTypes(#'Trimmed Text',{{'CREATE_TIMESTAMP', type date}, {'LAST_UPDATE_TIMESTAMP', type date}})in    #'Changed Type4'"}]},{"name":"Capacity Detail","isHidden":false,"storageMode":"Import","columns":[{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Adjusted Service Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Tenure","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"FR_Segment","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Financial Professional Tenure Group","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//SHARED//Public//DI and BI//Capacity Dashboard//Detail Files.xlsx'), null, true),    #'Capacity Detail_Sheet' = Source{[Item='Capacity Detail',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'Capacity Detail_Sheet', [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'JOIN VALUE', type text}, {'Division Name', type text}, {'RFO', Int64.Type}, {'RFO Name', type text}, {'Market', type text}, {'Market Name', type text}, {'Market Leader Name', type text}, {'TSID', type text}, {'Name', type text}, {'Job Title Code', Int64.Type}, {'Job Title Name', type text}, {'Adjusted Service Date with BI', type date}, {'Tenure', type number}, {'Tenure Group', type text}, {'Tenure Year', type text}}),    #'Removed Other Columns' = Table.SelectColumns(#'Changed Type',{'TSID', 'Adjusted Service Date with BI', 'Tenure', 'Tenure Group', 'Tenure Year'}),    #'Renamed Columns' = Table.RenameColumns(#'Removed Other Columns',{{'Adjusted Service Date with BI', 'Adjusted Service Date'}, {'Tenure Group', 'FR_Segment'}, {'Tenure Year', 'Financial Professional Tenure Group'}})in    #'Renamed Columns'"}]},{"name":"Monthly CSV","isHidden":false,"storageMode":"Import","columns":[{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Advisor Group","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Ranking Advisor Group - Adopting","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Ranking All Advisor Group","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Ranking MVP - Adopting","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Ranking All MVP Advisors","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Ranking Market - Adopting","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Ranking All Market Advisors","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Month Ending","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"MVP with Leader","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market with Leader","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Advisor Group Shortened","dataType":"String","isHidden":false,"expression":"SWITCH(\u0027Monthly CSV\u0027[Advisor Group],'0115-Northeast Advisor Group', '0115-Northeast','0190-Southeast Advisor Group', '0190-Southeast','0283-North Star Advisor Group', '0283-North Star','0291-Heartland Advisor Group', '0291-Heartland','0361-Great Lakes Advisor Group', '0361-Great Lakes','0384-South Central Advisor Group', '0384-South Central','0435-Midwest Rockies Advisor Group', '0435-Midwest Rockies','0525-West Advisor Group', '0525-West','0383-Virtual Advice Team','0383-Virtual Advice','0714-Newman Sales Comp','0714-Strategic Partners','0716-Thrivent Advisor Network','0716-TAN',\u0027Monthly CSV\u0027[Advisor Group])","columnType":"Calculated"},{"name":"Market Developer","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Ranking MKT Developer - Adopting","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Ranking All MKT Developer Advisors","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"TSID Market Director","dataType":"String","isHidden":false,"expression":"RELATED(\u0027Market Developers\u0027[Employee Identifier])","columnType":"Calculated"}],"measures":[],"source":[{"expression":"let    Source = SharePoint.Files('https://thrivent.sharepoint.com/sites/TFThriveWithAdvice', [ApiVersion = 15]),    #'Advice Adoption_Jan' = Source{[Name='Advice Adoption_Jan.csv',#'Folder Path'='https://thrivent.sharepoint.com/sites/TFThriveWithAdvice/Shared Documents/General/InformationRadiators/Reports/Advice Adoption Dashboard/2024 - Reports/Monthly/']}[Content],    #'Imported CSV1' = Csv.Document(#'Advice Adoption_Jan',[Delimiter=',', Columns= 13, Encoding=65001, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers1' = Table.PromoteHeaders(#'Imported CSV1', [PromoteAllScalars=true]),    #'Added Month End Date 1' = Table.AddColumn(#'Promoted Headers1', 'Month Ending', each '1/31/2024'),     #'Advice Adoption_Feb' = Source{[Name='Advice Adoption_Feb.csv',#'Folder Path'='https://thrivent.sharepoint.com/sites/TFThriveWithAdvice/Shared Documents/General/InformationRadiators/Reports/Advice Adoption Dashboard/2024 - Reports/Monthly/']}[Content],    #'Imported CSV2' = Csv.Document(#'Advice Adoption_Feb',[Delimiter=',', Columns=13, Encoding=65001, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers2' = Table.PromoteHeaders(#'Imported CSV2', [PromoteAllScalars=true]),    #'Added Month End Date 2' = Table.AddColumn(#'Promoted Headers2', 'Month Ending', each '2/29/2024'),     #'Advice Adoption_Mar' = Source{[Name='Advice Adoption_Mar.csv',#'Folder Path'='https://thrivent.sharepoint.com/sites/TFThriveWithAdvice/Shared Documents/General/InformationRadiators/Reports/Advice Adoption Dashboard/2024 - Reports/Monthly/']}[Content],    #'Imported CSV3' = Csv.Document(#'Advice Adoption_Mar',[Delimiter=',', Columns=13, Encoding=65001, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers3' = Table.PromoteHeaders(#'Imported CSV3', [PromoteAllScalars=true]),    #'Added Month End Date 3' = Table.AddColumn(#'Promoted Headers3', 'Month Ending', each '3/31/2024'),     #'Advice Adoption_Apr' = Source{[Name='Advice Adoption_Apr.csv',#'Folder Path'='https://thrivent.sharepoint.com/sites/TFThriveWithAdvice/Shared Documents/General/InformationRadiators/Reports/Advice Adoption Dashboard/2024 - Reports/Monthly/']}[Content],    #'Imported CSV4' = Csv.Document(#'Advice Adoption_Apr',[Delimiter=',', Columns=13, Encoding=65001, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers4' = Table.PromoteHeaders(#'Imported CSV4', [PromoteAllScalars=true]),    #'Added Month End Date 4' = Table.AddColumn(#'Promoted Headers4', 'Month Ending', each '4/30/2024'),     #'Advice Adoption_May' = Source{[Name='Advice Adoption_May.csv',#'Folder Path'='https://thrivent.sharepoint.com/sites/TFThriveWithAdvice/Shared Documents/General/InformationRadiators/Reports/Advice Adoption Dashboard/2024 - Reports/Monthly/']}[Content],    #'Imported CSV5' = Csv.Document(#'Advice Adoption_May',[Delimiter=',', Columns=13, Encoding=65001, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers5' = Table.PromoteHeaders(#'Imported CSV5', [PromoteAllScalars=true]),    #'Added Month End Date 5' = Table.AddColumn(#'Promoted Headers5', 'Month Ending', each '5/31/2024'),     #'Advice Adoption_Jun' = Source{[Name='Advice Adoption_Jun.csv',#'Folder Path'='https://thrivent.sharepoint.com/sites/TFThriveWithAdvice/Shared Documents/General/InformationRadiators/Reports/Advice Adoption Dashboard/2024 - Reports/Monthly/']}[Content],    #'Imported CSV6' = Csv.Document(#'Advice Adoption_Jun',[Delimiter=',', Columns=13, Encoding=65001, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers6' = Table.PromoteHeaders(#'Imported CSV6', [PromoteAllScalars=true]),    #'Added Month End Date 6' = Table.AddColumn(#'Promoted Headers6', 'Month Ending', each '6/30/2024'),     #'Advice Adoption_Jul' = Source{[Name='Advice Adoption_Jul.csv',#'Folder Path'='https://thrivent.sharepoint.com/sites/TFThriveWithAdvice/Shared Documents/General/InformationRadiators/Reports/Advice Adoption Dashboard/2024 - Reports/Monthly/']}[Content],    #'Imported CSV7' = Csv.Document(#'Advice Adoption_Jul',[Delimiter=',', Columns=13, Encoding=65001, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers7' = Table.PromoteHeaders(#'Imported CSV7', [PromoteAllScalars=true]),    #'Added Month End Date 7' = Table.AddColumn(#'Promoted Headers7', 'Month Ending', each '7/31/2024'),     #'Advice Adoption_Aug' = Source{[Name='Advice Adoption_Aug.csv',#'Folder Path'='https://thrivent.sharepoint.com/sites/TFThriveWithAdvice/Shared Documents/General/InformationRadiators/Reports/Advice Adoption Dashboard/2024 - Reports/Monthly/']}[Content],    #'Imported CSV8' = Csv.Document(#'Advice Adoption_Aug',[Delimiter=',', Columns=13, Encoding=65001, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers8' = Table.PromoteHeaders(#'Imported CSV8', [PromoteAllScalars=true]),    #'Added Month End Date 8' = Table.AddColumn(#'Promoted Headers8', 'Month Ending', each '8/31/2024'),     #'Advice Adoption_Sep' = Source{[Name='Advice Adoption_Sep.csv',#'Folder Path'='https://thrivent.sharepoint.com/sites/TFThriveWithAdvice/Shared Documents/General/InformationRadiators/Reports/Advice Adoption Dashboard/2024 - Reports/Monthly/']}[Content],    #'Imported CSV9' = Csv.Document(#'Advice Adoption_Sep',[Delimiter=',', Columns=13, Encoding=65001, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers9' = Table.PromoteHeaders(#'Imported CSV9', [PromoteAllScalars=true]),    #'Added Month End Date 9' = Table.AddColumn(#'Promoted Headers9', 'Month Ending', each '9/30/2024'),     #'Advice Adoption_Oct' = Source{[Name='Advice Adoption_Oct.csv',#'Folder Path'='https://thrivent.sharepoint.com/sites/TFThriveWithAdvice/Shared Documents/General/InformationRadiators/Reports/Advice Adoption Dashboard/2024 - Reports/Monthly/']}[Content],    #'Imported CSV10' = Csv.Document(#'Advice Adoption_Oct',[Delimiter=',', Columns=13, Encoding=65001, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers10' = Table.PromoteHeaders(#'Imported CSV10', [PromoteAllScalars=true]),    #'Added Month End Date 10' = Table.AddColumn(#'Promoted Headers10', 'Month Ending', each '10/31/2024'),     #'Advice Adoption_Nov' = Source{[Name='Advice Adoption_Nov.csv',#'Folder Path'='https://thrivent.sharepoint.com/sites/TFThriveWithAdvice/Shared Documents/General/InformationRadiators/Reports/Advice Adoption Dashboard/2024 - Reports/Monthly/']}[Content],    #'Imported CSV11' = Csv.Document(#'Advice Adoption_Nov',[Delimiter=',', Columns=13, Encoding=65001, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers11' = Table.PromoteHeaders(#'Imported CSV11', [PromoteAllScalars=true]),    #'Added Month End Date 11' = Table.AddColumn(#'Promoted Headers11', 'Month Ending', each '11/30/2024'),     #'Advice Adoption_Dec' = Source{[Name='Advice Adoption_Dec.csv',#'Folder Path'='https://thrivent.sharepoint.com/sites/TFThriveWithAdvice/Shared Documents/General/InformationRadiators/Reports/Advice Adoption Dashboard/2024 - Reports/Monthly/']}[Content],    #'Imported CSV12' = Csv.Document(#'Advice Adoption_Dec',[Delimiter=',', Columns=13, Encoding=65001, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers12' = Table.PromoteHeaders(#'Imported CSV12', [PromoteAllScalars=true]),    #'Added Month End Date 12' = Table.AddColumn(#'Promoted Headers12', 'Month Ending', each '12/31/2024'),     #'Appended Query' = Table.Combine({#'Added Month End Date 1',#'Added Month End Date 2',#'Added Month End Date 3',#'Added Month End Date 4',#'Added Month End Date 5',#'Added Month End Date 6',#'Added Month End Date 7',#'Added Month End Date 8',#'Added Month End Date 9',#'Added Month End Date 10',#'Added Month End Date 11',#'Added Month End Date 12'}),    #'Changed Type' = Table.TransformColumnTypes(#'Appended Query',{{'Month Ending', type date}, {'Ranking Advisor Group - Adopting', Int64.Type}, {'Ranking All Advisor Group', Int64.Type}, {'Ranking MVP - Adopting', Int64.Type}, {'Ranking All MVP Advisors', Int64.Type}, {'Ranking Market - Adopting', Int64.Type}, {'Ranking All Market Advisors', Int64.Type}, {'Ranking MKT Developer - Adopting', Int64.Type}, {'Ranking All MKT Developer Advisors', Int64.Type}})in    #'Changed Type'"}]},{"name":"Implementation_CheckList","isHidden":false,"storageMode":"Import","columns":[{"name":"SF_HH_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"WORKFLOW_ITEM_DURABLE_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"WF_LAST_MODIFIED_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"COUNT_CHECKLISTS","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"IMPL_CHKLST_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"IMPL_CHKLST_BINARY","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"All_Rows.Responsible Party Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"All_Rows.Household Role","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"All_Rows.Household Role Ind","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'SELECT#(lf)CurrentRows_Combined.''Primary Or Secondary Customer ID'',#(lf)CurrentRows_Combined.''Payload Name'',#(lf)TO_DATE(SUBSTRING(CurrentRows_Combined.''Created Date'',1,10),\u0027AUTO\u0027) AS ''Created Date'',#(lf)CurrentRows_Combined.''Completed Item Count'',#(lf)CurrentRows_Combined.''Total Item Count'',#(lf)CurrentRows_Combined.''Item Completed Description'',#(lf)TO_DATE(SUBSTRING(CurrentRows_Combined.''Last Modified Date'',1,10),\u0027AUTO\u0027) AS ''Last Modified Date'',#(lf)CurrentRows_Combined.''Status Description'',#(lf)CurrentRows_Combined.''Category Description'',#(lf)CurrentRows_Combined.''Workflow Item Durable ID'',#(lf)CurrentRows_Combined.''Subject Text'',#(lf)CurrentRows_Combined.''Type Description'',#(lf)TO_DATE(SUBSTRING(CurrentRows_Combined.''Message Publish Timestamp'',1,10),\u0027AUTO\u0027) AS ''Message Publish Timestamp'',#(lf)TO_DATE(SUBSTRING(CurrentRows_Combined.''Workflow Item Last Modified Date'',1,10),\u0027AUTO\u0027) AS ''Workflow Item Last Modified Date'',#(lf)TO_DATE(SUBSTRING(CurrentRows_Combined.''Workflow Item Created Date'',1,10),\u0027AUTO\u0027) AS ''Workflow Item Created Date'',#(lf)CurrentRows_Combined.''Responsible Party Description'', #(lf)Person.''Household Number'' AS CIF_HH_ID, #(lf)MOGP_Client.''Financial Planning Group Identifier'' AS MOGP_HH_ID, #(lf)CASE WHEN SF_Household.''Household Durable ID'' IS NULL #(lf)  THEN TO_CHAR(CurrentRows_Combined.''Primary Or Secondary Customer ID'')#(lf)  ELSE SF_Household.''Household Durable ID''#(lf)END AS SF_HH_ID,#(lf)CASE WHEN SF_Household.''Household Member Role Description'' IS NULL#(lf)  THEN \u0027Primary\u0027#(lf)  ELSE SF_Household.''Household Member Role Description''#(lf)  END AS ''Household Role''#(lf)FROM#(lf)#(lf)(SELECT CurrentRows.* EXCLUDE ''Secondary Account Customer ID'' RENAME ''Customer ID'' AS ''Primary Or Secondary Customer ID'', \u0027Primary\u0027 AS ''CIF ID Type''#(lf)#(lf)FROM #(lf)(SELECT *#(lf)#(lf)    FROM#(lf)    (SELECT DISTINCT *#(lf)#(lf)        FROM SALESFORCE_B2C_ODS.PRESENTATION_01.''Salesforce Dataready Workflows Confidential''#(lf)#(lf)        WHERE ''Category Description'' =\u0027Implementation Checklist\u0027#(lf)#(lf)        QUALIFY ROW_NUMBER() OVER (PARTITION BY ''Workflow Item Durable ID'' ORDER BY ''Workflow Item Last Modified Date'' DESC, ''Message Publish Timestamp'' DESC)=1) AS A#(lf)#(lf)    WHERE ''A''.''Worklfow Item Is Deleted'' = FALSE#(lf)          AND A.''Status Description'' \u003c\u003e \u0027Canceled\u0027#(lf)          AND A.''Customer ID'' IS NOT NULL#(lf)          AND A.''Customer ID'' \u003c\u003e \u0027519652129\u0027#(lf)          AND A.''Type Description'' = \u0027Action Step\u0027#(lf)          AND A.''Responsible Party Description'' IN (\u0027Client\u0027, \u0027Both Clients\u0027, \u0027Secondary Client\u0027)#(lf)          AND A.''Total Item Count'' \u003c\u003e 0#(lf) )AS CurrentRows#(lf) #(lf)UNION ALL#(lf)#(lf)#(lf)SELECT CurrentRows_Secondary.* EXCLUDE ''Customer ID''RENAME ''Secondary Account Customer ID'' AS ''Primary Or Secondary Customer ID'', \u0027Secondary\u0027 AS ''CIF ID Type''#(lf)#(lf)FROM #(lf)(SELECT *#(lf)#(lf)    FROM#(lf)    (SELECT DISTINCT *#(lf)#(lf)        FROM SALESFORCE_B2C_ODS.PRESENTATION_01.''Salesforce Dataready Workflows Confidential''#(lf)#(lf)        WHERE ''Category Description'' =\u0027Implementation Checklist\u0027#(lf)#(lf)        QUALIFY ROW_NUMBER() OVER (PARTITION BY ''Workflow Item Durable ID'' ORDER BY ''Workflow Item Last Modified Date'' DESC, ''Message Publish Timestamp'' DESC)=1) AS A#(lf)#(lf)    WHERE ''A''.''Worklfow Item Is Deleted'' = FALSE#(lf)          AND A.''Status Description'' \u003c\u003e \u0027Canceled\u0027#(lf)          AND A.''Customer ID'' IS NOT NULL#(lf)          AND A.''Customer ID'' \u003c\u003e \u0027519652129\u0027#(lf)          AND A.''Type Description'' = \u0027Action Step\u0027#(lf)          AND A.''Responsible Party Description'' IN (\u0027Client\u0027, \u0027Both Clients\u0027, \u0027Secondary Client\u0027)#(lf)          AND A.''Total Item Count'' \u003c\u003e 0#(lf)          AND ''Secondary Account Customer ID'' IS NOT NULL#(lf) )AS CurrentRows_Secondary) AS CurrentRows_Combined#(lf) #(lf) LEFT JOIN ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Person Dimension'' AS Person#(lf)        ON (    Person.''Source System Key Text'' = CurrentRows_Combined.''Primary Or Secondary Customer ID''#(lf)            AND Person.''Current Row Indicator'' = \u0027Y\u0027#(lf)            AND Person.''Deceased Indicator'' = \u0027N\u0027)#(lf)            #(lf) LEFT JOIN #(lf) #(lf) (SELECT DISTINCT * FROM ENTERPRISE_FINANCIAL_SERVICES_AGMT.PRESENTATION_01.''Financial Plan Client Confidential'' #(lf)  QUALIFY ROW_NUMBER() OVER (PARTITION BY ''Customer Identification Number'' ORDER BY ''Last Update Timestamp'' DESC)=1) AS MOGP_Client#(lf)  ON (MOGP_Client.''Customer Identification Number''= CurrentRows_Combined.''Primary Or Secondary Customer ID'' )#(lf)  #(lf)  #(lf) LEFT JOIN #(lf) #(lf) (SELECT DISTINCT * FROM SALESFORCE_B2C_ODS.PRESENTATION_01.''Salesforce Dataready Customergroups Confidential''#(lf)  QUALIFY ROW_NUMBER() OVER (PARTITION BY ''Household Member Customer ID'' ORDER BY ''Last Modified Date'' DESC, ''Commit Timestamp'' DESC)=1) AS SF_Household#(lf)  ON (SF_Household.''Household Member Customer ID''= CurrentRows_Combined.''Primary Or Secondary Customer ID'' AND SF_Household.''Household Member IsDeleted'' = FALSE AND SF_Household.''IsDeleted'' = FALSE)', null, [EnableFolding=true]),    #'Renamed Columns' = Table.RenameColumns(Source,{{'Primary Or Secondary Customer ID', 'Customer ID'}}),    #'Changed Type' = Table.TransformColumnTypes(#'Renamed Columns',{{'Created Date', type datetime}, {'Customer ID', Int64.Type}, {'Workflow Item Last Modified Date', type datetime}, {'Workflow Item Created Date', type datetime}}),    #'Added Conditional Column2' = Table.AddColumn(#'Changed Type', 'Household Role Ind', each if [Household Role] = 'Primary' then 1 else if [Household Role] = 'Spouse' then 2 else if [Household Role] = 'Child' then 3 else 4),    #'Grouped Rows' = Table.Group(#'Added Conditional Column2', {'SF_HH_ID'}, {{'WORKFLOW_ITEM_DURABLE_ID', each List.Max([Workflow Item Durable ID]), type nullable text}, {'WF_LAST_MODIFIED_DATE', each List.Max([Workflow Item Last Modified Date]), type nullable datetime}, {'COUNT_CHECKLISTS', each Table.RowCount(_), Int64.Type}, {'All_Rows', each _, type table [Customer ID=nullable number, Payload Name=nullable text, Created Date=nullable datetime, Completed Item Count=nullable number, Total Item Count=nullable number, Item Completed Description=nullable text, Last Modified Date=nullable date, Status Description=nullable text, Category Description=nullable text, Workflow Item Durable ID=nullable text, Subject Text=nullable text, Type Description=nullable text, Message Publish Timestamp=nullable date, Workflow Item Last Modified Date=nullable datetime, Workflow Item Created Date=nullable datetime, Responsible Party Description=nullable text, CIF_HH_ID=nullable number, MOGP_HH_ID=nullable number, SF_HH_ID=nullable text, Household Role=nullable text, Household Role Ind=number]}}),    #'Expanded All_Rows' = Table.ExpandTableColumn(#'Grouped Rows', 'All_Rows', {'Responsible Party Description', 'Household Role', 'Household Role Ind'}, {'All_Rows.Responsible Party Description', 'All_Rows.Household Role', 'All_Rows.Household Role Ind'}),    #'Removed Duplicates' = Table.Distinct(#'Expanded All_Rows', {'SF_HH_ID'}),    #'Added Conditional Column' = Table.AddColumn(#'Removed Duplicates', 'IMPL_CHKLST_IND', each if [COUNT_CHECKLISTS] \u003e 0 then 'Y' else 'N'),    #'Added Conditional Column1' = Table.AddColumn(#'Added Conditional Column', 'IMPL_CHKLST_BINARY', each if [IMPL_CHKLST_IND] = 'Y' then 1 else 0),    #'Changed Type1' = Table.TransformColumnTypes(#'Added Conditional Column1',{{'IMPL_CHKLST_BINARY', Int64.Type}}),    #'Cleaned Text' = Table.TransformColumns(#'Changed Type1',{{'SF_HH_ID', Text.Clean, type text}}),    #'Trimmed Text' = Table.TransformColumns(#'Cleaned Text',{{'SF_HH_ID', Text.Trim, type text}}),    #'Changed Type2' = Table.TransformColumnTypes(#'Trimmed Text',{{'WF_LAST_MODIFIED_DATE', type date}})in    #'Changed Type2'"}]},{"name":"RDL_Data","isHidden":false,"storageMode":"Import","columns":[{"name":"CORP_MGR_ID_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CORP_EMP_ID_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"BEG_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"END_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"RDL NAME","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////VSSHR//SHARED//Public//DI and BI//Field Reporting//Pace//RDL_Data.csv'),[Delimiter=',', Columns=5, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'CORP_MGR_ID_CDE', type text}, {'CORP_EMP_ID_CDE', type text}, {'BEG_DATE', type date}, {'END_DATE', type date}, {'RDL NAME', type text}})in    #'Changed Type'"}]},{"name":"ALLMBRs","isHidden":false,"storageMode":"Import","columns":[{"name":"SF_HH_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Risk","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Accumulation","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Both","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Risk Ind Binary","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Accum Ind Binary","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Both ind Binary","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'SELECT a.''Customer Identification Number''#(lf)          AS CUST_ID_NBR,#(lf)       a.''Customer Group Identification Number''#(lf)          AS CIF_GRPIDNBR,#(lf)         SUM (a.''Proprietary Life Line of Business Contracts Own Count'')#(lf)       + SUM (a.''Proprietary Health Line of Business Contracts Own Count'')#(lf)          AS RISKOWN,#(lf)         SUM (a.''Proprietary Annuity Line of Business Contracts Own Count'')#(lf)       + SUM (a.''Proprietary Mutual Fund Accounts Own Count'')#(lf)       + SUM (a.''Non-Proprietary Brokerage Accounts Own Count'')#(lf)       + SUM (a.''TIMI Managed Accounts Own Count'')#(lf)          AS ACCUMOWN,#(lf)       CASE#(lf)          WHEN       SUM (#(lf)                        a.''Proprietary Life Line of Business Contracts Own Count'')#(lf)                   + SUM (#(lf)                        a.''Proprietary Health Line of Business Contracts Own Count'') \u003e#(lf)                   0#(lf)               AND   SUM (#(lf)                        a.''Proprietary Annuity Line of Business Contracts Own Count'')#(lf)                   + SUM (a.''Proprietary Mutual Fund Accounts Own Count'')#(lf)                   + SUM (a.''Non-Proprietary Brokerage Accounts Own Count'')#(lf)                   + SUM (a.''TIMI Managed Accounts Own Count'') \u003e#(lf)                   0#(lf)          THEN#(lf)             1#(lf)          ELSE#(lf)             0#(lf)       END#(lf)          AS BOTHOWN,#(lf)       CASE#(lf)          WHEN substring (#(lf)                           a.''Client Servicing Employee Organization Identifier'',#(lf)                           1,#(lf)                           2) =#(lf)               \u0027TS\u0027#(lf)          THEN#(lf)             \u0027Advisor\u0027#(lf)          WHEN substring (#(lf)                           a.''Client Servicing Employee Organization Identifier'',#(lf)                           1,#(lf)                           2) =#(lf)               \u0027DP\u0027#(lf)          THEN#(lf)             \u0027TAG\u0027#(lf)       END#(lf)          AS Assignment,#(lf)       1#(lf)          AS cnt,#(lf)       CASE WHEN b.''Household Durable ID'' IS NULL #(lf)  THEN TO_CHAR(a.''Customer Identification Number'')#(lf)  ELSE b.''Household Durable ID''#(lf)END AS ''HouseholdId'',#(lf)CASE WHEN b.''Household Member Role Description'' IS NULL#(lf)    THEN \u0027Primary\u0027#(lf)    ELSE b.''Household Member Role Description''#(lf)       END AS ''Household Role''#(lf)FROM ''ENTERPRISE_EDW''.''PRESENTATION_01''.''All Members Current'' a#(lf)     LEFT JOIN#(lf)     (SELECT DISTINCT * FROM ''SALESFORCE_B2C_ODS''.''PRESENTATION_01''.''Salesforce Dataready Customergroups Confidential''#(lf)  WHERE ''Household Member IsDeleted'' = FALSE #(lf)  AND ''IsDeleted'' = FALSE#(lf)  QUALIFY ROW_NUMBER() OVER (PARTITION BY ''Household Member Customer ID'' ORDER BY ''Last Modified Date'' DESC, ''Commit Timestamp'' DESC)=1)#(lf)     b#(lf)        ON a.''Customer Identification Number'' =#(lf)           try_to_number (b.''Household Member Customer ID'')#(lf)     #(lf)           #(lf)#(lf)GROUP BY ''Household Durable ID'',#(lf)          ''Household Member Customer ID'',#(lf)         ''Customer Identification Number'',#(lf)         ''Customer Group Identification Number'',#(lf)         ''Client Servicing Employee Organization Identifier'',#(lf)         ''Household Member Role Description''', null, [EnableFolding=true]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'CUST_ID_NBR', Int64.Type}, {'CIF_GRPIDNBR', Int64.Type}, {'RISKOWN', Int64.Type}, {'ACCUMOWN', Int64.Type}, {'BOTHOWN', Int64.Type}, {'CNT', Int64.Type}}),    #'Removed Duplicates' = Table.Distinct(#'Changed Type', {'CUST_ID_NBR'}),    #'Renamed Columns' = Table.RenameColumns(#'Removed Duplicates',{{'HouseholdId', 'SF_HH_ID'}}),    #'Grouped Rows' = Table.Group(#'Renamed Columns', {'SF_HH_ID'}, {{'Risk', each List.Sum([RISKOWN]), type nullable number}, {'Accumulation', each List.Sum([ACCUMOWN]), type nullable number}, {'Both', each List.Sum([BOTHOWN]), type nullable number}}),    #'Removed Duplicates1' = Table.Distinct(#'Grouped Rows', {'SF_HH_ID'}),    #'Added Conditional Column' = Table.AddColumn(#'Removed Duplicates1', 'Risk Ind Binary', each if [Risk] \u003e 0 then 1 else 0),    #'Added Conditional Column1' = Table.AddColumn(#'Added Conditional Column', 'Accum Ind Binary', each if [Accumulation] \u003e 0 then 1 else 0),    #'Added Conditional Column2' = Table.AddColumn(#'Added Conditional Column1', 'Both ind Binary', each if [Both] \u003e 0 then 1 else 0),    #'Changed Type1' = Table.TransformColumnTypes(#'Added Conditional Column2',{{'Risk Ind Binary', Int64.Type}, {'Accum Ind Binary', Int64.Type}, {'Both ind Binary', Int64.Type}}),    #'Filtered Rows' = Table.SelectRows(#'Changed Type1', each [SF_HH_ID] \u003c\u003e null and [SF_HH_ID] \u003c\u003e '')in    #'Filtered Rows'"}]},{"name":"Monthly CEO csv","isHidden":false,"storageMode":"Import","columns":[{"name":"Advisor Group Shortened","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Tenure","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Month Ending","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Total SF Households","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Short Month","dataType":"String","isHidden":false,"expression":"FORMAT(\u0027Monthly CEO csv\u0027[Month Ending],'mmm')","columnType":"Calculated"},{"name":"Target Adopting Households - No Time Constraint","dataType":"String","isHidden":false,"expression":"RELATED(\u0027CEO Values\u0027[Target % Adopting ])","columnType":"Calculated"},{"name":"Prior YE","dataType":"String","isHidden":false,"expression":"RELATED(\u0027CEO Values\u0027[Prior YE AA HH with risk and accum] )","columnType":"Calculated"},{"name":"Adopted Households - Time Constraints","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Adopted Households with Risk \u0026 Accum - Time Constraints","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Adopting Advisor - Time Constraints","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Adopted Households- No Time Constraints","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Adopted Households with Risk \u0026 Accum - No Time Constraints","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Total Households with Risk","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Total Households with Accumulation","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Total Households with Risk \u0026 Accumulation","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Target % for Adopted HH with Risk \u0026 Accum to Adopted HH - No Time Constraint","dataType":"String","isHidden":false,"expression":"RELATED(\u0027CEO Values\u0027[Target % Adopting HH with Risk \u0026 Accum])","columnType":"Calculated"},{"name":"Month","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Total Adopted HH -Time Constraints %","expression":"  VAR _households = CALCULATE(SUM(\u0027Monthly CEO csv\u0027[Total SF Households]))  VAR _adopting = CALCULATE(SUM(\u0027Monthly CEO csv\u0027[Adopted Households - Time Constraints]))VAR _total = DIVIDE(_adopting,_households) ReturnIF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"Total Adopted HH -  No Time Constraint %","expression":"  VAR _households = CALCULATE(SUM(\u0027Monthly CEO csv\u0027[Total SF Households]))  VAR _adopting = CALCULATE(SUM(\u0027Monthly CEO csv\u0027[Adopted Households- No Time Constraints]))VAR _total = DIVIDE(_adopting,_households) ReturnIF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"Total Adopted HH w/ R\u0026A - Time Constraints %","expression":"  VAR _households = CALCULATE(SUM(\u0027Monthly CEO csv\u0027[Total SF Households]))  VAR _adopting = CALCULATE(SUM(\u0027Monthly CEO csv\u0027[Adopted Households with Risk \u0026 Accum - Time Constraints]))VAR _total = DIVIDE(_adopting,_households) ReturnIF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"Total Adopted HH w/ R\u0026A - No Time Constraints %","expression":"  VAR _households = CALCULATE(SUM(\u0027Monthly CEO csv\u0027[Adopted Households- No Time Constraints]))  VAR _adopting = CALCULATE(SUM(\u0027Monthly CEO csv\u0027[Adopted Households with Risk \u0026 Accum - No Time Constraints]))VAR _total = DIVIDE(_adopting,_households) ReturnIF(ISBLANK(_total),'',_total)","isHidden":false},{"name":"Current % measure for Adopted HH with Risk \u0026 Accum to Adopted HH - No Time Constraint","expression":"VAR _CurrentMonthNumber= IF(MONTH(TODAY())=1,12,MONTH(TODAY()))VAR _PreviousMonthNumber= IF(MONTH(TODAY())=1,12,MONTH(TODAY())-1) VAR _MonthForChart= IF(DTRB_PERF_DATES[Current BD of the month]\u003e2, _PreviousMonthNumber,_PreviousMonthNumber-1)VAR _Percent= CALCULATE(\u0027Monthly CEO csv\u0027[Total Adopted HH w/ R\u0026A - No Time Constraints %],\u0027Monthly CEO csv\u0027[Month]=_MonthForChart)return  _Percent","isHidden":false},{"name":"Target % measure for Adopted HH w/ R\u0026A to Adopted HH - No Time Constraint","expression":"VAR _CurrentMonthNumber= IF(MONTH(TODAY())=1,12,MONTH(TODAY()))VAR _PreviousMonthNumber= IF(MONTH(TODAY())=1,12,MONTH(TODAY())-1) VAR _MonthForChart= IF(DTRB_PERF_DATES[Current BD of the month]\u003e2, _PreviousMonthNumber,_PreviousMonthNumber-1)VAR _Percent= CALCULATE(SELECTEDVALUE(\u0027Monthly CEO csv\u0027[Target % for Adopted HH with Risk \u0026 Accum to Adopted HH - No Time Constraint]),\u0027Monthly CEO csv\u0027[Month]=_MonthForChart)return  _Percent","isHidden":false},{"name":"Prior YE % measure for Adopted HH w/ R\u0026A to Adopted HH - No Time Constraint","expression":"VAR _CurrentMonthNumber= IF(MONTH(TODAY())=1,12,MONTH(TODAY()))VAR _PreviousMonthNumber= IF(MONTH(TODAY())=1,12,MONTH(TODAY())-1) VAR _MonthForChart= IF(DTRB_PERF_DATES[Current BD of the month]\u003e2, _PreviousMonthNumber,_PreviousMonthNumber-1)VAR _Percent= CALCULATE(SELECTEDVALUE(\u0027Monthly CEO csv\u0027[Prior YE]),\u0027Monthly CEO csv\u0027[Month]=_MonthForChart)return  _Percent","isHidden":false},{"name":"Total Adopted HH w/ R\u0026A - No Time Constraints","expression":"  VAR _Total = CALCULATE(SUM(\u0027Monthly CEO csv\u0027[Adopted Households with Risk \u0026 Accum - No Time Constraints]))ReturnIF(ISBLANK(_total),'',IF(_total = 0,'',_total))","isHidden":false},{"name":"Total Adopted HH - No Time Constraints","expression":"  VAR _total = CALCULATE(SUM(\u0027Monthly CEO csv\u0027[Adopted Households- No Time Constraints])) ReturnIF(ISBLANK(_total),'',IF(_total = 0,'',_total))","isHidden":false}],"source":[{"expression":"let    Source = SharePoint.Files('https://thrivent.sharepoint.com/sites/SDFieldReportingAnalytics', [ApiVersion = 15]),    Custom1 = Source{[Name='AA_CEO_Jan.csv',#'Folder Path'='https://thrivent.sharepoint.com/sites/SDFieldReportingAnalytics/Shared Documents/Advice COE/PowerBi_Import_Files/Advice/']}[Content],    #'Imported CSV' = Csv.Document(Custom1,[Delimiter=',', Columns=20, Encoding=65001, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(#'Imported CSV', [PromoteAllScalars=true]),    #'Added Month End 1' = Table.AddColumn(#'Promoted Headers', 'Month Ending', each '01/31/2024'),    #'Import Feb' = Source{[Name='AA_CEO_Feb.csv',#'Folder Path'='https://thrivent.sharepoint.com/sites/SDFieldReportingAnalytics/Shared Documents/Advice COE/PowerBi_Import_Files/Advice/']}[Content],    #'Imported CSV1' = Csv.Document(#'Import Feb',[Delimiter=',', Columns=20, Encoding=65001, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers1' = Table.PromoteHeaders(#'Imported CSV1', [PromoteAllScalars=true]),    #'Added Month End 2' = Table.AddColumn(#'Promoted Headers1', 'Month Ending', each '02/29/2024'),    #'Import Mar' = Source{[Name='AA_CEO_Mar.csv',#'Folder Path'='https://thrivent.sharepoint.com/sites/SDFieldReportingAnalytics/Shared Documents/Advice COE/PowerBi_Import_Files/Advice/']}[Content],    #'Imported CSV2' = Csv.Document(#'Import Mar',[Delimiter=',', Columns=20, Encoding=65001, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers2' = Table.PromoteHeaders(#'Imported CSV2', [PromoteAllScalars=true]),    #'Added Month End 3' = Table.AddColumn(#'Promoted Headers2', 'Month Ending', each '03/31/2024'),    #'Import Apr' = Source{[Name='AA_CEO_Apr.csv',#'Folder Path'='https://thrivent.sharepoint.com/sites/SDFieldReportingAnalytics/Shared Documents/Advice COE/PowerBi_Import_Files/Advice/']}[Content],    #'Imported CSV3' = Csv.Document(#'Import Apr',[Delimiter=',', Columns=20, Encoding=65001, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers3' = Table.PromoteHeaders(#'Imported CSV3', [PromoteAllScalars=true]),    #'Added Month End 4' = Table.AddColumn(#'Promoted Headers3', 'Month Ending', each '04/30/2024'),    #'Import May' = Source{[Name='AA_CEO_May.csv',#'Folder Path'='https://thrivent.sharepoint.com/sites/SDFieldReportingAnalytics/Shared Documents/Advice COE/PowerBi_Import_Files/Advice/']}[Content],    #'Imported CSV4' = Csv.Document(#'Import May',[Delimiter=',', Columns=20, Encoding=65001, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers4' = Table.PromoteHeaders(#'Imported CSV4', [PromoteAllScalars=true]),    #'Added Month End 5' = Table.AddColumn(#'Promoted Headers4', 'Month Ending', each '05/31/2024'),    #'Import Jun' = Source{[Name='AA_CEO_Jun.csv',#'Folder Path'='https://thrivent.sharepoint.com/sites/SDFieldReportingAnalytics/Shared Documents/Advice COE/PowerBi_Import_Files/Advice/']}[Content],    #'Imported CSV5' = Csv.Document(#'Import Jun',[Delimiter=',', Columns=20, Encoding=65001, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers5' = Table.PromoteHeaders(#'Imported CSV5', [PromoteAllScalars=true]),    #'Added Month End 6' = Table.AddColumn(#'Promoted Headers5', 'Month Ending', each '06/30/2024'),    #'Import Jul' = Source{[Name='AA_CEO_Jul.csv',#'Folder Path'='https://thrivent.sharepoint.com/sites/SDFieldReportingAnalytics/Shared Documents/Advice COE/PowerBi_Import_Files/Advice/']}[Content],    #'Imported CSV6' = Csv.Document(#'Import Jul',[Delimiter=',', Columns=20, Encoding=65001, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers6' = Table.PromoteHeaders(#'Imported CSV6', [PromoteAllScalars=true]),    #'Added Month End 7' = Table.AddColumn(#'Promoted Headers6', 'Month Ending', each '07/31/2024'),    #'Import Aug' = Source{[Name='AA_CEO_Aug.csv',#'Folder Path'='https://thrivent.sharepoint.com/sites/SDFieldReportingAnalytics/Shared Documents/Advice COE/PowerBi_Import_Files/Advice/']}[Content],    #'Imported CSV7' = Csv.Document(#'Import Aug',[Delimiter=',', Columns=20, Encoding=65001, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers7' = Table.PromoteHeaders(#'Imported CSV7', [PromoteAllScalars=true]),    #'Added Month End 8' = Table.AddColumn(#'Promoted Headers7', 'Month Ending', each '08/31/2024'),    #'Import Sep' = Source{[Name='AA_CEO_Sep.csv',#'Folder Path'='https://thrivent.sharepoint.com/sites/SDFieldReportingAnalytics/Shared Documents/Advice COE/PowerBi_Import_Files/Advice/']}[Content],    #'Imported CSV8' = Csv.Document(#'Import Sep',[Delimiter=',', Columns=20, Encoding=65001, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers8' = Table.PromoteHeaders(#'Imported CSV8', [PromoteAllScalars=true]),    #'Added Month End 9' = Table.AddColumn(#'Promoted Headers8', 'Month Ending', each '09/30/2024'),    #'Import Oct' = Source{[Name='AA_CEO_Oct.csv',#'Folder Path'='https://thrivent.sharepoint.com/sites/SDFieldReportingAnalytics/Shared Documents/Advice COE/PowerBi_Import_Files/Advice/']}[Content],    #'Imported CSV9' = Csv.Document(#'Import Oct',[Delimiter=',', Columns=20, Encoding=65001, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers9' = Table.PromoteHeaders(#'Imported CSV9', [PromoteAllScalars=true]),    #'Added Month End 10' = Table.AddColumn(#'Promoted Headers9', 'Month Ending', each '10/31/2024'),    #'Import Nov' = Source{[Name='AA_CEO_Nov.csv',#'Folder Path'='https://thrivent.sharepoint.com/sites/SDFieldReportingAnalytics/Shared Documents/Advice COE/PowerBi_Import_Files/Advice/']}[Content],    #'Imported CSV10' = Csv.Document(#'Import Nov',[Delimiter=',', Columns=20, Encoding=65001, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers10' = Table.PromoteHeaders(#'Imported CSV10', [PromoteAllScalars=true]),    #'Added Month End 11' = Table.AddColumn(#'Promoted Headers10', 'Month Ending', each '11/30/2024'),    #'Import Dec' = Source{[Name='AA_CEO_Dec.csv',#'Folder Path'='https://thrivent.sharepoint.com/sites/SDFieldReportingAnalytics/Shared Documents/Advice COE/PowerBi_Import_Files/Advice/']}[Content],    #'Imported CSV11' = Csv.Document(#'Import Dec',[Delimiter=',', Columns=20, Encoding=65001, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers11' = Table.PromoteHeaders(#'Imported CSV11', [PromoteAllScalars=true]),    #'Added Month End 12' = Table.AddColumn(#'Promoted Headers11', 'Month Ending', each '12/31/2024'),    #'Appended Query' = Table.Combine({#'Added Month End 1', #'Added Month End 2', #'Added Month End 3', #'Added Month End 4', #'Added Month End 5', #'Added Month End 6', #'Added Month End 7', #'Added Month End 8', #'Added Month End 9', #'Added Month End 10', #'Added Month End 11', #'Added Month End 12'}),    #'Changed Type' = Table.TransformColumnTypes(#'Appended Query',{{'Total SF Households', Int64.Type}, {'Adopted Households - Time Constraints', Int64.Type}, {'Adopted Households with Risk \u0026 Accum - Time Constraints', Int64.Type}, {'Adopting Advisor - Time Constraints', Int64.Type}, {'Adopted Households- No Time Constraints', Int64.Type}, {'Adopted Households with Risk \u0026 Accum - No Time Constraints', Int64.Type}, {'Total Households with Risk', Int64.Type}, {'Total Households with Accumulation', Int64.Type}, {'Total Households with Risk \u0026 Accumulation', Int64.Type}, {'Month Ending', type date}}),    #'Removed Other Columns' = Table.SelectColumns(#'Changed Type',{'Advisor Group Shortened', 'MVP', 'Market', 'EMP_ID', 'Job Code', 'Tenure', 'Total SF Households', 'Adopted Households - Time Constraints', 'Adopted Households with Risk \u0026 Accum - Time Constraints', 'Adopting Advisor - Time Constraints', 'Adopted Households- No Time Constraints', 'Adopted Households with Risk \u0026 Accum - No Time Constraints', 'Total Households with Risk', 'Total Households with Accumulation', 'Total Households with Risk \u0026 Accumulation', 'Month Ending'}),    #'Added Custom' = Table.AddColumn(#'Removed Other Columns', 'Month', each Date.Month([Month Ending])),    #'Changed Type1' = Table.TransformColumnTypes(#'Added Custom',{{'Month', Int64.Type}})in    #'Changed Type1'"}]},{"name":"CEO Values","isHidden":false,"storageMode":"Import","columns":[{"name":"Month","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Prior YE AA HH with risk and accum","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Prior YE AA HH","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Month End","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Target % Adopting ","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Target % Adopting HH with Risk \u0026 Accum","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Abv Month","dataType":"String","isHidden":false,"expression":"FORMAT(\u0027CEO Values\u0027[Month End],'mmm')","columnType":"Calculated"},{"name":"Total Adopted HH - No Time Constraints %","dataType":"String","isHidden":false,"expression":" VAR _households = CALCULATE(SUM(\u0027Monthly CEO csv\u0027[Adopted Households- No Time Constraints])) VAR _adopted = CALCULATE(SUM(\u0027Monthly CEO csv\u0027[Adopted Households with Risk \u0026 Accum - No Time Constraints])) VAR _percentage = CALCULATE(DIVIDE(_adopted,_households,BLANK()))RETURN IF(ISBLANK(_percentage),BLANK(),_percentage)","columnType":"Calculated"},{"name":"Month with beg Feb 16","dataType":"String","isHidden":false,"expression":"  Switch(\u0027CEO Values\u0027[Month],  1, 'Feb 16',  2, 'Feb',  3, 'Mar',  4, 'Apr',  5, 'May',  6, 'Jun',  7, 'Jul',  8, 'Aug',  9, 'Sep', 10, 'Oct', 11, 'Nov', 12, 'Dec', 'unknown')","columnType":"Calculated"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('dZHJCcUwDAV78Tl8a/NWi0n/bSQ/72AE0kUGaxgGtHfhcpUfkej/tfnN9v3JO7kqVyGxcl+7CFgbIUtSZR1YAQ+KYXVmA7ziCrKqdGAsmJOM5swdsCUZ3ZkH4J5kDGeegGeSMR28sOAkY7kMUO9NkqOQUzNOKC0OYfZuHFFmXMJy3PcD', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Month = _t, #'Target % Adopting ' = _t, #'Target % Adopting HH with Risk \u0026 Accum' = _t, #'Prior YE AA HH with risk and accum' = _t, #'Prior YE AA HH' = _t, #'Month End' = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Month', Int64.Type}, {'Target % Adopting ', Percentage.Type}, {'Target % Adopting HH with Risk \u0026 Accum', Percentage.Type}, {'Prior YE AA HH with risk and accum', Percentage.Type}, {'Prior YE AA HH', Percentage.Type}, {'Month End', type date}})in    #'Changed Type'"}]},{"name":"Axis Table","isHidden":false,"storageMode":"Import","columns":[{"name":"Axis","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ID","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i45WinRVMDIwMlbSUTJUitWJVgJyTBQiQ1yAAkZIAq4KATmJeUBBY6XYWAA=', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Label = _t, ID = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Label', type text}, {'ID', Int64.Type}}),    #'Renamed Columns' = Table.RenameColumns(#'Changed Type',{{'Label', 'Axis'}})in    #'Renamed Columns'"}]},{"name":"Beginning Values","isHidden":false,"storageMode":"Import","columns":[{"name":"Adopted Households- No Time Constraints","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Adopted Households with Risk \u0026 Accum - No Time Constraints","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Month Ending","dataType":"DateTime","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i45WMtQ3NtQ3MjAyUdJRMjE2NgdSRgbmBkqxsQA=', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [#'Month Ending' = _t, #'Adopted Households- No Time Constraints' = _t, #'Adopted Households with Risk \u0026 Accum - No Time Constraints' = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Month Ending', type date}, {'Adopted Households- No Time Constraints', Int64.Type}, {'Adopted Households with Risk \u0026 Accum - No Time Constraints', Int64.Type}})in    #'Changed Type'"}]},{"name":"Market Developers","isHidden":false,"storageMode":"Import","columns":[{"name":"Employee Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee Name","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'Select#(lf)''Employee Identifier'',#(lf)''Job Type Code'',#(lf)''Employee Name''#(lf)From ENTERPRISE_EDW.PRESENTATION_01.''Workforce Dimension Detail''#(lf)Where#(lf)''Job Type Code'' = \u0027001005\u0027#(lf)And ''Current Row Indicator'' = \u0027Y\u0027', null, [EnableFolding=true])in    Source"}]}],"expressions":[{"name":"Experience Advisor Sort","expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i45WUtJRMlSK1YlWCvB1VtBVyE0syk4tUTAwBIobYYqbWgLFjcHi7gGOCHEzkLgJVNwFIW4OEjcFi/sFuCPELS2A4mZYxEHqzZViYwE=', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Filter_Ind = _t, Sort = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Filter_Ind', type text}, {'Sort', Int64.Type}})in    #'Changed Type'"},{"name":"NFC","expression":"let    Source = DB2.Database('PODWH021:50000', 'PODWH021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT --IA_DATES_ITRL.DT_SK as ''Date Surrogate Key'',#(lf)      -- TF_FIN_CUST_EVT_FCT_CFDL.CTRC_VRSN_NBR as ''Contract Version Number'',#(lf)      -- TF_FIN_CUST_EVT_FCT_CFDL.WRTG_AGT_VRSN_NBR as ''Writing Agent Version Number'',#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_STS_CDE as ''Financial Customer Point Status Code'',#(lf)      -- TF_FIN_CUST_EVT_FCT_CFDL.CUST_AGE as ''Financial Customer Age'',#(lf)      -- TF_FIN_CUST_EVT_FCT_CFDL.AGE_CLAS_CDE as ''Age Class Code'',#(lf)      -- TF_FIN_CUST_EVT_FCT_CFDL.AGE_CLAS_DSCR as ''Age Class Description'',#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_VLU as ''Financial Customer Point Value'',#(lf)       CNF_CUSTOMER_DIM_CFDL.CUST_ID_NBR,#(lf)       CNF_CUSTOMER_DIM_CFDL.CUST_LGAL_FMT_NM, #(lf)       --CNF_CUSTOMER_DIM_CFDL.CUST_BRTH_DT,#(lf)      -- CNF_CUSTOMER_DIM_CFDL.MBR_TYP_CDE as ''Member Type Code'',#(lf)      -- CNF_CUSTOMER_DIM_CFDL.MBR_TYP_DSCR as ''Member Type Description'',#(lf)      -- CNF_CUSTOMER_DIM_CFDL.RSDL_ST_CDE as ''Residential State Code'',#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.CTRC_ISS_DT as ''Contract Issue Date'', #(lf)      -- CNF_CONTRACT_DIM_DTL_CFDL.L5_PLOB_SGRP_CDE as ''Level 5 Product Line Of Business Subgroup Code'',#(lf)      -- CNF_CONTRACT_DIM_DTL_CFDL.L5_PLOB_SGRP_DSCR as ''Level 5 Product Line Of Business Subgroup Description'',#(lf)      -- CNF_CONTRACT_DIM_DTL_CFDL.L4_PLOB_GRP_CDE as ''Level 4 Product Line Of Business Group Code'',#(lf)      -- CNF_CONTRACT_DIM_DTL_CFDL.L4_PLOB_GRP_DSCR as ''Level 4 Product Line Of Business Group Description'',#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L3_PROD_LOB_CDE as ''Level 3 Product Line Of Business Code'',#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L3_PROD_LOB_DSCR as ''Level 3 Product Line Of Business Description'',#(lf)     --  CNF_CONTRACT_DIM_DTL_CFDL.L2_PROD_CHAR_CDE as ''Level 2 Product Character Code'',#(lf)      -- CNF_CONTRACT_DIM_DTL_CFDL.L2_PROD_CHAR_DSCR as ''Level 2 Product Character Description'',#(lf)      -- AGT_DIM_CURR_CFDL.PARY_DSPL_2_NM as ''Assigned FR'',#(lf)      -- AGT_DIM_CURR_CFDL.FRST_NM as ''Employee First Name'',#(lf)      -- AGT_DIM_CURR_CFDL.MDDL_NM as ''Employee Middle Name'',#(lf)      -- AGT_DIM_CURR_CFDL.LST_NM as ''Employee Last Name'',#(lf)      AGT_DIM_CURR_CFDL.FRST_NM || \u0027 \u0027 || AGT_DIM_CURR_CFDL.LST_NM as EMPL_NM,#(lf)      -- AGT_DIM_CURR_CFDL.ADJ_SVC_DT as ''Adjusted Service Date'',#(lf)       AGT_DIM_CURR_CFDL.EMP_ID as ''TS ID'',#(lf)      -- AGT_DIM_CURR_CFDL.EMP_STS_TYP_CDE as ''Employee Status Type Code'',#(lf)      -- AGT_DIM_CURR_CFDL.EMP_STS_TYP_DSCR as ''Employee Status Type Description'',#(lf)      -- AGT_DIM_CURR_CFDL.JOB_TYP_CDE as ''Job Type Code'',#(lf)      -- AGT_DIM_CURR_CFDL.JOB_TYP_DSCR as ''Job Type Description'',#(lf)      -- AGT_DIM_CURR_CFDL.CURR_ROW_IND as ''Current Row Indicator Sales Hierarchy'',#(lf)       IA_DATES_ITRL.CAL_DAY_DT as ''Calendar Date'',#(lf)       --IA_DATES_ITRL.CAL_MTH_NM,#(lf)      -- IA_DATES_ITRL.CAL_MTH_STRT_DT as ''Calendar Month State Date'',#(lf)      -- IA_DATES_ITRL.CAL_MTH_END_DT as ''Calendar Month End Date'',#(lf)       --IA_DATES_ITRL.CAL_YR_QTR_NBR,#(lf)       --IA_DATES_ITRL.CAL_QTR_NM,#(lf)       --IA_DATES_ITRL.CAL_WK_NM,#(lf)       FIN_CUST_ELIG_DIM_CFDL.FIN_CUST_PNT_RSN_CDE as ''Financial Customer Point Reason Code'',#(lf)       FIN_CUST_ELIG_DIM_CFDL.FIN_CUST_PNT_RSN_DSCR as ''Financial Customer Point Reason Description'',#(lf)       FIN_CUST_ELIG_DIM_CFDL.CTRC_RLTN_TYP_CDE as ''Financial Customer Point Relationship Code'',#(lf)       FIN_CUST_ELIG_DIM_CFDL.CTRC_RLTN_TYP_DSCR as ''Financial Customer Point Relationship Description'',#(lf)      -- CASE#(lf)      --    WHEN (CUST_AGE \u003e= 0) AND (CUST_AGE \u003c= 15) THEN \u00270-15\u0027#(lf)      --    WHEN (CUST_AGE \u003e= 16) AND (CUST_AGE \u003c= 25) THEN \u002716-25\u0027#(lf)      --    WHEN (CUST_AGE \u003e= 26) AND (CUST_AGE \u003c= 35) THEN \u002726-35\u0027#(lf)      --    WHEN (CUST_AGE \u003e= 36) AND (CUST_AGE \u003c= 45) THEN \u002736-45\u0027#(lf)      --    WHEN (CUST_AGE \u003e= 46) AND (CUST_AGE \u003c= 55) THEN \u002746-55\u0027#(lf)      --    WHEN (CUST_AGE \u003e= 56) AND (CUST_AGE \u003c= 65) THEN \u002756-65\u0027#(lf)      --    WHEN (CUST_AGE \u003e= 66) AND (CUST_AGE \u003c= 75) THEN \u002766-75\u0027#(lf)      --    WHEN CUST_AGE \u003e 75 THEN \u002776+\u0027#(lf)      -- END#(lf)      --    AS ''Financial Customer Age Group'',#(lf)      -- integer (floor ( (CURRENT DATE - CUST_BRTH_DT) / 10000)) AS ''Member Age'',#(lf)      -- DTRB_PERF_DATES.DTRB_PERF_RPT_WK_END_DT as ''Distribution Performance Reporting Week End Date'',#(lf)      -- DTRB_PERF_DATES.DTRB_PERF_RPT_WK_NBR as ''Distribution Performance Reporting Week Number'',#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_YR_NBR as ''Distribution Performance Reporting Year Number'',#(lf)      -- DTRB_PERF_DATES.DTRB_PERF_RPT_YR_WK_NBR as ''Distribution Performance Reporting Year Week Number'',#(lf)      -- DTRB_PERF_DATES.DTRB_PERF_RPT_WK_TXT,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_YR_TXT #(lf)     --  DTRB_PERF_DATES.DTRB_PERF_RPT_DAY_TXT,#(lf)     --  DTRB_PERF_DATES.DTRB_PERF_RPT_MTH_TXT,#(lf)     --  DTRB_PERF_DATES.DTRB_PERF_RPT_QTR_TXT,#(lf)     --  SALE_HIER_DIM.SALE_HIER_ID as ''Sales Hierarchy Identifier'' #(lf)      -- SALE_HIER_DIM.EFF_BEG_TMSP as ''Effective Begin Timestamp'',#(lf)      -- SALE_HIER_DIM.EFF_END_TMSP as ''Effective End Timestamp'',#(lf)      -- SALE_HIER_DIM.CURR_ROW_IND as ''Agent Current Row Indicator'',#(lf)      -- SALE_HIER_DIM.PRTR_NM as ''Partner Name'',#(lf)      -- SALE_HIER_DIM.MANP_NM as ''Managing Partner Name'',#(lf)      -- SALE_HIER_DIM.ORZN_ZONE_CDE as ''Market'',#(lf)      -- SALE_HIER_DIM.ORZN_ZONE_DSCR as ''Organization Zone Description'',#(lf)      -- SALE_HIER_DIM.ORZN_DEPT_CDE as ''RFO'',#(lf)      -- SALE_HIER_DIM.ORZN_DEPT_DSCR as ''Organization Department Description'',#(lf)      -- SALE_HIER_DIM.ORZN_DIV_CDE as ''Organization Division Code'',#(lf)      -- SALE_HIER_DIM.ORZN_DIV_DSCR as ''Organization Division Description'',#(lf)      -- SALE_HIER_DIM.SALE_HIER_DIM_SK as ''Sales Hierarchy Dimension Surrogate Key''#(lf)#(lf)  FROM ((((((COMMON.IA_DATES_ITRL IA_DATES_ITRL INNER JOIN#(lf)             COMMON.DTRB_PERF_DATES DTRB_PERF_DATES#(lf)          ON (IA_DATES_ITRL.DT_SK = DTRB_PERF_DATES.DT_SK)) LEFT OUTER JOIN#(lf)             SALES.TF_FIN_CUST_EVT_FCT_CFDL TF_FIN_CUST_EVT_FCT_CFDL#(lf)          ON (IA_DATES_ITRL.DT_SK = TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_CRNG_DT_SK)) RIGHT OUTER JOIN#(lf)             HUMAN_RESOURCES.SALE_HIER_DIM SALE_HIER_DIM#(lf)          ON (SALE_HIER_DIM.SALE_HIER_DIM_SK = TF_FIN_CUST_EVT_FCT_CFDL.SLHR_DIM_CURR_CRNG_AGT_SK)) LEFT OUTER JOIN#(lf)             MEMBER.CNF_CUSTOMER_DIM_CFDL CNF_CUSTOMER_DIM_CFDL#(lf)          ON (CNF_CUSTOMER_DIM_CFDL.CUST_SK = TF_FIN_CUST_EVT_FCT_CFDL.CUST_SK)) LEFT OUTER JOIN#(lf)             HUMAN_RESOURCES.AGT_DIM_CURR_CFDL AGT_DIM_CURR_CFDL#(lf)          ON (AGT_DIM_CURR_CFDL.AGT_DIM_SK = TF_FIN_CUST_EVT_FCT_CFDL.CRNG_AGT_SK)) RIGHT OUTER JOIN#(lf)             SALES.FIN_CUST_ELIG_DIM_CFDL FIN_CUST_ELIG_DIM_CFDL#(lf)          ON (FIN_CUST_ELIG_DIM_CFDL.FIN_CUST_PNT_ELIG_DIM_SK = TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_ELIG_DIM_SK)) LEFT OUTER JOIN#(lf)             CONTRACT.CNF_CONTRACT_DIM_DTL_CFDL CNF_CONTRACT_DIM_DTL_CFDL#(lf)          ON (CNF_CONTRACT_DIM_DTL_CFDL.CTRC_SK = TF_FIN_CUST_EVT_FCT_CFDL.CTRC_SK) and #(lf)             (CNF_CONTRACT_DIM_DTL_CFDL.VRSN_NBR = TF_FIN_CUST_EVT_FCT_CFDL.CTRC_VRSN_NBR)#(lf)                     #(lf) WHERE (AGT_DIM_CURR_CFDL.CURR_ROW_IND = \u0027Y\u0027)#(lf)   AND (SALE_HIER_DIM.CURR_ROW_IND = \u0027Y\u0027)#(lf)   AND (sale_hier_dim.ORZN_DEPT_CDE in (\u00270001\u0027, \u00270115\u0027,\u00270165\u0027,\u00270190\u0027,\u00270240\u0027,\u00270283\u0027,\u00270291\u0027,\u00270361\u0027,\u00270365\u0027,\u00270384\u0027,\u00270410\u0027,\u00270435\u0027,\u00270475\u0027,\u00270496\u0027,\u00270525\u0027,\u00270529\u0027,\u00270810\u0027)#(lf)    or AGT_DIM_CURR_CFDL.ORZN_DEPT_CDE in (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027))  #(lf)AND DTRB_PERF_DATES.DTRB_PERF_RPT_YR_NBR in (\u00272020\u0027,\u00272021\u0027,\u00272022\u0027,\u00272023\u0027)#(lf)   AND substring(SALE_HIER_DIM.SALE_HIER_ID,1,2)=\u0027TS\u0027#(lf)   and TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_VLU \u003c\u003e 0']),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Contract Issue Date', type date}, {'Calendar Date', type date}})in    #'Changed Type'"}],"roles":[{"name":"Home Office","modelPermission":"Read","members":[{"memberName":"obj:0d216a03-5ecb-4979-be8e-7c3904c3a79e@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"0d216a03-5ecb-4979-be8e-7c3904c3a79e","memberType":"Group","identityProvider":"AzureAD"},{"memberName":"obj:8fda22c8-bc4a-4aba-bdea-045657fd23df@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"8fda22c8-bc4a-4aba-bdea-045657fd23df","memberType":"Group","identityProvider":"AzureAD"}],"tablePermissions":[{"name":"Role Level Security","filterExpression":" [AD Group] \u003c\u003e 'PBI_FLD_RPTG_HO' "}]},{"name":"Field Leader","modelPermission":"Read","members":[{"memberName":"obj:de18b88a-5b86-4d5a-bc53-8523bc34bc5c@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"de18b88a-5b86-4d5a-bc53-8523bc34bc5c","memberType":"Group","identityProvider":"AzureAD"},{"memberName":"obj:bc106c61-ca17-4fc1-9713-5893454f8368@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"bc106c61-ca17-4fc1-9713-5893454f8368","memberType":"Group","identityProvider":"AzureAD"},{"memberName":"obj:a9d8eb7f-8e75-4e5e-b329-caf9fcffa9ea@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"a9d8eb7f-8e75-4e5e-b329-caf9fcffa9ea","memberType":"Group","identityProvider":"AzureAD"}],"tablePermissions":[{"name":"Role Level Security","filterExpression":"[Department Number] = lookupvalue([Department Number],[REPORT_TO_EMAIL],username())"}]},{"name":"COE","modelPermission":"Read","members":[{"memberName":"obj:2f621ad2-0668-4906-bf26-4d5ce281db46@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"2f621ad2-0668-4906-bf26-4d5ce281db46","memberType":"Group","identityProvider":"AzureAD"}],"tablePermissions":[{"name":"Role Level Security","filterExpression":"[AD Group] \u003c\u003e 'PBI_FLD_RPTG_COE'  "}]}],"configuredBy":"Lori.ZovarLanser@Thrivent.com","configuredById":"1bc11d78-86b7-4181-9cff-cd1c751c4ac4","isEffectiveIdentityRequired":true,"isEffectiveIdentityRolesRequired":true,"refreshSchedule":{"days":["Monday"],"times":["15:00"],"enabled":true,"localTimeZoneId":"Central Standard Time","notifyOption":"MailOnFailure"},"targetStorageMode":"Abf","createdDate":"2023-07-21T19:36:26.797","contentProviderType":"PbixInImportMode"},{"id":"6d7fcae2-ea02-4669-aa05-2025e3597f80","name":"Leader Conference Tracker","tables":[{"name":"CNF_EMP_DIM_DTL","isHidden":false,"storageMode":"Import","columns":[{"name":"ORZN_DEPT_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_STS_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TRMN_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SALE_HIER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EFF_BEG_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"EFF_END_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"ORZN_ZONE_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_DEPT_CDE","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = DB2.Database('podwh021:50000', 'podwh021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT DISTINCT#(lf)T1.SALE_HIER_ID,#(lf)t1.EFF_BEG_TMSP,#(lf)t1.EFF_END_TMSP,#(lf)t1.orzn_zone_cde,#(lf)t1.orzn_dept_dscr,#(lf)t2.orzn_dept_cde,#(lf)t2.EMP_ID,#(lf)t2.EMP_STS_TYP_CDE,#(lf)t2.trmn_dt,#(lf)t2.JOB_TYP_CDE,#(lf)t2.JOB_TYP_DSCR,#(lf)t2.EMP_NM#(lf)FROM#(lf)SEMANTIC.SALES_HIERARCHY_DIMENSION t1#(lf)left JOIN HUMAN_RESOURCES.CNF_EMP_DIM_DTL_CURR_CFDL t2 ON T1.SALE_HIER_ID = T2.emp_id#(lf)where t1.CURR_ROW_IND = \u0027Y\u0027#(lf)and t2.emp_sts_typ_cde in (\u0027A\u0027)#(lf)and t1.EFF_END_TMSP is null#(lf)AND T2.CURR_ROW_IND = \u0027Y\u0027#(lf)and t1.EFF_END_TMSP is null#(lf)and t2.JOB_TYP_CDE IN (\u0027001004\u0027, \u0027001005\u0027, \u0027001007\u0027, \u0027001011\u0027)']),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'EFF_BEG_TMSP', type date}, {'EFF_END_TMSP', type date}})in    #'Changed Type'"}]},{"name":"WORKER_STATUS_FCT_DATES","isHidden":false,"storageMode":"Import","columns":[{"name":"SRC_SYS_KEY_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"WORKER_STS_FCT_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"WORKER_STS_FCT_MKT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_DEPT_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EFF_BEG_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"ORZN_ZONE_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Workday Leader Directory.Cost Center","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"0630 Leader Backup.Employee ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Sql.Database('dbedwdwprd', 'enterprisedatamart', [Query='SELECT#(lf)b.SRC_SYS_KEY_TXT,#(lf)b.FRST_NM+\u0027 \u0027+b.LST_NM AS EMP_NM,#(lf)c.ORZN_ZONE_CDE,#(lf)c.ORZN_DEPT_CDE,#(lf)a.JOB_TYP_CDE,#(lf)CAST(a.EFF_BEG_DT AS date) AS EFF_BEG_DT,#(lf)ADJ_SVC_DT#(lf)FROM#(lf)[DM_01].[WORKER_STATUS_FCT] a#(lf)LEFT JOIN#(lf)[DM_01].[ORGANIZATION_DIM] b#(lf)ON a.ORZN_DIM_SK=b.ORZN_DIM_SK#(lf)LEFT JOIN#(lf)[DM_01].[SALE_HIER_DIM] c#(lf)ON (b.SRC_SYS_KEY_TXT=c.SALE_HIER_ID AND c.EFF_END_DT=\u00279999-12-31 00:00:00\u0027 AND c.CURR_ROW_IND=\u0027Y\u0027)#(lf)WHERE#(lf)(#(lf)--a.JOB_TYP_CDE=\u0027001004\u0027 OR#(lf)a.JOB_TYP_CDE=\u0027001005\u0027 OR#(lf)a.JOB_TYP_CDE=\u0027001011\u0027 OR#(lf)a.JOB_TYP_CDE=\u0027001007\u0027#(lf)) AND #(lf)b.CURR_ROW_IND=\u0027Y\u0027 AND a.EFF_END_DT=\u00279999-12-31 00:00:00\u0027 AND EMP_STS_TYP_CDE=\u0027A\u0027']),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'EFF_BEG_DT', type date}, {'ADJ_SVC_DT', type date}}),    #'Filtered Rows' = Table.SelectRows(#'Changed Type', each [JOB_TYP_CDE] \u003c\u003e '001004'),    #'Removed Columns' = Table.RemoveColumns(#'Filtered Rows',{'ADJ_SVC_DT'}),    #'Merged Queries' = Table.NestedJoin(#'Removed Columns', {'SRC_SYS_KEY_TXT'}, #'Workday Leader Directory', {'Employee ID'}, 'Workday Leader Directory', JoinKind.LeftOuter),    #'Expanded Workday Leader Directory' = Table.ExpandTableColumn(#'Merged Queries', 'Workday Leader Directory', {'Cost Center', 'Start Date in Current Job OR Hire Date', 'Worker'}, {'Workday Leader Directory.Cost Center', 'Workday Leader Directory.Start Date in Current Job OR Hire Date', 'Workday Leader Directory.Worker'}),    #'Added Custom1' = Table.AddColumn(#'Expanded Workday Leader Directory', 'Final Name', each if [Workday Leader Directory.Worker] is null then [EMP_NM] else [Workday Leader Directory.Worker]),    #'Removed Columns2' = Table.RemoveColumns(#'Added Custom1',{'EMP_NM', 'Workday Leader Directory.Worker'}),    #'Reordered Columns' = Table.ReorderColumns(#'Removed Columns2',{'SRC_SYS_KEY_TXT', 'Final Name', 'ORZN_ZONE_CDE', 'ORZN_DEPT_CDE', 'JOB_TYP_CDE', 'EFF_BEG_DT', 'Workday Leader Directory.Cost Center', 'Workday Leader Directory.Start Date in Current Job OR Hire Date'}),    #'Renamed Columns2' = Table.RenameColumns(#'Reordered Columns',{{'Final Name', 'EMP_NM'}}),    #'Merged Queries1' = Table.NestedJoin(#'Renamed Columns2', {'SRC_SYS_KEY_TXT'}, #'Market Mapping', {'Zone_Leader_TSID'}, 'Market Mapping', JoinKind.LeftOuter),    #'Expanded Market Mapping' = Table.ExpandTableColumn(#'Merged Queries1', 'Market Mapping', {'HIER_ID'}, {'Market Mapping.HIER_ID'}),    #'Renamed Columns' = Table.RenameColumns(#'Expanded Market Mapping',{{'ORZN_ZONE_CDE', 'WORKER_STS_FCT_MKT'}, {'Market Mapping.HIER_ID', 'ORZN_ZONE_CDE'}, {'EFF_BEG_DT', 'WORKER_STS_FCT_DT'}, {'Workday Leader Directory.Start Date in Current Job OR Hire Date', 'EFF_BEG_DT'}}),    #'Merged Queries2' = Table.NestedJoin(#'Renamed Columns', {'SRC_SYS_KEY_TXT'}, #'0630 Leader Backup', {'Employee ID'}, '0630 Leader Backup', JoinKind.LeftOuter),    #'Expanded 0630 Leader Backup' = Table.ExpandTableColumn(#'Merged Queries2', '0630 Leader Backup', {'Employee ID'}, {'0630 Leader Backup.Employee ID'}),    #'Filtered Rows1' = Table.SelectRows(#'Expanded 0630 Leader Backup', each ([0630 Leader Backup.Employee ID] \u003c\u003e null))in    #'Filtered Rows1'"}]},{"name":"WMFC Detail","isHidden":false,"storageMode":"Import","columns":[{"name":"JOIN VALUE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Title","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Segment","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Tenure Year","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Category","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Report to TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Report to Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market Number","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Capacity Dashboard//WMFC Information.xlsx'), null, true),    #'WMFC Detail_Sheet' = Source{[Item='WMFC Detail',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'WMFC Detail_Sheet', [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'JOIN VALUE', type text}, {'RFO', type text}, {'Market', type text}, {'TSID', type text}, {'Name', type text}, {'Job Code', type text}, {'Job Title', type text}, {'Segment', type text}, {'Tenure Year', type text}, {'Job Type', type text}, {'Category', type text}, {'Report to TSID', type text}, {'Report to Name', type text}}),    #'Merged Columns' = Table.CombineColumns(#'Changed Type',{'RFO', 'Market'},Combiner.CombineTextByDelimiter('-', QuoteStyle.None),'Market Number'),    #'Filtered Rows' = Table.SelectRows(#'Merged Columns', each true)in    #'Filtered Rows'"}]},{"name":"New Clients","isHidden":false,"storageMode":"Import","columns":[{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"YTD New Clients","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = DB2.Database('podwh021:50000', 'podwh021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT IA_DATES_ITRL.DT_SK,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.CTRC_VRSN_NBR,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.WRTG_AGT_VRSN_NBR,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_STS_CDE,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.CUST_AGE,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.CUST_SK,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.AGE_CLAS_CDE,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.AGE_CLAS_DSCR,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_VLU,#(lf)       CNF_CUSTOMER_DIM_CFDL.CUST_LGAL_FMT_NM, #(lf)       CNF_CUSTOMER_DIM_CFDL.CUST_BRTH_DT,#(lf)       CNF_CUSTOMER_DIM_CFDL.MBR_TYP_CDE,#(lf)       CNF_CUSTOMER_DIM_CFDL.MBR_TYP_DSCR,#(lf)       CNF_CUSTOMER_DIM_CFDL.RSDL_ST_CDE,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.CTRC_ISS_DT, #(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L5_PLOB_SGRP_CDE,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L5_PLOB_SGRP_DSCR,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L4_PLOB_GRP_CDE,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L4_PLOB_GRP_DSCR,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L3_PROD_LOB_CDE,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L3_PROD_LOB_DSCR,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L2_PROD_CHAR_CDE,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L2_PROD_CHAR_DSCR,#(lf)       AGT_DIM_CURR_CFDL.PARY_DSPL_2_NM,#(lf)       AGT_DIM_CURR_CFDL.FRST_NM,#(lf)       AGT_DIM_CURR_CFDL.MDDL_NM,#(lf)       AGT_DIM_CURR_CFDL.LST_NM,#(lf)       AGT_DIM_CURR_CFDL.ADJ_SVC_DT,#(lf)       AGT_DIM_CURR_CFDL.EMP_ID,#(lf)       AGT_DIM_CURR_CFDL.EMP_STS_TYP_CDE,#(lf)       AGT_DIM_CURR_CFDL.EMP_STS_TYP_DSCR,#(lf)       AGT_DIM_CURR_CFDL.JOB_TYP_CDE,#(lf)       AGT_DIM_CURR_CFDL.JOB_TYP_DSCR,#(lf)       AGT_DIM_CURR_CFDL.CURR_ROW_IND,#(lf)       IA_DATES_ITRL.CAL_DAY_DT,#(lf)       IA_DATES_ITRL.CAL_MTH_NM,#(lf)       IA_DATES_ITRL.CAL_MTH_STRT_DT,#(lf)       IA_DATES_ITRL.CAL_MTH_END_DT,#(lf)       IA_DATES_ITRL.CAL_YR_QTR_NBR,#(lf)       IA_DATES_ITRL.CAL_QTR_NM,#(lf)       IA_DATES_ITRL.CAL_WK_NM,#(lf)       FIN_CUST_ELIG_DIM_CFDL.FIN_CUST_PNT_RSN_CDE,#(lf)       FIN_CUST_ELIG_DIM_CFDL.FIN_CUST_PNT_RSN_DSCR,#(lf)       FIN_CUST_ELIG_DIM_CFDL.CTRC_RLTN_TYP_CDE,#(lf)       FIN_CUST_ELIG_DIM_CFDL.CTRC_RLTN_TYP_DSCR,#(lf)       CASE#(lf)          WHEN (CUST_AGE \u003e= 0) AND (CUST_AGE \u003c= 15) THEN \u00270-15\u0027#(lf)          WHEN (CUST_AGE \u003e= 16) AND (CUST_AGE \u003c= 25) THEN \u002716-25\u0027#(lf)          WHEN (CUST_AGE \u003e= 26) AND (CUST_AGE \u003c= 35) THEN \u002726-35\u0027#(lf)          WHEN (CUST_AGE \u003e= 36) AND (CUST_AGE \u003c= 45) THEN \u002736-45\u0027#(lf)          WHEN (CUST_AGE \u003e= 46) AND (CUST_AGE \u003c= 55) THEN \u002746-55\u0027#(lf)          WHEN (CUST_AGE \u003e= 56) AND (CUST_AGE \u003c= 65) THEN \u002756-65\u0027#(lf)          WHEN (CUST_AGE \u003e= 66) AND (CUST_AGE \u003c= 75) THEN \u002766-75\u0027#(lf)          WHEN CUST_AGE \u003e 75 THEN \u002776+\u0027#(lf)       END#(lf)          AS Member_Age_Group,#(lf)       integer (floor ( (CURRENT DATE - CUST_BRTH_DT) / 10000)) AS Member_Age,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_WK_END_DT,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_WK_NBR,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_YR_NBR,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_YR_WK_NBR,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_WK_TXT,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_YR_TXT,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_DAY_TXT,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_MTH_TXT,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_QTR_TXT,#(lf)       SALE_HIER_DIM.SALE_HIER_ID,#(lf)       SALE_HIER_DIM.EFF_BEG_TMSP,#(lf)       SALE_HIER_DIM.EFF_END_TMSP,#(lf)       SALE_HIER_DIM.CURR_ROW_IND,#(lf)       SALE_HIER_DIM.PRTR_NM,#(lf)       SALE_HIER_DIM.MANP_NM,#(lf)       SALE_HIER_DIM.ORZN_ZONE_CDE,#(lf)       SALE_HIER_DIM.ORZN_ZONE_DSCR,#(lf)       (LEFT(SALE_HIER_DIM.ORZN_ZONE_CDE,4)) as ORZN_DEPT_CDE,#(lf)       SALE_HIER_DIM.ORZN_DEPT_DSCR,#(lf)       SALE_HIER_DIM.ORZN_DIV_CDE,#(lf)       SALE_HIER_DIM.ORZN_DIV_DSCR,#(lf)       SALE_HIER_DIM.ORZN_SUB_DEPT_CDE,#(lf)       SALE_HIER_DIM.SALE_HIER_DIM_SK#(lf)#(lf)  FROM ((((((COMMON.IA_DATES_ITRL IA_DATES_ITRL#(lf)             INNER JOIN COMMON.DTRB_PERF_DATES DTRB_PERF_DATES#(lf)                ON (IA_DATES_ITRL.DT_SK = DTRB_PERF_DATES.DT_SK))#(lf)            LEFT OUTER JOIN#(lf)            SALES.TF_FIN_CUST_EVT_FCT_CFDL TF_FIN_CUST_EVT_FCT_CFDL#(lf)               ON (IA_DATES_ITRL.DT_SK =#(lf)                      TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_CRNG_DT_SK))#(lf)           RIGHT OUTER JOIN HUMAN_RESOURCES.SALE_HIER_DIM SALE_HIER_DIM#(lf)              ON (SALE_HIER_DIM.SALE_HIER_DIM_SK =#(lf)                     TF_FIN_CUST_EVT_FCT_CFDL.SLHR_DIM_CURR_CRNG_AGT_SK))#(lf)          LEFT OUTER JOIN MEMBER.CNF_CUSTOMER_DIM_CFDL CNF_CUSTOMER_DIM_CFDL#(lf)             ON (CNF_CUSTOMER_DIM_CFDL.CUST_SK =#(lf)                    TF_FIN_CUST_EVT_FCT_CFDL.CUST_SK))#(lf)         LEFT OUTER JOIN HUMAN_RESOURCES.AGT_DIM_CURR_CFDL AGT_DIM_CURR_CFDL#(lf)            ON (AGT_DIM_CURR_CFDL.AGT_DIM_SK =#(lf)                   TF_FIN_CUST_EVT_FCT_CFDL.CRNG_AGT_SK))#(lf)        RIGHT OUTER JOIN SALES.FIN_CUST_ELIG_DIM_CFDL FIN_CUST_ELIG_DIM_CFDL#(lf)           ON (FIN_CUST_ELIG_DIM_CFDL.FIN_CUST_PNT_ELIG_DIM_SK =#(lf)                  TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_ELIG_DIM_SK))#(lf)       LEFT OUTER JOIN#(lf)       CONTRACT.CNF_CONTRACT_DIM_DTL_CFDL CNF_CONTRACT_DIM_DTL_CFDL#(lf)          ON     (CNF_CONTRACT_DIM_DTL_CFDL.CTRC_SK =#(lf)                     TF_FIN_CUST_EVT_FCT_CFDL.CTRC_SK)#(lf)            and   (CNF_CONTRACT_DIM_DTL_CFDL.VRSN_NBR =#(lf)                     TF_FIN_CUST_EVT_FCT_CFDL.CTRC_VRSN_NBR)#(lf)WHERE     (AGT_DIM_CURR_CFDL.CURR_ROW_IND = \u0027Y\u0027)#(lf)     #(lf)       AND (SALE_HIER_DIM.CURR_ROW_IND = \u0027Y\u0027)#(lf)       AND sale_hier_dim.ORZN_DEPT_CDE in (\u00270001\u0027,\u00270115\u0027,\u00270190\u0027,\u00270283\u0027,\u00270291\u0027,\u00270361\u0027,\u00270383\u0027,\u00270384\u0027,\u00270435\u0027,\u00270525\u0027,\u00270716\u0027)#(lf)       AND DTRB_PERF_DATES.DTRB_PERF_RPT_YR_NBR in (\u00272021\u0027,\u00272022\u0027,\u00272023\u0027)#(lf)']),    #'Renamed Columns' = Table.RenameColumns(Source,{{'ADJ_SVC_DT', 'Adjusted Service Date'}, {'AGE_CLAS_CDE', 'Age Class Code'}, {'AGE_CLAS_DSCR', 'Age Class Description'}, {'CTRC_RLTN_TYP_CDE', 'Financial Customer Point Relationship Code'}, {'CTRC_RLTN_TYP_DSCR', 'Financial Customer Point Relationship Description'}, {'CTRC_VRSN_NBR', 'Contract Version Number'}, {'CUST_AGE', 'Financial Customer Age'}, {'MEMBER_AGE', 'Member Age'}, {'EFF_BEG_TMSP', 'Effective Begin Timestamp'}, {'EFF_END_TMSP', 'Effective End Timestamp'}, {'EMP_ID', 'Employee Identifier'}, {'EMP_STS_TYP_CDE', 'Employee Status Type Code'}, {'EMP_STS_TYP_DSCR', 'Employee Status Type Description'}, {'FIN_CUST_PNT_RSN_CDE', 'Financial Customer Point Reason Code'}, {'FIN_CUST_PNT_RSN_DSCR', 'Financial Customer Point Reason Description'}, {'FIN_CUST_PNT_STS_CDE', 'Financial Customer Point Status Code'}, {'FIN_CUST_PNT_VLU', 'Financial Customer Point Value'}, {'FRST_NM', 'Employee First Name'}, {'JOB_TYP_CDE', 'Job Type Code'}, {'JOB_TYP_DSCR', 'Job Type Description'}, {'L2_PROD_CHAR_CDE', 'Level 2 Product Character Code'}, {'L2_PROD_CHAR_DSCR', 'Level 2 Product Character Description'}, {'L3_PROD_LOB_CDE', 'Level 3 Product Line Of Business Code'}, {'L3_PROD_LOB_DSCR', 'Level 3 Product Line Of Business Description'}, {'L4_PLOB_GRP_CDE', 'Level 4 Product Line Of Business Group Code'}, {'L4_PLOB_GRP_DSCR', 'Level 4 Product Line Of Business Group Description'}, {'L5_PLOB_SGRP_CDE', 'Level 5 Product Line Of Business Subgroup Code'}, {'L5_PLOB_SGRP_DSCR', 'Level 5 Product Line Of Business Subgroup Description'}, {'LST_NM', 'Employee Last Name'}, {'MANP_NM', 'Managing Partner Name'}, {'MBR_TYP_CDE', 'Member Type Code'}, {'MBR_TYP_DSCR', 'Member Type Description'}, {'ORZN_DEPT_CDE', 'Organization Department Code'}, {'ORZN_DEPT_DSCR', 'Organization Department Description'}, {'ORZN_DIV_CDE', 'Organization Division Code'}, {'ORZN_DIV_DSCR', 'Organization Division Description'}, {'ORZN_ZONE_CDE', 'Organization Zone Code'}, {'ORZN_ZONE_DSCR', 'Organization Zone Description'}, {'PARY_DSPL_2_NM', 'Assigned FR'}, {'PRTR_NM', 'Partner Name'}, {'RSDL_ST_CDE', 'Residential State Code'}, {'SALE_HIER_DIM_SK', 'Sales Hierarchy Dimension Surrogate Key'}, {'SALE_HIER_ID', 'Sales Hierarchy Identifier'}, {'WRTG_AGT_VRSN_NBR', 'Writing Agent Version Number'}, {'MDDL_NM', 'Employee Middle Name'}, {'CAL_DAY_DT', 'Calendar Date'}, {'CAL_MTH_END_DT', 'Calendar Month End Date'}, {'CAL_MTH_STRT_DT', 'Calendar Month Start Date'}, {'DT_SK', 'Date Surrogate Key'}, {'CURR_ROW_IND', 'Current Row Indicator Sales Hierarchy'}, {'CURR_ROW_IND2', 'Agent Current Row Indicator'}, {'MEMBER_AGE_GROUP', 'Financial Customer Age Group'}, {'DTRB_PERF_RPT_WK_END_DT', 'Distribution Performance Reporting Week End Date'}, {'DTRB_PERF_RPT_WK_NBR', 'Distribution Performance Reporting Week Number'}, {'DTRB_PERF_RPT_YR_NBR', 'Distribution Performance Reporting Year Number'}, {'DTRB_PERF_RPT_YR_WK_NBR', 'Distribution Performance Reporting Year Week Number'}}),    #'Removed Columns' = Table.RemoveColumns(#'Renamed Columns',{'CAL_MTH_NM', 'CAL_YR_QTR_NBR', 'CAL_QTR_NM', 'CAL_WK_NM'}),    #'Renamed Columns1' = Table.RenameColumns(#'Removed Columns',{{'Organization Department Code', 'RFO'}, {'Organization Zone Code', 'Market'}, {'Employee Identifier', 'TS ID'}, {'ORZN_SUB_DEPT_CDE', 'MVP'}}),    #'Filtered Rows' = Table.SelectRows(#'Renamed Columns1', each ([DTRB_PERF_RPT_YR_TXT] = 'CURRENT')),    #'Grouped Rows' = Table.Group(#'Filtered Rows', {'Market'}, {{'YTD New Clients', each List.Sum([Financial Customer Point Value]), type nullable number}})in    #'Grouped Rows'"}]},{"name":"Pace to Perf Snapshot","isHidden":false,"storageMode":"Import","columns":[{"name":"Organization Dimension Surrogate Key","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Organization Dimension Version Number","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Organization Lead Dimension Surrogate Key","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Organization Lead Dimension Version Number","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Pace Performance Target Dimension Surrogate Key","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Pace Performance Target Version Number","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Process Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Tenure Data","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Month","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"EOQ_Month","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"EOY_Month","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Tenure_Months","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EOY_Tenure","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EOQ_Tenure","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EOM_Tenure","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Production Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Snapshot Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Business Interruption Day Value","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FP_Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Original Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Leader_TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Leader_Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Life and Health GRID Credit Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"LH_Pace_Target","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"GRID Credit Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Pace_Target","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EOY_Target","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EOY_Range_Amt","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EOQ_Target","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EOQ_Range_Amt","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EOM_Target","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EOM_Range_Amt","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"ABOVE_BELOW","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ABOVE_BELOW_LH","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Prior Advisor Experience Indicator","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CURR_WK_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Week Start.Week_Start_Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"JOINVALUE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"OVERRIDES.Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Sql.Database('dbedwdwprd', 'enterprisedatamart', [Query='SELECT#(lf)PACE_QUERY.[Organization Dimension Surrogate Key],#(lf)PACE_QUERY.[Organization Dimension Version Number],#(lf)PACE_QUERY.[Organization Lead Dimension Surrogate Key],#(lf)PACE_QUERY.[Organization Lead Dimension Version Number],#(lf)PACE_QUERY.[Pace Performance Target Dimension Surrogate Key],#(lf)PACE_QUERY.[Pace Performance Target Version Number],#(lf)PACE_QUERY.[Process Date],#(lf)PACE_QUERY.[Tenure Data],#(lf)PACE_QUERY.[Month],#(lf)PACE_QUERY.[EOQ_Month],#(lf)PACE_QUERY.[EOY_Month],#(lf)PACE_QUERY.[Tenure_Months],#(lf)PACE_QUERY.[EOY_Tenure],#(lf)PACE_QUERY.[EOQ_Tenure],#(lf)PACE_QUERY.[EOM_Tenure],#(lf)PACE_QUERY.[Production Date],#(lf)PACE_QUERY.[Snapshot Type Code],#(lf)PACE_QUERY.[Business Interruption Day Value],#(lf)PACE_QUERY.[TSID],#(lf)PACE_QUERY.[FP_Name],#(lf)PACE_QUERY.[Job Type Code],#(lf)PACE_QUERY.[TAG],#(lf)PACE_QUERY.[Market],#(lf)PACE_QUERY.[Leader_TSID],#(lf)PACE_QUERY.[Leader_Name],#(lf)PACE_QUERY.[Life and Health GRID Credit Amount],#(lf)PACE_QUERY.[LH_Pace_Target],#(lf)PACE_QUERY.[GRID Credit Amount],#(lf)PACE_QUERY.[Pace_Target],#(lf)PACE_QUERY.[EOY_Target],#(lf)PACE_QUERY.[EOY_Range_Amt],#(lf)PACE_QUERY.[EOQ_Target],#(lf)PACE_QUERY.[EOQ_Range_Amt],#(lf)PACE_QUERY.[EOM_Target],#(lf)PACE_QUERY.[EOM_Range_Amt],#(lf)(CASE#(lf)WHEN CBU_QUERY.[TSID] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) THEN CBU_QUERY.[NEW_ABOVE_BELOW]#(lf)ELSE PACE_QUERY.[ABOVE_BELOW] END) AS ABOVE_BELOW,#(lf)PACE_QUERY.[ABOVE_BELOW_LH],#(lf)PACE_QUERY.[Prior Advisor Experience Indicator],#(lf)PACE_QUERY.[CURR_WK_IND]#(lf)FROM#(lf)(#(lf)SELECT #(lf) a.[Organization Dimension Surrogate Key]#(lf)      ,a.[Organization Dimension Version Number]#(lf)      ,a.[Organization Lead Dimension Surrogate Key]#(lf)      ,a.[Organization Lead Dimension Version Number]#(lf)      ,a.[Pace Performance Target Dimension Surrogate Key]#(lf)      ,a.[Pace Performance Target Version Number]#(lf)      ,a.[Process Date]#(lf)      ,case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end as [Tenure Data]#(lf)         ,datediff(month, case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end, DATEADD(mm, DATEDIFF(mm, 0, GETDATE()) + 1, -1)) as Month#(lf)         --,datediff(month, [Tenure Data], DATEADD (dd, +14, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()) +1, 0))) as EOQ_Month#(lf)#(tab)#(tab) ,datediff(month, case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end, case when GETDATE()\u003eDATEFROMPARTS(year(getdate()),10,16) then (DATEADD (dd, -1, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()) + 1, 0)))#(lf)#(tab)#(tab) else DATEADD (dd, +14, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()-15) + 1, 0))#(lf)#(tab)#(tab) end) as EOQ_Month#(lf)#(tab)#(tab) --,(DATEADD (dd, -1, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()) + 1, 0))) as Current_QTR#(lf)#(tab)#(tab) /*,case when GETDATE()\u003eDATEFROMPARTS(year(getdate()),10,16) then (DATEADD (dd, -1, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()) + 1, 0)))#(lf)#(tab)#(tab) else DATEADD (dd, +14, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()-15) + 1, 0))#(lf)#(tab)#(tab) end as Quarter_End*/#(lf)#(tab)#(tab) --,DATEADD (dd, +14, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()), 0)) as Previous_QTR#(lf)         ,datediff(month, case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end, DATEADD(yy, DATEDIFF(yy, 0, GETDATE()) + 1, -1)) as EOY_Month#(lf)         ,datediff(month, case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end, [Process Date]) - #(lf)         (DATEPART(dd,case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end)*1.0-1.0)/DAY(EOMONTH(case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end)) + #(lf)         (DATEPART(dd,[Process Date])*1.0)/DAY(EOMONTH([Process Date])) as Tenure_Months#(lf)#(lf)       ,datediff(month, case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end,DATEADD(yy, DATEDIFF(yy, 0, GETDATE()) + 1, -1)) - 1 +#(lf)  1-1.0*(day(case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end)-1)/ day(dateadd(m, datediff(m,-1, case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end), -1))#(lf)  + 1.0*(day(DATEADD(yy, DATEDIFF(yy, 0, GETDATE()) + 1, -1))-1)/ day(dateadd(m, datediff(m,-1, DATEADD(yy, DATEDIFF(yy, 0, GETDATE()) + 1, -1)), -1)) as EOY_Tenure#(lf)#(lf)       ,datediff(month, case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end,case when GETDATE()\u003eDATEFROMPARTS(year(getdate()),10,16) then (DATEADD (dd, -1, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()) + 1, 0)))#(lf)#(tab)#(tab) else DATEADD (dd, +14, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()-15) + 1, 0))#(lf)#(tab)#(tab) end) - 1 +#(lf)  1-1.0*(day(case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end)-1)/ day(dateadd(m, datediff(m,-1, case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end), -1))#(lf)  + 1.0*(day(case when GETDATE()\u003eDATEFROMPARTS(year(getdate()),10,16) then (DATEADD (dd, -1, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()) + 1, 0)))#(lf)#(tab)#(tab) else DATEADD (dd, +14, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()-15) + 1, 0))#(lf)#(tab)#(tab) end)-1)/ day(dateadd(m, datediff(m,-1, case when GETDATE()\u003eDATEFROMPARTS(year(getdate()),10,16) then (DATEADD (dd, -1, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()) + 1, 0)))#(lf)#(tab)#(tab) else DATEADD (dd, +14, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()-15) + 1, 0))#(lf)#(tab)#(tab) end), -1)) as EOQ_Tenure#(lf)#(lf)      ,datediff(month, case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end,DATEADD(mm, DATEDIFF(mm, 0, GETDATE()) + 1, -1)) - 1 +#(lf)  1-1.0*(day(case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end)-1)/ day(dateadd(m, datediff(m,-1, case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end), -1))#(lf)  + 1.0*(day(DATEADD(mm, DATEDIFF(mm, 0, GETDATE()) + 1, -1))-1)/ day(dateadd(m, datediff(m,-1, DATEADD(mm, DATEDIFF(mm, 0, GETDATE()) + 1, -1)), -1)) as EOM_Tenure#(lf)      ,a.[Production Date]#(lf)      ,a.[Snapshot Type Code]#(lf)      ,a.[Business Interruption Day Value]#(lf)         ,b.[Source System Key Text] as TSID#(lf)         ,CONCAT(b.[First Name],\u0027 \u0027,b.[Last Name]) as FP_Name#(lf)         ,b.[Job Type Code]#(lf)         ,CONCAT(sale_hier_dim.[ORZN_DEPT_CDE],\u0027-\u0027,sale_hier_dim.[ORZN_DEPT_DSCR]) as TAG#(lf)         ,sale_hier_dim.[ORZN_ZONE_CDE] as Market#(lf)         ,c.[Source System Key Text] as Leader_TSID#(lf)         ,CONCAT(c.[First Name],\u0027 \u0027,c.[Last Name]) as Leader_Name#(lf)      ,a.[Life and Health GRID Credit Amount]#(lf)      ,a.[Life and Health Prorated GRID Credit Amount] as LH_Pace_Target#(lf)      ,a.[GRID Credit Amount]#(lf)      ,[Prorated GRID Credit Amount] as Pace_Target#(lf)         ,d.[GRID Credit Amount] as EOY_Target#(lf)         ,d.[GRID Credit Range Amount] as EOY_Range_Amt#(lf)         ,e.[GRID Credit Amount] as EOQ_Target#(lf)         ,e.[GRID Credit Range Amount] as EOQ_Range_Amt#(lf)         ,f.[GRID Credit Amount] as EOM_Target#(lf)         ,f.[GRID Credit Range Amount] as EOM_Range_Amt#(lf)         ,case when [Prior Advisor Experience Indicator] = \u0027Y\u0027 or [Prorated GRID Credit Amount] = 0 then \u0027\u0027#(lf)         when a.[GRID Credit Amount] \u003e a.[Prorated GRID Credit Amount] then \u0027ABOVE\u0027#(lf)         else \u0027BELOW\u0027#(lf)         end as ABOVE_BELOW#(lf)         ,case when [Prior Advisor Experience Indicator] = \u0027Y\u0027 or [Life and Health Prorated GRID Credit Amount] = 0 then \u0027\u0027#(lf)         when a.[Life and Health GRID Credit Amount] \u003e a.[Life and Health Prorated GRID Credit Amount] then \u0027ABOVE\u0027#(lf)         else \u0027BELOW\u0027#(lf)         end as ABOVE_BELOW_LH#(lf)     ,[Prior Advisor Experience Indicator]#(lf)       ,case when a.[Process Date] = max_process_date.[Max Process Date]then \u0027Y\u0027#(lf)         else \u0027N\u0027#(lf)         end as CURR_WK_IND#(lf)  FROM [EnterpriseDataMart].[DM_01].[Pace Performance Snapshot Fact] a#(lf)  inner join [EnterpriseDataMart].[DM_01].[Organization Dimension] b#(lf)   on (a.[Organization Dimension Surrogate Key]=b.[Organization Dimension Surrogate Key] and#(lf)       (a.[Process Date]\u003c=b.[Effective End Date] and  a.[Process Date]\u003e=b.[Effective Begin Date])#(lf)#(tab)   )#(lf)  inner join (SELECT MAX([Process Date]) [Max Process Date] FROM [EnterpriseDataMart].[DM_01].[Pace Performance Snapshot Fact]) as max_process_date on \u0027a\u0027 = \u0027a\u0027#(lf)  inner join [EnterpriseDataMart].[DM_01].[Date Dimension] dd on (a.[Process Date]=dd.[Calendar Date Date])#(lf)         left join [EnterpriseDataMart].[DM_01].[SALE_HIER_DIM] sale_hier_dim#(lf)    on ((#(lf)    (sale_hier_dim.EFF_BEG_DT\u003c=a.[Process Date])#(lf)        or#(lf)        (#(lf)        (a.[Process Date]\u003c(SELECT min(EFF_BEG_DT) FROM [EnterpriseDataMart].[DM_01].[SALE_HIER_DIM] subq WHERE b.[Source System Key Text]=subq.[SALE_HIER_ID] and subq.CURR_ROW_IND = \u0027Y\u0027))#(lf)        and#(lf)        sale_hier_dim.EFF_BEG_DT=(SELECT min(EFF_BEG_DT) FROM [EnterpriseDataMart].[DM_01].[SALE_HIER_DIM] subq WHERE b.[Source System Key Text]=subq.[SALE_HIER_ID] and subq.CURR_ROW_IND = \u0027Y\u0027)#(lf)        ))#(lf)        and #(lf)        (a.[Process Date]\u003c= DATEADD(day,-1,sale_hier_dim.EFF_END_DT))#(lf)        and sale_hier_dim.CURR_ROW_IND = \u0027Y\u0027#(lf)        and b.[Source System Key Text]=sale_hier_dim.[SALE_HIER_ID])#(lf)  #(lf)  #(lf)  #(lf)  inner join [EnterpriseDataMart].[DM_01].[Organization Dimension] c#(lf)   on (a.[Organization Lead Dimension Surrogate Key]=c.[Organization Dimension Surrogate Key] and#(lf)    (a.[Process Date]\u003c=c.[Effective End Date] and  a.[Process Date]\u003e=c.[Effective Begin Date]))#(lf)  left join [EnterpriseDataMart].[DM_01].[Pace Performance Target Dimension] d#(lf)   on (datediff(month, case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end, DATEADD(yy, DATEDIFF(yy, 0, GETDATE()) + 1, -1))=d.[Calendar Year Month Number])#(lf)  left join [EnterpriseDataMart].[DM_01].[Pace Performance Target Dimension] e#(lf)   on (datediff(month, case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end,case when GETDATE()\u003eDATEFROMPARTS(year(getdate()),10,16) then (DATEADD (dd, -1, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()) + 1, 0)))#(lf)#(tab)#(tab) else DATEADD (dd, +14, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()-15) + 1, 0))#(lf)#(tab)#(tab) end)=e.[Calendar Year Month Number])#(lf)  left join [EnterpriseDataMart].[DM_01].[Pace Performance Target Dimension] f#(lf)   on (datediff(month, case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end, DATEADD(mm, DATEDIFF(mm, 0, GETDATE()) + 1, -1))=f.[Calendar Year Month Number])#(lf)   ) PACE_QUERY#(lf)   LEFT JOIN#(lf)   (#(lf)SELECT #(lf)a.[Process Date],#(lf)b.[Source System Key Text] AS TSID,#(lf)round(datediff(month, case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end, [Process Date]) - #(lf)         (DATEPART(dd,case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end)*1.0-1.0)/DAY(EOMONTH(case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end)) + #(lf)         (DATEPART(dd,[Process Date])*1.0)/DAY(EOMONTH([Process Date])),0,1) as TENURE_TRUNC,#(lf)datediff(month, case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end, [Process Date]) - #(lf)         (DATEPART(dd,case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end)*1.0-1.0)/DAY(EOMONTH(case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end)) + #(lf)         (DATEPART(dd,[Process Date])*1.0)/DAY(EOMONTH([Process Date])) as Tenure_Months,#(lf)ptd_bef.[GRID Credit Amount],#(lf)((ptd_bef.[GRID Credit Range Amount]-ptd_bef.[GRID Credit Amount])*#(lf)(datediff(month, case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end, [Process Date]) - #(lf)         (DATEPART(dd,case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end)*1.0-1.0)/DAY(EOMONTH(case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end)) + #(lf)         (DATEPART(dd,[Process Date])*1.0)/DAY(EOMONTH([Process Date]))-round(datediff(month, case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end, [Process Date]) - #(lf)         (DATEPART(dd,case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end)*1.0-1.0)/DAY(EOMONTH(case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end)) + #(lf)         (DATEPART(dd,[Process Date])*1.0)/DAY(EOMONTH([Process Date])),0,1))+ptd_bef.[GRID Credit Amount]) as Pace_Target,#(lf)CASE#(lf)when [Prior Advisor Experience Indicator] = \u0027Y\u0027 THEN \u0027\u0027#(lf)WHEN#(lf)(#(lf)datediff(month, case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end, [Process Date]) - #(lf)         (DATEPART(dd,case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end)*1.0-1.0)/DAY(EOMONTH(case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end)) + #(lf)         (DATEPART(dd,[Process Date])*1.0)/DAY(EOMONTH([Process Date]))#(lf))\u003c4 THEN \u0027\u0027#(lf)WHEN #(lf)((ptd_bef.[GRID Credit Range Amount]-ptd_bef.[GRID Credit Amount])*#(lf)(datediff(month, case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end, [Process Date]) - #(lf)         (DATEPART(dd,case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end)*1.0-1.0)/DAY(EOMONTH(case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end)) + #(lf)         (DATEPART(dd,[Process Date])*1.0)/DAY(EOMONTH([Process Date]))-round(datediff(month, case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end, [Process Date]) - #(lf)         (DATEPART(dd,case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end)*1.0-1.0)/DAY(EOMONTH(case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end)) + #(lf)         (DATEPART(dd,[Process Date])*1.0)/DAY(EOMONTH([Process Date])),0,1))+ptd_bef.[GRID Credit Amount])#(lf)#(tab)#(tab) \u003c=a.[GRID Credit Amount] THEN \u0027ABOVE\u0027 ELSE \u0027BELOW\u0027 END AS NEW_ABOVE_BELOW#(lf)FROM [EnterpriseDataMart].[DM_01].[Pace Performance Snapshot Fact] a#(lf)  inner join [EnterpriseDataMart].[DM_01].[Organization Dimension] b#(lf)   on (a.[Organization Dimension Surrogate Key]=b.[Organization Dimension Surrogate Key] and#(lf)       b.[Current Row Indicator] = \u0027Y\u0027)#(lf)left join (SELECT * FROM [EnterpriseDataMart].[DM_01].[Pace Performance Target Dimension]) ptd_bef#(lf)on round(datediff(month, case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end, [Process Date]) - #(lf)         (DATEPART(dd,case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end)*1.0-1.0)/DAY(EOMONTH(case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end)) + #(lf)         (DATEPART(dd,[Process Date])*1.0)/DAY(EOMONTH([Process Date])),0,1)=ptd_bef.[Calendar Year Month Number]#(lf)left join (SELECT * FROM [EnterpriseDataMart].[DM_01].[Pace Performance Target Dimension]) ptd_aft#(lf)on (round(datediff(month, case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end, [Process Date]) - #(lf)         (DATEPART(dd,case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end)*1.0-1.0)/DAY(EOMONTH(case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end)) + #(lf)         (DATEPART(dd,[Process Date])*1.0)/DAY(EOMONTH([Process Date])),0,1)+1)=ptd_aft.[Calendar Year Month Number]#(lf)#(tab)#(tab) WHERE b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027)#(lf)   ) CBU_QUERY#(lf)   ON (PACE_QUERY.[Process Date]=CBU_QUERY.[Process Date] AND PACE_QUERY.[TSID]=CBU_QUERY.[TSID])#(lf)   ']),    #'Added Custom' = Table.AddColumn(Source, 'Above/Below', each if [Tenure_Months] \u003c= 2.25 then '' else [ABOVE_BELOW]),    #'Removed Columns' = Table.RemoveColumns(#'Added Custom',{'ABOVE_BELOW'}),    #'Reordered Columns' = Table.ReorderColumns(#'Removed Columns',{'Organization Dimension Surrogate Key', 'Organization Dimension Version Number', 'Organization Lead Dimension Surrogate Key', 'Organization Lead Dimension Version Number', 'Pace Performance Target Dimension Surrogate Key', 'Pace Performance Target Version Number', 'Process Date', 'Tenure Data', 'Month', 'EOQ_Month', 'EOY_Month', 'Tenure_Months', 'EOY_Tenure', 'EOQ_Tenure', 'EOM_Tenure', 'Production Date', 'Snapshot Type Code', 'Business Interruption Day Value', 'TSID', 'FP_Name', 'Job Type Code', 'TAG', 'Market', 'Leader_TSID', 'Leader_Name', 'Life and Health GRID Credit Amount', 'LH_Pace_Target', 'GRID Credit Amount', 'Pace_Target', 'EOY_Target', 'EOY_Range_Amt', 'EOQ_Target', 'EOQ_Range_Amt', 'EOM_Target', 'EOM_Range_Amt', 'Above/Below', 'ABOVE_BELOW_LH', 'Prior Advisor Experience Indicator', 'CURR_WK_IND'}),    #'Renamed Columns' = Table.RenameColumns(#'Reordered Columns',{{'Above/Below', 'ABOVE_BELOW'}}),    #'Merged Queries' = Table.NestedJoin(#'Renamed Columns', {'Process Date'}, #'Week Start', {'Weekly Proc Dt'}, 'Week Start', JoinKind.LeftOuter),    #'Expanded Week Start' = Table.ExpandTableColumn(#'Merged Queries', 'Week Start', {'Week_Start_Date'}, {'Week Start.Week_Start_Date'}),    #'Filtered Rows3' = Table.SelectRows(#'Expanded Week Start', each ([Week Start.Week_Start_Date] \u003c\u003e null)),    #'Filtered Rows' = Table.SelectRows(#'Filtered Rows3', each [Tenure_Months] \u003e= 0),    #'Added Custom1' = Table.AddColumn(#'Filtered Rows', 'JOINVALUE', each DateTime.ToText ([Week Start.Week_Start_Date], 'MM/dd/yy') \u0026 [TSID]),    #'Merged Queries1' = Table.NestedJoin(#'Added Custom1', {'JOINVALUE'}, OVERRIDES, {'Join Value'}, 'OVERRIDES', JoinKind.LeftOuter),    #'Expanded OVERRIDES' = Table.ExpandTableColumn(#'Merged Queries1', 'OVERRIDES', {'Market'}, {'OVERRIDES.Market'}),    #'Renamed Columns1' = Table.RenameColumns(#'Expanded OVERRIDES',{{'Market', 'Original Market'}}),    #'Added Custom2' = Table.AddColumn(#'Renamed Columns1', 'Market', each if [OVERRIDES.Market] is null then [Original Market] else [OVERRIDES.Market])in    #'Added Custom2'"}]},{"name":"Market Developers - Pace","isHidden":false,"storageMode":"Import","columns":[{"name":"CORP_MGR_ID_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CORP_EMP_ID_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"BEG_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"END_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Pace Date1","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Join Value","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////vsshr//shared//Public//DI and BI//Leader Effectiveness Ranking Report//OVERRIDES2.csv'),[Delimiter=',', Columns=5, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'CORP_MGR_ID_CDE', type text}, {'CORP_EMP_ID_CDE', type text}, {'BEG_DATE', type date}, {'END_DATE', type date}, {'Pace Date1', type date}}),    Custom1 = Table.AddColumn(#'Changed Type', 'Join Value', each Date.ToText ([Pace Date1], 'MM/dd/yy') \u0026 [CORP_EMP_ID_CDE])in    Custom1"}]},{"name":"Dir Exceptions","isHidden":false,"storageMode":"Import","columns":[{"name":"SRC_SYS_KEY_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"WORKER_STS_FCT_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"WORKER_STS_FCT_MKT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_DEPT_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EFF_BEG_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"ORZN_ZONE_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Workday Leader Directory.Cost Center","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"0630 Leader Backup.Employee ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = WORKER_STATUS_FCT_DATES,    #'Filtered Rows' = Table.SelectRows(Source, each [SRC_SYS_KEY_TXT] = 'TSXXXXX')in    #'Filtered Rows'"}]},{"name":"Dir - New","isHidden":false,"storageMode":"Import","columns":[{"name":"SRC_SYS_KEY_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"WORKER_STS_FCT_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"WORKER_STS_FCT_MKT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Hires Count","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Hires","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Hires Rank","dataType":"String","isHidden":false,"expression":"Round(Rankx(\u0027Dir - New\u0027,\u0027Dir - New\u0027[Hires Count]),0)","columnType":"Calculated"},{"name":"Pace Rank","dataType":"String","isHidden":false,"expression":"var PaceRank = Round(Rankx(\u0027Dir - New\u0027,\u0027Dir - New\u0027[Pace Dir.Above Count]),0)RETURNBlank()","columnType":"Calculated"},{"name":"ORZN_DEPT_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Pace Dir.Number of Weeks","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Pace Dir.Above Count","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Total Rank","dataType":"String","isHidden":false,"expression":"var TRank =Round(0.30 * \u0027Dir - New\u0027[Hires Rank] + 0.30 * \u0027Dir - New\u0027[Retention Rank] + 0.30 * \u0027Dir - New\u0027[Pace Rank] + 0.1 * \u0027Dir - New\u0027[Advice Rank],1)ReturnBlank()","columnType":"Calculated"},{"name":"EFF_BEG_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"ORZN_ZONE_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG","dataType":"String","isHidden":false,"expression":"LEFT(\u0027Dir - New\u0027[ORZN_ZONE_CDE],4)","columnType":"Calculated"},{"name":"Rank Rank","dataType":"String","isHidden":false,"expression":"var TRank = Round(Rankx(\u0027Dir - New\u0027,[Total Rank],,ASC),0)ReturnBlank()","columnType":"Calculated"},{"name":"Pace Dir.Above Total Count","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Picture","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Workday Leader Directory.Cost Center","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Total Rank 2 Count Column","dataType":"String","isHidden":false,"expression":"calculate(1, filter(ALL(\u0027Dir - New\u0027), [Total Rank]=2))","columnType":"Calculated"},{"name":"Total Rank 5 Count Column","dataType":"String","isHidden":false,"expression":"calculate(1, filter(ALL(\u0027Dir - New\u0027), [Total Rank]=5))","columnType":"Calculated"},{"name":"Picture Rank","dataType":"String","isHidden":false,"expression":"if(and([Rank Rank]=2,[Total Rank 2 Count Column]\u003e1),[Rank Rank],if(and([Rank Rank]=5,[Total Rank 5 Count Column]=1),[Rank Rank],[Rank Rank]))","columnType":"Calculated"},{"name":"Advice Adoption.Adopting Advisors %","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Advice Adoption.Rank (sorted by)","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Advice Rank","dataType":"String","isHidden":false,"expression":"Round(Rankx(\u0027Dir - New\u0027,\u0027Dir - New\u0027[Advice Adoption.Adopting Advisors %]),0)","columnType":"Calculated"},{"name":"0630 Leader Backup.Employee ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Extra Day","dataType":"String","isHidden":false,"expression":"if([Rank Rank]\u003c=5, if(\u0027Dir - New\u0027[Hires Count] \u003e= 6, 'Y', 'N'),'N')","columnType":"Calculated"},{"name":"JOB_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RR Hires.Term Count","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"HeadCount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TermCount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Retention Rate","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Retention Rank","dataType":"String","isHidden":false,"expression":"Round(Rankx(\u0027Dir - New\u0027,\u0027Dir - New\u0027[Retention Rate]),0)","columnType":"Calculated"},{"name":"2023_YE_RDL_DATA_w_Capacity_Info - Detail.Name(s)","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Term List.Name(s)","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Pace Avg","dataType":"String","isHidden":false,"expression":"var Pace = \u0027Dir - New\u0027[Pace Dir.Above Count]ReturnBlank()","columnType":"Calculated"},{"name":"Column","dataType":"String","isHidden":false,"columnType":"Calculated"},{"name":"RR Hires.Hire Dates","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Term List.Term Dates","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = WORKER_STATUS_FCT_DATES,    #'Date FIlter' = Table.SelectRows(Source, each [EFF_BEG_DT] \u003e= #date(2023, 1, 1)),    #'Job Code Filter' = Table.SelectRows(#'Date FIlter', each ([JOB_TYP_CDE] = '001007')),    #'Append Exceptions' = Table.Combine({#'Job Code Filter', #'Dir Exceptions'}),    #'Merge for Pace data' = Table.NestedJoin(#'Append Exceptions', {'ORZN_ZONE_CDE'}, #'Pace Dir', {'Market'}, 'Pace Dir', JoinKind.LeftOuter),    #'Expanded Pace Dir' = Table.ExpandTableColumn(#'Merge for Pace data', 'Pace Dir', {'Number of Weeks', 'Above Total Count', 'Above Count'}, {'Pace Dir.Number of Weeks', 'Pace Dir.Above Total Count', 'Pace Dir.Above Count'}),    #'Replaced Value' = Table.ReplaceValue(#'Expanded Pace Dir',null,0,Replacer.ReplaceValue,{'Pace Dir.Above Count'}),    #'Merge for Hires data' = Table.NestedJoin(#'Replaced Value', {'SRC_SYS_KEY_TXT'}, #'RR Hires', {'CSL TSID'}, 'RR Hires', JoinKind.LeftOuter),    #'Expanded RR Hires' = Table.ExpandTableColumn(#'Merge for Hires data', 'RR Hires', {'Count', 'Hire Dates', 'Name(s)', 'Term Count'}, {'RR Hires.Count', 'RR Hires.Hire Dates', 'RR Hires.Name(s)', 'RR Hires.Term Count'}),    #'Renamed Columns2' = Table.RenameColumns(#'Expanded RR Hires',{{'RR Hires.Count', 'Hires Count'}, {'RR Hires.Name(s)', 'Hires'}}),    #'Replaced Value1' = Table.ReplaceValue(#'Renamed Columns2',null,0,Replacer.ReplaceValue,{'Hires Count'}),    #'Replaced Value4' = Table.ReplaceValue(#'Replaced Value1',null,0,Replacer.ReplaceValue,{'RR Hires.Term Count'}),    Custom1 = Table.AddColumn(#'Replaced Value4', 'Picture', each 'https://myfield.thrivent.com/content/faimages/' \u0026 [SRC_SYS_KEY_TXT] \u0026 '.jpg'),    #'Merged Queries' = Table.NestedJoin(Custom1, {'ORZN_ZONE_CDE'}, #'Advice Adoption', {'Market'}, 'Advice Adoption', JoinKind.LeftOuter),    #'Expanded Advice Adoption' = Table.ExpandTableColumn(#'Merged Queries', 'Advice Adoption', {'Adopting Advisors %', 'Rank (sorted by)'}, {'Advice Adoption.Adopting Advisors %', 'Advice Adoption.Rank (sorted by)'}),    #'Merged Queries1' = Table.NestedJoin(#'Expanded Advice Adoption', {'SRC_SYS_KEY_TXT'}, #'2023_YE_RDL_DATA_w_Capacity_Info', {'CORP_MGR_ID_CDE'}, '2023_YE_RDL_DATA_w_Capacity_Info', JoinKind.LeftOuter),    #'Expanded 2023_YE_RDL_DATA_w_Capacity_Info' = Table.ExpandTableColumn(#'Merged Queries1', '2023_YE_RDL_DATA_w_Capacity_Info', {'HeadCount'}, {'2023_YE_RDL_DATA_w_Capacity_Info.HeadCount'}),    #'Merged Queries2' = Table.NestedJoin(#'Expanded 2023_YE_RDL_DATA_w_Capacity_Info', {'SRC_SYS_KEY_TXT'}, #'2023_YE_RDL_DATA_w_Capacity_Info-Terms', {'CORP_MGR_ID_CDE'}, '2023_YE_RDL_DATA_w_Capacity_Info-Terms', JoinKind.LeftOuter),    #'Expanded 2023_YE_RDL_DATA_w_Capacity_Info-Terms' = Table.ExpandTableColumn(#'Merged Queries2', '2023_YE_RDL_DATA_w_Capacity_Info-Terms', {'TermCount'}, {'2023_YE_RDL_DATA_w_Capacity_Info-Terms.TermCount'}),    #'Renamed Columns' = Table.RenameColumns(#'Expanded 2023_YE_RDL_DATA_w_Capacity_Info-Terms',{{'2023_YE_RDL_DATA_w_Capacity_Info-Terms.TermCount', 'TermCount'}, {'2023_YE_RDL_DATA_w_Capacity_Info.HeadCount', 'HeadCount'}}),    #'Replaced Value2' = Table.ReplaceValue(#'Renamed Columns',null,0,Replacer.ReplaceValue,{'HeadCount'}),    #'Replaced Value3' = Table.ReplaceValue(#'Replaced Value2',null,0,Replacer.ReplaceValue,{'TermCount'}),    #'Added Custom' = Table.AddColumn(#'Replaced Value3', 'Retention Rate', each if [HeadCount]=0 then 0 else (([HeadCount]+[Hires Count]-[TermCount]-[RR Hires.Term Count])/([HeadCount]+[Hires Count]))),    #'Changed Type' = Table.TransformColumnTypes(#'Added Custom',{{'Retention Rate', Percentage.Type}}),    #'Merged Queries3' = Table.NestedJoin(#'Changed Type', {'SRC_SYS_KEY_TXT'}, #'2023_YE_RDL_DATA_w_Capacity_Info - Detail', {'CORP_MGR_ID_CDE'}, '2023_YE_RDL_DATA_w_Capacity_Info - Detail', JoinKind.LeftOuter),    #'Expanded 2023_YE_RDL_DATA_w_Capacity_Info - Detail' = Table.ExpandTableColumn(#'Merged Queries3', '2023_YE_RDL_DATA_w_Capacity_Info - Detail', {'Name(s)'}, {'2023_YE_RDL_DATA_w_Capacity_Info - Detail.Name(s)'}),    #'Merged Queries4' = Table.NestedJoin(#'Expanded 2023_YE_RDL_DATA_w_Capacity_Info - Detail', {'SRC_SYS_KEY_TXT'}, #'Term List', {'CSL TSID'}, 'Term List', JoinKind.LeftOuter),    #'Expanded Term List' = Table.ExpandTableColumn(#'Merged Queries4', 'Term List', {'Name(s)', 'Term Dates'}, {'Term List.Name(s)', 'Term List.Term Dates'})in    #'Expanded Term List'"}]},{"name":"Dev - New","isHidden":false,"storageMode":"Import","columns":[{"name":"SRC_SYS_KEY_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"WORKER_STS_FCT_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"WORKER_STS_FCT_MKT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Pace Dev.Above Pace Count","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"ORZN_DEPT_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Hires Count","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Hires","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Pace Rank","dataType":"String","isHidden":false,"expression":"var Pace = Round(Rankx(\u0027Dev - New\u0027,\u0027Dev - New\u0027[Pace Dev.Above Pace Count]),0)ReturnBlank()","columnType":"Calculated"},{"name":"Hires Rank","dataType":"String","isHidden":false,"expression":"Round(Rankx(\u0027Dev - New\u0027,\u0027Dev - New\u0027[Hires Count]),0)","columnType":"Calculated"},{"name":"Total Rank","dataType":"String","isHidden":false,"expression":"var Rnk = Round(0.6 * \u0027Dev - New\u0027[Pace Rank] + 0.15 * \u0027Dev - New\u0027[Hires Rank],1) + 0.15 * \u0027Dev - New\u0027[Retention Rank] + 0.1 * \u0027Dev - New\u0027[Advice Rank]ReturnBlank()","columnType":"Calculated"},{"name":"EFF_BEG_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"ORZN_ZONE_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Picture","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Rank Rank","dataType":"String","isHidden":false,"expression":"var Rnk = Round(Rankx(\u0027Dev - New\u0027,[Total Rank],,ASC),0)ReturnBlank()","columnType":"Calculated"},{"name":"Rank 1 or 2 Pic","dataType":"String","isHidden":false,"expression":"if(OR([Rank Rank]=1,[Rank Rank]=2),[Picture],'')","columnType":"Calculated"},{"name":"TAG","dataType":"String","isHidden":false,"expression":"if(LEFT(\u0027Dev - New\u0027[ORZN_ZONE_CDE],4)='',LEFT(\u0027Dev - New\u0027[Workday Leader Directory.Cost Center],4),LEFT(\u0027Dev - New\u0027[ORZN_ZONE_CDE],4))","columnType":"Calculated"},{"name":"Workday Leader Directory.Cost Center","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"0630 Leader Backup.Employee ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Extra Day","dataType":"String","isHidden":false,"expression":"if([Rank Rank]\u003c=3, if(\u0027Dev - New\u0027[Pace Dev.Above Pace Count] \u003e= 5, 'Y', 'N'),'N')","columnType":"Calculated"},{"name":"JOB_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Advice Adoption - Developer.% Adoption","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"HeadCount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TermCount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Retention Rate","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"2023_YE_RDL_DATA_w_Capacity_Info - Detail.Name(s)","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Term List.Name(s)","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Term List.Term Dates","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RR Hires.Term Count","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Retention Rank","dataType":"String","isHidden":false,"expression":"Round(Rankx(\u0027Dev - New\u0027,\u0027Dev - New\u0027[Retention Rate]),0)","columnType":"Calculated"},{"name":"Advice Rank","dataType":"String","isHidden":false,"expression":"Round(Rankx(\u0027Dev - New\u0027,\u0027Dev - New\u0027[Advice Adoption - Developer.% Adoption]),0)","columnType":"Calculated"},{"name":"Pace Avg","dataType":"String","isHidden":false,"expression":"var Pace = \u0027Dev - New\u0027[Pace Dev.Above Pace Count]ReturnBlank()","columnType":"Calculated"},{"name":"RR Hires.Hire Dates","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = WORKER_STATUS_FCT_DATES,    #'Date FIlter' = Table.SelectRows(Source, each [EFF_BEG_DT] \u003e= #date(2023, 1, 1)),    #'Job Code Filter' = Table.SelectRows(#'Date FIlter', each [JOB_TYP_CDE] = '001005'),    #'Merged Queries' = Table.NestedJoin(#'Job Code Filter', {'SRC_SYS_KEY_TXT'}, #'Pace Dev', {'Market Developers - Pace.CORP_MGR_ID_CDE'}, 'Pace Dev', JoinKind.LeftOuter),    #'Expanded Pace Dev' = Table.ExpandTableColumn(#'Merged Queries', 'Pace Dev', {'Above Pace Count'}, {'Pace Dev.Above Pace Count'}),    #'Replaced Value' = Table.ReplaceValue(#'Expanded Pace Dev',null,0,Replacer.ReplaceValue,{'Pace Dev.Above Pace Count'}),    #'Merged Queries1' = Table.NestedJoin(#'Replaced Value', {'SRC_SYS_KEY_TXT'}, #'RR Hires', {'CSL TSID'}, 'RR Hires', JoinKind.LeftOuter),    #'Expanded RR Hires' = Table.ExpandTableColumn(#'Merged Queries1', 'RR Hires', {'Count', 'Hire Dates', 'Name(s)', 'Term Count'}, {'RR Hires.Count', 'RR Hires.Hire Dates', 'RR Hires.Name(s)', 'RR Hires.Term Count'}),    #'Replaced Value4' = Table.ReplaceValue(#'Expanded RR Hires',null,0,Replacer.ReplaceValue,{'RR Hires.Term Count'}),    #'Renamed Columns' = Table.RenameColumns(#'Replaced Value4',{{'RR Hires.Count', 'Hires Count'}, {'RR Hires.Name(s)', 'Hires'}}),    #'Replaced Value1' = Table.ReplaceValue(#'Renamed Columns',null,0,Replacer.ReplaceValue,{'Hires Count'}),    #'Added Custom' = Table.AddColumn(#'Replaced Value1', 'Picture', each 'https://myfield.thrivent.com/content/faimages/' \u0026 [SRC_SYS_KEY_TXT] \u0026 '.jpg'),    #'Merged Queries2' = Table.NestedJoin(#'Added Custom', {'SRC_SYS_KEY_TXT'}, #'Advice Adoption - Developer', {'TSID'}, 'Advice Adoption - Developer', JoinKind.LeftOuter),    #'Expanded Advice Adoption - Developer' = Table.ExpandTableColumn(#'Merged Queries2', 'Advice Adoption - Developer', {'% Adoption'}, {'Advice Adoption - Developer.% Adoption'}),    #'Merged Queries5' = Table.NestedJoin(#'Expanded Advice Adoption - Developer', {'SRC_SYS_KEY_TXT'}, #'2023_YE_RDL_DATA_w_Capacity_Info', {'CORP_MGR_ID_CDE'}, '2023_YE_RDL_DATA_w_Capacity_Info', JoinKind.LeftOuter),    #'Expanded 2023_YE_RDL_DATA_w_Capacity_Info' = Table.ExpandTableColumn(#'Merged Queries5', '2023_YE_RDL_DATA_w_Capacity_Info', {'HeadCount'}, {'2023_YE_RDL_DATA_w_Capacity_Info.HeadCount'}),    #'Merged Queries6' = Table.NestedJoin(#'Expanded 2023_YE_RDL_DATA_w_Capacity_Info', {'SRC_SYS_KEY_TXT'}, #'2023_YE_RDL_DATA_w_Capacity_Info-Terms', {'CORP_MGR_ID_CDE'}, '2023_YE_RDL_DATA_w_Capacity_Info-Terms', JoinKind.LeftOuter),    #'Expanded 2023_YE_RDL_DATA_w_Capacity_Info-Terms' = Table.ExpandTableColumn(#'Merged Queries6', '2023_YE_RDL_DATA_w_Capacity_Info-Terms', {'TermCount'}, {'2023_YE_RDL_DATA_w_Capacity_Info-Terms.TermCount'}),    #'Renamed Columns2' = Table.RenameColumns(#'Expanded 2023_YE_RDL_DATA_w_Capacity_Info-Terms',{{'2023_YE_RDL_DATA_w_Capacity_Info-Terms.TermCount', 'TermCount'}, {'2023_YE_RDL_DATA_w_Capacity_Info.HeadCount', 'HeadCount'}}),    #'Replaced Value2' = Table.ReplaceValue(#'Renamed Columns2',null,0,Replacer.ReplaceValue,{'HeadCount'}),    #'Replaced Value3' = Table.ReplaceValue(#'Replaced Value2',null,0,Replacer.ReplaceValue,{'TermCount'}),    #'Added Custom2' = Table.AddColumn(#'Replaced Value3', 'Retention Rate', each if [HeadCount]=0 then 0 else (([HeadCount]+[Hires Count]-[TermCount]-[RR Hires.Term Count])/([HeadCount]+[Hires Count]))),    #'Changed Type' = Table.TransformColumnTypes(#'Added Custom2',{{'Retention Rate', Percentage.Type}}),    #'Merged Queries3' = Table.NestedJoin(#'Changed Type', {'SRC_SYS_KEY_TXT'}, #'2023_YE_RDL_DATA_w_Capacity_Info - Detail', {'CORP_MGR_ID_CDE'}, '2023_YE_RDL_DATA_w_Capacity_Info - Detail', JoinKind.LeftOuter),    #'Expanded 2023_YE_RDL_DATA_w_Capacity_Info - Detail' = Table.ExpandTableColumn(#'Merged Queries3', '2023_YE_RDL_DATA_w_Capacity_Info - Detail', {'Name(s)'}, {'2023_YE_RDL_DATA_w_Capacity_Info - Detail.Name(s)'}),    #'Merged Queries4' = Table.NestedJoin(#'Expanded 2023_YE_RDL_DATA_w_Capacity_Info - Detail', {'SRC_SYS_KEY_TXT'}, #'Term List', {'CSL TSID'}, 'Term List', JoinKind.LeftOuter),    #'Expanded Term List' = Table.ExpandTableColumn(#'Merged Queries4', 'Term List', {'Name(s)', 'Term Dates'}, {'Term List.Name(s)', 'Term List.Term Dates'}),    #'Changed Type1' = Table.TransformColumnTypes(#'Expanded Term List',{{'Advice Adoption - Developer.% Adoption', Percentage.Type}})in    #'Changed Type1'"}]},{"name":"Dev - Vet","isHidden":false,"storageMode":"Import","columns":[{"name":"SRC_SYS_KEY_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"WORKER_STS_FCT_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"WORKER_STS_FCT_MKT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Pace Dev.Above Pace Count","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"ORZN_DEPT_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Hires Count","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Hires","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Pace Rank","dataType":"String","isHidden":false,"expression":"var Pace = Round(Rankx(\u0027Dev - Vet\u0027,\u0027Dev - Vet\u0027[Pace Dev.Above Pace Count]),0)RETURNBlank()","columnType":"Calculated"},{"name":"Hires Rank","dataType":"String","isHidden":false,"expression":"Round(Rankx(\u0027Dev - Vet\u0027,\u0027Dev - Vet\u0027[Hires Count]),0)","columnType":"Calculated"},{"name":"Total Rank","dataType":"String","isHidden":false,"expression":"var Rnk = Round(0.6 * \u0027Dev - Vet\u0027[Pace Rank] + 0.15 * \u0027Dev - Vet\u0027[Hires Rank],1) + 0.15 * \u0027Dev - Vet\u0027[Retention Rank] + 0.1 * \u0027Dev - Vet\u0027[Advice Rank]ReturnBlank()","columnType":"Calculated"},{"name":"EFF_BEG_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"ORZN_ZONE_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG","dataType":"String","isHidden":false,"expression":"if(LEFT(\u0027Dev - Vet\u0027[ORZN_ZONE_CDE],4)='',LEFT(\u0027Dev - Vet\u0027[Workday Leader Directory.Cost Center],4),LEFT(\u0027Dev - Vet\u0027[ORZN_ZONE_CDE],4))","columnType":"Calculated"},{"name":"Rank Rank","dataType":"String","isHidden":false,"expression":"var Rnk = Round(Rankx(\u0027Dev - Vet\u0027,[Total Rank],,ASC),0)ReturnBlank()","columnType":"Calculated"},{"name":"Picture","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Workday Leader Directory.Cost Center","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"0630 Leader Backup.Employee ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Extra Day","dataType":"String","isHidden":false,"expression":"if([Rank Rank]\u003c=3, if(\u0027Dev - Vet\u0027[Pace Dev.Above Pace Count] \u003e= 6, 'Y', 'N'),'N')","columnType":"Calculated"},{"name":"JOB_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RR Hires.Term Count","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Advice Adoption - Developer.% Adoption","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"HeadCount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TermCount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Retention Rate","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"2023_YE_RDL_DATA_w_Capacity_Info - Detail.Name(s)","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Term List.Name(s)","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Term List.Term Dates","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Pace Avg","dataType":"String","isHidden":false,"expression":"var Pace = \u0027Dev - Vet\u0027[Pace Dev.Above Pace Count]ReturnBlank()","columnType":"Calculated"},{"name":"Retention Rank","dataType":"String","isHidden":false,"expression":"Round(Rankx(\u0027Dev - Vet\u0027,\u0027Dev - Vet\u0027[Retention Rate]),0)","columnType":"Calculated"},{"name":"Advice Rank","dataType":"String","isHidden":false,"expression":"Round(Rankx(\u0027Dev - Vet\u0027,\u0027Dev - Vet\u0027[Advice Adoption - Developer.% Adoption]),0)","columnType":"Calculated"},{"name":"RR Hires.Hire Dates","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = WORKER_STATUS_FCT_DATES,    #'Date FIlter' = Table.SelectRows(Source, each [EFF_BEG_DT] \u003c #date(2023, 1, 1)),    #'Job Code Filter' = Table.SelectRows(#'Date FIlter', each [JOB_TYP_CDE] = '001005'),    #'Merged Queries' = Table.NestedJoin(#'Job Code Filter', {'SRC_SYS_KEY_TXT'}, #'Pace Dev', {'Market Developers - Pace.CORP_MGR_ID_CDE'}, 'Pace Dev', JoinKind.LeftOuter),    #'Expanded Pace Dev' = Table.ExpandTableColumn(#'Merged Queries', 'Pace Dev', {'Above Pace Count'}, {'Pace Dev.Above Pace Count'}),    #'Replaced Value' = Table.ReplaceValue(#'Expanded Pace Dev',null,0,Replacer.ReplaceValue,{'Pace Dev.Above Pace Count'}),    #'Merged Queries1' = Table.NestedJoin(#'Replaced Value', {'SRC_SYS_KEY_TXT'}, #'RR Hires', {'CSL TSID'}, 'RR Hires', JoinKind.LeftOuter),    #'Expanded RR Hires' = Table.ExpandTableColumn(#'Merged Queries1', 'RR Hires', {'Count', 'Hire Dates', 'Name(s)', 'Term Count'}, {'RR Hires.Count', 'RR Hires.Hire Dates', 'RR Hires.Name(s)', 'RR Hires.Term Count'}),    #'Replaced Value4' = Table.ReplaceValue(#'Expanded RR Hires',null,0,Replacer.ReplaceValue,{'RR Hires.Term Count'}),    #'Renamed Columns' = Table.RenameColumns(#'Replaced Value4',{{'RR Hires.Count', 'Hires Count'}, {'RR Hires.Name(s)', 'Hires'}}),    #'Replaced Value1' = Table.ReplaceValue(#'Renamed Columns',null,0,Replacer.ReplaceValue,{'Hires Count'}),    Custom1 = Table.AddColumn(#'Replaced Value1', 'Picture', each 'https://myfield.thrivent.com/content/faimages/' \u0026 [SRC_SYS_KEY_TXT] \u0026 '.jpg'),    #'Merged Queries2' = Table.NestedJoin(#'Custom1', {'SRC_SYS_KEY_TXT'}, #'Advice Adoption - Developer', {'TSID'}, 'Advice Adoption - Developer', JoinKind.LeftOuter),    #'Expanded Advice Adoption - Developer' = Table.ExpandTableColumn(#'Merged Queries2', 'Advice Adoption - Developer', {'% Adoption'}, {'Advice Adoption - Developer.% Adoption'}),    #'Merged Queries5' = Table.NestedJoin(#'Expanded Advice Adoption - Developer', {'SRC_SYS_KEY_TXT'}, #'2023_YE_RDL_DATA_w_Capacity_Info', {'CORP_MGR_ID_CDE'}, '2023_YE_RDL_DATA_w_Capacity_Info', JoinKind.LeftOuter),    #'Expanded 2023_YE_RDL_DATA_w_Capacity_Info' = Table.ExpandTableColumn(#'Merged Queries5', '2023_YE_RDL_DATA_w_Capacity_Info', {'HeadCount'}, {'2023_YE_RDL_DATA_w_Capacity_Info.HeadCount'}),    #'Merged Queries6' = Table.NestedJoin(#'Expanded 2023_YE_RDL_DATA_w_Capacity_Info', {'SRC_SYS_KEY_TXT'}, #'2023_YE_RDL_DATA_w_Capacity_Info-Terms', {'CORP_MGR_ID_CDE'}, '2023_YE_RDL_DATA_w_Capacity_Info-Terms', JoinKind.LeftOuter),    #'Expanded 2023_YE_RDL_DATA_w_Capacity_Info-Terms' = Table.ExpandTableColumn(#'Merged Queries6', '2023_YE_RDL_DATA_w_Capacity_Info-Terms', {'TermCount'}, {'2023_YE_RDL_DATA_w_Capacity_Info-Terms.TermCount'}),    #'Renamed Columns2' = Table.RenameColumns(#'Expanded 2023_YE_RDL_DATA_w_Capacity_Info-Terms',{{'2023_YE_RDL_DATA_w_Capacity_Info-Terms.TermCount', 'TermCount'}, {'2023_YE_RDL_DATA_w_Capacity_Info.HeadCount', 'HeadCount'}}),    #'Replaced Value2' = Table.ReplaceValue(#'Renamed Columns2',null,0,Replacer.ReplaceValue,{'HeadCount'}),    #'Replaced Value3' = Table.ReplaceValue(#'Replaced Value2',null,0,Replacer.ReplaceValue,{'TermCount'}),    #'Added Custom2' = Table.AddColumn(#'Replaced Value3', 'Retention Rate', each if [HeadCount]=0 then 0 else (([HeadCount]+[Hires Count]-[TermCount]-[RR Hires.Term Count])/([HeadCount]+[Hires Count]))),    #'Changed Type' = Table.TransformColumnTypes(#'Added Custom2',{{'Retention Rate', Percentage.Type}}),    #'Merged Queries3' = Table.NestedJoin(#'Changed Type', {'SRC_SYS_KEY_TXT'}, #'2023_YE_RDL_DATA_w_Capacity_Info - Detail', {'CORP_MGR_ID_CDE'}, '2023_YE_RDL_DATA_w_Capacity_Info - Detail', JoinKind.LeftOuter),    #'Expanded 2023_YE_RDL_DATA_w_Capacity_Info - Detail' = Table.ExpandTableColumn(#'Merged Queries3', '2023_YE_RDL_DATA_w_Capacity_Info - Detail', {'Name(s)'}, {'2023_YE_RDL_DATA_w_Capacity_Info - Detail.Name(s)'}),    #'Merged Queries4' = Table.NestedJoin(#'Expanded 2023_YE_RDL_DATA_w_Capacity_Info - Detail', {'SRC_SYS_KEY_TXT'}, #'Term List', {'CSL TSID'}, 'Term List', JoinKind.LeftOuter),    #'Expanded Term List' = Table.ExpandTableColumn(#'Merged Queries4', 'Term List', {'Name(s)', 'Term Dates'}, {'Term List.Name(s)', 'Term List.Term Dates'}),    #'Changed Type1' = Table.TransformColumnTypes(#'Expanded Term List',{{'Advice Adoption - Developer.% Adoption', Percentage.Type}})in    #'Changed Type1'"}]},{"name":"Active FAs","isHidden":false,"storageMode":"Import","columns":[{"name":"Market Number","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Active FA Count","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = #'WMFC Detail',    #'Filtered Rows' = Table.SelectRows(Source, each ([Job Type] = 'Associate Representative' or [Job Type] = 'FR')),    #'Grouped Rows' = Table.Group(#'Filtered Rows', {'Market Number'}, {{'Active FA Count', each Table.RowCount(_), Int64.Type}})in    #'Grouped Rows'"}]},{"name":"Dir - Vet","isHidden":false,"storageMode":"Import","columns":[{"name":"SRC_SYS_KEY_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"WORKER_STS_FCT_MKT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"WORKER_STS_FCT_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"ORZN_DEPT_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Hires Count","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Hires","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Pace Rank","dataType":"String","isHidden":false,"expression":"var PRank = Round(Rankx(\u0027Dir - Vet\u0027,\u0027Dir - Vet\u0027[Above FA Count]),0)ReturnBlank()","columnType":"Calculated"},{"name":"Hires Rank","dataType":"String","isHidden":false,"expression":"Round(Rankx(\u0027Dir - Vet\u0027,\u0027Dir - Vet\u0027[Hires Count]),0)","columnType":"Calculated"},{"name":"Total Rank","dataType":"String","isHidden":false,"expression":"var TRank = ROUND(0.25 * \u0027Dir - Vet\u0027[Hires Rank] + 0.25 * \u0027Dir - Vet\u0027[Retention Rank]  + 0.4 * \u0027Dir - Vet\u0027[Pace Rank] + 0.1 * \u0027Dir - Vet\u0027[Advice Rank],1)ReturnBlank()","columnType":"Calculated"},{"name":"EFF_BEG_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"ORZN_ZONE_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Pace Dir.Number of Weeks","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Pace Dir.Above Total Count","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Above FA Count","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Picture","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG","dataType":"String","isHidden":false,"expression":"LEFT(\u0027Dir - Vet\u0027[ORZN_ZONE_CDE],4)","columnType":"Calculated"},{"name":"Rank Rank","dataType":"String","isHidden":false,"expression":"Var RRank = Round(Rankx(\u0027Dir - Vet\u0027,\u0027Dir - Vet\u0027[Total Rank],,ASC),0)ReturnBlank()","columnType":"Calculated"},{"name":"Workday Leader Directory.Cost Center","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Total Rank 2 Count Column","dataType":"String","isHidden":false,"expression":"calculate(1, filter(ALL(\u0027Dir - Vet\u0027), [Total Rank]=2))","columnType":"Calculated"},{"name":"Total Rank 5 Count Column","dataType":"String","isHidden":false,"expression":"calculate(1, filter(ALL(\u0027Dir - Vet\u0027), [Total Rank]=5))","columnType":"Calculated"},{"name":"Picture Rank","dataType":"String","isHidden":false,"expression":"if(and([Rank Rank]=2,[Total Rank 2 Count Column]\u003e1),[Rank Rank],if(and([Rank Rank]=5,[Total Rank 5 Count Column]=1),[Rank Rank],[Rank Rank]))","columnType":"Calculated"},{"name":"Advice Adoption.Adopting Advisors %","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Advice Adoption.Rank (sorted by)","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Advice Rank","dataType":"String","isHidden":false,"expression":"Round(Rankx(\u0027Dir - Vet\u0027,\u0027Dir - Vet\u0027[Advice Adoption.Adopting Advisors %]),0)","columnType":"Calculated"},{"name":"0630 Leader Backup.Employee ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RR Hires.Term Count","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"HeadCount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TermCount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Retention Rate","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Retention Rank","dataType":"String","isHidden":false,"expression":"Round(Rankx(\u0027Dir - Vet\u0027,\u0027Dir - Vet\u0027[Retention Rate]),0)","columnType":"Calculated"},{"name":"2023_YE_RDL_DATA_w_Capacity_Info - Detail.Name(s)","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Term List.Name(s)","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Pace Avg","dataType":"String","isHidden":false,"expression":"var Pace = \u0027Dir - Vet\u0027[Above FA Count]ReturnBlank()","columnType":"Calculated"},{"name":"RR Hires.Hire Dates","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Term List.Term Dates","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Measure","expression":"Not available","isHidden":false}],"source":[{"expression":"let    Source = WORKER_STATUS_FCT_DATES,    #'Date FIlter' = Table.SelectRows(Source, each [EFF_BEG_DT] \u003c #date(2023, 1, 1)),    #'Job Code Filter' = Table.SelectRows(#'Date FIlter', each ([JOB_TYP_CDE] = '001007')),    #'Add Dir Exceptions' = Table.NestedJoin(#'Job Code Filter', {'SRC_SYS_KEY_TXT'}, #'Dir Exceptions', {'SRC_SYS_KEY_TXT'}, 'Dir Exceptions', JoinKind.LeftOuter),    #'Expanded Dir Exceptions' = Table.ExpandTableColumn(#'Add Dir Exceptions', 'Dir Exceptions', {'SRC_SYS_KEY_TXT'}, {'Dir Exceptions.SRC_SYS_KEY_TXT'}),    #'Filtered Out Exceptions' = Table.SelectRows(#'Expanded Dir Exceptions', each ([Dir Exceptions.SRC_SYS_KEY_TXT] = null)),    #'Removed Columns' = Table.RemoveColumns(#'Filtered Out Exceptions',{'Dir Exceptions.SRC_SYS_KEY_TXT'}),    #'Merged Queries1' = Table.NestedJoin(#'Removed Columns', {'ORZN_ZONE_CDE'}, #'Pace Dir', {'Market'}, 'Pace Dir', JoinKind.LeftOuter),    #'Expanded Pace Dir' = Table.ExpandTableColumn(#'Merged Queries1', 'Pace Dir', {'Number of Weeks', 'Above Total Count', 'Above Count'}, {'Pace Dir.Number of Weeks', 'Pace Dir.Above Total Count', 'Pace Dir.Above Count'}),    #'Replaced Value' = Table.ReplaceValue(#'Expanded Pace Dir',null,0,Replacer.ReplaceValue,{'Pace Dir.Above Count'}),    #'Renamed Columns1' = Table.RenameColumns(#'Replaced Value',{{'Pace Dir.Above Count', 'Above FA Count'}}),    #'Merged Queries' = Table.NestedJoin(#'Renamed Columns1', {'SRC_SYS_KEY_TXT'}, #'RR Hires', {'CSL TSID'}, 'RR Hires', JoinKind.LeftOuter),    #'Expanded RR Hires' = Table.ExpandTableColumn(#'Merged Queries', 'RR Hires', {'Count', 'Hire Dates', 'Name(s)', 'Term Count'}, {'RR Hires.Count', 'RR Hires.Hire Dates', 'RR Hires.Name(s)', 'RR Hires.Term Count'}),    #'Renamed Columns3' = Table.RenameColumns(#'Expanded RR Hires',{{'RR Hires.Count', 'Hires Count'}, {'RR Hires.Name(s)', 'Hires'}}),    #'Replaced Value1' = Table.ReplaceValue(#'Renamed Columns3',null,0,Replacer.ReplaceValue,{'Hires Count'}),    #'Replaced Value4' = Table.ReplaceValue(#'Replaced Value1',null,0,Replacer.ReplaceValue,{'RR Hires.Term Count'}),    Custom1 = Table.AddColumn(#'Replaced Value4', 'Picture', each 'https://myfield.thrivent.com/content/faimages/' \u0026 [SRC_SYS_KEY_TXT] \u0026 '.jpg'),    #'Merged Queries2' = Table.NestedJoin(Custom1, {'ORZN_ZONE_CDE'}, #'Advice Adoption', {'Market'}, 'Advice Adoption', JoinKind.LeftOuter),    #'Expanded Advice Adoption' = Table.ExpandTableColumn(#'Merged Queries2', 'Advice Adoption', {'Adopting Advisors %', 'Rank (sorted by)'}, {'Advice Adoption.Adopting Advisors %', 'Advice Adoption.Rank (sorted by)'}),    #'Merged Queries3' = Table.NestedJoin(#'Expanded Advice Adoption', {'SRC_SYS_KEY_TXT'}, #'2023_YE_RDL_DATA_w_Capacity_Info', {'CORP_MGR_ID_CDE'}, '2023_YE_RDL_DATA_w_Capacity_Info', JoinKind.LeftOuter),    #'Expanded 2023_YE_RDL_DATA_w_Capacity_Info' = Table.ExpandTableColumn(#'Merged Queries3', '2023_YE_RDL_DATA_w_Capacity_Info', {'HeadCount'}, {'2023_YE_RDL_DATA_w_Capacity_Info.HeadCount'}),    #'Merged Queries4' = Table.NestedJoin(#'Expanded 2023_YE_RDL_DATA_w_Capacity_Info', {'SRC_SYS_KEY_TXT'}, #'2023_YE_RDL_DATA_w_Capacity_Info-Terms', {'CORP_MGR_ID_CDE'}, '2023_YE_RDL_DATA_w_Capacity_Info-Terms', JoinKind.LeftOuter),    #'Expanded 2023_YE_RDL_DATA_w_Capacity_Info-Terms' = Table.ExpandTableColumn(#'Merged Queries4', '2023_YE_RDL_DATA_w_Capacity_Info-Terms', {'TermCount'}, {'2023_YE_RDL_DATA_w_Capacity_Info-Terms.TermCount'}),    #'Renamed Columns' = Table.RenameColumns(#'Expanded 2023_YE_RDL_DATA_w_Capacity_Info-Terms',{{'2023_YE_RDL_DATA_w_Capacity_Info-Terms.TermCount', 'TermCount'}, {'2023_YE_RDL_DATA_w_Capacity_Info.HeadCount', 'HeadCount'}}),    #'Replaced Value2' = Table.ReplaceValue(#'Renamed Columns',null,0,Replacer.ReplaceValue,{'HeadCount'}),    #'Replaced Value3' = Table.ReplaceValue(#'Replaced Value2',null,0,Replacer.ReplaceValue,{'TermCount'}),    #'Added Custom' = Table.AddColumn(#'Replaced Value3', 'Retention Rate', each if [HeadCount]=0 then 0 else (([HeadCount]+[Hires Count]-[TermCount]-[RR Hires.Term Count])/([HeadCount]+[Hires Count]))),    #'Changed Type' = Table.TransformColumnTypes(#'Added Custom',{{'Retention Rate', Percentage.Type}}),    #'Merged Queries5' = Table.NestedJoin(#'Changed Type', {'SRC_SYS_KEY_TXT'}, #'2023_YE_RDL_DATA_w_Capacity_Info - Detail', {'CORP_MGR_ID_CDE'}, '2023_YE_RDL_DATA_w_Capacity_Info - Detail', JoinKind.LeftOuter),    #'Expanded 2023_YE_RDL_DATA_w_Capacity_Info - Detail' = Table.ExpandTableColumn(#'Merged Queries5', '2023_YE_RDL_DATA_w_Capacity_Info - Detail', {'Name(s)'}, {'2023_YE_RDL_DATA_w_Capacity_Info - Detail.Name(s)'}),    #'Merged Queries6' = Table.NestedJoin(#'Expanded 2023_YE_RDL_DATA_w_Capacity_Info - Detail', {'SRC_SYS_KEY_TXT'}, #'Term List', {'CSL TSID'}, 'Term List', JoinKind.LeftOuter),    #'Expanded Term List' = Table.ExpandTableColumn(#'Merged Queries6', 'Term List', {'Name(s)', 'Term Dates'}, {'Term List.Name(s)', 'Term List.Term Dates'})in    #'Expanded Term List'"}]},{"name":"Pace Dev","isHidden":false,"storageMode":"Import","columns":[{"name":"Market Developers - Pace.CORP_MGR_ID_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Above Pace Count","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Week Count","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Above Count","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = #'Pace to Perf Snapshot',    #'Removed Other Columns' = Table.SelectColumns(Source,{'Tenure_Months', 'TSID', 'FP_Name', 'Market', 'ABOVE_BELOW', 'Week Start.Week_Start_Date'}),    Custom1 = Table.AddColumn(#'Removed Other Columns', 'Join Value', each DateTime.ToText ([Week Start.Week_Start_Date], 'MM/dd/yy') \u0026 [TSID]),    #'Merged Queries' = Table.NestedJoin(Custom1, {'Join Value'}, #'Market Developers - Pace', {'Join Value'}, 'Market Developers - Pace', JoinKind.LeftOuter),    #'Expanded Market Developers - Pace' = Table.ExpandTableColumn(#'Merged Queries', 'Market Developers - Pace', {'CORP_MGR_ID_CDE'}, {'Market Developers - Pace.CORP_MGR_ID_CDE'}),    #'Filtered Rows' = Table.SelectRows(#'Expanded Market Developers - Pace', each ([ABOVE_BELOW] \u003c\u003e '')),    #'Added Custom' = Table.AddColumn(#'Filtered Rows', 'All FRs Above/Below', each 1),    #'Added Custom1' = Table.AddColumn(#'Added Custom', 'Above Count', each if ([ABOVE_BELOW]='ABOVE') then 1  else 0),    #'Dev by Week Counts' = Table.Group(#'Added Custom1', {'Week Start.Week_Start_Date', 'Market Developers - Pace.CORP_MGR_ID_CDE'}, {{'ABOVE_BELOW', each List.Sum([#'All FRs Above/Below']), type number}, {'ABOVE', each List.Sum([Above Count]), type number}}),    #'Dev Totals' = Table.Group(#'Dev by Week Counts', {'Market Developers - Pace.CORP_MGR_ID_CDE'}, {{'Week Count', each Table.RowCount(_), Int64.Type}, {'Above Count', each List.Sum([ABOVE]), type number}}),    #'Added Custom2' = Table.AddColumn(#'Dev Totals', 'Above Pace Count', each [Above Count]/[Week Count]),    #'Changed Type' = Table.TransformColumnTypes(#'Added Custom2',{{'Above Pace Count', type number}})in    #'Changed Type'"}]},{"name":"Pace Dir","isHidden":false,"storageMode":"Import","columns":[{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Above Count","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Number of Weeks","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Above Total Count","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = #'Pace to Perf Snapshot',    #'Removed Other Columns' = Table.SelectColumns(Source,{'Tenure_Months', 'TSID', 'FP_Name', 'Market', 'ABOVE_BELOW', 'Week Start.Week_Start_Date'}),    #'Filtered Rows' = Table.SelectRows(#'Removed Other Columns', each ([ABOVE_BELOW] \u003c\u003e '')),    #'Added Custom' = Table.AddColumn(#'Filtered Rows', 'ABOVE Count', each if [ABOVE_BELOW]='ABOVE' then 1 else 0),    #'Dir by week Counts' = Table.Group(#'Added Custom', {'Market', 'Week Start.Week_Start_Date'}, {{'ABOVE_BELOW_CT', each Table.RowCount(_), Int64.Type}, {'ABOVE_CT', each List.Sum([ABOVE Count]), type number}}),    #'Dir Totals' = Table.Group(#'Dir by week Counts', {'Market'}, {{'Number of Weeks', each Table.RowCount(_), Int64.Type}, {'Above Count', each List.Sum([ABOVE_CT]), type number}}),    #'Added Custom1' = Table.AddColumn(#'Dir Totals', 'Above FA Count', each [Above Count] / [Number of Weeks]),    #'Changed Type' = Table.TransformColumnTypes(#'Added Custom1',{{'Above FA Count', type number}}),    #'Renamed Columns' = Table.RenameColumns(#'Changed Type',{{'Above Count', 'Above Total Count'}, {'Above FA Count', 'Above Count'}})in    #'Renamed Columns'"}]},{"name":"Weeks","isHidden":false,"storageMode":"Import","columns":[{"name":"WEEK","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = DB2.Database('podwh021:50000', 'podwh021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='Select#(lf)CAL_DAY_DT,#(lf)DTRB_PERF_RPT_WK_NBR AS WEEK#(lf)FROM#(lf)COMMON.DTRB_PERF_DATES#(lf)WHERE#(lf)DTRB_PERF_RPT_YR_TXT=\u0027CURRENT\u0027 AND#(lf)CAL_DAY_DT\u003c=CURRENT_DATE-5']),    #'Grouped Rows' = Table.Group(Source, {'WEEK'}, {{'Count', each Table.RowCount(_), Int64.Type}}),    #'Removed Columns' = Table.RemoveColumns(#'Grouped Rows',{'Count'})in    #'Removed Columns'"}]},{"name":"WMFC_CD","isHidden":false,"storageMode":"Import","columns":[{"name":"RFO_MKT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Perfweek","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"FA Count by Week","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Prev FA Count","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Before Current Week Indicator","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Capacity Dashboard//WMFC_CD.xlsx'), null, true),    WMFC_CD_Sheet = Source{[Item='WMFC_CD',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(WMFC_CD_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Perfyear', Int64.Type}, {'RFO', Int64.Type}, {'Zone_ID', type text}, {'RFO_MKT', type text}, {'Category', type text}, {'Perfweek', Int64.Type}, {'MFC', Int64.Type}, {'WMFC', type number}, {'Join_Value', type text}}),    #'Filtered Rows' = Table.SelectRows(#'Changed Type', each ([Category] = 'Associate Representative' or [Category] = 'FR' or [Category] = 'FR-FC' or [Category] = 'FR-WA') and ([Perfyear] = 2023)),    #'Grouped Rows' = Table.Group(#'Filtered Rows', {'RFO_MKT', 'Perfweek'}, {{'FA Count by Week', each List.Sum([MFC]), type nullable number}}),    #'Sorted Rows' = Table.Sort(#'Grouped Rows',{{'RFO_MKT', Order.Ascending}, {'Perfweek', Order.Ascending}}),    #'Added Custom1' = Table.AddColumn(#'Sorted Rows', 'Before Current Week Indicator', each if [Perfweek] \u003c= (if Date.Year(Date.AddDays(DateTime.LocalNow(),-6)) = 2023 then Date.WeekOfYear(Date.AddDays(DateTime.LocalNow(),-6)) else 53) then 'Y' else 'N'),    #'Filtered Rows1' = Table.SelectRows(#'Added Custom1', each ([Before Current Week Indicator] = 'Y')),    #'Grouped Rows1' = Table.Group(#'Filtered Rows1', {'RFO_MKT'}, {{'Tables', each _, type table [RFO_MKT=nullable text, Perfweek=nullable number, FA Count by Week=nullable number]}}),    #'Added Custom' = Table.AddColumn(#'Grouped Rows1', 'New Table', each letPrevFAList = {0} \u0026 List.RemoveLastN([Tables][#'FA Count by Week'],1),TableList = Table.ToColumns([Tables]),Headers = Table.ColumnNames([Tables]) \u0026 {'Prev FA Count'},Concat = TableList \u0026 {PrevFAList}inTable.FromColumns(Concat, Headers)),    #'Add Prev FA Count' = Table.Combine(#'Added Custom'[New Table])in    #'Add Prev FA Count'"}]},{"name":"WMFC_CD - Final","isHidden":false,"storageMode":"Import","columns":[{"name":"RFO_MKT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FA Count Sum","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Non Null Week Count","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Active FAs.Active FA Count","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Capacity Dashboard//WMFC_CD.xlsx'), null, true),    WMFC_CD_Sheet = Source{[Item='WMFC_CD',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(WMFC_CD_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Perfyear', Int64.Type}, {'RFO', Int64.Type}, {'Zone_ID', type text}, {'RFO_MKT', type text}, {'Category', type text}, {'Perfweek', Int64.Type}, {'MFC', Int64.Type}, {'WMFC', type number}, {'Join_Value', type text}}),    #'Filter for FA and Year' = Table.SelectRows(#'Changed Type', each ([Category] = 'Associate Representative' or [Category] = 'FR' or [Category] = 'FR-FC' or [Category] = 'FR-WA') and ([Perfyear] = 2023)),    #'Grouped Rows' = Table.Group(#'Filter for FA and Year', {'RFO_MKT', 'Perfweek'}, {{'FA Count by Week', each List.Sum([MFC]), type nullable number}}),    #'Sort to show FA by week' = Table.Sort(#'Grouped Rows',{{'RFO_MKT', Order.Ascending}, {'Perfweek', Order.Ascending}}),    #'Added Custom' = Table.AddColumn(#'Sort to show FA by week', 'Before Current Week', each if [Perfweek] \u003c= (if Date.Year(Date.AddDays(DateTime.LocalNow(),-6)) = 2023 then Date.WeekOfYear(Date.AddDays(DateTime.LocalNow(),-6)) else 53) then 'Y' else 'N'),    #'Filtered Rows' = Table.SelectRows(#'Added Custom', each ([Before Current Week] = 'Y')),    #'Grouped Rows1' = Table.Group(#'Filtered Rows', {'RFO_MKT'}, {{'Tables', each _, type table [RFO_MKT=nullable text, Perfweek=nullable number, FA Count by Week=nullable number]}}),    #'Added FA Cumulative' = Table.AddColumn(#'Grouped Rows1', 'FA Count Sum', each letSum = List.Sum([Tables][#'FA Count by Week']),DistinctCount = List.Distinct([Tables][#'FA Count by Week'])inSum),    #'Added Non Null Week Count' = Table.AddColumn(#'Added FA Cumulative', 'Non Null Week Count', each letSum = List.Sum([Tables][#'FA Count by Week']),DistinctCount = List.NonNullCount([Tables][#'FA Count by Week'])inDistinctCount),    #'Added Custom2' = Table.AddColumn(#'Added Non Null Week Count', 'Average FA Count', each [FA Count Sum] / [Non Null Week Count]),    #'Renamed Columns' = Table.RenameColumns(#'Added Custom2',{{'Average FA Count', 'Active FAs.Active FA Count'}})in    #'Renamed Columns'"}]},{"name":"Week Start","isHidden":false,"storageMode":"Import","columns":[{"name":"Week_Start_Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Weekly Proc Dt","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = DB2.Database('podwh021:50000', 'podwh021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='Select#(lf)(DTRB_PERF_RPT_WK_END_DT+1) AS ''Week_Start_Date'',#(lf)sum(1) AS Row_Ct#(lf)FROM#(lf)COMMON.DTRB_PERF_DATES#(lf)WHERE#(lf)DTRB_PERF_RPT_YR_TXT=\u0027CURRENT\u0027 AND#(lf)DTRB_PERF_RPT_WK_END_DT+1\u003c=CURRENT_DATE#(lf)GROUP BY#(lf)(DTRB_PERF_RPT_WK_END_DT+1)']),    #'Removed Columns' = Table.RemoveColumns(Source,{'ROW_CT'}),    #'Added Custom' = Table.AddColumn(#'Removed Columns', 'Join', each 1),    #'Merged Queries' = Table.NestedJoin(#'Added Custom', {'Join'}, #'Process Dates', {'Join'}, 'Process Dates', JoinKind.LeftOuter),    #'Removed Columns1' = Table.RemoveColumns(#'Merged Queries',{'Join'}),    #'All Dates' = Table.ExpandTableColumn(#'Removed Columns1', 'Process Dates', {'Process Date'}, {'Process Dates.Process Date'}),    #'Added Custom1' = Table.AddColumn(#'All Dates', 'New_Process_Dt', each if Duration.Days([Process Dates.Process Date]-[Week_Start_Date])\u003e0 then null else [Process Dates.Process Date]),    #'Group by Proc Date' = Table.Group(#'Added Custom1', {'Week_Start_Date'}, {{'Count', each _, type table [Week_Start_Date=datetime, Process Dates.Process Date=nullable datetime, New_Process_Dt=nullable datetime]}}),    #'Added Custom2' = Table.AddColumn(#'Group by Proc Date', 'Weekly Proc Dt', each letDateMax=List.Max([Count] [New_Process_Dt])inDateMax),    #'Filtered Rows' = Table.SelectRows(#'Added Custom2', each ([Weekly Proc Dt] \u003c\u003e null))in    #'Filtered Rows'"}]},{"name":"Process Dates","isHidden":false,"storageMode":"Import","columns":[{"name":"Process Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Join","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Sql.Database('dbedwdwprd', 'enterprisedatamart', [Query='SELECT#(lf)a.[Process Date],#(lf)sum(1) AS Row_ct#(lf)FROM#(lf)[EnterpriseDataMart].[DM_01].[Pace Performance Snapshot Fact] a#(lf)GROUP BY#(lf)a.[Process Date]']),    #'Removed Columns' = Table.RemoveColumns(Source,{'Row_ct'}),    #'Added Custom' = Table.AddColumn(#'Removed Columns', 'Join', each if (Date.EndOfYear(Date.AddDays(DateTime.FixedLocalNow(),-20))=Date.EndOfYear([Process Date])) then 1 else 0)in    #'Added Custom'"}]},{"name":"RR Hires","isHidden":false,"storageMode":"Import","columns":[{"name":"CSL TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Count","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Name(s)","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Term Count","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Hire Dates","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////vsshr//shared//Public//DI and BI//Leader Effectiveness Ranking Report//RR_HIRES.csv'),[Delimiter=',', Columns=22, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'JOIN VALUE', type text}, {'Division', type text}, {'RFO', Int64.Type}, {'RFO Name', type text}, {'Market ID', type text}, {'Market Name', type text}, {'Market Leader Name', type text}, {'TSID', type text}, {'Employee Name', type text}, {'Begin Date', type date}, {'Job Code', Int64.Type}, {'Job Name', type text}, {'Hire Status', type text}, {'Previous Job Code', Int64.Type}, {'YTD CCs', Int64.Type}, {'YTD GDCs', Int64.Type}, {'S6 License', type text}, {'S7 License', type text}, {'S63 License', type text}, {'S65 License', type text}, {'S66 License', type text}, {'INVS_ADVR_REPR_IND', type text}}),    #'Renamed Columns' = Table.RenameColumns(#'Changed Type',{{'Begin Date', 'Hire Date'}}),    #'Removed Other Columns' = Table.SelectColumns(#'Renamed Columns',{'Division', 'Employee Name', 'TSID', 'Hire Date', 'Job Code', 'Job Name', 'Market ID', 'Market Leader Name', 'RFO', 'Market Name'}),    #'Appended Query' = Table.Combine({#'Removed Other Columns', #'Non_Standard_Hires'}),    #'Merge for CSL' = Table.NestedJoin(#'Appended Query', {'TSID'}, #'RAR Contracts', {'CORP_EMP_ID_CDE'}, 'RAR Contracts', JoinKind.LeftOuter),    #'Get CSL' = Table.ExpandTableColumn(#'Merge for CSL', 'RAR Contracts', {'Credited Source Leader'}, {'RAR Contracts.Credited Source Leader'}),    #'Merged Queries1' = Table.NestedJoin(#'Get CSL', {'RAR Contracts.Credited Source Leader'}, #'Market Leaders - Backdated', {'Workday Name'}, 'Workday Leader Directory', JoinKind.LeftOuter),    #'Expanded Workday Leader Directory' = Table.ExpandTableColumn(#'Merged Queries1', 'Workday Leader Directory', {'Employee ID', 'Job Code'}, {'Workday Leader Directory.Employee ID', 'Workday Leader Directory.Job Code'}),    #'Changed Type2' = Table.TransformColumnTypes(#'Expanded Workday Leader Directory',{{'Workday Leader Directory.Job Code', Int64.Type}}),    #'Renamed Columns3' = Table.RenameColumns(#'Changed Type2',{{'Workday Leader Directory.Employee ID', 'WLD.Employee ID'}, {'Workday Leader Directory.Job Code', 'WLD.Job Code'}}),    #'Merged Queries' = Table.NestedJoin(#'Renamed Columns3', {'RAR Contracts.Credited Source Leader'}, SR_MKT_DIRS, {'Zone_Leader_Name'}, 'SR_MKT_DIRS', JoinKind.LeftOuter),    #'Expanded SR_MKT_DIRS' = Table.ExpandTableColumn(#'Merged Queries', 'SR_MKT_DIRS', {'Zone_Leader_TSID', 'Market Leader Job Code'}, {'SR_MKT_DIRS.Zone_Leader_TSID', 'SR_MKT_DIRS.Market Leader Job Code'}),    #'Added Custom' = Table.AddColumn(#'Expanded SR_MKT_DIRS', 'Workday Leader Directory.Employee ID', each if [WLD.Employee ID] = null then [SR_MKT_DIRS.Zone_Leader_TSID] else [WLD.Employee ID]),    #'Check here!!!!' = Table.AddColumn(#'Added Custom', 'Workday Leader Directory.Job Code', each if [WLD.Job Code] = null then [SR_MKT_DIRS.Market Leader Job Code] else [WLD.Job Code]),    #'Join on Market w Worker_Status_Fact' = Table.NestedJoin(#'Check here!!!!', {'Market Name'}, #'DIrector List', {'ORZN_ZONE_CDE'}, 'WORKER_STATUS_FCT_DATES', JoinKind.LeftOuter),    #'Expanded WORKER_STATUS_FCT_DATES1' = Table.ExpandTableColumn(#'Join on Market w Worker_Status_Fact', 'WORKER_STATUS_FCT_DATES', {'SRC_SYS_KEY_TXT', 'EMP_NM'}, {'WORKER_STATUS_FCT_DATES.SRC_SYS_KEY_TXT', 'WORKER_STATUS_FCT_DATES.EMP_NM'}),    #'Renamed Columns2' = Table.RenameColumns(#'Expanded WORKER_STATUS_FCT_DATES1',{{'Workday Leader Directory.Employee ID', 'CSL Leader ID'}, {'WORKER_STATUS_FCT_DATES.SRC_SYS_KEY_TXT', 'Market Leader ID'}, {'WORKER_STATUS_FCT_DATES.EMP_NM', 'WORKER_STATUS_FCT_DATES.Market Leader Name'}}),    #'Added Key Leader ID Field' = Table.AddColumn(#'Renamed Columns2', 'Workday Leader Directory.Employee ID', each if ([CSL Leader ID] = null or ([Workday Leader Directory.Job Code] \u003c\u003e 1005 and [Workday Leader Directory.Job Code] \u003c\u003e 1007 and [Workday Leader Directory.Job Code] \u003c\u003e 1004)) then [Market Leader ID] elseif [CSL Leader ID] \u003c\u003e [Market Leader ID] then [CSL Leader ID] else [Market Leader ID]),    #'Renamed Columns1' = Table.RenameColumns(#'Added Key Leader ID Field',{{'Workday Leader Directory.Employee ID', 'CSL TSID'}}),    #'Merged Queries2' = Table.NestedJoin(#'Renamed Columns1', {'TSID'}, #'TERMS_DETAIL_OR - Hires', {'TSID'}, 'TERMS_DETAIL_OR - Hires', JoinKind.LeftOuter),    #'Expanded TERMS_DETAIL_OR - Hires' = Table.ExpandTableColumn(#'Merged Queries2', 'TERMS_DETAIL_OR - Hires', {'TSID', 'EMPL_NM', 'MGT_RLTN_END_DATE'}, {'TERMS_DETAIL_OR - Hires.TSID', 'TERMS_DETAIL_OR - Hires.EMPL_NM', 'TERMS_DETAIL_OR - Hires.MGT_RLTN_END_DATE'}),    #'Added Custom1' = Table.AddColumn(#'Expanded TERMS_DETAIL_OR - Hires', 'Term Ind', each if [#'TERMS_DETAIL_OR - Hires.MGT_RLTN_END_DATE']= null then 0 else (if [#'TERMS_DETAIL_OR - Hires.MGT_RLTN_END_DATE']\u003e[Hire Date] then 1 else 0)),    #'Grouped Rows' = Table.Group(#'Added Custom1', {'Market Name', 'CSL TSID', 'Employee Name', 'TSID', 'Hire Date'}, {{'Count', each Table.RowCount(_), Int64.Type}, {'Hire Terms', each List.Sum([Term Ind]), type number}}),    #'Changed Type1' = Table.TransformColumnTypes(#'Grouped Rows',{{'Hire Date', type text}}),    Custom1 = Table.Group(#'Changed Type1', {'CSL TSID'}, {{'Count', each Table.RowCount(_), Int64.Type}, {'Term Count', each List.Sum([Hire Terms]), Int64.Type},{'Name(s)', each Text.Combine([Employee Name], '#(lf)'), type text},{'Hire Dates', each Text.Combine([Hire Date], '#(lf)'), type text}}),    #'Capitalized Each Word' = Table.TransformColumns(Custom1,{{'Name(s)', Text.Proper, type text}})in    #'Capitalized Each Word'"}]},{"name":"RAR Contracts","isHidden":false,"storageMode":"Import","columns":[{"name":"RAR Contract Hires Detail","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CORP_EMP_ID_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMPL_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"AGY_CODE","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"MVP_ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Zone_ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"JOB_TITLE_CODE_2","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"JOB_TITLE_NM_2","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MGT_RLTN_BEG_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"CP+ Score","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"CP+ Date","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"AssessmentConclusion","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Referral Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Warm Sourced?","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"On Hard-Coded tab?","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"On Hard-Coded tab?_1","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Credited Source Leader","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Leader Effectiveness Ranking Report//RAR Contracts from DVP or CRR.xlsx'), null, true),    #'RAR Contracts_Sheet' = Source{[Item='RAR Contracts',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'RAR Contracts_Sheet', [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'RAR Contract Hires Detail', type any}, {'CORP_EMP_ID_CDE', type text}, {'EMPL_NM', type text}, {'AGY_CODE', Int64.Type}, {'MVP_ID', Int64.Type}, {'Zone_ID', Int64.Type}, {'JOB_TITLE_CODE_2', Int64.Type}, {'JOB_TITLE_NM_2', type text}, {'MGT_RLTN_BEG_DATE', type date}, {'CP+ Score', Int64.Type}, {'CP+ Date', type any}, {'Assessment#(lf)Conclusion', type text}, {'Referral Type', type text}, {'Warm Sourced?', type text}, {'On Hard-Coded tab?', type text}, {'On Hard-Coded tab?_1', type text}, {'Credited Source Leader', type text}, {'TSID', type text}}),    #'Filtered Rows' = Table.SelectRows(#'Changed Type', each ([CORP_EMP_ID_CDE] \u003c\u003e null))in    #'Filtered Rows'"}]},{"name":"Workday Leader Directory","isHidden":false,"storageMode":"Import","columns":[{"name":"Employee ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Worker","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Preferred Name - First Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Last Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Profile","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Code","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Job Family","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Business Title","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Worker Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Time Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Management Level","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Number of Direct Reports","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Phone","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Email","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Location","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Work Space from Worker Primary Job","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Total Base Pay - Amount","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Division","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Cost Center","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Cost Center - ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Supervisory Organization","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Manager","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Manager Job Profile","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Manager ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Manager\u0027s Email","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Continuous Service Date/Service Anniversary","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Start Date in Current Job OR Hire Date","dataType":"DateTime","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Leader Effectiveness Ranking Report//Workday Leader Directory.xlsx'), null, true),    #'Directory by Job Profile - Thri_Sheet' = Source{[Item='Directory by Job Profile - Thri',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'Directory by Job Profile - Thri_Sheet', [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Employee ID', type text}, {'Worker', type text}, {'Preferred Name - First Name', type text}, {'Last Name', type text}, {'Job Profile', type text}, {'Job Code', Int64.Type}, {'Job Family', type text}, {'Business Title', type text}, {'Worker Type', type text}, {'Time Type', type text}, {'Management Level', type text}, {'Number of Direct Reports', Int64.Type}, {'Phone', type text}, {'Email', type text}, {'Location', type text}, {'Work Space from Worker Primary Job', type any}, {'Total Base Pay - Amount', Int64.Type}, {'Division', type text}, {'Cost Center', type text}, {'Cost Center - ID', Int64.Type}, {'Supervisory Organization', type text}, {'Manager', type text}, {'Manager Job Profile', type text}, {'Manager ID', type text}, {'Manager\u0027s Email', type text}, {'Continuous Service Date/Service Anniversary', type date}, {'Start Date in Current Job OR Hire Date', type date}}),    #'Filtered Rows' = Table.SelectRows(#'Changed Type', each ([Employee ID] \u003c\u003e null))in    #'Filtered Rows'"}]},{"name":"Not Yet Eligible","isHidden":false,"storageMode":"Import","columns":[{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Preferred Name - First Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Last Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Profile","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Workday Job Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Family","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Business Title","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Worker Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Time Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Management Level","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Number of Direct Reports","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Phone","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Email","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Location","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Work Space from Worker Primary Job","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Total Base Pay - Amount","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Division","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Cost Center","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Cost Center - ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Supervisory Organization","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Manager","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Manager Job Profile","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Manager ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Manager\u0027s Email","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Continuous Service Date/Service Anniversary","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Start Date in Current Role","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Job Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG","dataType":"String","isHidden":false,"expression":"CONCATENATE(CONCATENATE(CONCATENATE([Location],' (0'),[Cost Center - ID]),')')","columnType":"Calculated"},{"name":"WORKER_STATUS_FCT_DATES.ORZN_ZONE_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"WORKER_STATUS_FCT_DATES.EFF_BEG_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Reason for Ineligibility","dataType":"String","isHidden":false,"expression":"if(\u0027Not Yet Eligible\u0027[Job Code]='001011','Field Leader in Training',if(\u0027Not Yet Eligible\u0027[Start Date in Current Role]\u003edate(2023,6,30),'Past 6/30 Start Date','Unknown'))","columnType":"Calculated"},{"name":"Leader Backup - 1004.Employee ID","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = #'Workday Leader Directory',    #'Filtered Rows' = Table.SelectRows(Source, each ([Job Code] = 1011)),    #'Renamed Columns' = Table.RenameColumns(#'Filtered Rows',{{'Employee ID', 'TSID'}, {'Worker', 'Name'}, {'Job Code', 'Workday Job Code'}, {'Start Date in Current Job OR Hire Date', 'Start Date in Current Role'}}),    #'Lowercased Text' = Table.TransformColumns(Table.TransformColumnTypes(#'Renamed Columns', {{'Workday Job Code', type text}}, 'en-US'),{{'Workday Job Code', Text.Lower, type text}}),    #'Added Custom' = Table.AddColumn(#'Lowercased Text', 'Job Code', each Text.Combine({'00',[Workday Job Code]})),    #'Merged Queries' = Table.NestedJoin(#'Added Custom', {'TSID'}, WORKER_STATUS_FCT_DATES, {'SRC_SYS_KEY_TXT'}, 'WORKER_STATUS_FCT_DATES', JoinKind.LeftOuter),    #'Expanded WORKER_STATUS_FCT_DATES' = Table.ExpandTableColumn(#'Merged Queries', 'WORKER_STATUS_FCT_DATES', {'ORZN_ZONE_CDE', 'EFF_BEG_DT'}, {'WORKER_STATUS_FCT_DATES.ORZN_ZONE_CDE', 'WORKER_STATUS_FCT_DATES.EFF_BEG_DT'}),    #'Appended Query' = Table.Combine({#'Expanded WORKER_STATUS_FCT_DATES', #'WORKER_STATUS_FCT_DATES - Not Eligible'}),    #'Appended Query1' = Table.Combine({#'Appended Query', #'Workday Dir - Sr Mkt Dir - Not Eligible'}),    #'Filtered Rows1' = Table.SelectRows(#'Appended Query1', each ([TSID] \u003c\u003e null))in    #'Filtered Rows1'"}]},{"name":"DIrector List","isHidden":false,"storageMode":"Import","columns":[{"name":"SRC_SYS_KEY_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"WORKER_STS_FCT_MKT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_DEPT_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"WORKER_STS_FCT_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"EFF_BEG_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"ORZN_ZONE_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Workday Leader Directory.Cost Center","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"0630 Leader Backup.Employee ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = WORKER_STATUS_FCT_DATES,    #'Filtered Rows' = Table.SelectRows(Source, each ([JOB_TYP_CDE] = '001007'))in    #'Filtered Rows'"}]},{"name":"Market Mapping","isHidden":false,"storageMode":"Import","columns":[{"name":"HIER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Zone_Leader_TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Zone_Leader_Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Effective_Begin_Dt","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market Leader Job Code","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Market Leader Title","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"MVP_ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Zone_ID","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Leader Effectiveness Ranking Report//Market Mapping.xlsx'), null, true),    APPEND_TABLE_Sheet = Source{[Item='APPEND_TABLE',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(APPEND_TABLE_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'HIER_ID', type text}, {'Zone_Leader_TSID', type text}, {'Zone_Leader_Name', type text}, {'Effective_Begin_Dt', type text}, {'Market Leader Job Code', Int64.Type}, {'Market Leader Title', type text}, {'RFO', Int64.Type}, {'MVP_ID', Int64.Type}, {'Zone_ID', Int64.Type}})in    #'Changed Type'"}]},{"name":"Other Leaders","isHidden":false,"storageMode":"Import","columns":[{"name":"Employee ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Worker","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Preferred Name - First Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Last Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Profile","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Code","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Job Family","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Business Title","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Worker Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Time Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Management Level","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Number of Direct Reports","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Phone","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Email","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Location","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Work Space from Worker Primary Job","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Total Base Pay - Amount","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Division","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Cost Center","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Cost Center - ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Supervisory Organization","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Manager","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Manager Job Profile","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Manager ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Manager\u0027s Email","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Continuous Service Date/Service Anniversary","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Start Date in Current Job OR Hire Date","dataType":"DateTime","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = #'Workday Leader Directory',    #'Filtered Rows' = Table.SelectRows(Source, each ([Job Code] = 1505 or [Job Code] = 1506 or [Job Code] = 1705)),    #'Merged Queries' = Table.NestedJoin(#'Filtered Rows', {'Employee ID'}, #'Market Mapping', {'Zone_Leader_TSID'}, 'Market Mapping', JoinKind.LeftOuter)in    #'Merged Queries'"}]},{"name":"WID","isHidden":false,"storageMode":"Import","columns":[{"name":"RALN_MKT_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"WID","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"PY WID","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CY WID","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'SELECT #(lf)    A.Market,#(lf)    CASE WHEN B.''Total Sales Reporting Product Sub-Group Description''= \u0027TAN Managed Accounts\u0027 THEN \u00270716-01-00\u0027 ELSE A.RALN_MKT_CDE END AS RALN_MKT_CDE,#(lf)#(tab)C.''Distribution Performance Reporting Year Number'' AS ''CalYr'',#(lf)#(tab)B.''Credited Advisor Identifier'' AS COMP_PYEE_ID,#(lf)#(tab)UPPER(B.''Total Sales Reporting Product Sub-Group Description'') AS ''Product'',#(lf)   SUM( B.''WID'') AS ''Value''#(lf)#(lf)FROM#(lf)#(lf)#(lf)  (SELECT #(lf)#(lf)''Sales Transaction Process Date'',#(lf)''Credited Advisor Identifier'',#(lf)#(tab)''Distribution Channel Code'',#(lf)#(tab)''Distribution Channel Description'',#(lf)#(tab)''Total Sales Reporting Product Type'',#(lf)#(tab)''Total Sales Reporting Product Group Description'',#(lf)#(tab)''Total Sales Reporting Product Sub-Group Description'',#(lf)SUM(''Weighted Investment Deposit Amount'') AS WID#(lf)#(lf)FROM  ENTERPRISE_EDW.PRESENTATION_01.''WID Transaction Confidential''#(lf)#(lf)WHERE YEAR(''Sales Transaction Process Date'') \u003e= 2022#(lf)//   AND (#(lf)//     MONTH(''Sales Transaction Process Date'') \u003c MONTH(GETDATE())  OR#(lf)//     (MONTH(''Sales Transaction Process Date'') = MONTH(GETDATE()) AND DAY(''Sales Transaction Process Date'') \u003c DAY(GETDATE()))#(lf)//     )#(lf)AND YEAR(''Sales Transaction Process Date'') \u003c= 2023#(lf)   AND ''Distribution Channel Code'' IN (\u0027CAREER\u0027, \u0027OTH\u0027, \u0027TAN\u0027,\u0027TFGT\u0027,\u0027TRUST\u0027)#(lf)#(lf)GROUP BY #(lf) #(lf)    ''Sales Transaction Process Date'',#(lf)    ''Credited Advisor Identifier'',#(lf)#(tab)''Distribution Channel Code'',#(lf)#(tab)''Distribution Channel Description'',#(lf)#(tab)''Total Sales Reporting Product Type'',#(lf)#(tab)''Total Sales Reporting Product Group Description'',#(lf)#(tab)''Total Sales Reporting Product Sub-Group Description'')#(lf)#(lf) AS B #(lf)#(lf)LEFT JOIN#(lf)#(lf)//Select Current and Transfer rows from Sales Hierarchy--- START#(lf)#(lf)(SELECT DISTINCT#(lf)#(lf)#(tab)''Sales Hierarchy Identifier'',#(lf)#(tab)''Effective Begin Date'' AS BeginDate,#(lf)#(tab)''Effective End Date''-1 AS EndDate,#(lf)    ''Organization Zone Code'' AS RALN_MKT_CDE,#(lf)#(tab)''Organization Sub Department Code'' AS RALN_RFO_CDE,#(lf)    (case when length(''Organization Zone Code'') = 7 then \u002700\u0027#(lf)             else substr(''Organization Zone Code'',6,2)#(lf)           end) as MVP,#(lf)          (case when length(''Organization Zone Code'') = 7 then substr(''Organization Zone Code'',6,2) #(lf)             else substr(''Organization Zone Code'',9,2)#(lf)           end) as Market#(lf)           #(lf)           #(lf)FROM ENTERPRISE_EDW.PRESENTATION_01.''Sale Hierarchy Dimension''#(lf)    WHERE #(lf)#(lf)        ''Current Row Indicator''=\u0027Y\u0027#(lf)        AND ''Effective Begin Date''\u003c=(''Effective End Date''-1)) AS A#(lf)        #(lf)//Select Current and Transfer rows from Sales Hierarchy--- END#(lf)#(lf)ON (A.''Sales Hierarchy Identifier''=B.''Credited Advisor Identifier'' AND B.''Sales Transaction Process Date'' BETWEEN A.BeginDate  AND A.EndDate)#(lf)#(lf)#(lf)LEFT JOIN (#(lf)  #(lf)//Determine Max Cal Day of the week--- START#(lf)#(lf)SELECT#(lf)  #(lf)    T1.''Calendar Day Date'',#(lf)    T1.''Distribution Performance Reporting Year Number'',#(lf)#(tab)T1.''Distribution Performance Reporting Year Week Number'',#(lf)    T2.max_cal_dt#(lf)  #(lf)  FROM ENTERPRISE_EDW.PRESENTATION_01.''Distribution Performance Dates Dimension'' AS T1#(lf)  #(lf)  INNER JOIN#(lf)  #(lf)  (SELECT   #(lf)    ''Distribution Performance Reporting Year Number'',#(lf)#(tab)''Distribution Performance Reporting Year Week Number'',#(lf)    MAX(''Calendar Day Date'') AS max_cal_dt#(lf)#(lf)    FROM ENTERPRISE_EDW.PRESENTATION_01.''Distribution Performance Dates Dimension''#(lf)#(lf)    GROUP BY     #(lf)        ''Distribution Performance Reporting Year Number'',#(lf)#(tab)    ''Distribution Performance Reporting Year Week Number'') AS T2 ON (T1.''Distribution Performance Reporting Year Number''=T2.''Distribution Performance Reporting Year Number'' AND T1.''Distribution Performance Reporting Year Week Number''=T2.''Distribution Performance Reporting Year Week Number'')#(lf) #(lf)  ) AS C #(lf)  #(lf)//Determine Max Cal Day of the week--- END#(lf)    #(lf)    ON (B.''Sales Transaction Process Date''=C.''Calendar Day Date'')#(lf)    #(lf)#(lf)LEFT JOIN ENTERPRISE_EDW.PRESENTATION_01.''Workforce Dimension Detail'' AS D ON (B.''Credited Advisor Identifier''=D.''Employee Identifier'' AND D.''Current Row Indicator''=\u0027Y\u0027)#(lf)  #(lf)  GROUP BY#(lf)    A.Market,#(lf)    CASE WHEN B.''Total Sales Reporting Product Sub-Group Description''= \u0027TAN Managed Accounts\u0027 THEN \u00270716-01-00\u0027 ELSE A.RALN_MKT_CDE END,#(lf)#(tab)C.''Distribution Performance Reporting Year Number'',#(lf)#(tab)''Distribution Channel Code'',#(lf)    B.''Credited Advisor Identifier'',#(lf)#(tab)B.''Total Sales Reporting Product Type'',#(lf)    B.''Total Sales Reporting Product Group Description'',#(lf)#(tab)B.''Total Sales Reporting Product Sub-Group Description''', null, [EnableFolding=true]),    #'Filtered Rows' = Table.SelectRows(Source, each [MARKET] = '69' or [MARKET] = '79' or [MARKET] = '98' or [MARKET] = '99'),    Custom1 = Table.TransformColumnTypes(#'Filtered Rows',{{'CalYr', Int64.Type}}),    #'Added Custom' = Table.AddColumn(Custom1, 'PY WID', each if [CalYr]=2022 then [Value] else 0),    #'Added Custom1' = Table.AddColumn(#'Added Custom', 'CY WID', each if [CalYr] = 2023 then [Value] else 0),    #'Grouped Rows' = Table.Group(#'Added Custom1', {'RALN_MKT_CDE'}, {{'WID', each List.Sum([Value]), type nullable number}, {'PY WID', each List.Sum([PY WID]), type number}, {'CY WID', each List.Sum([CY WID]), type number}})in    #'Grouped Rows'"}]},{"name":"Market Mapping w Metrics","isHidden":false,"storageMode":"Import","columns":[{"name":"Zone_Leader_TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Zone_Leader_Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market Leader Job Code","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Market Leader Title","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PY WID","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CY WID","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"PY LH ANBP","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CY LH ANBP","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"PY Total ANBP","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CY Total ANBP","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"YOY WID","dataType":"String","isHidden":false,"expression":"if([PY WID]=0,if([CY WID]=0,0,1),([CY WID]-[PY WID])/[PY WID])","columnType":"Calculated"},{"name":"YOY Total ANBP","dataType":"String","isHidden":false,"expression":"if([PY Total ANBP]=0,if([CY Total ANBP]=0,0,1),([CY Total ANBP]-[PY Total ANBP])/[PY Total ANBP])","columnType":"Calculated"},{"name":"YOY LH ANBP","dataType":"String","isHidden":false,"expression":"if([PY LH ANBP]=0,if([CY LH ANBP]=0,0,1),([CY LH ANBP]-[PY LH ANBP])/[PY LH ANBP])","columnType":"Calculated"},{"name":"GPA YOY WID","dataType":"String","isHidden":false,"expression":"if([Market Leader Job Code]=1506,[YOY WID],-9999)","columnType":"Calculated"},{"name":"GPA YOY Total ANBP","dataType":"String","isHidden":false,"expression":"if([Market Leader Job Code]=1506,[YOY Total ANBP],-9999)","columnType":"Calculated"},{"name":"GPA YOY LH ANBP","dataType":"String","isHidden":false,"expression":"if([Market Leader Job Code]=1506,[YOY LH ANBP],-9999)","columnType":"Calculated"},{"name":"Other YOY WID","dataType":"String","isHidden":false,"expression":"if([Market Leader Job Code]=1506,-9999,[YOY WID])","columnType":"Calculated"},{"name":"Other YOY Total ANBP","dataType":"String","isHidden":false,"expression":"if([Market Leader Job Code]=1506,-9999,[YOY Total ANBP])","columnType":"Calculated"},{"name":"Other YOY LH ANBP","dataType":"String","isHidden":false,"expression":"if([Market Leader Job Code]=1506,-9999,[YOY LH ANBP])","columnType":"Calculated"},{"name":"GPA YOY WID Rank","dataType":"String","isHidden":false,"expression":"Rankx(\u0027Market Mapping w Metrics\u0027,[GPA YOY WID])","columnType":"Calculated"},{"name":"GPA YOY LH ANBP Rank","dataType":"String","isHidden":false,"expression":"Rankx(\u0027Market Mapping w Metrics\u0027,[GPA YOY LH ANBP])","columnType":"Calculated"},{"name":"GPA YOY Total ANBP Rank","dataType":"String","isHidden":false,"expression":"Rankx(\u0027Market Mapping w Metrics\u0027,[GPA YOY Total ANBP])","columnType":"Calculated"},{"name":"Other YOY WID Rank","dataType":"String","isHidden":false,"expression":"Rankx(\u0027Market Mapping w Metrics\u0027,[Other YOY WID])","columnType":"Calculated"},{"name":"Other YOY Total ANBP Rank","dataType":"String","isHidden":false,"expression":"Rankx(\u0027Market Mapping w Metrics\u0027,[Other YOY Total ANBP])","columnType":"Calculated"},{"name":"Other YOY LH ANBP Rank","dataType":"String","isHidden":false,"expression":"Rankx(\u0027Market Mapping w Metrics\u0027,[Other YOY LH ANBP])","columnType":"Calculated"},{"name":"GPA Rank Sum","dataType":"String","isHidden":false,"expression":"[GPA YOY LH ANBP Rank] + [GPA YOY Total ANBP Rank] + \u0027Market Mapping w Metrics\u0027[GPA YOY WID Rank] + \u0027Market Mapping w Metrics\u0027[GPA NOG Rank]","columnType":"Calculated"},{"name":"GPA Total Rank","dataType":"String","isHidden":false,"expression":"Rankx(\u0027Market Mapping w Metrics\u0027,[GPA Rank Sum],,ASC)","columnType":"Calculated"},{"name":"Other Rank Sum","dataType":"String","isHidden":false,"expression":"[Other YOY LH ANBP Rank] + [Other YOY Total ANBP Rank] + [Other YOY WID Rank] + [Other NOG Rank]","columnType":"Calculated"},{"name":"Other Total Rank","dataType":"String","isHidden":false,"expression":"Rankx(\u0027Market Mapping w Metrics\u0027,[Other Rank Sum],,ASC)","columnType":"Calculated"},{"name":"Workday Leader Directory.Start Date in Current Job OR Hire Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Picture","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Net Organic Growth","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"GPA NOG","dataType":"String","isHidden":false,"expression":"if([Market Leader Job Code]=1506,[Net Organic Growth],-9999)","columnType":"Calculated"},{"name":"GPA NOG Rank","dataType":"String","isHidden":false,"expression":"Rankx(\u0027Market Mapping w Metrics\u0027,[GPA NOG])","columnType":"Calculated"},{"name":"Other NOG","dataType":"String","isHidden":false,"expression":"if([Market Leader Job Code]=1506,-9999,[Net Organic Growth])","columnType":"Calculated"},{"name":"Other NOG Rank","dataType":"String","isHidden":false,"expression":"Rankx(\u0027Market Mapping w Metrics\u0027,[Other NOG])","columnType":"Calculated"}],"measures":[],"source":[{"expression":"let    Source = #'Market Mapping',    #'Filtered Rows' = Table.SelectRows(Source, each ([Market Leader Job Code] = 1505 or [Market Leader Job Code] = 1506 or [Market Leader Job Code] = 1705)),    #'Merged Queries' = Table.NestedJoin(#'Filtered Rows', {'HIER_ID'}, WID, {'RALN_MKT_CDE'}, 'WID', JoinKind.LeftOuter),    #'Merged Queries1' = Table.NestedJoin(#'Merged Queries', {'HIER_ID'}, ANBP_OtherRev_SD, {'RALN_MKT_CDE'}, 'ANBP_OtherRev_SD', JoinKind.LeftOuter),    #'Merged Queries3' = Table.NestedJoin(#'Merged Queries1', {'HIER_ID'}, #'Net Organic Growth', {'TAG-MVP-MKT'}, 'Net Organic Growth', JoinKind.LeftOuter),    #'Expanded WID' = Table.ExpandTableColumn(#'Merged Queries3', 'WID', {'PY WID', 'CY WID'}, {'WID.PY WID', 'WID.CY WID'}),    #'Expanded ANBP_OtherRev_SD' = Table.ExpandTableColumn(#'Expanded WID', 'ANBP_OtherRev_SD', {'PY LH ANBP', 'CY LH ANBP', 'PY Total ANBP', 'CY Total ANBP'}, {'ANBP_OtherRev_SD.PY LH ANBP', 'ANBP_OtherRev_SD.CY LH ANBP', 'ANBP_OtherRev_SD.PY Total ANBP', 'ANBP_OtherRev_SD.CY Total ANBP'}),    #'Expanded Net Organic Growth' = Table.ExpandTableColumn(#'Expanded ANBP_OtherRev_SD', 'Net Organic Growth', {'Net Organic Growth'}, {'Net Organic Growth.Net Organic Growth'}),    #'Grouped Rows' = Table.Group(#'Expanded Net Organic Growth', {'Zone_Leader_TSID', 'Zone_Leader_Name', 'Market Leader Job Code', 'Market Leader Title'}, {{'PY WID', each List.Sum([WID.PY WID]), type nullable number}, {'CY WID', each List.Sum([WID.CY WID]), type nullable number}, {'PY LH ANBP', each List.Sum([ANBP_OtherRev_SD.PY LH ANBP]), type nullable number}, {'CY LH ANBP', each List.Sum([ANBP_OtherRev_SD.CY LH ANBP]), type nullable number}, {'PY Total ANBP', each List.Sum([ANBP_OtherRev_SD.PY Total ANBP]), type nullable number}, {'CY Total ANBP', each List.Sum([ANBP_OtherRev_SD.CY Total ANBP]), type nullable number}, {'Net Organic Growth', each List.Sum([Net Organic Growth.Net Organic Growth]), type nullable number}}),    #'Merged Queries2' = Table.NestedJoin(#'Grouped Rows', {'Zone_Leader_TSID'}, #'Workday Leader Directory', {'Employee ID'}, 'Workday Leader Directory', JoinKind.LeftOuter),    #'Expanded Workday Leader Directory' = Table.ExpandTableColumn(#'Merged Queries2', 'Workday Leader Directory', {'Start Date in Current Job OR Hire Date'}, {'Workday Leader Directory.Start Date in Current Job OR Hire Date'}),    Custom1 = Table.AddColumn(#'Expanded Workday Leader Directory', 'Picture', each 'https://myfield.thrivent.com/content/faimages/' \u0026 [Zone_Leader_TSID] \u0026 '.jpg')in    Custom1"}]},{"name":"ANBP_OtherRev_SD","isHidden":false,"storageMode":"Import","columns":[{"name":"RALN_MKT_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PY LH ANBP","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CY LH ANBP","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"PY Total ANBP","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CY Total ANBP","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////vsshr//shared//Public//DI and BI//Distribution Dashboard//ANBP_OtherRev_SD.csv'),[Delimiter=',', Columns=14, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'RALN_RFO_CDE', Int64.Type}, {'MVP', Int64.Type}, {'Market', Int64.Type}, {'RALN_MKT_CDE', type text}, {'COMP_PYEE_ID', type text}, {'EMP_NM', type text}, {'CalYr', Int64.Type}, {'CalWk', Int64.Type}, {'max_cal_dt', type date}, {'Product', type text}, {'Value', type number}, {'ANBP_OtherRev', type text}, {'Product_SubGroup', type text}, {'EnterpriseMapping_JoinValue', type text}}),    #'Filtered Rows' = Table.SelectRows(#'Changed Type', each ([CalYr] = 2022 or [CalYr] = 2023) and ([ANBP_OtherRev] = 'ANBP')),    #'Filtered Rows1' = Table.SelectRows(#'Filtered Rows', each [Market] = 69 or [Market] = 79 or [Market] = 98 or [Market] = 99),    #'Merged Queries' = Table.NestedJoin(#'Filtered Rows1', {'CalWk'}, Weeks, {'WEEK'}, 'Weeks', JoinKind.Inner),    #'Removed Columns' = Table.RemoveColumns(#'Merged Queries',{'Weeks'}),    #'Merged Queries1' = Table.NestedJoin(#'Removed Columns', {'Product'}, #'Product Mapping', {'Product'}, 'Product Mapping', JoinKind.LeftOuter),    #'Expanded Product Mapping' = Table.ExpandTableColumn(#'Merged Queries1', 'Product Mapping', {'Group'}, {'Product Mapping.Group'}),    #'Added Custom' = Table.AddColumn(#'Expanded Product Mapping', 'PY LH ANBP', each if [CalYr]=2022 then (if ([Product Mapping.Group] = 'Life' or [Product Mapping.Group] = 'Health') then [Value] else 0) else 0),    #'Added Custom1' = Table.AddColumn(#'Added Custom', 'CY LH ANBP', each if [CalYr]=2023 then (if ([Product Mapping.Group] = 'Life' or [Product Mapping.Group] = 'Health') then [Value] else 0) else 0),    #'Added Custom2' = Table.AddColumn(#'Added Custom1', 'PY Total ANBP', each if [CalYr]=2022 then [Value] else 0),    #'Added Custom3' = Table.AddColumn(#'Added Custom2', 'CY Total ANBP', each if [CalYr]=2023 then [Value] else 0),    #'Grouped Rows' = Table.Group(#'Added Custom3', {'RALN_MKT_CDE'}, {{'PY LH ANBP', each List.Sum([PY LH ANBP]), type number}, {'CY LH ANBP', each List.Sum([CY LH ANBP]), type number}, {'PY Total ANBP', each List.Sum([PY Total ANBP]), type number}, {'CY Total ANBP', each List.Sum([CY Total ANBP]), type number}})in    #'Grouped Rows'"}]},{"name":"Product Mapping","isHidden":false,"storageMode":"Import","columns":[{"name":"Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Product Roll Up","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Group","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Type","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////Vsshr//shared//Public//DI and BI//Sales Dashboard//RFO_2020_Product_Goals Product MappingNew.xlsx'), null, true),    Mapping_Sheet = Source{[Item='Mapping',Kind='Sheet']}[Data],    #'Changed Type' = Table.TransformColumnTypes(Mapping_Sheet,{{'Column1', type text}, {'Column2', type text}, {'Column3', type text}, {'Column4', type text}}),    #'Promoted Headers' = Table.PromoteHeaders(#'Changed Type', [PromoteAllScalars=true]),    #'Changed Type1' = Table.TransformColumnTypes(#'Promoted Headers',{{'Product', type text}, {'Product Roll Up', type text}, {'Group', type text}, {'Type', type text}})in    #'Changed Type1'"}]},{"name":"OVERRIDES","isHidden":false,"storageMode":"Import","columns":[{"name":"CORP_MGR_ID_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CORP_EMP_ID_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"BEG_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"END_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Pace Date1","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Join Value","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////vsshr//shared//Public//DI and BI//Leader Effectiveness Ranking Report//OVERRIDES.csv'),[Delimiter=',', Columns=6, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'CORP_MGR_ID_CDE', type text}, {'CORP_EMP_ID_CDE', type text}, {'BEG_DATE', type date}, {'END_DATE', type date}, {'Pace Date1', type date}, {'Market', type text}}),    #'Added Custom' = Table.AddColumn(#'Changed Type', 'Join Value', each Date.ToText ([Pace Date1], 'MM/dd/yy') \u0026 [CORP_EMP_ID_CDE])in    #'Added Custom'"}]},{"name":"Definitions","isHidden":false,"storageMode":"Import","columns":[{"name":"Report","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Category","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Term","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Order","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Definition","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(Web.Contents('https://thrivent.sharepoint.com/sites/SDFieldReportingAnalytics/Shared Documents/General/Reporting Data Dictionary.xlsx'), null, true),    Sheet1_Sheet = Source{[Item='Sheet1',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true]),    #'Filtered Rows' = Table.SelectRows(#'Promoted Headers', each ([Report] = 'Leader Conference Tracking')),    #'Changed Type' = Table.TransformColumnTypes(#'Filtered Rows',{{'Order', Int64.Type}})in    #'Changed Type'"}]},{"name":"Weights","isHidden":false,"storageMode":"Import","columns":[{"name":"Job Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Capacity Value","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Leader Effectiveness Ranking Report//OG Background Data.xlsx'), null, true),    Weights_Sheet = Source{[Item='Weights',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Weights_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Job Code', type text}, {'Capacity Value', type number}})in    #'Changed Type'"}]},{"name":"TAG Names","isHidden":false,"storageMode":"Import","columns":[{"name":"TAG_Num","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"TAG_Txt","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Advisor Group (TAG)","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Leader Effectiveness Ranking Report//OG Background Data.xlsx'), null, true),    #'TAG Names_Sheet' = Source{[Item='TAG Names',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'TAG Names_Sheet', [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'TAG_Num', Int64.Type}, {'TAG_Txt', Int64.Type}, {'Advisor Group (TAG)', type text}})in    #'Changed Type'"}]},{"name":"New Hires - Detail","isHidden":false,"storageMode":"Import","columns":[{"name":"TAG","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Profile","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Worker","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP-Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Net Organic Growth","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Reason","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Effective Date","dataType":"DateTime","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Leader Effectiveness Ranking Report//Workday - New Hires.xlsx'), null, true),    #'New Hires - Thrivent_Sheet' = Source{[Item='QUERY_FOR_WORKDAY _ NEW HIR_000',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'New Hires - Thrivent_Sheet', [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Hire Date', type date}, {'Worker', type text}, {'Employee ID', type text}, {'Preferred Name - First Name', type text}, {'Preferred Name - Last Name', type text}, {'Employee Type', type text}, {'Job Code', type text}, {'Job Profile', type text}, {'Business Title', type text}, {'Scheduled Weekly Hours', Int64.Type}, {'Job Family (''Field-Field'' \u0026 ''Fie', type text}, {'Management Level', type text}, {'Number of Direct Reports', Int64.Type}, {'Supervisory Organization', type text}, {'Manager', type text}, {'Manager ID', type text}, {'MVP (Field)', type text}, {'Division', type text}, {'ZCF ESI Worker Business Process', type text}, {'Cost Center ID', Int64.Type}, {'Cost Center', type text}, {'Location', type text}, {'Location Address - State', type text}, {'Mail Stop', type any}, {'Rehired Employee', type text}, {'Continuous Service Date (Takes I', type date}, {'Email - Primary Work', type text}, {'Primary Home Address - State', type any}, {'Date Transaction Was Completed', type datetime}, {'Date transaction was initiated', type date}, {'Proposed Position Certifications', type any}, {'Field-Corp Job Classification', type text}}),    #'Removed Other Columns' = Table.SelectColumns(#'Changed Type',{'Hire Date', 'Worker', 'Employee ID', 'Job Code', 'Job Profile', 'Supervisory Organization', 'Manager', 'Rehired Employee'}),    #'Format: Superior TAG' = Table.ReplaceValue(#'Removed Other Columns','Superior TAG ','',Replacer.ReplaceText,{'Supervisory Organization'}),    #'Format: TAG #' = Table.ReplaceValue(#'Format: Superior TAG','TAG ','',Replacer.ReplaceText,{'Supervisory Organization'}),    #'Format: MVP #' = Table.ReplaceValue(#'Format: TAG #',' MVP ','-',Replacer.ReplaceText,{'Supervisory Organization'}),    #'Format: Market #' = Table.ReplaceValue(#'Format: MVP #',' Market ','-',Replacer.ReplaceText,{'Supervisory Organization'}),    #'Extract: Remove Supervisor' = Table.TransformColumns(#'Format: Market #', {{'Supervisory Organization', each Text.BeforeDelimiter(_, ' ('), type text}}),    #'Filter: GPA / GPD / NPD Markets' = Table.SelectRows(#'Extract: Remove Supervisor', each Text.EndsWith([Supervisory Organization], '69') or Text.EndsWith([Supervisory Organization], '79') or Text.EndsWith([Supervisory Organization], '98') or Text.EndsWith([Supervisory Organization], '99')),    #'Merge: Weights' = Table.NestedJoin(#'Filter: GPA / GPD / NPD Markets', {'Job Code'}, Weights, {'Job Code'}, 'Weights', JoinKind.LeftOuter),    #'Expand: Weights' = Table.ExpandTableColumn(#'Merge: Weights', 'Weights', {'Capacity Value'}, {'Capacity Value'}),    #'Added Custom2' = Table.AddColumn(#'Expand: Weights', 'TSID_Hire', each [Employee ID] \u0026 '-' \u0026 Date.ToText([Hire Date])),    #'Merged Queries' = Table.NestedJoin(#'Added Custom2', {'TSID_Hire'}, #'New Hires and Terms Check', {'TSID_Hire'}, 'New Hires and Terms Check', JoinKind.LeftOuter),    #'Expanded New Hires and Terms Check' = Table.ExpandTableColumn(#'Merged Queries', 'New Hires and Terms Check', {'TSID_Hire'}, {'New Hires and Terms Check.TSID_Hire'}),    #'Filtered Rows' = Table.SelectRows(#'Expanded New Hires and Terms Check', each ([New Hires and Terms Check.TSID_Hire] = null)),    #'Removed Columns1' = Table.RemoveColumns(#'Filtered Rows',{'TSID_Hire', 'New Hires and Terms Check.TSID_Hire'}),    #'Filter: Exclude null' = Table.SelectRows(#'Removed Columns1', each ([Capacity Value] \u003c\u003e null)),    #'Split: TAG \u0026 MVP \u0026 Market' = Table.SplitColumn(#'Filter: Exclude null', 'Supervisory Organization', Splitter.SplitTextByDelimiter('-', QuoteStyle.Csv), {'TAG', 'MVP', 'Market'}),    #'Format: Number' = Table.TransformColumnTypes(#'Split: TAG \u0026 MVP \u0026 Market',{{'TAG', type text}, {'MVP', Int64.Type}, {'Market', Int64.Type}}),    #'New Column: Credit' = Table.AddColumn(#'Format: Number', 'Credit', each if ([Market] = 98 or [Market] = 99) then 'NPD' else if [Market] = 79 then 'GPD' else if [Market] = 69 then 'GPA' else 'Other'),    Custom1 = Table.TransformColumns(#'New Column: Credit', {{'Worker', each Text.BeforeDelimiter(_, ' ('), type text}}),    Custom2 = Table.TransformColumns(#'Custom1', {{'Worker', each Text.BeforeDelimiter(_, ' ['), type text}}),    #'Added Custom' = Table.AddColumn(Custom2, 'MVP-Market', each '0' \u0026 Number.ToText([MVP]) \u0026 '-' \u0026 Number.ToText([Market])),    #'Added Custom1' = Table.AddColumn(#'Added Custom', 'Reason', each 'New Hire'),    #'Renamed Columns' = Table.RenameColumns(#'Added Custom1',{{'Capacity Value', 'Net Organic Growth'}, {'Hire Date', 'Effective Date'}}),    #'Removed Other Columns1' = Table.SelectColumns(#'Renamed Columns',{'Effective Date','Worker', 'Employee ID', 'Job Code', 'Job Profile', 'TAG', 'MVP-Market', 'Net Organic Growth', 'Reason'})in    #'Removed Other Columns1'"}]},{"name":"New Hires - Summary","isHidden":false,"storageMode":"Import","columns":[{"name":"TAG-MVP-MKT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Credit","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Weighted Growth (Hires)","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Head Count","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Leader Effectiveness Ranking Report//Workday - New Hires.xlsx'), null, true),    #'New Hires - Thrivent_Sheet' = Source{[Item='QUERY_FOR_WORKDAY _ NEW HIR_000',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'New Hires - Thrivent_Sheet', [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Hire Date', type date}, {'Worker', type text}, {'Employee ID', type text}, {'Preferred Name - First Name', type text}, {'Preferred Name - Last Name', type text}, {'Employee Type', type text}, {'Job Code', type text}, {'Job Profile', type text}, {'Business Title', type text}, {'Scheduled Weekly Hours', Int64.Type}, {'Job Family (''Field-Field'' \u0026 ''Fie', type text}, {'Management Level', type text}, {'Number of Direct Reports', Int64.Type}, {'Supervisory Organization', type text}, {'Manager', type text}, {'Manager ID', type text}, {'MVP (Field)', type text}, {'Division', type text}, {'ZCF ESI Worker Business Process', type text}, {'Cost Center ID', Int64.Type}, {'Cost Center', type text}, {'Location', type text}, {'Location Address - State', type text}, {'Mail Stop', type any}, {'Rehired Employee', type text}, {'Continuous Service Date (Takes I', type date}, {'Email - Primary Work', type text}, {'Primary Home Address - State', type any}, {'Date Transaction Was Completed', type datetime}, {'Date transaction was initiated', type date}, {'Proposed Position Certifications', type any}, {'Field-Corp Job Classification', type text}}),    #'Removed Other Columns' = Table.SelectColumns(#'Changed Type',{'Hire Date', 'Worker', 'Employee ID', 'Job Code', 'Job Profile', 'Supervisory Organization', 'Manager', 'Rehired Employee'}),    #'Format: Superior TAG' = Table.ReplaceValue(#'Removed Other Columns','Superior TAG ','',Replacer.ReplaceText,{'Supervisory Organization'}),    #'Format: TAG #' = Table.ReplaceValue(#'Format: Superior TAG','TAG ','',Replacer.ReplaceText,{'Supervisory Organization'}),    #'Format: MVP #' = Table.ReplaceValue(#'Format: TAG #',' MVP ','-',Replacer.ReplaceText,{'Supervisory Organization'}),    #'Format: Market #' = Table.ReplaceValue(#'Format: MVP #',' Market ','-',Replacer.ReplaceText,{'Supervisory Organization'}),    #'Extract: Remove Supervisor' = Table.TransformColumns(#'Format: Market #', {{'Supervisory Organization', each Text.BeforeDelimiter(_, ' ('), type text}}),    #'Filter: GPA / GPD / NPD Markets' = Table.SelectRows(#'Extract: Remove Supervisor', each Text.EndsWith([Supervisory Organization], '69') or Text.EndsWith([Supervisory Organization], '79') or Text.EndsWith([Supervisory Organization], '98') or Text.EndsWith([Supervisory Organization], '99')),    #'Merge: Weights' = Table.NestedJoin(#'Filter: GPA / GPD / NPD Markets', {'Job Code'}, Weights, {'Job Code'}, 'Weights', JoinKind.LeftOuter),    #'Expand: Weights' = Table.ExpandTableColumn(#'Merge: Weights', 'Weights', {'Capacity Value'}, {'Capacity Value'}),    #'Added Custom' = Table.AddColumn(#'Expand: Weights', 'TSID_Hire', each [Employee ID] \u0026 '-' \u0026 Date.ToText([Hire Date])),    #'Merged Queries' = Table.NestedJoin(#'Added Custom', {'TSID_Hire'}, #'New Hires and Terms Check', {'TSID_Hire'}, 'New Hires and Terms Check', JoinKind.LeftOuter),    #'Expanded New Hires and Terms Check' = Table.ExpandTableColumn(#'Merged Queries', 'New Hires and Terms Check', {'TSID_Hire'}, {'New Hires and Terms Check.TSID_Hire'}),    #'Filtered Rows' = Table.SelectRows(#'Expanded New Hires and Terms Check', each ([New Hires and Terms Check.TSID_Hire] = null)),    #'Removed Columns' = Table.RemoveColumns(#'Filtered Rows',{'TSID_Hire', 'New Hires and Terms Check.TSID_Hire'}),    #'Filter: Exclude null' = Table.SelectRows(#'Removed Columns', each ([Capacity Value] \u003c\u003e null)),    #'Split: TAG \u0026 MVP \u0026 Market' = Table.SplitColumn(#'Filter: Exclude null', 'Supervisory Organization', Splitter.SplitTextByDelimiter('-', QuoteStyle.Csv), {'TAG', 'MVP', 'Market'}),    #'New Column: Credit' = Table.AddColumn(#'Split: TAG \u0026 MVP \u0026 Market', 'Credit', each if ([Market] = '98' or [Market] = '99') then 'NPD' else if [Market] = '79' then 'GPD' else if [Market] = '69' then 'GPA' else 'Other'),    #'New Column: TAG-MVP-MKT' = Table.AddColumn(#'New Column: Credit', 'TAG-MVP-MKT', each [TAG] \u0026 '-' \u0026 [MVP] \u0026 '-' \u0026 [Market]),    #'Grouping: w/ Job Profile' = Table.Group(#'New Column: TAG-MVP-MKT', {'TAG-MVP-MKT', 'Credit', 'Job Profile', 'Hire Date', 'Capacity Value'}, {{'Head Count', each Table.RowCount(_), Int64.Type}}),    #'Renamed Columns' = Table.RenameColumns(#'Grouping: w/ Job Profile',{{'Capacity Value', 'Weighted Capacity'}}),    #'New Column: Wgt Hire Growth' = Table.AddColumn(#'Renamed Columns', 'Weighted Hiring Growth', each [Head Count] * [Weighted Capacity], type number),    #'Grouped Rows' = Table.Group(#'New Column: Wgt Hire Growth', {'TAG-MVP-MKT', 'Credit'}, {{'Weighted Growth (Hires)', each List.Sum([Weighted Hiring Growth]), type number}, {'Head Count', each List.Sum([Head Count]), type number}}),    #'Sorted Rows' = Table.Sort(#'Grouped Rows',{{'TAG-MVP-MKT', Order.Ascending}, {'Credit', Order.Ascending}})in    #'Sorted Rows'"}]},{"name":"Terminations - Detail","isHidden":false,"storageMode":"Import","columns":[{"name":"TAG","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Profile","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Worker","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP-Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Net Organic Growth","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Reason","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Effective Date","dataType":"DateTime","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Leader Effectiveness Ranking Report//Workday - Terminations.xlsx'), null, true),    #'Terminations - Thrivent_Sheet' = Source{[Item='Terminations - Thrivent',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'Terminations - Thrivent_Sheet', [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Termination Date', type date}, {'Worker', type text}, {'Preferred Name - First Name', type text}, {'Preferred Name - Last Name', type text}, {'Employee ID', type text}, {'Employee/Contingent Worker Type', type text}, {'Hire Date', type date}, {'Job Profile', type text}, {'Job Code', type text}, {'Job Family (''Field-Field'' \u0026 ''Field-AOS'' are for the Field)', type text}, {'Management Level - Proposed', type text}, {'Length of Service - Worker', type text}, {'Supervisory Organization', type text}, {'Manager', type text}, {'Manager ID', type text}, {'Cost Center', type text}, {'Cost Center ID', Int64.Type}, {'Division', type text}, {'ZCF ESI Worker Business Process - Proposed Strategic Category', type text}, {'Company', type text}, {'Location', type text}, {'Work State', type text}, {'Mail Stop', type any}, {'Date Transaction Was Entered Into System', type datetime}, {'Field-Corp Job Classification', type text}}),   #'Removed Other Columns' = Table.SelectColumns(#'Changed Type',{'Termination Date','Worker', 'Employee ID', 'Hire Date', 'Job Profile', 'Job Code', 'Supervisory Organization', 'Manager'}),    #'Format: Superior TAG' = Table.ReplaceValue(#'Removed Other Columns','Superior TAG ','',Replacer.ReplaceText,{'Supervisory Organization'}),    #'Format: TAG #' = Table.ReplaceValue(#'Format: Superior TAG','TAG ','',Replacer.ReplaceText,{'Supervisory Organization'}),    #'Format: MVP #' = Table.ReplaceValue(#'Format: TAG #',' MVP ','-',Replacer.ReplaceText,{'Supervisory Organization'}),    #'Format: Market #' = Table.ReplaceValue(#'Format: MVP #',' Market ','-',Replacer.ReplaceText,{'Supervisory Organization'}),    #'Extract: Remove Supervisor' = Table.TransformColumns(#'Format: Market #', {{'Supervisory Organization', each Text.BeforeDelimiter(_, ' ('), type text}}),    #'Filter: GPA / GPD / NPD Markets' = Table.SelectRows(#'Extract: Remove Supervisor', each Text.EndsWith([Supervisory Organization], '69') or Text.EndsWith([Supervisory Organization], '79') or Text.EndsWith([Supervisory Organization], '98') or Text.EndsWith([Supervisory Organization], '99')),    #'Merge: Weights' = Table.NestedJoin(#'Filter: GPA / GPD / NPD Markets', {'Job Code'}, Weights, {'Job Code'}, 'Weights', JoinKind.LeftOuter),    #'Expand: Weights' = Table.ExpandTableColumn(#'Merge: Weights', 'Weights', {'Capacity Value'}, {'Capacity Value'}),    #'Added Custom2' = Table.AddColumn(#'Expand: Weights', 'TSID_Term', each [Employee ID] \u0026 '-' \u0026 Date.ToText([Termination Date])),    #'Merged Queries' = Table.NestedJoin(#'Added Custom2', {'TSID_Term'}, #'New Hires and Terms Check', {'TSID_Term'}, 'New Hires and Terms Check', JoinKind.LeftOuter),    #'Expanded New Hires and Terms Check' = Table.ExpandTableColumn(#'Merged Queries', 'New Hires and Terms Check', {'TSID_Term'}, {'New Hires and Terms Check.TSID_Term'}),    #'Filtered Rows' = Table.SelectRows(#'Expanded New Hires and Terms Check', each ([New Hires and Terms Check.TSID_Term] = null)),    #'Removed Columns' = Table.RemoveColumns(#'Filtered Rows',{'TSID_Term', 'New Hires and Terms Check.TSID_Term'}),    #'Filter: Exclude null' = Table.SelectRows(#'Removed Columns', each ([Capacity Value] \u003c\u003e null)),    #'Split: TAG \u0026 MVP \u0026 Market' = Table.SplitColumn(#'Filter: Exclude null', 'Supervisory Organization', Splitter.SplitTextByDelimiter('-', QuoteStyle.Csv), {'TAG', 'MVP', 'Market'}),    #'Format: Number' = Table.TransformColumnTypes(#'Split: TAG \u0026 MVP \u0026 Market',{{'TAG', type text}, {'MVP', Int64.Type}, {'Market', Int64.Type}}),    #'New Column: Credit' = Table.AddColumn(#'Format: Number', 'Credit', each if ([Market] = 98 or [Market] = 99) then 'NPD' else if [Market] = 79 then 'GPD' else if [Market] = 69 then 'GPA' else 'Other'),    Custom1 = Table.TransformColumns(#'New Column: Credit', {{'Worker', each Text.BeforeDelimiter(_, ' ('), type text}}),    Custom2 = Table.TransformColumns(#'Custom1', {{'Worker', each Text.BeforeDelimiter(_, ' ['), type text}}),    Custom3 = Table.AddColumn(Custom2, 'MVP-Market', each '0' \u0026 Number.ToText([MVP]) \u0026 '-' \u0026 Number.ToText([Market])),    #'Added Custom' = Table.AddColumn(Custom3, 'Net Organic Growth', each -1 * [Capacity Value]),    #'Added Custom1' = Table.AddColumn(#'Added Custom', 'Reason', each 'Termination'),    #'Renamed Columns' = Table.RenameColumns(#'Added Custom1',{{'Termination Date', 'Effective Date'}}),    #'Removed Other Columns1' = Table.SelectColumns(#'Renamed Columns',{'Effective Date','Worker', 'Employee ID', 'Job Code', 'Job Profile', 'TAG', 'MVP-Market', 'Net Organic Growth', 'Reason'})in    #'Removed Other Columns1'"}]},{"name":"Terminations - Summary","isHidden":false,"storageMode":"Import","columns":[{"name":"TAG-MVP-MKT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Credit","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Weighted Growth (Terms)","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Head Count","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Leader Effectiveness Ranking Report//Workday - Terminations.xlsx'), null, true),    #'Terminations - Thrivent_Sheet' = Source{[Item='Terminations - Thrivent',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'Terminations - Thrivent_Sheet', [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Termination Date', type date}, {'Worker', type text}, {'Preferred Name - First Name', type text}, {'Preferred Name - Last Name', type text}, {'Employee ID', type text}, {'Employee/Contingent Worker Type', type text}, {'Hire Date', type date}, {'Job Profile', type text}, {'Job Code', type text}, {'Job Family (''Field-Field'' \u0026 ''Field-AOS'' are for the Field)', type text}, {'Management Level - Proposed', type text}, {'Length of Service - Worker', type text}, {'Supervisory Organization', type text}, {'Manager', type text}, {'Manager ID', type text}, {'Cost Center', type text}, {'Cost Center ID', Int64.Type}, {'Division', type text}, {'ZCF ESI Worker Business Process - Proposed Strategic Category', type text}, {'Company', type text}, {'Location', type text}, {'Work State', type text}, {'Mail Stop', type any}, {'Date Transaction Was Entered Into System', type datetime}, {'Field-Corp Job Classification', type text}}),    #'Removed Other Columns' = Table.SelectColumns(#'Changed Type',{'Termination Date','Worker', 'Employee ID', 'Hire Date', 'Job Profile', 'Job Code', 'Supervisory Organization', 'Manager'}),    #'Format: Superior TAG' = Table.ReplaceValue(#'Removed Other Columns','Superior TAG ','',Replacer.ReplaceText,{'Supervisory Organization'}),    #'Format: TAG #' = Table.ReplaceValue(#'Format: Superior TAG','TAG ','',Replacer.ReplaceText,{'Supervisory Organization'}),    #'Format: MVP #' = Table.ReplaceValue(#'Format: TAG #',' MVP ','-',Replacer.ReplaceText,{'Supervisory Organization'}),    #'Format: Market #' = Table.ReplaceValue(#'Format: MVP #',' Market ','-',Replacer.ReplaceText,{'Supervisory Organization'}),    #'Extract: Remove Supervisor' = Table.TransformColumns(#'Format: Market #', {{'Supervisory Organization', each Text.BeforeDelimiter(_, ' ('), type text}}),    #'Filter: GPA / GPD / NPD Markets' = Table.SelectRows(#'Extract: Remove Supervisor', each Text.EndsWith([Supervisory Organization], '69') or Text.EndsWith([Supervisory Organization], '79') or Text.EndsWith([Supervisory Organization], '98') or Text.EndsWith([Supervisory Organization], '99')),    #'Merge: Weights' = Table.NestedJoin(#'Filter: GPA / GPD / NPD Markets', {'Job Code'}, Weights, {'Job Code'}, 'Weights', JoinKind.LeftOuter),    #'Expand: Weights' = Table.ExpandTableColumn(#'Merge: Weights', 'Weights', {'Capacity Value'}, {'Capacity Value'}),    #'Added Custom' = Table.AddColumn(#'Expand: Weights', 'TSID_Term', each [Employee ID] \u0026 '-' \u0026 Date.ToText([Termination Date])),    #'Merged Queries' = Table.NestedJoin(#'Added Custom', {'TSID_Term'}, #'New Hires and Terms Check', {'TSID_Term'}, 'New Hires and Terms Check', JoinKind.LeftOuter),    #'Expanded New Hires and Terms Check' = Table.ExpandTableColumn(#'Merged Queries', 'New Hires and Terms Check', {'TSID_Term'}, {'New Hires and Terms Check.TSID_Term'}),    #'Filtered Rows' = Table.SelectRows(#'Expanded New Hires and Terms Check', each ([New Hires and Terms Check.TSID_Term] = null)),    #'Removed Columns' = Table.RemoveColumns(#'Filtered Rows',{'Termination Date', 'TSID_Term', 'New Hires and Terms Check.TSID_Term'}),    #'Filter: Exclude null' = Table.SelectRows(#'Removed Columns', each ([Capacity Value] \u003c\u003e null)),    #'Split: TAG \u0026 MVP \u0026 Market' = Table.SplitColumn(#'Filter: Exclude null', 'Supervisory Organization', Splitter.SplitTextByDelimiter('-', QuoteStyle.Csv), {'TAG', 'MVP', 'Market'}),    #'New Column: Credit' = Table.AddColumn(#'Split: TAG \u0026 MVP \u0026 Market', 'Credit', each if ([Market] = '98' or [Market] = '99') then 'NPD' else if [Market] = '79' then 'GPD' else if [Market] = '69' then 'GPA' else 'Other'),    #'New Column: TAG-MVP-MKT' = Table.AddColumn(#'New Column: Credit', 'TAG-MVP-MKT', each [TAG] \u0026 '-' \u0026 [MVP] \u0026 '-' \u0026 [Market]),    #'Grouping: w/ Job Profile' = Table.Group(#'New Column: TAG-MVP-MKT', {'TAG-MVP-MKT', 'Credit', 'Job Profile', 'Capacity Value'}, {{'Head Count', each Table.RowCount(_), Int64.Type}}),    #'Renamed Columns' = Table.RenameColumns(#'Grouping: w/ Job Profile',{{'Capacity Value', 'Weighted Capacity'}}),    #'New Column: Wgt Term Decline' = Table.AddColumn(#'Renamed Columns', 'Weighted Term Decline', each [Head Count] * [Weighted Capacity], type number),    #'Grouped Rows' = Table.Group(#'New Column: Wgt Term Decline', {'TAG-MVP-MKT', 'Credit'}, {{'Weighted Growth (Terms)', each List.Sum([Weighted Term Decline]), type number}, {'Head Count', each List.Sum([Head Count]), type number}}),    #'Sorted Rows' = Table.Sort(#'Grouped Rows',{{'TAG-MVP-MKT', Order.Ascending}, {'Credit', Order.Ascending}}),    #'Multiplied Column' = Table.TransformColumns(#'Sorted Rows', {{'Weighted Growth (Terms)', each _ * -1, type number}})in    #'Multiplied Column'"}]},{"name":"Role Changes - Detail","isHidden":false,"storageMode":"Import","columns":[{"name":"TAG","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Worker","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Profile","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP-Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Net Organic Growth","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Reason","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Effective Date","dataType":"DateTime","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Leader Effectiveness Ranking Report//Workday - Job Profile Changes.xlsx'), null, true),    #'Job Profile Changes - Thrivent_Sheet' = Source{[Item='Job Profile Changes - Thrivent',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'Job Profile Changes - Thrivent_Sheet', [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Effective Date', type date}, {'Active Status', type text}, {'Worker', type text}, {'Employee ID', type text}, {'From Job Profile', type text}, {'To Job Profile', type text}, {'From Job Code', type text}, {'To Job Code', type text}, {'Management Level - Current', type text}, {'Management Level - Proposed', type text}, {'Business Process Reason', type text}, {'To Grade', type any}, {'From Job Family (''Field-Field'' \u0026 ''Field-AOS'' are for the Field)', type text}, {'To Job Family (''Field-Field'' \u0026 ''Field-AOS'' are for the Field)', type text}, {'From Management Level', type text}, {'To Management Level', type text}, {'# of Direct Reports As of Today', Int64.Type}, {'From Supervisory Organization', type text}, {'To Supervisory Organization', type text}, {'Current EVP', type text}, {'Proposed EVP', type text}, {'From Cost Center', type text}, {'To Cost Center', type text}, {'From Cost Center ID', Int64.Type}, {'To Cost Center ID', Int64.Type}, {'From Division', type text}, {'To Division', type text}, {'From Location', type text}, {'To Location', type text}, {'Date Job Change Was Entered Into System', type datetime}}),    #'Removed Other Columns' = Table.SelectColumns(#'Changed Type',{'Effective Date', 'Worker', 'Employee ID', 'From Job Profile', 'To Job Profile', 'From Job Code', 'To Job Code', 'From Supervisory Organization', 'To Supervisory Organization'}),    #'Merge: Weights (From)' = Table.NestedJoin(#'Removed Other Columns', {'From Job Code'}, Weights, {'Job Code'}, 'Weights', JoinKind.LeftOuter),    #'Expand: Weights (From)' = Table.ExpandTableColumn(#'Merge: Weights (From)', 'Weights', {'Capacity Value'}, {'From Capacity Value'}),    #'Merge: Weights (To)' = Table.NestedJoin(#'Expand: Weights (From)', {'To Job Code'}, Weights, {'Job Code'}, 'Weights', JoinKind.LeftOuter),    #'Expand: Weights (To)' = Table.ExpandTableColumn(#'Merge: Weights (To)', 'Weights', {'Capacity Value'}, {'To Capacity Value'}),    #'Format: TAG #' = Table.ReplaceValue(#'Expand: Weights (To)','TAG ','',Replacer.ReplaceText,{'From Supervisory Organization', 'To Supervisory Organization'}),    #'New Column: Movement Filter' = Table.AddColumn(#'Format: TAG #', 'Movement Filter', each if ([From Capacity Value] = null and [To Capacity Value] = null) then 'EXCLUDE' else 'INCLUDE'),    #'Filter: INCLUDE only' = Table.SelectRows(#'New Column: Movement Filter', each ([Movement Filter] = 'INCLUDE')),    #'Format: MVP #' = Table.ReplaceValue(#'Filter: INCLUDE only',' MVP ','-',Replacer.ReplaceText,{'From Supervisory Organization', 'To Supervisory Organization'}),    #'Format: Market #' = Table.ReplaceValue(#'Format: MVP #',' Market ','-',Replacer.ReplaceText,{'From Supervisory Organization', 'To Supervisory Organization'}),    #'Format: Exclude Supervisor' = Table.TransformColumns(#'Format: Market #', {{'From Supervisory Organization', each Text.BeforeDelimiter(_, ' ('), type text}, {'To Supervisory Organization', each Text.BeforeDelimiter(_, ' ('), type text}}),    #'New Column: Market Filter' = Table.AddColumn(#'Format: Exclude Supervisor', 'Market Filter', each letTo_TAG=Text.Start([To Supervisory Organization],4),Fr_TAG=Text.Start([From Supervisory Organization],4),To_Mkt=Text.End([To Supervisory Organization],2),Fr_Mkt=Text.End([From Supervisory Organization],2)inif [To Supervisory Organization] = [From Supervisory Organization] then 'SAME MARKET' else if (Fr_Mkt='99' and To_Mkt='99') then 'SAME MARKET' else if (Fr_Mkt='98' and To_Mkt='98') then 'SAME MARKET' else if (Fr_Mkt='79' and To_Mkt='79' and To_TAG=Fr_TAG) then 'SAME MARKET' else if (Fr_Mkt='69' and To_Mkt='69' and To_TAG=Fr_TAG) then 'SAME MARKET' else 'NEW MARKET'),    #'Filter: Same Market' = Table.SelectRows(#'New Column: Market Filter', each ([Market Filter] = 'SAME MARKET')),    #'Filter: GPA / GPD / NPG Markets' = Table.SelectRows(#'Filter: Same Market', each Text.EndsWith([To Supervisory Organization], '69') or Text.EndsWith([To Supervisory Organization], '79') or Text.EndsWith([To Supervisory Organization], '98') or Text.EndsWith([To Supervisory Organization], '99')),    #'Filtered Rows' = Table.SelectRows(#'Filter: GPA / GPD / NPG Markets', each [From Job Code] \u003c\u003e '002022' and [From Job Code] \u003c\u003e '003100'),    #'Replaced Value' = Table.ReplaceValue(#'Filtered Rows',null,0,Replacer.ReplaceValue,{'From Capacity Value', 'To Capacity Value'}),    #'Appended Query' = Table.Combine({#'Replaced Value', #'Additional Role Changes - Detail'}),    #'New Column: Net Change' = Table.AddColumn(#'Appended Query', 'Role Change: Net Capacity Change', each [To Capacity Value] - [From Capacity Value], type number),    #'New Column: Credit' = Table.AddColumn(#'New Column: Net Change', 'Credit', each if Text.EndsWith([To Supervisory Organization], '69') then 'GPA' else if Text.EndsWith([To Supervisory Organization], '79') then 'GPD' else if (Text.EndsWith([To Supervisory Organization], '98') or Text.EndsWith([To Supervisory Organization], '99')) then 'NPD' else null),    Custom1 = Table.TransformColumns(#'New Column: Credit', {{'Worker', each Text.BeforeDelimiter(_, ' ('), type text}}),    Custom2 = Table.TransformColumns(#'Custom1', {{'Worker', each Text.BeforeDelimiter(_, ' ['), type text}}),    Custom3 = Table.AddColumn(Custom2, 'MVP-Market', each Text.Middle([To Supervisory Organization],5,5)),    #'Inserted Text Before Delimiter' = Table.AddColumn(Custom3, 'TAG', each Text.BeforeDelimiter([To Supervisory Organization], '-'), type text),    #'Duplicated Column' = Table.DuplicateColumn(#'Inserted Text Before Delimiter', 'Role Change: Net Capacity Change', 'Net Change'),    #'Changed Type1' = Table.TransformColumnTypes(#'Duplicated Column',{{'Net Change', type text}}),    #'Filtered Rows1' = Table.SelectRows(#'Changed Type1', each true),    #'Renamed Columns' = Table.RenameColumns(#'Filtered Rows1',{{'To Job Code', 'Job Code'}, {'To Job Profile', 'Job Profile'}, {'Role Change: Net Capacity Change', 'Net Organic Growth'}}),    #'Added Custom' = Table.AddColumn(#'Renamed Columns', 'Reason', each 'Role Change from '\u0026[From Job Profile]),    #'Removed Other Columns1' = Table.SelectColumns(#'Added Custom',{'Effective Date','Worker', 'Employee ID', 'Job Code', 'Job Profile', 'TAG', 'MVP-Market', 'Net Organic Growth', 'Reason'})in    #'Removed Other Columns1'"}]},{"name":"Role Changes - Summary","isHidden":false,"storageMode":"Import","columns":[{"name":"TAG-MVP-MKT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Credit","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Weighted Role Change","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Headcount","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Leader Effectiveness Ranking Report//Workday - Job Profile Changes.xlsx'), null, true),    #'Job Profile Changes - Thrivent_Sheet' = Source{[Item='Job Profile Changes - Thrivent',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'Job Profile Changes - Thrivent_Sheet', [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Effective Date', type date}, {'Active Status', type text}, {'Worker', type text}, {'Employee ID', type text}, {'From Job Profile', type text}, {'To Job Profile', type text}, {'From Job Code', type text}, {'To Job Code', type text}, {'Management Level - Current', type text}, {'Management Level - Proposed', type text}, {'Business Process Reason', type text}, {'To Grade', type any}, {'From Job Family (''Field-Field'' \u0026 ''Field-AOS'' are for the Field)', type text}, {'To Job Family (''Field-Field'' \u0026 ''Field-AOS'' are for the Field)', type text}, {'From Management Level', type text}, {'To Management Level', type text}, {'# of Direct Reports As of Today', Int64.Type}, {'From Supervisory Organization', type text}, {'To Supervisory Organization', type text}, {'Current EVP', type text}, {'Proposed EVP', type text}, {'From Cost Center', type text}, {'To Cost Center', type text}, {'From Cost Center ID', Int64.Type}, {'To Cost Center ID', Int64.Type}, {'From Division', type text}, {'To Division', type text}, {'From Location', type text}, {'To Location', type text}, {'Date Job Change Was Entered Into System', type datetime}}),    #'Removed Other Columns' = Table.SelectColumns(#'Changed Type',{'Effective Date', 'Worker', 'Employee ID', 'From Job Profile', 'To Job Profile', 'From Job Code', 'To Job Code', 'From Supervisory Organization', 'To Supervisory Organization'}),   #'Merge: Weights (From)' = Table.NestedJoin(#'Removed Other Columns', {'From Job Code'}, Weights, {'Job Code'}, 'Weights', JoinKind.LeftOuter),    #'Expand: Weights (From)' = Table.ExpandTableColumn(#'Merge: Weights (From)', 'Weights', {'Capacity Value'}, {'From Capacity Value'}),    #'Merge: Weights (To)' = Table.NestedJoin(#'Expand: Weights (From)', {'To Job Code'}, Weights, {'Job Code'}, 'Weights', JoinKind.LeftOuter),    #'Expand: Weights (To)' = Table.ExpandTableColumn(#'Merge: Weights (To)', 'Weights', {'Capacity Value'}, {'To Capacity Value'}),    #'Format: TAG #' = Table.ReplaceValue(#'Expand: Weights (To)','TAG ','',Replacer.ReplaceText,{'From Supervisory Organization', 'To Supervisory Organization'}),    #'New Column: Movement Filter' = Table.AddColumn(#'Format: TAG #', 'Movement Filter', each if ([From Capacity Value] = null and [To Capacity Value] = null) then 'EXCLUDE' else 'INCLUDE'),    #'Filter: INCLUDE only' = Table.SelectRows(#'New Column: Movement Filter', each ([Movement Filter] = 'INCLUDE')),    #'Format: MVP #' = Table.ReplaceValue(#'Filter: INCLUDE only',' MVP ','-',Replacer.ReplaceText,{'From Supervisory Organization', 'To Supervisory Organization'}),    #'Format: Market #' = Table.ReplaceValue(#'Format: MVP #',' Market ','-',Replacer.ReplaceText,{'From Supervisory Organization', 'To Supervisory Organization'}),    #'Format: Exclude Supervisor' = Table.TransformColumns(#'Format: Market #', {{'From Supervisory Organization', each Text.BeforeDelimiter(_, ' ('), type text}, {'To Supervisory Organization', each Text.BeforeDelimiter(_, ' ('), type text}}),    #'New Column: Market Filter' = Table.AddColumn(#'Format: Exclude Supervisor', 'Market Filter', each letTo_TAG=Text.Start([To Supervisory Organization],4),Fr_TAG=Text.Start([From Supervisory Organization],4),To_Mkt=Text.End([To Supervisory Organization],2),Fr_Mkt=Text.End([From Supervisory Organization],2)inif [To Supervisory Organization] = [From Supervisory Organization] then 'SAME MARKET' else if (Fr_Mkt='99' and To_Mkt='99') then 'SAME MARKET' else if (Fr_Mkt='98' and To_Mkt='98') then 'SAME MARKET' else if (Fr_Mkt='79' and To_Mkt='79' and To_TAG=Fr_TAG) then 'SAME MARKET' else if (Fr_Mkt='69' and To_Mkt='69' and To_TAG=Fr_TAG) then 'SAME MARKET' else 'NEW MARKET'),    #'Filter: Same Market' = Table.SelectRows(#'New Column: Market Filter', each ([Market Filter] = 'SAME MARKET')),    #'Filter: GPA / GPD / NPG Markets' = Table.SelectRows(#'Filter: Same Market', each Text.EndsWith([To Supervisory Organization], '69') or Text.EndsWith([To Supervisory Organization], '79') or Text.EndsWith([To Supervisory Organization], '98') or Text.EndsWith([To Supervisory Organization], '99')),    #'Filtered Rows' = Table.SelectRows(#'Filter: GPA / GPD / NPG Markets', each ([From Job Code] \u003c\u003e '002022' and [From Job Code] \u003c\u003e '003100')),    #'Replaced Value' = Table.ReplaceValue(#'Filtered Rows',null,0,Replacer.ReplaceValue,{'From Capacity Value', 'To Capacity Value'}),    #'Appended Query' = Table.Combine({#'Replaced Value', #'Additional Role Changes - Detail'}),    #'New Column: Net Change' = Table.AddColumn(#'Appended Query', 'Role Change: Net Capacity Change', each [To Capacity Value] - [From Capacity Value], type number),    #'New Column: Credit' = Table.AddColumn(#'New Column: Net Change', 'Credit', each if Text.EndsWith([To Supervisory Organization], '69') then 'GPA' else if Text.EndsWith([To Supervisory Organization], '79') then 'GPD' else if (Text.EndsWith([To Supervisory Organization], '98') or Text.EndsWith([To Supervisory Organization], '99')) then 'NPD' else null),    #'Inserted Text Before Delimiter' = Table.AddColumn(#'New Column: Credit', 'TAG', each Text.BeforeDelimiter([To Supervisory Organization], '-'), type text),    #'Renamed Columns' = Table.RenameColumns(#'Inserted Text Before Delimiter',{{'From Supervisory Organization', 'TAG-MVP-MKT'}}),    #'Grouped Rows' = Table.Group(#'Renamed Columns', {'TAG-MVP-MKT', 'Credit'}, {{'Weighted Role Change', each List.Sum([#'Role Change: Net Capacity Change']), type number}, {'Headcount', each Table.RowCount(_), Int64.Type}}),    #'Sorted Rows' = Table.Sort(#'Grouped Rows',{{'TAG-MVP-MKT', Order.Ascending}, {'Credit', Order.Ascending}})in    #'Sorted Rows'"}]},{"name":"Net Organic Growth","isHidden":false,"storageMode":"Import","columns":[{"name":"TAG-MVP-MKT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Credit","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Net Organic Growth","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.Combine({#'Role Changes - Summary', #'Terminations - Summary', #'New Hires - Summary'}),    #'Removed Columns' = Table.RemoveColumns(Source,{'Head Count', 'Headcount'}),    #'Replaced Value' = Table.ReplaceValue(#'Removed Columns',null,0,Replacer.ReplaceValue,{'Weighted Growth (Hires)', 'Weighted Growth (Terms)', 'Weighted Role Change'}),    #'Inserted Sum' = Table.AddColumn(#'Replaced Value', 'Net Organic Growth', each List.Sum({[#'Weighted Growth (Hires)'], [#'Weighted Growth (Terms)'], [Weighted Role Change]}), type number),    #'Grouped Rows' = Table.Group(#'Inserted Sum', {'TAG-MVP-MKT', 'Credit'}, {{'Net Organic Growth', each List.Sum([Net Organic Growth]), type number}}),    #'Added Custom' = Table.AddColumn(#'Grouped Rows', 'Manual Edits from Rob', each if [#'TAG-MVP-MKT']='0115-01-69' then -3.5 elseif [#'TAG-MVP-MKT']='0115-01-79' then -8.5 elseif [#'TAG-MVP-MKT']='0115-01-98' then 2 elseif [#'TAG-MVP-MKT']='0115-01-99' then 13.5 elseif [#'TAG-MVP-MKT']='0190-01-69' then -2.5 elseif [#'TAG-MVP-MKT']='0190-01-79' then -3.5 elseif [#'TAG-MVP-MKT']='0190-01-98' then 0 elseif [#'TAG-MVP-MKT']='0190-01-99' then 0 elseif [#'TAG-MVP-MKT']='0190-02-69' then 0 elseif [#'TAG-MVP-MKT']='0283-01-69' then -3 elseif [#'TAG-MVP-MKT']='0283-01-79' then -3 elseif [#'TAG-MVP-MKT']='0283-01-99' then 0 elseif [#'TAG-MVP-MKT']='0291-01-69' then -5.5 elseif [#'TAG-MVP-MKT']='0291-01-79' then 4.5 elseif [#'TAG-MVP-MKT']='0291-02-79' then 0 elseif [#'TAG-MVP-MKT']='0291-02-98' then 0 elseif [#'TAG-MVP-MKT']='0291-02-99' then 0 elseif [#'TAG-MVP-MKT']='0291-03-69' then 0 elseif [#'TAG-MVP-MKT']='0291-03-79' then 0 elseif [#'TAG-MVP-MKT']='0361-01-69' then -5 elseif [#'TAG-MVP-MKT']='0361-01-79' then -2 elseif [#'TAG-MVP-MKT']='0361-01-98' then 0 elseif [#'TAG-MVP-MKT']='0361-01-99' then 0 elseif [#'TAG-MVP-MKT']='0361-02-69' then 0 elseif [#'TAG-MVP-MKT']='0361-02-79' then 0 elseif [#'TAG-MVP-MKT']='0361-02-98' then 0 elseif [#'TAG-MVP-MKT']='0361-02-99' then 0 elseif [#'TAG-MVP-MKT']='0384-01-69' then -5 elseif [#'TAG-MVP-MKT']='0384-01-79' then 0 elseif [#'TAG-MVP-MKT']='0384-01-98' then 0 elseif [#'TAG-MVP-MKT']='0384-01-99' then 0 elseif [#'TAG-MVP-MKT']='0384-02-69' then 0 elseif [#'TAG-MVP-MKT']='0435-01-69' then -3.5 elseif [#'TAG-MVP-MKT']='0435-01-79' then -7 elseif [#'TAG-MVP-MKT']='0435-03-79' then 0 elseif [#'TAG-MVP-MKT']='0525-01-69' then -3 elseif [#'TAG-MVP-MKT']='0525-01-79' then 6 elseif [#'TAG-MVP-MKT']='0525-01-98' then 0 elseif [#'TAG-MVP-MKT']='0525-01-99' then 0 elseif [#'TAG-MVP-MKT']='0525-02-69' then 0 elseif [#'TAG-MVP-MKT']='0525-02-79' then 0 elseif [#'TAG-MVP-MKT']='0525-02-98' then 0 elseif [#'TAG-MVP-MKT']='0525-02-99' then 0 elseif [#'TAG-MVP-MKT']='0283-01-98' then 0 elseif [#'TAG-MVP-MKT']='0291-01-98' then 0 elseif [#'TAG-MVP-MKT']='0291-02-69' then 0 elseif [#'TAG-MVP-MKT']='0291-03-98' then 0 elseif [#'TAG-MVP-MKT']='0384-02-79' then 0 elseif [#'TAG-MVP-MKT']='0435-01-99' then 0 elseif [#'TAG-MVP-MKT']='0435-02-69' then 0 elseif [#'TAG-MVP-MKT']='0435-02-79' then 0 elseif [#'TAG-MVP-MKT']='0435-02-99' then 0 elseif [#'TAG-MVP-MKT']='0435-03-69' then 0 elseif [#'TAG-MVP-MKT']='0525-03-69' then 0 elseif [#'TAG-MVP-MKT']='0525-03-79' then 0 elseif [#'TAG-MVP-MKT']='0291-01-99' then 0 elseif [#'TAG-MVP-MKT']='0291-03-99' then 0 else999999999999999),    #'Removed Columns1' = Table.RemoveColumns(#'Added Custom',{'Net Organic Growth'}),    #'Renamed Columns' = Table.RenameColumns(#'Removed Columns1',{{'Manual Edits from Rob', 'Net Organic Growth'}})in    #'Renamed Columns'"}]},{"name":"New Client As-Of","isHidden":false,"storageMode":"Import","columns":[{"name":"NEW_CLIENT_AS_OF","dataType":"DateTime","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = DB2.Database('podwh021:50000', 'podwh021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT#(lf)MAX(CAL_DAY_DT) AS New_Client_AS_OF#(lf)FROM#(lf)(#(lf)SELECT IA_DATES_ITRL.DT_SK,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.CTRC_VRSN_NBR,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.WRTG_AGT_VRSN_NBR,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_STS_CDE,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.CUST_AGE,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.CUST_SK,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.AGE_CLAS_CDE,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.AGE_CLAS_DSCR,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_VLU,#(lf)       CNF_CUSTOMER_DIM_CFDL.CUST_LGAL_FMT_NM, #(lf)       CNF_CUSTOMER_DIM_CFDL.CUST_BRTH_DT,#(lf)       CNF_CUSTOMER_DIM_CFDL.MBR_TYP_CDE,#(lf)       CNF_CUSTOMER_DIM_CFDL.MBR_TYP_DSCR,#(lf)       CNF_CUSTOMER_DIM_CFDL.RSDL_ST_CDE,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.CTRC_ISS_DT, #(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L5_PLOB_SGRP_CDE,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L5_PLOB_SGRP_DSCR,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L4_PLOB_GRP_CDE,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L4_PLOB_GRP_DSCR,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L3_PROD_LOB_CDE,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L3_PROD_LOB_DSCR,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L2_PROD_CHAR_CDE,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L2_PROD_CHAR_DSCR,#(lf)       AGT_DIM_CURR_CFDL.PARY_DSPL_2_NM,#(lf)       AGT_DIM_CURR_CFDL.FRST_NM,#(lf)       AGT_DIM_CURR_CFDL.MDDL_NM,#(lf)       AGT_DIM_CURR_CFDL.LST_NM,#(lf)       AGT_DIM_CURR_CFDL.ADJ_SVC_DT,#(lf)       AGT_DIM_CURR_CFDL.EMP_ID,#(lf)       AGT_DIM_CURR_CFDL.EMP_STS_TYP_CDE,#(lf)       AGT_DIM_CURR_CFDL.EMP_STS_TYP_DSCR,#(lf)       AGT_DIM_CURR_CFDL.JOB_TYP_CDE,#(lf)       AGT_DIM_CURR_CFDL.JOB_TYP_DSCR,#(lf)       AGT_DIM_CURR_CFDL.CURR_ROW_IND,#(lf)       IA_DATES_ITRL.CAL_DAY_DT,#(lf)       IA_DATES_ITRL.CAL_MTH_NM,#(lf)       IA_DATES_ITRL.CAL_MTH_STRT_DT,#(lf)       IA_DATES_ITRL.CAL_MTH_END_DT,#(lf)       IA_DATES_ITRL.CAL_YR_QTR_NBR,#(lf)       IA_DATES_ITRL.CAL_QTR_NM,#(lf)       IA_DATES_ITRL.CAL_WK_NM,#(lf)       FIN_CUST_ELIG_DIM_CFDL.FIN_CUST_PNT_RSN_CDE,#(lf)       FIN_CUST_ELIG_DIM_CFDL.FIN_CUST_PNT_RSN_DSCR,#(lf)       FIN_CUST_ELIG_DIM_CFDL.CTRC_RLTN_TYP_CDE,#(lf)       FIN_CUST_ELIG_DIM_CFDL.CTRC_RLTN_TYP_DSCR,#(lf)       CASE#(lf)          WHEN (CUST_AGE \u003e= 0) AND (CUST_AGE \u003c= 15) THEN \u00270-15\u0027#(lf)          WHEN (CUST_AGE \u003e= 16) AND (CUST_AGE \u003c= 25) THEN \u002716-25\u0027#(lf)          WHEN (CUST_AGE \u003e= 26) AND (CUST_AGE \u003c= 35) THEN \u002726-35\u0027#(lf)          WHEN (CUST_AGE \u003e= 36) AND (CUST_AGE \u003c= 45) THEN \u002736-45\u0027#(lf)          WHEN (CUST_AGE \u003e= 46) AND (CUST_AGE \u003c= 55) THEN \u002746-55\u0027#(lf)          WHEN (CUST_AGE \u003e= 56) AND (CUST_AGE \u003c= 65) THEN \u002756-65\u0027#(lf)          WHEN (CUST_AGE \u003e= 66) AND (CUST_AGE \u003c= 75) THEN \u002766-75\u0027#(lf)          WHEN CUST_AGE \u003e 75 THEN \u002776+\u0027#(lf)       END#(lf)          AS Member_Age_Group,#(lf)       integer (floor ( (CURRENT DATE - CUST_BRTH_DT) / 10000)) AS Member_Age,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_WK_END_DT,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_WK_NBR,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_YR_NBR,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_YR_WK_NBR,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_WK_TXT,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_YR_TXT,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_DAY_TXT,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_MTH_TXT,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_QTR_TXT,#(lf)       SALE_HIER_DIM.SALE_HIER_ID,#(lf)       SALE_HIER_DIM.EFF_BEG_TMSP,#(lf)       SALE_HIER_DIM.EFF_END_TMSP,#(lf)       SALE_HIER_DIM.CURR_ROW_IND,#(lf)       SALE_HIER_DIM.PRTR_NM,#(lf)       SALE_HIER_DIM.MANP_NM,#(lf)       SALE_HIER_DIM.ORZN_ZONE_CDE,#(lf)       SALE_HIER_DIM.ORZN_ZONE_DSCR,#(lf)       (LEFT(SALE_HIER_DIM.ORZN_ZONE_CDE,4)) as ORZN_DEPT_CDE,#(lf)       SALE_HIER_DIM.ORZN_DEPT_DSCR,#(lf)       SALE_HIER_DIM.ORZN_DIV_CDE,#(lf)       SALE_HIER_DIM.ORZN_DIV_DSCR,#(lf)       SALE_HIER_DIM.ORZN_SUB_DEPT_CDE,#(lf)       SALE_HIER_DIM.SALE_HIER_DIM_SK#(lf)#(lf)  FROM ((((((COMMON.IA_DATES_ITRL IA_DATES_ITRL#(lf)             INNER JOIN COMMON.DTRB_PERF_DATES DTRB_PERF_DATES#(lf)                ON (IA_DATES_ITRL.DT_SK = DTRB_PERF_DATES.DT_SK))#(lf)            LEFT OUTER JOIN#(lf)            SALES.TF_FIN_CUST_EVT_FCT_CFDL TF_FIN_CUST_EVT_FCT_CFDL#(lf)               ON (IA_DATES_ITRL.DT_SK =#(lf)                      TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_CRNG_DT_SK))#(lf)           RIGHT OUTER JOIN HUMAN_RESOURCES.SALE_HIER_DIM SALE_HIER_DIM#(lf)              ON (SALE_HIER_DIM.SALE_HIER_DIM_SK =#(lf)                     TF_FIN_CUST_EVT_FCT_CFDL.SLHR_DIM_CURR_CRNG_AGT_SK))#(lf)          LEFT OUTER JOIN MEMBER.CNF_CUSTOMER_DIM_CFDL CNF_CUSTOMER_DIM_CFDL#(lf)             ON (CNF_CUSTOMER_DIM_CFDL.CUST_SK =#(lf)                    TF_FIN_CUST_EVT_FCT_CFDL.CUST_SK))#(lf)         LEFT OUTER JOIN HUMAN_RESOURCES.AGT_DIM_CURR_CFDL AGT_DIM_CURR_CFDL#(lf)            ON (AGT_DIM_CURR_CFDL.AGT_DIM_SK =#(lf)                   TF_FIN_CUST_EVT_FCT_CFDL.CRNG_AGT_SK))#(lf)        RIGHT OUTER JOIN SALES.FIN_CUST_ELIG_DIM_CFDL FIN_CUST_ELIG_DIM_CFDL#(lf)           ON (FIN_CUST_ELIG_DIM_CFDL.FIN_CUST_PNT_ELIG_DIM_SK =#(lf)                  TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_ELIG_DIM_SK))#(lf)       LEFT OUTER JOIN#(lf)       CONTRACT.CNF_CONTRACT_DIM_DTL_CFDL CNF_CONTRACT_DIM_DTL_CFDL#(lf)          ON     (CNF_CONTRACT_DIM_DTL_CFDL.CTRC_SK =#(lf)                     TF_FIN_CUST_EVT_FCT_CFDL.CTRC_SK)#(lf)            and   (CNF_CONTRACT_DIM_DTL_CFDL.VRSN_NBR =#(lf)                     TF_FIN_CUST_EVT_FCT_CFDL.CTRC_VRSN_NBR)#(lf)WHERE     (AGT_DIM_CURR_CFDL.CURR_ROW_IND = \u0027Y\u0027)#(lf)     #(lf)       AND (SALE_HIER_DIM.CURR_ROW_IND = \u0027Y\u0027)#(lf)       AND sale_hier_dim.ORZN_DEPT_CDE in (\u00270001\u0027,\u00270115\u0027,\u00270190\u0027,\u00270283\u0027,\u00270291\u0027,\u00270361\u0027,\u00270383\u0027,\u00270384\u0027,\u00270435\u0027,\u00270525\u0027,\u00270716\u0027)#(lf)       AND DTRB_PERF_DATES.DTRB_PERF_RPT_YR_NBR in (\u00272021\u0027,\u00272022\u0027,\u00272023\u0027)#(lf))']),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'NEW_CLIENT_AS_OF', type date}})in    #'Changed Type'"}]},{"name":"Net Organic Growth Detail","isHidden":false,"storageMode":"Import","columns":[{"name":"Worker","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Profile","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP-Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Net Organic Growth","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Reason","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Effective Date","dataType":"DateTime","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.Combine({#'New Hires - Detail', #'Terminations - Detail', #'Role Changes - Detail'}),    #'Filtered Rows' = Table.SelectRows(Source, each ([Net Organic Growth] \u003c\u003e 0)),    #'Changed Type' = Table.TransformColumnTypes(#'Filtered Rows',{{'Net Organic Growth', type number}})in    #'Changed Type'"}]},{"name":"Advice Adoption","isHidden":false,"storageMode":"Import","columns":[{"name":"Market with Leader","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Adopting Advisors %","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Rank (sorted by)","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Leader Effectiveness Ranking Report//Advice Adoption - Directors.xlsx'), null, true),    Export_Sheet = Source{[Item='Export',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Export_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Market with Leader', type text}, {'Adopting Advisors %', type number}, {'Rank (sorted by)', Int64.Type}, {'Market', type text}}),    #'Removed Other Columns' = Table.SelectColumns(#'Changed Type',{'Market with Leader', 'Adopting Advisors %', 'Rank (sorted by)', 'Market'})in    #'Removed Other Columns'"}]},{"name":"Sr Market Directors","isHidden":false,"storageMode":"Import","columns":[{"name":"HIER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Zone_Leader_TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Zone_Leader_Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Effective_Begin_Dt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Market Leader Job Code","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Market Leader Title","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"MVP_ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Zone_ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Pace Dir.Number of Weeks","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Pace Dir.Above Total Count","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Above FA Count","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Hires Count","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Hires","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Picture","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Advice Adoption.Adopting Advisors %","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Advice Adoption.Rank (sorted by)","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"TAG","dataType":"String","isHidden":false,"expression":"'0'\u0026\u0027Sr Market Directors\u0027[RFO]","columnType":"Calculated"},{"name":"Sierra Metric","dataType":"String","isHidden":false,"expression":"IF(AND(\u0027Sr Market Directors\u0027[Hires Count]\u003e=4,\u0027Sr Market Directors\u0027[Hires Count]\u003c6),1,-999999)+rankx(\u0027Sr Market Directors\u0027,\u0027Sr Market Directors\u0027[Zone_Leader_Name])","columnType":"Calculated"},{"name":"Sierra Rank","dataType":"String","isHidden":false,"expression":"if(\u0027Sr Market Directors\u0027[Sierra Metric]\u003e0,rankx(\u0027Sr Market Directors\u0027,\u0027Sr Market Directors\u0027[Sierra Metric]),-999999)","columnType":"Calculated"},{"name":"Summitt Metric","dataType":"String","isHidden":false,"expression":"IF(AND(\u0027Sr Market Directors\u0027[Hires Count]\u003e=6,\u0027Sr Market Directors\u0027[Hires Count]\u003c1000),1,-999999)+rankx(\u0027Sr Market Directors\u0027,\u0027Sr Market Directors\u0027[Zone_Leader_Name])","columnType":"Calculated"},{"name":"Summitt Rank","dataType":"String","isHidden":false,"expression":"if(\u0027Sr Market Directors\u0027[Summitt Metric]\u003e0,rankx(\u0027Sr Market Directors\u0027,\u0027Sr Market Directors\u0027[Summitt Metric]),-999999)","columnType":"Calculated"},{"name":"RR Hires.Term Count","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"HeadCount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TermCount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Retention Rate","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"2023_YE_RDL_DATA_w_Capacity_Info - Detail.Name(s)","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Term List.Name(s)","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Hires Rank","dataType":"String","isHidden":false,"expression":"Round(Rankx(\u0027Sr Market Directors\u0027,\u0027Sr Market Directors\u0027[Hires Count]),0)","columnType":"Calculated"},{"name":"Retention Rank","dataType":"String","isHidden":false,"expression":"Round(Rankx(\u0027Sr Market Directors\u0027,\u0027Sr Market Directors\u0027[Retention Rate]),0)","columnType":"Calculated"},{"name":"Advice Rank","dataType":"String","isHidden":false,"expression":"Round(Rankx(\u0027Sr Market Directors\u0027,\u0027Sr Market Directors\u0027[Advice Adoption.Adopting Advisors %]),0)","columnType":"Calculated"},{"name":"Pace Rank","dataType":"String","isHidden":false,"expression":" Var PRank = Round(Rankx(\u0027Sr Market Directors\u0027,\u0027Sr Market Directors\u0027[Above FA Count]),0) Return Blank()","columnType":"Calculated"},{"name":"Total Rank","dataType":"String","isHidden":false,"expression":"var TRank = ROUND(0.25 * \u0027Sr Market Directors\u0027[Hires Rank] + 0.25 * \u0027Sr Market Directors\u0027[Retention Rank]  + 0.4 * \u0027Sr Market Directors\u0027[Pace Rank] + 0.1 * \u0027Sr Market Directors\u0027[Advice Rank],1)ReturnBlank()","columnType":"Calculated"},{"name":"Rank Rank","dataType":"String","isHidden":false,"expression":"var RRank = Round(Rankx(\u0027Sr Market Directors\u0027,\u0027Sr Market Directors\u0027[Total Rank],,ASC),0)ReturnBlank()","columnType":"Calculated"},{"name":"Pace Avg","dataType":"String","isHidden":false,"expression":"var PRank = \u0027Sr Market Directors\u0027[Above FA Count]ReturnBlank()","columnType":"Calculated"},{"name":"RR Hires.Hire Dates","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Term List.Term Dates","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Picture Rank","dataType":"String","isHidden":false,"expression":"[Rank Rank]","columnType":"Calculated"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Leader Effectiveness Ranking Report//Market Mapping - SrMktDir.xlsx'), null, true),    SR_MKT_DIRS_Sheet = Source{[Item='SR_MKT_DIRS',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(SR_MKT_DIRS_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'HIER_ID', type text}, {'Zone_Leader_TSID', type text}, {'Zone_Leader_Name', type text}, {'Effective_Begin_Dt', type date}, {'Market Leader Job Code', Int64.Type}, {'Market Leader Title', type text}, {'RFO', Int64.Type}, {'MVP_ID', Int64.Type}, {'Zone_ID', Int64.Type}}),    #'Merged Queries1' = Table.NestedJoin(#'Changed Type', {'HIER_ID'}, #'Pace Dir', {'Market'}, 'Pace Dir', JoinKind.LeftOuter),    #'Expanded Pace Dir' = Table.ExpandTableColumn(#'Merged Queries1', 'Pace Dir', {'Number of Weeks', 'Above Total Count', 'Above Count'}, {'Pace Dir.Number of Weeks', 'Pace Dir.Above Total Count', 'Pace Dir.Above Count'}),    #'Replaced Value' = Table.ReplaceValue(#'Expanded Pace Dir',null,0,Replacer.ReplaceValue,{'Pace Dir.Above Count'}),    #'Renamed Columns1' = Table.RenameColumns(#'Replaced Value',{{'Pace Dir.Above Count', 'Above FA Count'}}),    #'Merged Queries' = Table.NestedJoin(#'Renamed Columns1', {'Zone_Leader_TSID'}, #'RR Hires - Sr Mkt Dir', {'CSL TSID'}, 'RR Hires', JoinKind.LeftOuter),    #'Expanded RR Hires' = Table.ExpandTableColumn(#'Merged Queries', 'RR Hires', {'Count', 'Name(s)', 'Hire Dates', 'Term Count'}, {'RR Hires.Count', 'RR Hires.Name(s)', 'RR Hires.Hire Dates', 'RR Hires.Term Count'}),    #'Renamed Columns3' = Table.RenameColumns(#'Expanded RR Hires',{{'RR Hires.Count', 'Hires Count'}, {'RR Hires.Name(s)', 'Hires'}}),    #'Replaced Value1' = Table.ReplaceValue(#'Renamed Columns3',null,0,Replacer.ReplaceValue,{'Hires Count'}),    Custom2 = Table.ReplaceValue(#'Renamed Columns3',null,0,Replacer.ReplaceValue,{'RR Hires.Term Count'}),    Custom1 = Table.AddColumn(Custom2, 'Picture', each 'https://myfield.thrivent.com/content/faimages/' \u0026 [Zone_Leader_TSID] \u0026 '.jpg'),    #'Merged Queries2' = Table.NestedJoin(Custom1, {'HIER_ID'}, #'Advice Adoption', {'Market'}, 'Advice Adoption', JoinKind.LeftOuter),    #'Expanded Advice Adoption' = Table.ExpandTableColumn(#'Merged Queries2', 'Advice Adoption', {'Adopting Advisors %', 'Rank (sorted by)'}, {'Advice Adoption.Adopting Advisors %', 'Advice Adoption.Rank (sorted by)'}),    #'Merged Queries3' = Table.NestedJoin(#'Expanded Advice Adoption', {'Zone_Leader_TSID'}, #'Workday Dir - Sr Mkt Dir - Eligible', {'Employee ID'}, 'Workday Dir - Sr Mkt Dir - Eligible', JoinKind.Inner),    #'Removed Columns' = Table.RemoveColumns(#'Merged Queries3',{'Workday Dir - Sr Mkt Dir - Eligible'}),    #'Renamed Columns2' = Table.RenameColumns(#'Removed Columns',{{'Zone_Leader_TSID', 'SRC_SYS_KEY_TXT'}}),    #'Merged Queries4' = Table.NestedJoin(#'Renamed Columns2', {'SRC_SYS_KEY_TXT'}, #'2023_YE_RDL_DATA_w_Capacity_Info', {'CORP_MGR_ID_CDE'}, '2023_YE_RDL_DATA_w_Capacity_Info', JoinKind.LeftOuter),    #'Expanded 2023_YE_RDL_DATA_w_Capacity_Info1' = Table.ExpandTableColumn(#'Merged Queries4', '2023_YE_RDL_DATA_w_Capacity_Info', {'HeadCount'}, {'2023_YE_RDL_DATA_w_Capacity_Info.HeadCount'}),    #'Merged Queries5' = Table.NestedJoin(#'Expanded 2023_YE_RDL_DATA_w_Capacity_Info1', {'SRC_SYS_KEY_TXT'}, #'2023_YE_RDL_DATA_w_Capacity_Info-Terms', {'CORP_MGR_ID_CDE'}, '2023_YE_RDL_DATA_w_Capacity_Info-Terms', JoinKind.LeftOuter),    #'Expanded 2023_YE_RDL_DATA_w_Capacity_Info-Terms1' = Table.ExpandTableColumn(#'Merged Queries5', '2023_YE_RDL_DATA_w_Capacity_Info-Terms', {'TermCount'}, {'2023_YE_RDL_DATA_w_Capacity_Info-Terms.TermCount'}),    #'Renamed Columns' = Table.RenameColumns(#'Expanded 2023_YE_RDL_DATA_w_Capacity_Info-Terms1',{{'2023_YE_RDL_DATA_w_Capacity_Info-Terms.TermCount', 'TermCount'}, {'2023_YE_RDL_DATA_w_Capacity_Info.HeadCount', 'HeadCount'}}),    #'Replaced Value2' = Table.ReplaceValue(#'Renamed Columns',null,0,Replacer.ReplaceValue,{'HeadCount'}),    #'Replaced Value3' = Table.ReplaceValue(#'Replaced Value2',null,0,Replacer.ReplaceValue,{'TermCount'}),    #'Replaced Value4' = Table.ReplaceValue(#'Replaced Value3',null,0,Replacer.ReplaceValue,{'Hires Count'}),    #'Added Custom' = Table.AddColumn(#'Replaced Value4', 'Retention Rate', each if [HeadCount]=0 then 0 else (([HeadCount]+[Hires Count]-[TermCount]-[RR Hires.Term Count])/([HeadCount]+[Hires Count]))),    #'Changed Type2' = Table.TransformColumnTypes(#'Added Custom',{{'Retention Rate', Percentage.Type}}),    #'Renamed Columns4' = Table.RenameColumns(#'Changed Type2',{{'SRC_SYS_KEY_TXT', 'Zone_Leader_TSID'}}),    #'Merged Queries6' = Table.NestedJoin(#'Renamed Columns4', {'Zone_Leader_TSID'}, #'2023_YE_RDL_DATA_w_Capacity_Info - Detail', {'CORP_MGR_ID_CDE'}, '2023_YE_RDL_DATA_w_Capacity_Info - Detail', JoinKind.LeftOuter),    #'Expanded 2023_YE_RDL_DATA_w_Capacity_Info - Detail1' = Table.ExpandTableColumn(#'Merged Queries6', '2023_YE_RDL_DATA_w_Capacity_Info - Detail', {'Name(s)'}, {'2023_YE_RDL_DATA_w_Capacity_Info - Detail.Name(s)'}),    #'Merged Queries7' = Table.NestedJoin(#'Expanded 2023_YE_RDL_DATA_w_Capacity_Info - Detail1', {'Zone_Leader_TSID'}, #'Term List', {'CSL TSID'}, 'Term List', JoinKind.LeftOuter),    #'Expanded Term List1' = Table.ExpandTableColumn(#'Merged Queries7', 'Term List', {'Name(s)', 'Term Dates'}, {'Term List.Name(s)', 'Term List.Term Dates'})in    #'Expanded Term List1'"}]},{"name":"SR_MKT_DIRS","isHidden":false,"storageMode":"Import","columns":[{"name":"HIER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Zone_Leader_TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Zone_Leader_Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Effective_Begin_Dt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Market Leader Job Code","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Market Leader Title","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"MVP_ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Zone_ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Workday Dir - Sr Mkt Dir - Eligible.Employee ID","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Leader Effectiveness Ranking Report//Market Mapping - SrMktDir.xlsx'), null, true),    SR_MKT_DIRS_Sheet = Source{[Item='SR_MKT_DIRS',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(SR_MKT_DIRS_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'HIER_ID', type text}, {'Zone_Leader_TSID', type text}, {'Zone_Leader_Name', type text}, {'Effective_Begin_Dt', type date}, {'Market Leader Job Code', Int64.Type}, {'Market Leader Title', type text}, {'RFO', Int64.Type}, {'MVP_ID', Int64.Type}, {'Zone_ID', Int64.Type}}),    #'Merged Queries' = Table.NestedJoin(#'Changed Type', {'Zone_Leader_TSID'}, #'Workday Dir - Sr Mkt Dir - Eligible', {'Employee ID'}, 'Workday Dir - Sr Mkt Dir - Eligible', JoinKind.LeftOuter),    #'Expanded Workday Dir - Sr Mkt Dir - Eligible' = Table.ExpandTableColumn(#'Merged Queries', 'Workday Dir - Sr Mkt Dir - Eligible', {'Employee ID'}, {'Workday Dir - Sr Mkt Dir - Eligible.Employee ID'}),    #'Filter Ineligible' = Table.SelectRows(#'Expanded Workday Dir - Sr Mkt Dir - Eligible', each ([#'Workday Dir - Sr Mkt Dir - Eligible.Employee ID'] \u003c\u003e null))in    #'Filter Ineligible'"}]},{"name":"RR Hires - Sr Mkt Dir","isHidden":false,"storageMode":"Import","columns":[{"name":"Count","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Name(s)","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CSL TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Hire Dates","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Term Count","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Capacity Dashboard//Detail Files.xlsx'), null, true),    #'RR Hires_Sheet' = Source{[Item='RR Hires',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'RR Hires_Sheet', [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'JOIN VALUE', type text}, {'Division', type text}, {'RFO', Int64.Type}, {'RFO Name', type text}, {'Market ID', type text}, {'Market Name', type text}, {'Market Leader Name', type text}, {'TSID', type text}, {'Employee Name', type text}, {'Begin Date', type date}, {'Job Code', Int64.Type}, {'Job Name', type text}, {'Hire Status', type text}, {'Previous Job Code', Int64.Type}, {'YTD CCs', Int64.Type}, {'YTD GDCs', Int64.Type}, {'S6 License', type text}, {'S7 License', type text}, {'S63 License', type text}, {'S65 License', type text}, {'S66 License', type text}, {'INVS_ADVR_REPR_IND', type text}}),    #'Renamed Columns' = Table.RenameColumns(#'Changed Type',{{'Begin Date', 'Hire Date'}}),    #'Removed Other Columns' = Table.SelectColumns(#'Renamed Columns',{'Division', 'Employee Name', 'TSID', 'Hire Date', 'Job Code', 'Job Name', 'Market ID', 'Market Leader Name', 'RFO', 'Market Name'}),    #'Merge for CSL' = Table.NestedJoin(#'Removed Other Columns', {'TSID'}, #'RAR Contracts', {'CORP_EMP_ID_CDE'}, 'RAR Contracts', JoinKind.LeftOuter),    #'Get CSL' = Table.ExpandTableColumn(#'Merge for CSL', 'RAR Contracts', {'Credited Source Leader'}, {'RAR Contracts.Credited Source Leader'}),    #'Merged Queries1' = Table.FuzzyNestedJoin(#'Get CSL', {'RAR Contracts.Credited Source Leader'}, #'SR_MKT_DIRS', {'Zone_Leader_Name'}, 'Workday Leader Directory', JoinKind.LeftOuter, [IgnoreCase=true, IgnoreSpace=true]),    #'Expanded Workday Leader Directory' = Table.ExpandTableColumn(#'Merged Queries1', 'Workday Leader Directory', {'Market Leader Job Code', 'Zone_Leader_TSID'}, {'Workday Leader Directory.Market Leader Job Code', 'Workday Leader Directory.Zone_Leader_TSID'}),    #'Merged Queries' = Table.NestedJoin(#'Expanded Workday Leader Directory', {'RAR Contracts.Credited Source Leader'}, #'Workday Leader Directory', {'Worker'}, 'Workday Leader Directory', JoinKind.LeftOuter),    #'Expanded Workday Leader Directory1' = Table.ExpandTableColumn(#'Merged Queries', 'Workday Leader Directory', {'Employee ID', 'Job Code'}, {'Workday Leader Directory.Employee ID', 'Workday Leader Directory.Job Code'}),    #'Join on Market w Worker_Status_Fact' = Table.NestedJoin(#'Expanded Workday Leader Directory1', {'Market Name'}, #'SR_MKT_DIRS', {'HIER_ID'}, 'WORKER_STATUS_FCT_DATES', JoinKind.LeftOuter),    #'Expanded WORKER_STATUS_FCT_DATES1' = Table.ExpandTableColumn(#'Join on Market w Worker_Status_Fact', 'WORKER_STATUS_FCT_DATES', {'Zone_Leader_TSID', 'Zone_Leader_Name'}, {'WORKER_STATUS_FCT_DATES.Zone_Leader_TSID', 'WORKER_STATUS_FCT_DATES.Zone_Leader_Name'}),    #'Renamed Columns2' = Table.RenameColumns(#'Expanded WORKER_STATUS_FCT_DATES1',{{'Workday Leader Directory.Zone_Leader_TSID', 'CSL Leader ID'}, {'WORKER_STATUS_FCT_DATES.Zone_Leader_TSID', 'Market Leader ID'}, {'WORKER_STATUS_FCT_DATES.Zone_Leader_Name', 'WORKER_STATUS_FCT_DATES.Market Leader Name'}, {'Workday Leader Directory.Market Leader Job Code', 'Workday Leader Directory.Job Code2'}}),    #'Added Key Leader ID Field' = Table.AddColumn(#'Renamed Columns2', 'CSL TSID', each if (([CSL Leader ID] = null and [Workday Leader Directory.Employee ID] = null) or (([Workday Leader Directory.Job Code] \u003c\u003e 1005 and [Workday Leader Directory.Job Code] \u003c\u003e 1007 and [Workday Leader Directory.Job Code] \u003c\u003e 1004 and [Workday Leader Directory.Job Code2] \u003c\u003e 1005 and [Workday Leader Directory.Job Code2] \u003c\u003e 1007 and [Workday Leader Directory.Job Code2] \u003c\u003e 1004))) then [Market Leader ID] elseif ([CSL Leader ID] \u003c\u003e [Market Leader ID] or [Workday Leader Directory.Employee ID] \u003c\u003e [Market Leader ID]) then [CSL Leader ID] else [Market Leader ID]),    #'Filtered Rows' = Table.SelectRows(#'Added Key Leader ID Field', each ([CSL TSID] \u003c\u003e null)),    #'Changed Type1' = Table.TransformColumnTypes(#'Filtered Rows',{{'Hire Date', type text}}),    #'Merged Queries2' = Table.NestedJoin(#'Changed Type1', {'TSID'}, #'TERMS_DETAIL_OR - Hires', {'TSID'}, 'TERMS_DETAIL_OR', JoinKind.LeftOuter),    #'Expanded TERMS_DETAIL_OR' = Table.ExpandTableColumn(#'Merged Queries2', 'TERMS_DETAIL_OR', {'MGT_RLTN_END_DATE'}, {'TERMS_DETAIL_OR.MGT_RLTN_END_DATE'}),    #'Renamed Columns1' = Table.RenameColumns(#'Expanded TERMS_DETAIL_OR',{{'TERMS_DETAIL_OR.MGT_RLTN_END_DATE', 'TERMS_DETAIL_OR - Hires.MGT_RLTN_END_DATE'}}),    #'Added Custom' = Table.AddColumn(#'Renamed Columns1', 'Term Ind', each if [#'TERMS_DETAIL_OR - Hires.MGT_RLTN_END_DATE']= null then 0 else (if [#'TERMS_DETAIL_OR - Hires.MGT_RLTN_END_DATE']\u003e[Hire Date] then 1 else 0)),    Custom1 = Table.Group(#'Added Custom', {'CSL TSID'}, {{'Count', each Table.RowCount(_), Int64.Type}, {'Name(s)', each Text.Combine([Employee Name], '#(lf)'), type text},{'Hire Dates', each Text.Combine([Hire Date], '#(lf)'), type text}, {'Hire Terms', each List.Sum([Term Ind]), type number}}),    #'Capitalized Each Word' = Table.TransformColumns(Custom1,{{'Name(s)', Text.Proper, type text}}),    #'Renamed Columns3' = Table.RenameColumns(#'Capitalized Each Word',{{'Hire Terms', 'Term Count'}})in    #'Renamed Columns3'"}]},{"name":"New Hires - Dups","isHidden":false,"storageMode":"Import","columns":[{"name":"Hire Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Worker","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Profile","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Supervisory Organization","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Manager","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Rehired Employee","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Capacity Value","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Leader Effectiveness Ranking Report//Workday - New Hires.xlsx'), null, true),    #'New Hires - Thrivent_Sheet' = Source{[Item='QUERY_FOR_WORKDAY _ NEW HIR_000',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'New Hires - Thrivent_Sheet', [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Hire Date', type date}, {'Worker', type text}, {'Employee ID', type text}, {'Preferred Name - First Name', type text}, {'Preferred Name - Last Name', type text}, {'Employee Type', type text}, {'Job Code', type text}, {'Job Profile', type text}, {'Business Title', type text}, {'Scheduled Weekly Hours', Int64.Type}, {'Job Family (''Field-Field'' \u0026 ''Fie', type text}, {'Management Level', type text}, {'Number of Direct Reports', Int64.Type}, {'Supervisory Organization', type text}, {'Manager', type text}, {'Manager ID', type text}, {'MVP (Field)', type text}, {'Division', type text}, {'ZCF ESI Worker Business Process', type text}, {'Cost Center ID', Int64.Type}, {'Cost Center', type text}, {'Location', type text}, {'Location Address - State', type text}, {'Mail Stop', type any}, {'Rehired Employee', type text}, {'Continuous Service Date (Takes I', type date}, {'Email - Primary Work', type text}, {'Primary Home Address - State', type any}, {'Date Transaction Was Completed', type datetime}, {'Date transaction was initiated', type date}, {'Proposed Position Certifications', type any}, {'Field-Corp Job Classification', type text}}),    #'Removed Other Columns' = Table.SelectColumns(#'Changed Type',{'Hire Date', 'Worker', 'Employee ID', 'Job Code', 'Job Profile', 'Supervisory Organization', 'Manager', 'Rehired Employee'}),    #'Format: Superior TAG' = Table.ReplaceValue(#'Removed Other Columns','Superior TAG ','',Replacer.ReplaceText,{'Supervisory Organization'}),    #'Format: TAG #' = Table.ReplaceValue(#'Format: Superior TAG','TAG ','',Replacer.ReplaceText,{'Supervisory Organization'}),    #'Format: MVP #' = Table.ReplaceValue(#'Format: TAG #',' MVP ','-',Replacer.ReplaceText,{'Supervisory Organization'}),    #'Format: Market #' = Table.ReplaceValue(#'Format: MVP #',' Market ','-',Replacer.ReplaceText,{'Supervisory Organization'}),    #'Extract: Remove Supervisor' = Table.TransformColumns(#'Format: Market #', {{'Supervisory Organization', each Text.BeforeDelimiter(_, ' ('), type text}}),    #'Filter: GPA / GPD / NPD Markets' = Table.SelectRows(#'Extract: Remove Supervisor', each Text.EndsWith([Supervisory Organization], '69') or Text.EndsWith([Supervisory Organization], '79') or Text.EndsWith([Supervisory Organization], '98') or Text.EndsWith([Supervisory Organization], '99')),    #'Merge: Weights' = Table.NestedJoin(#'Filter: GPA / GPD / NPD Markets', {'Job Code'}, Weights, {'Job Code'}, 'Weights', JoinKind.LeftOuter),    #'Expand: Weights' = Table.ExpandTableColumn(#'Merge: Weights', 'Weights', {'Capacity Value'}, {'Capacity Value'})in    #'Expand: Weights'"}]},{"name":"Terminations - Dups","isHidden":false,"storageMode":"Import","columns":[{"name":"Termination Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Worker","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Hire Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Job Profile","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Supervisory Organization","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Manager","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Capacity Value","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Leader Effectiveness Ranking Report//Workday - Terminations.xlsx'), null, true),    #'Terminations - Thrivent_Sheet' = Source{[Item='Terminations - Thrivent',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'Terminations - Thrivent_Sheet', [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Termination Date', type date}, {'Worker', type text}, {'Preferred Name - First Name', type text}, {'Preferred Name - Last Name', type text}, {'Employee ID', type text}, {'Employee/Contingent Worker Type', type text}, {'Hire Date', type date}, {'Job Profile', type text}, {'Job Code', type text}, {'Job Family (''Field-Field'' \u0026 ''Field-AOS'' are for the Field)', type text}, {'Management Level - Proposed', type text}, {'Length of Service - Worker', type text}, {'Supervisory Organization', type text}, {'Manager', type text}, {'Manager ID', type text}, {'Cost Center', type text}, {'Cost Center ID', Int64.Type}, {'Division', type text}, {'ZCF ESI Worker Business Process - Proposed Strategic Category', type text}, {'Company', type text}, {'Location', type text}, {'Work State', type text}, {'Mail Stop', type any}, {'Date Transaction Was Entered Into System', type datetime}, {'Field-Corp Job Classification', type text}}),   #'Removed Other Columns' = Table.SelectColumns(#'Changed Type',{'Termination Date','Worker', 'Employee ID', 'Hire Date', 'Job Profile', 'Job Code', 'Supervisory Organization', 'Manager'}),    #'Format: Superior TAG' = Table.ReplaceValue(#'Removed Other Columns','Superior TAG ','',Replacer.ReplaceText,{'Supervisory Organization'}),    #'Format: TAG #' = Table.ReplaceValue(#'Format: Superior TAG','TAG ','',Replacer.ReplaceText,{'Supervisory Organization'}),    #'Format: MVP #' = Table.ReplaceValue(#'Format: TAG #',' MVP ','-',Replacer.ReplaceText,{'Supervisory Organization'}),    #'Format: Market #' = Table.ReplaceValue(#'Format: MVP #',' Market ','-',Replacer.ReplaceText,{'Supervisory Organization'}),    #'Extract: Remove Supervisor' = Table.TransformColumns(#'Format: Market #', {{'Supervisory Organization', each Text.BeforeDelimiter(_, ' ('), type text}}),    #'Filter: GPA / GPD / NPD Markets' = Table.SelectRows(#'Extract: Remove Supervisor', each Text.EndsWith([Supervisory Organization], '69') or Text.EndsWith([Supervisory Organization], '79') or Text.EndsWith([Supervisory Organization], '98') or Text.EndsWith([Supervisory Organization], '99')),    #'Merge: Weights' = Table.NestedJoin(#'Filter: GPA / GPD / NPD Markets', {'Job Code'}, Weights, {'Job Code'}, 'Weights', JoinKind.LeftOuter),    #'Expand: Weights' = Table.ExpandTableColumn(#'Merge: Weights', 'Weights', {'Capacity Value'}, {'Capacity Value'})in    #'Expand: Weights'"}]},{"name":"Terminations - Hire Date Check","isHidden":false,"storageMode":"Import","columns":[{"name":"Termination Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Worker","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Hire Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Job Profile","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Supervisory Organization","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Manager","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Capacity Value","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TSID_Term","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Leader Effectiveness Ranking Report//Workday - Terminations.xlsx'), null, true),    #'Terminations - Thrivent_Sheet' = Source{[Item='Terminations - Thrivent',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'Terminations - Thrivent_Sheet', [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Termination Date', type date}, {'Worker', type text}, {'Preferred Name - First Name', type text}, {'Preferred Name - Last Name', type text}, {'Employee ID', type text}, {'Employee/Contingent Worker Type', type text}, {'Hire Date', type date}, {'Job Profile', type text}, {'Job Code', type text}, {'Job Family (''Field-Field'' \u0026 ''Field-AOS'' are for the Field)', type text}, {'Management Level - Proposed', type text}, {'Length of Service - Worker', type text}, {'Supervisory Organization', type text}, {'Manager', type text}, {'Manager ID', type text}, {'Cost Center', type text}, {'Cost Center ID', Int64.Type}, {'Division', type text}, {'ZCF ESI Worker Business Process - Proposed Strategic Category', type text}, {'Company', type text}, {'Location', type text}, {'Work State', type text}, {'Mail Stop', type any}, {'Date Transaction Was Entered Into System', type datetime}, {'Field-Corp Job Classification', type text}}),   #'Removed Other Columns' = Table.SelectColumns(#'Changed Type',{'Termination Date','Worker', 'Employee ID', 'Hire Date', 'Job Profile', 'Job Code', 'Supervisory Organization', 'Manager'}),    #'Format: Superior TAG' = Table.ReplaceValue(#'Removed Other Columns','Superior TAG ','',Replacer.ReplaceText,{'Supervisory Organization'}),    #'Format: TAG #' = Table.ReplaceValue(#'Format: Superior TAG','TAG ','',Replacer.ReplaceText,{'Supervisory Organization'}),    #'Format: MVP #' = Table.ReplaceValue(#'Format: TAG #',' MVP ','-',Replacer.ReplaceText,{'Supervisory Organization'}),    #'Format: Market #' = Table.ReplaceValue(#'Format: MVP #',' Market ','-',Replacer.ReplaceText,{'Supervisory Organization'}),    #'Extract: Remove Supervisor' = Table.TransformColumns(#'Format: Market #', {{'Supervisory Organization', each Text.BeforeDelimiter(_, ' ('), type text}}),    #'Filter: GPA / GPD / NPD Markets' = Table.SelectRows(#'Extract: Remove Supervisor', each Text.EndsWith([Supervisory Organization], '69') or Text.EndsWith([Supervisory Organization], '79') or Text.EndsWith([Supervisory Organization], '98') or Text.EndsWith([Supervisory Organization], '99')),    #'Merge: Weights' = Table.NestedJoin(#'Filter: GPA / GPD / NPD Markets', {'Job Code'}, Weights, {'Job Code'}, 'Weights', JoinKind.LeftOuter),    #'Expand: Weights' = Table.ExpandTableColumn(#'Merge: Weights', 'Weights', {'Capacity Value'}, {'Capacity Value'}),    #'Added Custom2' = Table.AddColumn(#'Expand: Weights', 'TSID_Term', each [Employee ID] \u0026 '-' \u0026 Date.ToText([Termination Date]))in    #'Added Custom2'"}]},{"name":"New Hires and Terms Check","isHidden":false,"storageMode":"Import","columns":[{"name":"Termination Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Worker","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Profile","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Supervisory Organization","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Manager","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Capacity Value","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"New Hires - Dups.Hire Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"New Hires - Dups.Employee ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"New Hires - Dups.Job Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"New Hires - Dups.Job Profile","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"New Hires - Dups.Supervisory Organization","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"New Hires - Dups.Manager","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"New Hires - Dups.Rehired Employee","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"New Hires - Dups.Capacity Value","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Date Difference","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Capacity Difference","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TSID_Hire","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TSID_Term","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Terminations - Hire Date Check.TSID_Term","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.NestedJoin(#'Terminations - Dups', {'Employee ID'}, #'New Hires - Dups', {'Employee ID'}, 'New Hires - Dups', JoinKind.LeftOuter),    #'Expanded New Hires - Dups' = Table.ExpandTableColumn(Source, 'New Hires - Dups', {'Hire Date', 'Employee ID', 'Job Code', 'Job Profile', 'Supervisory Organization', 'Manager', 'Rehired Employee', 'Capacity Value'}, {'New Hires - Dups.Hire Date', 'New Hires - Dups.Employee ID', 'New Hires - Dups.Job Code', 'New Hires - Dups.Job Profile', 'New Hires - Dups.Supervisory Organization', 'New Hires - Dups.Manager', 'New Hires - Dups.Rehired Employee', 'New Hires - Dups.Capacity Value'}),    #'Removed Columns' = Table.RemoveColumns(#'Expanded New Hires - Dups',{'Hire Date'}),    #'Filtered Rows1' = Table.SelectRows(#'Removed Columns', each ([#'New Hires - Dups.Employee ID'] \u003c\u003e null)),    #'Replaced Value' = Table.ReplaceValue(#'Filtered Rows1',null,0,Replacer.ReplaceValue,{'New Hires - Dups.Capacity Value'}),    #'Added Custom' = Table.AddColumn(#'Replaced Value', 'Date Difference', each Duration.Days([Termination Date]-[#'New Hires - Dups.Hire Date'])),    #'Filtered Rows' = Table.SelectRows(#'Added Custom', each [Date Difference] \u003c= 7 and [Date Difference] \u003e= -7),    #'Added Custom1' = Table.AddColumn(#'Filtered Rows', 'Capacity Difference', each [#'New Hires - Dups.Capacity Value']-[Capacity Value]),    #'Added Custom2' = Table.AddColumn(#'Added Custom1', 'TSID_Hire', each [Employee ID] \u0026 '-' \u0026 Date.ToText([#'New Hires - Dups.Hire Date'])),    #'Added Custom3' = Table.AddColumn(#'Added Custom2', 'TSID_Term', each [Employee ID] \u0026 '-' \u0026 Date.ToText([Termination Date])),    #'Sorted Rows' = Table.Sort(#'Added Custom3',{{'TSID_Term', Order.Ascending}}),    #'Merged Queries' = Table.NestedJoin(#'Sorted Rows', {'TSID_Term'}, #'Terminations - Hire Date Check', {'TSID_Term'}, 'Terminations - Hire Date Check', JoinKind.LeftOuter),    #'Expanded Terminations - Hire Date Check' = Table.ExpandTableColumn(#'Merged Queries', 'Terminations - Hire Date Check', {'TSID_Term'}, {'Terminations - Hire Date Check.TSID_Term'})in    #'Expanded Terminations - Hire Date Check'"}]},{"name":"Additional Role Changes - Detail","isHidden":false,"storageMode":"Import","columns":[{"name":"To Capacity Value","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"From Capacity Value","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"To Supervisory Organization","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"From Supervisory Organization","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"To Job Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"From Job Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"To Job Profile","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"From Job Profile","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Worker","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Effective Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Movement Filter","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market Filter","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.NestedJoin(#'Terminations - Dups', {'Employee ID'}, #'New Hires - Dups', {'Employee ID'}, 'New Hires - Dups', JoinKind.LeftOuter),    #'Expanded New Hires - Dups' = Table.ExpandTableColumn(Source, 'New Hires - Dups', {'Hire Date', 'Employee ID', 'Job Code', 'Job Profile', 'Supervisory Organization', 'Manager', 'Rehired Employee', 'Capacity Value'}, {'New Hires - Dups.Hire Date', 'New Hires - Dups.Employee ID', 'New Hires - Dups.Job Code', 'New Hires - Dups.Job Profile', 'New Hires - Dups.Supervisory Organization', 'New Hires - Dups.Manager', 'New Hires - Dups.Rehired Employee', 'New Hires - Dups.Capacity Value'}),    #'Removed Columns' = Table.RemoveColumns(#'Expanded New Hires - Dups',{'Hire Date'}),    #'Filtered Rows1' = Table.SelectRows(#'Removed Columns', each ([#'New Hires - Dups.Employee ID'] \u003c\u003e null)),    #'Replaced Value' = Table.ReplaceValue(#'Filtered Rows1',null,0,Replacer.ReplaceValue,{'New Hires - Dups.Capacity Value'}),    #'Added Custom' = Table.AddColumn(#'Replaced Value', 'Date Difference', each Duration.Days([Termination Date]-[#'New Hires - Dups.Hire Date'])),    #'Filtered Rows' = Table.SelectRows(#'Added Custom', each [Date Difference] \u003c= 7 and [Date Difference] \u003e= -7),    #'Added Custom1' = Table.AddColumn(#'Filtered Rows', 'Capacity Difference', each letTo_TAG=Text.Start([#'New Hires - Dups.Supervisory Organization'],4),Fr_TAG=Text.Start([Supervisory Organization],4),To_Mkt=Text.End([#'New Hires - Dups.Supervisory Organization'],2),Fr_Mkt=Text.End([Supervisory Organization],2)inif [#'New Hires - Dups.Supervisory Organization'] = [Supervisory Organization] then [#'New Hires - Dups.Capacity Value']-[Capacity Value] else if (Fr_Mkt='99' and To_Mkt='99') then [#'New Hires - Dups.Capacity Value']-[Capacity Value] else if (Fr_Mkt='98' and To_Mkt='98') then [#'New Hires - Dups.Capacity Value']-[Capacity Value] else if (Fr_Mkt='79' and To_Mkt='79' and To_TAG=Fr_TAG) then [#'New Hires - Dups.Capacity Value']-[Capacity Value] else if (Fr_Mkt='69' and To_Mkt='69' and To_TAG=Fr_TAG) then [#'New Hires - Dups.Capacity Value']-[Capacity Value] else 0),    #'Filtered Rows2' = Table.SelectRows(#'Added Custom1', each ([Capacity Difference] \u003c\u003e 0)),    #'Reordered Columns' = Table.ReorderColumns(#'Filtered Rows2',{'New Hires - Dups.Hire Date', 'Termination Date', 'Worker', 'Employee ID', 'Job Profile', 'Job Code', 'Supervisory Organization', 'Manager', 'Capacity Value', 'New Hires - Dups.Employee ID', 'New Hires - Dups.Job Code', 'New Hires - Dups.Job Profile', 'New Hires - Dups.Supervisory Organization', 'New Hires - Dups.Manager', 'New Hires - Dups.Rehired Employee', 'New Hires - Dups.Capacity Value', 'Date Difference', 'Capacity Difference'}),    #'Renamed Columns' = Table.RenameColumns(#'Reordered Columns',{{'New Hires - Dups.Hire Date', 'Effective Date'}}),    #'Removed Columns1' = Table.RemoveColumns(#'Renamed Columns',{'Termination Date'}),    #'Renamed Columns1' = Table.RenameColumns(#'Removed Columns1',{{'Job Profile', 'From Job Profile'}}),    #'Reordered Columns1' = Table.ReorderColumns(#'Renamed Columns1',{'Effective Date', 'Worker', 'Employee ID', 'From Job Profile', 'New Hires - Dups.Job Profile', 'Job Code', 'Supervisory Organization', 'Manager', 'Capacity Value', 'New Hires - Dups.Employee ID', 'New Hires - Dups.Job Code', 'New Hires - Dups.Supervisory Organization', 'New Hires - Dups.Manager', 'New Hires - Dups.Rehired Employee', 'New Hires - Dups.Capacity Value', 'Date Difference', 'Capacity Difference'}),    #'Renamed Columns2' = Table.RenameColumns(#'Reordered Columns1',{{'New Hires - Dups.Job Profile', 'To Job Profile'}, {'Job Code', 'From Job Code'}}),    #'Reordered Columns2' = Table.ReorderColumns(#'Renamed Columns2',{'Effective Date', 'Worker', 'Employee ID', 'From Job Profile', 'To Job Profile', 'From Job Code', 'New Hires - Dups.Job Code', 'Supervisory Organization', 'Manager', 'Capacity Value', 'New Hires - Dups.Employee ID', 'New Hires - Dups.Supervisory Organization', 'New Hires - Dups.Manager', 'New Hires - Dups.Rehired Employee', 'New Hires - Dups.Capacity Value', 'Date Difference', 'Capacity Difference'}),    #'Renamed Columns3' = Table.RenameColumns(#'Reordered Columns2',{{'New Hires - Dups.Job Code', 'To Job Code'}, {'Supervisory Organization', 'From Supervisory Organization'}, {'Capacity Value', 'From Capacity Value'}}),    #'Reordered Columns3' = Table.ReorderColumns(#'Renamed Columns3',{'Effective Date', 'Worker', 'Employee ID', 'From Job Profile', 'To Job Profile', 'From Job Code', 'To Job Code', 'From Supervisory Organization', 'From Capacity Value', 'New Hires - Dups.Capacity Value', 'Manager', 'New Hires - Dups.Employee ID', 'New Hires - Dups.Supervisory Organization', 'New Hires - Dups.Manager', 'New Hires - Dups.Rehired Employee', 'Date Difference', 'Capacity Difference'}),    #'Renamed Columns4' = Table.RenameColumns(#'Reordered Columns3',{{'New Hires - Dups.Capacity Value', 'To Capacity Value'}}),    #'Reordered Columns4' = Table.ReorderColumns(#'Renamed Columns4',{'Effective Date', 'Worker', 'Employee ID', 'From Job Profile', 'To Job Profile', 'From Job Code', 'To Job Code', 'From Supervisory Organization', 'New Hires - Dups.Supervisory Organization', 'From Capacity Value', 'To Capacity Value', 'Manager', 'New Hires - Dups.Employee ID', 'New Hires - Dups.Manager', 'New Hires - Dups.Rehired Employee', 'Date Difference', 'Capacity Difference'}),    #'Renamed Columns5' = Table.RenameColumns(#'Reordered Columns4',{{'New Hires - Dups.Supervisory Organization', 'To Supervisory Organization'}}),    #'Removed Other Columns' = Table.SelectColumns(#'Renamed Columns5',{'To Capacity Value', 'From Capacity Value', 'To Supervisory Organization', 'From Supervisory Organization', 'To Job Code', 'From Job Code', 'To Job Profile', 'From Job Profile', 'Employee ID', 'Worker', 'Effective Date'}),    #'Added Custom2' = Table.AddColumn(#'Removed Other Columns', 'Movement Filter', each 'INCLUDE'),    #'Added Custom3' = Table.AddColumn(#'Added Custom2', 'Market Filter', each 'SAME MARKET'),    #'Sorted Rows' = Table.Sort(#'Added Custom3',{{'Employee ID', Order.Ascending}})in    #'Sorted Rows'"}]},{"name":"0630 Leader Backup","isHidden":false,"storageMode":"Import","columns":[{"name":"Employee ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Worker","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Preferred Name - First Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Last Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Profile","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Code","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Job Family","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Business Title","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Worker Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Time Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Management Level","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Number of Direct Reports","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Phone","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Email","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Location","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Work Space from Worker Primary Job","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Total Base Pay - Amount","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Division","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Cost Center","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Cost Center - ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Supervisory Organization","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Manager","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Manager Job Profile","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Manager ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Manager\u0027s Email","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Continuous Service Date/Service Anniversary","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Start Date in Current Job OR Hire Date","dataType":"DateTime","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Leader Effectiveness Ranking Report//Workday Leader Directory - 070323 backup.xlsx'), null, true),    #'Directory by Job Profile - Thri_Sheet' = Source{[Item='Directory by Job Profile - Thri',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'Directory by Job Profile - Thri_Sheet', [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Employee ID', type text}, {'Worker', type text}, {'Preferred Name - First Name', type text}, {'Last Name', type text}, {'Job Profile', type text}, {'Job Code', Int64.Type}, {'Job Family', type text}, {'Business Title', type text}, {'Worker Type', type text}, {'Time Type', type text}, {'Management Level', type text}, {'Number of Direct Reports', Int64.Type}, {'Phone', type text}, {'Email', type text}, {'Location', type text}, {'Work Space from Worker Primary Job', type any}, {'Total Base Pay - Amount', Int64.Type}, {'Division', type text}, {'Cost Center', type text}, {'Cost Center - ID', Int64.Type}, {'Supervisory Organization', type text}, {'Manager', type text}, {'Manager Job Profile', type text}, {'Manager ID', type text}, {'Manager\u0027s Email', type text}, {'Continuous Service Date/Service Anniversary', type date}, {'Start Date in Current Job OR Hire Date', type date}}),    #'Filtered Rows' = Table.SelectRows(#'Changed Type', each ([Job Code] \u003c\u003e 1011)),    #'Filtered Rows1' = Table.SelectRows(#'Filtered Rows', each [Start Date in Current Job OR Hire Date] \u003c #date(2024, 7, 1))in    #'Filtered Rows1'"}]},{"name":"Not Yet Eligible (2)","isHidden":false,"storageMode":"Import","columns":[{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Preferred Name - First Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Last Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Profile","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Workday Job Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Family","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Business Title","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Worker Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Time Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Management Level","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Number of Direct Reports","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Phone","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Email","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Location","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Work Space from Worker Primary Job","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Total Base Pay - Amount","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Division","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Cost Center","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Cost Center - ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Supervisory Organization","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Manager","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Manager Job Profile","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Manager ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Manager\u0027s Email","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Continuous Service Date/Service Anniversary","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Start Date in Current Role","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Job Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"WORKER_STATUS_FCT_DATES.ORZN_ZONE_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"WORKER_STATUS_FCT_DATES.EFF_BEG_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = #'Workday Leader Directory',    #'Filtered Rows' = Table.SelectRows(Source, each ([Job Code] = 1011)),    #'Renamed Columns' = Table.RenameColumns(#'Filtered Rows',{{'Employee ID', 'TSID'}, {'Worker', 'Name'}, {'Job Code', 'Workday Job Code'}, {'Start Date in Current Job OR Hire Date', 'Start Date in Current Role'}}),    #'Lowercased Text' = Table.TransformColumns(Table.TransformColumnTypes(#'Renamed Columns', {{'Workday Job Code', type text}}, 'en-US'),{{'Workday Job Code', Text.Lower, type text}}),    #'Added Custom' = Table.AddColumn(#'Lowercased Text', 'Job Code', each Text.Combine({'00',[Workday Job Code]})),    #'Merged Queries' = Table.NestedJoin(#'Added Custom', {'TSID'}, WORKER_STATUS_FCT_DATES, {'SRC_SYS_KEY_TXT'}, 'WORKER_STATUS_FCT_DATES', JoinKind.LeftOuter),    #'Expanded WORKER_STATUS_FCT_DATES' = Table.ExpandTableColumn(#'Merged Queries', 'WORKER_STATUS_FCT_DATES', {'ORZN_ZONE_CDE', 'EFF_BEG_DT'}, {'WORKER_STATUS_FCT_DATES.ORZN_ZONE_CDE', 'WORKER_STATUS_FCT_DATES.EFF_BEG_DT'})in    #'Expanded WORKER_STATUS_FCT_DATES'"}]},{"name":"WORKER_STATUS_FCT_DATES - Not Eligible","isHidden":false,"storageMode":"Import","columns":[{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Preferred Name - First Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Last Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Profile","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Workday Job Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Family","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Business Title","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Worker Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Time Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Management Level","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Number of Direct Reports","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Phone","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Email","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Location","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Work Space from Worker Primary Job","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Total Base Pay - Amount","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Division","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Cost Center","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Cost Center - ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Supervisory Organization","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Manager","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Manager Job Profile","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Manager ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Manager\u0027s Email","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Continuous Service Date/Service Anniversary","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Start Date in Current Role","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Job Code","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Sql.Database('dbedwdwprd', 'enterprisedatamart', [Query='SELECT#(lf)b.SRC_SYS_KEY_TXT,#(lf)b.FRST_NM+\u0027 \u0027+b.LST_NM AS EMP_NM,#(lf)c.ORZN_ZONE_CDE,#(lf)c.ORZN_DEPT_CDE,#(lf)a.JOB_TYP_CDE,#(lf)CAST(a.EFF_BEG_DT AS date) AS EFF_BEG_DT,#(lf)ADJ_SVC_DT#(lf)FROM#(lf)[DM_01].[WORKER_STATUS_FCT] a#(lf)LEFT JOIN#(lf)[DM_01].[ORGANIZATION_DIM] b#(lf)ON a.ORZN_DIM_SK=b.ORZN_DIM_SK#(lf)LEFT JOIN#(lf)[DM_01].[SALE_HIER_DIM] c#(lf)ON (b.SRC_SYS_KEY_TXT=c.SALE_HIER_ID AND c.EFF_END_DT=\u00279999-12-31 00:00:00\u0027 AND c.CURR_ROW_IND=\u0027Y\u0027)#(lf)WHERE#(lf)(#(lf)--a.JOB_TYP_CDE=\u0027001004\u0027 OR#(lf)a.JOB_TYP_CDE=\u0027001005\u0027 OR#(lf)a.JOB_TYP_CDE=\u0027001011\u0027 OR#(lf)a.JOB_TYP_CDE=\u0027001007\u0027#(lf)) AND #(lf)b.CURR_ROW_IND=\u0027Y\u0027 AND a.EFF_END_DT=\u00279999-12-31 00:00:00\u0027 AND EMP_STS_TYP_CDE=\u0027A\u0027']),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'EFF_BEG_DT', type date}, {'ADJ_SVC_DT', type date}}),    #'Filtered Rows' = Table.SelectRows(#'Changed Type', each [JOB_TYP_CDE] \u003c\u003e '001004'),    #'Removed Columns' = Table.RemoveColumns(#'Filtered Rows',{'ADJ_SVC_DT'}),    #'Merged Queries' = Table.NestedJoin(#'Removed Columns', {'SRC_SYS_KEY_TXT'}, #'Workday Leader Directory', {'Employee ID'}, 'Workday Leader Directory', JoinKind.LeftOuter),    #'Expanded Workday Leader Directory' = Table.ExpandTableColumn(#'Merged Queries', 'Workday Leader Directory', {'Cost Center', 'Start Date in Current Job OR Hire Date'}, {'Workday Leader Directory.Cost Center', 'Workday Leader Directory.Start Date in Current Job OR Hire Date'}),    #'Merged Queries1' = Table.NestedJoin(#'Expanded Workday Leader Directory', {'SRC_SYS_KEY_TXT'}, #'Market Mapping', {'Zone_Leader_TSID'}, 'Market Mapping', JoinKind.LeftOuter),    #'Expanded Market Mapping' = Table.ExpandTableColumn(#'Merged Queries1', 'Market Mapping', {'HIER_ID'}, {'Market Mapping.HIER_ID'}),    #'Renamed Columns' = Table.RenameColumns(#'Expanded Market Mapping',{{'ORZN_ZONE_CDE', 'WORKER_STS_FCT_MKT'}, {'Market Mapping.HIER_ID', 'ORZN_ZONE_CDE'}, {'EFF_BEG_DT', 'WORKER_STS_FCT_DT'}, {'Workday Leader Directory.Start Date in Current Job OR Hire Date', 'EFF_BEG_DT'}}),    #'Merged Queries2' = Table.NestedJoin(#'Renamed Columns', {'SRC_SYS_KEY_TXT'}, #'0630 Leader Backup', {'Employee ID'}, '0630 Leader Backup', JoinKind.LeftOuter),    #'Expanded 0630 Leader Backup' = Table.ExpandTableColumn(#'Merged Queries2', '0630 Leader Backup', {'Employee ID'}, {'0630 Leader Backup.Employee ID'}),    #'Filtered Rows1' = Table.SelectRows(#'Expanded 0630 Leader Backup', each [0630 Leader Backup.Employee ID] = null),    #'Merged Queries3' = Table.NestedJoin(#'Filtered Rows1', {'SRC_SYS_KEY_TXT'}, #'Not Yet Eligible (2)', {'TSID'}, 'Not Yet Eligible', JoinKind.LeftOuter),    #'Expanded Not Yet Eligible' = Table.ExpandTableColumn(#'Merged Queries3', 'Not Yet Eligible', {'TSID'}, {'Not Yet Eligible.TSID'}),    #'Filtered Rows2' = Table.SelectRows(#'Expanded Not Yet Eligible', each ([Not Yet Eligible.TSID] = null)),    #'Merged Queries4' = Table.NestedJoin(#'Filtered Rows2', {'SRC_SYS_KEY_TXT'}, #'Workday Leader Directory', {'Employee ID'}, 'Workday Leader Directory', JoinKind.LeftOuter),    #'Expanded Workday Leader Directory1' = Table.ExpandTableColumn(#'Merged Queries4', 'Workday Leader Directory', {'Employee ID', 'Worker', 'Preferred Name - First Name', 'Last Name', 'Job Profile', 'Job Code', 'Job Family', 'Business Title', 'Worker Type', 'Time Type', 'Management Level', 'Number of Direct Reports', 'Phone', 'Email', 'Location', 'Work Space from Worker Primary Job', 'Total Base Pay - Amount', 'Division', 'Cost Center', 'Cost Center - ID', 'Supervisory Organization', 'Manager', 'Manager Job Profile', 'Manager ID', 'Manager\u0027s Email', 'Continuous Service Date/Service Anniversary', 'Start Date in Current Job OR Hire Date'}, {'Workday Leader Directory.Employee ID', 'Workday Leader Directory.Worker', 'Workday Leader Directory.Preferred Name - First Name', 'Workday Leader Directory.Last Name', 'Workday Leader Directory.Job Profile', 'Workday Leader Directory.Job Code', 'Workday Leader Directory.Job Family', 'Workday Leader Directory.Business Title', 'Workday Leader Directory.Worker Type', 'Workday Leader Directory.Time Type', 'Workday Leader Directory.Management Level', 'Workday Leader Directory.Number of Direct Reports', 'Workday Leader Directory.Phone', 'Workday Leader Directory.Email', 'Workday Leader Directory.Location', 'Workday Leader Directory.Work Space from Worker Primary Job', 'Workday Leader Directory.Total Base Pay - Amount', 'Workday Leader Directory.Division', 'Workday Leader Directory.Cost Center.1', 'Workday Leader Directory.Cost Center - ID', 'Workday Leader Directory.Supervisory Organization', 'Workday Leader Directory.Manager', 'Workday Leader Directory.Manager Job Profile', 'Workday Leader Directory.Manager ID', 'Workday Leader Directory.Manager\u0027s Email', 'Workday Leader Directory.Continuous Service Date/Service Anniversary', 'Workday Leader Directory.Start Date in Current Job OR Hire Date'}),    #'Removed Other Columns' = Table.SelectColumns(#'Expanded Workday Leader Directory1',{'Workday Leader Directory.Employee ID', 'Workday Leader Directory.Worker', 'Workday Leader Directory.Preferred Name - First Name', 'Workday Leader Directory.Last Name', 'Workday Leader Directory.Job Profile', 'Workday Leader Directory.Job Code', 'Workday Leader Directory.Job Family', 'Workday Leader Directory.Business Title', 'Workday Leader Directory.Worker Type', 'Workday Leader Directory.Time Type', 'Workday Leader Directory.Management Level', 'Workday Leader Directory.Number of Direct Reports', 'Workday Leader Directory.Phone', 'Workday Leader Directory.Email', 'Workday Leader Directory.Location', 'Workday Leader Directory.Work Space from Worker Primary Job', 'Workday Leader Directory.Total Base Pay - Amount', 'Workday Leader Directory.Division', 'Workday Leader Directory.Cost Center.1', 'Workday Leader Directory.Cost Center - ID', 'Workday Leader Directory.Supervisory Organization', 'Workday Leader Directory.Manager', 'Workday Leader Directory.Manager Job Profile', 'Workday Leader Directory.Manager ID', 'Workday Leader Directory.Manager\u0027s Email', 'Workday Leader Directory.Continuous Service Date/Service Anniversary', 'Workday Leader Directory.Start Date in Current Job OR Hire Date'}),    #'Renamed Columns1' = Table.RenameColumns(#'Removed Other Columns',{{'Workday Leader Directory.Employee ID', 'TSID'}, {'Workday Leader Directory.Worker', 'Name'}, {'Workday Leader Directory.Preferred Name - First Name', 'Preferred Name - First Name'}, {'Workday Leader Directory.Last Name', 'Last Name'}, {'Workday Leader Directory.Job Profile', 'Job Profile'}, {'Workday Leader Directory.Job Code', 'Workday Job Code'}, {'Workday Leader Directory.Job Family', 'Job Family'}, {'Workday Leader Directory.Business Title', 'Business Title'}, {'Workday Leader Directory.Worker Type', 'Worker Type'}, {'Workday Leader Directory.Time Type', 'Time Type'}, {'Workday Leader Directory.Management Level', 'Management Level'}, {'Workday Leader Directory.Number of Direct Reports', 'Number of Direct Reports'}, {'Workday Leader Directory.Phone', 'Phone'}, {'Workday Leader Directory.Email', 'Email'}, {'Workday Leader Directory.Location', 'Location'}, {'Workday Leader Directory.Work Space from Worker Primary Job', 'Work Space from Worker Primary Job'}, {'Workday Leader Directory.Total Base Pay - Amount', 'Total Base Pay - Amount'}, {'Workday Leader Directory.Division', 'Division'}, {'Workday Leader Directory.Cost Center.1', 'Cost Center.1'}, {'Workday Leader Directory.Cost Center - ID', 'Cost Center - ID'}, {'Workday Leader Directory.Supervisory Organization', 'Supervisory Organization'}, {'Workday Leader Directory.Manager', 'Manager'}, {'Workday Leader Directory.Manager Job Profile', 'Manager Job Profile'}, {'Workday Leader Directory.Manager ID', 'Manager ID'}, {'Workday Leader Directory.Manager\u0027s Email', 'Manager\u0027s Email'}, {'Workday Leader Directory.Continuous Service Date/Service Anniversary', 'Continuous Service Date/Service Anniversary'}, {'Workday Leader Directory.Start Date in Current Job OR Hire Date', 'Start Date in Current Job OR Hire Date'}}),    #'Changed Type1' = Table.TransformColumnTypes(#'Renamed Columns1',{{'Workday Job Code', type text}}),    #'Renamed Columns2' = Table.RenameColumns(#'Changed Type1',{{'Cost Center.1', 'Cost Center'}, {'Start Date in Current Job OR Hire Date', 'Start Date in Current Role'}}),    #'Added Custom' = Table.AddColumn(#'Renamed Columns2', 'Job Code', each '00' \u0026 [Workday Job Code])in    #'Added Custom'"}]},{"name":"Blank Replacers","isHidden":false,"storageMode":"Import","columns":[{"name":"Zone_Leader_Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Hires Count","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i45WUlBQUNJRsrQ0AZJmSrE6YBGIkCmKEETMDFUMImgOJE2QBCGiFuiiEGFLiHAsAA==', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Zone_Leader_Name = _t, RFO = _t, #'Hires Count' = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Zone_Leader_Name', type text}, {'RFO', Int64.Type}, {'Hires Count', Int64.Type}})in    #'Changed Type'"}]},{"name":"Sr Market Director Names","isHidden":false,"storageMode":"Import","columns":[{"name":"Zone_Leader_Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Hires Count","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Sierra Metric","dataType":"String","isHidden":false,"expression":"(IF(AND(\u0027Sr Market Director Names\u0027[Hires Count]\u003e=4,\u0027Sr Market Director Names\u0027[Hires Count]\u003c6),1,-999999)+rankx(\u0027Sr Market Director Names\u0027,\u0027Sr Market Director Names\u0027[Zone_Leader_Name])+IF(\u0027Sr Market Director Names\u0027[RFO]=997,10,1)+IF(\u0027Sr Market Director Names\u0027[RFO]=998,20,1)+IF(\u0027Sr Market Director Names\u0027[RFO]=999,30,1))/IF(\u0027Sr Market Director Names\u0027[RFO]\u003e900,1000,1)","columnType":"Calculated"},{"name":"Sierra Rank","dataType":"String","isHidden":false,"expression":"if(\u0027Sr Market Director Names\u0027[Sierra Metric]\u003e0,rankx(\u0027Sr Market Director Names\u0027,\u0027Sr Market Director Names\u0027[Sierra Metric]),-999999)","columnType":"Calculated"},{"name":"Summitt Metric","dataType":"String","isHidden":false,"expression":"(IF(\u0027Sr Market Director Names\u0027[Hires Count]\u003e=6,1,-999999)+rankx(\u0027Sr Market Director Names\u0027,\u0027Sr Market Director Names\u0027[Zone_Leader_Name])+IF(\u0027Sr Market Director Names\u0027[RFO]=994,10,1)+IF(\u0027Sr Market Director Names\u0027[RFO]=995,20,1)+IF(\u0027Sr Market Director Names\u0027[RFO]=996,30,1))/IF(\u0027Sr Market Director Names\u0027[RFO]\u003e900,1000,1)","columnType":"Calculated"},{"name":"Summitt Rank","dataType":"String","isHidden":false,"expression":"if(\u0027Sr Market Director Names\u0027[Summitt Metric]\u003e0,rankx(\u0027Sr Market Director Names\u0027,\u0027Sr Market Director Names\u0027[Summitt Metric]),-999999)","columnType":"Calculated"}],"measures":[],"source":[{"expression":"let    Source = #'Sr Market Directors',    #'Removed Other Columns' = Table.SelectColumns(Source,{'Zone_Leader_Name', 'RFO', 'Hires Count'}),    #'Appended Query' = Table.Combine({#'Removed Other Columns', #'Blank Replacers'})in    #'Appended Query'"}]},{"name":"Leader Backup - 1004","isHidden":false,"storageMode":"Import","columns":[{"name":"Employee ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Worker","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Preferred Name - First Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Last Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Profile","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Code","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Job Family","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Business Title","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Worker Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Time Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Management Level","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Number of Direct Reports","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Phone","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Email","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Location","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Work Space from Worker Primary Job","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Total Base Pay - Amount","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Division","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Cost Center","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Cost Center - ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Supervisory Organization","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Manager","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Manager Job Profile","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Manager ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Manager\u0027s Email","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Continuous Service Date/Service Anniversary","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Start Date in Current Job OR Hire Date","dataType":"DateTime","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Leader Effectiveness Ranking Report//Workday Leader Directory - 070323 backup.xlsx'), null, true),    #'Directory by Job Profile - Thri_Sheet' = Source{[Item='001004',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'Directory by Job Profile - Thri_Sheet', [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Employee ID', type text}, {'Worker', type text}, {'Preferred Name - First Name', type text}, {'Last Name', type text}, {'Job Profile', type text}, {'Job Code', Int64.Type}, {'Job Family', type text}, {'Business Title', type text}, {'Worker Type', type text}, {'Time Type', type text}, {'Management Level', type text}, {'Number of Direct Reports', Int64.Type}, {'Phone', type text}, {'Email', type text}, {'Location', type text}, {'Work Space from Worker Primary Job', type any}, {'Total Base Pay - Amount', Int64.Type}, {'Division', type text}, {'Cost Center', type text}, {'Cost Center - ID', Int64.Type}, {'Supervisory Organization', type text}, {'Manager', type text}, {'Manager Job Profile', type text}, {'Manager ID', type text}, {'Manager\u0027s Email', type text}, {'Continuous Service Date/Service Anniversary', type date}, {'Start Date in Current Job OR Hire Date', type date}})in    #'Changed Type'"}]},{"name":"Workday Dir - Sr Mkt Dir","isHidden":false,"storageMode":"Import","columns":[{"name":"Employee ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Worker","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Preferred Name - First Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Last Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Profile","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Code","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Job Family","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Business Title","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Worker Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Time Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Management Level","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Number of Direct Reports","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Phone","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Email","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Location","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Work Space from Worker Primary Job","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Total Base Pay - Amount","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Division","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Cost Center","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Cost Center - ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Supervisory Organization","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Manager","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Manager Job Profile","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Manager ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Manager\u0027s Email","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Continuous Service Date/Service Anniversary","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Start Date in Current Job OR Hire Date","dataType":"DateTime","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Leader Effectiveness Ranking Report//Workday Leader Directory - 1004.xlsx'), null, true),    #'Directory by Job Profile - Thri_Sheet' = Source{[Item='Directory by Job Profile - Thri',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'Directory by Job Profile - Thri_Sheet', [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Employee ID', type text}, {'Worker', type text}, {'Preferred Name - First Name', type text}, {'Last Name', type text}, {'Job Profile', type text}, {'Job Code', Int64.Type}, {'Job Family', type text}, {'Business Title', type text}, {'Worker Type', type text}, {'Time Type', type text}, {'Management Level', type text}, {'Number of Direct Reports', Int64.Type}, {'Phone', type text}, {'Email', type text}, {'Location', type text}, {'Work Space from Worker Primary Job', type any}, {'Total Base Pay - Amount', Int64.Type}, {'Division', type text}, {'Cost Center', type text}, {'Cost Center - ID', Int64.Type}, {'Supervisory Organization', type text}, {'Manager', type text}, {'Manager Job Profile', type text}, {'Manager ID', type text}, {'Manager\u0027s Email', type text}, {'Continuous Service Date/Service Anniversary', type date}, {'Start Date in Current Job OR Hire Date', type date}}),    #'Filtered Rows' = Table.SelectRows(#'Changed Type', each ([Business Title] = 'Sr Market Director'))in    #'Filtered Rows'"}]},{"name":"Workday Dir - Sr Mkt Dir - Eligible","isHidden":false,"storageMode":"Import","columns":[{"name":"Employee ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Worker","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Preferred Name - First Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Last Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Profile","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Code","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Job Family","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Business Title","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Worker Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Time Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Management Level","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Number of Direct Reports","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Phone","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Email","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Location","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Work Space from Worker Primary Job","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Total Base Pay - Amount","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Division","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Cost Center","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Cost Center - ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Supervisory Organization","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Manager","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Manager Job Profile","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Manager ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Manager\u0027s Email","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Continuous Service Date/Service Anniversary","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Start Date in Current Job OR Hire Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Leader Backup - 1004.Employee ID","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = #'Workday Dir - Sr Mkt Dir',    #'Merged Queries' = Table.NestedJoin(Source, {'Employee ID'}, #'Leader Backup - 1004', {'Employee ID'}, 'Leader Backup - 1004', JoinKind.LeftOuter),    #'Expanded Leader Backup - 1004' = Table.ExpandTableColumn(#'Merged Queries', 'Leader Backup - 1004', {'Employee ID'}, {'Leader Backup - 1004.Employee ID'}),    #'Filtered Rows' = Table.SelectRows(#'Expanded Leader Backup - 1004', each ([#'Leader Backup - 1004.Employee ID'] \u003c\u003e null))in    #'Filtered Rows'"}]},{"name":"Workday Dir - Sr Mkt Dir - Not Eligible","isHidden":false,"storageMode":"Import","columns":[{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Preferred Name - First Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Last Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Profile","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Workday Job Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Family","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Business Title","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Worker Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Time Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Management Level","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Number of Direct Reports","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Phone","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Email","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Location","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Work Space from Worker Primary Job","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Total Base Pay - Amount","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Division","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Cost Center","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Cost Center - ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Supervisory Organization","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Manager","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Manager Job Profile","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Manager ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Manager\u0027s Email","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Continuous Service Date/Service Anniversary","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Start Date in Current Role","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Job Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Leader Backup - 1004.Employee ID","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = #'Workday Dir - Sr Mkt Dir',    #'Merged Queries' = Table.NestedJoin(Source, {'Employee ID'}, #'Leader Backup - 1004', {'Employee ID'}, 'Leader Backup - 1004', JoinKind.LeftOuter),    #'Expanded Leader Backup - 1004' = Table.ExpandTableColumn(#'Merged Queries', 'Leader Backup - 1004', {'Employee ID'}, {'Leader Backup - 1004.Employee ID'}),    #'Filtered Rows' = Table.SelectRows(#'Expanded Leader Backup - 1004', each ([#'Leader Backup - 1004.Employee ID'] = null)),    #'Renamed Columns' = Table.RenameColumns(#'Filtered Rows',{{'Employee ID', 'TSID'}, {'Worker', 'Name'}, {'Job Code', 'Workday Job Code'}, {'Start Date in Current Job OR Hire Date', 'Start Date in Current Role'}}),    #'Changed Type' = Table.TransformColumnTypes(#'Renamed Columns',{{'Workday Job Code', type text}}),    Custom1 = Table.AddColumn(#'Changed Type', 'Job Code', each '00' \u0026 [Workday Job Code]),    #'Reordered Columns' = Table.ReorderColumns(Custom1,{'TSID', 'Name', 'Preferred Name - First Name', 'Last Name', 'Job Profile', 'Workday Job Code', 'Job Family', 'Business Title', 'Worker Type', 'Time Type', 'Management Level', 'Number of Direct Reports', 'Phone', 'Email', 'Location', 'Work Space from Worker Primary Job', 'Total Base Pay - Amount', 'Division', 'Cost Center', 'Cost Center - ID', 'Supervisory Organization', 'Manager', 'Manager Job Profile', 'Manager ID', 'Manager\u0027s Email', 'Continuous Service Date/Service Anniversary', 'Start Date in Current Role', 'Job Code', 'Leader Backup - 1004.Employee ID'})in    #'Reordered Columns'"}]},{"name":"Pace Dev (2)","isHidden":false,"storageMode":"Import","columns":[{"name":"Tenure_Months","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FP_Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ABOVE_BELOW","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Week Start.Week_Start_Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Join Value","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market Developers - Pace.CORP_MGR_ID_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"All FRs Above/Below","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Above Count","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = #'Pace to Perf Snapshot',    #'Removed Other Columns' = Table.SelectColumns(Source,{'Tenure_Months', 'TSID', 'FP_Name', 'Market', 'ABOVE_BELOW', 'Week Start.Week_Start_Date'}),    Custom1 = Table.AddColumn(#'Removed Other Columns', 'Join Value', each DateTime.ToText ([Week Start.Week_Start_Date], 'MM/dd/yy') \u0026 [TSID]),    #'Merged Queries' = Table.NestedJoin(Custom1, {'Join Value'}, #'Market Developers - Pace', {'Join Value'}, 'Market Developers - Pace', JoinKind.LeftOuter),    #'Expanded Market Developers - Pace' = Table.ExpandTableColumn(#'Merged Queries', 'Market Developers - Pace', {'CORP_MGR_ID_CDE'}, {'Market Developers - Pace.CORP_MGR_ID_CDE'}),    #'Filtered Rows' = Table.SelectRows(#'Expanded Market Developers - Pace', each ([ABOVE_BELOW] \u003c\u003e '')),    #'Added Custom' = Table.AddColumn(#'Filtered Rows', 'All FRs Above/Below', each 1),    #'Added Custom1' = Table.AddColumn(#'Added Custom', 'Above Count', each if ([ABOVE_BELOW]='ABOVE') then 1  else 0)in    #'Added Custom1'"}]},{"name":"Alert","isHidden":false,"storageMode":"Import","columns":[{"name":"Alert Message","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Date","dataType":"DateTime","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Field Reporting//What\u0027s New and Alert Message//What\u0027s New and Alert Message.xlsx'), null, true),    #'Leader Conference_Sheet' = Source{[Item='Leader Conference',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'Leader Conference_Sheet', [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'What\u0027s New Description', type any}, {'Alert Message', type text}, {'Date', type date}}),    #'Removed Columns' = Table.RemoveColumns(#'Changed Type',{'What\u0027s New Description'}),    #'Filtered Rows' = Table.SelectRows(#'Removed Columns', each Date.IsInCurrentWeek(Date.StartOfWeek([Date], Day.Monday)))in    #'Filtered Rows'"}]},{"name":"What\u0027s New","isHidden":false,"storageMode":"Import","columns":[{"name":"What\u0027s New Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Date","dataType":"DateTime","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Field Reporting//What\u0027s New and Alert Message//What\u0027s New and Alert Message.xlsx'), null, true),    #'Leader Conference_Sheet' = Source{[Item='Leader Conference',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'Leader Conference_Sheet', [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'What\u0027s New Description', type any}, {'Alert Message', type text}, {'Date', type date}}),    #'Removed Columns' = Table.RemoveColumns(#'Changed Type',{'Alert Message'})in    #'Removed Columns'"}]},{"name":"RR_In_And_Out","isHidden":false,"storageMode":"Import","columns":[{"name":"Division_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Division_Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"RFO_Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP_ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Zone_ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Zone_Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMPL_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Zone_Leader_Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TITLE_CODE_2","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"JOB_TITLE_NM_2","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MGT_RLTN_BEG_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"MGT_RLTN_END_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Days_in_RR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"CNTRCT_HIRE_STATUS","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Recode_CNTRCT_HIRE_STATUS","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CNTRCT_TERMIN_STS","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Term_ASD_Tenure","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Term_ASD_w_BI_Tenure","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Term_Transfer_Status","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ADJ_SVC_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"EMPL_SEX_CODE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMPL_BIRTH_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Contract_Hire_Age","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Contract_Hire_Age_Group","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S6_LIC_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S7_LIC_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S63_LIC_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S65_LIC_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S66_LIC_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"INVS_ADVR_REPR_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S7_65_66","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PREV_TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PREV_JOB","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"PREV_END_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"DIFFERENCE","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"FUTURE_TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FUTURE_JOB","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"FUTURE_BEG_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"FUTURE_DIFFERENCE","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Capacity Dashboard//Capacity Dashboard-RR_In_and_Out.xlsx'), null, true),    RR_In_and_Out_DefinedName = Source{[Item='RR_In_and_Out',Kind='DefinedName']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(RR_In_and_Out_DefinedName, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Division_ID', type text}, {'Division_Description', type text}, {'RFO_ID', Int64.Type}, {'RFO_Description', type text}, {'MVP_ID', Int64.Type}, {'Zone_ID', Int64.Type}, {'Zone_Description', type text}, {'TSID', type text}, {'EMPL_NM', type text}, {'Zone_Leader_Name', type text}, {'JOB_TITLE_CODE_2', Int64.Type}, {'JOB_TITLE_NM_2', type text}, {'MGT_RLTN_BEG_DATE', type date}, {'MGT_RLTN_END_DATE', type date}, {'Days_in_RR', Int64.Type}, {'CNTRCT_HIRE_STATUS', Int64.Type}, {'Recode_CNTRCT_HIRE_STATUS', type text}, {'CNTRCT_TERMIN_STS', Int64.Type}, {'Term_ASD_Tenure', type number}, {'Term_ASD_w_BI_Tenure', type number}, {'Term_Transfer_Status', type text}, {'ADJ_SVC_DT', type date}, {'EMPL_SEX_CODE', type text}, {'EMPL_BIRTH_DATE', type date}, {'Contract_Hire_Age', type number}, {'Contract_Hire_Age_Group', type text}, {'S6_LIC_STS_CDE', type text}, {'S7_LIC_STS_CDE', type text}, {'S63_LIC_STS_CDE', type text}, {'S65_LIC_STS_CDE', type text}, {'S66_LIC_STS_CDE', type text}, {'INVS_ADVR_REPR_IND', type text}, {'S7_65_66', type text}, {'PREV_TSID', type text}, {'PREV_JOB', Int64.Type}, {'PREV_END_DATE', type date}, {'DIFFERENCE', Int64.Type}, {'FUTURE_TSID', type text}, {'FUTURE_JOB', Int64.Type}, {'FUTURE_BEG_DATE', type date}, {'FUTURE_DIFFERENCE', Int64.Type}})    in    #'Changed Type'"}]},{"name":"Market Leaders - Backdated","isHidden":false,"storageMode":"Import","columns":[{"name":"Employee ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Count","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Job Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Workday Name","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Sql.Database('dbedwdwprd', 'enterprisedatamart', [Query='SELECT#(lf)b.SRC_SYS_KEY_TXT,#(lf)CONCAT(b.FRST_NM,\u0027 \u0027,b.LST_NM) AS Name,#(lf)b.JOB_TYP_CDE#(lf)FROM#(lf)[EnterpriseDataMart].[DM_01].[ORGANIZATION_DIM] b#(lf)WHERE#(lf)(#(lf)b.JOB_TYP_CDE = \u0027001004\u0027 OR#(lf)b.JOB_TYP_CDE = \u0027001005\u0027 OR#(lf)b.JOB_TYP_CDE = \u0027001007\u0027#(lf))#(lf)AND#(lf)(#(lf)EFF_BEG_DT\u003e=DATEFROMPARTS(2023,10,1)#(lf)OR#(lf)EFF_END_DT\u003e=DATEFROMPARTS(2023,10,1)#(lf))#(lf)GROUP BY#(lf)b.SRC_SYS_KEY_TXT,#(lf)CONCAT(b.FRST_NM,\u0027 \u0027,b.LST_NM),#(lf)b.JOB_TYP_CDE']),    #'Merged Queries' = Table.NestedJoin(Source, {'SRC_SYS_KEY_TXT'}, #'Workday Dir - Sr Mkt Dir', {'Employee ID'}, 'Workday Dir - Sr Mkt Dir', JoinKind.LeftOuter),    #'Expanded Workday Dir - Sr Mkt Dir' = Table.ExpandTableColumn(#'Merged Queries', 'Workday Dir - Sr Mkt Dir', {'Employee ID'}, {'Workday Dir - Sr Mkt Dir.Employee ID'}),    #'Added Custom' = Table.AddColumn(#'Expanded Workday Dir - Sr Mkt Dir', 'Indicator', each if [#'Workday Dir - Sr Mkt Dir.Employee ID'] is null then (if [JOB_TYP_CDE]\u003c\u003e'001004' then 'Y' else 'N') else 'Y'),    #'Filtered Rows' = Table.SelectRows(#'Added Custom', each ([Indicator] = 'Y')),    #'Grouped Rows' = Table.Group(#'Filtered Rows', {'SRC_SYS_KEY_TXT', 'Name'}, {{'Count', each Table.RowCount(_), Int64.Type}, {'Job Code', each List.Min([JOB_TYP_CDE]), type text}}),    #'Merged Queries1' = Table.NestedJoin(#'Grouped Rows', {'SRC_SYS_KEY_TXT'}, #'TSID - Workday Names', {'Employee ID'}, 'TSID - Workday Names', JoinKind.LeftOuter),    #'Expanded TSID - Workday Names' = Table.ExpandTableColumn(#'Merged Queries1', 'TSID - Workday Names', {'Workday Name'}, {'TSID - Workday Names.Workday Name'}),    #'Renamed Columns' = Table.RenameColumns(#'Expanded TSID - Workday Names',{{'TSID - Workday Names.Workday Name', 'Workday Name'}, {'SRC_SYS_KEY_TXT', 'Employee ID'}})in    #'Renamed Columns'"}]},{"name":"Non-Traditional Hires - 2022","isHidden":false,"storageMode":"Import","columns":[{"name":"PREV_JOB_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Tenure Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"EFF_END_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_ZONE_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_DEPT_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RR_In_And_Out.TSID","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Sql.Database('dbedwdwprd', 'enterprisedatamart', [Query='SELECT#(lf)a.PREV_JOB_TYP_CDE,#(lf)a.JOB_TYP_CDE,#(lf)a.EFF_BEG_DT,#(lf)a.EFF_END_DT,#(lf)b.SRC_SYS_KEY_TXT,#(lf)CONCAT(b.FRST_NM,\u0027 \u0027,b.LST_NM) AS Name,#(lf)c.ORZN_ZONE_CDE,#(lf)c.ORZN_DEPT_CDE#(lf)FROM#(lf)[EnterpriseDataMart].[DM_01].[WORKER_STATUS_FCT] a#(lf)LEFT JOIN#(lf)[EnterpriseDataMart].[DM_01].[ORGANIZATION_DIM] b#(lf)ON a.ORZN_DIM_SK=b.ORZN_DIM_SK#(lf)LEFT JOIN#(lf)[EnterpriseDataMart].[DM_01].[SALE_HIER_DIM] c#(lf)ON (b.SRC_SYS_KEY_TXT=c.SALE_HIER_ID AND c.CURR_ROW_IND=\u0027Y\u0027)#(lf)#(lf)WHERE#(lf)(#(lf)a.PREV_JOB_TYP_CDE = \u0027002003\u0027 OR#(lf)a.PREV_JOB_TYP_CDE = \u0027002011\u0027 OR#(lf)a.PREV_JOB_TYP_CDE = \u0027002012\u0027 OR#(lf)a.PREV_JOB_TYP_CDE = \u0027002030\u0027 OR#(lf)a.PREV_JOB_TYP_CDE = \u0027002031\u0027 OR#(lf)a.PREV_JOB_TYP_CDE = \u0027002032\u0027#(lf))#(lf)AND#(lf)a.JOB_TYP_CDE = \u0027002022\u0027#(lf)GROUP BY#(lf)a.PREV_JOB_TYP_CDE,#(lf)a.JOB_TYP_CDE,#(lf)a.EFF_BEG_DT,#(lf)a.EFF_END_DT,#(lf)b.SRC_SYS_KEY_TXT,#(lf)c.ORZN_ZONE_CDE,#(lf)c.ORZN_DEPT_CDE,#(lf)CONCAT(b.FRST_NM,\u0027 \u0027,b.LST_NM)']),    #'Renamed Columns' = Table.RenameColumns(Source,{{'EFF_BEG_DT', 'Tenure Date'}}),    #'Filtered Rows' = Table.SelectRows(#'Renamed Columns', each [Tenure Date] \u003e #datetime(2023, 12, 31, 0, 0, 0)),    #'Filtered Rows1' = Table.SelectRows(#'Filtered Rows', each ([EFF_END_DT] = #datetime(9999, 12, 31, 0, 0, 0))),    #'Renamed Columns1' = Table.RenameColumns(#'Filtered Rows1',{{'SRC_SYS_KEY_TXT', 'TSID'}}),    #'Merged Queries' = Table.NestedJoin(#'Renamed Columns1', {'TSID'}, RR_In_And_Out, {'TSID'}, 'RR_In_And_Out', JoinKind.LeftOuter),    #'Expanded RR_In_And_Out' = Table.ExpandTableColumn(#'Merged Queries', 'RR_In_And_Out', {'TSID'}, {'RR_In_And_Out.TSID'}),    #'Filtered Rows2' = Table.SelectRows(#'Expanded RR_In_And_Out', each ([RR_In_And_Out.TSID] = null))in    #'Filtered Rows2'"}]},{"name":"Non_Standard_Hires","isHidden":false,"storageMode":"Import","columns":[{"name":"Division","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Hire Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Job Code","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Job Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market Leader Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Market Name","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////vsshr//shared//Public//DI and BI//Leader Effectiveness Ranking Report//Non_Standard_Hires.csv'),[Delimiter=',', Columns=49, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Division_ID', type text}, {'Division_Description', type text}, {'RFO_ID', Int64.Type}, {'RFO_Description', type text}, {'MVP_ID', Int64.Type}, {'Zone_ID', Int64.Type}, {'Zone_Description', type text}, {'TSID', type text}, {'EMPL_NM', type text}, {'Zone_Leader_Name', type text}, {'JOB_TITLE_CODE_2', Int64.Type}, {'JOB_TITLE_NM_2', type text}, {'MGT_RLTN_BEG_DATE', type date}, {'CNTRCT_HIRE_STATUS', Int64.Type}, {'Recode_CNTRCT_HIRE_STATUS', type text}, {'ADJ_SVC_DT', type date}, {'EMPL_SEX_CODE', type text}, {'EMPL_BIRTH_DATE', type date}, {'Contract_Hire_Age', type number}, {'Contract_Hire_Age_Group', type text}, {'S6_LIC_STS_CDE', type text}, {'S7_LIC_STS_CDE', type text}, {'S63_LIC_STS_CDE', type text}, {'S65_LIC_STS_CDE', type text}, {'S66_LIC_STS_CDE', type text}, {'INVS_ADVR_REPR_IND', type text}, {'S7_65_66', type text}, {'Cal_Cntrct_Hire_Yr', Int64.Type}, {'Cal_Cntrct_Hire_Wk', Int64.Type}, {'Prf_Cntrct_Hire_Yr', Int64.Type}, {'Prf_Contrct_Hire_Wk', Int64.Type}, {'PREV_TSID', type text}, {'PREV_JOB', Int64.Type}, {'PREV_END_DATE', type date}, {'DIFFERENCE', Int64.Type}, {'RAR_CONTRACT', type text}, {'RAR_CONTRACT_DATE', type text}, {'RAR_CONTRACT_YEAR', type text}, {'OR_CONTRACT', type text}, {'OR_CONTRACT_DATE', type text}, {'OR_CONTRACT_YEAR', type text}, {'SELL_ASSOC_HIRE', type text}, {'SUPT_ASSOC_HIRE', type text}, {'ASSOC_HIRE', type text}, {'ASSOC_HIRE_DATE', type text}, {'ASSOC_HIRE_YEAR', type text}, {'SELL_ROLE_HIRE', type text}, {'SELL_ROLE_HIRE_DATE', type text}, {'SELL_ROLE_HIRE_YEAR', type text}}),    #'Renamed Columns' = Table.RenameColumns(#'Changed Type',{{'Division_Description', 'Division'}}),    #'Reordered Columns' = Table.ReorderColumns(#'Renamed Columns',{'Division', 'Division_ID', 'RFO_ID', 'RFO_Description', 'MVP_ID', 'Zone_ID', 'Zone_Description', 'TSID', 'EMPL_NM', 'Zone_Leader_Name', 'JOB_TITLE_CODE_2', 'JOB_TITLE_NM_2', 'MGT_RLTN_BEG_DATE', 'CNTRCT_HIRE_STATUS', 'Recode_CNTRCT_HIRE_STATUS', 'ADJ_SVC_DT', 'EMPL_SEX_CODE', 'EMPL_BIRTH_DATE', 'Contract_Hire_Age', 'Contract_Hire_Age_Group', 'S6_LIC_STS_CDE', 'S7_LIC_STS_CDE', 'S63_LIC_STS_CDE', 'S65_LIC_STS_CDE', 'S66_LIC_STS_CDE', 'INVS_ADVR_REPR_IND', 'S7_65_66', 'Cal_Cntrct_Hire_Yr', 'Cal_Cntrct_Hire_Wk', 'Prf_Cntrct_Hire_Yr', 'Prf_Contrct_Hire_Wk', 'PREV_TSID', 'PREV_JOB', 'PREV_END_DATE', 'DIFFERENCE', 'RAR_CONTRACT', 'RAR_CONTRACT_DATE', 'RAR_CONTRACT_YEAR', 'OR_CONTRACT', 'OR_CONTRACT_DATE', 'OR_CONTRACT_YEAR', 'SELL_ASSOC_HIRE', 'SUPT_ASSOC_HIRE', 'ASSOC_HIRE', 'ASSOC_HIRE_DATE', 'ASSOC_HIRE_YEAR', 'SELL_ROLE_HIRE', 'SELL_ROLE_HIRE_DATE', 'SELL_ROLE_HIRE_YEAR'}),    #'Renamed Columns1' = Table.RenameColumns(#'Reordered Columns',{{'EMPL_NM', 'Employee Name'}}),    #'Reordered Columns1' = Table.ReorderColumns(#'Renamed Columns1',{'Division', 'Employee Name', 'TSID', 'Division_ID', 'RFO_ID', 'RFO_Description', 'MVP_ID', 'Zone_ID', 'Zone_Description', 'Zone_Leader_Name', 'JOB_TITLE_CODE_2', 'JOB_TITLE_NM_2', 'MGT_RLTN_BEG_DATE', 'CNTRCT_HIRE_STATUS', 'Recode_CNTRCT_HIRE_STATUS', 'ADJ_SVC_DT', 'EMPL_SEX_CODE', 'EMPL_BIRTH_DATE', 'Contract_Hire_Age', 'Contract_Hire_Age_Group', 'S6_LIC_STS_CDE', 'S7_LIC_STS_CDE', 'S63_LIC_STS_CDE', 'S65_LIC_STS_CDE', 'S66_LIC_STS_CDE', 'INVS_ADVR_REPR_IND', 'S7_65_66', 'Cal_Cntrct_Hire_Yr', 'Cal_Cntrct_Hire_Wk', 'Prf_Cntrct_Hire_Yr', 'Prf_Contrct_Hire_Wk', 'PREV_TSID', 'PREV_JOB', 'PREV_END_DATE', 'DIFFERENCE', 'RAR_CONTRACT', 'RAR_CONTRACT_DATE', 'RAR_CONTRACT_YEAR', 'OR_CONTRACT', 'OR_CONTRACT_DATE', 'OR_CONTRACT_YEAR', 'SELL_ASSOC_HIRE', 'SUPT_ASSOC_HIRE', 'ASSOC_HIRE', 'ASSOC_HIRE_DATE', 'ASSOC_HIRE_YEAR', 'SELL_ROLE_HIRE', 'SELL_ROLE_HIRE_DATE', 'SELL_ROLE_HIRE_YEAR'}),    #'Renamed Columns2' = Table.RenameColumns(#'Reordered Columns1',{{'MGT_RLTN_BEG_DATE', 'Hire Date'}}),    #'Reordered Columns2' = Table.ReorderColumns(#'Renamed Columns2',{'Division', 'Employee Name', 'TSID', 'Hire Date', 'Division_ID', 'RFO_ID', 'RFO_Description', 'MVP_ID', 'Zone_ID', 'Zone_Description', 'Zone_Leader_Name', 'JOB_TITLE_CODE_2', 'JOB_TITLE_NM_2', 'CNTRCT_HIRE_STATUS', 'Recode_CNTRCT_HIRE_STATUS', 'ADJ_SVC_DT', 'EMPL_SEX_CODE', 'EMPL_BIRTH_DATE', 'Contract_Hire_Age', 'Contract_Hire_Age_Group', 'S6_LIC_STS_CDE', 'S7_LIC_STS_CDE', 'S63_LIC_STS_CDE', 'S65_LIC_STS_CDE', 'S66_LIC_STS_CDE', 'INVS_ADVR_REPR_IND', 'S7_65_66', 'Cal_Cntrct_Hire_Yr', 'Cal_Cntrct_Hire_Wk', 'Prf_Cntrct_Hire_Yr', 'Prf_Contrct_Hire_Wk', 'PREV_TSID', 'PREV_JOB', 'PREV_END_DATE', 'DIFFERENCE', 'RAR_CONTRACT', 'RAR_CONTRACT_DATE', 'RAR_CONTRACT_YEAR', 'OR_CONTRACT', 'OR_CONTRACT_DATE', 'OR_CONTRACT_YEAR', 'SELL_ASSOC_HIRE', 'SUPT_ASSOC_HIRE', 'ASSOC_HIRE', 'ASSOC_HIRE_DATE', 'ASSOC_HIRE_YEAR', 'SELL_ROLE_HIRE', 'SELL_ROLE_HIRE_DATE', 'SELL_ROLE_HIRE_YEAR'}),    #'Renamed Columns3' = Table.RenameColumns(#'Reordered Columns2',{{'JOB_TITLE_CODE_2', 'Job Code'}}),    #'Reordered Columns3' = Table.ReorderColumns(#'Renamed Columns3',{'Division', 'Employee Name', 'TSID', 'Hire Date', 'Job Code', 'Division_ID', 'RFO_ID', 'RFO_Description', 'MVP_ID', 'Zone_ID', 'Zone_Description', 'Zone_Leader_Name', 'JOB_TITLE_NM_2', 'CNTRCT_HIRE_STATUS', 'Recode_CNTRCT_HIRE_STATUS', 'ADJ_SVC_DT', 'EMPL_SEX_CODE', 'EMPL_BIRTH_DATE', 'Contract_Hire_Age', 'Contract_Hire_Age_Group', 'S6_LIC_STS_CDE', 'S7_LIC_STS_CDE', 'S63_LIC_STS_CDE', 'S65_LIC_STS_CDE', 'S66_LIC_STS_CDE', 'INVS_ADVR_REPR_IND', 'S7_65_66', 'Cal_Cntrct_Hire_Yr', 'Cal_Cntrct_Hire_Wk', 'Prf_Cntrct_Hire_Yr', 'Prf_Contrct_Hire_Wk', 'PREV_TSID', 'PREV_JOB', 'PREV_END_DATE', 'DIFFERENCE', 'RAR_CONTRACT', 'RAR_CONTRACT_DATE', 'RAR_CONTRACT_YEAR', 'OR_CONTRACT', 'OR_CONTRACT_DATE', 'OR_CONTRACT_YEAR', 'SELL_ASSOC_HIRE', 'SUPT_ASSOC_HIRE', 'ASSOC_HIRE', 'ASSOC_HIRE_DATE', 'ASSOC_HIRE_YEAR', 'SELL_ROLE_HIRE', 'SELL_ROLE_HIRE_DATE', 'SELL_ROLE_HIRE_YEAR'}),    #'Added Custom' = Table.AddColumn(#'Reordered Columns3', 'Market ID', each '0' \u0026 Number.ToText([MVP_ID]) \u0026 '-' \u0026 (if ([Zone_ID]\u003c10) then '0' else '') \u0026 Number.ToText([Zone_ID])),    #'Reordered Columns4' = Table.ReorderColumns(#'Added Custom',{'Division', 'Employee Name', 'TSID', 'Hire Date', 'Job Code', 'Market ID', 'RFO_ID', 'Division_ID', 'RFO_Description', 'MVP_ID', 'Zone_ID', 'Zone_Description', 'Zone_Leader_Name', 'JOB_TITLE_NM_2', 'CNTRCT_HIRE_STATUS', 'Recode_CNTRCT_HIRE_STATUS', 'ADJ_SVC_DT', 'EMPL_SEX_CODE', 'EMPL_BIRTH_DATE', 'Contract_Hire_Age', 'Contract_Hire_Age_Group', 'S6_LIC_STS_CDE', 'S7_LIC_STS_CDE', 'S63_LIC_STS_CDE', 'S65_LIC_STS_CDE', 'S66_LIC_STS_CDE', 'INVS_ADVR_REPR_IND', 'S7_65_66', 'Cal_Cntrct_Hire_Yr', 'Cal_Cntrct_Hire_Wk', 'Prf_Cntrct_Hire_Yr', 'Prf_Contrct_Hire_Wk', 'PREV_TSID', 'PREV_JOB', 'PREV_END_DATE', 'DIFFERENCE', 'RAR_CONTRACT', 'RAR_CONTRACT_DATE', 'RAR_CONTRACT_YEAR', 'OR_CONTRACT', 'OR_CONTRACT_DATE', 'OR_CONTRACT_YEAR', 'SELL_ASSOC_HIRE', 'SUPT_ASSOC_HIRE', 'ASSOC_HIRE', 'ASSOC_HIRE_DATE', 'ASSOC_HIRE_YEAR', 'SELL_ROLE_HIRE', 'SELL_ROLE_HIRE_DATE', 'SELL_ROLE_HIRE_YEAR'}),    #'Renamed Columns4' = Table.RenameColumns(#'Reordered Columns4',{{'RFO_ID', 'RFO'}}),    #'Reordered Columns5' = Table.ReorderColumns(#'Renamed Columns4',{'Division', 'Employee Name', 'TSID', 'Hire Date', 'Job Code', 'Market ID', 'Zone_Leader_Name', 'RFO', 'Division_ID', 'RFO_Description', 'MVP_ID', 'Zone_ID', 'Zone_Description', 'JOB_TITLE_NM_2', 'CNTRCT_HIRE_STATUS', 'Recode_CNTRCT_HIRE_STATUS', 'ADJ_SVC_DT', 'EMPL_SEX_CODE', 'EMPL_BIRTH_DATE', 'Contract_Hire_Age', 'Contract_Hire_Age_Group', 'S6_LIC_STS_CDE', 'S7_LIC_STS_CDE', 'S63_LIC_STS_CDE', 'S65_LIC_STS_CDE', 'S66_LIC_STS_CDE', 'INVS_ADVR_REPR_IND', 'S7_65_66', 'Cal_Cntrct_Hire_Yr', 'Cal_Cntrct_Hire_Wk', 'Prf_Cntrct_Hire_Yr', 'Prf_Contrct_Hire_Wk', 'PREV_TSID', 'PREV_JOB', 'PREV_END_DATE', 'DIFFERENCE', 'RAR_CONTRACT', 'RAR_CONTRACT_DATE', 'RAR_CONTRACT_YEAR', 'OR_CONTRACT', 'OR_CONTRACT_DATE', 'OR_CONTRACT_YEAR', 'SELL_ASSOC_HIRE', 'SUPT_ASSOC_HIRE', 'ASSOC_HIRE', 'ASSOC_HIRE_DATE', 'ASSOC_HIRE_YEAR', 'SELL_ROLE_HIRE', 'SELL_ROLE_HIRE_DATE', 'SELL_ROLE_HIRE_YEAR'}),    #'Renamed Columns5' = Table.RenameColumns(#'Reordered Columns5',{{'Zone_Leader_Name', 'Market Leader Name'}, {'JOB_TITLE_NM_2', 'Job Name'}}),    #'Reordered Columns6' = Table.ReorderColumns(#'Renamed Columns5',{'Division', 'Employee Name', 'TSID', 'Hire Date', 'Job Code', 'Job Name', 'Market ID', 'Market Leader Name', 'RFO', 'Division_ID', 'RFO_Description', 'MVP_ID', 'Zone_ID', 'Zone_Description', 'CNTRCT_HIRE_STATUS', 'Recode_CNTRCT_HIRE_STATUS', 'ADJ_SVC_DT', 'EMPL_SEX_CODE', 'EMPL_BIRTH_DATE', 'Contract_Hire_Age', 'Contract_Hire_Age_Group', 'S6_LIC_STS_CDE', 'S7_LIC_STS_CDE', 'S63_LIC_STS_CDE', 'S65_LIC_STS_CDE', 'S66_LIC_STS_CDE', 'INVS_ADVR_REPR_IND', 'S7_65_66', 'Cal_Cntrct_Hire_Yr', 'Cal_Cntrct_Hire_Wk', 'Prf_Cntrct_Hire_Yr', 'Prf_Contrct_Hire_Wk', 'PREV_TSID', 'PREV_JOB', 'PREV_END_DATE', 'DIFFERENCE', 'RAR_CONTRACT', 'RAR_CONTRACT_DATE', 'RAR_CONTRACT_YEAR', 'OR_CONTRACT', 'OR_CONTRACT_DATE', 'OR_CONTRACT_YEAR', 'SELL_ASSOC_HIRE', 'SUPT_ASSOC_HIRE', 'ASSOC_HIRE', 'ASSOC_HIRE_DATE', 'ASSOC_HIRE_YEAR', 'SELL_ROLE_HIRE', 'SELL_ROLE_HIRE_DATE', 'SELL_ROLE_HIRE_YEAR'}),    #'Removed Columns' = Table.RemoveColumns(#'Reordered Columns6',{'Division_ID', 'RFO_Description', 'MVP_ID', 'Zone_ID', 'Zone_Description', 'CNTRCT_HIRE_STATUS', 'Recode_CNTRCT_HIRE_STATUS', 'ADJ_SVC_DT', 'EMPL_SEX_CODE', 'EMPL_BIRTH_DATE', 'Contract_Hire_Age', 'Contract_Hire_Age_Group', 'S6_LIC_STS_CDE', 'S7_LIC_STS_CDE', 'S63_LIC_STS_CDE', 'S65_LIC_STS_CDE', 'S66_LIC_STS_CDE', 'INVS_ADVR_REPR_IND', 'S7_65_66', 'Cal_Cntrct_Hire_Yr', 'Cal_Cntrct_Hire_Wk', 'Prf_Cntrct_Hire_Yr', 'Prf_Contrct_Hire_Wk', 'PREV_TSID', 'PREV_JOB', 'PREV_END_DATE', 'DIFFERENCE', 'RAR_CONTRACT', 'RAR_CONTRACT_DATE', 'RAR_CONTRACT_YEAR', 'OR_CONTRACT', 'OR_CONTRACT_DATE', 'OR_CONTRACT_YEAR', 'SELL_ASSOC_HIRE', 'SUPT_ASSOC_HIRE', 'ASSOC_HIRE', 'ASSOC_HIRE_DATE', 'ASSOC_HIRE_YEAR', 'SELL_ROLE_HIRE', 'SELL_ROLE_HIRE_DATE', 'SELL_ROLE_HIRE_YEAR'}),    #'Added Custom1' = Table.AddColumn(#'Removed Columns', 'Market Name', each '0' \u0026 Number.ToText([RFO]) \u0026 '-' \u0026 [Market ID])in    #'Added Custom1'"}]},{"name":"TSID - Workday Names","isHidden":false,"storageMode":"Import","columns":[{"name":"Worker","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Workday Name","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Leader Effectiveness Ranking Report//Workday - Directory (All).xlsx'), null, true),    Sheet1_Sheet = Source{[Item='Sheet1',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Hire Date', type date}, {'Worker', type text}, {'Employee ID', type text}, {'Preferred Name - First Name', type text}, {'Preferred Name - Last Name', type text}, {'Employee Type', type text}, {'Job Code', Int64.Type}, {'Job Profile', type text}, {'Business Title', type text}, {'Scheduled Weekly Hours', Int64.Type}, {'Job Family (''Field-Field'' \u0026 ''Field-AOS'' are for the Field)', type text}, {'Management Level', type text}, {'Number of Direct Reports', Int64.Type}, {'Supervisory Organization', type text}, {'Manager', type text}, {'Manager ID', type text}, {'MVP (Field)', type text}, {'Division', type text}, {'ZCF ESI Worker Business Process - Proposed Strategic Category', type text}, {'Cost Center ID', Int64.Type}, {'Cost Center', type text}, {'Location', type text}, {'Location Address - State', type text}, {'Mail Stop', type any}, {'Rehired Employee', type text}, {'Continuous Service Date (Takes Into Account Breaks in Service)', type date}, {'Email - Primary Work', type text}, {'Primary Home Address - State', type any}, {'Date Transaction Was Completed', type datetime}, {'Date transaction was initiated', type date}, {'Proposed Position Certifications', type any}, {'Workforce Segment', type text}, {'Business Process Reason', type text}}),    #'Removed Other Columns' = Table.SelectColumns(#'Changed Type',{'Worker', 'Employee ID'}),    #'Added Custom' = Table.AddColumn(#'Removed Other Columns', 'Workday Name', each Text.BeforeDelimiter(Text.BeforeDelimiter([Worker],'('),'['))in    #'Added Custom'"}]},{"name":"TERMS_DETAIL_OR","isHidden":false,"storageMode":"Import","columns":[{"name":"Division_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Division_Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"RFO_Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP_ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Zone_ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Zone_Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMPL_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Zone_Leader_Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TITLE_CODE_2","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"JOB_TITLE_NM_2","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MGT_RLTN_END_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"CNTRCT_TERMIN_STS","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Term_Transfer_Status","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ADJ_SVC_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Term_ASD_Tenure","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Term_ASD_Segment","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Term_ASD_byYear","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ASD_with_BI","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Term_ASD_w_BI_Tenure","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Term_ASD_w_BI_Segment","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Term_ASD_w_BI_byYear","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Conference","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Conference_YE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMPL_SEX_CODE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMPL_BIRTH_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Term_Age","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Term_Age_Group","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S6_LIC_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S7_LIC_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S63_LIC_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S65_LIC_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S66_LIC_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"INVS_ADVR_REPR_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S7_65_66","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Cal_Term_Yr","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Cal_Term_Wk","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Prf_Term_Yr","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Prf_Term_Wk","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"FUTURE_TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FUTURE_JOB","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"FUTURE_BEG_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"FUTURE_DIFFERENCE","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DIFFERENCE","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"RAR_CONTRACT_TERM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RAR_CONTRACT_TERM_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"RAR_CONTRACT_TERM_YEAR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"OR_CONTRACT_TERM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"OR_CONTRACT_TERM_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"OR_CONTRACT_TERM_YEAR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"SELL_ASSOC_TERM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SUPT_ASSOC_TERM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ASSOC_TERM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ASSOC_TERM_DATE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ASSOC_TERM_YEAR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SELL_ROLE_TERM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SELL_ROLE_TERM_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"SELL_ROLE_TERM_YEAR","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////vsshr//shared//Public//DI and BI//Leader Effectiveness Ranking Report//TERMS_DETAIL_OR.csv'),[Delimiter=',', Columns=59, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Division_ID', type text}, {'Division_Description', type text}, {'RFO_ID', Int64.Type}, {'RFO_Description', type text}, {'MVP_ID', Int64.Type}, {'Zone_ID', Int64.Type}, {'Zone_Description', type text}, {'TSID', type text}, {'EMPL_NM', type text}, {'Zone_Leader_Name', type text}, {'JOB_TITLE_CODE_2', Int64.Type}, {'JOB_TITLE_NM_2', type text}, {'MGT_RLTN_END_DATE', type date}, {'CNTRCT_TERMIN_STS', Int64.Type}, {'Term_Transfer_Status', type text}, {'ADJ_SVC_DT', type date}, {'Term_ASD_Tenure', type number}, {'Term_ASD_Segment', type text}, {'Term_ASD_byYear', type text}, {'ASD_with_BI', type date}, {'Term_ASD_w_BI_Tenure', type number}, {'Term_ASD_w_BI_Segment', type text}, {'Term_ASD_w_BI_byYear', type text}, {'Conference', type text}, {'Conference_YE', type text}, {'EMPL_SEX_CODE', type text}, {'EMPL_BIRTH_DATE', type date}, {'Term_Age', type number}, {'Term_Age_Group', type text}, {'S6_LIC_STS_CDE', type text}, {'S7_LIC_STS_CDE', type text}, {'S63_LIC_STS_CDE', type text}, {'S65_LIC_STS_CDE', type text}, {'S66_LIC_STS_CDE', type text}, {'INVS_ADVR_REPR_IND', type text}, {'S7_65_66', type text}, {'Cal_Term_Yr', Int64.Type}, {'Cal_Term_Wk', Int64.Type}, {'Prf_Term_Yr', Int64.Type}, {'Prf_Term_Wk', Int64.Type}, {'FUTURE_TSID', type text}, {'FUTURE_JOB', Int64.Type}, {'FUTURE_BEG_DATE', type date}, {'FUTURE_DIFFERENCE', Int64.Type}, {'DIFFERENCE', Int64.Type}, {'RAR_CONTRACT_TERM', type text}, {'RAR_CONTRACT_TERM_DATE', type date}, {'RAR_CONTRACT_TERM_YEAR', Int64.Type}, {'OR_CONTRACT_TERM', type text}, {'OR_CONTRACT_TERM_DATE', type date}, {'OR_CONTRACT_TERM_YEAR', Int64.Type}, {'SELL_ASSOC_TERM', type text}, {'SUPT_ASSOC_TERM', type text}, {'ASSOC_TERM', type text}, {'ASSOC_TERM_DATE', type text}, {'ASSOC_TERM_YEAR', type text}, {'SELL_ROLE_TERM', type text}, {'SELL_ROLE_TERM_DATE', type date}, {'SELL_ROLE_TERM_YEAR', Int64.Type}})in    #'Changed Type'"}]},{"name":"2023_YE_RDL_DATA_w_Capacity_Info - Detail","isHidden":false,"storageMode":"Import","columns":[{"name":"CORP_MGR_ID_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Headcount","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Name(s)","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////vsshr//shared//Public//DI and BI//Leader Effectiveness Ranking Report//2023_YE_RDL_DATA_w_Capacity_Info.csv'),[Delimiter=',', Columns=11, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'CORP_MGR_ID_CDE', type text}, {'CORP_EMP_ID_CDE', type text}, {'BEG_DATE', type date}, {'END_DATE', type date}, {'EMP_NM', type text}, {'TSID', type text}, {'EMPL_NM', type text}, {'JOB_TITLE_CODE_2', Int64.Type}, {'ASD_Tenure', type number}, {'ASD_w_BI_byYear', type text}}),    #'Removed Other Columns' = Table.SelectColumns(#'Changed Type',{'CORP_MGR_ID_CDE', 'CORP_EMP_ID_CDE', 'EMP_NM', 'EMPL_NM'}),    #'Labeled Mgr Name' = Table.RenameColumns(#'Removed Other Columns',{{'EMP_NM', 'MGR_NM'}}),    #'Grouped Rows' = Table.Group(#'Labeled Mgr Name', {'CORP_MGR_ID_CDE', 'CORP_EMP_ID_CDE', 'MGR_NM', 'EMPL_NM'}, {{'Count', each Table.RowCount(_), Int64.Type}}),    Custom1 = Table.Group(#'Grouped Rows', {'CORP_MGR_ID_CDE'}, {{'Headcount', each Table.RowCount(_), Int64.Type},{'Name(s)', each Text.Combine([EMPL_NM], '#(lf)'), type text}}),    Custom2 = Table.TransformColumns(Custom1,{{'Name(s)', Text.Proper, type text}})in    Custom2"}]},{"name":"2023_YE_RDL_DATA_w_Capacity_Info-Terms - Detail","isHidden":false,"storageMode":"Import","columns":[{"name":"CORP_MGR_ID_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CORP_EMP_ID_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MGR_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMPL_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Count","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"TERMS_DETAIL_OR.JOB_TITLE_CODE_2","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"TERMS_DETAIL_OR.MGT_RLTN_END_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TERMS_DETAIL_OR.CNTRCT_TERMIN_STS","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"TERMS_DETAIL_OR.Term_Transfer_Status","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FUTURE_JOB_CDE","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////vsshr//shared//Public//DI and BI//Leader Effectiveness Ranking Report//2023_YE_RDL_DATA_w_Capacity_Info.csv'),[Delimiter=',', Columns=11, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'CORP_MGR_ID_CDE', type text}, {'CORP_EMP_ID_CDE', type text}, {'BEG_DATE', type date}, {'END_DATE', type date}, {'EMP_NM', type text}, {'TSID', type text}, {'EMPL_NM', type text}, {'JOB_TITLE_CODE_2', Int64.Type}, {'ASD_Tenure', type number}, {'ASD_w_BI_byYear', type text}}),    #'Removed Other Columns' = Table.SelectColumns(#'Changed Type',{'CORP_MGR_ID_CDE', 'CORP_EMP_ID_CDE', 'EMP_NM', 'EMPL_NM','EFF_DT'}),    #'Labeled Mgr Name' = Table.RenameColumns(#'Removed Other Columns',{{'EMP_NM', 'MGR_NM'}}),    #'Grouped Rows' = Table.Group(#'Labeled Mgr Name', {'CORP_MGR_ID_CDE', 'CORP_EMP_ID_CDE', 'MGR_NM', 'EMPL_NM','EFF_DT'}, {{'Count', each Table.RowCount(_), Int64.Type}}),    #'Merged Queries' = Table.NestedJoin(#'Grouped Rows', {'CORP_EMP_ID_CDE'}, TERMS_DETAIL_OR, {'TSID'}, 'TERMS_DETAIL_OR', JoinKind.LeftOuter),    #'Expanded TERMS_DETAIL_OR' = Table.ExpandTableColumn(#'Merged Queries', 'TERMS_DETAIL_OR', {'JOB_TITLE_CODE_2', 'MGT_RLTN_END_DATE', 'CNTRCT_TERMIN_STS', 'Term_Transfer_Status', 'FUTURE_TSID', 'FUTURE_JOB'}, {'TERMS_DETAIL_OR.JOB_TITLE_CODE_2', 'TERMS_DETAIL_OR.MGT_RLTN_END_DATE', 'TERMS_DETAIL_OR.CNTRCT_TERMIN_STS', 'TERMS_DETAIL_OR.Term_Transfer_Status', 'TERMS_DETAIL_OR.FUTURE_TSID', 'TERMS_DETAIL_OR.FUTURE_JOB'}),    #'Changed Type1' = Table.TransformColumnTypes(#'Expanded TERMS_DETAIL_OR',{{'EFF_DT', type date}}),    #'Added Conditional Column' = Table.AddColumn(#'Changed Type1', 'Indicator', each if [TERMS_DETAIL_OR.MGT_RLTN_END_DATE] = null then 'N' else if [TERMS_DETAIL_OR.MGT_RLTN_END_DATE] \u003c [EFF_DT] then 'N' else 'Y'),    #'Filtered Rows1' = Table.SelectRows(#'Added Conditional Column', each ([Indicator] = 'Y')),    #'Removed Columns1' = Table.RemoveColumns(#'Filtered Rows1',{'EFF_DT', 'Indicator'}),    #'Filtered Rows' = Table.SelectRows(#'Removed Columns1', each ([TERMS_DETAIL_OR.MGT_RLTN_END_DATE] \u003c\u003e null)),    #'Added Custom' = Table.AddColumn(#'Filtered Rows', 'FUTURE_JOB_CDE', each if [CORP_EMP_ID_CDE]=[TERMS_DETAIL_OR.FUTURE_TSID] then [TERMS_DETAIL_OR.FUTURE_JOB] else null),    #'Removed Columns' = Table.RemoveColumns(#'Added Custom',{'TERMS_DETAIL_OR.FUTURE_TSID', 'TERMS_DETAIL_OR.FUTURE_JOB'})in    #'Removed Columns'"}]},{"name":"TERMS_DETAIL_OR - Hires","isHidden":false,"storageMode":"Import","columns":[{"name":"Division_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Division_Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"RFO_Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP_ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Zone_ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Zone_Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMPL_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Zone_Leader_Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TITLE_CODE_2","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"JOB_TITLE_NM_2","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MGT_RLTN_END_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"CNTRCT_TERMIN_STS","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Term_Transfer_Status","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ADJ_SVC_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Term_ASD_Tenure","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Term_ASD_Segment","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Term_ASD_byYear","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ASD_with_BI","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Term_ASD_w_BI_Tenure","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Term_ASD_w_BI_Segment","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Term_ASD_w_BI_byYear","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Conference","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Conference_YE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMPL_SEX_CODE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMPL_BIRTH_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Term_Age","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Term_Age_Group","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S6_LIC_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S7_LIC_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S63_LIC_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S65_LIC_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S66_LIC_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"INVS_ADVR_REPR_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S7_65_66","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Cal_Term_Yr","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Cal_Term_Wk","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Prf_Term_Yr","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Prf_Term_Wk","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"FUTURE_TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FUTURE_JOB","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"FUTURE_BEG_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"FUTURE_DIFFERENCE","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DIFFERENCE","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"RAR_CONTRACT_TERM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RAR_CONTRACT_TERM_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"RAR_CONTRACT_TERM_YEAR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"OR_CONTRACT_TERM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"OR_CONTRACT_TERM_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"OR_CONTRACT_TERM_YEAR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"SELL_ASSOC_TERM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SUPT_ASSOC_TERM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ASSOC_TERM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ASSOC_TERM_DATE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ASSOC_TERM_YEAR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SELL_ROLE_TERM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SELL_ROLE_TERM_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"SELL_ROLE_TERM_YEAR","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////vsshr//shared//Public//DI and BI//Leader Effectiveness Ranking Report//TERMS_DETAIL_OR.csv'),[Delimiter=',', Columns=59, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Division_ID', type text}, {'Division_Description', type text}, {'RFO_ID', Int64.Type}, {'RFO_Description', type text}, {'MVP_ID', Int64.Type}, {'Zone_ID', Int64.Type}, {'Zone_Description', type text}, {'TSID', type text}, {'EMPL_NM', type text}, {'Zone_Leader_Name', type text}, {'JOB_TITLE_CODE_2', Int64.Type}, {'JOB_TITLE_NM_2', type text}, {'MGT_RLTN_END_DATE', type date}, {'CNTRCT_TERMIN_STS', Int64.Type}, {'Term_Transfer_Status', type text}, {'ADJ_SVC_DT', type date}, {'Term_ASD_Tenure', type number}, {'Term_ASD_Segment', type text}, {'Term_ASD_byYear', type text}, {'ASD_with_BI', type date}, {'Term_ASD_w_BI_Tenure', type number}, {'Term_ASD_w_BI_Segment', type text}, {'Term_ASD_w_BI_byYear', type text}, {'Conference', type text}, {'Conference_YE', type text}, {'EMPL_SEX_CODE', type text}, {'EMPL_BIRTH_DATE', type date}, {'Term_Age', type number}, {'Term_Age_Group', type text}, {'S6_LIC_STS_CDE', type text}, {'S7_LIC_STS_CDE', type text}, {'S63_LIC_STS_CDE', type text}, {'S65_LIC_STS_CDE', type text}, {'S66_LIC_STS_CDE', type text}, {'INVS_ADVR_REPR_IND', type text}, {'S7_65_66', type text}, {'Cal_Term_Yr', Int64.Type}, {'Cal_Term_Wk', Int64.Type}, {'Prf_Term_Yr', Int64.Type}, {'Prf_Term_Wk', Int64.Type}, {'FUTURE_TSID', type text}, {'FUTURE_JOB', Int64.Type}, {'FUTURE_BEG_DATE', type date}, {'FUTURE_DIFFERENCE', Int64.Type}, {'DIFFERENCE', Int64.Type}, {'RAR_CONTRACT_TERM', type text}, {'RAR_CONTRACT_TERM_DATE', type date}, {'RAR_CONTRACT_TERM_YEAR', Int64.Type}, {'OR_CONTRACT_TERM', type text}, {'OR_CONTRACT_TERM_DATE', type date}, {'OR_CONTRACT_TERM_YEAR', Int64.Type}, {'SELL_ASSOC_TERM', type text}, {'SUPT_ASSOC_TERM', type text}, {'ASSOC_TERM', type text}, {'ASSOC_TERM_DATE', type text}, {'ASSOC_TERM_YEAR', type text}, {'SELL_ROLE_TERM', type text}, {'SELL_ROLE_TERM_DATE', type date}, {'SELL_ROLE_TERM_YEAR', Int64.Type}})in    #'Changed Type'"}]},{"name":"2023_YE_RDL_DATA_w_Capacity_Info","isHidden":false,"storageMode":"Import","columns":[{"name":"CORP_MGR_ID_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MGR_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"HeadCount","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Distinct Count","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"SumRows","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////vsshr//shared//Public//DI and BI//Leader Effectiveness Ranking Report//2023_YE_RDL_DATA_w_Capacity_Info.csv'),[Delimiter=',', Columns=11, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'CORP_MGR_ID_CDE', type text}, {'CORP_EMP_ID_CDE', type text}, {'BEG_DATE', type date}, {'END_DATE', type date}, {'EMP_NM', type text}, {'TSID', type text}, {'EMPL_NM', type text}, {'JOB_TITLE_CODE_2', Int64.Type}, {'ASD_Tenure', type number}, {'ASD_w_BI_byYear', type text}}),    #'Removed Other Columns' = Table.SelectColumns(#'Changed Type',{'CORP_MGR_ID_CDE', 'CORP_EMP_ID_CDE', 'EMP_NM', 'EMPL_NM'}),    #'Labeled Mgr Name' = Table.RenameColumns(#'Removed Other Columns',{{'EMP_NM', 'MGR_NM'}}),    #'Grouped Rows' = Table.Group(#'Labeled Mgr Name', {'CORP_MGR_ID_CDE', 'CORP_EMP_ID_CDE', 'MGR_NM', 'EMPL_NM'}, {{'Count', each Table.RowCount(_), Int64.Type}}),    #'Grouped Rows1' = Table.Group(#'Grouped Rows', {'CORP_MGR_ID_CDE', 'MGR_NM'}, {{'Count', each Table.RowCount(_), Int64.Type}, {'Distinct Count', each Table.RowCount(Table.Distinct(_)), Int64.Type}, {'SumRows', each List.Sum([Count]), type number}}),    #'Renamed Columns' = Table.RenameColumns(#'Grouped Rows1',{{'Count', 'HeadCount'}})in    #'Renamed Columns'"}]},{"name":"2023_YE_RDL_DATA_w_Capacity_Info-Terms","isHidden":false,"storageMode":"Import","columns":[{"name":"CORP_MGR_ID_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MGR_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TermCount","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DistinctCount","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"SumRows","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////vsshr//shared//Public//DI and BI//Leader Effectiveness Ranking Report//2023_YE_RDL_DATA_w_Capacity_Info.csv'),[Delimiter=',', Columns=11, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'CORP_MGR_ID_CDE', type text}, {'CORP_EMP_ID_CDE', type text}, {'BEG_DATE', type date}, {'END_DATE', type date}, {'EMP_NM', type text}, {'TSID', type text}, {'EMPL_NM', type text}, {'JOB_TITLE_CODE_2', Int64.Type}, {'ASD_Tenure', type number}, {'ASD_w_BI_byYear', type text}}),    #'Removed Other Columns' = Table.SelectColumns(#'Changed Type',{'CORP_MGR_ID_CDE', 'CORP_EMP_ID_CDE', 'EMP_NM', 'EMPL_NM','EFF_DT'}),    #'Labeled Mgr Name' = Table.RenameColumns(#'Removed Other Columns',{{'EMP_NM', 'MGR_NM'}}),    #'Grouped Rows' = Table.Group(#'Labeled Mgr Name', {'CORP_MGR_ID_CDE', 'CORP_EMP_ID_CDE', 'MGR_NM', 'EMPL_NM', 'EFF_DT'}, {{'Count', each Table.RowCount(_), Int64.Type}}),    #'Merged Queries' = Table.NestedJoin(#'Grouped Rows', {'CORP_EMP_ID_CDE'}, TERMS_DETAIL_OR, {'TSID'}, 'TERMS_DETAIL_OR', JoinKind.LeftOuter),    #'Expanded TERMS_DETAIL_OR' = Table.ExpandTableColumn(#'Merged Queries', 'TERMS_DETAIL_OR', {'JOB_TITLE_CODE_2', 'MGT_RLTN_END_DATE', 'CNTRCT_TERMIN_STS', 'Term_Transfer_Status', 'FUTURE_TSID', 'FUTURE_JOB'}, {'TERMS_DETAIL_OR.JOB_TITLE_CODE_2', 'TERMS_DETAIL_OR.MGT_RLTN_END_DATE', 'TERMS_DETAIL_OR.CNTRCT_TERMIN_STS', 'TERMS_DETAIL_OR.Term_Transfer_Status', 'TERMS_DETAIL_OR.FUTURE_TSID', 'TERMS_DETAIL_OR.FUTURE_JOB'}),    #'Changed Type1' = Table.TransformColumnTypes(#'Expanded TERMS_DETAIL_OR',{{'EFF_DT', type date}}),    #'Added Conditional Column' = Table.AddColumn(#'Changed Type1', 'Indicator', each if [TERMS_DETAIL_OR.MGT_RLTN_END_DATE] = null then 'N' else if [TERMS_DETAIL_OR.MGT_RLTN_END_DATE] \u003c [EFF_DT] then 'N' else 'Y'),    #'Filtered Rows1' = Table.SelectRows(#'Added Conditional Column', each ([Indicator] = 'Y')),    #'Removed Columns1' = Table.RemoveColumns(#'Filtered Rows1',{'EFF_DT', 'Indicator'}),    #'Filtered Rows' = Table.SelectRows(#'Removed Columns1', each ([TERMS_DETAIL_OR.MGT_RLTN_END_DATE] \u003c\u003e null)),    #'Added Custom' = Table.AddColumn(#'Filtered Rows', 'FUTURE_JOB_CDE', each if [CORP_EMP_ID_CDE]=[TERMS_DETAIL_OR.FUTURE_TSID] then [TERMS_DETAIL_OR.FUTURE_JOB] else null),    #'Removed Columns' = Table.RemoveColumns(#'Added Custom',{'TERMS_DETAIL_OR.FUTURE_TSID', 'TERMS_DETAIL_OR.FUTURE_JOB'}),    #'Grouped Rows1' = Table.Group(#'Removed Columns', {'CORP_MGR_ID_CDE', 'MGR_NM'}, {{'Count', each Table.RowCount(_), Int64.Type}, {'DistinctCount', each Table.RowCount(Table.Distinct(_)), Int64.Type}, {'SumRows', each List.Sum([Count]), type number}}),    #'Renamed Columns' = Table.RenameColumns(#'Grouped Rows1',{{'Count', 'TermCount'}})in    #'Renamed Columns'"}]},{"name":"2023_YE_RDL_DATA_w_Capacity_Info-Terms - To Append","isHidden":false,"storageMode":"Import","columns":[{"name":"CSL TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MGR_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Count","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Hire Terms","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MGT_RLTN_END_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////vsshr//shared//Public//DI and BI//Leader Effectiveness Ranking Report//2023_YE_RDL_DATA_w_Capacity_Info.csv'),[Delimiter=',', Columns=11, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'CORP_MGR_ID_CDE', type text}, {'CORP_EMP_ID_CDE', type text}, {'BEG_DATE', type date}, {'END_DATE', type date}, {'EMP_NM', type text}, {'TSID', type text}, {'EMPL_NM', type text}, {'JOB_TITLE_CODE_2', Int64.Type}, {'ASD_Tenure', type number}, {'ASD_w_BI_byYear', type text}}),    #'Removed Other Columns' = Table.SelectColumns(#'Changed Type',{'CORP_MGR_ID_CDE', 'CORP_EMP_ID_CDE', 'EMP_NM', 'EMPL_NM','EFF_DT'}),    #'Labeled Mgr Name' = Table.RenameColumns(#'Removed Other Columns',{{'EMP_NM', 'MGR_NM'}}),    #'Grouped Rows' = Table.Group(#'Labeled Mgr Name', {'CORP_MGR_ID_CDE', 'CORP_EMP_ID_CDE', 'MGR_NM', 'EMPL_NM', 'EFF_DT'}, {{'Count', each Table.RowCount(_), Int64.Type}}),    #'Merged Queries' = Table.NestedJoin(#'Grouped Rows', {'CORP_EMP_ID_CDE'}, TERMS_DETAIL_OR, {'TSID'}, 'TERMS_DETAIL_OR', JoinKind.LeftOuter),    #'Expanded TERMS_DETAIL_OR' = Table.ExpandTableColumn(#'Merged Queries', 'TERMS_DETAIL_OR', {'JOB_TITLE_CODE_2', 'MGT_RLTN_END_DATE', 'CNTRCT_TERMIN_STS', 'Term_Transfer_Status', 'FUTURE_TSID', 'FUTURE_JOB'}, {'TERMS_DETAIL_OR.JOB_TITLE_CODE_2', 'TERMS_DETAIL_OR.MGT_RLTN_END_DATE', 'TERMS_DETAIL_OR.CNTRCT_TERMIN_STS', 'TERMS_DETAIL_OR.Term_Transfer_Status', 'TERMS_DETAIL_OR.FUTURE_TSID', 'TERMS_DETAIL_OR.FUTURE_JOB'}),    #'Changed Type1' = Table.TransformColumnTypes(#'Expanded TERMS_DETAIL_OR',{{'EFF_DT', type date}}),    #'Added Conditional Column' = Table.AddColumn(#'Changed Type1', 'Indicator', each if [TERMS_DETAIL_OR.MGT_RLTN_END_DATE] = null then 'N' else if [TERMS_DETAIL_OR.MGT_RLTN_END_DATE] \u003c [EFF_DT] then 'N' else 'Y'),    #'Filtered Rows1' = Table.SelectRows(#'Added Conditional Column', each ([Indicator] = 'Y')),    #'Removed Columns2' = Table.RemoveColumns(#'Filtered Rows1',{'EFF_DT', 'Indicator'}),    #'Filtered Rows' = Table.SelectRows(#'Removed Columns2', each ([TERMS_DETAIL_OR.MGT_RLTN_END_DATE] \u003c\u003e null)),    #'Added Custom' = Table.AddColumn(#'Filtered Rows', 'FUTURE_JOB_CDE', each if [CORP_EMP_ID_CDE]=[TERMS_DETAIL_OR.FUTURE_TSID] then [TERMS_DETAIL_OR.FUTURE_JOB] else null),    #'Removed Columns' = Table.RemoveColumns(#'Added Custom',{'TERMS_DETAIL_OR.FUTURE_TSID', 'TERMS_DETAIL_OR.FUTURE_JOB'}),    #'Renamed Columns' = Table.RenameColumns(#'Removed Columns',{{'CORP_MGR_ID_CDE', 'CSL TSID'}}),    #'Reordered Columns' = Table.ReorderColumns(#'Renamed Columns',{'CSL TSID', 'EMPL_NM', 'CORP_EMP_ID_CDE', 'MGR_NM', 'Count', 'TERMS_DETAIL_OR.JOB_TITLE_CODE_2', 'TERMS_DETAIL_OR.MGT_RLTN_END_DATE', 'TERMS_DETAIL_OR.CNTRCT_TERMIN_STS', 'TERMS_DETAIL_OR.Term_Transfer_Status', 'FUTURE_JOB_CDE'}),    #'Renamed Columns1' = Table.RenameColumns(#'Reordered Columns',{{'EMPL_NM', 'Employee Name'}, {'CORP_EMP_ID_CDE', 'TSID'}}),    #'Removed Columns1' = Table.RemoveColumns(#'Renamed Columns1',{'TERMS_DETAIL_OR.JOB_TITLE_CODE_2', 'TERMS_DETAIL_OR.CNTRCT_TERMIN_STS', 'TERMS_DETAIL_OR.Term_Transfer_Status', 'FUTURE_JOB_CDE'}),    #'Added Custom1' = Table.AddColumn(#'Removed Columns1', 'Hire Terms', each 1),    #'Renamed Columns2' = Table.RenameColumns(#'Added Custom1',{{'TERMS_DETAIL_OR.MGT_RLTN_END_DATE', 'MGT_RLTN_END_DATE'}}),    #'Reordered Columns1' = Table.ReorderColumns(#'Renamed Columns2',{'CSL TSID', 'Employee Name', 'TSID', 'MGR_NM', 'MGT_RLTN_END_DATE', 'Count', 'Hire Terms'})in    #'Reordered Columns1'"}]},{"name":"Term List","isHidden":false,"storageMode":"Import","columns":[{"name":"CSL TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Count","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Term Count","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Name(s)","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Term Dates","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////vsshr//shared//Public//DI and BI//Leader Effectiveness Ranking Report//RR_HIRES.csv'),[Delimiter=',', Columns=22, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'JOIN VALUE', type text}, {'Division', type text}, {'RFO', Int64.Type}, {'RFO Name', type text}, {'Market ID', type text}, {'Market Name', type text}, {'Market Leader Name', type text}, {'TSID', type text}, {'Employee Name', type text}, {'Begin Date', type date}, {'Job Code', Int64.Type}, {'Job Name', type text}, {'Hire Status', type text}, {'Previous Job Code', Int64.Type}, {'YTD CCs', Int64.Type}, {'YTD GDCs', Int64.Type}, {'S6 License', type text}, {'S7 License', type text}, {'S63 License', type text}, {'S65 License', type text}, {'S66 License', type text}, {'INVS_ADVR_REPR_IND', type text}}),    #'Renamed Columns' = Table.RenameColumns(#'Changed Type',{{'Begin Date', 'Hire Date'}}),    #'Removed Other Columns' = Table.SelectColumns(#'Renamed Columns',{'Division', 'Employee Name', 'TSID', 'Hire Date', 'Job Code', 'Job Name', 'Market ID', 'Market Leader Name', 'RFO', 'Market Name'}),    #'Appended Query' = Table.Combine({#'Removed Other Columns', #'Non_Standard_Hires'}),    #'Merge for CSL' = Table.NestedJoin(#'Appended Query', {'TSID'}, #'RAR Contracts', {'CORP_EMP_ID_CDE'}, 'RAR Contracts', JoinKind.LeftOuter),    #'Get CSL' = Table.ExpandTableColumn(#'Merge for CSL', 'RAR Contracts', {'Credited Source Leader'}, {'RAR Contracts.Credited Source Leader'}),    #'Merged Queries1' = Table.NestedJoin(#'Get CSL', {'RAR Contracts.Credited Source Leader'}, #'Market Leaders - Backdated', {'Workday Name'}, 'Workday Leader Directory', JoinKind.LeftOuter),    #'Expanded Workday Leader Directory' = Table.ExpandTableColumn(#'Merged Queries1', 'Workday Leader Directory', {'Employee ID', 'Job Code'}, {'Workday Leader Directory.Employee ID', 'Workday Leader Directory.Job Code'}),    #'Renamed Columns3' = Table.RenameColumns(#'Expanded Workday Leader Directory',{{'Workday Leader Directory.Employee ID', 'WLD.Employee ID'}, {'Workday Leader Directory.Job Code', 'WLD.Job Code'}}),    #'Merged Queries' = Table.NestedJoin(#'Renamed Columns3', {'RAR Contracts.Credited Source Leader'}, SR_MKT_DIRS, {'Zone_Leader_Name'}, 'SR_MKT_DIRS', JoinKind.LeftOuter),    #'Expanded SR_MKT_DIRS' = Table.ExpandTableColumn(#'Merged Queries', 'SR_MKT_DIRS', {'Zone_Leader_TSID', 'Market Leader Job Code'}, {'SR_MKT_DIRS.Zone_Leader_TSID', 'SR_MKT_DIRS.Market Leader Job Code'}),    #'Added Custom' = Table.AddColumn(#'Expanded SR_MKT_DIRS', 'Workday Leader Directory.Employee ID', each if [WLD.Employee ID] = null then [SR_MKT_DIRS.Zone_Leader_TSID] else [WLD.Employee ID]),    #'Check here!!!!' = Table.AddColumn(#'Added Custom', 'Workday Leader Directory.Job Code', each if [WLD.Job Code] = null then [SR_MKT_DIRS.Market Leader Job Code] else [WLD.Job Code]),    #'Join on Market w Worker_Status_Fact' = Table.NestedJoin(#'Check here!!!!', {'Market Name'}, #'DIrector List', {'ORZN_ZONE_CDE'}, 'WORKER_STATUS_FCT_DATES', JoinKind.LeftOuter),    #'Expanded WORKER_STATUS_FCT_DATES1' = Table.ExpandTableColumn(#'Join on Market w Worker_Status_Fact', 'WORKER_STATUS_FCT_DATES', {'SRC_SYS_KEY_TXT', 'EMP_NM'}, {'WORKER_STATUS_FCT_DATES.SRC_SYS_KEY_TXT', 'WORKER_STATUS_FCT_DATES.EMP_NM'}),    #'Renamed Columns2' = Table.RenameColumns(#'Expanded WORKER_STATUS_FCT_DATES1',{{'Workday Leader Directory.Employee ID', 'CSL Leader ID'}, {'WORKER_STATUS_FCT_DATES.SRC_SYS_KEY_TXT', 'Market Leader ID'}, {'WORKER_STATUS_FCT_DATES.EMP_NM', 'WORKER_STATUS_FCT_DATES.Market Leader Name'}}),    #'Added Key Leader ID Field' = Table.AddColumn(#'Renamed Columns2', 'Workday Leader Directory.Employee ID', each if ([CSL Leader ID] = null or ([Workday Leader Directory.Job Code] \u003c\u003e 1005 and [Workday Leader Directory.Job Code] \u003c\u003e 1007 and [Workday Leader Directory.Job Code] \u003c\u003e 1004)) then [Market Leader ID] elseif [CSL Leader ID] \u003c\u003e [Market Leader ID] then [CSL Leader ID] else [Market Leader ID]),    #'Renamed Columns1' = Table.RenameColumns(#'Added Key Leader ID Field',{{'Workday Leader Directory.Employee ID', 'CSL TSID'}}),    #'Merged Queries2' = Table.NestedJoin(#'Renamed Columns1', {'TSID'}, #'TERMS_DETAIL_OR - Hires', {'TSID'}, 'TERMS_DETAIL_OR - Hires', JoinKind.LeftOuter),    #'Expanded TERMS_DETAIL_OR - Hires' = Table.ExpandTableColumn(#'Merged Queries2', 'TERMS_DETAIL_OR - Hires', {'TSID', 'EMPL_NM', 'MGT_RLTN_END_DATE'}, {'TERMS_DETAIL_OR - Hires.TSID', 'TERMS_DETAIL_OR - Hires.EMPL_NM', 'TERMS_DETAIL_OR - Hires.MGT_RLTN_END_DATE'}),    #'Added Custom1' = Table.AddColumn(#'Expanded TERMS_DETAIL_OR - Hires', 'Term Ind', each if [#'TERMS_DETAIL_OR - Hires.MGT_RLTN_END_DATE']= null then 0 else (if [#'TERMS_DETAIL_OR - Hires.MGT_RLTN_END_DATE']\u003e[Hire Date] then 1 else 0)),    #'Grouped Rows' = Table.Group(#'Added Custom1', {'Market Name', 'CSL TSID', 'Employee Name', 'TSID', 'TERMS_DETAIL_OR - Hires.MGT_RLTN_END_DATE'}, {{'Count', each Table.RowCount(_), Int64.Type}, {'Hire Terms', each List.Sum([Term Ind]), type number}}),    #'Renamed Columns4' = Table.RenameColumns(#'Grouped Rows',{{'TERMS_DETAIL_OR - Hires.MGT_RLTN_END_DATE', 'MGT_RLTN_END_DATE'}}),    #'Filtered Rows' = Table.SelectRows(#'Renamed Columns4', each [Hire Terms] = 1),    #'Appended Query1' = Table.Combine({#'Filtered Rows', #'2023_YE_RDL_DATA_w_Capacity_Info-Terms - To Append'}),    #'Changed Type1' = Table.TransformColumnTypes(#'Appended Query1',{{'MGT_RLTN_END_DATE', type text}}),    Custom1 = Table.Group(#'Changed Type1', {'CSL TSID'}, {{'Count', each Table.RowCount(_), Int64.Type}, {'Term Count', each List.Sum([Hire Terms]), Int64.Type},{'Name(s)', each Text.Combine([Employee Name], '#(lf)'), type text},{'Term Dates', each Text.Combine([MGT_RLTN_END_DATE], '#(lf)'), type text}}),    #'Capitalized Each Word' = Table.TransformColumns(Custom1,{{'Name(s)', Text.Proper, type text}})in    #'Capitalized Each Word'"}]},{"name":"Advice Adoption - Developer","isHidden":false,"storageMode":"Import","columns":[{"name":"Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Month Ending","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"% Adoption","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Rank","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Leader Effectiveness Ranking Report//Advice Adoption - Developers.xlsx'), null, true),    Export_Sheet = Source{[Item='Sheet1',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Export_Sheet, [PromoteAllScalars=true])in    #'Promoted Headers'"}]}],"configuredBy":"xPowerBi_Prod@thrivent.com","configuredById":"5aab6987-e004-43c0-b69a-09c27972e0f9","isEffectiveIdentityRequired":false,"isEffectiveIdentityRolesRequired":false,"refreshSchedule":{"days":["Monday"],"times":["17:00"],"enabled":true,"localTimeZoneId":"Central Standard Time","notifyOption":"MailOnFailure"},"targetStorageMode":"Abf","createdDate":"2023-12-22T22:15:24.44","contentProviderType":"PbixInImportMode"},{"id":"b44bc155-4a55-4101-a4f2-ce3989d7ee04","name":"Distribution Dashboard 2023 YE","tables":[{"name":"PACE_DD","isHidden":false,"columns":[{"name":"RFO","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Zone_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_MKT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"NFR_Above","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"NFR_Below","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"NFR_Total","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Percent_Above","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"MVP_ID","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Use_Percent_Above","expression":"DIVIDE(sum(PACE_DD[NFR_ABOVE]),sum(PACE_DD[NFR_TOTAL]))","isHidden":false}],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////VSSHR//SHARED//Public//DI and BI//Distribution Dashboard//PACE_DD.CSV'),[Delimiter=',', Columns=8, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'NFR_Above', type number}, {'NFR_Below', type number}, {'NFR_Total', type number}, {'Percent_Above', Percentage.Type}})in    #'Changed Type'"}]},{"name":"Appointments/PC/JFW","isHidden":false,"columns":[{"name":"Worker Appointment Association","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Appointment Dimension Surrogate Key","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Membership Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Appointment Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Appointment Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Adjusted Service Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Employee Status Type Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Historical Job Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FP Tenure - NFP, Vet","dataType":"String","isHidden":false,"expression":"if(not(\u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000', '002010', '002022', '002024', '002025', '002026', '002027', '003100', '003500'}), 'Vet',if(((\u0027Appointments/PC/JFW\u0027[Appointment Date] - \u0027Appointments/PC/JFW\u0027[Adjusted Service Date]) / 365.25) \u003c 4, 'NFP', 'Vet'))","columnType":"Calculated"},{"name":"JFW_IND","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"TSID_Market_Appt","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FP Tenure - NFP 4 Mo","dataType":"String","isHidden":false,"expression":"if(not(\u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000', '002010', '002022', '002024', '002025', '002026', '002027', '003100', '003500'}), 'Vet', if(((\u0027Appointments/PC/JFW\u0027[Appointment Date] - \u0027Appointments/PC/JFW\u0027[Adjusted Service Date]) / 365.25) \u003c 0.3333, 'NFP 4 Mo', 'NA'))","columnType":"Calculated"},{"name":"Leader Role","dataType":"String","isHidden":false,"expression":"if(\u0027Appointments/PC/JFW\u0027[Historical Job Type Code] = '001004', 'RD',if(\u0027Appointments/PC/JFW\u0027[Historical Job Type Code] = '001005', 'RDL', if(\u0027Appointments/PC/JFW\u0027[Historical Job Type Code] = '001007', 'RDD')))","columnType":"Calculated"},{"name":"MVP Group","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FP Tenure - NFP 6 Mo","dataType":"String","isHidden":false,"expression":"if(not(\u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000', '002010', '002022', '002024', '002025', '002026', '002027', '003100', '003500'}), 'Vet', if(((\u0027Appointments/PC/JFW\u0027[Appointment Date] - \u0027Appointments/PC/JFW\u0027[Adjusted Service Date]) / 365.25) \u003c 0.5, 'NFP 6 Mo', 'NA'))","columnType":"Calculated"},{"name":"Appointment Type Code2","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"YTD Appointments","expression":"calculate(DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),\u0027Appointments/PC/JFW\u0027[Worker Appointment Association]='Owner',\u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'},DTRB_PERF_DATES[YTD Flag] in {TRUE})","isHidden":false},{"name":"PYTD Appointments","expression":"CALCULATE(DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),\u0027Appointments/PC/JFW\u0027[Worker Appointment Association]='Owner',\u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'}, DTRB_PERF_DATES[PYTD Flag SF] in {TRUE})","isHidden":false},{"name":"YTD Prospect Connects","expression":"CALCULATE(DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),\u0027Appointments/PC/JFW\u0027[Worker Appointment Association]='Owner',\u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'}, DTRB_PERF_DATES[YTD Flag] in {TRUE},\u0027Appointments/PC/JFW\u0027[Membership Type Code] \u003c\u003e 'BEN', \u0027Appointments/PC/JFW\u0027[Appointment Type Code] = 'Connect')","isHidden":false},{"name":"PYTD Prospect Connects","expression":"CALCULATE(DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),\u0027Appointments/PC/JFW\u0027[Worker Appointment Association]='Owner',\u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002022','002024','002025','002026','002027','002030','002032','003100','003500'}, DTRB_PERF_DATES[PYTD Flag SF] in {TRUE},\u0027Appointments/PC/JFW\u0027[Membership Type Code] \u003c\u003e 'BEN', \u0027Appointments/PC/JFW\u0027[Appointment Type Code] = 'Connect')","isHidden":false},{"name":"PY Appointments","expression":"CALCULATE(DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),\u0027Appointments/PC/JFW\u0027[Worker Appointment Association]='Owner',\u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'}, DTRB_PERF_DATES[Prior Year Flag] in {TRUE})","isHidden":false},{"name":"PY Prospect Connects","expression":"CALCULATE(DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),\u0027Appointments/PC/JFW\u0027[Worker Appointment Association]='Owner',\u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'},DTRB_PERF_DATES[Prior Year Flag] in {TRUE},\u0027Appointments/PC/JFW\u0027[Membership Type Code] \u003c\u003e 'BEN', \u0027Appointments/PC/JFW\u0027[Appointment Type Code] = 'Connect')","isHidden":false},{"name":"PY2 Appointments","expression":"CALCULATE(DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),\u0027Appointments/PC/JFW\u0027[Worker Appointment Association]='Owner',\u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'}, DTRB_PERF_DATES[Prior Year 2 Flag] in {TRUE})","isHidden":false},{"name":"PY2 Prospect Connects","expression":"CALCULATE(DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),\u0027Appointments/PC/JFW\u0027[Worker Appointment Association]='Owner',\u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'},DTRB_PERF_DATES[Prior Year 2 Flag] in {TRUE},\u0027Appointments/PC/JFW\u0027[Membership Type Code] \u003c\u003e 'BEN', \u0027Appointments/PC/JFW\u0027[Appointment Type Code] = 'Connect')","isHidden":false},{"name":"Prior Week Appointments","expression":"CALCULATE(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),     DTRB_PERF_DATES[Prior Week Flag] = 'TRUE',     DTRB_PERF_DATES[Current Year Flag] in {TRUE})","isHidden":false},{"name":"YOY Change Appts","expression":"(\u0027Appointments/PC/JFW\u0027[YTD Appointments] - \u0027Appointments/PC/JFW\u0027[PYTD Appointments])/\u0027Appointments/PC/JFW\u0027[PYTD Appointments]","isHidden":false},{"name":"YOY Change PCs","expression":"(\u0027Appointments/PC/JFW\u0027[YTD Prospect Connects] - \u0027Appointments/PC/JFW\u0027[PYTD Prospect Connects])/\u0027Appointments/PC/JFW\u0027[PYTD Prospect Connects]","isHidden":false},{"name":"Prior Week PCs","expression":"CALCULATE(DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]), \u0027Appointments/PC/JFW\u0027[Membership Type Code] \u003c\u003e 'BEN', \u0027Appointments/PC/JFW\u0027[Appointment Type Code] = 'Connect', DTRB_PERF_DATES[Prior Week Flag] = 'TRUE', DTRB_PERF_DATES[Current Year Flag] in {TRUE})","isHidden":false},{"name":"YTD NFP Prospect Connects","expression":"CALCULATE(DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),\u0027Appointments/PC/JFW\u0027[Worker Appointment Association] = 'Owner',\u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'}, DTRB_PERF_DATES[YTD Flag] in {TRUE},\u0027Appointments/PC/JFW\u0027[Membership Type Code] \u003c\u003e 'BEN', \u0027Appointments/PC/JFW\u0027[Appointment Type Code] = 'Connect', \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = 'NFP')","isHidden":false},{"name":"YTD Leader JFW","expression":"CALCULATE(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    FILTER(\u0027Appointments/PC/JFW\u0027,    \u0027Appointments/PC/JFW\u0027[JFW_IND] = 1 \u0026\u0026     \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'001005','001007','001505'} \u0026\u0026     RELATED(DTRB_PERF_DATES[YTD Flag]) in {TRUE}))","isHidden":false},{"name":"PYTD Leader JFW","expression":"CALCULATE(DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),\u0027Appointments/PC/JFW\u0027[JFW_IND] = 1, \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'001005','001007','001505'},DTRB_PERF_DATES[PYTD Flag SF] in {TRUE})","isHidden":false},{"name":"PY Leader JFW","expression":"CALCULATE (    DISTINCTCOUNT ( \u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key] ),    \u0027Appointments/PC/JFW\u0027[JFW_IND] = 1,    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code]        IN {        '001005',        '001007',        '001505'    },    DTRB_PERF_DATES[Prior Year Flag] IN { TRUE })","isHidden":false},{"name":"PY2 Leader JFW","expression":"CALCULATE(DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),\u0027Appointments/PC/JFW\u0027[JFW_IND] = 1, \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'001005','001007','001505'},DTRB_PERF_DATES[Prior Year 2 Flag] in {TRUE})","isHidden":false},{"name":"YTD Market JFW","expression":"CALCULATE(DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),\u0027Appointments/PC/JFW\u0027[JFW_IND] = 1, \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002019','002020','002021','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'},DTRB_PERF_DATES[YTD Flag] in {TRUE})","isHidden":false},{"name":"PYTD Market JFW","expression":"CALCULATE(DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),\u0027Appointments/PC/JFW\u0027[Worker Appointment Association]='Owner',\u0027Appointments/PC/JFW\u0027[JFW_IND] = 1, \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002019','002020','002021','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'},DTRB_PERF_DATES[PYTD Flag SF] in {TRUE})","isHidden":false},{"name":"PY Market JFW","expression":"CALCULATE (    DISTINCTCOUNT ( \u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key] ),    \u0027Appointments/PC/JFW\u0027[Worker Appointment Association] = 'Owner',    \u0027Appointments/PC/JFW\u0027[JFW_IND] = 1,    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code]        IN {        '002000',        '002003',        '002008',        '002010',        '002011',        '002012',        '002016',        '002019',        '002020',        '002021',        '002024',        '002022',        '002025',        '002026',        '002027',        '002030',        '002031',        '002032',        '003100',        '003500'    },    DTRB_PERF_DATES[Prior Year Flag] IN { TRUE })","isHidden":false},{"name":"PY2 Market JFW","expression":"CALCULATE(DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),\u0027Appointments/PC/JFW\u0027[Worker Appointment Association]='Owner',\u0027Appointments/PC/JFW\u0027[JFW_IND] = 1, \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002019','002020','002021','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'},DTRB_PERF_DATES[Prior Year 2 Flag] in {TRUE})","isHidden":false},{"name":"YOY Change Leader JFW","expression":"(\u0027Appointments/PC/JFW\u0027[YTD Leader JFW]-\u0027Appointments/PC/JFW\u0027[PYTD Leader JFW])/\u0027Appointments/PC/JFW\u0027[PYTD Leader JFW]","isHidden":false},{"name":"YOY Change Market JFW","expression":"(\u0027Appointments/PC/JFW\u0027[YTD Market JFW]-\u0027Appointments/PC/JFW\u0027[PYTD Market JFW])/\u0027Appointments/PC/JFW\u0027[PYTD Market JFW]","isHidden":false},{"name":"4wk Appts per FP","expression":"var MarketChoice = if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]))var RFOChoice = if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]))var RegionChoice = if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]))returnif(ISFILTERED(\u0027RFO_Zone\u0027[Market Leader]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], Capacity[YTD Capacity TOTAL]), \u0027Capacity\u0027[RFO_Mkt]= MarketChoice,\u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True}, DTRB_PERF_DATES[Current Year Flag] in {TRUE}),if(ISFILTERED(\u0027RFO_Zone\u0027[RFO Name]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], Capacity[YTD Capacity TOTAL]), \u0027Capacity\u0027[RFO_ID]= RFOChoice,\u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True}, DTRB_PERF_DATES[Current Year Flag] in {TRUE}),if(ISFILTERED(\u0027RFO_Zone\u0027[Channel]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], Capacity[YTD Capacity TOTAL]), Capacity[Channel]= ChannelChoice, \u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True},DTRB_PERF_DATES[Current Year Flag] in {TRUE}),if(ISFILTERED(\u0027RFO_Zone\u0027[Division]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], Capacity[YTD Capacity TOTAL]), \u0027Capacity\u0027[Division]= DivisionChoice, \u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True},DTRB_PERF_DATES[Current Year Flag] in {TRUE}),if(ISFILTERED(\u0027RFO_Zone\u0027[Region]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], Capacity[YTD Capacity TOTAL]), \u0027Capacity\u0027[Region]= RegionChoice, \u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True},DTRB_PERF_DATES[Current Year Flag] in {TRUE}),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], Capacity[YTD Capacity TOTAL]), \u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True},DTRB_PERF_DATES[Current Year Flag] in {TRUE}))))))","isHidden":false},{"name":"FP Appointments","expression":"calculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[TSID_Market_Appt]),    FILTER(\u0027Appointments/PC/JFW\u0027,    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002010','002022','002024','002025','002026','002027','003100','003500'}))","isHidden":false},{"name":"52wk Appts per FP","expression":"var RFOChoice = if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]))var RegionChoice = if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]))returnif(ISFILTERED(\u0027RFO_Zone\u0027[RFO Name]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_ID]= RFOChoice, \u0027DTRB_PERF_DATES\u0027[Prior 52 Weeks Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Channel]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Channel]= ChannelChoice, \u0027DTRB_PERF_DATES\u0027[Prior 52 Weeks Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Division]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Division]= DivisionChoice, \u0027DTRB_PERF_DATES\u0027[Prior 52 Weeks Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Region]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Region]= RegionChoice, \u0027DTRB_PERF_DATES\u0027[Prior 52 Weeks Flag] in {True})))))","isHidden":false},{"name":"FP Prospect Connects","expression":"CALCULATE(DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[TSID_Market_Appt]),\u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002010','002022','002024','002025','002026','002027','003100','003500'},\u0027Appointments/PC/JFW\u0027[Membership Type Code] \u003c\u003e 'BEN', \u0027Appointments/PC/JFW\u0027[Appointment Type Code] = 'Connect')","isHidden":false},{"name":"4wk PCs per FP","expression":"var MarketChoice = if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]))var RFOChoice = if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]))var RegionChoice = if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]))returnif(ISFILTERED(\u0027RFO_Zone\u0027[Market Leader]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], Capacity[YTD Capacity TOTAL]), \u0027Capacity\u0027[RFO_Mkt]= MarketChoice, \u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True},DTRB_PERF_DATES[Current Year Flag] in {TRUE}),if(ISFILTERED(\u0027RFO_Zone\u0027[RFO Name]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], Capacity[YTD Capacity TOTAL]), \u0027Capacity\u0027[RFO_ID]= RFOChoice, \u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True},DTRB_PERF_DATES[Current Year Flag] in {TRUE}),if(ISFILTERED(\u0027RFO_Zone\u0027[Channel]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], Capacity[YTD Capacity TOTAL]), \u0027Capacity\u0027[Channel]= ChannelChoice, \u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True},DTRB_PERF_DATES[Current Year Flag] in {TRUE}),if(ISFILTERED(\u0027RFO_Zone\u0027[Division]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], Capacity[YTD Capacity TOTAL]), \u0027Capacity\u0027[Division]= DivisionChoice, \u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True},DTRB_PERF_DATES[Current Year Flag] in {TRUE}),if(ISFILTERED(\u0027RFO_Zone\u0027[Region]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], Capacity[YTD Capacity TOTAL]), \u0027Capacity\u0027[Region]= RegionChoice, \u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True},DTRB_PERF_DATES[Current Year Flag] in {TRUE}),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], Capacity[YTD Capacity TOTAL]), \u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True},DTRB_PERF_DATES[Current Year Flag] in {TRUE}))))))","isHidden":false},{"name":"52wk PCs per FP","expression":"var RFOChoice = if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]))var RegionChoice = if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]))returnif(ISFILTERED(\u0027RFO_Zone\u0027[RFO Name]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_ID]= RFOChoice, \u0027DTRB_PERF_DATES\u0027[Prior 52 Weeks Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Channel]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Channel]= ChannelChoice, \u0027DTRB_PERF_DATES\u0027[Prior 52 Weeks Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Division]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Division]= DivisionChoice, \u0027DTRB_PERF_DATES\u0027[Prior 52 Weeks Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Region]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Region]= RegionChoice, \u0027DTRB_PERF_DATES\u0027[Prior 52 Weeks Flag] in {True})))))","isHidden":false},{"name":"YTD Appts per FP","expression":"var MarketChoice = if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]))var RFOChoice = if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]))var RegionChoice = if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]))returnif(ISFILTERED(\u0027RFO_Zone\u0027[Market Leader]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], Capacity[YTD Capacity TOTAL]), \u0027Capacity\u0027[RFO_Mkt]= MarketChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[RFO Name]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], Capacity[YTD Capacity TOTAL]), \u0027Capacity\u0027[RFO_ID]= RFOChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Channel]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], Capacity[YTD Capacity TOTAL]), \u0027Capacity\u0027[Channel]= ChannelChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Division]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], Capacity[YTD Capacity TOTAL]), \u0027Capacity\u0027[Division]= DivisionChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Region]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], Capacity[YTD Capacity TOTAL]), \u0027Capacity\u0027[Region]= RegionChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], Capacity[YTD Capacity TOTAL]), \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}))))))","isHidden":false},{"name":"4 Wk NFP Appts/NFP","expression":"var MarketChoice = if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]))var RFOChoice = if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]))var RegionChoice = if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]))returnif(ISFILTERED(\u0027RFO_Zone\u0027[Market Leader]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_Mkt]= MarketChoice, \u0027Capacity\u0027[Type] in {'NFR','Red Role'}, \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True},DTRB_PERF_DATES[Current Year Flag] in {TRUE}),if(ISFILTERED(\u0027RFO_Zone\u0027[RFO Name]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_ID]= RFOChoice, \u0027Capacity\u0027[Type] in {'NFR','Red Role'}, \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True},DTRB_PERF_DATES[Current Year Flag] in {TRUE}),if(ISFILTERED(\u0027RFO_Zone\u0027[Channel]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Channel]= ChannelChoice, \u0027Capacity\u0027[Type] in {'NFR','Red Role'}, \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True},DTRB_PERF_DATES[Current Year Flag] in {TRUE}),if(ISFILTERED(\u0027RFO_Zone\u0027[Division]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Division]= DivisionChoice, \u0027Capacity\u0027[Type] in {'NFR','Red Role'}, \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True},DTRB_PERF_DATES[Current Year Flag] in {TRUE}),if(ISFILTERED(\u0027RFO_Zone\u0027[Region]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Region]= RegionChoice, \u0027Capacity\u0027[Type] in {'NFR','Red Role'}, \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True},DTRB_PERF_DATES[Current Year Flag] in {TRUE}))))))","isHidden":false},{"name":"52 Wk NFP Appts/NFP","expression":"var RFOChoice = if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]))var RegionChoice = if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]))returnif(ISFILTERED(\u0027RFO_Zone\u0027[RFO Name]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_ID]= RFOChoice, \u0027Capacity\u0027[Type]= 'NFR', \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[Prior 52 Weeks Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Channel]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Channel]= ChannelChoice, \u0027Capacity\u0027[Type]= 'NFR', \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[Prior 52 Weeks Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Division]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Division]= DivisionChoice, \u0027Capacity\u0027[Type]= 'NFR', \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[Prior 52 Weeks Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Region]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Region]= RegionChoice, \u0027Capacity\u0027[Type]= 'NFR', \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[Prior 52 Weeks Flag] in {True})))))","isHidden":false},{"name":"YTD NFP Appts/NFP","expression":"var MarketChoice = if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]))var RFOChoice = if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]))var RegionChoice = if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]))returnif(ISFILTERED(\u0027RFO_Zone\u0027[Market Leader]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_Mkt]= MarketChoice, \u0027Capacity\u0027[Type] in {'NFR','Red Role'}, \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[RFO Name]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_ID]= RFOChoice, \u0027Capacity\u0027[Type] in {'NFR','Red Role'}, \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Channel]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Channel]= ChannelChoice, \u0027Capacity\u0027[Type] in {'NFR','Red Role'}, \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Division]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Division]= DivisionChoice, \u0027Capacity\u0027[Type] in {'NFR','Red Role'}, \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Region]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Region]= RegionChoice, \u0027Capacity\u0027[Type] in {'NFR','Red Role'}, \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}))))) )","isHidden":false},{"name":"PYTD Appts per FP","expression":"var RFOChoice = if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]))var RegionChoice = if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]))returnif(ISFILTERED(\u0027RFO_Zone\u0027[RFO Name]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_ID]= RFOChoice, \u0027DTRB_PERF_DATES\u0027[PYTD Flag SF] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Channel]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Channel]= ChannelChoice, \u0027DTRB_PERF_DATES\u0027[PYTD Flag SF] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Division]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Division]= DivisionChoice, \u0027DTRB_PERF_DATES\u0027[PYTD Flag SF] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Region]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Region]= RegionChoice, \u0027DTRB_PERF_DATES\u0027[PYTD Flag SF] in {True})))))","isHidden":false},{"name":"YOY Change Appts/FP","expression":"(\u0027Appointments/PC/JFW\u0027[YTD Appts per FP] - \u0027Appointments/PC/JFW\u0027[PYTD Appts per FP])/\u0027Appointments/PC/JFW\u0027[PYTD Appts per FP]","isHidden":false},{"name":"PYTD NFP Appts/NFP","expression":"var RFOChoice = if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]))var RegionChoice = if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]))returnif(ISFILTERED(\u0027RFO_Zone\u0027[RFO Name]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_ID]= RFOChoice, \u0027Capacity\u0027[Type]= 'NFR', \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[PYTD Flag SF] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Channel]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Channel]= ChannelChoice, \u0027Capacity\u0027[Type]= 'NFR', \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[PYTD Flag SF] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Division]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Division]= DivisionChoice, \u0027Capacity\u0027[Type]= 'NFR', \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[PYTD Flag SF] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Region]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Region]= RegionChoice, \u0027Capacity\u0027[Type]= 'NFR', \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[PYTD Flag SF] in {True}))))) ","isHidden":false},{"name":"YOY Change NFP Appts/NFP","expression":"(\u0027Appointments/PC/JFW\u0027[YTD NFP Appts/NFP] - \u0027Appointments/PC/JFW\u0027[PYTD NFP Appts/NFP])/\u0027Appointments/PC/JFW\u0027[PYTD NFP Appts/NFP]","isHidden":false},{"name":"PYTD NFP Prospect Connects","expression":"CALCULATE(DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),\u0027Appointments/PC/JFW\u0027[Worker Appointment Association] = 'Owner',\u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'}, DTRB_PERF_DATES[PYTD Flag SF] in {TRUE},\u0027Appointments/PC/JFW\u0027[Membership Type Code] \u003c\u003e 'BEN', \u0027Appointments/PC/JFW\u0027[Appointment Type Code] = 'Connect', \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = 'NFP')","isHidden":false},{"name":"YOY Change NFP PCs","expression":"(\u0027Appointments/PC/JFW\u0027[YTD NFP Prospect Connects] - \u0027Appointments/PC/JFW\u0027[PYTD NFP Prospect Connects])/\u0027Appointments/PC/JFW\u0027[PYTD NFP Prospect Connects]","isHidden":false},{"name":"YTD Vet Prospect Connects","expression":"CALCULATE(DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),\u0027Appointments/PC/JFW\u0027[Worker Appointment Association] = 'Owner',\u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'}, DTRB_PERF_DATES[YTD Flag] in {TRUE},\u0027Appointments/PC/JFW\u0027[Membership Type Code] \u003c\u003e 'BEN', \u0027Appointments/PC/JFW\u0027[Appointment Type Code] = 'Connect', \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = 'Vet')","isHidden":false},{"name":"YOY Change Vet PCs","expression":"(\u0027Appointments/PC/JFW\u0027[YTD PCs per VET] - \u0027Appointments/PC/JFW\u0027[PYTD PCs per VET])/\u0027Appointments/PC/JFW\u0027[PYTD PCs per VET]","isHidden":false},{"name":"YTD PCs per FP","expression":"var RFOChoice = if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]))var RegionChoice = if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]))returnif(ISFILTERED(\u0027RFO_Zone\u0027[RFO Name]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], Capacity[YTD Capacity TOTAL]), \u0027Capacity\u0027[RFO_ID]= RFOChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Channel]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], Capacity[YTD Capacity TOTAL]), \u0027Capacity\u0027[Channel]= ChannelChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Division]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], Capacity[YTD Capacity TOTAL]), \u0027Capacity\u0027[Division]= DivisionChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Region]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], Capacity[YTD Capacity TOTAL]), \u0027Capacity\u0027[Region]= RegionChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], Capacity[YTD Capacity TOTAL]), \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True})))))","isHidden":false},{"name":"PYTD Vet Prospect Connects","expression":"\u0027Appointments/PC/JFW\u0027[PYTD Prospect Connects]-\u0027Appointments/PC/JFW\u0027[PYTD NFP Prospect Connects]","isHidden":false},{"name":"Appts 4 Wk Average","expression":"CALCULATE(divide(\u0027Appointments/PC/JFW\u0027[YTD Appointments],4),\u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {TRUE},DTRB_PERF_DATES[Current Year Flag] in {TRUE})","isHidden":false},{"name":"Appts Curr Week","expression":"CALCULATE(\u0027Appointments/PC/JFW\u0027[YTD Appointments],\u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'TRUE')","isHidden":false},{"name":"Appts YTD Wk Average","expression":"CALCULATE(divide(\u0027Appointments/PC/JFW\u0027[YTD Appointments],max(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR])),\u0027DTRB_PERF_DATES\u0027[YTD Flag] in {TRUE})","isHidden":false},{"name":"Currwk Appts per FP","expression":"var MarketChoice = if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]))var RFOChoice = if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]))var RegionChoice = if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]))returnif(ISFILTERED(\u0027RFO_Zone\u0027[Market Leader]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_Mkt]= MarketChoice,\u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'True', \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT]='CURRENT'),if(ISFILTERED(\u0027RFO_Zone\u0027[RFO Name]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_ID]= RFOChoice,\u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'True', \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT]='CURRENT'),if(ISFILTERED(\u0027RFO_Zone\u0027[Channel]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), Capacity[Channel]= ChannelChoice, \u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'True', \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT]='CURRENT'),if(ISFILTERED(\u0027RFO_Zone\u0027[Division]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Division]= DivisionChoice, \u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'True', \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT]='CURRENT'),if(ISFILTERED(\u0027RFO_Zone\u0027[Region]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Region]= RegionChoice, \u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'True', \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT]='CURRENT'))))))","isHidden":false},{"name":"Curr Wk NFP Appts/NFP","expression":"var MarketChoice = if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]))var RFOChoice = if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]))var RegionChoice = if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]))returnif(ISFILTERED(\u0027RFO_Zone\u0027[Market Leader]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_Mkt]= MarketChoice, \u0027Capacity\u0027[Type] in {'NFR','Red Role'}, \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'True', \u0027DTRB_PERF_DATES\u0027[Current Year Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[RFO Name]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_ID]= RFOChoice, \u0027Capacity\u0027[Type] in {'NFR','Red Role'}, \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'True', \u0027DTRB_PERF_DATES\u0027[Current Year Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Channel]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Channel]= ChannelChoice, \u0027Capacity\u0027[Type] in {'NFR','Red Role'}, \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'True', \u0027DTRB_PERF_DATES\u0027[Current Year Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Division]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Division]= DivisionChoice, \u0027Capacity\u0027[Type] in {'NFR','Red Role'}, \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'True', \u0027DTRB_PERF_DATES\u0027[Current Year Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Region]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Appointments], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Region]= RegionChoice, \u0027Capacity\u0027[Type] in {'NFR','Red Role'}, \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'True', \u0027DTRB_PERF_DATES\u0027[Current Year Flag] in {True}))))))","isHidden":false},{"name":"PC 4 Wk Average","expression":"CALCULATE(divide(\u0027Appointments/PC/JFW\u0027[YTD Prospect Connects],4),\u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {TRUE},DTRB_PERF_DATES[Current Year Flag] in {TRUE})","isHidden":false},{"name":"PC YTD Wk Average","expression":"CALCULATE(divide(\u0027Appointments/PC/JFW\u0027[YTD Prospect Connects],max(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR])),\u0027DTRB_PERF_DATES\u0027[YTD Flag] in {TRUE})","isHidden":false},{"name":"PC Curr Week","expression":"CALCULATE(\u0027Appointments/PC/JFW\u0027[YTD Prospect Connects],\u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'TRUE', \u0027DTRB_PERF_DATES\u0027[Current Year Flag] in {True})","isHidden":false},{"name":"NFP PC 4 Wk Average","expression":"CALCULATE(divide(\u0027Appointments/PC/JFW\u0027[YTD NFP Prospect Connects],4),\u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {TRUE},DTRB_PERF_DATES[Current Year Flag] in {TRUE})","isHidden":false},{"name":"NFP PC Curr Week","expression":"CALCULATE(\u0027Appointments/PC/JFW\u0027[YTD NFP Prospect Connects],\u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'TRUE')","isHidden":false},{"name":"NFP PC YTD Wk Average","expression":"CALCULATE(divide(\u0027Appointments/PC/JFW\u0027[YTD NFP Prospect Connects],max(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR])),\u0027DTRB_PERF_DATES\u0027[YTD Flag] in {TRUE})","isHidden":false},{"name":"Leader JFW 4 Wk Average","expression":"CALCULATE(divide(\u0027Appointments/PC/JFW\u0027[YTD Leader JFW],4),\u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {TRUE},DTRB_PERF_DATES[Current Year Flag] in {TRUE})","isHidden":false},{"name":"Market JFW 4 Wk Average","expression":"CALCULATE(divide(\u0027Appointments/PC/JFW\u0027[YTD Market JFW],4),\u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {TRUE})","isHidden":false},{"name":"Market JFW Curr Week","expression":"CALCULATE(\u0027Appointments/PC/JFW\u0027[YTD Market JFW],\u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'TRUE')","isHidden":false},{"name":"Leader JFW Curr Week","expression":"CALCULATE(\u0027Appointments/PC/JFW\u0027[YTD Leader JFW],\u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'TRUE')","isHidden":false},{"name":"Leader JFW YTD Wk Average","expression":"CALCULATE(divide(\u0027Appointments/PC/JFW\u0027[YTD Leader JFW],max(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR])),\u0027DTRB_PERF_DATES\u0027[YTD Flag] in {TRUE})","isHidden":false},{"name":"Market JFW YTD Wk Average","expression":"CALCULATE(divide(\u0027Appointments/PC/JFW\u0027[YTD Market JFW],max(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR])),\u0027DTRB_PERF_DATES\u0027[YTD Flag] in {TRUE})","isHidden":false},{"name":"NFP 4 Mo JFW Cov - L30","expression":"CALCULATE(          divide([YTD Market JFW FP],[YTD Appointments]),          \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP 4 Mo] = 'NFP 4 Mo',          \u0027DTRB_PERF_DATES\u0027[Prior 30 days Flag] in {TRUE},          \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002010','002022','002025','002026','002027','003100','003500'})","isHidden":false},{"name":"NFP 4 Mo JFW Cov - N14","expression":"CALCULATE(          divide([N14 Market JFW],[N14 Appointments]),          \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP 4 Mo] = 'NFP 4 Mo',          \u0027DTRB_PERF_DATES\u0027[Next 14 days Flag] in {TRUE},          \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002010','002022','002025','002026','002027','003100','003500'})","isHidden":false},{"name":"N14 Appointments","expression":"calculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    \u0027Appointments/PC/JFW\u0027[Worker Appointment Association] = 'Owner',    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002010','002025','002026','002027','003100','003500'},    DTRB_PERF_DATES[Next 14 days Flag] in {TRUE})","isHidden":false},{"name":"N14 Market JFW","expression":"CALCULATE(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    \u0027Appointments/PC/JFW\u0027[Worker Appointment Association] = 'Owner',    \u0027Appointments/PC/JFW\u0027[JFW_IND] = 1,    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002010','002022','002025','002026','002027','003100','003500'},    DTRB_PERF_DATES[Next 14 days Flag] in {TRUE})","isHidden":false},{"name":"4 Wk Leader JFW/Ldr","expression":"var RFOChoice = if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]))var RegionChoice = if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]))returnif(ISFILTERED(\u0027RFO_Zone\u0027[RFO Name]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[YTD Leader JFW], SUM(WMFC_DD[WMFC])), \u0027Capacity\u0027[RFO_ID]= RFOChoice, WMFC_DD[Category]='Field Leader', \u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True},DTRB_PERF_DATES[Current Year Flag] in {TRUE}),if(ISFILTERED(\u0027RFO_Zone\u0027[Channel]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[YTD Leader JFW], SUM(WMFC_DD[WMFC])), \u0027Capacity\u0027[Channel]= ChannelChoice, WMFC_DD[Category]='Field Leader', \u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True},DTRB_PERF_DATES[Current Year Flag] in {TRUE}),if(ISFILTERED(\u0027RFO_Zone\u0027[Division]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[YTD Leader JFW], SUM(WMFC_DD[WMFC])), \u0027Capacity\u0027[Division]= DivisionChoice, WMFC_DD[Category]='Field Leader', \u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True},DTRB_PERF_DATES[Current Year Flag] in {TRUE}),if(ISFILTERED(\u0027RFO_Zone\u0027[Region]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[YTD Leader JFW], SUM(WMFC_DD[WMFC])), \u0027Capacity\u0027[Region]= RegionChoice, WMFC_DD[Category]='Field Leader', \u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True},DTRB_PERF_DATES[Current Year Flag] in {TRUE})))))","isHidden":false},{"name":"YTD Wk Leader JFW/Ldr","expression":"var MarketChoice = if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]))var RFOChoice = if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]))var RegionChoice = if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]))returnif(ISFILTERED(\u0027RFO_Zone\u0027[Market Leader]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[YTD Leader JFW], SUM(WMFC_DD[WMFC])), \u0027Capacity\u0027[RFO_Mkt]= MarketChoice, WMFC_DD[Category]='Field Leader', \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[RFO Name]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[YTD Leader JFW], SUM(WMFC_DD[WMFC])), \u0027Capacity\u0027[RFO_ID]= RFOChoice, WMFC_DD[Category]='Field Leader', \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Channel]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[YTD Leader JFW], SUM(WMFC_DD[WMFC])), \u0027Capacity\u0027[Channel]= ChannelChoice, WMFC_DD[Category]='Field Leader', \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Division]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[YTD Leader JFW], SUM(WMFC_DD[WMFC])), \u0027Capacity\u0027[Division]= DivisionChoice, WMFC_DD[Category]='Field Leader', \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Region]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[YTD Leader JFW], SUM(WMFC_DD[WMFC])), \u0027Capacity\u0027[Region]= RegionChoice, WMFC_DD[Category]='Field Leader', \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}))))))","isHidden":false},{"name":"Curr Wk Leader JFW/Ldr","expression":"var RFOChoice = if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]))var RegionChoice = if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]))returnif(ISFILTERED(\u0027RFO_Zone\u0027[RFO Name]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[YTD Leader JFW], SUM(WMFC_DD[WMFC])), \u0027Capacity\u0027[RFO_ID]= RFOChoice, WMFC_DD[Category]='Field Leader', \u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'True', DTRB_PERF_DATES[Current Year Flag] in {TRUE}),if(ISFILTERED(\u0027RFO_Zone\u0027[Channel]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[YTD Leader JFW], SUM(WMFC_DD[WMFC])), \u0027Capacity\u0027[Channel]= ChannelChoice, WMFC_DD[Category]='Field Leader', \u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'True', DTRB_PERF_DATES[Current Year Flag] in {TRUE}),if(ISFILTERED(\u0027RFO_Zone\u0027[Division]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[YTD Leader JFW], SUM(WMFC_DD[WMFC])), \u0027Capacity\u0027[Division]= DivisionChoice, WMFC_DD[Category]='Field Leader', \u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'True', DTRB_PERF_DATES[Current Year Flag] in {TRUE}),if(ISFILTERED(\u0027RFO_Zone\u0027[Region]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[YTD Leader JFW], SUM(WMFC_DD[WMFC])), \u0027Capacity\u0027[Region]= RegionChoice, WMFC_DD[Category]='Field Leader', \u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'True', DTRB_PERF_DATES[Current Year Flag] in {TRUE})))))","isHidden":false},{"name":"PYTD Wk Leader JFW/Ldr","expression":"var RFOChoice = if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]))var RegionChoice = if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]))returnif(ISFILTERED(\u0027RFO_Zone\u0027[RFO Name]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[PYTD Leader JFW], SUM(WMFC_DD[WMFC])), \u0027Capacity\u0027[RFO_ID]= RFOChoice, WMFC_DD[Category]='Field Leader', \u0027DTRB_PERF_DATES\u0027[PYTD Flag SF] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Channel]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[PYTD Leader JFW], SUM(WMFC_DD[WMFC])), \u0027Capacity\u0027[Channel]= ChannelChoice, WMFC_DD[Category]='Field Leader', \u0027DTRB_PERF_DATES\u0027[PYTD Flag SF] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Division]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[PYTD Leader JFW], SUM(WMFC_DD[WMFC])), \u0027Capacity\u0027[Division]= DivisionChoice, WMFC_DD[Category]='Field Leader', \u0027DTRB_PERF_DATES\u0027[PYTD Flag SF] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Region]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[PYTD Leader JFW], SUM(WMFC_DD[WMFC])), \u0027Capacity\u0027[Region]= RegionChoice, WMFC_DD[Category]='Field Leader', \u0027DTRB_PERF_DATES\u0027[PYTD Flag SF] in {True})))))","isHidden":false},{"name":"YOY Change Leader JFW per Leader","expression":"divide(\u0027Appointments/PC/JFW\u0027[YTD Wk Leader JFW/Ldr] - \u0027Appointments/PC/JFW\u0027[PYTD Wk Leader JFW/Ldr],\u0027Appointments/PC/JFW\u0027[PYTD Wk Leader JFW/Ldr])","isHidden":false},{"name":"test YTD Leader JFW","expression":"CALCULATE(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    FILTER(\u0027Appointments/PC/JFW\u0027,    \u0027Appointments/PC/JFW\u0027[JFW_IND] = 1 \u0026\u0026     \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'001000','001001','001002','001003','001004','001005','001006','001007','001011'} \u0026\u0026     RELATED(DTRB_PERF_DATES[YTD Flag]) in {TRUE}))","isHidden":false},{"name":"YTD PCs per NFP","expression":"var MarketChoice = if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code])) var RFOChoice = if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]))var RegionChoice = if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]))returnif(ISFILTERED(\u0027RFO_Zone\u0027[Market Leader]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_Mkt]= MarketChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True},\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = 'NFP',Capacity[Type] in {'NFR', 'Red Role'}),if(ISFILTERED(\u0027RFO_Zone\u0027[RFO Name]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_ID]= RFOChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True},\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = 'NFP',Capacity[Type] in {'NFR', 'Red Role'}),if(ISFILTERED(\u0027RFO_Zone\u0027[Channel]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Channel]= ChannelChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True},\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = 'NFP',Capacity[Type] in {'NFR', 'Red Role'}),if(ISFILTERED(\u0027RFO_Zone\u0027[Division]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Division]= DivisionChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True},\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = 'NFP',Capacity[Type] in {'NFR', 'Red Role'}),if(ISFILTERED(\u0027RFO_Zone\u0027[Region]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Region]= RegionChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True},\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = 'NFP',Capacity[Type] in {'NFR', 'Red Role'}))))))","isHidden":false},{"name":"YTD PCs per VET","expression":"var MarketChoice = if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]))var RFOChoice = if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]))var RegionChoice = if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]))returnif(ISFILTERED(\u0027RFO_Zone\u0027[Market Leader]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_Mkt]= MarketChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True},\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = 'Vet',Capacity[Type] in {'VET'}),if(ISFILTERED(\u0027RFO_Zone\u0027[RFO Name]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_ID]= RFOChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True},\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = 'Vet',Capacity[Type] in {'VET'}),if(ISFILTERED(\u0027RFO_Zone\u0027[Channel]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Channel]= ChannelChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True},\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = 'Vet',Capacity[Type] in {'VET'}),if(ISFILTERED(\u0027RFO_Zone\u0027[Division]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Division]= DivisionChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True},\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = 'Vet',Capacity[Type] in {'VET'}),if(ISFILTERED(\u0027RFO_Zone\u0027[Region]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Region]= RegionChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True},\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = 'Vet',Capacity[Type] in {'VET'}))))))","isHidden":false},{"name":"PYTD PCs per NFP","expression":"var RFOChoice = if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]))var RegionChoice = if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]))returnif(ISFILTERED(\u0027RFO_Zone\u0027[RFO Name]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_ID]= RFOChoice, \u0027DTRB_PERF_DATES\u0027[PYTD Flag SF] in {True},\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = 'NFP',Capacity[Type] in {'NFR', 'Red Role'}),if(ISFILTERED(\u0027RFO_Zone\u0027[Channel]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Channel]= ChannelChoice, \u0027DTRB_PERF_DATES\u0027[PYTD Flag SF] in {True},\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = 'NFP',Capacity[Type] in {'NFR', 'Red Role'}),if(ISFILTERED(\u0027RFO_Zone\u0027[Division]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Division]= DivisionChoice, \u0027DTRB_PERF_DATES\u0027[PYTD Flag SF] in {True},\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = 'NFP',Capacity[Type] in {'NFR', 'Red Role'}),if(ISFILTERED(\u0027RFO_Zone\u0027[Region]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Region]= RegionChoice, \u0027DTRB_PERF_DATES\u0027[PYTD Flag SF] in {True},\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = 'NFP',Capacity[Type] in {'NFR', 'Red Role'})))))","isHidden":false},{"name":"PYTD PCs per VET","expression":"var RFOChoice = if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]))var RegionChoice = if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]))returnif(ISFILTERED(\u0027RFO_Zone\u0027[RFO Name]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_ID]= RFOChoice, \u0027DTRB_PERF_DATES\u0027[PYTD Flag SF] in {True},\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = 'Vet',Capacity[Type] in {'VET'}),if(ISFILTERED(\u0027RFO_Zone\u0027[Channel]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Channel]= ChannelChoice, \u0027DTRB_PERF_DATES\u0027[PYTD Flag SF] in {True},\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = 'Vet',Capacity[Type] in {'VET'}),if(ISFILTERED(\u0027RFO_Zone\u0027[Division]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Division]= DivisionChoice, \u0027DTRB_PERF_DATES\u0027[PYTD Flag SF] in {True},\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = 'Vet',Capacity[Type] in {'VET'}),if(ISFILTERED(\u0027RFO_Zone\u0027[Region]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Region]= RegionChoice, \u0027DTRB_PERF_DATES\u0027[PYTD Flag SF] in {True},\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = 'Vet',Capacity[Type] in {'VET'})))))","isHidden":false},{"name":"4 wk PCs per NFP1","expression":"var MarketChoice = if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]))var RFOChoice = if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]))var RegionChoice = if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]))returnif(ISFILTERED(\u0027RFO_Zone\u0027[Market Leader]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_Mkt]= MarketChoice, \u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True},DTRB_PERF_DATES[Current Year Flag] in {TRUE},\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = 'NFP',Capacity[Type] in {'NFR', 'Red Role'}),if(ISFILTERED(\u0027RFO_Zone\u0027[RFO Name]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_ID]= RFOChoice, \u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True},DTRB_PERF_DATES[Current Year Flag] in {TRUE},\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = 'NFP',Capacity[Type] in {'NFR', 'Red Role'}),if(ISFILTERED(\u0027RFO_Zone\u0027[Channel]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Channel]= ChannelChoice, \u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True},DTRB_PERF_DATES[Current Year Flag] in {TRUE},\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = 'NFP',Capacity[Type] in {'NFR', 'Red Role'}),if(ISFILTERED(\u0027RFO_Zone\u0027[Division]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Division]= DivisionChoice, \u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True},DTRB_PERF_DATES[Current Year Flag] in {TRUE},\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = 'NFP',Capacity[Type] in {'NFR', 'Red Role'}),if(ISFILTERED(\u0027RFO_Zone\u0027[Region]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Region]= RegionChoice, \u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True},DTRB_PERF_DATES[Current Year Flag] in {TRUE},\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet] = 'NFP',Capacity[Type] in {'NFR', 'Red Role'}))))))","isHidden":false},{"name":"Curr Wk NFP PCs/NFP","expression":"var MarketChoice = if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]))var RFOChoice = if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]))var RegionChoice = if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]))returnif(ISFILTERED(\u0027RFO_Zone\u0027[Market Leader]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_Mkt]= MarketChoice, \u0027Capacity\u0027[Type] in {'NFR','Red Role'}, \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'True', \u0027DTRB_PERF_DATES\u0027[Current Year Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[RFO Name]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_ID]= RFOChoice, \u0027Capacity\u0027[Type] in {'NFR','Red Role'}, \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'True', \u0027DTRB_PERF_DATES\u0027[Current Year Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Channel]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Channel]= ChannelChoice, \u0027Capacity\u0027[Type] in {'NFR','Red Role'}, \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'True', \u0027DTRB_PERF_DATES\u0027[Current Year Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Division]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Division]= DivisionChoice, \u0027Capacity\u0027[Type] in {'NFR','Red Role'}, \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'True', \u0027DTRB_PERF_DATES\u0027[Current Year Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Region]),CALCULATE( DIVIDE(\u0027Appointments/PC/JFW\u0027[FP Prospect Connects], SUM(Capacity[Capacity])), \u0027Capacity\u0027[Region]= RegionChoice, \u0027Capacity\u0027[Type] in {'NFR','Red Role'}, \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', \u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'True', \u0027DTRB_PERF_DATES\u0027[Current Year Flag] in {True}))))))","isHidden":false},{"name":"YOY Change NFP PCs/NFP","expression":"(\u0027Appointments/PC/JFW\u0027[YTD PCs per NFP] - \u0027Appointments/PC/JFW\u0027[PYTD PCs per NFP])/\u0027Appointments/PC/JFW\u0027[PYTD PCs per NFP]","isHidden":false},{"name":"Gap 4wk Appts","expression":"YTD_GOALS_DD[Weekly Need Appts]-\u0027Appointments/PC/JFW\u0027[Appts 4 Wk Average]","isHidden":false},{"name":"Gap 4wk PCs","expression":"YTD_GOALS_DD[Weekly Need Total PCs]-\u0027Appointments/PC/JFW\u0027[PC 4 Wk Average]","isHidden":false},{"name":"Leader JFW YTD","expression":"CALCULATE(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[TSID_Market_Appt]),    FILTER(\u0027Appointments/PC/JFW\u0027,    \u0027Appointments/PC/JFW\u0027[JFW_IND] = 1 \u0026\u0026     \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'001005','001007','001505'} \u0026\u0026     RELATED(DTRB_PERF_DATES[YTD Flag]) in {TRUE}))","isHidden":false},{"name":"Leader JFW per Week YTD","expression":"divide(\u0027Appointments/PC/JFW\u0027[YTD Leader JFW],DTRB_PERF_DATES[Current Week Number])","isHidden":false},{"name":"Leader JFW per Role","expression":"divide([Leader JFW per Week YTD],[TSID Count])","isHidden":false},{"name":"Prev 4 Weeks Leader JFW","expression":"CALCULATE(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    FILTER(\u0027Appointments/PC/JFW\u0027,    \u0027Appointments/PC/JFW\u0027[JFW_IND] = 1 \u0026\u0026     \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'001000','001001','001002','001003','001004','001005','001006','001007','001011'} \u0026\u0026     RELATED(DTRB_PERF_DATES[Prior 4 Weeks Flag]) in {TRUE} \u0026\u0026    RELATED(DTRB_PERF_DATES[YTD Flag]) in {TRUE}))","isHidden":false},{"name":"Leader JFW per Week 4 Wk Avg","expression":"divide(\u0027Appointments/PC/JFW\u0027[Prev 4 Weeks Leader JFW],4)","isHidden":false},{"name":"Prev Week Leader JFW","expression":"CALCULATE(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    FILTER(\u0027Appointments/PC/JFW\u0027,    \u0027Appointments/PC/JFW\u0027[JFW_IND] = 1 \u0026\u0026     \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'001000','001001','001002','001003','001004','001005','001006','001007','001011'} \u0026\u0026     RELATED(DTRB_PERF_DATES[Prior Week Flag]) = 'TRUE' \u0026\u0026    RELATED(DTRB_PERF_DATES[YTD Flag]) in {TRUE}))","isHidden":false},{"name":"Prev 12 Weeks Leader JFW","expression":"CALCULATE(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    FILTER(\u0027Appointments/PC/JFW\u0027,    \u0027Appointments/PC/JFW\u0027[JFW_IND] = 1 \u0026\u0026     \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'001000','001001','001002','001003','001004','001005','001006','001007','001011'} \u0026\u0026     RELATED(DTRB_PERF_DATES[Prior 12 Weeks Flag]) in {TRUE} \u0026\u0026    RELATED(DTRB_PERF_DATES[YTD Flag]) in {TRUE}))","isHidden":false},{"name":"Leader JFW per Week 12 Wk Avg","expression":"divide(\u0027Appointments/PC/JFW\u0027[Prev 12 Weeks Leader JFW],12)","isHidden":false},{"name":"Leader JFW per Role 4 wk","expression":"divide([Leader JFW per Week 4 Wk Avg],[TSID Count])","isHidden":false},{"name":"Leader JFW per Role 12 wk","expression":"divide([Leader JFW per Week 12 Wk Avg],[TSID Count])","isHidden":false},{"name":"YTD Market JFW FP","expression":"CALCULATE(DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),\u0027Appointments/PC/JFW\u0027[Worker Appointment Association]='Owner',\u0027Appointments/PC/JFW\u0027[JFW_IND] = 1, \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002010','002022','002025','002026','002027','003100','003500'},DTRB_PERF_DATES[YTD Flag] in {TRUE})","isHidden":false},{"name":"NFP 6 Mo JFW Cov","expression":"var numerator = CALCULATE([YTD Market JFW], \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP 6 Mo] = 'NFP 6 Mo')var denominator = [YTD Appointments]returnCALCULATE(          divide([YTD Market JFW FP],[YTD Appointments]),          \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP 6 Mo] = 'NFP 6 Mo',          \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT]= 'CURRENT',          \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002010','002022','002025','002026','002027','003100','003500'})","isHidden":false},{"name":"NFP 6 Mo JFW Cov - L30","expression":"CALCULATE(          divide([L30 Market JFW],[L30 Appointments]),          \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP 6 Mo] = 'NFP 6 Mo',          \u0027DTRB_PERF_DATES\u0027[Prior 30 days Flag] in {TRUE},          \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002010','002022','002025','002026','002027','003100','003500'})","isHidden":false},{"name":"NFP 6 Mo JFW Cov - N14","expression":"CALCULATE(          divide([N14 Market JFW],[N14 Appointments]),          \u0027Appointments/PC/JFW\u0027[FP Tenure - NFP 6 Mo] = 'NFP 6 Mo',          \u0027DTRB_PERF_DATES\u0027[Next 14 days Flag] in {TRUE},          \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002010','002022','002025','002026','002027','003100','003500'})","isHidden":false},{"name":"L30 Market JFW","expression":"CALCULATE(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    \u0027Appointments/PC/JFW\u0027[Worker Appointment Association] = 'Owner',    \u0027Appointments/PC/JFW\u0027[JFW_IND] = 1,    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002010','002022','002025','002026','002027','003100','003500'},    DTRB_PERF_DATES[Prior 30 days Flag] in {TRUE})","isHidden":false},{"name":"L30 Appointments","expression":"calculate(    DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),    \u0027Appointments/PC/JFW\u0027[Worker Appointment Association] = 'Owner',    \u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002010','002025','002026','002027','003100','003500'},    DTRB_PERF_DATES[Prior 30 days Flag] in {TRUE})","isHidden":false},{"name":"4k wk Gap to Need Appts/FA","expression":"[Weekly Need Appts/FP]-[4wk Appts per FP]","isHidden":false},{"name":"4 wk gap to need appts/NFA","expression":"[Weekly Need NFP Appts/NFP]-[4 Wk NFP Appts/NFP]","isHidden":false},{"name":"YTD NFP Appointments","expression":"calculate(DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),\u0027Appointments/PC/JFW\u0027[Worker Appointment Association]='Owner',\u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'},\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP', DTRB_PERF_DATES[YTD Flag] in {TRUE})","isHidden":false},{"name":"YTD Vet Appointments","expression":"calculate(DISTINCTCOUNT(\u0027Appointments/PC/JFW\u0027[Appointment Dimension Surrogate Key]),\u0027Appointments/PC/JFW\u0027[Worker Appointment Association]='Owner',\u0027Appointments/PC/JFW\u0027[Historical Job Type Code] in {'002000','002003','002008','002010','002011','002012','002016','002022','002024','002025','002026','002027','002030','002031','002032','003100','003500'},\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='Vet', DTRB_PERF_DATES[YTD Flag] in {TRUE})","isHidden":false}],"source":[{"expression":"let    Source = Sql.Database('dbedwdwprd', 'EnterpriseDataMart', [Query='select#(lf)#(tab)appt_fct.[Worker Appointment Association],#(lf)#(tab)appt_fct.[Appointment Dimension Surrogate Key],#(lf)#(tab)appt_fct.[Person Dimension Surrogate Key],#(lf)#(tab)sum(appt_fct.[Appointment Occurs]) [appt_occurs],#(lf)#(tab)mbr_dim.[Membership Type Code],#(lf)#(tab)mbr_dim.[Membership Type Description],#(lf)#(tab)appt_dim.[Appointment Date],#(lf)#(tab)appt_dim.[Appointment Type Code],#(lf)#(tab)case when appt_dim.[Appointment Type Code] in (\u0027Gather Data\u0027) Then \u0027Discover\u0027#(lf)            when appt_dim.[Appointment Type Code] in (\u0027Take Action\u0027) Then \u0027Deliver\u0027#(lf)            when appt_dim.[Appointment Type Code] not in (\u0027Gather Data\u0027,\u0027Take Action\u0027) then Appt_dim.[Appointment Type Code]#(lf)       end as [Appointment Type Code],#(lf)       case when appt_dim.[Appointment Type Code] in (\u0027Gather Data\u0027) Then \u0027Discover\u0027#(lf)            when appt_dim.[Appointment Type Code] in (\u0027Take Action\u0027) Then \u0027Deliver\u0027#(lf)            when appt_dim.[Appointment Type Code] not in (\u0027Gather Data\u0027,\u0027Take Action\u0027) then Appt_dim.[Appointment Type Description]#(lf)       end as [Appointment Type Description],#(lf)#(lf)#(tab)case when appt_dim.[Field User Count] \u003c\u003e 0 and appt_dim.[Appointment Type Code] in (\u0027Connect\u0027,\u0027Gather Data\u0027,\u0027Take Action\u0027,\u0027Strategy Call/Meeting\u0027,\u0027Review\u0027,\u0027Service\u0027,\u0027Discover\u0027,\u0027Deliver\u0027)#(lf)#(tab)#(tab) then 1#(lf)#(tab)#(tab) else 0#(lf)#(tab)#(tab) end [JFW_IND],#(lf)#(tab)date_dim.[Calendar Year Name],#(lf)#(tab)date_dim.[Calendar Year Week Number],#(lf)#(tab)date_dim.[Calendar Week End Date],#(lf)#(tab)(LEFT(sale_hier_dim.[ORZN_ZONE_CDE],4)) as RFO,#(lf)#(tab)sale_hier_dim.ORZN_ZONE_CDE [Market],#(lf)        sale_hier_dim.ORZN_SUB_DEPT_CDE [MVP Group],#(lf)#(tab)appt_org_hist.[Source System Key Text] [TSID],#(lf)#(tab)appt_org_hist.[Adjusted Service Date],#(lf)#(tab)appt_org_hist.[Employee Status Type Description],#(lf)#(tab)appt_org_hist.[Financial Professional Tenure] [Historical FP Tenure],#(lf)#(tab)appt_org_hist.[Financial Professional Tenure Group] [Historical FP Tenure Group],#(lf)#(tab)appt_org_hist.[Job Type Code] [Historical Job Type Code],#(lf)#(tab)appt_org_hist.[Job Type Description] [Historical Job Type Description]#(lf)#(lf)from EnterpriseDataMart.DM_01.[Appointment Combine Fact] appt_fct#(lf)left join EnterpriseDataMart.DM_01.[Membership Type Dimension] mbr_dim#(lf)#(tab)on (appt_fct.[Membership Type Dimension Surrogate Key]=mbr_dim.[Membership Type Dimension Surrogate Key])#(lf)left join EnterpriseDataMart.DM_01.[Appointment Dimension] appt_dim#(lf)#(tab)on (appt_fct.[Appointment Dimension Surrogate Key]=appt_dim.[Appointment Dimension Surrogate Key])#(lf)left join EnterpriseDataMart.DM_01.[Date Dimension] date_dim#(lf)#(tab)on (appt_dim.[Appointment Date]=date_dim.[Calendar Date Date])#(lf)left join EnterpriseDataMart.DM_01.[Organization Dimension] appt_org_hist#(lf)    on ((appt_fct.[Appointment Organization Dimension Surrogate Key]=appt_org_hist.[Organization Dimension Surrogate Key])#(lf)    and (appt_dim.[Appointment Date] between appt_org_hist.[Effective Begin Date] and appt_org_hist.[Effective End Date]))#(lf)left join EnterpriseDataMart.DM_01.[SALE_HIER_DIM] sale_hier_dim#(lf)#(tab)on ((sale_hier_dim.EFF_BEG_DT\u003c=appt_dim.[Appointment Date])#(lf)#(tab)#(tab)and (appt_dim.[Appointment Date]\u003c= DATEADD(day,-1,sale_hier_dim.EFF_END_DT))#(lf)#(tab)#(tab)and sale_hier_dim.CURR_ROW_IND = \u0027Y\u0027#(lf)#(tab)and appt_org_hist.[Source System Key Text]=sale_hier_dim.[SALE_HIER_ID])#(lf)#(lf)where #(lf)#(tab)appt_dim.[Current Row Indicator] = \u0027Y\u0027#(lf)#(tab)and appt_dim.[Appointment Create Date Over 14 Days] = \u0027N\u0027#(lf)#(tab)and appt_fct.[Person Dimension Surrogate Key] \u003c\u003e 0#(lf)#(tab)and appt_fct.[Appointment Status Name] \u003c\u003e \u0027Declined\u0027#(lf)#(tab)and sale_hier_dim.ORZN_DEPT_CDE in (\u00270115\u0027,\u00270190\u0027,\u00270283\u0027,\u00270291\u0027,\u00270361\u0027,\u00270384\u0027,\u00270435\u0027,\u00270525\u0027,\u00270383\u0027)#(lf)#(tab)and appt_org_hist.[Job Type Code] in (\u0027001000\u0027,\u0027001001\u0027,\u0027001002\u0027,\u0027001003\u0027,\u0027001004\u0027,\u0027001005\u0027,\u0027001006\u0027,\u0027001007\u0027,\u0027001011\u0027,\u0027001505\u0027,\u0027002000\u0027, \u0027002003\u0027, \u0027002008\u0027, \u0027002010\u0027, \u0027002011\u0027, \u0027002012\u0027, \u0027002016\u0027, \u0027002022\u0027, \u0027002024\u0027, \u0027002025\u0027, \u0027002026\u0027, \u0027002027\u0027, \u0027002030\u0027, \u0027002031\u0027, \u0027002032\u0027, \u0027003100\u0027, \u0027003500\u0027)#(lf)#(tab)and appt_dim.[Event Result Description] not in (\u0027No Show\u0027,\u0027Cancelled\u0027)#(lf)#(tab)and date_dim.[Calendar Year Name] \u003e= YEAR(getdate()-10)-2 and date_dim.[Calendar Year Name] \u003c=YEAR(getdate()-10)#(lf)        and appt_org_hist.[Source System Key Text] not in (\u0027TS06033\u0027, \u0027TS13320\u0027, \u0027TS21623\u0027, \u0027TS22934\u0027, \u0027TS32012\u0027, \u0027TS34394\u0027, \u0027TS34662\u0027, \u0027TS67185\u0027)#(lf)        and appt_dim.[Appointment Type Code] \u003c\u003e \u0027UNK\u0027#(lf)#(tab)#(lf)#(lf)#(lf)group by#(lf)#(tab)appt_fct.[Worker Appointment Association],#(lf)#(tab)appt_fct.[Appointment Dimension Surrogate Key],#(lf)#(tab)appt_fct.[Person Dimension Surrogate Key],#(lf)#(tab)mbr_dim.[Membership Type Code],#(lf)#(tab)mbr_dim.[Membership Type Description],#(lf)#(tab)appt_dim.[Appointment Date],#(lf)#(tab)appt_dim.[Appointment Type Code],#(lf)#(tab)appt_dim.[Appointment Type Description],#(lf)#(tab)appt_dim.[Field User Count],#(lf)#(tab)date_dim.[Calendar Year Name],#(lf)#(tab)date_dim.[Calendar Year Week Number],#(lf)#(tab)date_dim.[Calendar Week End Date],#(lf)#(tab)sale_hier_dim.ORZN_DEPT_CDE,#(lf)#(tab)sale_hier_dim.ORZN_ZONE_CDE,#(lf)        sale_hier_dim.ORZN_SUB_DEPT_CDE,#(lf)#(tab)appt_org_hist.[Source System Key Text],#(lf)#(tab)appt_org_hist.[Adjusted Service Date],#(lf)#(tab)appt_org_hist.[Employee Status Type Description],#(lf)#(tab)appt_org_hist.[Financial Professional Tenure],#(lf)#(tab)appt_org_hist.[Financial Professional Tenure Group],#(lf)#(tab)appt_org_hist.[Department Identifier],#(lf)#(tab)appt_org_hist.[RFO Zone Identifier],#(lf)#(tab)appt_org_hist.[Job Type Code],#(lf)#(tab)appt_org_hist.[Job Type Description]#(lf)#(lf)having #(lf)sum(appt_fct.[Appointment Occurs])\u003e0']),    #'Added Custom' = Table.AddColumn(Source, 'TSID_Market_Appt', each [TSID]\u0026'-'\u0026Number.ToText([Appointment Dimension Surrogate Key])),    #'Changed Type' = Table.TransformColumnTypes(#'Added Custom',{{'Appointment Date', type date}, {'Calendar Week End Date', type date}, {'Adjusted Service Date', type date}}),    #'Removed Columns' = Table.RemoveColumns(#'Changed Type',{'Person Dimension Surrogate Key', 'appt_occurs', 'Membership Type Description', 'Appointment Type Description', 'Calendar Year Name', 'Calendar Year Week Number', 'Calendar Week End Date', 'RFO', 'Historical FP Tenure', 'Historical FP Tenure Group', 'Historical Job Type Description'})in    #'Removed Columns'"}]},{"name":"Referrals","isHidden":false,"columns":[{"name":"PERS_DIM_SK","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"REFR_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Referral_Occurs","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"ORZN_DEPT_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_ZONE_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Adjusted Service Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Employee Status Type Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Financial Professional Tenure","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Financial Professional Tenure Group","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Department Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO Zone Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee Display Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Type Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Calendar Year Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Calendar Year Week Number","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[{"name":"YTD Referrals","expression":"CALCULATE(sum(Referrals[Referral_Occurs]),DTRB_PERF_DATES[YTD Flag] in {TRUE})","isHidden":false},{"name":"PY Referrals","expression":"CALCULATE(sum(Referrals[Referral_Occurs]),DTRB_PERF_DATES[Prior Year Flag] in {TRUE})","isHidden":false},{"name":"PY2 Referrals","expression":"CALCULATE(sum(Referrals[Referral_Occurs]),DTRB_PERF_DATES[Prior Year 2 Flag] in {TRUE})","isHidden":false},{"name":"PYTD Referrals","expression":"CALCULATE(sum(Referrals[Referral_Occurs]),DTRB_PERF_DATES[PYTD Flag SF] in {TRUE})","isHidden":false},{"name":"YOY Change Referrals","expression":"(Referrals[YTD Referrals] - Referrals[PYTD Referrals])/Referrals[PYTD Referrals]","isHidden":false},{"name":"4wk Referrals per FP","expression":"var RFOChoice = if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]))var RegionChoice = if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]))returnif(ISFILTERED(\u0027RFO_Zone\u0027[RFO Name]),CALCULATE( DIVIDE(sum(Referrals[Referral_Occurs]), SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_ID]= RFOChoice,\u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True},DTRB_PERF_DATES[Current Year Flag] in {TRUE}),if(ISFILTERED(\u0027RFO_Zone\u0027[Channel]),CALCULATE( DIVIDE(sum(Referrals[Referral_Occurs]), SUM(Capacity[Capacity])), Capacity[Channel]= ChannelChoice, \u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True},DTRB_PERF_DATES[Current Year Flag] in {TRUE}),if(ISFILTERED(\u0027RFO_Zone\u0027[Division]),CALCULATE( DIVIDE(sum(Referrals[Referral_Occurs]), SUM(Capacity[Capacity])), \u0027Capacity\u0027[Division]= DivisionChoice, \u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True},DTRB_PERF_DATES[Current Year Flag] in {TRUE}),if(ISFILTERED(\u0027RFO_Zone\u0027[Region]),CALCULATE( DIVIDE(sum(Referrals[Referral_Occurs]), SUM(Capacity[Capacity])), \u0027Capacity\u0027[Region]= RegionChoice, \u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {True},DTRB_PERF_DATES[Current Year Flag] in {TRUE})))))","isHidden":false},{"name":"YTD Referrals per FP","expression":"var MarketChoice = if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]))var RFOChoice = if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]))var RegionChoice = if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]))returnif(ISFILTERED(\u0027RFO_Zone\u0027[Market Leader]),CALCULATE( DIVIDE(sum(Referrals[Referral_Occurs]), SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_Mkt]= MarketChoice,\u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[RFO Name]),CALCULATE( DIVIDE(sum(Referrals[Referral_Occurs]), SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_ID]= RFOChoice,\u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Channel]),CALCULATE( DIVIDE(sum(Referrals[Referral_Occurs]), SUM(Capacity[Capacity])), Capacity[Channel]= ChannelChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Division]),CALCULATE( DIVIDE(sum(Referrals[Referral_Occurs]), SUM(Capacity[Capacity])), \u0027Capacity\u0027[Division]= DivisionChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Region]),CALCULATE( DIVIDE(sum(Referrals[Referral_Occurs]), SUM(Capacity[Capacity])), \u0027Capacity\u0027[Region]= RegionChoice, \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True}))))))","isHidden":false},{"name":"Curr Wk Referrals per FP","expression":"var RFOChoice = if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]))var RegionChoice = if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]))returnif(ISFILTERED(\u0027RFO_Zone\u0027[RFO Name]),CALCULATE( DIVIDE(sum(Referrals[Referral_Occurs]), SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_ID]= RFOChoice,\u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'TRUE', \u0027DTRB_PERF_DATES\u0027[Current Year Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Channel]),CALCULATE( DIVIDE(sum(Referrals[Referral_Occurs]), SUM(Capacity[Capacity])), Capacity[Channel]= ChannelChoice,\u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'TRUE', \u0027DTRB_PERF_DATES\u0027[Current Year Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Division]),CALCULATE( DIVIDE(sum(Referrals[Referral_Occurs]), SUM(Capacity[Capacity])), \u0027Capacity\u0027[Division]= DivisionChoice,\u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'TRUE', \u0027DTRB_PERF_DATES\u0027[Current Year Flag] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Region]),CALCULATE( DIVIDE(sum(Referrals[Referral_Occurs]), SUM(Capacity[Capacity])), \u0027Capacity\u0027[Region]= RegionChoice,\u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'TRUE', \u0027DTRB_PERF_DATES\u0027[Current Year Flag] in {True})))))","isHidden":false},{"name":"PYTD Referrals per FP","expression":"var RFOChoice = if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]))var ChannelChoice = if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))var DivisionChoice = if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]))var RegionChoice = if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]))returnif(ISFILTERED(\u0027RFO_Zone\u0027[RFO Name]),CALCULATE( DIVIDE(sum(Referrals[Referral_Occurs]), SUM(Capacity[Capacity])), \u0027Capacity\u0027[RFO_ID]= RFOChoice,\u0027DTRB_PERF_DATES\u0027[PYTD Flag SF] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Channel]),CALCULATE( DIVIDE(sum(Referrals[Referral_Occurs]), SUM(Capacity[Capacity])), Capacity[Channel]= ChannelChoice, \u0027DTRB_PERF_DATES\u0027[PYTD Flag SF] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Division]),CALCULATE( DIVIDE(sum(Referrals[Referral_Occurs]), SUM(Capacity[Capacity])), \u0027Capacity\u0027[Division]= DivisionChoice, \u0027DTRB_PERF_DATES\u0027[PYTD Flag SF] in {True}),if(ISFILTERED(\u0027RFO_Zone\u0027[Region]),CALCULATE( DIVIDE(sum(Referrals[Referral_Occurs]), SUM(Capacity[Capacity])), \u0027Capacity\u0027[Region]= RegionChoice, \u0027DTRB_PERF_DATES\u0027[PYTD Flag SF] in {True})))))","isHidden":false},{"name":"YOY Change Referrals/FP","expression":"divide([YTD Referrals per FP]-[PYTD Referrals per FP],[PYTD Referrals per FP])","isHidden":false}],"source":[{"expression":"let    Source = Sql.Database('dbedwdwprd', 'EnterpriseDataMart', [Query='SELECT  #(lf)                ref_fct.PERS_DIM_SK,#(lf)                ref_fct.REFR_DT,#(lf)                sum(ref_fct.OCCURS) [Referral_Occurs],#(lf)                date_dim.[Calendar Year Name],#(lf)                date_dim.[Calendar Year Week Number],#(lf)                sale_hier_dim.ORZN_DEPT_CDE,#(lf)                sale_hier_dim.ORZN_ZONE_CDE,#(lf)                org_dim.[Source System Key Text] AS EMP_ID,#(lf)                org_dim.[Adjusted Service Date],#(lf)                org_dim.[Employee Status Type Description],#(lf)                org_dim.[Financial Professional Tenure],#(lf)                org_dim.[Financial Professional Tenure Group],#(lf)                org_dim.[Department Identifier],#(lf)                org_dim.[RFO Zone Identifier],#(lf)                org_dim.[Last Name]+\u0027, \u0027+org_dim.[First Name] as ''Employee Display Name'', #(lf)                org_dim.[Job Type Code],#(lf)                org_dim.[Job Type Description]#(lf)#(lf)  FROM [EnterpriseDataMart].[DM_01].[REFERRAL_FCT] ref_fct LEFT JOIN#(lf)       EnterpriseDataMart.DM_01.[Date Dimension] date_dim#(lf)   on (ref_fct.[REFR_DT]=date_dim.[Calendar Date Date]) LEFT JOIN#(lf)       EnterpriseDataMart.DM_01.[Organization Dimension] org_dim#(lf)   on ((ref_fct.REFR_ORZN_DIM_SK=org_dim.[Organization Dimension Surrogate Key]) and#(lf)       (ref_fct.REFR_ORZN_DIM_VRSN_NBR=org_dim.[Organization Dimension Version Number])) LEFT JOIN#(lf)       EnterpriseDataMart.DM_01.[SALE_HIER_DIM] sale_hier_dim#(lf)   on ((sale_hier_dim.EFF_BEG_DT \u003c= ref_fct.REFR_DT) and#(lf)       (ref_fct.REFR_DT \u003c= DATEADD(day,-1,sale_hier_dim.EFF_END_DT)) and  #(lf)               sale_hier_dim.CURR_ROW_IND = \u0027Y\u0027 and #(lf)                org_dim.[Source System Key Text]=sale_hier_dim.[SALE_HIER_ID])#(lf)#(lf)where ref_fct.PERS_DIM_SK \u003c\u003e 0#(lf)  and sale_hier_dim.ORZN_DEPT_CDE in (\u00270115\u0027,\u00270165\u0027,\u00270190\u0027,\u00270240\u0027,\u00270283\u0027,\u00270291\u0027,\u00270361\u0027,\u00270365\u0027,\u00270383\u0027,\u00270384\u0027,\u00270410\u0027,\u00270435\u0027,\u00270475\u0027,\u00270496\u0027,\u00270525\u0027,\u00270529\u0027,\u00270810\u0027)#(lf)  and (org_dim.[Job Type Code] in (\u0027002000\u0027, \u0027002003\u0027, \u0027002008\u0027, \u0027002010\u0027, \u0027002011\u0027, \u0027002012\u0027, \u0027002016\u0027, \u0027002022\u0027, \u0027002024\u0027, \u0027002025\u0027, \u0027002026\u0027, \u0027002027\u0027, \u0027002030\u0027, \u0027002031\u0027, \u0027002032\u0027, \u0027003100\u0027, \u0027003500\u0027)#(lf)   or  org_dim.[Department Identifier] in (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027))  #(lf)   and date_dim.[Calendar Year Name] \u003e= YEAR(getdate()-10)-2 and date_dim.[Calendar Year Name] \u003c=YEAR(getdate()-10)#(lf)group by#(lf)                ref_fct.PERS_DIM_SK,#(lf)                ref_fct.REFR_DT,#(lf)                date_dim.[Calendar Year Name],#(lf)                date_dim.[Calendar Year Week Number],#(lf)                sale_hier_dim.ORZN_DEPT_CDE,#(lf)                sale_hier_dim.ORZN_ZONE_CDE,#(lf)                org_dim.[Source System Key Text],#(lf)                org_dim.[Adjusted Service Date],#(lf)                org_dim.[Employee Status Type Description],#(lf)                org_dim.[Financial Professional Tenure],#(lf)                org_dim.[Financial Professional Tenure Group],#(lf)                org_dim.[Department Identifier],#(lf)                org_dim.[RFO Zone Identifier],#(lf)                org_dim.[Last Name]+\u0027, \u0027+org_dim.[First Name],#(lf)                org_dim.[Job Type Code],#(lf)                org_dim.[Job Type Description]#(lf)#(lf)having #(lf)sum(ref_fct.OCCURS) \u003e 0#(lf)'])in    Source"}]},{"name":"RFO_Zone","isHidden":false,"columns":[{"name":"Division","dataType":"String","isHidden":false,"expression":"if(RFO_Zone[RFO] IN {'0283', '0365', '0435', '0496', '0810'}, 'Central', if(RFO_Zone[RFO] IN {'0115', '0165', '0190', '0240', '0361', '0384'}, 'East', if(RFO_Zone[RFO] IN {'0291', '0410', '0475', '0525', '0529'}, 'West', 'Other')))","columnType":"Calculated"},{"name":"Region","dataType":"String","isHidden":false,"expression":"IF(RFO_Zone[RFO] IN {'0361', '0365', '0435', '0496'}, 'Established', IF(RFO_Zone[RFO] IN {'0165', '0240', '0283', '0291', '0410', '0525'}, 'Growth', IF(RFO_Zone[RFO] IN {'0115', '0190', '0384', '0475', '0529'}, 'Invest', IF(RFO_Zone[RFO] = '0810', 'Colorado Springs', 'Other'))))","columnType":"Calculated"},{"name":"Channel","dataType":"String","isHidden":false,"expression":"if(RFO_Zone[RFO] in {'0383'}, 'Virtual Advice',if(RFO_Zone[RFO] in {'0716'},'TAN',if(RFO_Zone[RFO] in {'0714'},'Strategic Partners','Thrivent Advisor Group')))","columnType":"Calculated"},{"name":"Adjusted RFO","dataType":"String","isHidden":false,"expression":"IF(RFO_Zone[RFO] = '0001','',RFO_Zone[RFO])","columnType":"Calculated"},{"name":"RFO Name","dataType":"String","isHidden":false,"expression":"RELATED(\u0027RFO_NM\u0027[NM])","columnType":"Calculated"},{"name":"Organization Zone Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Leader Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market Leader","dataType":"String","isHidden":false,"expression":"RFO_Zone[Organization Zone Code] \u0026 '-' \u0026 RFO_Zone[Leader Name]","columnType":"Calculated"},{"name":"NPG","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"National Practice Group","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Core or Growth","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market Number","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Experienced Advisor","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Exp Advisor Sort","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//SHARED//Public//DI and BI//Distribution Dashboard//Market List from ZDD.xlsx'), null, true),    #'Dist DB lookup_Sheet' = Source{[Item='Dist DB lookup',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'Dist DB lookup_Sheet', [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'TAG-MVP-MKT', type text}, {'TAG-MVP', type text}, {'TAG', type text}, {'Market', type text}, {'MVP', Int64.Type}, {'Mkt', Int64.Type}, {'Leader Name', type text}, {'Lookup', Int64.Type}}),    #'Removed Columns' = Table.RemoveColumns(#'Changed Type',{'MVP', 'Mkt', 'Lookup'}),    #'Renamed Columns' = Table.RenameColumns(#'Removed Columns',{{'TAG-MVP', 'MVP'}, {'TAG-MVP-MKT', 'Organization Zone Code'}, {'TAG', 'RFO'}}),    #'Removed Blank Rows' = Table.SelectRows(#'Renamed Columns', each not List.IsEmpty(List.RemoveMatchingItems(Record.FieldValues(_), {'', null}))),    #'Replaced Value' = Table.ReplaceValue(#'Removed Blank Rows','','',Replacer.ReplaceValue,{'Organization Zone Code'}),    #'Sorted Rows' = Table.Sort(#'Replaced Value',{{'Organization Zone Code', Order.Ascending}}),    #'Added Custom' = Table.AddColumn(#'Sorted Rows', 'NPG', each if Text.Contains([Organization Zone Code], '-99') then 'NPG' else if Text.Contains([Organization Zone Code], '-98') then 'NPG' else if Text.Contains([Organization Zone Code], '-97') then 'NPG' else if Text.Contains([Organization Zone Code], '-96') then 'NPG' else if Text.Contains([Organization Zone Code], '-95') then 'NPG' else if Text.Contains([Organization Zone Code], '-94') then 'NPG' else if [Organization Zone Code] = '-93' then 'NPG' else if Text.Contains([Organization Zone Code], '-92') then 'NPG' else if Text.Contains([Organization Zone Code], '-91') then 'NPG' else if Text.Contains([Organization Zone Code], '-90') then 'NPG' else 'N'),    #'Added Conditional Column' = Table.AddColumn(#'Added Custom', 'Custom', each if [NPG] = 'NPG' then 'National Practice Group' else 'Not NPG'),    #'Renamed Columns1' = Table.RenameColumns(#'Added Conditional Column',{{'Custom', 'National Practice Group'}}),    #'Added Conditional Column1' = Table.AddColumn(#'Renamed Columns1', 'Custom', each if [RFO] = '0115' then 'Growth' else if [RFO] = '0190' then 'Growth' else if [RFO] = '0283' then 'Core' else if [RFO] = '0291' then 'Growth' else if [RFO] = '0361' then 'Core' else if [RFO] = '0384' then 'Growth' else if [RFO] = '0435' then 'Core' else if [RFO] = '0525' then 'Growth' else null),    #'Renamed Columns2' = Table.RenameColumns(#'Added Conditional Column1',{{'Custom', 'Core or Growth'}}),    #'Added Custom1' = Table.AddColumn(#'Renamed Columns2', 'Market Number', each Text.End([Market],2)),    #'Added Conditional Column2' = Table.AddColumn(#'Added Custom1', 'Experienced Advisor', each if [Market Number] = '01' then 'PMC - Market 1' else if [Market Number] = '59' then 'PMC - Market 59' else if [Market Number] = '69' then 'GPA - Market 69' else if [Market Number] = '79' then 'GPD - Market 79' else if [Market Number] = '98' then 'NPG - Market 98' else if [Market Number] = '99' then 'NPG - Market 99' else if [Market Number] = '89' then 'PPC - Market 89' else null),    #'Added Custom2' = Table.AddColumn(#'Added Conditional Column2', 'Exp Advisor Sort', each Text.End([Experienced Advisor],9))in    #'Added Custom2'"}]},{"name":"DTRB_PERF_DATES","isHidden":false,"columns":[{"name":"DT_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CAL_DAY_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_END_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_WK_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"SRC_SYS_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CRET_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"LST_UPDT_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"CRET_USER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LST_UPDT_USER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_DAY_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_MTH_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_QTR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"YTD Flag","dataType":"String","isHidden":false,"expression":"if(and(DTRB_PERF_DATES[CAL_DAY_DT] \u003c= DTRB_PERF_DATES[Prior Sunday], DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT'), True, False)","columnType":"Calculated"},{"name":"Prior Sunday","dataType":"String","isHidden":false,"expression":"LOOKUPVALUE(DTRB_PERF_DATES[END_OF_WK_DATE_MAX], DTRB_PERF_DATES[CAL_DAY_DT], LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[CAL_DAY_DT],date(2023,12,31)))","columnType":"Calculated"},{"name":"CalWeekDay","dataType":"String","isHidden":false,"expression":"weekday( DTRB_PERF_DATES[CAL_DAY_DT])","columnType":"Calculated"},{"name":"join_date","dataType":"String","isHidden":false,"expression":"DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR] \u0026 '-' \u0026 DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] \u0026 '-' \u0026 DTRB_PERF_DATES[CalWeekDay]","columnType":"Calculated"},{"name":"PYTD Flag","dataType":"String","isHidden":false,"expression":"var prevweeknum = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[CAL_DAY_DT],max(DTRB_PERF_DATES[Prior Sunday]))return if(and(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] \u003c= prevweeknum, DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='PREVIOUS'), True, False)","columnType":"Calculated"},{"name":"Prior Week Flag","dataType":"String","isHidden":false,"expression":"if(LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR], DTRB_PERF_DATES[CAL_DAY_DT], LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT') -3) = DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR], 'TRUE')","columnType":"Calculated"},{"name":"perf_yr_wk","dataType":"String","isHidden":false,"expression":"DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR] \u0026 '-' \u0026 DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR]","columnType":"Calculated"},{"name":"Current Year Flag","dataType":"String","isHidden":false,"expression":"if(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT', True, False)","columnType":"Calculated"},{"name":"Prior Year Flag","dataType":"String","isHidden":false,"expression":"if(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'PREVIOUS', True, False)","columnType":"Calculated"},{"name":"Prior Year 2 Flag","dataType":"String","isHidden":false,"expression":"if(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR] = DTRB_PERF_DATES[Prior Year 2], True, False)","columnType":"Calculated"},{"name":"CalYear","dataType":"String","isHidden":false,"expression":"year(DTRB_PERF_DATES[CAL_DAY_DT])","columnType":"Calculated"},{"name":"Cal_YTD_Flag","dataType":"String","isHidden":false,"expression":"if(and(DTRB_PERF_DATES[CAL_DAY_DT] \u003c= DTRB_PERF_DATES[Prior Sunday], DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'CURRENT'), True, False)","columnType":"Calculated"},{"name":"Cal_Prior_Year_Flag","dataType":"String","isHidden":false,"expression":"if(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'PREVIOUS', True, False)","columnType":"Calculated"},{"name":"Cal_Prior_Year_2_Flag","dataType":"String","isHidden":false,"expression":"if(DTRB_PERF_DATES[CalYear] = DTRB_PERF_DATES[Prior Year 2], True, False)","columnType":"Calculated"},{"name":"Cal_PYTD_Flag","dataType":"String","isHidden":false,"expression":"if(and(DTRB_PERF_DATES[CAL_DAY_DT] \u003c= DTRB_PERF_DATES[PYTD DATE], DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'PREVIOUS'), True, False)","columnType":"Calculated"},{"name":"Cal_QTR","dataType":"String","isHidden":false,"expression":"QUARTER(DTRB_PERF_DATES[CAL_DAY_DT])","columnType":"Calculated"},{"name":"Two Sundays Ago","dataType":"String","isHidden":false,"expression":"LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT], today() - 14)","columnType":"Calculated"},{"name":"PYTD Flag two Sundays","dataType":"String","isHidden":false,"expression":"if(and(DTRB_PERF_DATES[CAL_DAY_DT] \u003c= DTRB_PERF_DATES[PYTD DATE two Sundays], DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR] = DTRB_PERF_DATES[Prior Year]), True, False)","columnType":"Calculated"},{"name":"YTD Flag two Sundays","dataType":"String","isHidden":false,"expression":"if(and(DTRB_PERF_DATES[CAL_DAY_DT] \u003c= DTRB_PERF_DATES[Two Sundays Ago], DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR] = DTRB_PERF_DATES[Current Year]), True, False)","columnType":"Calculated"},{"name":"PYTD Flag SF","dataType":"String","isHidden":false,"expression":"if(and(DTRB_PERF_DATES[CAL_DAY_DT] \u003c= DATE(YEAR(today()-1)-1,MONTH(today()-1),DAY(today()-1)),DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR] = year(LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT'))-1), True, False)","columnType":"Calculated"},{"name":"Prior 4 Weeks Flag","dataType":"String","isHidden":false,"expression":"if(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] \u003e= LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR], DTRB_PERF_DATES[CAL_DAY_DT], LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT')-28) \u0026\u0026 DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] \u003c= LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR], DTRB_PERF_DATES[CAL_DAY_DT], LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT')-7), True, False)","columnType":"Calculated"},{"name":"Prior 52 Weeks Flag","dataType":"String","isHidden":false,"expression":"if(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT] \u003e= LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT], LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT') -365) \u0026\u0026 DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT] \u003c= LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT], LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT')-7), True, False)","columnType":"Calculated"},{"name":"Prior 30 days Flag","dataType":"String","isHidden":false,"expression":"if(DTRB_PERF_DATES[CAL_DAY_DT] \u003e= LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT')-30 \u0026\u0026 DTRB_PERF_DATES[CAL_DAY_DT] \u003c= LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT')-1, True, False)","columnType":"Calculated"},{"name":"Next 14 days Flag","dataType":"String","isHidden":false,"expression":"if(DTRB_PERF_DATES[CAL_DAY_DT] \u003e= LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT')\u0026\u0026 DTRB_PERF_DATES[CAL_DAY_DT] \u003c= LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT') +13, True, False)","columnType":"Calculated"},{"name":"Week End Date MAX","dataType":"String","isHidden":false,"expression":"calculate(max(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT]), ALLEXCEPT(DTRB_PERF_DATES,DTRB_PERF_DATES[perf_yr_wk]))","columnType":"Calculated"},{"name":"END_OF_WK_DATE_MAX","dataType":"String","isHidden":false,"expression":"calculate(max(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT]), ALLEXCEPT(DTRB_PERF_DATES,DTRB_PERF_DATES[perf_yr_wk]))","columnType":"Calculated"},{"name":"Prior Sunday CAL YR","dataType":"String","isHidden":false,"expression":"LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT],date(2021,12,31))","columnType":"Calculated"},{"name":"EOY Date","dataType":"String","isHidden":false,"expression":"date(2021,12,31)","columnType":"Calculated"},{"name":"Prior 12 Weeks Flag","dataType":"String","isHidden":false,"expression":"if(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] \u003e= LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR], DTRB_PERF_DATES[CAL_DAY_DT], LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT')-84) \u0026\u0026 DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] \u003c= LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR], DTRB_PERF_DATES[CAL_DAY_DT], LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT')-7), True, False)","columnType":"Calculated"},{"name":"WeekOffset","dataType":"String","isHidden":false,"expression":"DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR]-1","columnType":"Calculated"},{"name":"WeekIndex","dataType":"String","isHidden":false,"expression":"YEAR(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT])*52+DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR]","columnType":"Calculated"},{"name":"Month Name","dataType":"String","isHidden":false,"expression":"FORMAT(DTRB_PERF_DATES[CAL_DAY_DT], 'MMMM')","columnType":"Calculated"},{"name":"Month Sort","dataType":"String","isHidden":false,"expression":"FORMAT(DTRB_PERF_DATES[CAL_DAY_DT],'MM')","columnType":"Calculated"},{"name":"Prior 4 Weeks Flag NC","dataType":"String","isHidden":false,"expression":"if(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] \u003e= LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR], DTRB_PERF_DATES[CAL_DAY_DT], LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT')-35) \u0026\u0026 DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] \u003c= LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR], DTRB_PERF_DATES[CAL_DAY_DT], LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT')-14), True, False)","columnType":"Calculated"},{"name":"Next 31 days Flag","dataType":"String","isHidden":false,"expression":"if(DTRB_PERF_DATES[CAL_DAY_DT] \u003e= LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT')\u0026\u0026 DTRB_PERF_DATES[CAL_DAY_DT] \u003c= LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT') +30, True, False)","columnType":"Calculated"}],"measures":[{"name":"Current Date","expression":"today()","isHidden":false},{"name":"Current Year","expression":"LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT],'CURRENT')","isHidden":false},{"name":"Prior YEar","expression":"DTRB_PERF_DATES[Current Year] - 1","isHidden":false},{"name":"PYTD DATE","expression":"(LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT], today() - 5)) - 364","isHidden":false},{"name":"Prior Year 2","expression":"DTRB_PERF_DATES[Current Year] - 2","isHidden":false},{"name":"PYTD DATE two Sundays","expression":"(LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT], today() - 379))","isHidden":false},{"name":"Days into Year","expression":"CALCULATE(COUNT(DTRB_PERF_DATES[CAL_DAY_DT]),DTRB_PERF_DATES[YTD Flag] in {TRUE})","isHidden":false},{"name":"Days in Year","expression":"CALCULATE(COUNT(DTRB_PERF_DATES[CAL_DAY_DT]),DTRB_PERF_DATES[Current Year Flag] in {TRUE})","isHidden":false},{"name":"Weeks Remaining NFC","expression":"calculate(52-MAX(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR]),DTRB_PERF_DATES[YTD Flag two Sundays] in {TRUE})","isHidden":false},{"name":"Current Week Number","expression":"LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[Prior Week Flag],'TRUE')","isHidden":false}],"source":[{"expression":"let    Source = DB2.Database('podwh021:50000', 'podwh021', [HierarchicalNavigation=true, Implementation='Microsoft']),    COMMON = Source{[Schema='COMMON']}[Data],    DTRB_PERF_DATES1 = COMMON{[Name='DTRB_PERF_DATES']}[Data]in    DTRB_PERF_DATES1"}]},{"name":"CP _Plus","isHidden":false,"columns":[{"name":"RFO_Mkt","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Current Wk","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CP+ Scores Above","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"PerfYr_Wk","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"YTD CP Plus","expression":"CALCULATE(    sum(\u0027CP _Plus\u0027[CP+ Scores Above]),    DTRB_PERF_DATES[YTD Flag] in {TRUE})","isHidden":false},{"name":"PYTD CP Plus","expression":"CALCULATE(    sum(\u0027CP _Plus\u0027[CP+ Scores Above]),    DTRB_PERF_DATES[PYTD Flag] in {TRUE})","isHidden":false},{"name":"PY CP PLus","expression":"CALCULATE(sum(\u0027CP _Plus\u0027[CP+ Scores Above]),DTRB_PERF_DATES[Prior Year Flag] in {TRUE})","isHidden":false},{"name":"YOY Change CP","expression":"DIVIDE((\u0027CP _Plus\u0027[YTD CP Plus] - \u0027CP _Plus\u0027[PYTD CP Plus]),\u0027CP _Plus\u0027[PYTD CP Plus])","isHidden":false},{"name":"CP+ 4 Wk Average","expression":"CALCULATE(divide(\u0027CP _Plus\u0027[YTD CP Plus],4),\u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {TRUE},DTRB_PERF_DATES[Current Year Flag] in {TRUE})","isHidden":false},{"name":"CP+ YTD Wk Average","expression":"CALCULATE(divide(\u0027CP _Plus\u0027[YTD CP Plus],max(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR])),\u0027DTRB_PERF_DATES\u0027[YTD Flag] in {TRUE})","isHidden":false},{"name":"CP+ Curr Wk","expression":"CALCULATE(\u0027CP _Plus\u0027[YTD CP Plus],\u0027DTRB_PERF_DATES\u0027[Prior Week Flag] = 'TRUE')","isHidden":false},{"name":"4wk CP+ Gap","expression":"[Weekly Need CP+]-\u0027CP _Plus\u0027[CP+ 4 Wk Average]","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//SHARED//Public//DI and BI//Capacity Dashboard//Capacity Dashboard-CP+.xlsx'), null, true),    Sheet1_Sheet = Source{[Item='Sheet1',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'RFO_ID', Int64.Type}, {'ZONE_ID', Int64.Type}, {'RFO_Mkt', type text}, {'Type', type text}, {'Year', Int64.Type}, {'Week', Int64.Type}, {'Count', Int64.Type}}),    #'Duplicated Column' = Table.DuplicateColumn(#'Changed Type', 'Year', 'Year - Copy'),    #'Duplicated Column1' = Table.DuplicateColumn(#'Duplicated Column', 'Week', 'Week - Copy'),    #'Merged Columns' = Table.CombineColumns(Table.TransformColumnTypes(#'Duplicated Column1', {{'Year - Copy', type text}, {'Week - Copy', type text}}, 'en-US'),{'Year - Copy', 'Week - Copy'},Combiner.CombineTextByDelimiter('-', QuoteStyle.None),'PerfYear-PerfWeek'),    #'Removed Columns' = Table.RemoveColumns(#'Merged Columns',{'PerfYear-PerfWeek'}),    #'Changed Type1' = Table.TransformColumnTypes(#'Removed Columns',{{'CP+ Scores Above', Int64.Type}, {'Cumulative Counts', Int64.Type}, {'Cumulative CP+ Above', Int64.Type}}),    #'Removed Columns1' = Table.RemoveColumns(#'Changed Type1',{'JOIN VALUE', 'RFO_ID', 'ZONE_ID', 'Type', 'Count', 'Cumulative Counts', 'Cumulative CP+ Above', 'CP+ Above'}),    #'Added Custom' = Table.AddColumn(#'Removed Columns1', 'PerfYrWk_PQ', each Number.ToText([Year])\u0026'-'\u0026Number.ToText([Week])),    #'Removed Columns2' = Table.RemoveColumns(#'Added Custom',{'Year', 'Week'}),    #'Renamed Columns' = Table.RenameColumns(#'Removed Columns2',{{'PerfYrWk_PQ', 'PerfYr_Wk'}})in    #'Renamed Columns'"}]},{"name":"Max_Cal_Dt","isHidden":false,"columns":[{"name":"DTRB_PERF_RPT_YR_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_WK_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"MAX_CAL_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"PerfYrWk","dataType":"String","isHidden":false,"expression":"Max_Cal_Dt[DTRB_PERF_RPT_YR_NBR] \u0026 '-' \u0026 Max_Cal_Dt[DTRB_PERF_RPT_YR_WK_NBR]","columnType":"Calculated"}],"measures":[],"source":[{"expression":"let    Source = DB2.Database('podwh021:50000', 'podwh021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT DISTINCT#(lf)DATES_ITRL.DTRB_PERF_RPT_YR_NBR,#(lf)DATES_ITRL.DTRB_PERF_RPT_YR_WK_NBR,#(lf)max(DATES_ITRL.CAL_DAY_DT) as MAX_Cal_DT#(lf)FROM COMMON.DTRB_PERF_DATES DATES_ITRL#(lf)GROUP BY DATES_ITRL.DTRB_PERF_RPT_YR_NBR,#(lf)DATES_ITRL.DTRB_PERF_RPT_YR_WK_NBR'])in    Source"}]},{"name":"ANBP_OtherRev_DD","isHidden":false,"columns":[{"name":"RALN_MKT_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CalYr","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CalWk","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"max_cal_dt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Value","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ANBP_OtherRev","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RALN_RFO_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Product (groups)","dataType":"String","isHidden":false,"expression":"SWITCH(  TRUE,  ISBLANK(\u0027ANBP_OtherRev_DD\u0027[Product]),  '(Blank)',  \u0027ANBP_OtherRev_DD\u0027[Product] IN {'FA',    'FIA',    'SO',    'SPIA',    'VA'},  'Annuity',  \u0027ANBP_OtherRev_DD\u0027[Product] IN {'DI',    'LTC',    'LTC Hybrid',    'LTC Hybrid Single',    'MED_PLANS'},  'Health',  \u0027ANBP_OtherRev_DD\u0027[Product] IN {'PERM_RECURRING',    'SPWL',    'Term',    'UL',    'VUL'},  'Life',  \u0027ANBP_OtherRev_DD\u0027[Product] IN {'ADVANTAGE',    'ADVISOR',    'ADVISOR GUIDED',    'GENESIS',    'IMPACT',    'INCOME FOCUSED',    'SELECT',    'SHEPHERD',    'SHIELD',    'SMA',    'TAN MANAGED ACCOUNTS',    'UMA'},  'Managed Accounts',  \u0027ANBP_OtherRev_DD\u0027[Product] IN {'MF A-SHARE LMBF',    'MF A-SHARES',    'MF S-SHARE LMBF',    'MF S-SHARES',    'NON-PROP MUTUAL FUNDS'},  'Mutual Funds',  \u0027ANBP_OtherRev_DD\u0027[Product] IN {'TRUST'},  'Trust',  'Other')","columnType":"Calculated"}],"measures":[{"name":"YTD WID","expression":"CALCULATE(     sum(ANBP_OtherRev_DD[Value]),     ANBP_OtherRev_DD[ANBP_OtherRev] = 'WID',     DTRB_PERF_DATES[Cal_YTD_Flag] in {TRUE})","isHidden":false},{"name":"CY ANBP","expression":"CALCULATE(     sum(ANBP_OtherRev_DD[Value]),        DTRB_PERF_DATES[Cal_YTD_Flag] in {TRUE},        ANBP_OtherRev_DD[ANBP_OtherRev] = 'ANBP')","isHidden":false},{"name":"CY OtherRev","expression":"CALCULATE(     sum(ANBP_OtherRev_DD[Value]),    DTRB_PERF_DATES[Cal_YTD_Flag] in {TRUE},     ANBP_OtherRev_DD[ANBP_OtherRev] = 'OtherRev')","isHidden":false},{"name":"PY ANBP","expression":"CALCULATE(     sum(ANBP_OtherRev_DD[Value]),     DTRB_PERF_DATES[Cal_Prior_Year_Flag] in {TRUE},    ANBP_OtherRev_DD[ANBP_OtherRev] = 'ANBP')","isHidden":false},{"name":"PY WID","expression":"CALCULATE(     sum(ANBP_OtherRev_DD[Value]),     DTRB_PERF_DATES[Cal_Prior_Year_Flag] in {TRUE},     ANBP_OtherRev_DD[ANBP_OtherRev] = 'WID')","isHidden":false},{"name":"PY2 ANBP","expression":"CALCULATE(     sum(ANBP_OtherRev_DD[Value]),     DTRB_PERF_DATES[Cal_Prior_Year_2_Flag] in {TRUE},     ANBP_OtherRev_DD[ANBP_OtherRev] = 'ANBP')","isHidden":false},{"name":"PY2 WID","expression":"CALCULATE(     sum(ANBP_OtherRev_DD[Value]),     DTRB_PERF_DATES[Cal_Prior_Year_2_Flag] in {TRUE},     ANBP_OtherRev_DD[ANBP_OtherRev] = 'WID')","isHidden":false},{"name":"PYTD ANBP","expression":"CALCULATE(     sum(ANBP_OtherRev_DD[Value]),     ANBP_OtherRev_DD[ANBP_OtherRev] = 'ANBP',     DTRB_PERF_DATES[Cal_PYTD_Flag] in {TRUE})","isHidden":false},{"name":"PYTD WID","expression":"CALCULATE(     sum(ANBP_OtherRev_DD[Value]),     ANBP_OtherRev_DD[ANBP_OtherRev] = 'WID',     DTRB_PERF_DATES[Cal_PYTD_Flag] in {TRUE})","isHidden":false},{"name":"ANBP YOY Change","expression":"DIVIDE(([CY ANBP] - ANBP_OtherRev_DD[PYTD ANBP]),ANBP_OtherRev_DD[PYTD ANBP])","isHidden":false},{"name":"WID YOY Change","expression":"DIVIDE((ANBP_OtherRev_DD[YTD WID] - ANBP_OtherRev_DD[PYTD WID]),ANBP_OtherRev_DD[PYTD WID])","isHidden":false},{"name":"YTD OtherRev running total in CalWk","expression":"CALCULATE(\\t[YTD WID], \\tFILTER(\\t\\tALLSELECTED(\u0027ANBP_OtherRev_DD\u0027[CalWk]),\\t\\tISONORAFTER(\u0027ANBP_OtherRev_DD\u0027[CalWk], MAX(\u0027ANBP_OtherRev_DD\u0027[CalWk]), DESC)\\t))","isHidden":false},{"name":"PYTD OtherRev running total in CalWk","expression":"CALCULATE(\\t[PYTD WID],\\tFILTER(\\t\\tALLSELECTED(\u0027ANBP_OtherRev_DD\u0027[CalWk]),\\t\\tISONORAFTER(\u0027ANBP_OtherRev_DD\u0027[CalWk], MAX(\u0027ANBP_OtherRev_DD\u0027[CalWk]), DESC)\\t))","isHidden":false},{"name":"PY2 OtherRev running total in CalWk","expression":"CALCULATE(\\t[PY2 WID],\\tFILTER(\\t\\tALLSELECTED(\u0027ANBP_OtherRev_DD\u0027[CalWk]),\\t\\tISONORAFTER(\u0027ANBP_OtherRev_DD\u0027[CalWk], MAX(\u0027ANBP_OtherRev_DD\u0027[CalWk]), DESC)\\t))","isHidden":false},{"name":"PY OtherRev running total in CalWk","expression":"CALCULATE(\\t[PY WID],\\tFILTER(\\t\\tALLSELECTED(\u0027ANBP_OtherRev_DD\u0027[CalWk]),\\t\\tISONORAFTER(\u0027ANBP_OtherRev_DD\u0027[CalWk], MAX(\u0027ANBP_OtherRev_DD\u0027[CalWk]), DESC)\\t))","isHidden":false},{"name":"YTD_OtherRev_Cummulative","expression":"CALCULATE(    ANBP_OtherRev_DD[YTD OtherRev running total in CalWk],    DTRB_PERF_DATES[Cal_YTD_Flag] in {TRUE})","isHidden":false},{"name":"ANBP/Appt","expression":"divide([CY ANBP],\u0027Appointments/PC/JFW\u0027[YTD Appointments])","isHidden":false},{"name":"WID 4 Wk Average","expression":"CALCULATE(divide(ANBP_OtherRev_DD[YTD WID],4),\u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {TRUE})","isHidden":false},{"name":"WID Curr Wk","expression":"CALCULATE(ANBP_OtherRev_DD[YTD WID],\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_WK_TXT]='PREVIOUS')","isHidden":false},{"name":"OtherREV YTD Wk Average","expression":"CALCULATE(divide(ANBP_OtherRev_DD[YTD WID],max(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR])),\u0027DTRB_PERF_DATES\u0027[Cal_YTD_Flag] in {TRUE})","isHidden":false},{"name":"ANBP 4 Wk Average","expression":"CALCULATE(divide(ANBP_OtherRev_DD[CY ANBP],4),\u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag] in {TRUE})","isHidden":false},{"name":"ANBP Curr Wk","expression":"CALCULATE(ANBP_OtherRev_DD[CY ANBP],\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_WK_TXT] = 'PREVIOUS')","isHidden":false},{"name":"ANBP YTD Wk Average","expression":"CALCULATE(divide(ANBP_OtherRev_DD[CY ANBP],max(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR])),\u0027DTRB_PERF_DATES\u0027[Cal_YTD_Flag] in {TRUE})","isHidden":false},{"name":"4wk ANBP Gap","expression":"YTD_GOALS_DD[Weekly Need ANBP]-ANBP_OtherRev_DD[ANBP 4 Wk Average]","isHidden":false},{"name":"4wk Other Rev Gap","expression":"YTD_GOALS_DD[Weekly Need WID]-ANBP_OtherRev_DD[WID 4 Wk Average]","isHidden":false},{"name":"4wk ANBP (LH) Gap","expression":"YTD_GOALS_DD[Weekly Need ANBP (LH)]-ANBP_OtherRev_DD[ANBP 4 Wk Average]","isHidden":false},{"name":"YTD Total Sales","expression":"ANBP_OtherRev_DD[CY ANBP]+ANBP_OtherRev_DD[YTD WID]","isHidden":false},{"name":"Total Sales YOY Change","expression":"DIVIDE((ANBP_OtherRev_DD[YTD Total Sales] - ANBP_OtherRev_DD[PYTD Total Sales]),ANBP_OtherRev_DD[PYTD Total Sales])","isHidden":false},{"name":"PYTD Total Sales","expression":"ANBP_OtherRev_DD[PYTD ANBP]+ANBP_OtherRev_DD[PYTD WID]","isHidden":false},{"name":"PY Total Sales","expression":"CALCULATE(     sum(ANBP_OtherRev_DD[Value]),     DTRB_PERF_DATES[Cal_Prior_Year_Flag] in {TRUE})","isHidden":false},{"name":"PY2 Total Sales","expression":"CALCULATE(     sum(ANBP_OtherRev_DD[Value]),     DTRB_PERF_DATES[Cal_Prior_Year_2_Flag] in {TRUE})","isHidden":false}],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////VSSHR//SHARED//Public//DI and BI//Distribution Dashboard//ANBP_OtherRev_SD.csv'),[Delimiter=',', Columns=12, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'RALN_MKT_CDE', type text}, {'CalYr', Int64.Type}, {'CalWk', Int64.Type}, {'max_cal_dt', type date}, {'Value', type number}, {'ANBP_OtherRev', type text}}),    #'Grouped Rows' = Table.Group(#'Changed Type', {'RALN_RFO_CDE', 'MVP', 'Market', 'RALN_MKT_CDE', 'CalYr', 'CalWk', 'max_cal_dt', 'Product', 'ANBP_OtherRev'}, {{'Value', each List.Sum([Value]), type nullable number}}),    #'Appended Query' = Table.Combine({#'Grouped Rows', WID}),    #'Filtered Rows' = Table.SelectRows(#'Appended Query', each ([ANBP_OtherRev] \u003c\u003e 'OtherRev')),    #'Appended Query1' = Table.Combine({#'Filtered Rows', #'UL VUL Excess_Append Query'}),    #'Removed Columns' = Table.RemoveColumns(#'Appended Query1',{'beg_mth_dt', 'Endof Month_Friday', 'Mapping.Product Roll Up', 'ORZN_CDE_With Duplicate NPG Rows', 'Not YTD', 'MonthEndDate', 'MONTH'})in    #'Removed Columns'"}]},{"name":"Combined_Launch_Data","isHidden":false,"columns":[{"name":"Level ","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Level Detail","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"YTD Montly Avg","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Last Update Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Retention Monthly Avg","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[{"name":"CL Percent","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Experienced Advisor]),SELECTEDVALUE(RFO_Zone[Experienced Advisor],'N/A'),                   if(ISFILTERED(RFO_Zone[NPG]),SELECTEDVALUE(RFO_Zone[NPG],'N/A'),                   if(ISFILTERED(RFO_Zone[Core or Growth]),SELECTEDVALUE(RFO_Zone[Core or Growth],'N/A'),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]),'Thrivent Advisor Group')))))))returnCALCULATE(sum(Combined_Launch_Data[YTD Montly Avg]),Combined_Launch_Data[Level Detail] = FilterChoice)","isHidden":false},{"name":"ATE Retention Percent","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]),'Thrivent Advisor Group')))))returnCALCULATE(sum(Combined_Launch_Data[Retention Monthly Avg]),Combined_Launch_Data[Level Detail] = FilterChoice)","isHidden":false},{"name":"CL Percent Scorecard","expression":"var FilterChoice = SELECTEDVALUE(RFO_Zone[Organization Zone Code])                  returnCALCULATE(sum(Combined_Launch_Data[YTD Montly Avg]),Combined_Launch_Data[Level Detail] = FilterChoice)","isHidden":false},{"name":"CL Percent Mkt Scorecard","expression":"var FilterChoice = SELECTEDVALUE(RFO_Zone[Organization Zone Code])                  returnCALCULATE(sum(Combined_Launch_Data[YTD Montly Avg]),Combined_Launch_Data[Level Detail] = FilterChoice)","isHidden":false},{"name":"CL Percent MVP Scorecard","expression":"var FilterChoice = SELECTEDVALUE(MVPs[MVP_ID])                  returnCALCULATE(sum(Combined_Launch_Data[YTD Montly Avg]),Combined_Launch_Data[Level Detail] = FilterChoice)","isHidden":false}],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////VSSHR//SHARED//Public//DI and BI//Distribution Dashboard//Combined_Launch_Data.csv'),[Delimiter=',', Columns=7, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'YTD Montly Avg', Percentage.Type}, {'Last Update Date', type date}, {'Retention Monthly Avg', Percentage.Type}}),    #'Replaced Value' = Table.ReplaceValue(#'Changed Type','Career','Thrivent Advisor Group',Replacer.ReplaceText,{'Level '}),    #'Replaced Value1' = Table.ReplaceValue(#'Replaced Value','Career','Thrivent Advisor Group',Replacer.ReplaceText,{'Level Detail'}),    #'Removed Blank Rows' = Table.SelectRows(#'Replaced Value1', each not List.IsEmpty(List.RemoveMatchingItems(Record.FieldValues(_), {'', null}))),    #'Trimmed Text' = Table.TransformColumns(#'Removed Blank Rows',{{'Level Detail', Text.Trim, type text}})in    #'Trimmed Text'"}]},{"name":"Lags","isHidden":false,"columns":[{"name":"MeasureName","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"SelectedActualsLags","expression":"IF(HASONEVALUE(\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]),SWITCH(VALUES(\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]),'NFP', [YTD NFP PCs Goal],'Vet', [YTD Vet PC Goal]))","isHidden":false},{"name":"RankANBP","expression":"RANKX(ALLSELECTED(RFO_Zone[RFO Name]),\u0027YTD_GOALS_DD\u0027[% ANBP YTD])","isHidden":false},{"name":"RankOtherRev","expression":"RANKX(ALLSELECTED(RFO_Zone[RFO Name]),\u0027YTD_GOALS_DD\u0027[% WID YTD])","isHidden":false},{"name":"RankNewClients","expression":"RANKX(ALLSELECTED(RFO_Zone[RFO Name]),\u0027YTD_GOALS_DD\u0027[% NFC YTD])","isHidden":false},{"name":"RankWMFC","expression":"RANKX(ALLSELECTED(RFO_Zone[RFO Name]),\u0027YTD_GOALS_DD\u0027[% WMFC YTD])","isHidden":false},{"name":"RankCL","expression":"RANKX(ALLSELECTED(RFO_Zone[RFO Name]),\u0027YTD_GOALS_DD\u0027[% CL ME])","isHidden":false},{"name":"Sum_of_Lagging_Ranks","expression":"var ANBP_Rank = RANKX(ALLSELECTED(RFO_Zone[RFO Name]), \u0027YTD_GOALS_DD\u0027[% ANBP YTD])var NewClients_Rank = RANKX(ALLSELECTED(RFO_Zone[RFO Name]), \u0027YTD_GOALS_DD\u0027[% NFC YTD])var OtherRev_Rank = RANKX(ALLSELECTED(RFO_Zone[RFO Name]), \u0027YTD_GOALS_DD\u0027[% WID YTD])var CL_Rank = RANKX(ALLSELECTED(RFO_Zone[RFO Name]), \u0027YTD_GOALS_DD\u0027[% CL ME])var WMFC_Rank = RANKX(ALLSELECTED(RFO_Zone[RFO Name]), \u0027YTD_GOALS_DD\u0027[% WMFC YTD])var Advice_Rank = RANKX(ALLSELECTED(RFO_Zone[RFO Name]),\u0027Advice Adoption - TAG\u0027[Advice Adoption % TAG])RETURNANBP_Rank+NewClients_Rank+OtherRev_Rank+CL_Rank+WMFC_Rank+Advice_Rank","isHidden":false},{"name":"Lagging Indicator Goal Rank","expression":"RANKX(ALL(RFO_Zone[RFO Name]),\u0027Lags\u0027[Sum_of_Lagging_Ranks],,ASC)","isHidden":false},{"name":"Market RankANBP","expression":"RANKX(ALLSELECTED(Market_Leaders[Market_Leader]),\u0027YTD_GOALS_DD\u0027[% ANBP YTD])","isHidden":false},{"name":"Market RankCL","expression":"RANKX(ALLSELECTED(Market_Leaders[Market_Leader]),\u0027YTD_GOALS_DD\u0027[% CL ME])","isHidden":false},{"name":"Market RankNewClients","expression":"RANKX(ALLSELECTED(Market_Leaders[Market_Leader]),\u0027YTD_GOALS_DD\u0027[% NFC YTD])","isHidden":false},{"name":"Market RankOtherRev","expression":"RANKX(ALLSELECTED(Market_Leaders[Market_Leader]),\u0027YTD_GOALS_DD\u0027[% WID YTD])","isHidden":false},{"name":"Market RankWMFC","expression":"RANKX(ALLSELECTED(Market_Leaders[Market_Leader]),\u0027YTD_GOALS_DD\u0027[% WMFC YTD])","isHidden":false},{"name":"Sum_of_Market_Lagging_Ranks","expression":"var ANBP_Rank = RANKX(ALLSELECTED(Market_Leaders[Market_Leader]), \u0027YTD_GOALS_DD\u0027[% ANBP YTD])var NewClients_Rank = RANKX(ALLSELECTED(Market_Leaders[Market_Leader]), \u0027YTD_GOALS_DD\u0027[% NFC YTD])var OtherRev_Rank = RANKX(ALLSELECTED(Market_Leaders[Market_Leader]), \u0027YTD_GOALS_DD\u0027[% WID YTD])var CL_Rank = RANKX(ALLSELECTED(Market_Leaders[Market_Leader]), \u0027YTD_GOALS_DD\u0027[% CL ME])var WMFC_Rank = RANKX(ALLSELECTED(Market_Leaders[Market_Leader]), \u0027YTD_GOALS_DD\u0027[% WMFC YTD])RETURNANBP_Rank+NewClients_Rank+OtherRev_Rank+CL_Rank+WMFC_Rank","isHidden":false},{"name":"Market Lagging Indicator Goal Rank","expression":"RANKX(ALLSELECTED(Market_Leaders[Market_Leader]),\u0027Lags\u0027[Sum_of_Market_Lagging_Ranks],,ASC)","isHidden":false},{"name":"RankAdviceNC","expression":"RANKX(ALLSELECTED(RFO_Zone[RFO Name]),\u0027YTD_GOALS_DD\u0027[% of YTD NC Advice Goal])","isHidden":false},{"name":"MVP RankWMFC","expression":"RANKX(ALLSELECTED(MVPs[Market_Leader]),\u0027YTD_GOALS_DD\u0027[% WMFC YTD])","isHidden":false},{"name":"MVP RankANBP","expression":"RANKX(ALLSELECTED(MVPs[Market_Leader]),\u0027YTD_GOALS_DD\u0027[% ANBP YTD])","isHidden":false},{"name":"MVP RankNewClients","expression":"RANKX(ALLSELECTED(MVPs[Market_Leader]),\u0027YTD_GOALS_DD\u0027[% NFC YTD])","isHidden":false},{"name":"MVP RankOtherRev","expression":"RANKX(ALLSELECTED(MVPs[Market_Leader]),\u0027YTD_GOALS_DD\u0027[% WID YTD])","isHidden":false},{"name":"MVP Sum_of_Lagging_Ranks","expression":"var ANBP_Rank = RANKX(ALLSELECTED(MVPs[Market_Leader]), \u0027YTD_GOALS_DD\u0027[% ANBP YTD])var NewClients_Rank = RANKX(ALLSELECTED(MVPs[Market_Leader]), \u0027YTD_GOALS_DD\u0027[% NFC YTD])var OtherRev_Rank = RANKX(ALLSELECTED(MVPs[Market_Leader]), \u0027YTD_GOALS_DD\u0027[% WID YTD])var WMFC_Rank = RANKX(ALLSELECTED(MVPs[Market_Leader]), \u0027YTD_GOALS_DD\u0027[% WMFC YTD])var Advice_Rank = RANKX(ALLSELECTED(MVPs[Market_Leader]),\u0027Advice Adoption - MVP\u0027[Advice Adoption % MVP])var CL_Rank = RANKX(ALLSELECTED(MVPs[Market_Leader]), \u0027YTD_GOALS_DD\u0027[% CL ME])RETURNANBP_Rank+NewClients_Rank+OtherRev_Rank+WMFC_Rank+Advice_Rank+CL_Rank","isHidden":false},{"name":"MVP Lagging Indicator Goal Rank","expression":"RANKX(ALL(MVPs[Market_Leader]),\u0027Lags\u0027[MVP Sum_of_Lagging_Ranks],,ASC)","isHidden":false},{"name":"RankTotalSales","expression":"RANKX(ALLSELECTED(RFO_Zone[RFO Name]),[YTD Total Sales])","isHidden":false},{"name":"MVP RankTotalSales","expression":"RANKX(ALLSELECTED(MVPs[Market_Leader]),[YTD Total Sales])","isHidden":false},{"name":"Market RankTotalSales","expression":"RANKX(ALLSELECTED(RFO_Zone[Market Leader]),[YTD Total Sales])","isHidden":false},{"name":"MVP RankCL","expression":"RANKX(ALLSELECTED(MVPs[Market_Leader]),\u0027YTD_GOALS_DD\u0027[% CL ME])","isHidden":false}],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('JYwxDsIwEAS/cnLNJyASHWDRUFguDmdJTkrOyD6D8vuE0O2MRhuCO6o2nuiKL51aFUWt5EvuWzLJ6uIhuJuNKHTHB9qwm1/dTQK1urPnBLJMHuWVy8ya/t0DMoyGni6Yn9vHmZPoQB2/t2GLi3EF', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [MeasureName = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'MeasureName', type text}})in    #'Changed Type'"}]},{"name":"Leads","isHidden":false,"columns":[{"name":"MeasureName","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"SelectedActualsLeads","expression":"IF(HASONEVALUE(Leads[MeasureName]),SWITCH(VALUES(Leads[MeasureName]),'Appointments', \u0027Appointments/PC/JFW\u0027[YTD Appointments],'Total Prospect Connects', \u0027Appointments/PC/JFW\u0027[YTD Prospect Connects],'NFP Prospect Connects', \u0027Appointments/PC/JFW\u0027[YTD NFP Prospect Connects],'Leader JFW', \u0027Appointments/PC/JFW\u0027[YTD Leader JFW],'Score Qualifying CP+', \u0027CP _Plus\u0027[YTD CP Plus]))","isHidden":false},{"name":"RankAppts","expression":"RANKX(ALLSELECTED(RFO_Zone[RFO Name]),\u0027YTD_GOALS_DD\u0027[% Appts YTD])","isHidden":false},{"name":"RankPCs","expression":"RANKX(ALLSELECTED(RFO_Zone[RFO Name]),\u0027YTD_GOALS_DD\u0027[% Total PCs YTD])","isHidden":false},{"name":"RankNFPPCs","expression":"RANKX(ALLSELECTED(RFO_Zone[RFO Name]),\u0027YTD_GOALS_DD\u0027[% NFP PCs YTD])","isHidden":false},{"name":"RankLeaderJFW","expression":"RANKX(ALLSELECTED(RFO_Zone[RFO Name]),\u0027YTD_GOALS_DD\u0027[% LeaderJFW YTD])","isHidden":false},{"name":"RankScoreQualifyingCP","expression":"RANKX(ALLSELECTED(RFO_Zone[RFO Name]),\u0027YTD_GOALS_DD\u0027[% CPPlus YTD])","isHidden":false},{"name":"Sum_of_Leading_Ranks","expression":"var Appts_Rank = RANKX(ALLSELECTED(RFO_Zone[RFO Name]), \u0027YTD_GOALS_DD\u0027[% Appts YTD])var NFP_PC_Rank = RANKX(ALLSELECTED(RFO_Zone[RFO Name]), \u0027YTD_GOALS_DD\u0027[% NFP PCs YTD])var PCs_Rank = RANKX(ALLSELECTED(RFO_Zone[RFO Name]), \u0027YTD_GOALS_DD\u0027[% Total PCs YTD])var Leader_JFW_Rank = RANKX(ALLSELECTED(RFO_Zone[RFO Name]), \u0027YTD_GOALS_DD\u0027[% LeaderJFW YTD])var Score_Qualifying_CP_Rank = RANKX(ALLSELECTED(RFO_Zone[RFO Name]), \u0027YTD_GOALS_DD\u0027[% CPPlus YTD])RETURNAppts_Rank+NFP_PC_Rank+PCs_Rank+Leader_JFW_Rank+Score_Qualifying_CP_Rank","isHidden":false},{"name":"Leading Indicator Goal Rank","expression":"RANKX(ALL(RFO_Zone[RFO Name]),Leads[Sum_of_Leading_Ranks],,ASC)","isHidden":false},{"name":"Market Rank Appts","expression":"RANKX(ALLSELECTED(Market_Leaders[Market_Leader]), \u0027YTD_GOALS_DD\u0027[% Appts YTD])","isHidden":false},{"name":"Market Rank Leader JFW","expression":"RANKX(ALLSELECTED(Market_Leaders[Market_Leader]),\u0027YTD_GOALS_DD\u0027[% LeaderJFW YTD])","isHidden":false},{"name":"Market Rank NFPPCs","expression":"RANKX(ALLSELECTED(Market_Leaders[Market_Leader]),\u0027YTD_GOALS_DD\u0027[% NFP PCs YTD])","isHidden":false},{"name":"Market RankPCs","expression":"RANKX(ALLSELECTED(Market_Leaders[Market_Leader]), \u0027YTD_GOALS_DD\u0027[% Total PCs YTD])","isHidden":false},{"name":"Market RankScoreQualifyingCP","expression":"RANKX(ALLSELECTED(Market_Leaders[Market_Leader]),\u0027YTD_GOALS_DD\u0027[% CPPlus YTD])","isHidden":false},{"name":"Market Rank Referrals per FP","expression":"RANKX(ALLSELECTED(Market_Leaders[Market_Leader]),Referrals[YTD Referrals per FP])","isHidden":false},{"name":"Market Rank Appts/FP","expression":"RANKX(ALLSELECTED(Market_Leaders[Market_Leader]),\u0027YTD_GOALS_DD\u0027[% Appts/FP YTD])","isHidden":false},{"name":"Market Rank PCs/FP","expression":"RANKX(ALLSELECTED(Market_Leaders[Market_Leader]),\u0027Appointments/PC/JFW\u0027[YTD PCs per FP])","isHidden":false},{"name":"Sum_of_Market_Leading_Ranks","expression":"var Appts_Rank = RANKX(ALLSELECTED(Market_Leaders[Market_Leader]), \u0027YTD_GOALS_DD\u0027[% Appts YTD])var NFP_PC_Rank = RANKX(ALLSELECTED(Market_Leaders[Market_Leader]), \u0027YTD_GOALS_DD\u0027[% NFP PCs YTD])var PCs_Rank = RANKX(ALLSELECTED(Market_Leaders[Market_Leader]), \u0027YTD_GOALS_DD\u0027[% Total PCs YTD])var Leader_JFW_Rank = RANKX(ALLSELECTED(Market_Leaders[Market_Leader]), \u0027YTD_GOALS_DD\u0027[% LeaderJFW YTD])var Score_Qualifying_CP_Rank = RANKX(ALLSELECTED(Market_Leaders[Market_Leader]), \u0027YTD_GOALS_DD\u0027[% CPPlus YTD])var ApptsPerFP = RANKX(ALLSELECTED(Market_Leaders[Market_Leader]), \u0027YTD_GOALS_DD\u0027[% Appts/FP YTD])var PCsPerFP = RANKX(ALLSELECTED(Market_Leaders[Market_Leader]), \u0027Appointments/PC/JFW\u0027[YTD PCs per FP])RETURNAppts_Rank+NFP_PC_Rank+PCs_Rank+Leader_JFW_Rank+Score_Qualifying_CP_Rank+ApptsPerFP+PCsPerFP","isHidden":false},{"name":"Market Leading Indicator Goal Rank","expression":"RANKX(ALLSELECTED(Market_Leaders[Market_Leader]),Leads[Sum_of_Market_Leading_Ranks],,ASC)","isHidden":false},{"name":"RankApptsFP","expression":"RANKX(ALLSELECTED(RFO_Zone[RFO Name]),\u0027YTD_GOALS_DD\u0027[% Appts/FP YTD])","isHidden":false},{"name":"Rank PCs/FP","expression":"RANKX(ALLSELECTED(RFO_Zone[RFO Name]),\u0027Appointments/PC/JFW\u0027[YTD PCs per FP])","isHidden":false},{"name":"Rank Referrals per FP","expression":"RANKX(ALLSELECTED(RFO_Zone[RFO Name]),Referrals[YTD Referrals per FP])","isHidden":false},{"name":"MVP RankAppts","expression":"RANKX(ALLSELECTED(MVPs[Market_Leader]),\u0027YTD_GOALS_DD\u0027[% Appts YTD])","isHidden":false},{"name":"MVP RankPCs","expression":"RANKX(ALLSELECTED(MVPs[Market_Leader]),\u0027YTD_GOALS_DD\u0027[% Total PCs YTD])","isHidden":false},{"name":"MVP RankScoreQualifyingCP","expression":"RANKX(ALLSELECTED(MVPs[Market_Leader]),\u0027YTD_GOALS_DD\u0027[% CPPlus YTD])","isHidden":false},{"name":"MVP Rank Referrals per FP","expression":"RANKX(ALLSELECTED(MVPs[Market_Leader]),Referrals[YTD Referrals per FP])","isHidden":false},{"name":"MVP Rank NFA PCs","expression":"RANKX(ALLSELECTED(MVPs[Market_Leader]),\u0027YTD_GOALS_DD\u0027[% NFP PCs YTD])","isHidden":false},{"name":"MVP Sum_of_Leading_Ranks","expression":"var Appt_Rank = RANKX(ALLSELECTED(MVPs[Market_Leader]), \u0027YTD_GOALS_DD\u0027[% Appts YTD])var ProspectConnect_Rank = RANKX(ALLSELECTED(MVPs[Market_Leader]), \u0027YTD_GOALS_DD\u0027[% Total PCs YTD])var NFA_PC_Rank = RANKX(ALLSELECTED(MVPs[Market_Leader]), \u0027YTD_GOALS_DD\u0027[% NFP PCs YTD])var CP_Rank = RANKX(ALLSELECTED(MVPs[Market_Leader]), \u0027YTD_GOALS_DD\u0027[% CPPlus YTD])RETURNAppt_Rank+ProspectConnect_Rank+NFA_PC_Rank+CP_Rank","isHidden":false},{"name":"MVP Leading Indicator Goal Rank","expression":"RANKX(ALL(MVPs[Market_Leader]),\u0027Leads\u0027[MVP Sum_of_Leading_Ranks],,ASC)","isHidden":false}],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i45WciwoyM/MK8lNzSspVorViVYKyS9JzFEIKMovLkhNLlFwzs/LA9IQOT+3ABwyPqmJKalFCl5u4WBucHJ+UapCYGliTmZaZWZeuoJzgLZSbCwA', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [MeasureName = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'MeasureName', type text}})in    #'Changed Type'"}]},{"name":"YTD_GOALS_DD","isHidden":false,"columns":[{"name":"Level","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Metric","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Date_of_Goal","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Goal_Amount","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[{"name":"YTD ANBP Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[NPG]),SELECTEDVALUE(RFO_Zone[NPG]),                   if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Core or Growth]),SELECTEDVALUE(RFO_Zone[Core or Growth]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]),'Enterprise Goal'))))))))var PriorSunday = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT], LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT') - 2)               returnif(isfiltered(RFO_Zone[Market Leader]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Annual New Business Production (ANBP)', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'ANBP', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday))                 ","isHidden":false},{"name":"% ANBP YTD","expression":"DIVIDE([CY ANBP],YTD_GOALS_DD[YTD ANBP Goal])","isHidden":false},{"name":"YE ANBP Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[NPG]),SELECTEDVALUE(RFO_Zone[NPG]),                   if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Core or Growth]),SELECTEDVALUE(RFO_Zone[Core or Growth]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]),'Enterprise Goal'))))))))var maxyeardt = CALCULATE(max(DTRB_PERF_DATES[CAL_DAY_DT]), DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT')                   returnif(isfiltered(RFO_Zone[NPG]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'ANBP', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxyeardt),if(isfiltered(RFO_Zone[Market Leader]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Annual New Business Production (ANBP)', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxyeardt),if(FilterChoice = 'TFGT',CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'ANBP', YTD_GOALS_DD[Level] = 'Virtual Advice', YTD_GOALS_DD[Date_of_Goal] = maxyeardt),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'ANBP', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxyeardt))))  ","isHidden":false},{"name":"YTD WMFC Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[NPG]),SELECTEDVALUE(RFO_Zone[NPG]),                   if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Core or Growth]),SELECTEDVALUE(RFO_Zone[Core or Growth]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]),'Enterprise Goal'))))))))var PriorSunday = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT], LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT') - 2)                   returnif(isfiltered(RFO_Zone[NPG]),    CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'WCFC', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday),if(ISFILTERED(RFO_Zone[Market Leader]),    CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Weighted Member Facing Capacity', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday),if(FilterChoice = 'TFGT', CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'WMFC', YTD_GOALS_DD[Level] = 'Virtual Advice', YTD_GOALS_DD[Date_of_Goal] = PriorSunday),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'WMFC', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday))))","isHidden":false},{"name":"YTD NFC Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[NPG]),SELECTEDVALUE(RFO_Zone[NPG]),                   if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Core or Growth]),SELECTEDVALUE(RFO_Zone[Core or Growth]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]),'Enterprise Goal'))))))))var PriorSunday = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT], date(2023,12,31))                   returnif(isfiltered(RFO_Zone[NPG]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'New Clients', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday),if(isfiltered(RFO_Zone[Market Leader]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'New Clients (NC)', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'NFC-FieldReporting', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday)))  ","isHidden":false},{"name":"YTD WID Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[NPG]),SELECTEDVALUE(RFO_Zone[NPG]),                   if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Core or Growth]),SELECTEDVALUE(RFO_Zone[Core or Growth]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]),'Enterprise Goal'))))))))var PriorSunday = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT],  LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT') - 2)                returnif(isfiltered(RFO_Zone[NPG]),    CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'RFRB', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday),if(isfiltered(RFO_Zone[Market Leader]),    CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Revenue from Other Business', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday),if(FilterChoice = 'TFGT',    CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'OtherRevenue', YTD_GOALS_DD[Level] = 'Virtual Advice', YTD_GOALS_DD[Date_of_Goal] = PriorSunday),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'OtherRevenue', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday))))","isHidden":false},{"name":"ME CL Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]),'Enterprise Goal')))))))var CLupdate = max(Combined_Launch_Data[Last Update Date])returnif(isfiltered(RFO_Zone[Market Leader]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Combined Launch', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = CLupdate),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'CombinedLaunch', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = CLupdate))","isHidden":false},{"name":"% WMFC YTD","expression":"divide(WMFC_DD[cy_prior_wk_WMFC],YTD_GOALS_DD[YTD WMFC Goal])","isHidden":false},{"name":"% NFC YTD","expression":"divide(\u0027New Clients\u0027[YTD_NC],YTD_GOALS_DD[YTD NFC Goal])","isHidden":false},{"name":"% WID YTD","expression":"Divide(ANBP_OtherRev_DD[YTD WID],YTD_GOALS_DD[YTD WID Goal])","isHidden":false},{"name":"YE WMFC Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[NPG]),SELECTEDVALUE(RFO_Zone[NPG]),                   if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Core or Growth]),SELECTEDVALUE(RFO_Zone[Core or Growth]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]),'Enterprise Goal'))))))))var maxdayperfyear = CALCULATE(max(DTRB_PERF_DATES[CAL_DAY_DT]), DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT')returnif(ISFILTERED(RFO_Zone[NPG]),    CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'WCFC', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear),if(ISFILTERED(RFO_Zone[Market Leader]),    CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Weighted Member Facing Capacity', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear),if(FilterChoice = 'TFGT', CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'WMFC', YTD_GOALS_DD[Level] = 'Virtual Advice', YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'WMFC', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear)))                   )","isHidden":false},{"name":"YE WID Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[NPG]),SELECTEDVALUE(RFO_Zone[NPG]),                   if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Core or Growth]),SELECTEDVALUE(RFO_Zone[Core or Growth]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]),'Enterprise Goal'))))))))var maxyeardt = CALCULATE(max(DTRB_PERF_DATES[CAL_DAY_DT]), DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT')          returnif(isfiltered(RFO_Zone[NPG]),    CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'RFRB', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxyeardt),if(isfiltered(RFO_Zone[Market Leader]),    CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Revenue from Other Business', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxyeardt),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'OtherRevenue', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxyeardt)))","isHidden":false},{"name":"YE NFC Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[NPG]),SELECTEDVALUE(RFO_Zone[NPG]),                   if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Core or Growth]),SELECTEDVALUE(RFO_Zone[Core or Growth]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]),'Enterprise Goal'))))))))  var maxdayperfyear = CALCULATE(max(DTRB_PERF_DATES[CAL_DAY_DT]), DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT')returnif(isfiltered(RFO_Zone[NPG]),    CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'New Clients', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear),if(isfiltered(RFO_Zone[Market Leader]),    CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'New Clients (NC)', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear),if(FilterChoice = 'TFGT',    CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'NFC-FieldReporting', YTD_GOALS_DD[Level] = 'Virtual Advice', YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'NFC-FieldReporting', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear))))","isHidden":false},{"name":"YTD Appt Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[NPG]),SELECTEDVALUE(RFO_Zone[NPG]),                   if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Core or Growth]),SELECTEDVALUE(RFO_Zone[Core or Growth]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]), 'Thrivent Advisor Group'))))))))var PriorSunday = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT],  LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT') - 2)                   returnif(isfiltered(RFO_Zone[NPG]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Appointments', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday),if(isfiltered(RFO_Zone[Market Leader]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Total Appointments', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'TotalAppointments', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday)))","isHidden":false},{"name":"YTD CPPlus Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[NPG]),SELECTEDVALUE(RFO_Zone[NPG]),                   if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Core or Growth]),SELECTEDVALUE(RFO_Zone[Core or Growth]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]), 'Thrivent Advisor Group'))))))))var PriorSunday = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT],  LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT') - 2)                   returnif(isfiltered(RFO_Zone[Market Leader]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Score Qualifying CP+', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'CPScoreQualifying', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday))","isHidden":false},{"name":"YTD CL Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[NPG]),SELECTEDVALUE(RFO_Zone[NPG]),                   if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Core or Growth]),SELECTEDVALUE(RFO_Zone[Core or Growth]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]), 'Thrivent Advisor Group'))))))))var PriorSunday = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT], LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT') - 2)returnif(isfiltered(RFO_Zone[Market Leader]),    CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Combined Launch', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'CombinedLaunch', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday))","isHidden":false},{"name":"YTD LeaderJFW Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                    if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))))))var PriorSunday = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT], LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT') - 7)                   returnif(isfiltered(RFO_Zone[Market Leader]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Leader JFW', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'LeaderJFW', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday))","isHidden":false},{"name":"YTD NFP PCs Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))))))var PriorSunday = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT], LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT') - 2)                   returnif(isfiltered(RFO_Zone[Market Leader]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Prospect Connects (NFP)', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'NFRProspectConnects', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday))","isHidden":false},{"name":"YTD Total PCs Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[NPG]),SELECTEDVALUE(RFO_Zone[NPG]),                   if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Core or Growth]),SELECTEDVALUE(RFO_Zone[Core or Growth]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]), 'RFO Sum'))))))))var PriorSunday = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT], LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT') - 2)returnif(isfiltered(RFO_Zone[NPG]),    CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Prospect Connects', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday),if(isfiltered(RFO_Zone[Market Leader]),    CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Prospect Connects (Total)', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday),if(FilterChoice = 'Thrivent Advisor Group',    CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'TotalProspectConnects', YTD_GOALS_DD[Level] = 'RFO Sum', YTD_GOALS_DD[Date_of_Goal] = PriorSunday),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'TotalProspectConnects', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday))))","isHidden":false},{"name":"YE Appt Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[NPG]),SELECTEDVALUE(RFO_Zone[NPG]),                   if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Core or Growth]),SELECTEDVALUE(RFO_Zone[Core or Growth]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]), 'Thrivent Advisor Group'))))))))var maxdayperfyear = CALCULATE(max(DTRB_PERF_DATES[CAL_DAY_DT]), DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT')returnif(isfiltered(RFO_Zone[NPG]),    CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Appointments', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear),if(isfiltered(RFO_Zone[Market Leader]),    CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Total Appointments', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'TotalAppointments', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear)))","isHidden":false},{"name":"YE CPPlus Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[NPG]),SELECTEDVALUE(RFO_Zone[NPG]),                   if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Core or Growth]),SELECTEDVALUE(RFO_Zone[Core or Growth]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]), 'Thrivent Advisor Group'))))))))var maxdayperfyear = CALCULATE(max(DTRB_PERF_DATES[CAL_DAY_DT]), DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT')returnif(isfiltered(RFO_Zone[Market Leader]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Score Qualifying CP+', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'CPScoreQualifying', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear))","isHidden":false},{"name":"YE CL Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[NPG]),SELECTEDVALUE(RFO_Zone[NPG]),                   if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Core or Growth]),SELECTEDVALUE(RFO_Zone[Core or Growth]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]), 'Thrivent Advisor Group'))))))))var maxdayperfyear = CALCULATE(max(DTRB_PERF_DATES[CAL_DAY_DT]), DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT')returnif(isfiltered(RFO_Zone[Market Leader]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Combined Launch', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'CombinedLaunch', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear)) ","isHidden":false},{"name":"YE LeaderJFW Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))))))var maxdayperfyear = CALCULATE(max(DTRB_PERF_DATES[CAL_DAY_DT]), DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT')returnif(isfiltered(RFO_Zone[Market Leader]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Leader JFW', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'LeaderJFW', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear)) ","isHidden":false},{"name":"YE NFP PCs Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))))))var maxdayperfyear = CALCULATE(max(DTRB_PERF_DATES[CAL_DAY_DT]), DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT')returnif(isfiltered(RFO_Zone[Market Leader]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Prospect Connects (NFP)', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'NFRProspectConnects', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear)) ","isHidden":false},{"name":"YE Total PCs Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[NPG]),SELECTEDVALUE(RFO_Zone[NPG]),                   if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Core or Growth]),SELECTEDVALUE(RFO_Zone[Core or Growth]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]), 'RFO Sum'))))))))var maxdayperfyear = CALCULATE(max(DTRB_PERF_DATES[CAL_DAY_DT]), DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT')returnif(isfiltered(RFO_Zone[NPG]),    CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Prospect Connects', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear),if(isfiltered(RFO_Zone[Market Leader]),    CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Prospect Connects (Total)', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear),if(FilterChoice = 'Thrivent Advisor Group',    CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'TotalProspectConnects', YTD_GOALS_DD[Level] = 'RFO Sum', YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'TotalProspectConnects', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear))))","isHidden":false},{"name":"% Appts YTD","expression":"DIVIDE(\u0027Appointments/PC/JFW\u0027[YTD Appointments],\u0027YTD_GOALS_DD\u0027[YTD Appt Goal])","isHidden":false},{"name":"% CPPlus YTD","expression":"divide(\u0027CP _Plus\u0027[YTD CP Plus],\u0027YTD_GOALS_DD\u0027[YTD CPPlus Goal])","isHidden":false},{"name":"% LeaderJFW YTD","expression":"divide(\u0027Appointments/PC/JFW\u0027[YTD Leader JFW],\u0027YTD_GOALS_DD\u0027[YTD LeaderJFW Goal])","isHidden":false},{"name":"% NFP PCs YTD","expression":"divide(\u0027Appointments/PC/JFW\u0027[YTD PCs per NFP],\u0027YTD_GOALS_DD\u0027[NFP PC/NFP Goal])","isHidden":false},{"name":"% Total PCs YTD","expression":"divide(\u0027Appointments/PC/JFW\u0027[YTD Prospect Connects],\u0027YTD_GOALS_DD\u0027[YTD Total PCs Goal])","isHidden":false},{"name":"Pace Goal","expression":".50","isHidden":false},{"name":"% CL ME","expression":"divide(\u0027Combined_Launch_Data\u0027[CL Percent],\u0027YTD_GOALS_DD\u0027[ME CL Goal])","isHidden":false},{"name":"Goal Variance CL","expression":"\u0027Combined_Launch_Data\u0027[CL Percent] - \u0027YTD_GOALS_DD\u0027[ME CL Goal]","isHidden":false},{"name":"% ANBP YE","expression":"DIVIDE([CY ANBP],YTD_GOALS_DD[YE ANBP Goal])","isHidden":false},{"name":"% OtherRev YE","expression":"Divide(ANBP_OtherRev_DD[YTD WID],YTD_GOALS_DD[YE WID Goal])","isHidden":false},{"name":"% Appts YE","expression":"DIVIDE(\u0027Appointments/PC/JFW\u0027[YTD Appointments],\u0027YTD_GOALS_DD\u0027[YE Appt Goal])","isHidden":false},{"name":"% Total PCs YE","expression":"divide(\u0027Appointments/PC/JFW\u0027[YTD Prospect Connects],\u0027YTD_GOALS_DD\u0027[YE Total PCs Goal])","isHidden":false},{"name":"% LeaderJFW YE","expression":"divide(\u0027Appointments/PC/JFW\u0027[YTD Leader JFW],\u0027YTD_GOALS_DD\u0027[YE LeaderJFW Goal])","isHidden":false},{"name":"% NFC YE","expression":"divide(\u0027New Clients\u0027[YTD_NC],YTD_GOALS_DD[YE NFC Goal])","isHidden":false},{"name":"% Appts YTD Stoplights","expression":"IF([% Appts YTD]\u003e=1,UNICHAR(10003),IF([% Appts YTD]\u003e.9, UNICHAR(11198),UNICHAR(10003)))\u0026' '\u0026FORMAT([% Appts YTD],'Percent')","isHidden":false},{"name":"Appts/FP Goal","expression":"6.0","isHidden":false},{"name":"% Appts/FP YTD","expression":"divide(\u0027Appointments/PC/JFW\u0027[YTD Appts per FP],\u0027YTD_GOALS_DD\u0027[Appts/FP Goal])","isHidden":false},{"name":"NFP Appts/NFP Goal","expression":"5.0","isHidden":false},{"name":"% NFP Appts/NFP YTD","expression":"divide(\u0027Appointments/PC/JFW\u0027[YTD NFP Appts/NFP],\u0027YTD_GOALS_DD\u0027[NFP Appts/NFP Goal])","isHidden":false},{"name":"% NFP PCs YE","expression":"divide(\u0027Appointments/PC/JFW\u0027[YTD NFP Prospect Connects],\u0027YTD_GOALS_DD\u0027[YE NFP PCs Goal])","isHidden":false},{"name":"% WMFC YE","expression":"divide(WMFC_DD[cy_prior_wk_WMFC],YTD_GOALS_DD[YE WMFC Goal])","isHidden":false},{"name":"% CPPlus YE","expression":"divide(\u0027CP _Plus\u0027[YTD CP Plus],\u0027YTD_GOALS_DD\u0027[YE CPPlus Goal])","isHidden":false},{"name":"Avg Lead % to Target","expression":"(YTD_GOALS_DD[% Appts YTD]+\u0027YTD_GOALS_DD\u0027[% Total PCs YTD]+\u0027YTD_GOALS_DD\u0027[% NFP PCs YTD]+\u0027YTD_GOALS_DD\u0027[% LeaderJFW YTD]+\u0027YTD_GOALS_DD\u0027[% CPPlus YTD])/5","isHidden":false},{"name":"Avg Lag % to Target","expression":"(YTD_GOALS_DD[% ANBP YTD]+\u0027YTD_GOALS_DD\u0027[% WID YTD]+\u0027YTD_GOALS_DD\u0027[% NFC YTD]+\u0027YTD_GOALS_DD\u0027[% CL ME]+\u0027YTD_GOALS_DD\u0027[% WMFC YTD])/5","isHidden":false},{"name":"% CL YE","expression":"divide(\u0027Combined_Launch_Data\u0027[CL Percent],\u0027YTD_GOALS_DD\u0027[YE CL Goal])","isHidden":false},{"name":"YTD Vet PC Goal","expression":"0.5","isHidden":false},{"name":"YE Vet PC Goal","expression":"0.5","isHidden":false},{"name":"% Vet PCs YE","expression":"divide(\u0027Appointments/PC/JFW\u0027[YTD PCs per VET],\u0027YTD_GOALS_DD\u0027[YE Vet PC Goal])","isHidden":false},{"name":"% Vet PCs YTD","expression":"divide(\u0027Appointments/PC/JFW\u0027[YTD PCs per VET],\u0027YTD_GOALS_DD\u0027[YTD Vet PC Goal])","isHidden":false},{"name":"YE Referrals Goal","expression":"2.0","isHidden":false},{"name":"% of YE Goal Referrals","expression":"divide([YTD Referrals per FP],[YE Referrals Goal])","isHidden":false},{"name":"Weekly Need New Clients","expression":"var WeeksRemaining=calculate(52-MAX(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR]),DTRB_PERF_DATES[YTD Flag two Sundays] in {TRUE})return    divide(\u0027YTD_GOALS_DD\u0027[YE NFC Goal]-[YTD_NC],WeeksRemaining)","isHidden":false},{"name":"NFC YE Gap","expression":"\u0027YTD_GOALS_DD\u0027[YE NFC Goal]-\u0027New Client Dataflow\u0027[YTD_NFC]","isHidden":false},{"name":"Weekly Need ANBP","expression":"var WeeksRemaining=calculate(52-MAX(ANBP_OtherRev_DD[CalWk]),DTRB_PERF_DATES[Cal_YTD_Flag] in {TRUE})return    divide(\u0027YTD_GOALS_DD\u0027[YE ANBP Goal]-\u0027ANBP_OtherRev_DD\u0027[CY ANBP],WeeksRemaining)","isHidden":false},{"name":"Weekly Need WID","expression":"var WeeksRemaining=calculate(52-MAX(ANBP_OtherRev_DD[CalWk]),DTRB_PERF_DATES[Cal_YTD_Flag] in {TRUE})return    divide(\u0027YTD_GOALS_DD\u0027[YE WID Goal]-\u0027ANBP_OtherRev_DD\u0027[YTD WID],WeeksRemaining)","isHidden":false},{"name":"Weekly Need Appts","expression":"var WeeksRemaining=calculate(52-MAX(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR]),DTRB_PERF_DATES[YTD Flag] in {TRUE})return    divide(\u0027YTD_GOALS_DD\u0027[YE Appt Goal]-\u0027Appointments/PC/JFW\u0027[YTD Appointments],WeeksRemaining)","isHidden":false},{"name":"Weekly Need Total PCs","expression":"var WeeksRemaining=calculate(52-MAX(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR]),DTRB_PERF_DATES[YTD Flag] in {TRUE})return    divide(\u0027YTD_GOALS_DD\u0027[YE Total PCs Goal]-\u0027Appointments/PC/JFW\u0027[YTD Prospect Connects],WeeksRemaining)","isHidden":false},{"name":"Weekly Need Leader JFW","expression":"var WeeksRemaining=calculate(52-MAX(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR]),DTRB_PERF_DATES[YTD Flag] in {TRUE})return    divide(\u0027YTD_GOALS_DD\u0027[YE LeaderJFW Goal]-\u0027Appointments/PC/JFW\u0027[YTD Leader JFW],WeeksRemaining)","isHidden":false},{"name":"Weekly Need CP+","expression":"var WeeksRemaining=calculate(52-MAX(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR]),DTRB_PERF_DATES[YTD Flag] in {TRUE})return    if(divide(\u0027YTD_GOALS_DD\u0027[YE CPPlus Goal]-\u0027CP _Plus\u0027[YTD CP Plus],WeeksRemaining)\u003c=0,'0',divide(\u0027YTD_GOALS_DD\u0027[YE CPPlus Goal]-\u0027CP _Plus\u0027[YTD CP Plus],WeeksRemaining))","isHidden":false},{"name":"Weekly Need NFP PCs","expression":"var WeeksRemaining=calculate(52-MAX(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR]),DTRB_PERF_DATES[YTD Flag] in {TRUE})return    divide(\u0027YTD_GOALS_DD\u0027[YE NFP PCs Goal]-\u0027Appointments/PC/JFW\u0027[YTD NFP Prospect Connects],WeeksRemaining)","isHidden":false},{"name":"Weekly Need WMFC","expression":"var WeeksRemaining=calculate(52-MAX(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR]),DTRB_PERF_DATES[YTD Flag] in {TRUE})return    divide(\u0027YTD_GOALS_DD\u0027[YE WMFC Goal]-WMFC_DD[cy_prior_wk_WMFC],WeeksRemaining)","isHidden":false},{"name":"YE Applications Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))))))    var maxdayperfyear = CALCULATE(max(DTRB_PERF_DATES[CAL_DAY_DT]), DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT')returnif(isfiltered(RFO_Zone[Market Leader]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'LHA Applications', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'LHA Applications', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear)) ","isHidden":false},{"name":"Weekly Need Appts/FP","expression":"var WeeksRemaining=calculate(52-MAX(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR]),DTRB_PERF_DATES[YTD Flag] in {TRUE})return    divide(divide(\u0027YTD_GOALS_DD\u0027[Total FP Appointment Goal]-\u0027Appointments/PC/JFW\u0027[YTD Appointments],WeeksRemaining),Capacity[cy_prior_wk_FPs])","isHidden":false},{"name":"Weekly Need NFP Appts/NFP","expression":"var WeeksRemaining=calculate(52-MAX(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR]),DTRB_PERF_DATES[YTD Flag] in {TRUE})return    CALCULATE(divide(divide(\u0027YTD_GOALS_DD\u0027[Total NFP Appointment Goal]-\u0027Appointments/PC/JFW\u0027[YTD Appointments],WeeksRemaining),Capacity[cy_prior_wk_NFPs]),\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]='NFP')","isHidden":false},{"name":"Total NFP Appointment Goal","expression":"[NFP Appts/NFP Goal]*[cy_prior_wk_NFPs]*52","isHidden":false},{"name":"Total FP Appointment Goal","expression":"[Appts/FP Goal]*[cy_prior_wk_FPs]*52","isHidden":false},{"name":"NFP PC/NFP Goal","expression":"1.25","isHidden":false},{"name":"% NFP PCs/NFP YTD","expression":"divide(\u0027Appointments/PC/JFW\u0027[YTD PCs per NFP],\u0027YTD_GOALS_DD\u0027[NFP PC/NFP Goal])","isHidden":false},{"name":"YE Vet PCs Goal","expression":"[YE Total PCs Goal]-[YE NFP PCs Goal]","isHidden":false},{"name":"TEST Vet PC Goal","expression":"[YTD Prospect Connects] - ","isHidden":false},{"name":"YE FR Contracts Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[NPG]),SELECTEDVALUE(RFO_Zone[NPG]),                   if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Core or Growth]),SELECTEDVALUE(RFO_Zone[Core or Growth]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]), 'Thrivent Advisor Group'))))))))var maxdayperfyear = CALCULATE(max(DTRB_PERF_DATES[CAL_DAY_DT]), DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT')returnCALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'FRContracts', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear) ","isHidden":false},{"name":"% FR Contracts YE","expression":"divide(\u0027Contracts\u0027[cy_prior_wk_contracts],\u0027YTD_GOALS_DD\u0027[YE FR Contracts Goal])","isHidden":false},{"name":"YTD VET PCs Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]))))))var PriorSunday = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT],  LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT') - 7)                   returnif(isfiltered(RFO_Zone[Market Leader]),'N/A',CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'VetProspectConnect', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday))","isHidden":false},{"name":"% NFP PC YTD","expression":"divide(\u0027Appointments/PC/JFW\u0027[YTD NFP Prospect Connects],\u0027YTD_GOALS_DD\u0027[YTD NFP PCs Goal])","isHidden":false},{"name":"% Vet PC YTD","expression":"divide(\u0027Appointments/PC/JFW\u0027[YTD Vet Prospect Connects],\u0027YTD_GOALS_DD\u0027[YTD VET PCs Goal])","isHidden":false},{"name":"YTD PC Goal SWITCH","expression":"if(HASONEVALUE(\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]),SWITCH(VALUES(\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]),'NFP', [% NFP PC YTD],'VET', [% Vet PC YTD]), [% Total PCs YTD])","isHidden":false},{"name":"YE NC Advice Goal","expression":"0.2 * [YE NFC Advice Goal]","isHidden":false},{"name":"YTD NC Advice Goal","expression":"0.2 * [YTD NFC Advice Goal]","isHidden":false},{"name":"YTD NFC Advice Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]),'Thrivent Advisor Group')))))var PriorSunday = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT], today() - 14)                   returnif(isfiltered(RFO_Zone[Market Leader]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'New Clients (NC)', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday),if(FilterChoice = 'TFGT',CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'New Client', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'NFC-FieldReporting', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday)))   ","isHidden":false},{"name":"YE NFC Advice Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]),'Thrivent Advisor Group')))))    var maxdayperfyear = CALCULATE(max(DTRB_PERF_DATES[CAL_DAY_DT]), DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT')returnif(isfiltered(RFO_Zone[Market Leader]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'New Clients (NC)', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear),if(FilterChoice = 'TFGT',CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'New Client', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'NFC-FieldReporting', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxdayperfyear)))   ","isHidden":false},{"name":"% of YTD NC Advice Goal","expression":"DIVIDE(sum(Advice_AllTS_list[cyr_Goal]),YTD_GOALS_DD[YTD NC Advice Goal])","isHidden":false},{"name":"YE ANBP NPG Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[NPG]),SELECTEDVALUE(RFO_Zone[NPG]),                   if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                    if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]),'Enterprise Goal'))))))var maxyeardt = CALCULATE(max(DTRB_PERF_DATES[CAL_DAY_DT]), DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='PREVIOUS')                   --var maxyeardt = CALCULATE(max(DTRB_PERF_DATES[CAL_DAY_DT]), DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT')         returnCALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'ANBP', YTD_GOALS_DD[Level] = 'NPG', YTD_GOALS_DD[Date_of_Goal] = maxyeardt)--return--if(isfiltered(RFO_Zone[NPG]),--CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'ANBP', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxyeardt),--if(isfiltered(RFO_Zone[Market Leader]),--CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Annual New Business Production (ANBP)', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxyeardt),--if(FilterChoice = 'TFGT',--CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Annual New Business Production (ANBP)', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxyeardt),--CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'ANBP', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxyeardt)))) ","isHidden":false},{"name":"YTD FR Contracts Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[NPG]),SELECTEDVALUE(RFO_Zone[NPG]),                   if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Core or Growth]),SELECTEDVALUE(RFO_Zone[RFO Name]),                   if(ISFILTERED(RFO_Zone[Core or Growth]),SELECTEDVALUE(RFO_Zone[Core or Growth]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]), 'Thrivent Advisor Group')))))))))var PriorSunday = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT],  LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT') - 2)     returnCALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'FRContracts', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday) ","isHidden":false},{"name":"% CL YTD","expression":"divide(\u0027Combined_Launch_Data\u0027[CL Percent],\u0027YTD_GOALS_DD\u0027[YTD CL Goal])","isHidden":false},{"name":"YE ANBP(LH) Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[NPG]),SELECTEDVALUE(RFO_Zone[NPG]),                   if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Core or Growth]),SELECTEDVALUE(RFO_Zone[Core or Growth]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]),'Enterprise Goal'))))))))var maxyeardt = CALCULATE(max(DTRB_PERF_DATES[CAL_DAY_DT]), DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT')                   returnif(isfiltered(RFO_Zone[NPG]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'ANBP (LH)', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxyeardt),if(isfiltered(RFO_Zone[Market Leader]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Annual New Business Production (ANBP)', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxyeardt),if(FilterChoice = 'TFGT',CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'ANBP (LH)', YTD_GOALS_DD[Level] = 'Virtual Advice', YTD_GOALS_DD[Date_of_Goal] = maxyeardt),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'ANBP (LH)', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = maxyeardt))))  ","isHidden":false},{"name":"YTD ANBP(LH) Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[NPG]),SELECTEDVALUE(RFO_Zone[NPG]),                   if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Core or Growth]),SELECTEDVALUE(RFO_Zone[Core or Growth]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]),'Enterprise Goal'))))))))var PriorSunday = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT], LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT') - 2)               returnif(isfiltered(RFO_Zone[Market Leader]),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'Annual New Business Production (ANBP)', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday),CALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'ANBP (LH)', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday))   ","isHidden":false},{"name":"% ANBP (LH) YTD","expression":"DIVIDE([CY ANBP],YTD_GOALS_DD[YTD ANBP(LH) Goal])","isHidden":false},{"name":"% ANBP (LH) YE","expression":"DIVIDE([CY ANBP],YTD_GOALS_DD[YE ANBP(LH) Goal])","isHidden":false},{"name":"Weekly Need ANBP (LH)","expression":"var WeeksRemaining=calculate(52-MAX(ANBP_OtherRev_DD[CalWk]),DTRB_PERF_DATES[Cal_YTD_Flag] in {TRUE})return    divide(\u0027YTD_GOALS_DD\u0027[YE ANBP(LH) Goal]-\u0027ANBP_OtherRev_DD\u0027[CY ANBP],WeeksRemaining)","isHidden":false},{"name":"YTD NFP Appts Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]),'Thrivent Advisor Group'))))))var PriorSunday = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT], LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT') - 2)                   returnCALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'NFPAppointments', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday)","isHidden":false},{"name":"YTD VET Appointment Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]),'Thrivent Advisor Group'))))))var PriorSunday = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT], LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT') - 2)                   returnCALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'VetAppointments', YTD_GOALS_DD[Level] = FilterChoice, YTD_GOALS_DD[Date_of_Goal] = PriorSunday)","isHidden":false},{"name":"%  NFA Appts YTD","expression":"DIVIDE(\u0027Appointments/PC/JFW\u0027[YTD Appointments],\u0027YTD_GOALS_DD\u0027[YTD NFP Appts Goal])","isHidden":false},{"name":"% NFP Appts YTD","expression":"DIVIDE(\u0027Appointments/PC/JFW\u0027[YTD NFP Appointments],\u0027YTD_GOALS_DD\u0027[YTD NFP Appts Goal])","isHidden":false},{"name":"% VET Appts YTD","expression":"DIVIDE(\u0027Appointments/PC/JFW\u0027[YTD Vet Appointments],\u0027YTD_GOALS_DD\u0027[YTD VET Appointment Goal])","isHidden":false},{"name":"YTD Appt Goal SWITCH","expression":"if(HASONEVALUE(\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]),SWITCH(VALUES(\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]),'NFP', [% NFP Appts YTD],'VET', [% Vet Appts YTD]), [% Appts YTD])","isHidden":false}],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////VSSHR//SHARED//Public//DI and BI//Distribution Dashboard//YTD_GOALS_DD.csv'),[Delimiter=',', Columns=4, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Goal_Amount', type number}, {'Date_of_Goal', type date}}),    #'Replaced Value' = Table.ReplaceValue(#'Changed Type','TOTAL RFBO','OtherRevenue',Replacer.ReplaceText,{'Metric'})in    #'Replaced Value'"}]},{"name":"Capacity","isHidden":false,"columns":[{"name":"JOIN VALUE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ZONE_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_Mkt","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Year","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Week","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Current Wk","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Capacity","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Channel","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Division","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Region","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PerYrWk","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"cy_prior_wk_FPs","expression":"CALCULATE(     SUM(\u0027Capacity\u0027[Capacity]),     DTRB_PERF_DATES[Prior Week Flag] = 'TRUE',     DTRB_PERF_DATES[Current Year Flag] in {True},    \u0027Capacity\u0027[Type] \u003c\u003e 'Red Role')","isHidden":false},{"name":"py_prior_wk_FPs","expression":"CALCULATE(     SUM(\u0027Capacity\u0027[Capacity]),     DTRB_PERF_DATES[Prior Week Flag] = 'TRUE',     DTRB_PERF_DATES[Prior Year Flag] in {True},    \u0027Capacity\u0027[Type] \u003c\u003e 'Red Role')","isHidden":false},{"name":"YOY Change Capacity","expression":"CALCULATE(DIVIDE(([cy_prior_wk_FPs]-[py_prior_wk_FPs]),[py_prior_wk_FPs]), Capacity[Type] \u003c\u003e 'Red Role')","isHidden":false},{"name":"cy_prior_wk_NFPs","expression":"CALCULATE(     SUM(\u0027Capacity\u0027[Capacity]),     DTRB_PERF_DATES[Prior Week Flag] = 'TRUE',     DTRB_PERF_DATES[Current Year Flag] in {True},    \u0027Capacity\u0027[Type] in {'Red Role','NFR'})","isHidden":false},{"name":"YTD NFP Capacity","expression":"CALCULATE(    SUM(Capacity[Capacity]),    \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True},    \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT]='Current',    \u0027Capacity\u0027[Type] in {'NFR','Red Role'},    \u0027Capacity\u0027[RFO_ID]\u003c\u003e'0716')","isHidden":false},{"name":"YTD Vet Capacity","expression":"CALCULATE(    SUM(Capacity[Capacity]),    \u0027DTRB_PERF_DATES\u0027[YTD Flag] in {True},    \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT]='Current',    \u0027Capacity\u0027[Type] in {'Vet'},    \u0027Capacity\u0027[RFO_ID]\u003c\u003e'0716')","isHidden":false},{"name":"YTD Total NFP+Vet Capacity","expression":"[YTD NFP Capacity] + [YTD Vet Capacity]","isHidden":false},{"name":"YTD Capacity TOTAL","expression":"    if(HASONEVALUE(\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]),    SWITCH(VALUES(\u0027Appointments/PC/JFW\u0027[FP Tenure - NFP, Vet]),    'NFP', [YTD NFP Capacity],    'VET', [YTD Vet Capacity]), \u0027Capacity\u0027[YTD Total NFP+Vet Capacity])","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//Shared//Public//DI and BI//Capacity Dashboard//Capacity Dashboard-FP_Capacity.xlsx'), null, true),    Sheet1_Sheet = Source{[Item='Sheet1',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true]),    #'Renamed Columns' = Table.RenameColumns(#'Promoted Headers',{{'Count', 'Capacity'}}),    #'Appended Query' = Table.Combine({#'Renamed Columns', RR_Capacity}),    #'Changed Type' = Table.TransformColumnTypes(#'Appended Query',{{'Capacity', Int64.Type}}),    #'Added Custom' = Table.AddColumn(#'Changed Type', 'Channel_PQ', each if [RFO_ID] = '0383' then 'TFGT' else 'Thrivent Advisor Group'),    #'Removed Columns' = Table.RemoveColumns(#'Added Custom',{'Column9'}),    #'Added Custom1' = Table.AddColumn(#'Removed Columns', 'Division_PQ', each if List.Contains({'0115','0165','0190','0240','0361','0384'},[RFO_ID]) then 'East' else if List.Contains({'0283','0365','0435','0496','0810'},[RFO_ID]) then 'Central' else if List.Contains({'0291','0410','0475','0525','0529'},[RFO_ID]) then 'West' else 'Other'),    #'Added Custom2' = Table.AddColumn(#'Added Custom1', 'Region_PQ', each if List.Contains({'0361','0365','0435','0496'},[RFO_ID]) then 'Established' else if List.Contains({'0165','0240','0283','0291','0410','0525'},[RFO_ID]) then 'Growth' else if List.Contains({'0115','0190','0384','0475','0529'},[RFO_ID]) then 'Invest' else if List.Contains({'0810'},[RFO_ID]) then 'Colorado Springs' else 'Other'),    #'Added Custom3' = Table.AddColumn(#'Added Custom2', 'PerYrWk_PQ', each Number.ToText([Year])\u0026'-'\u0026Number.ToText([Week])),    #'Renamed Columns1' = Table.RenameColumns(#'Added Custom3',{{'Channel_PQ', 'Channel'}, {'Division_PQ', 'Division'}, {'PerYrWk_PQ', 'PerYrWk'}, {'Region_PQ', 'Region'}})in    #'Renamed Columns1'"}]},{"name":"RR_Capacity","isHidden":true,"columns":[{"name":"JOIN VALUE","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"RFO_ID","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"ZONE_ID","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"RFO_Mkt","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"Type","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"Year","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"Week","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"Current Wk","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"Capacity","dataType":"Int64","isHidden":true,"columnType":"Data"},{"name":"PerfYrWk","dataType":"String","isHidden":true,"expression":"\u0027RR_Capacity\u0027[Year] \u0026 '-' \u0026 \u0027RR_Capacity\u0027[Week]","columnType":"Calculated"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//Shared//Public//DI and BI//Capacity Dashboard//Capacity Dashboard-RR_Capacity.xlsx'), null, true),    Sheet1_Sheet = Source{[Item='Sheet1',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true]),    #'Renamed Columns' = Table.RenameColumns(#'Promoted Headers',{{'Count', 'Capacity'}}),    #'Changed Type' = Table.TransformColumnTypes(#'Renamed Columns',{{'Capacity', Int64.Type}})in    #'Changed Type'"}]},{"name":"Market_Leaders","isHidden":false,"columns":[{"name":"RFO_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_ZONE_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MARKET_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_DEPT_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_STS_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TRMN_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MARKET_LEADERS","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market_Leader","dataType":"String","isHidden":false,"expression":"Market_Leaders[RFO_ZONE_NM] \u0026 '-' \u0026 Market_Leaders[MARKET_LEADERS]","columnType":"Calculated"}],"measures":[],"source":[{"expression":"let    Source = DB2.Database('podwh021:50000', 'podwh021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT DISTINCT#(lf)t1.ORZN_DEPT_CDE as RFO_CDE,#(lf)t1.ORZN_ZONE_CDE as RFO_ZONE_NM,#(lf)(SUBSTRING(t1.ORZN_ZONE_CDE,6,5)) AS Market_ID,#(lf)t3.ORZN_DEPT_DSCR,#(lf)t3.EMP_ID,#(lf)t3.EMP_STS_TYP_CDE,#(lf)t3.trmn_dt,#(lf)t3.JOB_TYP_CDE,#(lf)t3.JOB_TYP_DSCR,#(lf)t3.EMP_NM,#(lf)case when t3.emp_nm is null then \u0027Vacant\u0027 Else t3.emp_nm end as market_leaderS#(lf)FROM SEMANTIC.SALES_HIERARCHY_DIMENSION t1#(lf)left join#(lf)(#(lf)SELECT DISTINCT#(lf)T1.SALE_HIER_ID,#(lf)t1.orzn_zone_cde,#(lf)t1.orzn_dept_dscr,#(lf)t2.orzn_dept_cde,#(lf)t2.EMP_ID,#(lf)t2.EMP_STS_TYP_CDE,#(lf)t2.trmn_dt,#(lf)t2.JOB_TYP_CDE,#(lf)t2.JOB_TYP_DSCR,#(lf)t2.EMP_NM#(lf)FROM#(lf)SEMANTIC.SALES_HIERARCHY_DIMENSION t1#(lf)left JOIN HUMAN_RESOURCES.CNF_EMP_DIM_DTL_CURR_CFDL t2 ON T1.SALE_HIER_ID = T2.emp_id#(lf)where t1.CURR_ROW_IND = \u0027Y\u0027#(lf)and t2.emp_sts_typ_cde in (\u0027A\u0027)#(lf)and t1.EFF_END_TMSP is null#(lf)AND T2.CURR_ROW_IND = \u0027Y\u0027#(lf)and t1.EFF_END_TMSP is null#(lf)and t2.JOB_TYP_CDE IN (\u0027001002\u0027, \u0027001003\u0027,/* \u0027001004\u0027, \u0027001005\u0027,*/ \u0027001007\u0027)#(lf)AND T2.EMP_ID NOT IN(\u0027TS62904\u0027,\u0027TS67022\u0027)#(lf))#(lf)t3#(lf)on t1.orzn_zone_cde = t3.orzn_zone_cde#(lf)where t1.CURR_ROW_IND = \u0027Y\u0027#(lf)and t1.eff_end_tmsp is null#(lf)--and t1.rfo_zone_sts_cde in (\u0027A\u0027)#(lf)and substring(t1.orzn_zone_cde,6,2) \u003c\u003e \u002700\u0027#(lf)and t1.orzn_dept_cde \u003c\u003e \u0027UKWN\u0027#(lf)order BY t1.ORZN_ZONE_CDE;#(lf)']),    #'Filtered Rows' = Table.SelectRows(Source, each ([EMP_ID] \u003c\u003e 'TS18670    ' and [EMP_ID] \u003c\u003e 'TS73067    ' and [EMP_ID] \u003c\u003e 'TS73124    ' and [EMP_ID] \u003c\u003e 'TS74827    ' and [EMP_ID] \u003c\u003e 'TS77319    '))in    #'Filtered Rows'"}]},{"name":"RFO_NM","isHidden":true,"columns":[{"name":"RFO_CODE","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"RFO_NM","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"NM","dataType":"String","isHidden":true,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Sql.Database('dbedwdwprd', 'EnterpriseDataMart', [Query='SELECT DISTINCT#(lf)       [Department Identifier] RFO_CODE#(lf)      ,[Department Name] RFO_NM#(lf)      ,concat(trim([Department Identifier]),\u0027-\u0027,[Department Name]) as NM#(lf)#(lf) #(lf)#(lf)  FROM [EnterpriseDataMart].[DM_01].[Organization Dimension] #(lf)  where [Department Identifier] in (\u00270283\u0027, \u00270435\u0027,\u00270115\u0027, \u00270190\u0027, #(lf)                \u00270361\u0027, \u00270384\u0027,\u00270291\u0027, \u00270525\u0027,\u00270001\u0027,\u00270383\u0027)#(lf)        and [Current Row Indicator] = \u0027Y\u0027#(lf)        and [Effective Begin Date] \u003e \u00271/1/2019\u0027#(lf)        and [Effective End Date] = \u002712/31/9999\u0027'])in    Source"}]},{"name":"Contracts","isHidden":false,"columns":[{"name":"JOIN VALUE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ZONE_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_Mkt","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Year","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Week","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Current Wk","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Count","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"PerfYrWk","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Contract Goals","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Cumulative Contract Goals","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG Contract Goals","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP Contract Goals","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"cy_prior_wk_contracts","expression":"CALCULATE(     SUM(\u0027Contracts\u0027[Count]),     DTRB_PERF_DATES[Prior Week Flag] = 'TRUE',     DTRB_PERF_DATES[Current Year Flag] in {True}    )","isHidden":false},{"name":"py_prior_wk_contracts","expression":"CALCULATE(     SUM(\u0027Contracts\u0027[Count]),     DTRB_PERF_DATES[Prior Week Flag] = 'TRUE',     DTRB_PERF_DATES[Prior Year Flag] in {True}    )","isHidden":false},{"name":"YOY Change Contracts","expression":"DIVIDE(([cy_prior_wk_contracts]-[py_prior_wk_contracts]),[py_prior_wk_contracts])","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//SHARED//Public//DI and BI//Capacity Dashboard//Capacity Dashboard-RAR_Contracts.xlsx'), null, true),    Sheet1_Sheet = Source{[Item='Sheet1',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'JOIN VALUE', type text}, {'RFO_ID', type text}, {'RFO_Mkt', type text}, {'Type', type text}, {'Year', Int64.Type}, {'Week', Int64.Type}, {'Current Wk', Int64.Type}, {'Count', Int64.Type}, {'ZONE_ID', type text}}),    #'Added Custom' = Table.AddColumn(#'Changed Type', 'PerfYrWk', each Number.ToText([Year])\u0026'-'\u0026Number.ToText([Week]))in    #'Added Custom'"}]},{"name":"Terms","isHidden":false,"columns":[{"name":"JOIN VALUE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ZONE_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_Mkt","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Year","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Week","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Current Wk","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Count","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"PerfYrWk","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"cy_prior_wk_terms","expression":"CALCULATE(     SUM(\u0027Terms\u0027[Count]),     DTRB_PERF_DATES[Prior Week Flag] = 'TRUE',     DTRB_PERF_DATES[Current Year Flag] in {True}    )","isHidden":false},{"name":"py_prior_wk_terms","expression":"CALCULATE(     SUM(\u0027Terms\u0027[Count]),     DTRB_PERF_DATES[Prior Week Flag] = 'TRUE',     DTRB_PERF_DATES[Prior Year Flag] in {True}    )","isHidden":false},{"name":"YOY Change Terms","expression":"divide([cy_prior_wk_terms]-[py_prior_wk_terms],[py_prior_wk_terms])","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//SHARED//Public//DI and BI//Capacity Dashboard//Capacity Dashboard-FP_Terminations.xlsx'), null, true),    Sheet1_Sheet = Source{[Item='Sheet1',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'JOIN VALUE', type text}, {'RFO_ID', type text}, {'ZONE_ID', type text}, {'RFO_Mkt', type text}, {'Type', type text}, {'Year', Int64.Type}, {'Week', Int64.Type}, {'Current Wk', Int64.Type}, {'Count', Int64.Type}}),    #'Added Custom' = Table.AddColumn(#'Changed Type', 'PerfYrWk', each Number.ToText([Year])\u0026'-'\u0026Number.ToText([Week]))in    #'Added Custom'"}]},{"name":"Pipeline Points","isHidden":false,"columns":[{"name":"RFO","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Pipeline Points","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//SHARED//Public//DI and BI//Distribution Dashboard//Pipeline_Points.xlsx'), null, true),    Sheet1_Sheet = Source{[Item='Sheet1',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Pipeline Points', type number}})in    #'Changed Type'"}]},{"name":"RECD_PEND_COMPL_ZBE","isHidden":false,"columns":[{"name":"Week_Ending","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Week_Nbr","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"ContractNumber","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"BenefitContractNumber","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FileCode","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TransCode","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TransDesc","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TransReceiveDt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TransCreateDt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TransCloseDt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TransSeqNumber","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ProdType","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LOBCode","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LOBSubType","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SMISLOBCode","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SMISPlanCode","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EstimatedSalesCreditAmt","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"ActualSalesCreditAmt","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CAPTransmissionNumber","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CorporateEmployeeID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFOCode","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFOName","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"AgentCode","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SMISTRANSKEY","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Received","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Pending","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Retired","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Declined","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Issued","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Cancelled","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"STATUS","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"YR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EFF_BEG_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"EFF_END_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TSID_trimmed","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_MKT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"date_filter_ind","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CALC_ESC_MOD.BenefitContractNumber","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CALC_ESC_MOD.COMM_PREM_AMT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CALC_ESC_MOD.BASECOVERAGE_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CALC_ESC_MOD.Res_ProductCode","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CALC_ESC_MOD.NSC_RATES.PRODUCT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CALC_ESC_MOD.NSC_RATES.AGE_LOW","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"CALC_ESC_MOD.NSC_RATES.AGE_HIGH","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"CALC_ESC_MOD.NSC_RATES.COMM_RATE","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"CALC_ESC_MOD.NSC_RATES.NSC_RATE","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"CALC_ESC_MOD.NSC_RATES.POLICY_FEE","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Product_Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Product Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Products","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Est Sales Credits","dataType":"String","isHidden":false,"expression":"IF(AND(RECD_PEND_COMPL_ZBE[BenefitContractNumber]=RECD_PEND_COMPL_ZBE[CALC_ESC_MOD.BenefitContractNumber],(ISBLANK(RECD_PEND_COMPL_ZBE[EstimatedSalesCreditAmt]))),RECD_PEND_COMPL_ZBE[CALC_ESC_MOD.COMM_PREM_AMT],RECD_PEND_COMPL_ZBE[EstimatedSalesCreditAmt])","columnType":"Calculated"},{"name":"TAG-MVP-Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ContractFaceAmount","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Future Receive Dt Filter","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Contract Min Week any year","dataType":"String","isHidden":false,"expression":"  VAR ContractMinWeek = CALCULATE(        MIN(RECD_PEND_COMPL_ZBE[Week_Ending]),        ALLEXCEPT(RECD_PEND_COMPL_ZBE,RECD_PEND_COMPL_ZBE[BenefitContractNumber])    )   RETURNIF((RECD_PEND_COMPL_ZBE[Week_Ending]=ContractMinWeek),'Contract MinWeek','Not Contract MinWeek')","columnType":"Calculated"}],"measures":[{"name":"Received CW","expression":"//VAR MaxWeek = WEEKNUM(CALCULATE(//            MAX(RECD_PEND_COMPL_ZBE[Week_Ending]),ALL(RECD_PEND_COMPL_ZBE)))//VAR MaxYear = YEAR(CALCULATE(//            MAX(RECD_PEND_COMPL_ZBE[Week_Ending]),ALL(RECD_PEND_COMPL_ZBE)))//RETURN//    CALCULATE(//        SUM(RECD_PEND_COMPL_ZBE[Received]),//            FILTER(RECD_PEND_COMPL_ZBE,WEEKNUM(RECD_PEND_COMPL_ZBE[Week_Ending])=MaxWeek \u0026\u0026 YEAR(RECD_PEND_COMPL_ZBE[Transaction Receive Date])=MaxYear))+0Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[CAL_DAY_DT]=(TODAY())))-1Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_week VAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))returnCALCULATE(SUM(RECD_PEND_COMPL_ZBE[Received]),  RECD_PEND_COMPL_ZBE[TransReceiveDt]\u003c= MaxDay,RECD_PEND_COMPL_ZBE[TransReceiveDt]\u003e=StartDay)","isHidden":false},{"name":"Received YTD","expression":"//VAR MaxYear = YEAR(CALCULATE(//            MAX(RECD_PEND_COMPL_ZBE[Transaction Receive Date]),ALL(RECD_PEND_COMPL_ZBE)))//RETURN//CALCULATE(//   SUM(RECD_PEND_COMPL_ZBE[Received]),//    FILTER((RECD_PEND_COMPL_ZBE),//        YEAR(RECD_PEND_COMPL_ZBE[Transaction Receive Date])=MaxYear))+0CALCULATE(   SUM(RECD_PEND_COMPL_ZBE[Received]),   DTRB_PERF_DATES[Cal_YTD_Flag]={TRUE()},RECD_PEND_COMPL_ZBE[Contract Min Week any year]='Contract MinWeek')","isHidden":false},{"name":"Received PYTD","expression":"//var py = YEAR(CALCULATE(            //MAX(RECD_PEND_COMPL_ZBE[Week_Ending]),ALL(RECD_PEND_COMPL_ZBE)))-1//var cw = WEEKNUM(CALCULATE(            //MAX(RECD_PEND_COMPL_ZBE[Week_Ending]),ALL(RECD_PEND_COMPL_ZBE)))//RETURN//CALCULATE(//SUM(RECD_PEND_COMPL_ZBE[Received]),//FILTER(RECD_PEND_COMPL_ZBE,//YEAR(RECD_PEND_COMPL_ZBE[Week_Ending])=py//\u0026\u0026 WEEKNUM(RECD_PEND_COMPL_ZBE[Week_Ending])\u003c=cw//)//)+0CALCULATE(SUM(RECD_PEND_COMPL_ZBE[Received]),DTRB_PERF_DATES[Cal_PYTD_Flag] in {TRUE},RECD_PEND_COMPL_ZBE[Contract Min Week any year]='Contract MinWeek')","isHidden":false},{"name":"Estimated Sales Credit CW","expression":"VAR MaxWeek = CALCULATE(MAX(RECD_PEND_COMPL_ZBE[Week_Ending]),ALL(RECD_PEND_COMPL_ZBE))RETURNCALCULATE(SUM(RECD_PEND_COMPL_ZBE[Est Sales Credits]),FILTER(RECD_PEND_COMPL_ZBE,RECD_PEND_COMPL_ZBE[Week_Ending]=MaxWeek\u0026\u0026 RECD_PEND_COMPL_ZBE[Pending]=1))+0","isHidden":false},{"name":"Pending Count CW","expression":"VAR MaxWeek = CALCULATE(            MAX(RECD_PEND_COMPL_ZBE[Week_Ending]),ALL(RECD_PEND_COMPL_ZBE))RETURN    CALCULATE(        SUM(RECD_PEND_COMPL_ZBE[Pending]),            FILTER((RECD_PEND_COMPL_ZBE),RECD_PEND_COMPL_ZBE[Week_Ending]=MaxWeek))+0","isHidden":false},{"name":"Estimated Sales Credit by Week","expression":"CALCULATE(SUM(RECD_PEND_COMPL_ZBE[Est Sales Credits]),FILTER(RECD_PEND_COMPL_ZBE,RECD_PEND_COMPL_ZBE[Week_Ending]=MAX(RECD_PEND_COMPL_ZBE[Week_Ending])\u0026\u0026 RECD_PEND_COMPL_ZBE[Pending]=1))","isHidden":false},{"name":"Received 4 Wk Total Week_Index DistDt","expression":"Var max_week = CALCULATE(    MAX(DTRB_PERF_DATES[WeekIndex]),    FILTER(DTRB_PERF_DATES, DTRB_PERF_DATES[CAL_DAY_DT]=(TODAY())))-1Var MaxDay= CALCULATE(MAX(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=max_week))VAR start_week = max_week -3VAR StartDay=CALCULATE(MIN(DTRB_PERF_DATES[CAL_DAY_DT]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[WeekIndex]=start_week))RETURNCALCULATE(              SUM(RECD_PEND_COMPL_ZBE[Received]),              RECD_PEND_COMPL_ZBE[TransReceiveDt]\u003e=StartDay \u0026\u0026 RECD_PEND_COMPL_ZBE[TransReceiveDt]\u003c=MaxDay )","isHidden":false},{"name":"Received 4 Week Avg","expression":"DIVIDE([Received 4 Wk Total Week_Index DistDt],4)","isHidden":false},{"name":"Received YoY","expression":"divide([Received YTD]-[Received PYTD],[Received PYTD])","isHidden":false}],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////pnfiles002b//fp_cifs_7834_sas$//MarketAnalysis//FieldReporting//SMIS//RECD_PEND_COMPL.csv'),[Delimiter=',', Columns=34, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'EstimatedSalesCreditAmt', type number}, {'ActualSalesCreditAmt', type number}, {'Received', Int64.Type}, {'Pending', Int64.Type}, {'Retired', Int64.Type}, {'Declined', Int64.Type}, {'Issued', Int64.Type}, {'Cancelled', Int64.Type}, {'TransReceiveDt', type date}, {'TransCreateDt', type date}, {'TransCloseDt', type date}, {'Week_Ending', type date}, {'Week_Nbr', Int64.Type}}),    #'Merged Queries' = Table.NestedJoin(#'Changed Type', {'CorporateEmployeeID'}, NEW_ZBE, {'TSID_trimmed'}, 'NEW_ZBE', JoinKind.Inner),    #'Expanded NEW_ZBE' = Table.ExpandTableColumn(#'Merged Queries', 'NEW_ZBE', {'RFO', 'TAG_MVP_MKT', 'MVP_ID', 'ZONE_ID', 'TSID', 'EFF_BEG_TMSP', 'EFF_END_TMSP', 'TSID_trimmed'}, {'RFO', 'TAG_MVP_MKT', 'MVP_ID', 'ZONE_ID', 'TSID', 'EFF_BEG_TMSP', 'EFF_END_TMSP', 'TSID_trimmed'}),    #'Trimmed Text' = Table.TransformColumns(#'Expanded NEW_ZBE',{{'RFO', Text.Trim, type text}}),    #'Added Custom' = Table.AddColumn(#'Trimmed Text', 'RFO_MKT', each [RFO]\u0026'-'\u0026[ZONE_ID]),    #'Added Custom1' = Table.AddColumn(#'Added Custom', 'date_filter_ind', each if [Week_Ending] \u003e= [EFF_BEG_TMSP] and [Week_Ending] \u003c= [EFF_END_TMSP] then 1 else 0),    #'Filtered Rows' = Table.SelectRows(#'Added Custom1', each ([date_filter_ind] = 1)),    #'Filtered Rows1' = Table.SelectRows(#'Filtered Rows', each [Week_Ending] \u003e #date(2019, 12, 31)),    #'Merged Queries1' = Table.NestedJoin(#'Filtered Rows1', {'BenefitContractNumber'}, CALC_ESC_MOD, {'BenefitContractNumber'}, 'CALC_ESC_MOD', JoinKind.LeftOuter),    #'Expanded CALC_ESC_MOD' = Table.ExpandTableColumn(#'Merged Queries1', 'CALC_ESC_MOD', {'BenefitContractNumber', 'COMM_PREM_AMT', 'BASECOVERAGE_ID', 'Res_ProductCode', 'NSC_RATES.PRODUCT', 'NSC_RATES.AGE_LOW', 'NSC_RATES.AGE_HIGH', 'NSC_RATES.COMM_RATE', 'NSC_RATES.NSC_RATE', 'NSC_RATES.POLICY_FEE'}, {'CALC_ESC_MOD.BenefitContractNumber', 'CALC_ESC_MOD.COMM_PREM_AMT', 'CALC_ESC_MOD.BASECOVERAGE_ID', 'CALC_ESC_MOD.Res_ProductCode', 'CALC_ESC_MOD.NSC_RATES.PRODUCT', 'CALC_ESC_MOD.NSC_RATES.AGE_LOW', 'CALC_ESC_MOD.NSC_RATES.AGE_HIGH', 'CALC_ESC_MOD.NSC_RATES.COMM_RATE', 'CALC_ESC_MOD.NSC_RATES.NSC_RATE', 'CALC_ESC_MOD.NSC_RATES.POLICY_FEE'}),    #'Added Custom2' = Table.AddColumn(#'Expanded CALC_ESC_MOD', 'Products Name', each if [ProdType]= 'TERM' and [LOBCode] = 'NA' then 'TERM' else if [LOBCode]='NA' and Text.StartsWith([BenefitContractNumber],'VA') then 'VA' else if Text.StartsWith([LOBSubType], 'MYGA') then 'MYGA' else[LOBCode]),    #'Added Custom3' = Table.AddColumn(#'Added Custom2', 'Products', each if [Products Name] = 'TERM' then 'Life-TERM' else if [Products Name] = 'WL' then 'Life-WL' else if [Products Name] = 'UL' then 'Life-UL' else if [Products Name] = 'VUL' then 'Life-VUL' else if [Products Name] = 'LTC' then 'Health-LTC' else if [Products Name] = 'MS' then 'Health-MS' else if [Products Name] = 'DI' then 'Health-DI' else if [Products Name] = 'SO' then 'Annuity-SO' else if [Products Name] = 'VA' then 'Annuity-VA' else if [Products Name] = 'FA' then 'Annuity-FA' else if [Products Name] = 'SPIA' then 'Annuity-SPIA' else if [Products Name] = 'VSO' then 'Annuity-VSO' else if [Products Name] = 'CAREFORWARD' then 'Health-CAREFORWARD' else if [Products Name] = 'MYGA' then 'Annuity-MYGA' else 'Other'),    #'Added Custom4' = Table.AddColumn(#'Added Custom3', 'Products.1', each if [Products Name] = 'TERM' then 'Life' else if [Products Name] = 'WL' then 'Life' else if [Products Name] = 'UL' then 'Life' else if [Products Name] = 'VUL' then 'Life' else if [Products Name] = 'LTC' then 'Health' else if [Products Name] = 'MS' then 'Health' else if [Products Name] = 'DI' then 'Health' else if [Products Name] = 'CAREFORWARD' then 'Health' else if [Products Name] = 'SO' then 'Annuity' else if [Products Name] = 'VA' then 'Annuity' else if [Products Name] = 'FA' then 'Annuity' else if [Products Name] = 'SPIA' then 'Annuity' else if [Products Name] = 'VSO' then 'Annuity' else if [Products Name] = 'MYGA' then 'Annuity' else 'Other'),    #'Renamed Columns' = Table.RenameColumns(#'Added Custom4',{{'Products Name', 'Product_Name'}, {'Products', 'Product Name'}, {'Products.1', 'Products'},{'ZONE_ID', 'Market'},{'TAG_MVP_MKT','TAG-MVP-Market'},{'MVP_ID','MVP'}}),    #'Added Custom5' = Table.AddColumn(#'Renamed Columns', 'Future Receive Dt Filter', each if [TransReceiveDt] \u003e [Week_Ending] then 0 else 1),    #'Filtered Rows2' = Table.SelectRows(#'Added Custom5', each ([Future Receive Dt Filter] = 1))in    #'Filtered Rows2'"}]},{"name":"NEW_ZBE","isHidden":true,"columns":[{"name":"RFO","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"ZONE_ID","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"TSID","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"EFF_BEG_TMSP","dataType":"DateTime","isHidden":true,"columnType":"Data"},{"name":"EFF_END_TMSP","dataType":"DateTime","isHidden":true,"columnType":"Data"},{"name":"TSID_trimmed","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"TAG_MVP_MKT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP_ID","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = DB2.Database('PODWH021:50000', 'PODWH021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT DISTINCT t1.ORZN_DEPT_CDE AS RFO, #(lf)          /* TAG_MVP_Mkt */#(lf)          t1.ORZN_ZONE_CDE AS TAG_MVP_Mkt,/* MVP_ID */#(lf)      SUBSTRING(t1.ORZN_ZONE_CDE,1,7) AS MVP_ID,/* Zone_ID */#(lf)          RIGHT(RTRIM(t1.ORZN_ZONE_CDE),2) AS Zone_ID,#(lf)         t1.SALE_HIER_ID AS TSID, #(lf)          /* Strt_Dt */#(lf)          t1.EFF_BEG_TMSP,#(lf)          /* END_DATE */#(lf)          (CASE WHEN t1.EFF_END_TMSP is null #(lf)             THEN \u002712-31-9999\u0027#(lf)               ELSE t1.EFF_END_TMSP-1#(lf)          END)AS EFF_END_TMSP#(lf)      FROM SEMANTIC.SALES_HIERARCHY_DIMENSION t1#(lf)      WHERE SUBSTRING(t1.SALE_HIER_ID,1,2) in (\u0027DP\u0027,\u0027TS\u0027) #(lf)        AND t1.CURR_ROW_IND = \u0027Y\u0027 #(lf)        AND ( t1.EFF_END_TMSP \u003e t1.EFF_BEG_TMSP OR t1.EFF_END_TMSP IS null )']),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'EFF_BEG_TMSP', type date}, {'EFF_END_TMSP', type date}}),    #'Duplicated Column' = Table.DuplicateColumn(#'Changed Type', 'TSID', 'TSID - Copy'),    #'Renamed Columns' = Table.RenameColumns(#'Duplicated Column',{{'TSID - Copy', 'TSID_trimmed'}}),    #'Trimmed Text' = Table.TransformColumns(#'Renamed Columns',{{'TSID_trimmed', Text.Trim, type text}})in    #'Trimmed Text'"}]},{"name":"NSC_RATES","isHidden":true,"columns":[{"name":"PRODUCT","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"AGE_LOW","dataType":"Int64","isHidden":true,"columnType":"Data"},{"name":"AGE_HIGH","dataType":"Int64","isHidden":true,"columnType":"Data"},{"name":"COMM_RATE","dataType":"Int64","isHidden":true,"columnType":"Data"},{"name":"NSC_RATE","dataType":"Int64","isHidden":true,"columnType":"Data"},{"name":"POLICY_FEE","dataType":"Int64","isHidden":true,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////vsshr//shared////Public//DI and BI//Applications Dashboard//NSC_RATES.csv'),[Delimiter=',', Columns=6, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'PRODUCT', type text}, {'AGE_LOW', Int64.Type}, {'AGE_HIGH', Int64.Type}, {'COMM_RATE', Int64.Type}, {'NSC_RATE', Int64.Type}, {'POLICY_FEE', Int64.Type}})in    #'Changed Type'"}]},{"name":"RES_DATA","isHidden":true,"columns":[{"name":"BenefitContractNumber","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"COMM_PREM_AMT","dataType":"Double","isHidden":true,"columnType":"Data"},{"name":"BASECOVERAGE_ID","dataType":"String","isHidden":true,"columnType":"Data"},{"name":"Res_ProductCode","dataType":"String","isHidden":true,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Sql.Database('DBRESONANTPRD', 'Resonant', [Query='SELECT DISTINCT RTRIM(LTRIM(Replace(A.PolNumber,\u0027?\u0027,\u0027\u0027))) as BenefitContractNumber,#(lf)     A.CommissionablePremiumAmt as COMM_PREM_AMT,#(lf)     A.BASECOVERAGE_ID, #(lf)     B.ProductCode as Res_ProductCode #(lf)  FROM Resonant.dbo.life_lifepolicy #(lf)  A LEFT JOIN#(lf)     Resonant.dbo.life_coverage B #(lf)        ON (A.BaseCoverage_ID = B.ID)#(lf)  WHERE A.CommissionablePremiumAmt \u003e 0'])in    Source"}]},{"name":"CALC_ESC_MOD","isHidden":false,"columns":[{"name":"BenefitContractNumber","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"COMM_PREM_AMT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"BASECOVERAGE_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Res_ProductCode","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"NSC_RATES.PRODUCT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"NSC_RATES.AGE_LOW","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"NSC_RATES.AGE_HIGH","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"NSC_RATES.COMM_RATE","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"NSC_RATES.NSC_RATE","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"NSC_RATES.POLICY_FEE","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.NestedJoin(RES_DATA, {'Res_ProductCode'}, NSC_RATES, {'PRODUCT'}, 'NSC_RATES', JoinKind.LeftOuter),    #'Expanded NSC_RATES' = Table.ExpandTableColumn(Source, 'NSC_RATES', {'PRODUCT', 'AGE_LOW', 'AGE_HIGH', 'COMM_RATE', 'NSC_RATE', 'POLICY_FEE'}, {'NSC_RATES.PRODUCT', 'NSC_RATES.AGE_LOW', 'NSC_RATES.AGE_HIGH', 'NSC_RATES.COMM_RATE', 'NSC_RATES.NSC_RATE', 'NSC_RATES.POLICY_FEE'}),    #'Filtered Rows' = Table.SelectRows(#'Expanded NSC_RATES', each [BenefitContractNumber] \u003c\u003e null and [BenefitContractNumber] \u003c\u003e ''),    #'Removed Duplicates' = Table.Distinct(#'Filtered Rows', {'BenefitContractNumber'}),    #'Filtered Rows1' = Table.SelectRows(#'Removed Duplicates', each ([NSC_RATES.PRODUCT] = 'LTIV10YR' or [NSC_RATES.PRODUCT] = 'LTIV15YR' or [NSC_RATES.PRODUCT] = 'LTIV20YR' or [NSC_RATES.PRODUCT] = 'LTIV30YR'))in    #'Filtered Rows1'"}]},{"name":"WMFC_DD","isHidden":false,"columns":[{"name":"RFO","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Category","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MFC","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"WMFC","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"RFO_MKT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PerfYrWk","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Channel","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Division","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Region","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Perfyear","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Zone_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Perfweek","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[{"name":"CY WMFC","expression":"CALCULATE( sum(WMFC_DD[WMFC]),DTRB_PERF_DATES[YTD Flag] in {TRUE})","isHidden":false},{"name":"cy_prior_wk_WMFC","expression":"VAR max_year = CALCULATE(MAX(WMFC_dD[Perfyear]),WMFC_dD)var max_week = CALCULATE(MAX(WMFC_dD[Perfweek]),WMFC_dD[Perfyear]=max_year,NOT(ISBLANK(WMFC_dD[MFC])))RETURNCALCULATE(    SUM(WMFC_dD[WMFC]),   WMFC_dD[Perfyear]=max_year,   WMFC_dD[Perfweek]=max_week)--CALCULATE(     --SUM(WMFC_DD[WMFC]),     --DTRB_PERF_DATES[Prior Week Flag] = 'TRUE',     --DTRB_PERF_DATES[Current Year Flag] in {True})","isHidden":false},{"name":"PY WMFC","expression":"CALCULATE( sum(WMFC_DD[WMFC]),DTRB_PERF_DATES[Prior Year Flag] in {TRUE})","isHidden":false},{"name":"py_prior_wek_WMFC","expression":"CALCULATE(     sum(WMFC_DD[WMFC]),     DTRB_PERF_DATES[Prior Week Flag] = 'TRUE',     DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='PREVIOUS')","isHidden":false},{"name":"PY2 WMFC","expression":"CALCULATE(     sum(WMFC_DD[WMFC]),    DTRB_PERF_DATES[Prior Year 2 Flag] in {TRUE})","isHidden":false},{"name":"YOY Change WMFC","expression":"DIVIDE((WMFC_DD[cy_prior_wk_WMFC] - WMFC_DD[py_prior_wek_WMFC]),WMFC_DD[py_prior_wek_WMFC])","isHidden":false},{"name":"pye_WMFC","expression":"CALCULATE(     sum(WMFC_DD[WMFC]),     DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = 52,     DTRB_PERF_DATES[Prior Year Flag] in {TRUE})","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//SHARED//Public//DI and BI//Capacity Dashboard//WMFC_CD.xlsx'), null, true),    WMFC_CD_Sheet = Source{[Item='WMFC_CD',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(WMFC_CD_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'RFO', type text}, {'Zone_ID', type text}, {'RFO_MKT', type text}, {'Category', type text}, {'MFC', Int64.Type}, {'WMFC', type number}, {'Join_Value', type text}, {'Perfweek', type text}, {'Perfyear', type text}}),    #'Removed Columns' = Table.RemoveColumns(#'Changed Type',{'Join_Value'}),    #'Added Custom' = Table.AddColumn(#'Removed Columns', 'PerfYrWk', each [Perfyear]\u0026'-'\u0026[Perfweek]),    #'Added Custom1' = Table.AddColumn(#'Added Custom', 'Division', each if List.Contains({'0115','0165','0190','0240','0361','0384'},[RFO]) then 'East' else if List.Contains({'0283','0365','0435','0496','0810'},[RFO]) then 'Central' else if List.Contains({'0291','0410','0475','0525','0529'},[RFO]) then 'West' else 'Other'),    #'Added Custom2' = Table.AddColumn(#'Added Custom1', 'Region', each if List.Contains({'0361','0365','0435','0496'},[RFO]) then 'Established' else if List.Contains({'0165','0240','0283','0291','0410','0525'},[RFO]) then 'Growth' else if List.Contains({'0115','0190','0384','0475','0529'},[RFO]) then 'Invest' else if List.Contains({'0810'},[RFO]) then 'Colorado Springs' else 'Other'),    #'Added Conditional Column' = Table.AddColumn(#'Added Custom2', 'Channel', each if [RFO] = 383 then 'TFGT' else 'Thrivent Advisor Group'),    #'Reordered Columns' = Table.ReorderColumns(#'Added Conditional Column',{'RFO', 'Category', 'MFC', 'WMFC', 'RFO_MKT', 'PerfYrWk', 'Channel', 'Division', 'Region'}),    #'Changed Type1' = Table.TransformColumnTypes(#'Reordered Columns',{{'Perfyear', Int64.Type}, {'Perfweek', Int64.Type}})in    #'Changed Type1'"}]},{"name":"Current RD/RDD/RDLs","isHidden":false,"columns":[{"name":"RFO","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"First Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Last Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Leader Role","dataType":"String","isHidden":false,"expression":"if(\u0027Current RD/RDD/RDLs\u0027[Job Type Code] = '001004', 'RD',if(\u0027Current RD/RDD/RDLs\u0027[Job Type Code] = '001005', 'Market Developer', if(\u0027Current RD/RDD/RDLs\u0027[Job Type Code] = '001007', 'Market Director')))","columnType":"Calculated"}],"measures":[{"name":"TSID Count","expression":"DISTINCTCOUNT(\u0027Current RD/RDD/RDLs\u0027[TSID])","isHidden":false}],"source":[{"expression":"let    Source = Sql.Database('dbedwdwprd', 'EnterpriseDataMart'),    #'DM_01_Organization Dimension' = Source{[Schema='DM_01',Item='Organization Dimension']}[Data],    #'Filtered Rows' = Table.SelectRows(#'DM_01_Organization Dimension', each ([Current Row Indicator] = 'Y')),    #'Filtered Rows1' = Table.SelectRows(#'Filtered Rows', each Text.StartsWith([Job Type Code], '00100')),    #'Filtered Rows2' = Table.SelectRows(#'Filtered Rows1', each ([Job Type Code] = '001004' or [Job Type Code] = '001005' or [Job Type Code] = '001007') and ([Employee Status Type Code] = 'A')),    #'Renamed Columns' = Table.RenameColumns(#'Filtered Rows2',{{'Source System Key Text', 'TSID'}, {'Department Identifier', 'RFO'}}),    #'Removed Other Columns' = Table.SelectColumns(#'Renamed Columns',{'RFO', 'TSID', 'First Name', 'Last Name', 'Job Type Code'}),    #'Sorted Rows' = Table.Sort(#'Removed Other Columns',{{'TSID', Order.Ascending}})in    #'Sorted Rows'"}]},{"name":"MVPs","isHidden":false,"columns":[{"name":"RFO_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_DEPT_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_STS_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TRMN_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MARKET_LEADERS","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market_Leader","dataType":"String","isHidden":false,"expression":"MVPs[MVP_ID] \u0026 '-' \u0026 MVPs[MARKET_LEADERS]","columnType":"Calculated"},{"name":"MVP_ID","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = DB2.Database('podwh021:50000', 'podwh021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT DISTINCT#(lf)t1.ORZN_DEPT_CDE as RFO_CDE,#(lf)--t1.ORZN_ZONE_CDE as RFO_ZONE_NM,#(lf)t1.ORZN_SUB_DEPT_CDE as MVP_ID,#(lf)--(SUBSTRING(t1.ORZN_ZONE_CDE,6,5)) AS Market_ID,#(lf)t3.ORZN_DEPT_DSCR,#(lf)t3.EMP_ID,#(lf)t3.EMP_STS_TYP_CDE,#(lf)t3.trmn_dt,#(lf)t3.JOB_TYP_CDE,#(lf)t3.JOB_TYP_DSCR,#(lf)t3.EMP_NM,#(lf)case when t3.emp_nm is null then \u0027Vacant\u0027 Else t3.emp_nm end as market_leaders#(lf)FROM SEMANTIC.SALES_HIERARCHY_DIMENSION t1#(lf)left join#(lf)(#(lf)SELECT DISTINCT#(lf)T1.SALE_HIER_ID,#(lf)t1.orzn_zone_cde,#(lf)t1.orzn_dept_dscr,#(lf)t1.orzn_sub_dept_cde,#(lf)t2.orzn_dept_cde,#(lf)t2.EMP_ID,#(lf)t2.EMP_STS_TYP_CDE,#(lf)t2.trmn_dt,#(lf)t2.JOB_TYP_CDE,#(lf)t2.JOB_TYP_DSCR,#(lf)t2.EMP_NM#(lf)FROM#(lf)SEMANTIC.SALES_HIERARCHY_DIMENSION t1#(lf)left JOIN HUMAN_RESOURCES.CNF_EMP_DIM_DTL_CURR_CFDL t2 ON T1.SALE_HIER_ID = T2.emp_id#(lf)where t1.CURR_ROW_IND = \u0027Y\u0027#(lf)and t2.emp_sts_typ_cde in (\u0027A\u0027)#(lf)and t1.EFF_END_TMSP is null#(lf)AND T2.CURR_ROW_IND = \u0027Y\u0027#(lf)and t1.EFF_END_TMSP is null#(lf)and t2.JOB_TYP_CDE IN (\u0027001001\u0027)#(lf))#(lf)t3#(lf)on t1.orzn_sub_dept_cde = t3.orzn_sub_dept_cde#(lf)where t1.CURR_ROW_IND = \u0027Y\u0027#(lf)and t1.eff_end_tmsp is null#(lf)--and t1.rfo_zone_sts_cde in (\u0027A\u0027)#(lf)--and t3.EMP_STS_TYP_CDE = \u0027A\u0027#(lf)--and substring(t1.orzn_zone_cde,6,2) \u003c\u003e \u002700\u0027#(lf)and t1.orzn_zone_cde \u003c\u003e \u0027UKWN\u0027#(lf)order BY t1.ORZN_SUB_DEPT_CDE;#(lf)']),    #'Filtered Rows' = Table.SelectRows(Source, each ([RFO_CDE] \u003c\u003e '0386      ' and [RFO_CDE] \u003c\u003e '0710      ' and [RFO_CDE] \u003c\u003e '0714      ' and [RFO_CDE] \u003c\u003e '0715      ' and [RFO_CDE] \u003c\u003e '0718      ' and [RFO_CDE] \u003c\u003e '0997      ' and [RFO_CDE] \u003c\u003e 'UKWN      ') and ([MVP_ID] \u003c\u003e '          ' and [MVP_ID] \u003c\u003e '0529-00   '))in    #'Filtered Rows'"}]},{"name":"Advice_AllTS_list","isHidden":false,"columns":[{"name":"asOfDt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"region","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"region_nm","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_SUB_DEPT_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_ZONE_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"zone_cde","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"zone_dscr","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"trained_cohort","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"tenure_grp","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"tenure_dtl","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"aip_yr","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Program","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"mgp_psptHH_cnt","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"mgp_psptClnt_cnt","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"tot_newClient","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"cyr_Goal","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"sts","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"actvFP","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"any_newclnt","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"any_newclntgoal","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"mgpGoals_asOfDt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"wk_tot_newClient","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"wk_tot_goalConv","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[{"name":"% New Clients w/ Advice Goal Conv","expression":"CALCULATE(divide(sum(Advice_AllTS_list[cyr_Goal]),sum(Advice_AllTS_list[tot_newClient])))","isHidden":false},{"name":"% Goal Based Conv Target","expression":"0.2","isHidden":false}],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////vsshr//shared////Public//DI and BI//Field Reporting//Advice//Advice_AllTS_list.csv'),[Delimiter=',', Columns=25, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'asOfDt', type date}, {'region', type text}, {'region_nm', type text}, {'ORZN_SUB_DEPT_CDE', type text}, {'ORZN_ZONE_CDE', type text}, {'zone_cde', Int64.Type}, {'zone_dscr', type text}, {'TSID', type text}, {'EMP_NM', type text}, {'trained_cohort', type text}, {'tenure_grp', type text}, {'tenure_dtl', type text}, {'aip_yr', Int64.Type}, {'Program', type text}, {'mgp_psptHH_cnt', Int64.Type}, {'mgp_psptClnt_cnt', Int64.Type}, {'tot_newClient', Int64.Type}, {'cyr_Goal', Int64.Type}, {'sts', type text}, {'actvFP', Int64.Type}, {'any_newclnt', Int64.Type}, {'any_newclntgoal', Int64.Type}, {'mgpGoals_asOfDt', type date}, {'wk_tot_newClient', Int64.Type}, {'wk_tot_goalConv', Int64.Type}})in    #'Changed Type'"}]},{"name":"Grid Revenue Snowflake","isHidden":false,"columns":[{"name":"Calendar Day Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Report Year Text","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Month Text","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Week Text","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Day Text","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Year Number","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Year Week Number","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Employee Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Rollup Agent Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Compensation Employee Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Compensation Reporting Roll Up Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Compensation Level 5 Product Line Of Business Subgroup Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Reporting Roll Up Product Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Reporting Roll Up Event Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Compensation Level 2 Product Character Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CMPAGT_EQ_ROLLUP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"New Sales Credit Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Gross Dealer Concessions Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Grid Credit Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Zone (Realigned)","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Product Category","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"YTD Grid Revenue","expression":"  var _gridtotal = calculate(sum(\u0027Grid Revenue Snowflake\u0027[Grid Credit Amount]),DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT')ReturnIF(ISBLANK(_gridtotal),0,_gridtotal)","isHidden":false},{"name":"YTD LH Grid Revenue","expression":"  var _gridtotal = calculate(sum(\u0027Grid Revenue Snowflake\u0027[Grid Credit Amount]),DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT',\u0027Grid Revenue Snowflake\u0027[Product Category]='Life \u0026 Health', \u0027Grid Revenue Snowflake\u0027[Reporting Roll Up Event Description]='First Year')ReturnIF(ISBLANK(_gridtotal),0,_gridtotal)","isHidden":false}],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'select b.''Calendar Day Date'',#(lf)b.''Distribution Performance Report Year Text'',#(lf)b.''Distribution Performance Reporting Month Text'',#(lf)b.''Distribution Performance Reporting Week Text'',#(lf)b.''Distribution Performance Reporting Day Text'',#(lf)b.''Distribution Performance Reporting Year Number'',#(lf)b.''Distribution Performance Reporting Year Week Number'',#(lf)a.''Zone (Realigned)'',#(lf)a.''Employee Identifier'',#(lf)a.''Rollup Agent Identifier'',#(lf)a.''Employee Identifier'' as ''Compensation Employee Identifier'',#(lf)a.''Compensation Reporting Roll Up Name'',#(lf)a.''Compensation Level 5 Product Line Of Business Subgroup Code'',#(lf)a.''Reporting Roll Up Product Description'',#(lf)a.''Reporting Roll Up Event Description'',#(lf)a.''Compensation Level 2 Product Character Code'',#(lf)case when a.''Employee Identifier'' = a.''Rollup Agent Identifier'' then \u0027Y\u0027#(lf)else \u0027N\u0027#(lf)end as CMPAGT_EQ_ROLLUP,#(lf)sum(a.''New Sales Credit Amount'') as ''New Sales Credit Amount'',#(lf)sum(a.''Gross Dealer Concessions Amount'') as ''Gross Dealer Concessions Amount'',#(lf)sum(a.''Grid Credit Amount'') as ''Grid Credit Amount''#(lf)from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Compensation and Sales Metrics Fact'' as a left join#(lf)''ENTERPRISE_EDW''.''PRESENTATION_01''.''Distribution Performance Dates Dimension'' as b#(lf)on a.''Distribution Performance Dates Surrogate Key''=b.''Date Surrogate Key'' left join#(lf)''ENTERPRISE_EDW''.''PRESENTATION_01''.''Conformed Contract Dimension Detail'' as c#(lf)on (a.''Contract Surrogate Key''=c.''Contract Surrogate Key''),#(lf)''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' as aa      #(lf)where a.''Employee Identifier''= aa.''Employee Identifier'' #(lf)and b.''Distribution Performance Reporting Year Number'' in (\u00272022\u0027,\u00272023\u0027)#(lf)and ((a.''New Sales Credit Amount'' \u003c 0.00 or a.''New Sales Credit Amount'' \u003e 0.00) or#(lf)(a.''Gross Dealer Concessions Amount'' \u003c 0.00 or a.''Gross Dealer Concessions Amount'' \u003e 0.00) or#(lf)(a.''Grid Credit Amount'' is not NULL))#(lf)and substring(a.''Employee Identifier'',1,2) = \u0027TS\u0027#(lf)and c.''Current Row Indicator'' =\u0027Y\u0027#(lf)and aa.''Current Row Indicator'' = \u0027Y\u0027#(lf)   and (  aa.''Organization Department Code'' \u003c\u003e \u00270383\u0027   #(lf)      or (a.''Reporting Roll Up Event Code'' \u003c\u003e\u0027REN\u0027#(lf)     and  (a.''Reporting Roll Up Event Code'' \u003c\u003e \u0027AB\u0027 or  ''Compensation Level 2 Product Character Code'' not in (\u0027RISK\u0027, \u0027ANN\u0027))#(lf)     and  a.''Financial Professional Revenue Hierarchy Level 2 Code'' \u003c\u003e (\u0027AB_MF_12B1\u0027)))#(lf)and a.''Source System Code Description'' in (\u0027Life and Annuity Trails Fact\u0027,\u0027Sales Metric Transaction\u0027,\u0027Sales Metric Adjustment\u0027)#(lf)#(lf)group by b.''Calendar Day Date'', b.''Distribution Performance Report Year Text'', b.''Distribution Performance Reporting Year Number'',#(lf)b.''Distribution Performance Reporting Year Week Number'', a.''Zone (Realigned)'', a.''Employee Identifier'', a.''Rollup Agent Identifier'',#(lf)b.''Distribution Performance Reporting Month Text'',#(lf)b.''Distribution Performance Reporting Week Text'',#(lf)b.''Distribution Performance Reporting Day Text'',#(lf)a.''Compensation Reporting Roll Up Name'',#(lf)a.''Compensation Level 5 Product Line Of Business Subgroup Code'',#(lf)a.''Reporting Roll Up Product Description'',#(lf)a.''Reporting Roll Up Event Description'',#(lf)a.''Compensation Level 2 Product Character Code''#(lf)UNION#(lf)select b.''Calendar Day Date'',#(lf)b.''Distribution Performance Report Year Text'',#(lf)b.''Distribution Performance Reporting Month Text'',#(lf)b.''Distribution Performance Reporting Week Text'',#(lf)b.''Distribution Performance Reporting Day Text'',#(lf)b.''Distribution Performance Reporting Year Number'',#(lf)b.''Distribution Performance Reporting Year Week Number'',#(lf)a.''Rollup Agent Identifier'' as ''Employee Identifier'',#(lf)a.''Rollup Agent Identifier'',#(lf)a.''Zone (Realigned)'',#(lf)a.''Employee Identifier'' as ''Compensation Employee Identifier'',#(lf)a.''Compensation Reporting Roll Up Name'',#(lf)a.''Compensation Level 5 Product Line Of Business Subgroup Code'',#(lf)a.''Reporting Roll Up Product Description'',#(lf)a.''Reporting Roll Up Event Description'',#(lf)a.''Compensation Level 2 Product Character Code'',#(lf)case when a.''Employee Identifier'' = a.''Rollup Agent Identifier'' then \u0027Y\u0027#(lf)else \u0027N\u0027#(lf)end as CMPAGT_EQ_ROLLUP,#(lf)sum(a.''New Sales Credit Amount'') as ''New Sales Credit Amount'',#(lf)sum(a.''Gross Dealer Concessions Amount'') as ''Gross Dealer Concessions Amount'',#(lf)sum(a.''Grid Credit Amount'') as ''Grid Credit Amount''#(lf)from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Compensation and Sales Metrics Fact'' as a left join#(lf)''ENTERPRISE_EDW''.''PRESENTATION_01''.''Distribution Performance Dates Dimension'' as b#(lf)on a.''Distribution Performance Dates Surrogate Key''=b.''Date Surrogate Key'' left join#(lf)''ENTERPRISE_EDW''.''PRESENTATION_01''.''Conformed Contract Dimension Detail'' as c#(lf)on (a.''Contract Surrogate Key''=c.''Contract Surrogate Key''),#(lf)''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' as aa     #(lf)    #(lf)where a.''Rollup Agent Identifier'' = aa.''Employee Identifier''#(lf)and b.''Distribution Performance Reporting Year Number'' in (\u00272022\u0027,\u00272023\u0027)#(lf)and a.''Employee Identifier'' \u003c\u003e a.''Rollup Agent Identifier''#(lf)and ((a.''New Sales Credit Amount'' \u003c 0.00 or a.''New Sales Credit Amount'' \u003e 0.00) or#(lf)(a.''Gross Dealer Concessions Amount'' \u003c 0.00 or a.''Gross Dealer Concessions Amount'' \u003e 0.00) or#(lf)(a.''Grid Credit Amount'' is not NULL))#(lf)and substring(a.''Employee Identifier'',1,2) = \u0027TS\u0027#(lf)and c.''Current Row Indicator'' =\u0027Y\u0027#(lf)and aa.''Current Row Indicator'' = \u0027Y\u0027 #(lf)   and (  aa.''Organization Department Code'' \u003c\u003e \u00270383\u0027   #(lf)      or (a.''Reporting Roll Up Event Code'' \u003c\u003e\u0027REN\u0027#(lf)     and  (a.''Reporting Roll Up Event Code'' \u003c\u003e \u0027AB\u0027 or  ''Compensation Level 2 Product Character Code'' not in (\u0027RISK\u0027, \u0027ANN\u0027))#(lf)     and  a.''Financial Professional Revenue Hierarchy Level 2 Code'' \u003c\u003e (\u0027AB_MF_12B1\u0027)))#(lf)and a.''Source System Code Description'' in (\u0027Life and Annuity Trails Fact\u0027,\u0027Sales Metric Transaction\u0027,\u0027Sales Metric Adjustment\u0027)#(lf)#(lf)group by b.''Calendar Day Date'', b.''Distribution Performance Report Year Text'', b.''Distribution Performance Reporting Year Number'',#(lf)b.''Distribution Performance Reporting Year Week Number'', a.''Zone (Realigned)'', a.''Employee Identifier'', a.''Rollup Agent Identifier'',#(lf)a.''Compensation Reporting Roll Up Name'', a.''Compensation Level 5 Product Line Of Business Subgroup Code'',#(lf)a.''Reporting Roll Up Product Description'',#(lf)a.''Reporting Roll Up Event Description'',#(lf)a.''Compensation Level 2 Product Character Code'',#(lf)b.''Distribution Performance Reporting Month Text'',#(lf)b.''Distribution Performance Reporting Week Text'',#(lf)b.''Distribution Performance Reporting Day Text''', null, [EnableFolding=true]),    #'Added Conditional Column' = Table.AddColumn(Source, 'Product Category', each if [Compensation Level 2 Product Character Code] = 'RISK' then 'Life \u0026 Health' else if [Compensation Level 2 Product Character Code] = 'ANN' then 'Annuity' else if [Compensation Level 2 Product Character Code] = 'BANK' then 'Investments' else if [Compensation Level 2 Product Character Code] = 'INVEST' then 'Investments' else null)in    #'Added Conditional Column'"}]},{"name":"SALES_HIER","isHidden":false,"columns":[{"name":"SALE_HIER_DIM_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EMP_DIM_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SALE_HIER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Advisor Group","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ZONE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MARKET","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MARKET_LEADERS","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP Leader","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RPT_TO_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Report to Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Adjusted Service Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TENURE","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TENURE_GROUP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SFC_FC","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FR_SEGMENT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CREDENTIALSXX","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LICENSESXX","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"GNDR_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LST_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FRST_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MDDL_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ASSIGNED_AFA","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"OP_COUNT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Conference Qualification Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team Purpose Code","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'select distinct b.''Sales Hierarchy Dimension Surrogate Key'' as SALE_HIER_DIM_SK,#(lf)       a.''Workforce Dimension Detail Surrogate Key'' as EMP_DIM_SK,#(lf)       a.''Employee Identifier'' as EMP_ID,#(lf)       b.''Sales Hierarchy Identifier'' as SALE_HIER_ID,#(lf)       a.''Employee Name'' as EMP_NM,#(lf)       aa.''Job Type Code'' as JOB_TYP_CDE,#(lf)       aa.''Job Type Description'' as JOB_TYP_DSCR,#(lf)       case when a.''Organization Department Code'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027) then \u00270383\u0027#(lf)         else a.''Organization Department Code''#(lf)       end as TAG,#(lf)       case when aa.''Department Identifier'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027) then \u0027Virtual Advice\u0027#(lf)         else aa.''Department Name''#(lf)       end as ''TAG Name'',#(lf)       case when aa.''Department Identifier'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027) then \u00270383-Virtual Advice\u0027#(lf)         else a.''Organization Department Code''||\u0027-\u0027||aa.''Department Name''#(lf)       end as ''Advisor Group'',#(lf)       (substr(b.''Organization Zone Code'',6,2))   AS ZONE,#(lf)       b.''Organization Zone Code'' as Market,#(lf)       zz4.market_leaders,#(lf)       c.''Sub Department Identifier'' as MVP_ID,#(lf)       zz3.''MVP Leader'', #(lf)       c.''Report to ID'' as RPT_TO_ID,#(lf)       cc.''First Name''||\u0027 \u0027||cc.''Last Name'' as ''Report to Name'',#(lf)       a.''Adjusted Service Date'',#(lf)       c.''Financial Professional Tenure'' as Tenure,#(lf)       c.''Financial Professional Tenure Group'' as Tenure_Group,#(lf)       case when a.''Senior Financial Consultant Indicator'' = \u0027Y\u0027 then \u0027SFC\u0027#(lf)                      when a.''Financial Consultant Indicator'' = \u0027Y\u0027 then \u0027FC\u0027#(lf)                      when a.''Wealth Advisor Indicator'' = \u0027Y\u0027 then \u0027WA\u0027#(lf)                 end as SFC_FC,#(lf)       (case when a.''Senior Financial Consultant Indicator'' = \u0027Y\u0027 then \u0027SFC\u0027#(lf)             when a.''Financial Consultant Indicator'' = \u0027Y\u0027 then \u0027FC\u0027#(lf)             when a.''Wealth Advisor Indicator'' = \u0027Y\u0027 then \u0027WA\u0027#(lf)             when a.''Job Type Code'' in (\u0027002003\u0027,\u0027002018\u0027,\u0027002019\u0027) then A.''Job Type Description''#(lf)             when a.''Job Type Code'' = \u0027002016\u0027 then a.''Job Type Description''#(lf)             when ((a.''Senior Financial Consultant Indicator'' = \u0027N\u0027 or a.''Financial Consultant Indicator'' = \u0027N\u0027) and #(lf)                    c.''Financial Professional Tenure'' \u003e= 4 and #(lf)                    a.''Job Type Code'' in (\u0027002000\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027003602\u0027,\u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027))#(lf)                      then \u0027VETFR\u0027#(lf)             when c.''Financial Professional Tenure'' \u003e= 3 and c.''Financial Professional Tenure'' \u003c 4  and   #(lf)                  a.''Job Type Code'' in (\u0027002000\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027003602\u0027,\u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027)#(lf)                      then \u0027NFR4\u0027#(lf)             when c.''Financial Professional Tenure'' \u003e= 2 and c.''Financial Professional Tenure'' \u003c 3  and   #(lf)                  a.''Job Type Code'' in (\u0027002000\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027003602\u0027,\u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027)#(lf)                      then \u0027NFR3\u0027#(lf)             when c.''Financial Professional Tenure'' \u003e= 1 and c.''Financial Professional Tenure'' \u003c 2  and   #(lf)                  a.''Job Type Code'' in (\u0027002000\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027003602\u0027,\u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027)#(lf)                      then \u0027NFR2\u0027 #(lf)             when c.''Financial Professional Tenure'' \u003e= 0 and c.''Financial Professional Tenure'' \u003c 1  and   #(lf)                  a.''Job Type Code'' in (\u0027002000\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027003602\u0027,\u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027)#(lf)                      then \u0027NFR1\u0027 #(lf)        end) as FR_SEGMENT,#(lf)        trim(concat_ws(\u0027 \u0027,dd.CHFC_DSGT_CDE,dd.CLF_DSGT_CDE,dd.CLU_DSGT_CDE,dd.CFA_DSGT_CDE,dd.CFP_DSGT_CDE,dd.FIC_DSGT_CDE,dd.FICF_DSGT_CDE,dd.LUTCF_DSGT_CDE)) AS Credentialsxx,#(lf)        concat_ws(\u0027 \u0027,dd.S1_LIC_STS_CDE,dd.S4_LIC_STS_CDE,dd.S6_LIC_STS_CDE,dd.S7_LIC_STS_CDE,dd.S9_LIC_STS_CDE,#(lf)        dd.S10_LIC_STS_CDE,dd.S22_LIC_STS_CDE,dd.S24_LIC_STS_CDE,dd.S26_LIC_STS_CDE,dd.S27_LIC_STS_CDE,#(lf)        dd.S51_LIC_STS_CDE,dd.S53_LIC_STS_CDE,dd.S62_LIC_STS_CDE,dd.S63_LIC_STS_CDE,dd.S65_LIC_STS_CDE,#(lf)        dd.S66_LIC_STS_CDE,dd.S86_LIC_STS_CDE,dd.S87_LIC_STS_CDE) as Licensesxx,  #(lf)          #(lf)       a.''Gender Code'' as GNDR_CDE, #(lf)       a.''Last Name'' as LST_NM, #(lf)       case when a.''Nick Name'' IN (\u0027 \u0027) then a.''First Name''#(lf)         else a.''Nick Name''#(lf)       end as FRST_NM, #(lf)       a.''Middle Name'' as MDDL_NM,#(lf)       xx.assigned_afa,#(lf)       case when zz.opcount is NULL then 0 #(lf)         else zz.opcount#(lf)       end as OP_Count,#(lf)       aa.''Conference Qualification Type Code'',#(lf)       zzz.''Team Identifier'',#(lf)       zzz.''Team Name'',#(lf)       zzz.''Team Purpose Code''#(lf)       #(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' a inner join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' as aa#(lf)    on (a.''Employee Identifier''=aa.''Source System Key Text'' and aa.''Current Row Indicator'' = \u0027Y\u0027)  left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' b #(lf)    on (a.''Employee Identifier''= b.''Sales Hierarchy Identifier'') left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' c #(lf)    on (a.''Employee Identifier''= c.''Source System Key Text'' AND c.''Current Row Indicator'' = \u0027Y\u0027) left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' cc #(lf)    on (c.''Report to ID''= cc.''Source System Key Text'' AND cc.''Current Row Indicator'' = \u0027Y\u0027) left join  #(lf)        (select d.''Employee Identifier'',#(lf)                (case when \u0027Y\u0027 = d.''Chartered Financial Consultant Designation Code'' THEN \u0027ChFC\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS CHFC_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Chartered Leadership Fellow Designation Code'' THEN \u0027CLF\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS CLF_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Chartered Life Underwriter Designation Code'' THEN \u0027CLU\u0027#(lf)                   else \u0027 \u0027 #(lf)                 end) AS CLU_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Chartered Financial Analyst Designation Code'' THEN \u0027CFA\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS CFA_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Fraternal Insurance Counselor Designation Code'' THEN \u0027FIC\u0027#(lf)                   else \u0027 \u0027 #(lf)                 end) AS FIC_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Fraternal Insurance Counselor Fellow Designation Code'' THEN \u0027FICF\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS FICF_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Certified Financial Planner Designation Code'' THEN \u0027CFP\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS CFP_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Life Underwriter Training Counsel Fellow Designation Code'' THEN \u0027LUTCF\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS LUTCF_DSGT_CDE,#(lf)                (case when \u0027Y\u0027 = d.''Series One License Status Code'' THEN \u00271\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S1_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Four License Status Code'' THEN \u00274\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S4_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Six License Status Code'' THEN \u00276\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S6_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Seven License Status Code'' THEN \u00277\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S7_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Nine License Status Code'' THEN \u00279\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S9_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Ten License Status Code'' THEN \u002710\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S10_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Twenty-two License Status Code'' THEN \u002722\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S22_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Twenty-four License Status Code'' THEN \u002724\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S24_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Twenty-six License Status Code'' THEN \u002726\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S26_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Twenty-seven License Status Code'' THEN \u002727\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S27_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Fifty-one License Status Code'' THEN \u002751\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S51_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Fifty-three License Status Code'' THEN \u002753\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S53_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Sixty-two License Status Code'' THEN \u002762\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S62_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Sixty-three License Status Code'' THEN \u002763\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S63_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Sixty-five License Status Code'' THEN \u002765\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S65_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Sixty-six License Status Code'' THEN \u002766\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S66_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Eighty-six License Status Code'' THEN \u002786\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S86_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Eighty-seven License Status Code'' THEN \u002787\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S87_LIC_STS_CDE#(lf)              #(lf)           from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' d#(lf)          where d.''Termination Date'' is null   #(lf)            and d.''Current Row Indicator'' = \u0027Y\u0027#(lf)            and d.''Employee Status Type Code'' in (\u0027A\u0027,\u0027L\u0027,\u0027I\u0027)) as dd#(lf)    on A.''Employee Identifier'' = dd.''Employee Identifier''  left join#(lf)           #(lf)        (select distinct aa.''Source System Key Text'',#(lf)                          (case when e.emp_count = 1 then f.emp_nm#(lf)                      when e.emp_count \u003e 1 then \u0027Multiple Associates\u0027#(lf)                   else \u0027None\u0027#(lf)                 end) as assigned_afa#(lf)           from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' as aa left join  #(lf)              (select e.''Report to ID'', #(lf)                      count(e.''Organization Dimension Surrogate Key'') as emp_count   #(lf)                 from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' e  #(lf)                where e.''Job Type Code'' in (\u0027002000\u0027,\u0027002010\u0027,\u0027002003\u0027,\u0027002011\u0027,\u0027002012\u0027,\u0027003100\u0027,#(lf)                                            \u0027002017\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027002018\u0027,\u0027002019\u0027,\u0027003500\u0027,#(lf)                                            \u0027002022\u0027,\u0027002024\u0027,\u0027002025\u0027,\u0027002026\u0027,\u0027002027\u0027,\u0027002030\u0027,#(lf)                                            \u0027002031\u0027,\u0027002032\u0027)#(lf)                  and e.''Employee Status Type Code'' = \u0027A\u0027 #(lf)                  and e.''Current Row Indicator'' = \u0027Y\u0027#(lf)                  and e.''Report to ID'' \u003c\u003e \u0027'' ''\u0027 #(lf)                  and e.''Effective End Date'' = \u00279999-12-31\u0027 #(lf)               group by ''Report to ID'') as e #(lf)             on aa.''Source System Key Text'' = e.''Report to ID'' left join#(lf)         #(lf)              (select f.''Organization Dimension Surrogate Key'',#(lf)                      f.''Last Name''||\u0027, \u0027||f.''First Name'' as EMP_NM, #(lf)                      f.''Report to ID''  #(lf)                 from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' f#(lf)                where (f.''Job Type Code'' in (\u0027002000\u0027,\u0027002010\u0027,\u0027002003\u0027,\u0027002011\u0027,\u0027002012\u0027,\u0027003100\u0027,#(lf)                                             \u0027002017\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027002018\u0027,\u0027002019\u0027,\u0027003500\u0027,#(lf)                                             \u0027002022\u0027,\u0027002024\u0027,\u0027002025\u0027,\u0027002026\u0027,\u0027002027\u0027,\u0027002030\u0027,#(lf)                                             \u0027002031\u0027,\u0027002032\u0027) or #(lf)                      f.''Department Identifier'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027)) #(lf)                  and f.''Department Identifier'' not in (\u00272410\u0027,\u00273005\u0027,\u00277151\u0027,\u00277152\u0027,\u00279150\u0027,\u00279134\u0027,#(lf)                                                        \u0027NA\u0027,\u00274100\u0027,\u00276053\u0027,\u00276100\u0027,\u00278900\u0027) #(lf)                  and f.''Employee Status Type Code'' = \u0027A\u0027 #(lf)                  and f.''Current Row Indicator'' = \u0027Y\u0027#(lf)                  and f.''Report to ID'' \u003c\u003e \u0027'' ''\u0027 #(lf)                  and f.''Effective End Date'' = \u00279999-12-31\u0027) as f  #(lf)              on e.''Report to ID''=f.''Report to ID''#(lf)          where (aa.''Job Type Code'' in (\u0027002000\u0027,\u0027002010\u0027,\u0027002003\u0027,\u0027002011\u0027,\u0027002012\u0027,\u0027003100\u0027,#(lf)                                        \u0027002017\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027002018\u0027,\u0027002019\u0027,\u0027003500\u0027,#(lf)                                        \u0027002022\u0027,\u0027002024\u0027,\u0027002025\u0027,\u0027002026\u0027,\u0027002027\u0027,\u0027002030\u0027,#(lf)                                        \u0027002031\u0027,\u0027002032\u0027) or #(lf)                aa.''Department Identifier'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027)) #(lf)            and aa.''Department Identifier'' not in (\u00272410\u0027,\u00273005\u0027,\u00277151\u0027,\u00277152\u0027,\u00279150\u0027,\u00279134\u0027,#(lf)                                                   \u0027NA\u0027,\u00274100\u0027,\u00276053\u0027,\u00276100\u0027,\u00278900\u0027) #(lf)            and aa.''Current Row Indicator'' = \u0027Y\u0027#(lf)            and aa.''Employee Status Type Code'' = \u0027A\u0027 #(lf)            and aa.''Report to ID'' \u003c\u003e \u0027'' ''\u0027 #(lf)            and aa.''Effective End Date'' = \u00279999-12-31\u0027) as xx#(lf)#(lf)    on a.''Employee Identifier''=xx.''Source System Key Text'' left join #(lf)      (select count(z.''Organization Dimension Surrogate Key'') as OPCOUNT,   #(lf)                    z.''Report to ID'' #(lf)         from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' z  #(lf)        where z.''Current Row Indicator'' = \u0027Y\u0027#(lf)          and z.''Field Professional Roles'' in (\u0027Unlicensed Office Professionals\u0027,\u0027Licensed Office Professionals\u0027)#(lf)          and z.''Employee Status Type Code'' in (\u0027A\u0027,\u0027I\u0027,\u0027L\u0027)#(lf)       group by ''Report to ID'') as zz#(lf)         #(lf)    on a.''Employee Identifier'' = zz.''Report to ID''   left join#(lf)#(lf)(select a.''Employee Identifier'',#(lf)        b.''Team Identifier'',#(lf)        b.''Team Name'',#(lf)        b.''Team Purpose Code'',#(lf)        A.''Effective Date''#(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Employee Team Organization Relationship Current Dimension''  a inner join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Team Organization Current Dimension'' b#(lf)    on (a.''Team Identifier Surrogate Key'' = b.''Team Identifier Surrogate Key'')  inner join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' c#(lf)    on (a.''Employee Identifier'' = c.''Employee Identifier'')   #(lf)    #(lf) where b.''Effective Status Code'' = \u0027A\u0027#(lf)   and c.''Employee Status Type Code'' = \u0027A\u0027#(lf)   and c.''Current Row Indicator'' = \u0027Y\u0027#(lf)   and a.''Team Member Action Code'' \u003c\u003e \u0027DROP\u0027#(lf)--   and b.''Team Purpose Code'' NOT in (\u0027COAC\u0027,\u0027ENSB\u0027) #(lf)   and b.''Team Purpose Code'' NOT in (\u0027COAC\u0027,\u0027ENSB\u0027) #(lf)   and a.''Effective Date'' = (SELECT MAX(aa.''Effective Date'')#(lf)                                FROM ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Employee Team Organization Relationship Current Dimension''  aa inner join#(lf)                                     ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Team Organization Current Dimension'' bb#(lf)                                  on (aa.''Team Identifier Surrogate Key'' = bb.''Team Identifier Surrogate Key'' and a.''Employee Identifier''= aa.''Employee Identifier'') INNER JOIN#(lf)                                     ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' cc#(lf)                                  on (aa.''Employee Identifier''= cc.''Employee Identifier'')#(lf)                                         WHERE bb.''Effective Status Code'' = \u0027A\u0027#(lf)                                 AND cc.''Employee Status Type Code'' = \u0027A\u0027  #(lf)                                 and cc.''Current Row Indicator'' = \u0027Y\u0027#(lf)                                 and aa.''Team Member Action Code'' \u003c\u003e \u0027DROP\u0027#(lf)                                -- and bb.''Team Purpose Code'' NOT in (\u0027COAC\u0027,\u0027ENSB\u0027) #(lf)                                 and bb.''Team Purpose Code'' NOT in (\u0027COAC\u0027,\u0027ENSB\u0027) #(lf)                                -- and bb.''Team Purpose Code'' in (\u0027ASSC\u0027)#(lf)                            )#(lf)  order by a.''Employee Identifier'') as zzz#(lf)  #(lf)   on a.''Employee Identifier'' = zzz.''Employee Identifier'' left join#(lf)#(lf)#(lf)       (select distinct a2.''Organization Department Code'' as RFO_CDE,#(lf)                        a2.''Organization Sub Department Code'' as MVP_ID,#(lf)                        cc.''Organization Department Description'',#(lf)                        case when cc.''Employee Name'' is null then \u0027Vacant\u0027#(lf)                          else cc.''Employee Name''#(lf)                        end as ''MVP Leader''    #(lf)          from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' a2  left join#(lf)               (Select Distinct aa.''Organization Sub Department Code'',#(lf)                                aa.''Organization Department Description'',#(lf)                                bb.''Employee Identifier'',#(lf)                                bb.''Employee Name'' #(lf)                  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' as aa left join#(lf)                       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' as bb#(lf)                    on aa.''Sales Hierarchy Identifier''=bb.''Employee Identifier''  #(lf)                 where aa.''Current Row Indicator'' = \u0027Y\u0027#(lf)                   and bb.''Employee Status Type Code'' = \u0027A\u0027#(lf)                   and bb.''Current Row Indicator'' = \u0027Y\u0027#(lf)                   and aa.''Effective End Date'' = \u00279999-12-31\u0027#(lf)                   and bb.''Job Type Code'' = \u0027001001\u0027#(lf)                 order by aa.''Organization Sub Department Code'') cc#(lf)             on a2.''Organization Sub Department Code''=cc.''Organization Sub Department Code''  #(lf)          where a2.''Current Row Indicator'' = \u0027Y\u0027#(lf)            and a2.''Effective End Date'' = \u00279999-12-31\u0027#(lf)            and a2.''Organization Zone Code'' \u003c\u003e \u0027UKWN\u0027#(lf)           order by a2.''Organization Sub Department Code''  ) as zz3#(lf)  on c.''Sub Department Identifier''= zz3.''MVP_ID'' left join#(lf)   #(lf)    #(lf)     (SELECT DISTINCT a4.''Organization Department Code'' as RFO_CDE,#(lf)                      a4.''Organization Zone Code'' as TAG_ZONE_NM, #(lf)                      (substring(a4.''Organization Zone Code'',6,5)) as Market_ID,#(lf)                      case when t4.''Employee Name'' is null then \u0027Vacant\u0027#(lf)                        else t4.''Employee Name''#(lf)                      end as Market_Leaders#(lf)#(lf)        from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' a4 left join #(lf)             (select distinct aa4.''Organization Zone Code'',#(lf)                              bb4.''Employee Name''  #(lf)#(lf)                from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' aa4 left join #(lf)                     ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' bb4#(lf)                  on aa4.''Sales Hierarchy Identifier''=bb4.''Employee Identifier''#(lf)               where aa4.''Current Row Indicator'' = \u0027Y\u0027      #(lf)                 and bb4.''Employee Status Type Code'' in (\u0027A\u0027)#(lf)                 and aa4.''Effective End Date'' = \u00279999-12-31\u0027#(lf)                 and bb4.''Current Row Indicator'' = \u0027Y\u0027#(lf)                 and aa4.''Effective End Date'' = \u00279999-12-31\u0027#(lf)                 and bb4.''Job Type Code'' in (\u0027001002\u0027,\u0027001003\u0027,\u0027001007\u0027,\u0027003500\u0027)#(lf)                 and bb4.''Employee Identifier'' not in (\u0027TS62904\u0027,\u0027TS67022\u0027)) t4 #(lf)          on a4.''Organization Zone Code'' = t4.''Organization Zone Code''#(lf)       where a4.''Current Row Indicator'' = \u0027Y\u0027#(lf)         and a4.''Effective End Date'' = \u00279999-12-31\u0027#(lf)         and substring(a4.''Organization Zone Code'',6,2) \u003c\u003e \u002700\u0027#(lf)         and a4.''Organization Department Code'' \u003c\u003e \u0027UKWN\u0027#(lf)       order by a4.''Organization Zone Code'') zz4#(lf)     #(lf)   on  b.''Organization Zone Code''= zz4.''TAG_ZONE_NM'' #(lf)  #(lf)  #(lf) where a.''Employee Status Type Code'' IN (\u0027A\u0027,\u0027I\u0027,\u0027L\u0027)#(lf)   and (c.''Job Family Code'' LIKE \u0027FLD%\u0027 OR#(lf)        c.''Job Family Code'' =\u0027SALES\u0027 OR#(lf)        c.''TF Job Class Code'' =\u0027FAC\u0027)#(lf)   and a.''Termination Date'' is NULL #(lf)   and (a.''Job Type Code'' in (\u0027002003\u0027,\u0027002010\u0027,\u0027002011\u0027,\u0027002012\u0027,\u0027002016\u0027,\u0027002017\u0027,#(lf)                              \u0027002000\u0027,\u0027002022\u0027,\u0027002024\u0027,\u0027002025\u0027,\u0027002026\u0027,\u0027002027\u0027,#(lf)                              \u0027002030\u0027,\u0027002031\u0027,\u0027002032\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027003602\u0027,#(lf)                              \u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027) or #(lf)       a.''Organization Department Code'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027)) #(lf)   and c.''Department Identifier'' not in (\u00272410\u0027,\u00273005\u0027,\u00277151\u0027,\u00277152\u0027,\u00279150\u0027,\u00279134\u0027,#(lf)                                         \u0027NA\u0027,\u00274100\u0027,\u00276053\u0027,\u00276100\u0027,\u00278900\u0027) #(lf)   and b.''Effective End Date'' = \u00279999-12-31\u0027 #(lf)   and b.''Current Row Indicator'' = \u0027Y\u0027 #(lf)   and a.''Current Row Indicator'' = \u0027Y\u0027 #(lf)   --and a.''Employee Identifier'' = \u0027TS77676\u0027#(lf)order by a.''Employee Identifier''', null, [EnableFolding=true]),    #'Removed Duplicates' = Table.Distinct(Source, {'EMP_ID'})in    #'Removed Duplicates'"}]},{"name":"New Clients","isHidden":false,"columns":[{"name":"DT_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CTRC_VRSN_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"WRTG_AGT_VRSN_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"FIN_CUST_PNT_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CUST_AGE","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"AGE_CLAS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"AGE_CLAS_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FIN_CUST_PNT_VLU","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CUST_LGAL_FMT_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CUST_BRTH_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"MBR_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MBR_TYP_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RSDL_ST_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CTRC_ISS_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"L5_PLOB_SGRP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"L5_PLOB_SGRP_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"L4_PLOB_GRP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"L4_PLOB_GRP_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"L3_PROD_LOB_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"L3_PROD_LOB_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"L2_PROD_CHAR_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"L2_PROD_CHAR_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PARY_DSPL_2_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FRST_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MDDL_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LST_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ADJ_SVC_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_STS_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_STS_TYP_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CURR_ROW_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CAL_DAY_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"CAL_MTH_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CAL_MTH_STRT_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"CAL_MTH_END_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"CAL_YR_QTR_NBR","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CAL_QTR_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CAL_WK_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FIN_CUST_PNT_RSN_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FIN_CUST_PNT_RSN_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CTRC_RLTN_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CTRC_RLTN_TYP_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MEMBER_AGE_GROUP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MEMBER_AGE","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_END_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_WK_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_DAY_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_MTH_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_QTR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SALE_HIER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EFF_BEG_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"EFF_END_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"CURR_ROW_IND2","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PRTR_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MANP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_ZONE_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_ZONE_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_DEPT_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_DEPT_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_DIV_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_DIV_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_SUB_DEPT_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SALE_HIER_DIM_SK","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"FP Tenure - NFP, Vet","dataType":"String","isHidden":false,"expression":"if(not(\u0027New Clients\u0027[JOB_TYP_CDE] in {'002000', '002010', '002022', '002024', '002025', '002026', '002027', '003100', '003500'}), 'Vet',if(((\u0027New Clients\u0027[CAL_DAY_DT] - \u0027New Clients\u0027[ADJ_SVC_DT]) / 365.25) \u003c 4, 'NFP', 'Vet')) ","columnType":"Calculated"}],"measures":[{"name":"Prior Year NC","expression":"CALCULATE( sum(\u0027New Clients\u0027[FIN_CUST_PNT_VLU]), DTRB_PERF_DATES[Prior Year Flag] in {TRUE})","isHidden":false},{"name":"Prior Year 2 NC","expression":"CALCULATE( sum(\u0027New Clients\u0027[FIN_CUST_PNT_VLU]), DTRB_PERF_DATES[Prior Year 2 Flag] in {TRUE})","isHidden":false},{"name":"PYTD NC","expression":"var prev2weeknum = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[CAL_DAY_DT],max(DTRB_PERF_DATES[Two Sundays Ago]))ReturnCALCULATE(sum(\u0027New Clients\u0027[FIN_CUST_PNT_VLU]),DTRB_PERF_DATES[Prior Year Flag] in {TRUE},DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR]\u003c=prev2weeknum)","isHidden":false},{"name":"YTD_NC","expression":"calculate( sum(\u0027New Clients\u0027[FIN_CUST_PNT_VLU]),DTRB_PERF_DATES[YTD Flag two Sundays] in {TRUE})","isHidden":false},{"name":"YOY Change NC","expression":"(([YTD_NC] - [PYTD NC])/([PYTD NC]))","isHidden":false},{"name":"New Client 4 Wk Average","expression":"CALCULATE(divide(\u0027New Clients\u0027[YTD_NC],4),\u0027DTRB_PERF_DATES\u0027[Prior 4 Weeks Flag NC] in {TRUE},DTRB_PERF_DATES[Current Year Flag] in {TRUE})","isHidden":false},{"name":"4 Wk Gap New Clients","expression":"[Weekly Need New Clients]-\u0027New Clients\u0027[New Client 4 Wk Average]","isHidden":false}],"source":[{"expression":"let    Source = DB2.Database('podwh021:50000', 'podwh021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT IA_DATES_ITRL.DT_SK,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.CTRC_VRSN_NBR,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.WRTG_AGT_VRSN_NBR,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_STS_CDE,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.CUST_AGE,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.AGE_CLAS_CDE,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.AGE_CLAS_DSCR,#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_VLU,#(lf)       CNF_CUSTOMER_DIM_CFDL.CUST_LGAL_FMT_NM, #(lf)       CNF_CUSTOMER_DIM_CFDL.CUST_BRTH_DT,#(lf)       CNF_CUSTOMER_DIM_CFDL.MBR_TYP_CDE,#(lf)       CNF_CUSTOMER_DIM_CFDL.MBR_TYP_DSCR,#(lf)       CNF_CUSTOMER_DIM_CFDL.RSDL_ST_CDE,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.CTRC_ISS_DT, #(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L5_PLOB_SGRP_CDE,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L5_PLOB_SGRP_DSCR,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L4_PLOB_GRP_CDE,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L4_PLOB_GRP_DSCR,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L3_PROD_LOB_CDE,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L3_PROD_LOB_DSCR,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L2_PROD_CHAR_CDE,#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L2_PROD_CHAR_DSCR,#(lf)       AGT_DIM_CURR_CFDL.PARY_DSPL_2_NM,#(lf)       AGT_DIM_CURR_CFDL.FRST_NM,#(lf)       AGT_DIM_CURR_CFDL.MDDL_NM,#(lf)       AGT_DIM_CURR_CFDL.LST_NM,#(lf)       AGT_DIM_CURR_CFDL.ADJ_SVC_DT,#(lf)       AGT_DIM_CURR_CFDL.EMP_ID,#(lf)       AGT_DIM_CURR_CFDL.EMP_STS_TYP_CDE,#(lf)       AGT_DIM_CURR_CFDL.EMP_STS_TYP_DSCR,#(lf)       AGT_DIM_CURR_CFDL.JOB_TYP_CDE,#(lf)       AGT_DIM_CURR_CFDL.JOB_TYP_DSCR,#(lf)       AGT_DIM_CURR_CFDL.CURR_ROW_IND,#(lf)       IA_DATES_ITRL.CAL_DAY_DT,#(lf)       IA_DATES_ITRL.CAL_MTH_NM,#(lf)       IA_DATES_ITRL.CAL_MTH_STRT_DT,#(lf)       IA_DATES_ITRL.CAL_MTH_END_DT,#(lf)       IA_DATES_ITRL.CAL_YR_QTR_NBR,#(lf)       IA_DATES_ITRL.CAL_QTR_NM,#(lf)       IA_DATES_ITRL.CAL_WK_NM,#(lf)       FIN_CUST_ELIG_DIM_CFDL.FIN_CUST_PNT_RSN_CDE,#(lf)       FIN_CUST_ELIG_DIM_CFDL.FIN_CUST_PNT_RSN_DSCR,#(lf)       FIN_CUST_ELIG_DIM_CFDL.CTRC_RLTN_TYP_CDE,#(lf)       FIN_CUST_ELIG_DIM_CFDL.CTRC_RLTN_TYP_DSCR,#(lf)       CASE#(lf)          WHEN (CUST_AGE \u003e= 0) AND (CUST_AGE \u003c= 15) THEN \u00270-15\u0027#(lf)          WHEN (CUST_AGE \u003e= 16) AND (CUST_AGE \u003c= 25) THEN \u002716-25\u0027#(lf)          WHEN (CUST_AGE \u003e= 26) AND (CUST_AGE \u003c= 35) THEN \u002726-35\u0027#(lf)          WHEN (CUST_AGE \u003e= 36) AND (CUST_AGE \u003c= 45) THEN \u002736-45\u0027#(lf)          WHEN (CUST_AGE \u003e= 46) AND (CUST_AGE \u003c= 55) THEN \u002746-55\u0027#(lf)          WHEN (CUST_AGE \u003e= 56) AND (CUST_AGE \u003c= 65) THEN \u002756-65\u0027#(lf)          WHEN (CUST_AGE \u003e= 66) AND (CUST_AGE \u003c= 75) THEN \u002766-75\u0027#(lf)          WHEN CUST_AGE \u003e 75 THEN \u002776+\u0027#(lf)       END#(lf)          AS Member_Age_Group,#(lf)       integer (floor ( (CURRENT DATE - CUST_BRTH_DT) / 10000)) AS Member_Age,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_WK_END_DT,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_WK_NBR,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_YR_NBR,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_YR_WK_NBR,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_WK_TXT,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_YR_TXT,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_DAY_TXT,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_MTH_TXT,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_QTR_TXT,#(lf)       SALE_HIER_DIM.SALE_HIER_ID,#(lf)       SALE_HIER_DIM.EFF_BEG_TMSP,#(lf)       SALE_HIER_DIM.EFF_END_TMSP,#(lf)       SALE_HIER_DIM.CURR_ROW_IND,#(lf)       SALE_HIER_DIM.PRTR_NM,#(lf)       SALE_HIER_DIM.MANP_NM,#(lf)       SALE_HIER_DIM.ORZN_ZONE_CDE,#(lf)       SALE_HIER_DIM.ORZN_ZONE_DSCR,#(lf)       (LEFT(SALE_HIER_DIM.ORZN_ZONE_CDE,4)) as ORZN_DEPT_CDE,#(lf)       SALE_HIER_DIM.ORZN_DEPT_DSCR,#(lf)       SALE_HIER_DIM.ORZN_DIV_CDE,#(lf)       SALE_HIER_DIM.ORZN_DIV_DSCR,#(lf)       SALE_HIER_DIM.ORZN_SUB_DEPT_CDE,#(lf)       SALE_HIER_DIM.SALE_HIER_DIM_SK#(lf)#(lf)  FROM ((((((COMMON.IA_DATES_ITRL IA_DATES_ITRL#(lf)             INNER JOIN COMMON.DTRB_PERF_DATES DTRB_PERF_DATES#(lf)                ON (IA_DATES_ITRL.DT_SK = DTRB_PERF_DATES.DT_SK))#(lf)            LEFT OUTER JOIN#(lf)            SALES.TF_FIN_CUST_EVT_FCT_CFDL TF_FIN_CUST_EVT_FCT_CFDL#(lf)               ON (IA_DATES_ITRL.DT_SK =#(lf)                      TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_CRNG_DT_SK))#(lf)           RIGHT OUTER JOIN HUMAN_RESOURCES.SALE_HIER_DIM SALE_HIER_DIM#(lf)              ON (SALE_HIER_DIM.SALE_HIER_DIM_SK =#(lf)                     TF_FIN_CUST_EVT_FCT_CFDL.SLHR_DIM_CURR_CRNG_AGT_SK))#(lf)          LEFT OUTER JOIN MEMBER.CNF_CUSTOMER_DIM_CFDL CNF_CUSTOMER_DIM_CFDL#(lf)             ON (CNF_CUSTOMER_DIM_CFDL.CUST_SK =#(lf)                    TF_FIN_CUST_EVT_FCT_CFDL.CUST_SK))#(lf)         LEFT OUTER JOIN HUMAN_RESOURCES.AGT_DIM_CURR_CFDL AGT_DIM_CURR_CFDL#(lf)            ON (AGT_DIM_CURR_CFDL.AGT_DIM_SK =#(lf)                   TF_FIN_CUST_EVT_FCT_CFDL.CRNG_AGT_SK))#(lf)        RIGHT OUTER JOIN SALES.FIN_CUST_ELIG_DIM_CFDL FIN_CUST_ELIG_DIM_CFDL#(lf)           ON (FIN_CUST_ELIG_DIM_CFDL.FIN_CUST_PNT_ELIG_DIM_SK =#(lf)                  TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_ELIG_DIM_SK))#(lf)       LEFT OUTER JOIN#(lf)       CONTRACT.CNF_CONTRACT_DIM_DTL_CFDL CNF_CONTRACT_DIM_DTL_CFDL#(lf)          ON     (CNF_CONTRACT_DIM_DTL_CFDL.CTRC_SK =#(lf)                     TF_FIN_CUST_EVT_FCT_CFDL.CTRC_SK)#(lf)            and   (CNF_CONTRACT_DIM_DTL_CFDL.VRSN_NBR =#(lf)                     TF_FIN_CUST_EVT_FCT_CFDL.CTRC_VRSN_NBR)#(lf)WHERE     (AGT_DIM_CURR_CFDL.CURR_ROW_IND = \u0027Y\u0027)#(lf)     #(lf)       AND (SALE_HIER_DIM.CURR_ROW_IND = \u0027Y\u0027)#(lf)       AND sale_hier_dim.ORZN_DEPT_CDE in (\u00270001\u0027,\u00270115\u0027,\u00270190\u0027,\u00270283\u0027,\u00270291\u0027,\u00270361\u0027,\u00270383\u0027,\u00270384\u0027,\u00270435\u0027,\u00270525\u0027,\u00270716\u0027)#(lf)       AND DTRB_PERF_DATES.DTRB_PERF_RPT_YR_NBR in (\u00272021\u0027,\u00272022\u0027,\u00272023\u0027)#(lf)'])in    Source"}]},{"name":"Scorecard Table","isHidden":false,"columns":[{"name":"Sort Order","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Metric Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Lag or Lead","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Background Color Summary Tab","expression":"if(MAX(\u0027Scorecard Table\u0027[Metric Name])='Field Leaders', '#FEEFEB',if(MAX(\u0027Scorecard Table\u0027[Metric Name]) in {'WCFC','New FA Hire', 'Combined Launch (NFA1-2)','New Clients'},'#F7F3EB',if(MAX(\u0027Scorecard Table\u0027[Metric Name]) in {'ANBP','WID','Total Sales', 'Productivity', '% Adopting Advisors'},'#F6F9FC')))","isHidden":false}],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('XZBdS8MwFIb/yqEgKE6w3ebHZY0UlVHqJvSi7CImZ/NAlpQ0m/jvTaLIwYsQzvs8hPdkGIpeNKKYFVU8K7kvtrOhaAiNhhVKjX6KeclYi5/Q1PBEHhOa/0PCENqQyJKRun3o4njLov75MU53LHlzQRrYSJMfvmFEuMM7WYyV5NGqDzhvm7q8qi6ismDaGdTajSF6tT7R5HL3e15jHB3ZcPhtWF4nFrfMsPNuGlEFEM7aeGej5MYad+i9NJlUnPx8Fbw0fUJzjjbKeYTXozS0+yK7B9FdJmnBpVjMkJKBnJ1gjQrphDpZyz9r+w0=', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [#'Metric Name' = _t, #'Sort Order' = _t, #'Lag or Lead' = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Metric Name', type text}, {'Sort Order', Int64.Type}, {'Lag or Lead', type text}}),    #'Sorted Rows' = Table.Sort(#'Changed Type',{{'Sort Order', Order.Ascending}})in    #'Sorted Rows'"}]},{"name":"Measures Table","isHidden":false,"columns":[],"measures":[{"name":"2) YTD","expression":"var Selection = SELECTEDVALUE(\u0027Scorecard Table\u0027[Metric Name])var decimals = '#,0.0'returnSWITCH(    true(),    Selection = 'Applications Received', if(ISBLANK([Received YTD]), 0,[Received YTD]),    Selection = 'Appointments', if(ISBLANK([YTD Appointments]), 0, [YTD Appointments]),    Selection = '% Adopted Advisors', FORMAT([% Adopted Advisors], '0.0%'),    Selection = 'ANBP', if(ISBLANK([CY ANBP]), 0,                        SWITCH(true(),                         [CY ANBP] \u003e 1000000, FORMAT([CY ANBP]/1000000, decimals \u0026 'M'),                         [CY ANBP] \u003e= 1000, FORMAT([CY ANBP]/1000, decimals \u0026 'K'),                        [CY ANBP] \u003c 1000, [CY ANBP])),    Selection = 'Combined Launch (NFA1-2)', if(isblank([CL Percent]), 'N/A', FORMAT([CL Percent], '0.0%')),    Selection = 'FAs on Teams', '-',    Selection = 'Field Leaders', if(ISBLANK([Field Leader YTD Headcount]), 0, [Field Leader YTD Headcount]),    Selection = 'Leader JFW', if(ISBLANK([YTD Leader JFW]), 0, [YTD Leader JFW]),    Selection = 'New Clients', if(ISBLANK([YTD_NC]), 0, [YTD_NC]),    Selection = 'New FA Hires', if(ISBLANK([New FA Hires Curr Week]), 0, [New FA Hires Curr Week]),    Selection = 'Prospect Connects', if(ISBLANK([YTD Prospect Connects]), 0, [YTD Prospect Connects]),    Selection = 'Score Qualifying CP+', if(ISBLANK([YTD CP Plus]), 0, [YTD CP Plus]),    Selection = 'Referrals', if(ISBLANK([YTD Referrals]), 0, [YTD Referrals]),    Selection = 'WID', if(ISBLANK([YTD WID]), 0,                        SWITCH(true(),                        [YTD WID] \u003e 1000000, FORMAT([YTD WID]/1000000, decimals \u0026 'M'),                         [YTD WID] \u003e= 1000, FORMAT([YTD WID]/1000, decimals \u0026 'K'),                        [YTD WID] \u003c 1000, [YTD WID])),     Selection = 'Total Sales', if(ISBLANK([YTD Total Sales]), 0,                        SWITCH(true(),                        [YTD Total Sales] \u003e 1000000000, FORMAT([YTD Total Sales]/1000000000, decimals \u0026 'bn'),                        [YTD Total Sales] \u003e 1000000, FORMAT([YTD Total Sales]/1000000, decimals \u0026 'M'),                         [YTD Total Sales] \u003e= 1000, FORMAT([YTD Total Sales]/1000, decimals \u0026 'K'),                        [YTD Total Sales] \u003c 1000, [YTD Total Sales])),    Selection = 'WCFC', FORMAT([WCFC YTD], decimals))","isHidden":false},{"name":"1) % of YE Goal","expression":"var Selection = SELECTEDVALUE(\u0027Scorecard Table\u0027[Metric Name])returnSWITCH(    true(),    Selection = 'Applications Received', 'N/A',    Selection = '% Adopted Advisors', 'N/A',    Selection = 'Appointments', [YE % of Goal Appointments],    Selection = 'ANBP', [YE % of Goal ANBP],    Selection = 'ANBP - MVP Markets', 'N/A',    Selection = 'ANBP - NPG Practices', [YE % of Goal ANBP NPG Practices],    Selection = 'Combined Launch (NFA1-2)', [YE % of Goal Combined Launch],    Selection = 'Field Leaders', 'N/A',    Selection = 'Leader JFW', 'N/A',    Selection = 'New Clients', [YE % of Goal New Clients],    Selection = 'New FA Hires', [YE % of Goal FA Hires],    Selection = 'Prospect Connects', [YE % of Goal PCs],    Selection = 'Score Qualifying CP+', [YE % of Goal Quality CP+],    Selection = 'Referrals', 'N/A',    Selection = 'Total Sales', 'N/A',    Selection = 'WID', [YE % of Goal RFRB],    Selection = 'WCFC', [YE % of Goal WCFC])","isHidden":false},{"name":"9c) YE Goal","expression":"var Selection = SELECTEDVALUE(\u0027Scorecard Table\u0027[Metric Name])returnSWITCH(    true(),    Selection = 'Applications Received', [YE Applications Goal],    Selection = 'Appointments', [YE Appt Goal],    Selection = 'ANBP', [YE ANBP Goal],    Selection = 'ANBP - NPG Practices', 'update',    Selection = 'ANBP - MVP Markets', 'update',    Selection = 'Combined Launch (NFP1-2)', [YE CL Goal],    Selection = 'FAs on Teams', '?',    Selection = 'Field Leaders', '?',    Selection = 'Leader JFW', [YE LeaderJFW Goal],    Selection = 'New Clients', [YE NFC Goal],    Selection = 'New FA Hires', [YE FR Contracts Goal],    Selection = 'Prospect Connects', [YE Total PCs Goal],    Selection = 'Score Qualifying CP+', [YE CPPlus Goal],    Selection = 'Referrals', [YE Referrals Goal],    Selection = 'RFRB', [YE WID Goal],    Selection = 'WCFC', [YE WMFC Goal])","isHidden":false},{"name":"New FA Hires Curr Week","expression":"var max_year = CALCULATE(max(\u0027RAR Contracts\u0027[Year]), \u0027RAR Contracts\u0027)var max_week = CALCULATE(max(\u0027RAR Contracts\u0027[Week]), \u0027RAR Contracts\u0027[Year]=max_year, not(ISBLANK(\u0027RAR Contracts\u0027[Count])))returnCALCULATE(    sum(\u0027RAR Contracts\u0027[Count]),    \u0027RAR Contracts\u0027[Year]=max_year,    \u0027RAR Contracts\u0027[Week]=max_week)","isHidden":false},{"name":"5) Weekly Average","expression":"var Selection = SELECTEDVALUE(\u0027Scorecard Table\u0027[Metric Name])var decimals = '#,0.0'returnSWITCH(    true(),    Selection = 'Applications Received', [CY Wkly Avg Applications],    Selection = '% Adopted Advisors', 'N/A',    Selection = 'Appointments', [CY Wkly Avg Appts],    Selection = 'ANBP', SWITCH(true(),                         [CY Wkly Avg ANBP] \u003e 1000000, FORMAT([CY Wkly Avg ANBP]/1000000, decimals \u0026 'M'),                         [CY Wkly Avg ANBP] \u003e= 1000, FORMAT([CY Wkly Avg ANBP]/1000, decimals \u0026 'K'),                         [CY Wkly Avg ANBP] \u003c 1000, [CY Wkly Avg ANBP]),    Selection = 'Combined Launch (NFA1-2)', 'N/A',    Selection = 'FAs on Teams', '-',    Selection = 'Field Leaders', [CY Wkly Avg Field Leader],    Selection = 'Leader JFW', [CY Wkly Avg Leader JFW],    Selection = 'New Clients', [CY Wkly Avg New Clients],    Selection = 'New Clients, Age 18+ w/ Goals', '-',    Selection = 'New FA Hires', [CY Wkly Avg RAR Contracts],    Selection = 'Prospect Connects', [CY Wkly Avg PCs],    Selection = 'Score Qualifying CP+', [CP+ YTD Wk Average],    Selection = 'Referrals', [CY Wkly Avg Referrals],    Selection = 'WID', SWITCH(true(),                         [CY Wkly Avg WID] \u003e 1000000, FORMAT([CY Wkly Avg WID]/1000000, decimals \u0026 'M'),                         [CY Wkly Avg WID] \u003e= 1000, FORMAT([CY Wkly Avg WID]/1000, decimals \u0026 'K'),                         [CY Wkly Avg WID] \u003c 1000, [CY Wkly Avg WID]),    Selection = 'Total Sales', SWITCH(true(),                         [CY Wkly Avg Total Sales] \u003e 1000000, FORMAT([CY Wkly Avg Total Sales]/1000000, decimals \u0026 'M'),                         [CY Wkly Avg Total Sales] \u003e= 1000, FORMAT([CY Wkly Avg Total Sales]/1000, decimals \u0026 'K'),                         [CY Wkly Avg Total Sales] \u003c 1000, [CY Wkly Avg Total Sales]),    Selection = 'WCFC', format([CY Wkly Avg WCFC], decimals))","isHidden":false},{"name":"6) Weekly Need - formatted display","expression":"var Selection = SELECTEDVALUE(\u0027Scorecard Table\u0027[Metric Name])var decimals = '#,0.0'returnSWITCH(    true(),    Selection = 'Applications Received', 'N/A',    Selection = '% Adopted Advisors', 'N/A',    Selection = 'Appointments', if(ISBLANK([YE Appt Goal]), 'N/A', [Weekly Need Appts]),    Selection = 'ANBP', IF(ISBLANK([YE ANBP Goal]), 'N/A',                        SWITCH(true(),                         [Weekly Need ANBP] \u003e 1000000, FORMAT([Weekly Need ANBP]/1000000, decimals \u0026 'M'),                         [Weekly Need ANBP] \u003e= 1000, FORMAT([Weekly Need ANBP]/1000, decimals \u0026 'K'),                         [Weekly Need ANBP] \u003c 1000, [Weekly Need ANBP])),    Selection = 'Combined Launch (NFA1-2)', 'N/A',    Selection = 'Field Leaders', 'N/A',    Selection = 'Leader JFW', 'N/A',    Selection = 'New Clients', if(ISBLANK([YE NFC Goal]), 'N/A', [Weekly Need New Clients]),    Selection = 'New FA Hires', if(ISBLANK([YE FR Contracts Goal]), 'N/A', [Weekly Need New FA Hires]),    Selection = 'Prospect Connects', IF(ISBLANK([YE Total PCs Goal]), 'N/A', [Weekly Need Total PCs]),    Selection = 'Score Qualifying CP+', IF(ISBLANK([YE CPPlus Goal]), 'N/A', [Weekly Need CP+]),    Selection = 'Referrals', 'N/A',    Selection = 'Total Sales', 'N/A',    Selection = 'WID',                    IF(ISBLANK([YE WID Goal]), 'N/A',                         SWITCH(true(),                        [Weekly Need WID] \u003c -1000000, FORMAT([Weekly Need WID]/1000000, decimals \u0026 'M'),                        [Weekly Need WID] \u003c -1000, FORMAT([Weekly Need WID]/1000,decimals \u0026 'K'),                        [Weekly Need WID] \u003e 1000000, FORMAT([Weekly Need WID]/1000000, decimals \u0026 'M'),                         [Weekly Need WID] \u003e= 1000, FORMAT([Weekly Need WID]/1000, decimals \u0026 'K'),                        [Weekly Need WID] \u003c 1000, [Weekly Need WID])),    Selection = 'WCFC', if(ISBLANK([YE WMFC Goal]), 'N/A', format([Weekly Need WMFC], decimals)))","isHidden":false},{"name":"Field Leader YTD Headcount","expression":"VAR max_year = CALCULATE(MAX(WMFC_dD[Perfyear]),WMFC_dD)var max_week = CALCULATE(MAX(WMFC_dD[Perfweek]),WMFC_dD[Perfyear]=max_year,NOT(ISBLANK(WMFC_dD[MFC])))RETURNCALCULATE(   SUM(WMFC_dD[MFC]),    WMFC_dD[Category]='Field Leader',    WMFC_dD[Perfyear]=max_year,    WMFC_dD[Perfweek]=max_week)","isHidden":false},{"name":"New Clients, Age 18+","expression":"CALCULATE(    sum(Advice_AllTS_List[tot_newClient]))","isHidden":false},{"name":"New Clients, Age 18+ w/ Goals","expression":"CALCULATE(    sum(Advice_AllTS_List[cyr_Goal]))","isHidden":false},{"name":"FAs Trained in Advice 2022","expression":"CALCULATE(    COUNT(Advice_AllTS_List[TSID]),    filter(Advice_AllTS_List, Advice_AllTS_List[trained_cohort] = '2022'))","isHidden":false},{"name":"CY ANBP MVP Markets","expression":"CALCULATE(     sum(ANBP_OtherRev_DD[Value]),        DTRB_PERF_DATES[Cal_YTD_Flag] in {TRUE},        ANBP_OtherRev_DD[ANBP_OtherRev] = 'ANBP',        MVPs[MARKET_LEADERS] \u003c\u003e 'Vacant')","isHidden":false},{"name":"CY ANBP NPG Practices","expression":"CALCULATE(     sum(ANBP_OtherRev_DD[Value]),        DTRB_PERF_DATES[Cal_YTD_Flag] in {TRUE},        ANBP_OtherRev_DD[ANBP_OtherRev] = 'ANBP',        RFO_Zone[NPG] = 'NPG')","isHidden":false},{"name":"CY Wkly Avg ANBP","expression":"var curr_year = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT],'CURRENT')var last_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT],'CURRENT')-1RETURNDIVIDE([CY ANBP], last_week)","isHidden":false},{"name":"CY Wkly Avg WID","expression":"var curr_year = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT],'CURRENT')var last_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT],'CURRENT')-1RETURNDIVIDE([YTD WID], last_week)","isHidden":false},{"name":"CY Wkly Avg ANBP NPG Practices","expression":"var curr_year = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT],'CURRENT')var last_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT],'CURRENT')-1RETURNDIVIDE([CY ANBP NPG Practices], last_week)","isHidden":false},{"name":"CY Wkly Avg ANBP MVP Markets","expression":"var curr_year = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT],'CURRENT')var last_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT],'CURRENT')-1RETURNDIVIDE([CY ANBP MVP Markets], last_week)","isHidden":false},{"name":"CY Wkly Avg New Clients","expression":"var curr_year = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT],'CURRENT')var two_weeks_ago = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT],'CURRENT')-2RETURNDIVIDE([YTD_NC], two_weeks_ago)","isHidden":false},{"name":"CY Wkly Avg Applications Received","expression":"var curr_year = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT],'CURRENT')var last_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT],'CURRENT')-1RETURNDIVIDE([Received YTD], last_week)","isHidden":false},{"name":"YE % of Goal ANBP","expression":"DIVIDE([CY ANBP], [YE ANBP Goal])","isHidden":false},{"name":"YE % of Goal RFRB","expression":"DIVIDE([YTD WID], [YE WID Goal])","isHidden":false},{"name":"YE % of Goal WCFC","expression":"DIVIDE([cy_prior_wk_WMFC], [YE WMFC Goal])","isHidden":false},{"name":"YE % of Goal New Clients","expression":"DIVIDE([YTD_NC], [YE NFC Goal])","isHidden":false},{"name":"CY PW ANBP","expression":"var Selection = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR])var prior_2wks = Selection -1returnCALCULATE(    sum(ANBP_OtherRev_DD[Value]),    ANBP_OtherRev_DD[ANBP_OtherRev] = 'ANBP',    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_2wks,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"Wow ANBP","expression":"if(and([CY ANBP], [CY PW ANBP]), [CY ANBP] - [CY PW ANBP])","isHidden":false},{"name":"Weekly Trend ANBP","expression":"AVERAGEX(\\tKEEPFILTERS(VALUES(\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_WK_NBR])),\\tCALCULATE([Wow ANBP]))","isHidden":false},{"name":"Weekly Trend Icon ANBP","expression":"var ChartIncrease = UNICHAR(128200)var ChartDecrease = UNICHAR(128201)var WeeklyTrend = [Weekly Trend ANBP]returnSWITCH(TRUE(),WeeklyTrend \u003e= 0, ChartIncrease,WeeklyTrend \u003c= 0, ChartDecrease)","isHidden":false},{"name":"7) Weekly Trend","expression":"var Selection = SELECTEDVALUE(\u0027Scorecard Table\u0027[Metric Name])returnSWITCH(    true(),    Selection = 'Applications Received', [Weekly Trend Icon Applications Received],    Selection = 'Appointments', [Weekly Trend Icon Appointments],    Selection = 'ANBP', [Weekly Trend Icon ANBP],    Selection = 'ANBP - MVP Markets', [Weekly Trend Icon ANBP MVP Markets],    Selection = 'ANBP - NPG Practices', [Weekly Trend Icon ANBP NPG Practices],    Selection = 'Combined Launch (NFP1-2)', '-',    Selection = 'FAs on Teams', '-',    Selection = 'Field Leaders', [Weekly Trend Icon Field Leader],    Selection = 'Leader JFW', [Weekly Trend Icon Leader JFW],    Selection = 'New Clients', [Weekly Trend Icon New Clients],    Selection = 'New FA Hires', [Weekly Trend Icon New FA Hires],    Selection = 'Prospect Connects', [Weekly Trend Icon Prospect Connects],    Selection = 'Score Qualifying CP+', [Weekly Trend Icon Quality CP+],    Selection = 'Referrals', [Weekly Trend Icon Referrals],    Selection = 'RFRB', [Weekly Trend Icon RFRB],    Selection = 'WCFC', [Weekly Trend Icon WCFC])","isHidden":false},{"name":"YE % of Goal Appointments","expression":"DIVIDE([YTD Appointments], [YE Appt Goal])","isHidden":false},{"name":"CY PW WID","expression":"var Selection = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR])var prior_2wks = Selection -1returnCALCULATE(    sum(ANBP_OtherRev_DD[Value]),    ANBP_OtherRev_DD[ANBP_OtherRev] = 'WID',    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_2wks,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"Wow RFRB","expression":"if(and([YTD WID], [CY PW WID]), [YTD WID] - [CY PW WID])","isHidden":false},{"name":"Weekly Trend RFRB","expression":"AVERAGEX(\\tKEEPFILTERS(VALUES(\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_WK_NBR])),\\tCALCULATE([Wow RFRB]))","isHidden":false},{"name":"Weekly Trend Icon RFRB","expression":"var ChartIncrease = UNICHAR(128200)var ChartDecrease = UNICHAR(128201)var WeeklyTrend = [Weekly Trend RFRB]returnSWITCH(TRUE(),WeeklyTrend \u003e= 0, ChartIncrease,WeeklyTrend \u003c= 0, ChartDecrease)","isHidden":false},{"name":"YE % of Goal PCs","expression":"DIVIDE([YTD Prospect Connects], [YE Total PCs Goal])","isHidden":false},{"name":"YE % of Goal Leader JFW","expression":"DIVIDE([Leader JFW YTD], [YE LeaderJFW Goal])","isHidden":false},{"name":"YE % of Goal Quality CP+","expression":"DIVIDE([YTD CP Plus], [YE CPPlus Goal])","isHidden":false},{"name":"CY Wkly Avg PCs","expression":"var curr_year = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT],'CURRENT')var last_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT],'CURRENT')-1RETURNDIVIDE([YTD Prospect Connects], last_week)","isHidden":false},{"name":"CY Wkly Avg Referrals","expression":"var curr_year = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT],'CURRENT')var last_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT],'CURRENT')-1RETURNDIVIDE([YTD Referrals], last_week)","isHidden":false},{"name":"CY Wkly Avg Leader JFW","expression":"var curr_year = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT],'CURRENT')var last_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT],'CURRENT')-1RETURNDIVIDE([YTD Leader JFW], last_week)","isHidden":false},{"name":"CY Wkly Avg Appts","expression":"var curr_year = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT],'CURRENT')var last_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT],'CURRENT')-1RETURNDIVIDE([YTD Appointments], last_week)","isHidden":false},{"name":"CY Wkly Avg Applications","expression":"var curr_year = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT],'CURRENT')var last_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT],'CURRENT')-1RETURNDIVIDE([Received YTD], last_week)","isHidden":false},{"name":"CY Wkly Avg Quality CP+","expression":"var curr_year = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT],'CURRENT')var last_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT],'CURRENT')-1RETURNDIVIDE([YTD CP Plus], last_week)","isHidden":false},{"name":"CY Wkly Avg WCFC","expression":"var curr_year = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT],'CURRENT')var last_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT],'CURRENT')-1RETURNDIVIDE([CY WMFC], last_week)","isHidden":false},{"name":"WCFC YTD","expression":"VAR max_year = CALCULATE(MAX(WMFC_dD[Perfyear]),WMFC_dD)var max_week = CALCULATE(MAX(WMFC_dD[Perfweek]),WMFC_dD[Perfyear]=max_year,NOT(ISBLANK(WMFC_dD[MFC])))RETURNCALCULATE(    SUM(WMFC_dD[WMFC]),   WMFC_dD[Perfyear]=max_year,   WMFC_dD[Perfweek]=max_week)","isHidden":false},{"name":"YE % of Goal FA Hires","expression":"DIVIDE([New FA Hires Curr Week], [YE FR Contracts Goal])","isHidden":false},{"name":"CY Wkly Avg RAR Contracts","expression":"var curr_year = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT],'CURRENT')var last_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT],'CURRENT')-1RETURNDIVIDE([New FA Hires YTD], last_week)","isHidden":false},{"name":"CY Wkly Avg Field Leader","expression":"var curr_year = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT],'CURRENT')var last_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT],'CURRENT')-1RETURNDIVIDE([Field Leader Sum Wk Headcount], last_week)","isHidden":false},{"name":"Field Leader Sum Wk Headcount","expression":"VAR max_year = CALCULATE(MAX(WMFC_dD[Perfyear]),WMFC_dD)var max_week = CALCULATE(MAX(WMFC_dD[Perfweek]),WMFC_dD[Perfyear]=max_year,NOT(ISBLANK(WMFC_dD[MFC])))RETURNCALCULATE(   SUM(WMFC_dD[MFC]),    WMFC_dD[Category]='Field Leader',    WMFC_dD[Perfyear]=max_year)    --WMFC_dD[Perfweek]=max_week)","isHidden":false},{"name":"New FA Hires YTD","expression":"var max_year = CALCULATE(max(\u0027RAR Contracts\u0027[Year]), \u0027RAR Contracts\u0027)var max_week = CALCULATE(max(\u0027RAR Contracts\u0027[Week]), \u0027RAR Contracts\u0027[Year]=max_year, not(ISBLANK(\u0027RAR Contracts\u0027[Count])))returnCALCULATE(    sum(\u0027RAR Contracts\u0027[Count]),    \u0027RAR Contracts\u0027[Year]=max_year)    --\u0027RAR Contracts\u0027[Week]=max_week)","isHidden":false},{"name":"CY PW ANBP NPG Practices","expression":"var Selection = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR])var prior_2wks = Selection -1returnCALCULATE(    sum(ANBP_OtherRev_DD[Value]),    ANBP_OtherRev_DD[ANBP_OtherRev] = 'ANBP',    RFO_Zone[NPG] = 'NPG',    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_2wks,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"WoW ANBP NPG Practices","expression":"if(and([CY ANBP NPG Practices], [CY PW ANBP NPG Practices]), [CY ANBP NPG Practices] - [CY PW ANBP NPG Practices])","isHidden":false},{"name":"Weekly Trend ANBP NPG Practices","expression":"AVERAGEX(\\tKEEPFILTERS(VALUES(\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_WK_NBR])),\\tCALCULATE([WoW ANBP NPG Practices]))","isHidden":false},{"name":"Weekly Trend Icon ANBP NPG Practices","expression":"var ChartIncrease = UNICHAR(128200)var ChartDecrease = UNICHAR(128201)var WeeklyTrend = [Weekly Trend ANBP NPG Practices]returnSWITCH(TRUE(),WeeklyTrend \u003e= 0, ChartIncrease,WeeklyTrend \u003c= 0, ChartDecrease)","isHidden":false},{"name":"CY PW ANBP MVP Markets","expression":"var Selection = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR])var prior_2wks = Selection -1returnCALCULATE(    sum(ANBP_OtherRev_DD[Value]),    ANBP_OtherRev_DD[ANBP_OtherRev] = 'ANBP',    MVPs[MARKET_LEADERS] \u003c\u003e 'VACANT',    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_2wks,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"WoW ANBP MVP Markets","expression":"if(and([CY ANBP MVP Markets], [CY PW ANBP MVP Markets]), [CY ANBP MVP Markets] - [CY PW ANBP MVP Markets])","isHidden":false},{"name":"Weekly Trend ANBP MVP Markets","expression":"AVERAGEX(\\tKEEPFILTERS(VALUES(\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_WK_NBR])),\\tCALCULATE([WoW ANBP MVP Markets]))","isHidden":false},{"name":"Weekly Trend Icon ANBP MVP Markets","expression":"var ChartIncrease = UNICHAR(128200)    --(129137)var ChartDecrease = UNICHAR(128201)    --(129139)var WeeklyTrend = [Weekly Trend ANBP MVP Markets]returnSWITCH(TRUE(),WeeklyTrend \u003e= 0, ChartIncrease,WeeklyTrend \u003c= 0, ChartDecrease)","isHidden":false},{"name":"3) YOY Change","expression":"var Selection = SELECTEDVALUE(\u0027Scorecard Table\u0027[Metric Name])returnSWITCH(    true(),    Selection = 'Applications Received', [YOY Change Applications],    Selection = 'Appointments', [YOY Change Appts],    Selection = '% Adopted Advisors', 'N/A',    Selection = 'ANBP', [ANBP YOY Change],    Selection = 'ANBP - MVP Markets', [YOY Change ANBP MVP Markets],    Selection = 'ANBP - NPG Practices', [YOY Change ANBP NPG Practices],    Selection = 'Combined Launch (NFA1-2)', 'N/A',    Selection = 'Field Leaders', [YOY Change Field Leaders],    Selection = 'Leader JFW', [YOY Change Leader JFW],    Selection = 'New Clients', [YOY Change NC],    Selection = 'New FA Hires', [YOY Change Contracts],    Selection = 'Prospect Connects', [YOY Change PCs],    Selection = 'Score Qualifying CP+', [YOY Change CP],    Selection = 'Referrals', [YOY Change Referrals],    Selection = 'WID', [WID YOY Change],    Selection = 'Total Sales', [Total Sales YOY Change],    Selection = 'WCFC', [YOY Change WMFC])","isHidden":false},{"name":"CY ANBP in (M)","expression":"var CY_ANBP = DIVIDE([CY ANBP], 1000000)var decimals = '0.0'returnFORMAT(CY_ANBP, decimals \u0026 'M')","isHidden":false},{"name":"YTD RFRB in (M)","expression":"var YTD_RFRB = DIVIDE([YTD WID], 1000000)var decimals = '0.0'returnFORMAT(YTD_RFRB, decimals \u0026 'M')","isHidden":false},{"name":"YE % of Goal Combined Launch","expression":"DIVIDE([CL Percent], [YE CL Goal])--DIVIDE([CL Percent], 0.3)","isHidden":false},{"name":"YE % of Goal ANBP NPG Practices","expression":"DIVIDE([CY ANBP NPG Practices], [YE ANBP NPG Goal])","isHidden":false},{"name":"Field Leader PYTD Headcount","expression":"var max_year = CALCULATE(MAX(WMFC_dD[Perfyear]),WMFC_dD)var max_week = CALCULATE(MAX(WMFC_dD[Perfweek]),WMFC_dD[Perfyear]=max_year,NOT(ISBLANK(WMFC_dD[MFC])))var prev_year = max_year -1RETURNCALCULATE(   SUM(WMFC_dD[MFC]),    WMFC_dD[Category]='Field Leader',    WMFC_dD[Perfyear]=prev_year,    WMFC_dD[Perfweek]=max_week)","isHidden":false},{"name":"YOY Change Field Leaders","expression":"([Field Leader YTD Headcount] - [Field Leader PYTD Headcount])/[Field Leader PYTD Headcount]","isHidden":false},{"name":"PYTD ANBP MVP Markets","expression":"CALCULATE(     sum(ANBP_OtherRev_DD[Value]),        DTRB_PERF_DATES[Cal_PYTD_Flag] in {TRUE},        ANBP_OtherRev_DD[ANBP_OtherRev] = 'ANBP',        MVPs[MARKET_LEADERS] \u003c\u003e 'Vacant')","isHidden":false},{"name":"PYTD ANBP NPG Practices","expression":"CALCULATE(     sum(ANBP_OtherRev_DD[Value]),        DTRB_PERF_DATES[Cal_PYTD_Flag] in {TRUE},        ANBP_OtherRev_DD[ANBP_OtherRev] = 'ANBP',        RFO_Zone[NPG] = 'NPG')","isHidden":false},{"name":"YOY Change ANBP MVP Markets","expression":"([CY ANBP MVP Markets] - [PYTD ANBP MVP Markets])/[PYTD ANBP MVP Markets]","isHidden":false},{"name":"YOY Change ANBP NPG Practices","expression":"([CY ANBP NPG Practices] - [PYTD ANBP NPG Practices])/[PYTD ANBP NPG Practices]","isHidden":false},{"name":"CY PW WCFC","expression":"var Selection = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR])var prior_2wks = Selection -1returnCALCULATE(     SUM(WMFC_DD[WMFC]),     DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_2wks,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"Wow WCFC","expression":"if(and([CY WMFC], [CY PW WCFC]), [CY WMFC] - [CY PW WCFC])","isHidden":false},{"name":"Weekly Need ANBP NPG Practices","expression":"var prev_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT], 'CURRENT') -1var weeks_remaining = 52 - prev_weekreturn    divide(\u0027YTD_GOALS_DD\u0027[YE ANBP NPG Goal]-[CY ANBP NPG Practices], weeks_remaining)","isHidden":false},{"name":"Weekly Need New FA Hires","expression":"var prev_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT], 'CURRENT') -1var weeks_remaining = 52 - prev_weekreturnDIVIDE(\u0027YTD_GOALS_DD\u0027[YE FR Contracts Goal]-[New FA Hires YTD], weeks_remaining)","isHidden":false},{"name":"6a) Weekly Need - icons","expression":"var Selection = SELECTEDVALUE(\u0027Scorecard Table\u0027[Metric Name])returnSWITCH(    true(),    Selection = 'Applications Received', 'N/A',    Selection = 'Appointments', IF(ISBLANK([YE Appt Goal]), 'N/A', [Weekly Need Appts]),    Selection = 'ANBP', IF(ISBLANK([YE ANBP Goal]), 'N/A', [Weekly Need ANBP]),    Selection = 'Combined Launch (NFA1-2)', 'N/A',    Selection = 'Field Leaders', 'N/A',    Selection = 'Leader JFW', 'N/A',    Selection = 'New Clients', if(ISBLANK([YE NFC Goal]), 'N/A', [Weekly Need New Clients]),    Selection = 'New FA Hires', if(ISBLANK([YE FR Contracts Goal]), 'N/A', [Weekly Need New FA Hires]),    Selection = 'Prospect Connects', IF(ISBLANK([YE Total PCs Goal]), 'N/A', [Weekly Need Total PCs]),    Selection = 'Score Qualifying CP+', IF(ISBLANK([YE CPPlus Goal]), 'N/A', [Weekly Need CP+]),    Selection = 'Referrals', 'N/A',    Selection = 'RFRB', IF(ISBLANK([YE WID Goal]), 'N/A', [Weekly Need WID]),    Selection = 'WCFC', if(ISBLANK([YE WMFC Goal]), 'N/A', [Weekly Need WMFC]))","isHidden":false},{"name":"Weekly Trend WCFC","expression":"AVERAGEX(\\tKEEPFILTERS(VALUES(\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_WK_NBR])),\\tCALCULATE([Wow WCFC]))","isHidden":false},{"name":"Weekly Trend Icon WCFC","expression":"var ChartIncrease = UNICHAR(128200)var ChartDecrease = UNICHAR(128201)var WeeklyTrend = [Weekly Trend WCFC]returnSWITCH(TRUE(),WeeklyTrend \u003e= 0, ChartIncrease,WeeklyTrend \u003c= 0, ChartDecrease)","isHidden":false},{"name":"CY PW Field Leaders","expression":"var Selection = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR])var prior_2wks = Selection -1returnCALCULATE(     SUM(WMFC_DD[MFC]),    WMFC_DD[Category]='Field Leader',    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_2wks,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"Wow Field Leader","expression":"if(and([Field Leader YTD Headcount], [CY PW Field Leaders]), [Field Leader YTD Headcount] - [CY PW Field Leaders])","isHidden":false},{"name":"Weekly Trend Field Leader","expression":"AVERAGEX(\\tKEEPFILTERS(VALUES(\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_WK_NBR])),\\tCALCULATE([Wow Field Leader]))","isHidden":false},{"name":"Weekly Trend Icon New Clients","expression":"var ChartIncrease = UNICHAR(128200)var ChartDecrease = UNICHAR(128201)var ChartSame = UNICHAR(10134)var WeeklyTrend = [Weekly Trend New Clients]returnSWITCH(TRUE(),WeeklyTrend \u003e 0, ChartIncrease,WeeklyTrend \u003c 0, ChartDecrease,WeeklyTrend = 0, ChartSame)","isHidden":false},{"name":"CY PW New FA Hires","expression":"var Selection = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR])var prior_2wks = Selection -1returnCALCULATE(     SUM(\u0027RAR Contracts\u0027[Count]),     DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_2wks,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"Wow New FA Hires","expression":"if(and([New FA Hires YTD], [CY PW New FA Hires]), [New FA Hires YTD] - [CY PW New FA Hires])","isHidden":false},{"name":"Weekly Trend New FA Hires","expression":"AVERAGEX(\\tKEEPFILTERS(VALUES(\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_WK_NBR])),\\tCALCULATE([Wow New FA Hires]))","isHidden":false},{"name":"Weekly Trend Icon New FA Hires","expression":"var ChartIncrease = UNICHAR(128200)var ChartDecrease = UNICHAR(128201)var ChartSame = UNICHAR(10134)var WeeklyTrend = [Weekly Trend New FA Hires]returnSWITCH(TRUE(),WeeklyTrend \u003e 0, ChartIncrease,WeeklyTrend \u003c 0, ChartDecrease,WeeklyTrend = 0, ChartSame)","isHidden":false},{"name":"CY PW New Clients","expression":"var Selection = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR])var prior_full_2wks = Selection -2returnCALCULATE(([ytd_nc]),     DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_full_2wks,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"Wow New Clients","expression":"if(and([YTD_NC], [CY PW New Clients]), [YTD_NC] - [CY PW New Clients])","isHidden":false},{"name":"Weekly Trend New Clients","expression":"AVERAGEX(\\tKEEPFILTERS(VALUES(\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_WK_NBR])),\\tCALCULATE([Wow New Clients]))","isHidden":false},{"name":"Weekly Trend Icon Field Leader","expression":"var ChartIncrease = UNICHAR(128200)var ChartDecrease = UNICHAR(128201)var ChartSame = UNICHAR(10134)var WeeklyTrend = [Weekly Trend Field Leader]returnSWITCH(TRUE(),WeeklyTrend \u003e 0, ChartIncrease,WeeklyTrend \u003c 0, ChartDecrease,WeeklyTrend = 0, ChartSame)","isHidden":false},{"name":"YOY Change Applications","expression":"([Received YTD] - [Received PYTD])/[Received PYTD]","isHidden":false},{"name":"CY PW Applications Received","expression":"var Selection = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR])var prior_2wks = Selection -1returnCALCULATE([Received YTD],    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_2wks,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"CY PW Appointments","expression":"var Selection = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR])var prior_2wks = Selection -1returnCALCULATE([YTD Appointments],    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_2wks,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"CY PW Leader JFW","expression":"var Selection = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR])var prior_2wks = Selection -1returnCALCULATE([YTD Leader JFW],    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_2wks,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"CY PW Prospect Connects","expression":"var Selection = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR])var prior_2wks = Selection -1returnCALCULATE([YTD Prospect Connects],    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_2wks,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"CY PW Quality CP+","expression":"var Selection = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR])var prior_2wks = Selection -1returnCALCULATE([YTD CP Plus],    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_2wks,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"CY PW Referrals","expression":"var Selection = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR])var prior_2wks = Selection -1returnCALCULATE([YTD Referrals],    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_2wks,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"Wow Applications Received","expression":"if(and([Received YTD], [CY PW Applications Received]), [Received YTD] - [CY PW Applications Received])","isHidden":false},{"name":"Wow Appointments","expression":"if(and([YTD Appointments], [CY PW Appointments]), [YTD Appointments] - [CY PW Appointments])","isHidden":false},{"name":"Wow Leader JFW","expression":"if(and([YTD Leader JFW], [CY PW Leader JFW]), [YTD Leader JFW] - [CY PW Leader JFW])","isHidden":false},{"name":"Wow Prospect Connects","expression":"if(and([YTD Prospect Connects], [CY PW Prospect Connects]), [YTD Prospect Connects] - [CY PW Prospect Connects])","isHidden":false},{"name":"Wow Quality CP+","expression":"if(and([YTD CP Plus], [CY PW Quality CP+]), [YTD CP Plus] - [CY PW Quality CP+])","isHidden":false},{"name":"Wow Referrals","expression":"if(and([YTD Referrals], [CY PW Referrals]), [YTD Referrals] - [CY PW Referrals])","isHidden":false},{"name":"Weekly Trend Applications Received","expression":"AVERAGEX(\\tKEEPFILTERS(VALUES(\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_WK_NBR])),\\tCALCULATE([Wow Applications Received]))","isHidden":false},{"name":"Weekly Trend Appointments","expression":"AVERAGEX(\\tKEEPFILTERS(VALUES(\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_WK_NBR])),\\tCALCULATE([Wow Appointments]))","isHidden":false},{"name":"Weekly Trend Leader JFW","expression":"AVERAGEX(\\tKEEPFILTERS(VALUES(\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_WK_NBR])),\\tCALCULATE([Wow Leader JFW]))","isHidden":false},{"name":"Weekly Trend Prospect Connects","expression":"AVERAGEX(\\tKEEPFILTERS(VALUES(\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_WK_NBR])),\\tCALCULATE([Wow Prospect Connects]))","isHidden":false},{"name":"Weekly Trend Quality CP+","expression":"AVERAGEX(\\tKEEPFILTERS(VALUES(\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_WK_NBR])),\\tCALCULATE([Wow Quality CP+]))","isHidden":false},{"name":"Weekly Trend Referrals","expression":"AVERAGEX(\\tKEEPFILTERS(VALUES(\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_WK_NBR])),\\tCALCULATE([Wow Referrals]))","isHidden":false},{"name":"Weekly Trend Icon Applications Received","expression":"var ChartIncrease = UNICHAR(128200)var ChartDecrease = UNICHAR(128201)var ChartSame = UNICHAR(10134)var WeeklyTrend = [Weekly Trend Applications Received]returnSWITCH(TRUE(),WeeklyTrend \u003e 0, ChartIncrease,WeeklyTrend \u003c 0, ChartDecrease,WeeklyTrend = 0, ChartSame)","isHidden":false},{"name":"Weekly Trend Icon Appointments","expression":"var ChartIncrease = UNICHAR(128200)var ChartDecrease = UNICHAR(128201)var ChartSame = UNICHAR(10134)var WeeklyTrend = [Weekly Trend Appointments]returnSWITCH(TRUE(),WeeklyTrend \u003e 0, ChartIncrease,WeeklyTrend \u003c 0, ChartDecrease,WeeklyTrend = 0, ChartSame)","isHidden":false},{"name":"Weekly Trend Icon Leader JFW","expression":"var ChartIncrease = UNICHAR(128200)var ChartDecrease = UNICHAR(128201)var ChartSame = UNICHAR(10134)var WeeklyTrend = [Weekly Trend Leader JFW]returnSWITCH(TRUE(),WeeklyTrend \u003e 0, ChartIncrease,WeeklyTrend \u003c 0, ChartDecrease,WeeklyTrend = 0, ChartSame)","isHidden":false},{"name":"Weekly Trend Icon Prospect Connects","expression":"var ChartIncrease = UNICHAR(128200)var ChartDecrease = UNICHAR(128201)var ChartSame = UNICHAR(10134)var WeeklyTrend = [Weekly Trend Prospect Connects]returnSWITCH(TRUE(),WeeklyTrend \u003e 0, ChartIncrease,WeeklyTrend \u003c 0, ChartDecrease,WeeklyTrend = 0, ChartSame)","isHidden":false},{"name":"Weekly Trend Icon Quality CP+","expression":"var ChartIncrease = UNICHAR(128200)var ChartDecrease = UNICHAR(128201)var ChartSame = UNICHAR(10134)var WeeklyTrend = [Weekly Trend Quality CP+]returnSWITCH(TRUE(),WeeklyTrend \u003e 0, ChartIncrease,WeeklyTrend \u003c 0, ChartDecrease,WeeklyTrend = 0, ChartSame)","isHidden":false},{"name":"Weekly Trend Icon Referrals","expression":"var ChartIncrease = UNICHAR(128200)var ChartDecrease = UNICHAR(128201)var ChartSame = UNICHAR(10134)var WeeklyTrend = [Weekly Trend Referrals]returnSWITCH(TRUE(),WeeklyTrend \u003e 0, ChartIncrease,WeeklyTrend \u003c 0, ChartDecrease,WeeklyTrend = 0, ChartSame)","isHidden":false},{"name":"4) Current Week","expression":"var Selection = SELECTEDVALUE(\u0027Scorecard Table\u0027[Metric Name])var decimals = '#,0.0'returnSWITCH(    true(),    Selection = 'Applications Received', if(ISBLANK([CY CW Applications Received]), 0,[CY CW Applications Received]),    Selection = '% Adopted Advisors', 'N/A',    Selection = 'Appointments', if(ISBLANK([CY CW Appointments]), 0, [CY CW Appointments]),    Selection = 'ANBP', if(ISBLANK([CY CW ANBP]), 0,                        SWITCH(true(),                         [CY CW ANBP] \u003e 1000000, FORMAT([CY CW ANBP]/1000000, decimals \u0026 'M'),                         [CY CW ANBP] \u003e= 1000, FORMAT([CY CW ANBP]/1000, decimals \u0026 'K'),                         [CY CW ANBP] \u003c 1000, [CY CW ANBP])),    Selection = 'Combined Launch (NFA1-2)', 'N/A',        --if(isblank([CL Percent]), '-', FORMAT([CL Percent], '0.0%')),    Selection = 'Field Leaders', if(ISBLANK([CY CW Field Leaders]), 0, [CY CW Field Leaders]),    Selection = 'Leader JFW', if(ISBLANK([CY CW Leader JFW]), 0, [CY CW Leader JFW]),    Selection = 'New Clients', if(ISBLANK([CY CW New Clients]), 0, [CY CW New Clients]),    Selection = 'New FA Hires', if(ISBLANK([CY CW New FA Hires]), 0, [CY CW New FA Hires]),    Selection = 'Prospect Connects', if(ISBLANK([CY CW Prospect Connects]), 0, [CY CW Prospect Connects]),    Selection = 'Score Qualifying CP+', if(ISBLANK([CY CW Quality CP+]), 0, [CY CW Quality CP+]),    Selection = 'Referrals', if(ISBLANK([CY CW Referrals]), 0, [CY CW Referrals]),    Selection = 'WID', if(isblank([CY CW WID]), 0,                        SWITCH(true(),                         [CY CW WID] \u003e 1000000, FORMAT([CY CW WID]/1000000, decimals \u0026 'M'),                         [CY CW WID] \u003e= 1000, FORMAT([CY CW WID]/1000, decimals \u0026 'K'),                        [CY CW WID] \u003c 1000, [CY CW WID])),    Selection = 'Total Sales', if(isblank([CY CW Total Sales]), 0,                        SWITCH(true(),                         [CY CW Total Sales] \u003e 1000000000, FORMAT([CY CW Total Sales]/1000000000, decimals \u0026 'B'),                        [CY CW Total Sales] \u003e 1000000, FORMAT([CY CW Total Sales]/1000000, decimals \u0026 'M'),                         [CY CW Total Sales] \u003e= 1000, FORMAT([CY CW Total Sales]/1000, decimals \u0026 'K'),                        [CY CW Total Sales] \u003c 1000, [CY CW Total Sales])),                       Selection = 'WCFC', if(ISBLANK([CY CW WCFC]), 0, FORMAT([CY CW WCFC], decimals)))","isHidden":false},{"name":"CY CW ANBP","expression":"var prior_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR], DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT], 'PREVIOUS')returnCALCULATE(    sum(ANBP_OtherRev_DD[Value]),    ANBP_OtherRev_DD[ANBP_OtherRev] = 'ANBP',    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_week,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"CY CW ANBP MVP Markets","expression":"var prior_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR], DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT], 'PREVIOUS')returnCALCULATE(    sum(ANBP_OtherRev_DD[Value]),    ANBP_OtherRev_DD[ANBP_OtherRev] = 'ANBP',    MVPs[MARKET_LEADERS] \u003c\u003e 'VACANT',    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_week,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"CY CW New Clients","expression":"var prior_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR], DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT], 'PREVIOUS')var prior_2wks = prior_week -1returnCALCULATE(sum(\u0027New Clients\u0027[FIN_CUST_PNT_VLU]),    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_2wks,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"CY CW WID","expression":"var prior_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR], DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT], 'PREVIOUS')returnCALCULATE(    sum(ANBP_OtherRev_DD[Value]),    ANBP_OtherRev_DD[ANBP_OtherRev] = 'WID',    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_week,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"CY CW ANBP NPG Practices","expression":"var prior_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR], DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT], 'PREVIOUS')returnCALCULATE(    sum(ANBP_OtherRev_DD[Value]),    ANBP_OtherRev_DD[ANBP_OtherRev] = 'ANBP',    RFO_Zone[NPG] = 'NPG',    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_week,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"CY CW Appointments","expression":"var prior_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR], DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT], 'PREVIOUS')returnCALCULATE([YTD Appointments],    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_week,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"CY CW Prospect Connects","expression":"var prior_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR], DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT], 'PREVIOUS')returnCALCULATE([YTD Prospect Connects],    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_week,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"CY CW Referrals","expression":"var prior_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR], DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT], 'PREVIOUS')returnCALCULATE([YTD Referrals],    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_week,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"CY CW Leader JFW","expression":"var prior_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR], DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT], 'PREVIOUS')returnCALCULATE([YTD Leader JFW],    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_week,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"CY CW Quality CP+","expression":"var prior_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR], DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT], 'PREVIOUS')returnCALCULATE([YTD CP Plus],    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_week,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"CY CW Applications Received","expression":"var prior_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR], DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT], 'PREVIOUS')returnCALCULATE([Received YTD],    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_week,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"CY CW Field Leaders","expression":"var prior_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR], DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT], 'PREVIOUS')returnCALCULATE(     SUM(WMFC_DD[MFC]),    WMFC_DD[Category]='Field Leader',    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_week,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"CY CW New FA Hires","expression":"var prior_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR], DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT], 'PREVIOUS')returnCALCULATE(     SUM(\u0027RAR Contracts\u0027[Count]),     DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_week,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"CY CW WCFC","expression":"VAR max_year = CALCULATE(MAX(WMFC_dD[Perfyear]),WMFC_dD)var max_week = CALCULATE(MAX(WMFC_dD[Perfweek]),WMFC_dD[Perfyear]=max_year,NOT(ISBLANK(WMFC_dD[MFC])))RETURNCALCULATE(    SUM(WMFC_dD[WMFC]),   WMFC_dD[Perfyear]=max_year,   WMFC_dD[Perfweek]=max_week)","isHidden":false},{"name":"8) Weekly Avg vs Weekly Need","expression":"var Selection = SELECTEDVALUE(\u0027Scorecard Table\u0027[Metric Name])var decimals = '#,0.0'returnSWITCH(    true(),    Selection = 'Applications Received', 'N/A',    Selection = 'Appointments', IF(ISBLANK([YE Appt Goal]), 'N/A', ROUND([CY Wkly Avg Appts] - [Weekly Need Appts],0)),    Selection = 'ANBP', IF(ISBLANK([YE ANBP Goal]), 'N/A', ROUND([CY Wkly Avg ANBP] - [Weekly Need ANBP],0)),    Selection = 'Combined Launch (NFA1-2)', 'N/A',    Selection = 'Field Leaders', 'N/A',    Selection = 'Leader JFW', IF(ISBLANK([YE LeaderJFW Goal]), 'N/A', ROUND([CY Wkly Avg Leader JFW] - [Weekly Need Leader JFW],0)),    Selection = 'New Clients', if(ISBLANK([YE NFC Goal]), 'N/A', ROUND([CY Wkly Avg New Clients],0) - ROUND([Weekly Need New Clients],0)),    Selection = 'New FA Hires', if(ISBLANK([YE FR Contracts Goal]), 'N/A', ROUND([CY Wkly Avg RAR Contracts] - [Weekly Need New FA Hires],0)),    Selection = 'Prospect Connects', IF(ISBLANK([YE Total PCs Goal]), 'N/A', ROUND([CY Wkly Avg PCs] - [Weekly Need Total PCs],0)),    Selection = 'Score Qualifying CP+', IF(ISBLANK([YE CPPlus Goal]), 'N/A', ROUND([CP+ YTD Wk Average] - [Weekly Need CP+],0)),    Selection = 'Referrals', 'N/A',    Selection = 'WID', IF(ISBLANK([YE WID Goal]), 'N/A', ROUND([CY Wkly Avg WID] - [Weekly Need WID],0)),    Selection = 'WCFC', if(ISBLANK([YE WMFC Goal]), 'N/A', ROUND([CY Wkly Avg WCFC] - [Weekly Need WMFC],0)))","isHidden":false},{"name":"7) Weekly Trend NEW","expression":"var Selection = SELECTEDVALUE(\u0027Scorecard Table\u0027[Metric Name])returnSWITCH(    true(),    Selection = 'Applications Received', [Weekly Trend Applications Received],    Selection = 'Appointments', [Weekly Trend Appointments],    Selection = 'ANBP', [Weekly Trend ANBP],    Selection = 'ANBP - MVP Markets', [Weekly Trend ANBP MVP Markets],    Selection = 'ANBP - NPG Practices', [Weekly Trend ANBP NPG Practices],    Selection = 'Combined Launch (NFP1-2)', 'N/A',    Selection = 'FAs on Teams', '-',    Selection = 'Field Leaders', [Weekly Trend Field Leader],    Selection = 'Leader JFW', [Weekly Trend Leader JFW],    Selection = 'New Clients', [Weekly Trend New Clients],    Selection = 'New FA Hires', [Weekly Trend New FA Hires],    Selection = 'Prospect Connects', [Weekly Trend Prospect Connects],    Selection = 'Score Qualifying CP+', [Weekly Trend Quality CP+],    Selection = 'Referrals', [Weekly Trend Referrals],    Selection = 'WID', [Weekly Trend RFRB],    Selection = 'Total Sales', [Weekly Trend Total Sales],    Selection = 'WCFC', [Weekly Trend WCFC])","isHidden":false},{"name":"2) % of YTD Goal","expression":"var Selection = SELECTEDVALUE(\u0027Scorecard Table\u0027[Metric Name])returnSWITCH(    true(),    Selection = 'Applications Received', 'N/A',    Selection = '% Adopted Advisors', 'N/A',    Selection = 'Appointments', [% Appts YTD],    Selection = 'ANBP', [% ANBP YTD],    Selection = 'ANBP - MVP Markets', 'N/A',    Selection = 'ANBP - NPG Practices', [% ANBP NPG YTD],    Selection = 'Combined Launch (NFA1-2)', [% CL YTD],    Selection = 'Field Leaders', 'N/A',    Selection = 'Leader JFW', 'N/A',    Selection = 'New Clients', [% NFC YTD],    Selection = 'New FA Hires', [YTD % of Goal FA Hires],    Selection = 'Prospect Connects', [% Total PCs YTD],    Selection = 'Score Qualifying CP+', [% CPPlus YTD],    Selection = 'Referrals', 'N/A',    Selection = 'Total Sales', 'N/A',    Selection = 'WID', [% WID YTD],    Selection = 'WCFC', [% WMFC YTD])","isHidden":false},{"name":"YTD ANBP NPG Goal","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[NPG]),SELECTEDVALUE(RFO_Zone[NPG]),                   if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                    if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel]),'Enterprise Goal'))))))var PriorSunday = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_END_DT], DTRB_PERF_DATES[CAL_DAY_DT], LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT],DTRB_PERF_DATES[DTRB_PERF_RPT_DAY_TXT],'CURRENT') - 3)             --var maxyeardt = CALCULATE(max(DTRB_PERF_DATES[CAL_DAY_DT]), DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='CURRENT')         returnCALCULATE(sum(YTD_GOALS_DD[Goal_Amount]), YTD_GOALS_DD[Metric] = 'ANBP', YTD_GOALS_DD[Level] = 'NPG', YTD_GOALS_DD[Date_of_Goal] = PriorSunday)","isHidden":false},{"name":"% ANBP NPG YTD","expression":"DIVIDE([CY ANBP NPG Practices], [YTD ANBP NPG Goal])","isHidden":false},{"name":"YTD % of Goal FA Hires","expression":"DIVIDE([New FA Hires Curr Week], [YTD FR Contracts Goal])","isHidden":false},{"name":"9a) YTD Goal","expression":"var Selection = SELECTEDVALUE(\u0027Scorecard Table\u0027[Metric Name])returnSWITCH(    true(),    Selection = 'Applications Received', 'N/A',    Selection = 'Appointments', [YTD Appt Goal],    Selection = 'ANBP', [YTD ANBP Goal],    Selection = 'Combined Launch (NFA1-2)', [YTD CL Goal],    Selection = 'Field Leaders', 'N/A',    Selection = 'Leader JFW', 'N/A',    Selection = 'New Clients', [YTD NFC Goal],    Selection = 'New FA Hires', [YTD FR Contracts Goal],    Selection = 'Prospect Connects', [YTD Total PCs Goal],    Selection = 'Score Qualifying CP+', [YTD CPPlus Goal],    Selection = 'Referrals', 'N/A',    Selection = 'RFRB', [YTD WID Goal],    Selection = 'WCFC', [YTD WMFC Goal])","isHidden":false},{"name":"9b) YE Goal - NEW","expression":"var Selection = SELECTEDVALUE(\u0027Scorecard Table\u0027[Metric Name])returnSWITCH(    true(),    Selection = 'Applications Received', 'N/A',    Selection = 'Appointments', [YE Appt Goal],    Selection = 'ANBP', [YE ANBP Goal],    Selection = 'Combined Launch (NFA1-2)', [YE CL Goal],    Selection = 'Field Leaders', 'N/A',    Selection = 'Leader JFW', 'N/A',    Selection = 'New Clients', [YE NFC Goal],    Selection = 'New FA Hires', [YE FR Contracts Goal],    Selection = 'Prospect Connects', [YE Total PCs Goal],    Selection = 'Score Qualifying CP+', [YE CPPlus Goal],    Selection = 'Referrals', 'N/A',    Selection = 'RFRB', [YE WID Goal],    Selection = 'WCFC', [YE WMFC Goal])","isHidden":false},{"name":"2) YTD NO FORMATTING","expression":"var Selection = SELECTEDVALUE(\u0027Scorecard Table\u0027[Metric Name])var decimals = '#,0.0'returnSWITCH(    true(),    Selection = 'Applications Received', if(ISBLANK([Received YTD]), 0,[Received YTD]),    Selection = 'Appointments', if(ISBLANK([YTD Appointments]), 0, [YTD Appointments]),    Selection = 'ANBP', if(ISBLANK([CY ANBP]), 0, [CY ANBP]),    Selection = 'Combined Launch (NFA1-2)', if(isblank([CL Percent]), 'N/A', FORMAT([CL Percent], '0.0%')),    Selection = 'FAs on Teams', '-',    Selection = 'Field Leaders', if(ISBLANK([Field Leader YTD Headcount]), 0, [Field Leader YTD Headcount]),    Selection = 'Leader JFW', if(ISBLANK([Leader JFW YTD]), 0, [Leader JFW YTD]),    Selection = 'New Clients', if(ISBLANK([YTD_NC]), 0, [YTD_NC]),    Selection = 'New FA Hires', if(ISBLANK([New FA Hires Curr Week]), 0, [New FA Hires Curr Week]),    Selection = 'Prospect Connects', if(ISBLANK([YTD Prospect Connects]), 0, [YTD Prospect Connects]),    Selection = 'Score Qualifying CP+', if(ISBLANK([YTD CP Plus]), 0, [YTD CP Plus]),    Selection = 'Referrals', if(ISBLANK([YTD Referrals]), 0, [YTD Referrals]),    Selection = 'WID', IF(ISBLANK([YTD WID]), 0, [YTD WID]),    Selection = 'WCFC', IF(ISBLANK([WCFC YTD]), 0, [WCFC YTD]))","isHidden":false},{"name":"CY CW Total Sales","expression":"var prior_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_WK_NBR], DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT], 'PREVIOUS')returnCALCULATE(    sum(ANBP_OtherRev_DD[Value]),    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_week,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"CY Wkly Avg Total Sales","expression":"var curr_year = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT],'CURRENT')var last_week = LOOKUPVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR],DTRB_PERF_DATES[DTRB_PERF_RPT_WK_TXT],'CURRENT')-1RETURNDIVIDE([YTD Total Sales], last_week)","isHidden":false},{"name":"CY PW Total Sales","expression":"var Selection = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR])var prior_2wks = Selection -1returnCALCULATE(    sum(ANBP_OtherRev_DD[Value]),    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_WK_NBR] = prior_2wks,    DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT] = 'Current')","isHidden":false},{"name":"Wow Total Sales","expression":"if(and([YTD Total Sales], [CY PW Total Sales]), [YTD Total Sales] - [CY PW Total Sales])","isHidden":false},{"name":"Weekly Trend Total Sales","expression":"AVERAGEX(\\tKEEPFILTERS(VALUES(\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_WK_NBR])),\\tCALCULATE([Wow Total Sales]))","isHidden":false},{"name":"% Adopted Advisors","expression":"var FilterChoice = if(ISFILTERED(RFO_Zone[NPG]),SELECTEDVALUE(RFO_Zone[NPG]),                   if(ISFILTERED(RFO_Zone[Market Leader]),SELECTEDVALUE(RFO_Zone[Organization Zone Code]),                   if(ISFILTERED(MVPs[Market_Leader]),SELECTEDVALUE(MVPs[MVP_ID]),                   if(ISFILTERED(RFO_Zone[RFO Name]),SELECTEDVALUE(RFO_Zone[Adjusted RFO]),                   if(ISFILTERED(RFO_Zone[Core or Growth]),SELECTEDVALUE(RFO_Zone[Core or Growth]),                   if(ISFILTERED(RFO_Zone[Division]),SELECTEDVALUE(RFO_Zone[Division]),                   if(ISFILTERED(RFO_Zone[Region]),SELECTEDVALUE(RFO_Zone[Region]),                   if(ISFILTERED(RFO_Zone[Channel]),SELECTEDVALUE(RFO_Zone[Channel])))))))))returnif(max(\u0027Advice Adoption - TAG\u0027[Level])=FilterChoice,\u0027Advice Adoption - TAG\u0027[Advice Adoption % TAG],if(max(\u0027Advice Adoption - Market\u0027[Market])=FilterChoice,\u0027Advice Adoption - Market\u0027[Advice Adoption % Market],\u0027Advice Adoption - Enterprise\u0027[% Adopting Advisors Enterprise]))","isHidden":false},{"name":"Message_Alert_Text","expression":" var _txt1 = SELECTEDVALUE(\u0027Distribution\u0027[Alert Message]) return IF(ISBLANK(_txt1),'',_txt1)","isHidden":false},{"name":"ShowHideAlertTitle","expression":"IF(ISBLANK(SELECTEDVALUE(Distribution[Alert Message])),' ','ALERT !')","isHidden":false},{"name":"ShowHideAlert Background","expression":"IF(ISBLANK(SELECTEDVALUE(Distribution[Alert Message])),'White','White')","isHidden":false},{"name":"ShowHideAlert Border","expression":"IF(ISBLANK(SELECTEDVALUE(Distribution[Alert Message])),'White','#BE1D3D')","isHidden":false}],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i44FAA==', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Column1 = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Column1', type text}}),    #'Removed Columns' = Table.RemoveColumns(#'Changed Type',{'Column1'})in    #'Removed Columns'"}]},{"name":"RAR Contracts","isHidden":false,"columns":[{"name":"JOIN VALUE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"ZONE_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_Mkt","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Year","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Week","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Current Wk","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Count","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Contract Goals","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Cumulative Contract Goals","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG Contract Goals","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP Contract Goals","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//SHARED//Public//DI and BI//Capacity Dashboard//Capacity Dashboard-RAR_Contracts.xlsx'), null, true),    Sheet1_Sheet = Source{[Item='Sheet1',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'JOIN VALUE', type text}, {'RFO_ID', Int64.Type}, {'ZONE_ID', type text}, {'RFO_Mkt', type text}, {'Type', type text}, {'Year', Int64.Type}, {'Week', Int64.Type}, {'Current Wk', Int64.Type}, {'Count', Int64.Type}}),    #'Filtered Rows' = Table.SelectRows(#'Changed Type', each ([RFO_ID] \u003c\u003e 717 and [RFO_ID] \u003c\u003e 718))in    #'Filtered Rows'"}]},{"name":"Pace Performance Snapshot","isHidden":false,"columns":[{"name":"Organization Dimension Surrogate Key","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Organization Dimension Version Number","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Organization Lead Dimension Surrogate Key","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Organization Lead Dimension Version Number","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Pace Performance Target Dimension Surrogate Key","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Pace Performance Target Version Number","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Process Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Tenure Data","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Month","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"EOQ_Month","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"EOY_Month","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Tenure_Months","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EOY_Tenure","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EOQ_Tenure","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EOM_Tenure","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Production Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Snapshot Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Business Interruption Day Value","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FP_Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Leader_TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Leader_Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Life and Health GRID Credit Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"LH_Pace_Target","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"GRID Credit Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Pace_Target","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EOY_Target","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EOY_Range_Amt","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EOQ_Target","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EOQ_Range_Amt","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EOM_Target","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EOM_Range_Amt","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"ABOVE_BELOW_LH","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Prior Advisor Experience Indicator","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CURR_WK_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ABOVE_BELOW","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Target AMT","dataType":"String","isHidden":false,"expression":"related(\u0027DM_01 Pace Performance Target Dimension\u0027[GRID Credit Amount])","columnType":"Calculated"},{"name":"Target Range","dataType":"String","isHidden":false,"expression":"related(\u0027DM_01 Pace Performance Target Dimension\u0027[GRID Credit Range Amount])","columnType":"Calculated"},{"name":"Current Pace Target","dataType":"String","isHidden":false,"expression":"if(\u0027Pace Performance Snapshot\u0027[Process Date]=date(2023,12,31),calculate(sum(\u0027Pace Performance Snapshot\u0027[EOY Pace Target])),if(\u0027Pace Performance Snapshot\u0027[TSID] in {'TS78250','TS75194','TS77919'},calculate(sum(\u0027Pace Performance Snapshot\u0027[Target AMT])+((sum(\u0027Pace Performance Snapshot\u0027[Tenure_Months])-sum(\u0027Pace Performance Snapshot\u0027[Month]))*sum(\u0027Pace Performance Snapshot\u0027[Target Range]))),    calculate(sum(\u0027Pace Performance Snapshot\u0027[Pace_Target]))))","columnType":"Calculated"},{"name":"EOY Pace Target","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"ABOVE/BELOW EOY","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Pace Amount","expression":"var MAXDATE = max(\u0027Pace Performance Snapshot\u0027[Process Date])returncalculate(sum(\u0027Pace Performance Snapshot\u0027[GRID Credit Amount]),\u0027Pace Performance Snapshot\u0027[Process Date]=MAXDATE)","isHidden":false},{"name":"ABOVE/BELOW","expression":"Var Pace_Amt = \u0027Pace Performance Snapshot\u0027[Pace Amount]Var Pace_Tgt = \u0027Pace Performance Snapshot\u0027[Current_Pace_Target]Var Diff = Pace_Amt - Pace_TgtReturnIF(FORMAT(\u0027Pace Performance Snapshot\u0027[Current GAP to Target],'Whole Number') \u003c\u003e '',   IF(Diff \u003e 0, 'ABOVE', 'BELOW'),   BLANK())","isHidden":false},{"name":"Current_Pace_Target","expression":"var MAXDATE = max(\u0027Pace Performance Snapshot\u0027[Process Date])returncalculate(sum(\u0027Pace Performance Snapshot\u0027[Current Pace Target]),\u0027Pace Performance Snapshot\u0027[Process Date]=MAXDATE)","isHidden":false},{"name":"Current GAP to Target","expression":"calculate(\u0027Pace Performance Snapshot\u0027[Pace Amount]-\u0027Pace Performance Snapshot\u0027[Current_Pace_Target],\u0027Pace Performance Snapshot\u0027[ABOVE_BELOW]\u003c\u003e'')","isHidden":false},{"name":"Above Count","expression":"var MAXDATE = max(\u0027Pace Performance Snapshot\u0027[Process Date])returncalculate(    distinctcount(\u0027Pace Performance Snapshot\u0027[TSID]),    filter(\u0027Pace Performance Snapshot\u0027,\u0027Pace Performance Snapshot\u0027[ABOVE/BELOW]='ABOVE'),    \u0027Pace Performance Snapshot\u0027[Process Date]= MAXDATE)","isHidden":false},{"name":"Below Count","expression":"var MAXDATE = max(\u0027Pace Performance Snapshot\u0027[Process Date])returncalculate(    distinctcount(\u0027Pace Performance Snapshot\u0027[TSID]),     filter(\u0027Pace Performance Snapshot\u0027,\u0027Pace Performance Snapshot\u0027[ABOVE/BELOW]='BELOW'),    \u0027Pace Performance Snapshot\u0027[Process Date]= MAXDATE)","isHidden":false},{"name":"% Above Pace","expression":"divide(\u0027Pace Performance Snapshot\u0027[Above Count],\u0027Pace Performance Snapshot\u0027[Above Count]+[Below Count])","isHidden":false},{"name":"Above Count 52 wk avg","expression":"calculate(    count(\u0027Pace Performance Snapshot\u0027[TSID]),    filter(\u0027Pace Performance Snapshot\u0027,\u0027Pace Performance Snapshot\u0027[ABOVE/BELOW]='ABOVE'))","isHidden":false},{"name":"Below Count 52 Wk Avg","expression":"calculate(     count(\u0027Pace Performance Snapshot\u0027[TSID]),     filter(\u0027Pace Performance Snapshot\u0027,\u0027Pace Performance Snapshot\u0027[ABOVE/BELOW]='BELOW'))","isHidden":false},{"name":"% Above Pace 52 wk avg","expression":"divide(\u0027Pace Performance Snapshot\u0027[Above Count 52 wk avg],\u0027Pace Performance Snapshot\u0027[Above Count 52 wk avg]+[Below Count 52 Wk Avg])","isHidden":false}],"source":[{"expression":"let    Source = Sql.Database('dbedwdwprd', 'enterprisedatamart', [Query='SELECT #(lf) a.[Organization Dimension Surrogate Key]#(lf)      ,a.[Organization Dimension Version Number]#(lf)      ,a.[Organization Lead Dimension Surrogate Key]#(lf)      ,a.[Organization Lead Dimension Version Number]#(lf)      ,a.[Pace Performance Target Dimension Surrogate Key]#(lf)      ,a.[Pace Performance Target Version Number]#(lf)      ,a.[Process Date]#(lf)      ,case when b.[Source System Key Text] in (\u0027TS77919\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end as [Tenure Data]#(lf)         ,datediff(month, case when b.[Source System Key Text] in (\u0027TS77919\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end, DATEADD(mm, DATEDIFF(mm, 0, GETDATE()) + 1, -1)) as Month#(lf)         --,datediff(month, [Tenure Data], DATEADD (dd, +14, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()) +1, 0))) as EOQ_Month#(lf)#(tab)#(tab) ,datediff(month, case when b.[Source System Key Text] in (\u0027TS77919\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end, case when GETDATE()\u003eDATEFROMPARTS(year(getdate()),10,16) then (DATEADD (dd, -1, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()) + 1, 0)))#(lf)#(tab)#(tab) else DATEADD (dd, +14, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()-15) + 1, 0))#(lf)#(tab)#(tab) end) as EOQ_Month#(lf)#(tab)#(tab) --,(DATEADD (dd, -1, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()) + 1, 0))) as Current_QTR#(lf)#(tab)#(tab) /*,case when GETDATE()\u003eDATEFROMPARTS(year(getdate()),10,16) then (DATEADD (dd, -1, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()) + 1, 0)))#(lf)#(tab)#(tab) else DATEADD (dd, +14, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()-15) + 1, 0))#(lf)#(tab)#(tab) end as Quarter_End*/#(lf)#(tab)#(tab) --,DATEADD (dd, +14, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()), 0)) as Previous_QTR#(lf)         ,datediff(month, case when b.[Source System Key Text] in (\u0027TS77919\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end, DATEADD(yy, DATEDIFF(yy, 0, GETDATE()) + 1, -1)) as EOY_Month#(lf)         ,datediff(month, case when b.[Source System Key Text] in (\u0027TS77919\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end, [Process Date]) - #(lf)         (DATEPART(dd,case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end)*1.0-1.0)/DAY(EOMONTH(case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end)) + #(lf)         (DATEPART(dd,[Process Date])*1.0)/DAY(EOMONTH([Process Date])) as Tenure_Months#(lf)#(lf)       ,datediff(month, case when b.[Source System Key Text] in (\u0027TS77919\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end,DATEADD(yy, DATEDIFF(yy, 0, GETDATE()) + 1, -1)) - 1 +#(lf)  1-1.0*(day(case when b.[Source System Key Text] in (\u0027TS77919\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end)-1)/ day(dateadd(m, datediff(m,-1, case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end), -1))#(lf)  + 1.0*(day(DATEADD(yy, DATEDIFF(yy, 0, GETDATE()) + 1, -1))-1)/ day(dateadd(m, datediff(m,-1, DATEADD(yy, DATEDIFF(yy, 0, GETDATE()) + 1, -1)), -1)) as EOY_Tenure#(lf)#(lf)       ,datediff(month, case when b.[Source System Key Text] in (\u0027TS77919\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end,case when GETDATE()\u003eDATEFROMPARTS(year(getdate()),10,16) then (DATEADD (dd, -1, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()) + 1, 0)))#(lf)#(tab)#(tab) else DATEADD (dd, +14, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()-15) + 1, 0))#(lf)#(tab)#(tab) end) - 1 +#(lf)  1-1.0*(day(case when b.[Source System Key Text] in (\u0027TS77919\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end)-1)/ day(dateadd(m, datediff(m,-1, case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end), -1))#(lf)  + 1.0*(day(case when GETDATE()\u003eDATEFROMPARTS(year(getdate()),10,16) then (DATEADD (dd, -1, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()) + 1, 0)))#(lf)#(tab)#(tab) else DATEADD (dd, +14, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()-15) + 1, 0))#(lf)#(tab)#(tab) end)-1)/ day(dateadd(m, datediff(m,-1, case when GETDATE()\u003eDATEFROMPARTS(year(getdate()),10,16) then (DATEADD (dd, -1, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()) + 1, 0)))#(lf)#(tab)#(tab) else DATEADD (dd, +14, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()-15) + 1, 0))#(lf)#(tab)#(tab) end), -1)) as EOQ_Tenure#(lf)#(lf)      ,datediff(month, case when b.[Source System Key Text] in (\u0027TS77919\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end,DATEADD(mm, DATEDIFF(mm, 0, GETDATE()) + 1, -1)) - 1 +#(lf)  1-1.0*(day(case when b.[Source System Key Text] in (\u0027TS77919\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end)-1)/ day(dateadd(m, datediff(m,-1, case when b.[Source System Key Text] in (\u0027TS74049\u0027,\u0027TS71560\u0027,\u0027TS77919\u0027,\u0027TS74642\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end), -1))#(lf)  + 1.0*(day(DATEADD(mm, DATEDIFF(mm, 0, GETDATE()) + 1, -1))-1)/ day(dateadd(m, datediff(m,-1, DATEADD(mm, DATEDIFF(mm, 0, GETDATE()) + 1, -1)), -1)) as EOM_Tenure#(lf)      ,a.[Production Date]#(lf)      ,a.[Snapshot Type Code]#(lf)      ,a.[Business Interruption Day Value]#(lf)         ,b.[Source System Key Text] as TSID#(lf)         ,CONCAT(b.[First Name],\u0027 \u0027,b.[Last Name]) as FP_Name#(lf)         ,b.[Job Type Code]#(lf)         ,CONCAT((LEFT(sale_hier_dim.[ORZN_ZONE_CDE],4)),\u0027-\u0027,sale_hier_dim.ORZN_DEPT_DSCR) as TAG#(lf)#(tab)     ,sale_hier_dim.ORZN_ZONE_CDE [Market]#(lf)         ,c.[Source System Key Text] as Leader_TSID#(lf)         ,CONCAT(c.[First Name],\u0027 \u0027,c.[Last Name]) as Leader_Name#(lf)      ,a.[Life and Health GRID Credit Amount]#(lf)      ,a.[Life and Health Prorated GRID Credit Amount] as LH_Pace_Target#(lf)      ,a.[GRID Credit Amount]#(lf)      ,[Prorated GRID Credit Amount] as Pace_Target#(lf)         ,d.[GRID Credit Amount] as EOY_Target#(lf)         ,d.[GRID Credit Range Amount] as EOY_Range_Amt#(lf)         ,e.[GRID Credit Amount] as EOQ_Target#(lf)         ,e.[GRID Credit Range Amount] as EOQ_Range_Amt#(lf)         ,f.[GRID Credit Amount] as EOM_Target#(lf)         ,f.[GRID Credit Range Amount] as EOM_Range_Amt#(lf)         ,case when [Prior Advisor Experience Indicator] = \u0027Y\u0027 or b.[Job Type Code] = \u0027002010\u0027 then \u0027\u0027#(lf)         when a.[GRID Credit Amount] \u003e a.[Prorated GRID Credit Amount] then \u0027ABOVE\u0027#(lf)         when a.[GRID Credit Amount] \u003c a.[Prorated GRID Credit Amount] then \u0027BELOW\u0027#(lf)#(tab)#(tab) else \u0027\u0027#(lf)         end as ABOVE_BELOW#(lf)         ,case when [Prior Advisor Experience Indicator] = \u0027Y\u0027 or b.[Job Type Code] = \u0027002010\u0027 then \u0027\u0027#(lf)         when a.[Life and Health GRID Credit Amount] \u003e a.[Life and Health Prorated GRID Credit Amount] then \u0027ABOVE\u0027#(lf)         when a.[Life and Health GRID Credit Amount] \u003c a.[Life and Health Prorated GRID Credit Amount] then \u0027BELOW\u0027#(lf)#(tab)#(tab) else \u0027\u0027#(lf)         end as ABOVE_BELOW_LH#(lf)     ,[Prior Advisor Experience Indicator]#(lf)       ,case when a.[Process Date] = max_process_date.[Max Process Date]then \u0027Y\u0027#(lf)         else \u0027N\u0027#(lf)         end as CURR_WK_IND#(lf)  FROM [EnterpriseDataMart].[DM_01].[Pace Performance Snapshot Fact] a#(lf)  inner join [EnterpriseDataMart].[DM_01].[Organization Dimension] b#(lf)   on (a.[Organization Dimension Surrogate Key]=b.[Organization Dimension Surrogate Key] and#(lf)       a.[Process Date]\u003e=b.[Effective Begin Date] and a.[Process Date]\u003c=b.[Effective End Date])#(lf)  inner join (SELECT MAX([Process Date]) [Max Process Date] FROM [DM_01].[Pace Performance Snapshot Fact]) as max_process_date on \u0027a\u0027 = \u0027a\u0027#(lf)  inner join [DM_01].[Date Dimension] dd on (a.[Process Date]=dd.[Calendar Date Date])#(lf)   left join [EnterpriseDataMart].[DM_01].[SALE_HIER_DIM] sale_hier_dim#(lf)    on ((#(lf)    (sale_hier_dim.EFF_BEG_DT\u003c=a.[Process Date])#(lf)        or#(lf)        (#(lf)        (a.[Process Date]\u003c(SELECT min(EFF_BEG_DT) FROM [EnterpriseDataMart].[DM_01].[SALE_HIER_DIM] subq WHERE b.[Source System Key Text]=subq.[SALE_HIER_ID] and subq.CURR_ROW_IND = \u0027Y\u0027))#(lf)        and#(lf)        sale_hier_dim.EFF_BEG_DT=(SELECT min(EFF_BEG_DT) FROM [EnterpriseDataMart].[DM_01].[SALE_HIER_DIM] subq WHERE b.[Source System Key Text]=subq.[SALE_HIER_ID] and subq.CURR_ROW_IND = \u0027Y\u0027)#(lf)        ))#(lf)        and #(lf)        (a.[Process Date]\u003c= DATEADD(day,-1,sale_hier_dim.EFF_END_DT))#(lf)        and sale_hier_dim.CURR_ROW_IND = \u0027Y\u0027#(lf)        and b.[Source System Key Text]=sale_hier_dim.[SALE_HIER_ID])#(lf)#(lf)  #(lf)  #(lf)  #(lf)  inner join [EnterpriseDataMart].[DM_01].[Organization Dimension] c#(lf)   on (a.[Organization Lead Dimension Surrogate Key]=c.[Organization Dimension Surrogate Key] and#(lf)    a.[Process Date]\u003e=c.[Effective Begin Date] and a.[Process Date]\u003c=c.[Effective End Date])#(lf)  left join [EnterpriseDataMart].[DM_01].[Pace Performance Target Dimension] d#(lf)   on (datediff(month, case when b.[Source System Key Text] in (\u0027TS77919\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end, DATEADD(yy, DATEDIFF(yy, 0, GETDATE()) + 1, -1))=d.[Calendar Year Month Number])#(lf)  left join [EnterpriseDataMart].[DM_01].[Pace Performance Target Dimension] e#(lf)   on (datediff(month, case when b.[Source System Key Text] in (\u0027TS77919\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end,case when GETDATE()\u003eDATEFROMPARTS(year(getdate()),10,16) then (DATEADD (dd, -1, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()) + 1, 0)))#(lf)#(tab)#(tab) else DATEADD (dd, +14, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()-15) + 1, 0))#(lf)#(tab)#(tab) end)=e.[Calendar Year Month Number])#(lf)  left join [EnterpriseDataMart].[DM_01].[Pace Performance Target Dimension] f#(lf)   on (datediff(month, case when b.[Source System Key Text] in (\u0027TS77919\u0027,\u0027TS78250\u0027,\u0027TS75194\u0027) then b.[Adjusted Service Date] else a.[Tenure Data] end, DATEADD(mm, DATEDIFF(mm, 0, GETDATE()) + 1, -1))=f.[Calendar Year Month Number])']),    #'Added Custom' = Table.AddColumn(Source, 'ABOVE/BELOW', each if [Tenure_Months] \u003c= 2.25 then '' else [ABOVE_BELOW]),    #'Removed Columns' = Table.RemoveColumns(#'Added Custom',{'ABOVE_BELOW'}),    #'Reordered Columns' = Table.ReorderColumns(#'Removed Columns',{'Organization Dimension Surrogate Key', 'Organization Dimension Version Number', 'Organization Lead Dimension Surrogate Key', 'Organization Lead Dimension Version Number', 'Pace Performance Target Dimension Surrogate Key', 'Pace Performance Target Version Number', 'Process Date', 'Tenure Data', 'Month', 'EOQ_Month', 'EOY_Month', 'Tenure_Months', 'EOY_Tenure', 'EOQ_Tenure', 'EOM_Tenure', 'Production Date', 'Snapshot Type Code', 'Business Interruption Day Value', 'TSID', 'FP_Name', 'Job Type Code', 'TAG', 'Market', 'Leader_TSID', 'Leader_Name', 'Life and Health GRID Credit Amount', 'LH_Pace_Target', 'GRID Credit Amount', 'Pace_Target', 'EOY_Target', 'EOY_Range_Amt', 'EOQ_Target', 'EOQ_Range_Amt', 'EOM_Target', 'EOM_Range_Amt', 'ABOVE/BELOW', 'ABOVE_BELOW_LH', 'Prior Advisor Experience Indicator', 'CURR_WK_IND'}),    #'Renamed Columns' = Table.RenameColumns(#'Reordered Columns',{{'ABOVE/BELOW', 'ABOVE_BELOW'}}),    #'Filtered Rows' = Table.SelectRows(#'Renamed Columns', each [Tenure_Months] \u003e= 0),    #'Merged Queries' = Table.NestedJoin(#'Filtered Rows', {'TSID'}, #'12_31 Pace Export', {'TSID'}, '12_31 Pace Export', JoinKind.LeftOuter),    #'Expanded 12_31 Pace Export' = Table.ExpandTableColumn(#'Merged Queries', '12_31 Pace Export', {'EOY Pace Target', 'ABOVE/BELOW EOY'}, {'EOY Pace Target', 'ABOVE/BELOW EOY'})in    #'Expanded 12_31 Pace Export'"}]},{"name":"DM_01 Pace Performance Target Dimension","isHidden":false,"columns":[{"name":"Pace Performance Target Dimension Surrogate Key","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Pace Performance Target Dimension Version Number","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Effective Begin Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Effective End Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Current Row Indicator","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Source System Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Source System Key Test","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Source Sub System Text","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Calendar Year Month Number","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"GRID Credit Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"GRID Credit Range Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Life and Health GRID Credit Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Life and Health GRID Credit Range Amount","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Sql.Database('dbedwdwprd', 'EnterpriseDataMart'),    #'DM_01_Pace Performance Target Dimension' = Source{[Schema='DM_01',Item='Pace Performance Target Dimension']}[Data]in    #'DM_01_Pace Performance Target Dimension'"}]},{"name":"WID","isHidden":false,"columns":[{"name":"RALN_RFO_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RALN_MKT_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CalYr","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CalWk","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"max_cal_dt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ANBP_OtherRev","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Value","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'SELECT #(lf) #(lf)    CASE WHEN B.''Total Sales Reporting Product Sub-Group Description''= \u0027TAN Managed Accounts\u0027 THEN \u00270716-01-00\u0027 ELSE A.RALN_MKT_CDE END AS RALN_MKT_CDE,#(lf)    CASE WHEN B.''Total Sales Reporting Product Sub-Group Description''= \u0027TAN Managed Accounts\u0027 THEN \u00270716\u0027 ELSE A.RALN_RFO_CDE END AS RALN_RFO_CDE,#(lf)    A.MVP,#(lf)    A.Market,#(lf)    #(lf)    C.''Distribution Performance Reporting Year Number'' AS CalYr,#(lf)   C.''Distribution Performance Reporting Year Week Number'' AS CalWk,#(lf)    c.max_cal_dt,#(lf)      B.''Credited Advisor Identifier'' AS COMP_PYEE_ID,#(lf)    UPPER(B.''Total Sales Reporting Product Sub-Group Description'') AS Product,#(lf)    \u0027WID\u0027 AS ANBP_OtherRev,#(lf)   SUM( B.''WID'') AS Value,#(lf)   D.''Employee Name'',#(lf)   #(lf)   #(lf)#(tab)B.''Distribution Channel Code'',#(lf)    B.''Distribution Channel Description''#(lf) #(lf)FROM#(lf) #(lf) #(lf)  (SELECT #(lf) #(lf)''Sales Transaction Process Date'',#(lf)''Credited Advisor Identifier'',#(lf)    ''Distribution Channel Code'',#(lf)    ''Distribution Channel Description'',#(lf)    ''Total Sales Reporting Product Type'',#(lf)    ''Total Sales Reporting Product Group Description'',#(lf)    ''Total Sales Reporting Product Sub-Group Description'',#(lf)SUM(''Weighted Investment Deposit Amount'') AS WID#(lf) #(lf)FROM  ENTERPRISE_EDW.PRESENTATION_01.''WID Transaction Confidential''#(lf) #(lf)WHERE YEAR(''Sales Transaction Process Date'') \u003e= YEAR(GETDATE())-3 #(lf)   #(lf)   AND ''Distribution Channel Code'' IN (\u0027CAREER\u0027, \u0027OTH\u0027, \u0027TAN\u0027,\u0027TFGT\u0027,\u0027TRUST\u0027)#(lf) #(lf)GROUP BY #(lf) #(lf)    ''Sales Transaction Process Date'',#(lf)    ''Credited Advisor Identifier'',#(lf)    ''Distribution Channel Code'',#(lf)    ''Distribution Channel Description'',#(lf)    ''Total Sales Reporting Product Type'',#(lf)    ''Total Sales Reporting Product Group Description'',#(lf)    ''Total Sales Reporting Product Sub-Group Description'')#(lf) #(lf) AS B #(lf) #(lf)LEFT JOIN#(lf) #(lf)//Select Current and Transfer rows from Sales Hierarchy--- START#(lf) #(lf)(SELECT DISTINCT#(lf) #(lf)    ''Sales Hierarchy Identifier'',#(lf)    ''Effective Begin Date'' AS BeginDate,#(lf)    ''Effective End Date''-1 AS EndDate,#(lf)    ''Organization Zone Code'' AS RALN_MKT_CDE,#(lf)    ''Organization Sub Department Code'' AS RALN_RFO_CDE,#(lf)    (case when length(''Organization Zone Code'') = 7 then \u002700\u0027#(lf)             else substr(''Organization Zone Code'',6,2)#(lf)           end) as MVP,#(lf)          (case when length(''Organization Zone Code'') = 7 then substr(''Organization Zone Code'',6,2) #(lf)             else substr(''Organization Zone Code'',9,2)#(lf)           end) as Market#(lf)           #(lf)           #(lf)FROM ENTERPRISE_EDW.PRESENTATION_01.''Sale Hierarchy Dimension''#(lf)    WHERE #(lf) #(lf)        ''Current Row Indicator''=\u0027Y\u0027#(lf)        AND ''Effective Begin Date''\u003c=(''Effective End Date''-1)) AS A#(lf)        #(lf)//Select Current and Transfer rows from Sales Hierarchy--- END#(lf) #(lf)ON (A.''Sales Hierarchy Identifier''=B.''Credited Advisor Identifier'' AND B.''Sales Transaction Process Date'' BETWEEN A.BeginDate  AND A.EndDate)#(lf) #(lf) #(lf)LEFT JOIN (#(lf)  #(lf)//Determine Max Cal Day of the week--- START#(lf) #(lf)SELECT#(lf)  #(lf)    T1.''Calendar Day Date'',#(lf)    T1.''Distribution Performance Reporting Year Number'',#(lf)    T1.''Distribution Performance Reporting Year Week Number'',#(lf)    T2.max_cal_dt#(lf)  #(lf)  FROM ENTERPRISE_EDW.PRESENTATION_01.''Distribution Performance Dates Dimension'' AS T1#(lf)  #(lf)  INNER JOIN#(lf)  #(lf)  (SELECT   #(lf)    ''Distribution Performance Reporting Year Number'',#(lf)    ''Distribution Performance Reporting Year Week Number'',#(lf)    MAX(''Calendar Day Date'') AS max_cal_dt#(lf) #(lf)    FROM ENTERPRISE_EDW.PRESENTATION_01.''Distribution Performance Dates Dimension''#(lf) #(lf)    GROUP BY     #(lf)        ''Distribution Performance Reporting Year Number'',#(lf)        ''Distribution Performance Reporting Year Week Number'') AS T2 ON (T1.''Distribution Performance Reporting Year Number''=T2.''Distribution Performance Reporting Year Number'' AND T1.''Distribution Performance Reporting Year Week Number''=T2.''Distribution Performance Reporting Year Week Number'')#(lf) #(lf)  ) AS C #(lf)  #(lf)//Determine Max Cal Day of the week--- END#(lf)    #(lf)    ON (B.''Sales Transaction Process Date''=C.''Calendar Day Date'')#(lf)    #(lf) #(lf)LEFT JOIN ENTERPRISE_EDW.PRESENTATION_01.''Workforce Dimension Detail'' AS D ON (B.''Credited Advisor Identifier''=D.''Employee Identifier'' AND D.''Current Row Indicator''=\u0027Y\u0027)#(lf)  #(lf)  GROUP BY#(lf)  #(lf)#(tab)A.RALN_MKT_CDE,#(lf)    A.RALN_RFO_CDE,#(lf)    A.MVP,#(lf)    A.Market,#(lf)    C.''Distribution Performance Reporting Year Number'',#(lf)    C.''Distribution Performance Reporting Year Week Number'',#(lf)    c.max_cal_dt,#(lf)    ''Distribution Channel Code'',#(lf) #(lf)    B.''Credited Advisor Identifier'',#(lf)    B.''Total Sales Reporting Product Type'',#(lf)    B.''Total Sales Reporting Product Group Description'',#(lf)    B.''Total Sales Reporting Product Sub-Group Description'',#(lf)    D.''Employee Name'',#(lf)    #(lf)       #(lf)#(tab)B.''Distribution Channel Code'',#(lf)    B.''Distribution Channel Description''', null, [EnableFolding=true]),    #'Reordered Columns' = Table.ReorderColumns(Source,{'RALN_RFO_CDE', 'MVP', 'MARKET', 'RALN_MKT_CDE', 'CALYR', 'CALWK', 'MAX_CAL_DT', 'COMP_PYEE_ID', 'PRODUCT', 'ANBP_OTHERREV', 'VALUE', 'Employee Name', 'Distribution Channel Code', 'Distribution Channel Description'}),    #'Removed Columns' = Table.RemoveColumns(#'Reordered Columns',{'COMP_PYEE_ID', 'Employee Name', 'Distribution Channel Code', 'Distribution Channel Description'}),    #'Renamed Columns' = Table.RenameColumns(#'Removed Columns',{{'MARKET', 'Market'}, {'CALYR', 'CalYr'}, {'CALWK', 'CalWk'}, {'MAX_CAL_DT', 'max_cal_dt'}, {'PRODUCT', 'Product'}, {'ANBP_OTHERREV', 'ANBP_OtherRev'}, {'VALUE', 'Value'}})in    #'Renamed Columns'"}]},{"name":"Advice Adoption - TAG","isHidden":false,"columns":[{"name":"Advisor Group","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Adopting Advisors %","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Rank (sorted by)","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Level","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Advice Adoption % TAG","expression":"sum(\u0027Advice Adoption - TAG\u0027[Adopting Advisors %])","isHidden":false},{"name":"Rank Advice Adoption TAG","expression":"sum(\u0027Advice Adoption - TAG\u0027[Rank (sorted by)])","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Distribution Dashboard//Advice Adoption.xlsx'), null, true),    Export_Sheet = Source{[Item='TAG',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Export_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Advisor Group', type text}, {'Adopting Advisors %', Percentage.Type}, {'Rank (sorted by)', Int64.Type}})in    #'Changed Type'"}]},{"name":"Advice Adoption - Market","isHidden":false,"columns":[{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market with Leader","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Adopting Advisors %","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Rank (sorted by)","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Advice Adoption % Market","expression":"sum(\u0027Advice Adoption - Market\u0027[Adopting Advisors %])","isHidden":false},{"name":"Rank Advice Adoption Market","expression":"sum(\u0027Advice Adoption - Market\u0027[Rank (sorted by)])","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Distribution Dashboard//Advice Adoption.xlsx'), null, true),    Market_Sheet = Source{[Item='Market',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Market_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Market', type text}, {'Market with Leader', type text}, {'Adopting Advisors %', type number}, {'Rank (sorted by)', Int64.Type}})in    #'Changed Type'"}]},{"name":"Advice Adoption - MVP","isHidden":false,"columns":[{"name":"Level","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP with Leader","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Adopting Advisor %","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Rank (sorted by)","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Advice Adoption % MVP","expression":"sum(\u0027Advice Adoption - MVP\u0027[Adopting Advisor %])","isHidden":false},{"name":"Rank Advice Adoption MVP","expression":"sum(\u0027Advice Adoption - MVP\u0027[Rank (sorted by)])","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Distribution Dashboard//Advice Adoption.xlsx'), null, true),    MVP_Sheet = Source{[Item='MVP',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(MVP_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Level', type text}, {'MVP with Leader', type text}, {'Adopting Advisor %', type number}, {'Rank (sorted by)', Int64.Type}})in    #'Changed Type'"}]},{"name":"Appt Yrly Avg by Wk","isHidden":false,"columns":[{"name":"DTRB_PERF_RPT_WK_END_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Appt_Week_SAS","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Week_num_SAS","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Forecast_Appts","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Appt Forecast","expression":"calculate(sum(\u0027Appt Yrly Avg by Wk\u0027[Forecast_Appts]),DTRB_PERF_DATES[Next 31 days Flag])","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Distribution Dashboard//Distribution_Dashboard_Feed_Forecasted_Appts.xlsx'), null, true),    #'Appt Yrly Avg by Wk_Sheet' = Source{[Item='Appt Yrly Avg by Wk',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'Appt Yrly Avg by Wk_Sheet', [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'DTRB_PERF_RPT_WK_END_DT', type date}, {'DTRB_PERF_RPT_WK_NBR', Int64.Type}, {'DTRB_PERF_RPT_YR_NBR', Int64.Type}, {'Appt_Week_SAS', type date}, {'Week_num_SAS', Int64.Type}, {'Forecast_Appts', Int64.Type}})in    #'Changed Type'"}]},{"name":"Advice Adoption - Enterprise","isHidden":false,"columns":[{"name":"Advisor Group ","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Advisor Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Adopting HHLDs 0-20","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Tenure","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Experienced Advisor","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Total Adopted Clients","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Total Adopted New Clients","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Adopted Households","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Adopting Advisor","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Job Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RULE FA","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"% Adopting Advisors Enterprise","expression":"divide(sum(\u0027Advice Adoption - Enterprise\u0027[Adopting Advisor]),DISTINCTCOUNT(\u0027Advice Adoption - Enterprise\u0027[EMP_ID]))","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Distribution Dashboard//Advice Adoption.xlsx'), null, true),    Enterprise_Sheet = Source{[Item='Enterprise',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Enterprise_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Advisor Group ', type text}, {'MVP', type text}, {'Market', type text}, {'EMP_ID', type text}, {'Advisor Name', type text}, {'Adopting HHLDs 0-20', Int64.Type}, {'Tenure', type text}, {'Experienced Advisor', type text}, {'Team Name', type text}, {'Total Adopted Clients', Int64.Type}, {'Total Adopted New Clients', Int64.Type}, {'Adopted Households', Int64.Type}, {'Adopting Advisor', Int64.Type}})in    #'Changed Type'"}]},{"name":"UL VUL Excess_Append Query","isHidden":false,"columns":[{"name":"beg_mth_dt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Value","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CalYr","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Endof Month_Friday","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"max_cal_dt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"CalWk","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Mapping.Product Roll Up","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_CDE_With Duplicate NPG Rows","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ANBP_OtherRev","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Not YTD","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MonthEndDate","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"MONTH","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////VSDEPT//DEPT7900//7173//Analytics Team//Production Reporting//total_sales_weekly//Total Sales Weekly Output.csv'),[Delimiter=',', Columns=18, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Renamed Columns1' = Table.RenameColumns(#'Promoted Headers',{{'Total Sales', 'sales_amt'}, {'Annual New Business Production', 'anbp_amt'}}),    #'Removed Other Columns1' = Table.SelectColumns(#'Renamed Columns1',{'beg_mth_dt', 'sales_amt', 'modifier', 'etrs_dsply_prod_l1', 'etrs_dsply_prod_l2', 'etrs_dsply_chnl_l2'}),    #'Changed Type' = Table.TransformColumnTypes(#'Removed Other Columns1',{{'beg_mth_dt', type date}, {'sales_amt', type number}, {'modifier', type text}, {'etrs_dsply_prod_l2', type text}}),    #'Filtered Rows' = Table.SelectRows(#'Changed Type', each ([etrs_dsply_prod_l2] = 'UL/VUL Excess') and ([modifier] = 'Actual') and ([etrs_dsply_chnl_l2] = 'Enterprise')),    #'Inserted Year' = Table.AddColumn(#'Filtered Rows', 'Year', each Date.Year([beg_mth_dt]), Int64.Type),    #'Added Custom' = Table.AddColumn(#'Inserted Year', 'EndofMonth', each Date.AddDays(Date.EndOfMonth([beg_mth_dt]),0)),    #'Added Custom7' = Table.AddColumn(#'Added Custom', 'Endof Month_Friday', each if Date.DayOfWeekName([EndofMonth])='Saturday' then Date.AddDays([EndofMonth],-1) else if Date.DayOfWeekName([EndofMonth])='Sunday' then Date.AddDays([EndofMonth],-2) else [EndofMonth]),    #'Changed Type1' = Table.TransformColumnTypes(#'Added Custom7',{{'EndofMonth', type date}, {'Endof Month_Friday', type date}}),    #'Renamed Columns' = Table.RenameColumns(#'Changed Type1',{{'sales_amt', 'Value'}, {'etrs_dsply_prod_l2', 'Product'}, {'Year', 'CalYr'}}),    #'Removed Other Columns' = Table.SelectColumns(#'Renamed Columns',{'beg_mth_dt', 'Value', 'Product', 'CalYr', 'EndofMonth', 'Endof Month_Friday'}),    #'Added Custom1' = Table.AddColumn(#'Removed Other Columns', 'max_cal_dt', each Date.EndOfWeek([Endof Month_Friday],Day.Saturday)),    #'Sorted Rows' = Table.Sort(#'Added Custom1',{{'EndofMonth', Order.Descending}}),    #'Added Custom2' = Table.AddColumn(#'Sorted Rows', 'CalWk', each Date.WeekOfYear([max_cal_dt])-1),    #'Removed Columns' = Table.RemoveColumns(#'Added Custom2',{'EndofMonth'}),    #'Added Custom3' = Table.AddColumn(#'Removed Columns', 'Mapping.Product Roll Up', each 'UL/VUL Excess'),    #'Added Custom4' = Table.AddColumn(#'Added Custom3', 'ORZN_CDE_With Duplicate NPG Rows', each 'UL/VUL Excess'),    #'Added Custom5' = Table.AddColumn(#'Added Custom4', 'ANBP_OtherRev', each 'ANBP'),    #'Changed Type2' = Table.TransformColumnTypes(#'Added Custom5',{{'max_cal_dt', type date}, {'CalWk', Int64.Type}, {'ANBP_OtherRev', type text}, {'Mapping.Product Roll Up', type text}, {'ORZN_CDE_With Duplicate NPG Rows', type text}}),    #'Added Custom6' = Table.AddColumn(#'Changed Type2', 'Not YTD', each if Date.Month([max_cal_dt])\u003c=Date.Month(List.Max(#'Changed Type2'[max_cal_dt]))then '' else 'Not YTD'),    #'Filtered Rows1' = Table.SelectRows(#'Added Custom6', each Date.IsInPreviousNYears([beg_mth_dt], 2) or Date.IsInCurrentYear([beg_mth_dt])),    #'Inserted End of Month' = Table.AddColumn(#'Filtered Rows1', 'MonthEndDate', each Date.EndOfMonth([beg_mth_dt]), type date),    #'Inserted Month' = Table.AddColumn(#'Inserted End of Month', 'MONTH', each Date.Month([beg_mth_dt]), Int64.Type)in    #'Inserted Month'"}]},{"name":"12_31 Pace Export","isHidden":false,"columns":[{"name":"Market","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Code","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FA Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Tenure Group","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Tenure Months","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Above/Below","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Leader","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Pace Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Pace Target","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EOY Pace Target","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"ABOVE/BELOW EOY","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Current GAP to Target","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Pending","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Current GAP to Target Less Pending","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"LH Pace Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"LH Pace Target","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Current GAP to LH Target","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Last Week Appts","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Last Week Prospect Connect","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"YTD New Clients","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared////Public//DI and BI//Distribution Dashboard//Pace EOY Targets (Corrected).xlsx'), null, true),    Export_Sheet = Source{[Item='Export',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Export_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Market', type text}, {'Job Code', Int64.Type}, {'TSID', type text}, {'FA Name', type text}, {'Tenure Group', type text}, {'Tenure Months', type number}, {'Above/Below', type text}, {'Leader', type text}, {'Pace Amount', type number}, {'Pace Target', type number}, {'EOY Target', type number}, {'ABOVE/BELOW EOY', type text}, {'Current GAP to Target', type number}, {'Pending', Int64.Type}, {'Current GAP to Target Less Pending', type number}, {'LH Pace Amount', type number}, {'LH Pace Target', type number}, {'Current GAP to LH Target', type number}, {'Last Week Appts', Int64.Type}, {'Last Week Prospect Connect', Int64.Type}, {'YTD New Clients', Int64.Type}}),    #'Renamed Columns' = Table.RenameColumns(#'Changed Type',{{'EOY Target', 'EOY Pace Target'}})in    #'Renamed Columns'"}]},{"name":"Distribution","isHidden":false,"columns":[{"name":"What\u0027s New Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Alert Message","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared////Public//DI and BI//Field Reporting//What\u0027s New and Alert Message//What\u0027s New and Alert Message.xlsx'), null, true),    Distribution_Sheet = Source{[Item='Distribution',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Distribution_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'What\u0027s New Description', type text}, {'Alert Message', type text}})in    #'Changed Type'"}]}],"configuredBy":"Tina.Timmer@Thrivent.com","configuredById":"8e6dc12f-c7a1-4bb3-91f3-ea2dc014a46e","isEffectiveIdentityRequired":false,"isEffectiveIdentityRolesRequired":false,"targetStorageMode":"Abf","createdDate":"2024-01-23T14:50:53.863","contentProviderType":"PbixInImportMode","schemaMayNotBeUpToDate":true},{"id":"af1753f1-122f-4135-9241-74039fedc7fa","name":"PILOT - Referral Incentive","tables":[{"name":"Producer_Snowflake","isHidden":false,"storageMode":"Import","columns":[{"name":"SALE_HIER_DIM_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EMP_DIM_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SALE_HIER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Advisor Group","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ZONE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MARKET","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FILTER_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MARKET_NUMBER","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MARKET_LEADERS","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP Leader","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RPT_TO_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Report to Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Adjusted Service Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TENURE","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TENURE_GROUP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SFC_FC","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FR_SEGMENT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"GNDR_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LST_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FRST_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MDDL_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ASSIGNED_AFA","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"OP_COUNT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Conference Qualification Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team Purpose Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee Team Role Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Credentials","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"License","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Conference Qualification","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team Purpose Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market with Leader","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP with Leader","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TeamAdvisor_HlthRpt","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team Indicator","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Advisor Group Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Tenure (NFA1-4, Vet)","dataType":"String","isHidden":false,"expression":"if(Producer_Snowflake[TAG] = '0383', '',if(Producer_Snowflake[TENURE_GROUP] in {'NFR1', 'NFR2', 'NFR3', 'NFR4', 'NFA1', 'NFA2', 'NFA3', 'NFA4'}, 'NFA1-4',if(Producer_Snowflake[TENURE_GROUP] in {'VET5', 'VET6', 'VET7', 'VET8+', 'VETFR'}, 'Vet','Other')))","columnType":"Calculated"},{"name":"Advisor Group Name 2","dataType":"String","isHidden":false,"expression":"if(Producer_Snowflake[Advisor Group Name] = '0383-Virtual Advice Leadership', '0383-Virtual Advice', Producer_Snowflake[Advisor Group Name])","columnType":"Calculated"}],"measures":[{"name":"Message_txt - not part of pilot","expression":"if(ISBLANK(DISTINCTCOUNT(\u0027Future Prospect Connects\u0027[Appointment Dimension Surrogate Key])), 'There are no future prospect connect appointments scheduled','')","isHidden":false}],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'select distinct b.''Sales Hierarchy Dimension Surrogate Key'' as SALE_HIER_DIM_SK,#(lf)       a.''Workforce Dimension Detail Surrogate Key'' as EMP_DIM_SK,#(lf)       a.''Employee Identifier'' as EMP_ID,#(lf)       b.''Sales Hierarchy Identifier'' as SALE_HIER_ID,#(lf)       --a.''Employee Name'' as EMP_NM,#(lf)       case when a.''Employee Name'' = \u0027Johnson,Christopher\u0027 then a.''Last Name''||\u0027,\u0027||a.''Nick Name''#(lf)            when a.''Employee Name'' = \u0027Parker,David\u0027 and a.''Employee Identifier'' = \u0027TS83655\u0027 then a.''Last Name''||\u0027,\u0027||a.''First Name''||\u0027 C.\u0027#(lf)            when a.''Employee Identifier'' = \u0027TS54638\u0027 then a.''Last Name''||\u0027,\u0027||a.''Nick Name''#(lf)            when a.''Employee Identifier'' = \u0027TS11184\u0027 then a.''Last Name''||\u0027,\u0027||a.''Nick Name''#(lf)            when a.''Employee Identifier'' = \u0027TS80048\u0027 then a.''Last Name''||\u0027,\u0027||a.''Nick Name''#(lf)         else a.''Employee Name''#(lf)       end as EMP_NM,       #(lf)       aa.''Job Type Code'' as JOB_TYP_CDE,#(lf)       aa.''Job Type Description'' as JOB_TYP_DSCR,#(lf)       case when a.''Organization Department Code'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027) then \u00270383\u0027#(lf)         else a.''Organization Department Code''#(lf)       end as TAG,#(lf)       case when aa.''Department Identifier'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027) then \u0027Virtual Advice\u0027#(lf)         else aa.''Department Name''#(lf)       end as ''TAG Name'',#(lf)       case when aa.''Department Identifier'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027) then \u00270383-Virtual Advice\u0027#(lf)         else a.''Organization Department Code''||\u0027-\u0027||aa.''Department Name''#(lf)       end as ''Advisor Group'',#(lf)       (substr(b.''Organization Zone Code'',6,2))   AS ZONE,#(lf)       b.''Organization Zone Code'' as Market,#(lf)       case when substr(b.''Organization Zone Code'',9,2) = \u002798\u0027 then \u0027NPG - market 98\u0027#(lf)            when substr(b.''Organization Zone Code'',9,2) = \u002799\u0027 then \u0027NPG - market 99\u0027#(lf)            when substr(b.''Organization Zone Code'',9,2) = \u002759\u0027 then \u0027PMC - market 59\u0027#(lf)            when substr(b.''Organization Zone Code'',9,2) = \u002701\u0027 then \u0027PMC - market 01\u0027#(lf)            when substr(b.''Organization Zone Code'',9,2) = \u002769\u0027 then \u0027GPA - market 69\u0027#(lf)            when Substr(b.''Organization Zone Code'',9,2) = \u002779\u0027 then \u0027GPD - market 79\u0027#(lf)            when substr(b.''Organization Zone Code'',9,2) = \u002789\u0027 then \u0027PPC - market 89\u0027#(lf)       end as Filter_Ind,  #(lf)       substr(b.''Organization Zone Code'',9,2) as Market_Number,               #(lf)       zz4.market_leaders,#(lf)       c.''Sub Department Identifier'' as MVP_ID,#(lf)       zz3.''MVP Leader'', #(lf)       c.''Report to ID'' as RPT_TO_ID,#(lf)       cc.''First Name''||\u0027 \u0027||cc.''Last Name'' as ''Report to Name'',#(lf)       a.''Adjusted Service Date'',#(lf)     --  c.''Financial Professional Tenure'' as Tenure,#(lf)     --  c.''Financial Professional Tenure Group'' as Tenure_Group,#(lf)      case when a.''Organization Department Code'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00270383\u0027) then  datediff(\u0027days\u0027, a.''Employee Service Date'',current_date())/365.25 #(lf)            else c.''Financial Professional Tenure''#(lf)       end as Tenure,     #(lf)       case when zzzz.TENUREGRPxx = \u0027NA\u0027 and zzzz.Tenure \u003e 4 then \u0027VETFR\u0027#(lf)            when zzzz.TENUREGRPxx = \u0027NA\u0027 and (zzzz.Tenure \u003e= 3 and zzzz.Tenure \u003c 4) then \u0027NFA4\u0027#(lf)            when zzzz.TENUREGRPxx = \u0027NA\u0027 and (zzzz.Tenure \u003e= 2 and zzzz.Tenure \u003c 3) then \u0027NFA3\u0027#(lf)            when zzzz.TENUREGRPxx = \u0027NA\u0027 and (zzzz.Tenure \u003e= 1 and zzzz.Tenure \u003c 2) then \u0027NFA2\u0027#(lf)            when zzzz.TENUREGRPxx = \u0027NA\u0027 and (zzzz.Tenure \u003c 1) then \u0027NFA1\u0027#(lf)            else c.''Financial Professional Tenure Group''#(lf)        end as Tenure_Group,#(lf)       case when a.''Senior Financial Consultant Indicator'' = \u0027Y\u0027 then \u0027SFC\u0027#(lf)#(tab)        when a.''Financial Consultant Indicator'' = \u0027Y\u0027 then \u0027FC\u0027#(lf)#(tab)        when a.''Wealth Advisor Indicator'' = \u0027Y\u0027 then \u0027WA\u0027#(lf)#(tab)   end as SFC_FC,#(lf)       (case when a.''Senior Financial Consultant Indicator'' = \u0027Y\u0027 then \u0027SFC\u0027#(lf)             when a.''Financial Consultant Indicator'' = \u0027Y\u0027 then \u0027FC\u0027#(lf)             when a.''Wealth Advisor Indicator'' = \u0027Y\u0027 then \u0027WA\u0027#(lf)             when a.''Job Type Code'' in (\u0027002003\u0027,\u0027002018\u0027,\u0027002019\u0027) then A.''Job Type Description''#(lf)             when a.''Job Type Code'' = \u0027002016\u0027 then a.''Job Type Description''#(lf)             when ((a.''Senior Financial Consultant Indicator'' = \u0027N\u0027 or a.''Financial Consultant Indicator'' = \u0027N\u0027) and #(lf)                    c.''Financial Professional Tenure'' \u003e= 4 and #(lf)                    a.''Job Type Code'' in (\u0027002000\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027003602\u0027,\u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027))#(lf)                      then \u0027VETFR\u0027#(lf)             when c.''Financial Professional Tenure'' \u003e= 3 and c.''Financial Professional Tenure'' \u003c 4  and   #(lf)                  a.''Job Type Code'' in (\u0027002000\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027003602\u0027,\u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027)#(lf)                      then \u0027NFR4\u0027#(lf)             when c.''Financial Professional Tenure'' \u003e= 2 and c.''Financial Professional Tenure'' \u003c 3  and   #(lf)                  a.''Job Type Code'' in (\u0027002000\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027003602\u0027,\u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027)#(lf)                      then \u0027NFR3\u0027#(lf)             when c.''Financial Professional Tenure'' \u003e= 1 and c.''Financial Professional Tenure'' \u003c 2  and   #(lf)                  a.''Job Type Code'' in (\u0027002000\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027003602\u0027,\u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027)#(lf)                      then \u0027NFR2\u0027 #(lf)             when c.''Financial Professional Tenure'' \u003e= 0 and c.''Financial Professional Tenure'' \u003c 1  and   #(lf)                  a.''Job Type Code'' in (\u0027002000\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027003602\u0027,\u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027)#(lf)                      then \u0027NFR1\u0027 #(lf)        end) as FR_SEGMENT,#(lf)        trim(concat_ws(\u0027 \u0027,dd.CHFC_DSGT_CDE,dd.CLF_DSGT_CDE,dd.CLU_DSGT_CDE,dd.CFA_DSGT_CDE,dd.CFP_DSGT_CDE,dd.FIC_DSGT_CDE,dd.FICF_DSGT_CDE,dd.LUTCF_DSGT_CDE)) AS Credentialsxx,#(lf)        concat_ws(\u0027 \u0027,dd.S1_LIC_STS_CDE,dd.S4_LIC_STS_CDE,dd.S6_LIC_STS_CDE,dd.S7_LIC_STS_CDE,dd.S9_LIC_STS_CDE,#(lf)        dd.S10_LIC_STS_CDE,dd.S22_LIC_STS_CDE,dd.S24_LIC_STS_CDE,dd.S26_LIC_STS_CDE,dd.S27_LIC_STS_CDE,#(lf)        dd.S51_LIC_STS_CDE,dd.S53_LIC_STS_CDE,dd.S62_LIC_STS_CDE,dd.S63_LIC_STS_CDE,dd.S65_LIC_STS_CDE,#(lf)        dd.S66_LIC_STS_CDE,dd.S86_LIC_STS_CDE,dd.S87_LIC_STS_CDE) as Licensesxx,  #(lf)          #(lf)       a.''Gender Code'' as GNDR_CDE, #(lf)       a.''Last Name'' as LST_NM, #(lf)       case when a.''Nick Name'' IN (\u0027 \u0027) then a.''First Name''#(lf)         else a.''Nick Name''#(lf)       end as FRST_NM, #(lf)       a.''Middle Name'' as MDDL_NM,#(lf)       xx.assigned_afa,#(lf)       case when zz.opcount is NULL then 0 #(lf)         else zz.opcount#(lf)       end as OP_Count,#(lf)       aa.''Conference Qualification Type Code'',#(lf)       zzz.''Team Identifier'',#(lf)       zzz.''Team Name'',#(lf)       zzz.''Team Purpose Code'',#(lf)       zzz.''Employee Team Role Code''#(lf)       #(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' a inner join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' as aa#(lf)    on (a.''Employee Identifier''=aa.''Source System Key Text'' and aa.''Current Row Indicator'' = \u0027Y\u0027)  left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' b #(lf)    on (a.''Employee Identifier''= b.''Sales Hierarchy Identifier'') left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' c #(lf)    on (a.''Employee Identifier''= c.''Source System Key Text'' AND c.''Current Row Indicator'' = \u0027Y\u0027) left join#(lf)       (select az.''Employee Identifier'',#(lf)               case when az.''Organization Department Code'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00270383\u0027) then  datediff(\u0027days\u0027, az.''Employee Service Date'',current_date())/365.25 #(lf)                    else cz.''Financial Professional Tenure''#(lf)               end as Tenure,#(lf)               cz.''Financial Professional Tenure Group''  as TENUREGRPxx             #(lf)          from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' az inner join#(lf)               ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' cz #(lf)           on (az.''Employee Identifier''= cz.''Source System Key Text'' AND cz.''Current Row Indicator'' = \u0027Y\u0027)) as zzzz#(lf)     on a.''Employee Identifier''=zzzz.''Employee Identifier'' left join     #(lf)   ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' cc #(lf)    on (c.''Report to ID''= cc.''Source System Key Text'' AND cc.''Current Row Indicator'' = \u0027Y\u0027) left join  #(lf)        (select d.''Employee Identifier'',#(lf)                (case when \u0027Y\u0027 = d.''Chartered Financial Consultant Designation Code'' THEN \u0027ChFC\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS CHFC_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Chartered Leadership Fellow Designation Code'' THEN \u0027CLF\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS CLF_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Chartered Life Underwriter Designation Code'' THEN \u0027CLU\u0027#(lf)                   else \u0027 \u0027 #(lf)                 end) AS CLU_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Chartered Financial Analyst Designation Code'' THEN \u0027CFA\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS CFA_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Fraternal Insurance Counselor Designation Code'' THEN \u0027FIC\u0027#(lf)                   else \u0027 \u0027 #(lf)                 end) AS FIC_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Fraternal Insurance Counselor Fellow Designation Code'' THEN \u0027FICF\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS FICF_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Certified Financial Planner Designation Code'' THEN \u0027CFP\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS CFP_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Life Underwriter Training Counsel Fellow Designation Code'' THEN \u0027LUTCF\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS LUTCF_DSGT_CDE,#(lf)                (case when \u0027Y\u0027 = d.''Series One License Status Code'' THEN \u00271\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S1_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Four License Status Code'' THEN \u00274\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S4_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Six License Status Code'' THEN \u00276\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S6_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Seven License Status Code'' THEN \u00277\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S7_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Nine License Status Code'' THEN \u00279\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S9_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Ten License Status Code'' THEN \u002710\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S10_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Twenty-two License Status Code'' THEN \u002722\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S22_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Twenty-four License Status Code'' THEN \u002724\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S24_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Twenty-six License Status Code'' THEN \u002726\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S26_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Twenty-seven License Status Code'' THEN \u002727\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S27_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Fifty-one License Status Code'' THEN \u002751\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S51_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Fifty-three License Status Code'' THEN \u002753\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S53_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Sixty-two License Status Code'' THEN \u002762\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S62_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Sixty-three License Status Code'' THEN \u002763\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S63_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Sixty-five License Status Code'' THEN \u002765\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S65_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Sixty-six License Status Code'' THEN \u002766\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S66_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Eighty-six License Status Code'' THEN \u002786\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S86_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Eighty-seven License Status Code'' THEN \u002787\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S87_LIC_STS_CDE#(lf)              #(lf)           from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' d#(lf)          where d.''Termination Date'' is null   #(lf)            and d.''Current Row Indicator'' = \u0027Y\u0027#(lf)         /*   and d.''Employee Status Type Code'' in (\u0027A\u0027,\u0027L\u0027,\u0027I\u0027)) as dd */#(lf)            and d.''Employee Status Type Code'' in (\u0027A\u0027)) as dd#(lf)#(lf)    on A.''Employee Identifier'' = dd.''Employee Identifier''  left join#(lf)           #(lf)        (select distinct aa.''Source System Key Text'',#(lf)#(tab)            (case when e.emp_count = 1 then f.emp_nm#(lf)                      when e.emp_count \u003e 1 then \u0027Multiple Associates\u0027#(lf)                   else \u0027None\u0027#(lf)                 end) as assigned_afa#(lf)           from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' as aa left join  #(lf)              (select e.''Report to ID'', #(lf)                      count(e.''Organization Dimension Surrogate Key'') as emp_count   #(lf)                 from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' e  #(lf)                where e.''Job Type Code'' in (\u0027002000\u0027,\u0027002010\u0027,\u0027002003\u0027,\u0027002011\u0027,\u0027002012\u0027,\u0027003100\u0027,#(lf)                                            \u0027002017\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027002018\u0027,\u0027002019\u0027,\u0027003500\u0027,#(lf)                                            \u0027002022\u0027,\u0027002024\u0027,\u0027002025\u0027,\u0027002026\u0027,\u0027002027\u0027)#(lf)                  and e.''Employee Status Type Code'' = \u0027A\u0027 #(lf)                  and e.''Current Row Indicator'' = \u0027Y\u0027#(lf)                  and e.''Report to ID'' \u003c\u003e \u0027'' ''\u0027 #(lf)                  and e.''Effective End Date'' = \u00279999-12-31\u0027 #(lf)               group by ''Report to ID'') as e #(lf)             on aa.''Source System Key Text'' = e.''Report to ID'' left join#(lf)         #(lf)              (select f.''Organization Dimension Surrogate Key'',#(lf)                      f.''Last Name''||\u0027, \u0027||f.''First Name'' as EMP_NM, #(lf)                      f.''Report to ID''  #(lf)                 from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' f#(lf)                where (f.''Job Type Code'' in (\u0027002000\u0027,\u0027002010\u0027,\u0027002003\u0027,\u0027002011\u0027,\u0027002012\u0027,\u0027003100\u0027,#(lf)                                             \u0027002017\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027002018\u0027,\u0027002019\u0027,\u0027003500\u0027,#(lf)                                             \u0027002022\u0027,\u0027002024\u0027,\u0027002025\u0027,\u0027002026\u0027,\u0027002027\u0027) or #(lf)                      f.''Department Identifier'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027)) #(lf)                  and f.''Department Identifier'' not in (\u00272410\u0027,\u00273005\u0027,\u00277151\u0027,\u00277152\u0027,\u00279150\u0027,\u00279134\u0027,#(lf)                                                        \u0027NA\u0027,\u00274100\u0027,\u00276053\u0027,\u00276100\u0027,\u00278900\u0027) #(lf)                  and f.''Employee Status Type Code'' = \u0027A\u0027 #(lf)                  and f.''Current Row Indicator'' = \u0027Y\u0027#(lf)                  and f.''Report to ID'' \u003c\u003e \u0027'' ''\u0027 #(lf)                  and f.''Effective End Date'' = \u00279999-12-31\u0027) as f  #(lf)              on e.''Report to ID''=f.''Report to ID''#(lf)          where (aa.''Job Type Code'' in (\u0027002000\u0027,\u0027002010\u0027,\u0027002003\u0027,\u0027002011\u0027,\u0027002012\u0027,\u0027003100\u0027,#(lf)                                        \u0027002017\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027002018\u0027,\u0027002019\u0027,\u0027003500\u0027,#(lf)                                        \u0027002022\u0027,\u0027002024\u0027,\u0027002025\u0027,\u0027002026\u0027,\u0027002027\u0027) or #(lf)                aa.''Department Identifier'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027)) #(lf)            and aa.''Department Identifier'' not in (\u00272410\u0027,\u00273005\u0027,\u00277151\u0027,\u00277152\u0027,\u00279150\u0027,\u00279134\u0027,#(lf)                                                   \u0027NA\u0027,\u00274100\u0027,\u00276053\u0027,\u00276100\u0027,\u00278900\u0027) #(lf)            and aa.''Current Row Indicator'' = \u0027Y\u0027#(lf)            and aa.''Employee Status Type Code'' = \u0027A\u0027 #(lf)            and aa.''Report to ID'' \u003c\u003e \u0027'' ''\u0027 #(lf)            and aa.''Effective End Date'' = \u00279999-12-31\u0027) as xx#(lf) #(lf)    on a.''Employee Identifier''=xx.''Source System Key Text'' left join #(lf)      (select count(z.''Organization Dimension Surrogate Key'') as OPCOUNT,   #(lf)                    z.''Report to ID'' #(lf)         from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' z  #(lf)        where z.''Current Row Indicator'' = \u0027Y\u0027#(lf)          and z.''Field Professional Roles'' in (\u0027Unlicensed Office Professionals\u0027,\u0027Licensed Office Professionals\u0027)#(lf)        /*  and z.''Employee Status Type Code'' in (\u0027A\u0027,\u0027I\u0027,\u0027L\u0027) */#(lf)          and z.''Employee Status Type Code'' in (\u0027A\u0027)#(lf)#(lf)       group by ''Report to ID'') as zz#(lf)         #(lf)    on a.''Employee Identifier'' = zz.''Report to ID''   left join#(lf)#(lf)(select a.''Employee Identifier'',#(lf)        b.''Team Identifier'',#(lf)        b.''Team Name'',#(lf)        b.''Team Purpose Code'',#(lf)        case when a.''Employee Team Role Code'' = \u0027AFLT\u0027 then \u0027Affiliate\u0027#(lf)             when a.''Employee Team Role Code'' = \u0027LEAD\u0027 then \u0027Team Leader\u0027#(lf)             when a.''Employee Team Role Code'' = \u0027MBR\u0027  then \u0027Team Member\u0027#(lf)          else \u0027 \u0027#(lf)        end as ''Employee Team Role Code'',#(lf)        A.''Effective Date''#(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Employee Team Organization Relationship Current Dimension''  a inner join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Team Organization Current Dimension'' b#(lf)    on (a.''Team Identifier Surrogate Key'' = b.''Team Identifier Surrogate Key'')  inner join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' c#(lf)    on (a.''Employee Identifier'' = c.''Employee Identifier'')   #(lf)    #(lf) where b.''Effective Status Code'' = \u0027A\u0027#(lf)   and c.''Employee Status Type Code'' = \u0027A\u0027#(lf)   and c.''Current Row Indicator'' = \u0027Y\u0027#(lf)   and a.''Team Member Action Code'' \u003c\u003e \u0027DROP\u0027#(lf)   and b.''Team Purpose Code'' NOT in (\u0027COAC\u0027,\u0027ENSB\u0027/*,\u0027MKTG\u0027*/) #(lf)   and a.''Effective Date'' = (SELECT MAX(aa.''Effective Date'')#(lf)                                FROM ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Employee Team Organization Relationship Current Dimension''  aa inner join#(lf)                                     ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Team Organization Current Dimension'' bb#(lf)                                  on (aa.''Team Identifier Surrogate Key'' = bb.''Team Identifier Surrogate Key'' and a.''Employee Identifier''= aa.''Employee Identifier'') INNER JOIN#(lf)                                     ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' cc#(lf)                                  on (aa.''Employee Identifier''= cc.''Employee Identifier'')#(lf)#(tab)                           WHERE bb.''Effective Status Code'' = \u0027A\u0027#(lf)                                 AND cc.''Employee Status Type Code'' = \u0027A\u0027  #(lf)                                 and cc.''Current Row Indicator'' = \u0027Y\u0027#(lf)                                 and aa.''Team Member Action Code'' \u003c\u003e \u0027DROP\u0027#(lf)                                 and bb.''Team Purpose Code'' NOT in (\u0027COAC\u0027,\u0027ENSB\u0027/*,\u0027MKTG\u0027*/) #(lf)                                )#(lf)  order by a.''Employee Identifier'') as zzz#(lf)  #(lf)   on a.''Employee Identifier'' = zzz.''Employee Identifier'' left join#(lf)#(lf)#(lf)       (select distinct a2.''Organization Department Code'' as RFO_CDE,#(lf)                        a2.''Organization Sub Department Code'' as MVP_ID,#(lf)                        cc.''Organization Department Description'',#(lf)                        case when cc.''Employee Name'' is null then \u0027Vacant\u0027#(lf)                          else cc.''Employee Name''#(lf)                        end as ''MVP Leader''    #(lf)          from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' a2  left join#(lf)               (Select Distinct aa.''Organization Sub Department Code'',#(lf)                                aa.''Organization Department Description'',#(lf)                                bb.''Employee Identifier'',#(lf)                                bb.''Employee Name'' #(lf)                  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' as aa left join#(lf)                       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' as bb#(lf)                    on aa.''Sales Hierarchy Identifier''=bb.''Employee Identifier''  #(lf)                 where aa.''Current Row Indicator'' = \u0027Y\u0027#(lf)                   and bb.''Employee Status Type Code'' = \u0027A\u0027#(lf)                   and bb.''Current Row Indicator'' = \u0027Y\u0027#(lf)                   and aa.''Effective End Date'' = \u00279999-12-31\u0027#(lf)                   and bb.''Job Type Code'' = \u0027001001\u0027#(lf)                 order by aa.''Organization Sub Department Code'') cc#(lf)             on a2.''Organization Sub Department Code''=cc.''Organization Sub Department Code''  #(lf)          where a2.''Current Row Indicator'' = \u0027Y\u0027#(lf)            and a2.''Effective End Date'' = \u00279999-12-31\u0027#(lf)            and a2.''Organization Zone Code'' \u003c\u003e \u0027UKWN\u0027#(lf)           order by a2.''Organization Sub Department Code''  ) as zz3#(lf)  on c.''Sub Department Identifier''= zz3.''MVP_ID'' left join#(lf)   #(lf)    #(lf)     (SELECT DISTINCT a4.''Organization Department Code'' as RFO_CDE,#(lf)                      a4.''Organization Zone Code'' as TAG_ZONE_NM, #(lf)                      (substring(a4.''Organization Zone Code'',6,5)) as Market_ID,#(lf)                      case when t4.''Employee Name'' is null then \u0027Vacant\u0027#(lf)                        else t4.''Employee Name''#(lf)                      end as Market_Leaders#(lf)#(lf)        from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' a4 left join #(lf)             (select distinct aa4.''Organization Zone Code'',#(lf)                              bb4.''Employee Name''  #(lf)#(lf)                from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' aa4 left join #(lf)                     ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' bb4#(lf)                  on aa4.''Sales Hierarchy Identifier''=bb4.''Employee Identifier''#(lf)               where aa4.''Current Row Indicator'' = \u0027Y\u0027      #(lf)                 and bb4.''Employee Status Type Code'' in (\u0027A\u0027)#(lf)                 and aa4.''Effective End Date'' = \u00279999-12-31\u0027#(lf)                 and bb4.''Current Row Indicator'' = \u0027Y\u0027#(lf)                 and aa4.''Effective End Date'' = \u00279999-12-31\u0027#(lf)                 and (bb4.''Job Type Code'' in (\u0027001002\u0027,\u0027001003\u0027,\u0027001007\u0027) or #(lf)                      bb4.''Employee Identifier'' in (\u0027TS60295\u0027,\u0027TS49431\u0027,\u0027TS22024\u0027,\u0027TS26677\u0027))#(lf)                 and bb4.''Employee Identifier'' not in (\u0027TS62904\u0027,\u0027TS67022\u0027,\u0027TS74827\u0027,\u0027TS73067\u0027,\u0027TS77319\u0027,\u0027TS73124\u0027)) t4 #(lf)          on a4.''Organization Zone Code'' = t4.''Organization Zone Code''#(lf)       where a4.''Current Row Indicator'' = \u0027Y\u0027#(lf)         and a4.''Effective End Date'' = \u00279999-12-31\u0027#(lf)         and substring(a4.''Organization Zone Code'',6,2) \u003c\u003e \u002700\u0027#(lf)         and a4.''Organization Department Code'' \u003c\u003e \u0027UKWN\u0027#(lf)       order by a4.''Organization Zone Code'') zz4#(lf)     #(lf)   on  b.''Organization Zone Code''= zz4.''TAG_ZONE_NM'' #(lf)  #(lf)  #(lf) where a.''Employee Status Type Code'' IN (\u0027A\u0027)#(lf)  /* a.''Employee Status Type Code'' IN (\u0027A\u0027,\u0027I\u0027,\u0027L\u0027) */#(lf)   and (c.''Job Family Code'' LIKE \u0027FLD%\u0027 OR#(lf)        c.''Job Family Code'' =\u0027SALES\u0027 OR#(lf)        c.''TF Job Class Code'' =\u0027FAC\u0027)#(lf)   and a.''Termination Date'' is NULL #(lf)   and (a.''Job Type Code'' in (\u0027002003\u0027,\u0027002010\u0027,\u0027002011\u0027,\u0027002012\u0027,\u0027002016\u0027,\u0027002017\u0027,#(lf)                              \u0027002000\u0027,\u0027002022\u0027,\u0027002024\u0027,\u0027002025\u0027,\u0027002026\u0027,\u0027002027\u0027,#(lf)                              \u0027003100\u0027,\u0027003500\u0027,\u0027003602\u0027,#(lf)                              \u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027) or #(lf)       a.''Organization Department Code'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027)) #(lf)   and c.''Department Identifier'' not in (\u00272410\u0027,\u00273005\u0027,\u00277151\u0027,\u00277152\u0027,\u00279150\u0027,\u00279134\u0027,#(lf)                                         \u0027NA\u0027,\u00274100\u0027,\u00276053\u0027,\u00276100\u0027,\u00278900\u0027) #(lf)   and b.''Effective End Date'' = \u00279999-12-31\u0027 #(lf)   and b.''Current Row Indicator'' = \u0027Y\u0027 #(lf)   and a.''Current Row Indicator'' = \u0027Y\u0027 #(lf)   --and a.''Employee Identifier'' = \u0027TS77676\u0027#(lf)order by a.''Employee Identifier''', null, [EnableFolding=true]),    #'Added Custom' = Table.AddColumn(Source, 'Split_Cred', each Text.Split( [CREDENTIALSXX], ' ' )),    #'Added Custom1' = Table.AddColumn(#'Added Custom', 'Shrink_Cred', each List.Select([Split_Cred], each _ \u003c\u003e '')),    #'Added Custom2' = Table.AddColumn(#'Added Custom1', 'Credentials', each Text.Combine([Shrink_Cred], ' ')),    #'Added Custom3' = Table.AddColumn(#'Added Custom2', 'Split_License', each Text.Split( [LICENSESXX], ' ' )),    #'Added Custom4' = Table.AddColumn(#'Added Custom3', 'Shrink_License', each List.Select([Split_License], each _ \u003c\u003e '')),    #'Added Custom5' = Table.AddColumn(#'Added Custom4', 'License', each Text.Combine([Shrink_License], ' ')),    #'Removed Columns' = Table.RemoveColumns(#'Added Custom5',{'Split_Cred', 'Shrink_Cred', 'Split_License', 'Shrink_License', 'CREDENTIALSXX', 'LICENSESXX'}),    #'Added Custom6' = Table.AddColumn(#'Removed Columns', 'Conference Qualification', each if[Conference Qualification Type Code] = '33' then 'Pinnacle A'  else if[Conference Qualification Type Code] = '32' then 'Pinnacle B'else if[Conference Qualification Type Code] = '31' then 'Pinnacle C'else if[Conference Qualification Type Code] = '29' then 'Summit A'else if[Conference Qualification Type Code] = '28' then 'Summit B'else if[Conference Qualification Type Code] = '27' then 'Summit C'else if[Conference Qualification Type Code] = '22' then 'Sierra A'else if[Conference Qualification Type Code] = '20' then 'Sierra B'else 'Non-Qualified'),    #'Added Custom7' = Table.AddColumn(#'Added Custom6', 'Team Purpose Description', each if [Team Purpose Code] = 'PBP' then 'Professional'else if [Team Purpose Code] = 'PBPS' then 'Professional'else if [Team Purpose Code] = 'FRML' then 'Formal'  else if [Team Purpose Code] = 'FRMS' then 'Formal'else if [Team Purpose Code] = 'ASSC' then 'Association'else if [Team Purpose Code] = 'MKTG' then 'Marketing'else if [Team Purpose Code] = 'SOLO' then 'Solo'else ' '),    #'Added Custom8' = Table.AddColumn(#'Added Custom7', 'Market with Leader', each [MARKET]\u0026' - '\u0026[MARKET_LEADERS]),    #'Added Custom9' = Table.AddColumn(#'Added Custom8', 'MVP with Leader', each [MVP_ID] \u0026 ' - ' \u0026 [MVP Leader]),    #'Replaced Value' = Table.ReplaceValue(#'Added Custom9',null,'',Replacer.ReplaceValue,{'Team Name'}),    #'Replaced Value1' = Table.ReplaceValue(#'Replaced Value',null,'',Replacer.ReplaceValue,{'Team Identifier'}),    #'Added Custom10' = Table.AddColumn(#'Replaced Value1', 'TeamAdvisor_HlthRpt', each if [Team Identifier] = '' then [EMP_NM] else [Team Name]),    #'Added Custom11' = Table.AddColumn(#'Added Custom10', 'Team Indicator', each if([Team Identifier]='') then 0 else 1),    #'Changed Type' = Table.TransformColumnTypes(#'Added Custom11',{{'Team Indicator', Int64.Type}}),    #'Removed Duplicates' = Table.Distinct(#'Changed Type', {'SALE_HIER_DIM_SK'}),    #'Filtered Rows' = Table.SelectRows(#'Removed Duplicates', each true),    #'Added Custom12' = Table.AddColumn(#'Filtered Rows', 'Advisor Group Name', each if([TAG] = '0383') then [Advisor Group] elseText.Start([Advisor Group],Text.Length([Advisor Group])-14))in    #'Added Custom12'"}]},{"name":"Prospect Connects","isHidden":false,"storageMode":"Import","columns":[{"name":"ThriventId","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ClientName","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Appointment Dimension Surrogate Key","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Person Dimension Surrogate Key","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"appt_occurs","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Person Occurs","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Membership Type Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JFW_IND","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Appointment Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Appointment Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Performance Year Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Worker Appointment Association","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CalYr_Connect","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[{"name":"PCs count","expression":"CALCULATE(    count(\u0027Prospect Connects\u0027[Appointment Dimension Surrogate Key]))","isHidden":false},{"name":"PCs distinct count","expression":"CALCULATE(    DISTINCTCOUNT(\u0027Prospect Connects\u0027[Appointment Dimension Surrogate Key]))","isHidden":false}],"source":[{"expression":"let    Source = Sql.Database('dbedwdwprd', 'enterprisedatamart', [Query='select pers_dim.[Source System Key Text] as ThriventId,#(lf)       pers_dim.[First Name] + \u0027 \u0027 + pers_dim.[Last Name] as ClientName,#(lf)       appt_fct.[Worker Appointment Association],#(lf)       appt_fct.[Appointment Dimension Surrogate Key],#(lf)       appt_fct.[Person Dimension Surrogate Key],#(lf)       sum(appt_fct.[Appointment Occurs]) [appt_occurs],#(lf)       max(appt_fct.[Person Occurs]) [Person Occurs],#(lf)       mbr_dim.[Membership Type Description],#(lf)#(tab)   case when appt_dim.[Field User Count] \u003c\u003e 0 and appt_dim.[Appointment Type Code] in (\u0027Connect\u0027,\u0027Gather Data\u0027,\u0027Take Action\u0027,\u0027Strategy Call/Meeting\u0027,\u0027Review\u0027,\u0027Service\u0027,\u0027Discover\u0027,\u0027Deliver\u0027)#(lf)#(tab)#(tab) then 1#(lf)#(tab)#(tab) else 0#(lf)#(tab)   end [JFW_IND],#(lf)       appt_dim.[Appointment Date],#(lf)       case when appt_dim.[Appointment Type Code] in (\u0027Gather Data\u0027) Then \u0027Discover\u0027#(lf)            when appt_dim.[Appointment Type Code] in (\u0027Take Action\u0027) Then \u0027Deliver\u0027#(lf)            when appt_dim.[Appointment Type Code] not in (\u0027Gather Data\u0027,\u0027Take Action\u0027) then Appt_dim.[Appointment Type Description]#(lf)       end as [Appointment Type Code],#(lf)       date_dim.[Calendar Year Name] as [Performance Year Name],#(lf)       org_dim.[Source System Key Text] [EMP_ID],#(lf)       org_dim.[First Name] + \u0027 \u0027 + org_dim.[Last Name] [EMP_NM]#(lf)#(lf)  from EnterpriseDataMart.DM_01.[Appointment Combine Fact] appt_fct left join #(lf)       EnterpriseDataMart.DM_01.[Person Dimension] as Pers_dim#(lf)    on (appt_fct.[Person Dimension Surrogate Key]=pers_dim.[Person Dimension Surrogate Key] and#(lf)        appt_fct.[Person Dimension Version Number] = pers_dim.[Person Dimension Version Number]) left join#(lf)       EnterpriseDataMart.DM_01.[Membership Type Dimension] mbr_dim#(lf)    on (appt_fct.[Membership Type Dimension Surrogate Key]=mbr_dim.[Membership Type Dimension Surrogate Key]) left join#(lf)#(lf)       EnterpriseDataMart.DM_01.[Appointment Dimension] appt_dim#(lf)    on (appt_fct.[Appointment Dimension Surrogate Key]=appt_dim.[Appointment Dimension Surrogate Key]) left join#(lf)#(lf)       EnterpriseDataMart.DM_01.[Date Dimension] date_dim#(lf)    on (appt_dim.[Appointment Date]=date_dim.[Calendar Date Date]) left join#(lf)#(lf)       EnterpriseDataMart.DM_01.[Organization Dimension] org_dim#(lf)    on ((appt_fct.[Appointment Organization Dimension Surrogate Key]=org_dim.[Organization Dimension Surrogate Key]) and #(lf)       ((org_dim.[Effective Begin Date] \u003c= appt_dim.[Appointment Date]) and (appt_dim.[Appointment Date] \u003c= org_dim.[Effective End Date]))) left join#(lf)#(tab) #(lf)       EnterpriseDataMart.DM_01.[SALE_HIER_DIM] sale_hier_dim#(lf)    on ((org_dim.[Source System Key Text]=sale_hier_dim.[SALE_HIER_ID] and#(lf)#(tab)(sale_hier_dim.EFF_BEG_DT\u003c=appt_dim.[Appointment Date]) and#(lf)#(tab)(appt_dim.[Appointment Date]\u003c= sale_hier_dim.EFF_END_DT) and #(lf)#(tab) sale_hier_dim.CURR_ROW_IND = \u0027Y\u0027))#(lf)#(lf)where appt_dim.[Current Row Indicator] = \u0027Y\u0027#(lf)  and appt_dim.[Appointment Create Date Over 14 Days] = \u0027N\u0027#(lf)  and appt_fct.[Person Dimension Surrogate Key] \u003c\u003e 0#(lf)  and appt_fct.[Appointment Status Name] \u003c\u003e \u0027Declined\u0027#(lf)  and appt_dim.[Appointment Type Code] \u003c\u003e \u0027UNK\u0027#(lf)  and sale_hier_dim.ORZN_DEPT_CDE in (\u00270115\u0027,\u00270165\u0027,\u00270190\u0027,\u00270240\u0027,\u00270283\u0027,\u00270291\u0027,\u00270361\u0027,\u00270365\u0027, \u00270383\u0027,\u00270384\u0027,\u00270410\u0027,\u00270435\u0027,\u00270475\u0027,\u00270496\u0027,\u00270525\u0027,\u00270529\u0027,\u00270810\u0027)#(lf) and (org_dim.[Job Type Code] in (\u0027002000\u0027, \u0027002003\u0027, \u0027002008\u0027, \u0027002010\u0027, \u0027002011\u0027, \u0027002012\u0027, \u0027002016\u0027, \u0027002022\u0027, \u0027002024\u0027, \u0027002025\u0027, \u0027002026\u0027, \u0027002027\u0027, \u0027003100\u0027, \u0027003500\u0027)#(lf)  or  org_dim.[Department Identifier] in (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027)) #(lf)  and appt_dim.[Event Result Description] not in (\u0027No Show\u0027,\u0027Cancelled\u0027)#(lf)  and date_dim.[Calendar Year Name] in (\u00272024\u0027)#(lf) #(lf)group by#(lf)  appt_fct.[Worker Appointment Association],#(lf)  appt_fct.[Appointment Dimension Surrogate Key],#(lf)  appt_fct.[Person Dimension Surrogate Key],#(lf)  mbr_dim.[Membership Type Description],#(lf)  appt_dim.[Field User Count],#(lf)  appt_dim.[Appointment Date],#(lf)  appt_dim.[Appointment Type Code],#(lf)  appt_dim.[Appointment Type Description],#(lf)  date_dim.[Calendar Year Name],#(lf)  org_dim.[Source System Key Text],#(lf)  org_dim.[First Name] + \u0027 \u0027 + org_dim.[Last Name],#(lf)  pers_dim.[Source System Key Text],#(lf)  pers_dim.[First Name] + \u0027 \u0027 + pers_dim.[Last Name] #(lf)#(lf)having #(lf)sum(appt_fct.[Appointment Occurs]) \u003e 0#(lf)']),    #'Filtered Rows1' = Table.SelectRows(Source, each ([Worker Appointment Association] = 'Owner')),    #'Filtered Rows' = Table.SelectRows(#'Filtered Rows1', each ([Appointment Type Code] = 'Connect') and ([Membership Type Description] \u003c\u003e 'Benefit')),    #'Changed Type' = Table.TransformColumnTypes(#'Filtered Rows',{{'Appointment Date', type date}, {'ThriventId', Int64.Type}}),    #'Added Custom' = Table.AddColumn(#'Changed Type', 'CalYr_Connect', each Date.Year([Appointment Date])),    #'Changed Type1' = Table.TransformColumnTypes(#'Added Custom',{{'CalYr_Connect', Int64.Type}})in    #'Changed Type1'"}]},{"name":"Dates","isHidden":false,"storageMode":"Import","columns":[{"name":"CAL_DAY_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_END_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_DAY_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_MTH_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_QTR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Prior Sunday","dataType":"String","isHidden":false,"expression":" LOOKUPVALUE(Dates[DTRB_PERF_RPT_WK_END_DT], Dates[DTRB_PERF_RPT_WK_TXT], 'Previous')","columnType":"Calculated"},{"name":"Prior Sunday or Before","dataType":"String","isHidden":false,"expression":"if(\u0027Dates\u0027[CAL_DAY_DT] \u003e Dates[Prior Sunday], 'N', 'Y')","columnType":"Calculated"}],"measures":[],"source":[{"expression":"let    Source = DB2.Database('PODWH021:50000', 'PODWH021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT #(lf)       A.CAL_DAY_DT, #(lf)       A.DTRB_PERF_RPT_WK_END_DT, #(lf)       A.DTRB_PERF_RPT_WK_NBR,#(lf)       A.DTRB_PERF_RPT_YR_NBR,#(lf)       A.DTRB_PERF_RPT_DAY_TXT, #(lf)       A.DTRB_PERF_RPT_MTH_TXT, #(lf)       A.DTRB_PERF_RPT_QTR_TXT, #(lf)       A.DTRB_PERF_RPT_WK_TXT,#(lf)       A.DTRB_PERF_RPT_YR_TXT#(lf)#(lf)FROM COMMON.DTRB_PERF_DATES  AS A#(lf)#(lf)WHERE A.DTRB_PERF_RPT_YR_NBR IN (2024)']),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'CAL_DAY_DT', type date}, {'DTRB_PERF_RPT_WK_END_DT', type date}})in    #'Changed Type'"}]},{"name":"Referrals","isHidden":false,"storageMode":"Import","columns":[{"name":"CIF_ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"REFERRAL_CLIENT_NAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"REFR_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"REFERRAL_OCCURS","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee Display Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PERS_DIM_SK","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'select a.''Person Dimension Surrogate Key'' as PERS_DIM_SK,#(lf)       e.''Source System Key Text'' as CIF_ID,#(lf)       e.''First Name''||\u0027 \u0027||e.''Last Name'' as Referral_Client_Name,#(lf)       a.''Referral Date'' as REFR_DT,#(lf)       sum(a.''Occurs'') as Referral_Occurs,#(lf)       c.''Source System Key Text'' as EMP_ID,#(lf)       c.''Last Name''||\u0027, \u0027||c.''First Name'' as ''Employee Display Name''#(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Referral Fact'' a left join #(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Distribution Performance Dates Dimension'' b#(lf)    on a.''Referral Date'' = b.''Calendar Day Date'' left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' c#(lf)    on ((a.''Referral Organization Dimension Surrogate Key'' = c.''Organization Dimension Surrogate Key'' ) and #(lf)        (a.''Referral Organization Dimension Version Number'' = c.''Organization Dimension Version Number'')) left join#(lf)        ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' d#(lf)    on ((d.''Effective Begin Date'' \u003c= a.''Referral Date'') and #(lf)        (a.''Referral Date'' \u003c= dateadd(day,-1,d.''Effective End Date'')) and d.''Current Row Indicator'' = \u0027Y\u0027 and#(lf)        c.''Source System Key Text'' = d.''Sales Hierarchy Identifier'') left join#(lf)        ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Person Dimension'' e#(lf)    on ((a.''Person Dimension Surrogate Key'' = e.''Person Dimension Surrogate Key'') and (a.''Person Dimension Verison Number'' = e.''Person Dimension Version Number''))    #(lf)  where a.''Person Dimension Surrogate Key'' \u003c\u003e 0#(lf)    and d.''Organization Department Code'' in (\u00270115\u0027,\u00270165\u0027,\u00270190\u0027,\u00270240\u0027,\u00270283\u0027,\u00270291\u0027,\u00270361\u0027,\u00270365\u0027,\u00270383\u0027,\u00270384\u0027,\u00270410\u0027,\u00270435\u0027,\u00270475\u0027,\u00270496\u0027,\u00270525\u0027,\u00270529\u0027,\u00270810\u0027)#(lf)    and (c.''Job Type Code'' in (\u0027002000\u0027, \u0027002003\u0027, \u0027002008\u0027, \u0027002010\u0027, \u0027002011\u0027, \u0027002012\u0027, \u0027002016\u0027, \u0027002022\u0027, \u0027002024\u0027, \u0027002025\u0027, \u0027002026\u0027, \u0027002027\u0027, \u0027003100\u0027, \u0027003500\u0027)#(lf)     or  c.''Department Identifier'' in (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027))  #(lf)    and b.''Distribution Performance Reporting Year Number'' in (2024)#(lf)    --and c.''Source System Key Text'' = \u0027TS58326\u0027#(lf)  group by a.''Person Dimension Surrogate Key'',#(lf)           e.''Source System Key Text'',#(lf)           e.''First Name''||\u0027 \u0027||e.''Last Name'',#(lf)           a.''Referral Date'',#(lf)           c.''Source System Key Text'',#(lf)           c.''Last Name''||\u0027, \u0027||c.''First Name''#(lf) having sum(a.''Occurs'') \u003e 0', null, [EnableFolding=true]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'CIF_ID', Int64.Type}}),    #'Sorted Rows' = Table.Buffer(Table.Sort(#'Changed Type',{{'REFR_DT', Order.Descending}})),    #'Removed Duplicates' = Table.Distinct(#'Sorted Rows', {'CIF_ID'})in    #'Removed Duplicates'"}]},{"name":"Merge Detail","isHidden":false,"storageMode":"Import","columns":[{"name":"CIF_ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"REFERRAL_CLIENT_NAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"REFR_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"REFERRAL_OCCURS","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee Display Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Connect within Incentive Period","dataType":"String","isHidden":false,"expression":"-- ** IMPORTANT ** Update incentive start \u0026 end dates at the beginning of each new round--Round 1: 2/12/24-5/5/24--Round 2: 5/6/24-8/4/24--Round 3: 8/5/24-12/29/24var incentive_start_dt = \u0027Merge Detail\u0027[Incentive Period Start Date]var incentive_end_dt = \u0027Merge Detail\u0027[Incentive Period End Date]var connect_dt = \u0027Merge Detail\u0027[Prospect Connects.Appointment Date]returnif(ISBLANK(connect_dt), '', if(\u0027Merge Detail\u0027[Prospect Connects.Appointment Date] \u003e= incentive_start_dt \u0026\u0026 \u0027Merge Detail\u0027[Prospect Connects.Appointment Date] \u003c= incentive_end_dt, 'Y', 'N'))","columnType":"Calculated"},{"name":"Referrals Led to Connects","dataType":"String","isHidden":false,"expression":"var total = if(\u0027Merge Detail\u0027[Connect within Incentive Period] = 'Y', 1, 0)return(if(ISBLANK(total),0,total))","columnType":"Calculated"},{"name":"Prospect Connects.ThriventId","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Prospect Connects.ClientName","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Prospect Connects.Worker Appointment Association","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Prospect Connects.Appointment Dimension Surrogate Key","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Prospect Connects.Person Dimension Surrogate Key","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Prospect Connects.appt_occurs","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Prospect Connects.Person Occurs","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Prospect Connects.Membership Type Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Prospect Connects.JFW_IND","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Prospect Connects.Appointment Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Prospect Connects.Appointment Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Prospect Connects.Performance Year Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Prospect Connects.EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Prospect Connects.EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Prior Sunday or Before - Referrals","dataType":"String","isHidden":false,"expression":"if(\u0027Merge Detail\u0027[REFR_DT] \u003e \u0027Merge Detail\u0027[Prior Sunday Date], 'N', 'Y')","columnType":"Calculated"},{"name":"Prior Sunday Date","dataType":"String","isHidden":false,"expression":" LOOKUPVALUE(Dates[DTRB_PERF_RPT_WK_END_DT], Dates[DTRB_PERF_RPT_WK_TXT], 'Previous')","columnType":"Calculated"},{"name":"Prior Sunday or Before - Connects","dataType":"String","isHidden":false,"expression":"if(\u0027Merge Detail\u0027[Prospect Connects.Appointment Date] \u003e \u0027Merge Detail\u0027[Prior Sunday Date], 'N', 'Y')","columnType":"Calculated"},{"name":"Incentive Period Start Date","dataType":"String","isHidden":false,"expression":"-- ** IMPORTANT ** Update incentive start \u0026 end dates at the beginning of each new round--Round 1: 2/12/24-5/5/24--Round 2: 5/6/24-8/4/24--Round 3: 8/5/24-12/29/24date(2024,2,12)","columnType":"Calculated"},{"name":"Incentive Period End Date","dataType":"String","isHidden":false,"expression":"-- ** IMPORTANT ** Update incentive start \u0026 end dates at the beginning of each new round--Round 1: 2/12/24-5/5/24--Round 2: 5/6/24-8/4/24--Round 3: 8/5/24-12/29/24date(2024,5,5)","columnType":"Calculated"},{"name":"Text box - Incentive period","dataType":"String","isHidden":false,"expression":"'Incentive period: ' \u0026 \u0027Merge Detail\u0027[Incentive Period Start Date] \u0026 ' - ' \u0026 \u0027Merge Detail\u0027[Incentive Period End Date]","columnType":"Calculated"},{"name":"Text box - Data as of","dataType":"String","isHidden":false,"expression":"'Data as of ' \u0026 \u0027Merge Detail\u0027[Prior Sunday Date]","columnType":"Calculated"},{"name":"PERS_DIM_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Min connect date equal to connect date","dataType":"String","isHidden":false,"expression":"if(ISBLANK(\u0027Merge Detail\u0027[Prospect Connects.Appointment Date]), 'Y',if(\u0027Merge Detail\u0027[Prospect Connects.Appointment Date] = [Min connect date], 'Y', 'N'))","columnType":"Calculated"},{"name":"Prior Sunday or before (connect or referral)","dataType":"String","isHidden":false,"expression":"if(or(\u0027Merge Detail\u0027[Prior Sunday or Before - Connects] = 'Y', \u0027Merge Detail\u0027[Prior Sunday or Before - Referrals] = 'Y'), 'Y', 'N') ","columnType":"Calculated"},{"name":"TAG","dataType":"String","isHidden":false,"expression":"RELATED(Producer_Snowflake[TAG])","columnType":"Calculated"}],"measures":[{"name":"Rank within Tenure Group \u0026 TAG","expression":"CALCULATE(    RANKX(ALLSELECTED(Producer_Snowflake[EMP_ID]), [YTD Referrals Led to Connects], , DESC),    all(Producer_Snowflake[EMP_NM]),    all(Producer_Snowflake[MVP with Leader]),    all(Producer_Snowflake[MARKET]),    ALL(Producer_Snowflake[Market with Leader]),    all(Producer_Snowflake[Team Purpose Description]),    all(Producer_Snowflake[Team Name]))","isHidden":false},{"name":"YTD Referrals","expression":"var total=  CALCULATE    (DISTINCTCOUNT(\u0027Merge Detail\u0027[CIF_ID]),    \u0027Merge Detail\u0027[Prior Sunday or Before - Referrals] = 'Y')ReturnIF(ISBLANK(total),0,total)","isHidden":false},{"name":"Conversion Rate","expression":"iferror([YTD Referrals Led to Connects] / [YTD Referrals], 'N/A')","isHidden":false},{"name":"YTD Referrals Led to Connects","expression":"var __measure =     CALCULATE(        [Number of Min \u0026 Max Connect Dates Rows with Connect within Incentive Period NEW]        , Dates[Prior Sunday or Before] = 'Y'    )return__measure + 0","isHidden":false},{"name":"Min connect date","expression":"var CIF_ID = min(\u0027Merge Detail\u0027[Prospect Connects.ThriventId])var min_date =MINX(FILTER(all(\u0027Merge Detail\u0027), \u0027Merge Detail\u0027[Prospect Connects.ThriventId] = CIF_ID), \u0027Merge Detail\u0027[Prospect Connects.Appointment Date])returnIF(ISBLANK(CIF_ID),' ',min_date)","isHidden":false},{"name":"Min connect date new","expression":"IF(ISBLANK([Min connect date]), '', [Min connect date])","isHidden":false},{"name":"Top 2 Individuals","expression":"var GetIndividuals = VALUES(Producer_Snowflake[EMP_NM])returnCALCULATE([YTD Referrals Led to Connects - INCORRECT],TOPN(2, ALLSELECTED(Producer_Snowflake[EMP_NM]), [YTD Referrals Led to Connects - INCORRECT]), GetIndividuals)--TOPN(2, ALLSELECTED(Producer_Snowflake[EMP_NM]), [YTD Referrals Led to Connects]), GetIndividuals)","isHidden":false},{"name":"Rank for Top Individuals","expression":"CALCULATE(    RANKX(ALLSELECTED(Producer_Snowflake[EMP_NM]), [YTD Referrals Led to Connects - INCORRECT], , DESC),    --all(Producer_Snowflake[EMP_NM]),    all(Producer_Snowflake[MVP with Leader]),    all(Producer_Snowflake[MARKET]),    ALL(Producer_Snowflake[Market with Leader]),    all(Producer_Snowflake[Team Purpose Description]),    all(Producer_Snowflake[Team Name]))","isHidden":false},{"name":"YTD Referrals Led to Connects - INCORRECT","expression":"var total =    CALCULATE(        sum(\u0027Merge Detail\u0027[Referrals Led to Connects]),        \u0027Merge Detail\u0027[Prospect Connects.Appointment Date] \u003c= \u0027Merge Detail\u0027[Prior Sunday Date])returnif(ISBLANK(total),0,total)","isHidden":false},{"name":"Number of Min \u0026 Max Connect Dates Rows with Connect within Incentive Period NEW","expression":"var __keys_Person = VALUES( Referrals[PERS_DIM_SK] )var __keys_Date = VALUES( Dates[CAL_DAY_DT] )var __rows_ConnectWithinIncentivePeriod =     CALCULATE(        COUNTROWS( \u0027Min \u0026 Max Connect Dates\u0027 )        , \u0027Min \u0026 Max Connect Dates\u0027[Connect within Incentive Period NEW] = 'Y'        , \u0027Min \u0026 Max Connect Dates\u0027[Person Dimension Surrogate Key] IN __keys_Person        , \u0027Min \u0026 Max Connect Dates\u0027[Connect Date to Use] IN __keys_Date    )return__rows_ConnectWithinIncentivePeriod","isHidden":false}],"source":[{"expression":"let    Source = Table.NestedJoin(Referrals, {'CIF_ID'}, #'Prospect Connects', {'ThriventId'}, 'Prospect Connects', JoinKind.LeftOuter),    #'Expanded Prospect Connects' = Table.ExpandTableColumn(Source, 'Prospect Connects', {'ThriventId', 'ClientName', 'Worker Appointment Association', 'Appointment Dimension Surrogate Key', 'Person Dimension Surrogate Key', 'appt_occurs', 'Person Occurs', 'Membership Type Description', 'JFW_IND', 'Appointment Date', 'Appointment Type Code', 'Performance Year Name', 'EMP_ID', 'EMP_NM'}, {'Prospect Connects.ThriventId', 'Prospect Connects.ClientName', 'Prospect Connects.Worker Appointment Association', 'Prospect Connects.Appointment Dimension Surrogate Key', 'Prospect Connects.Person Dimension Surrogate Key', 'Prospect Connects.appt_occurs', 'Prospect Connects.Person Occurs', 'Prospect Connects.Membership Type Description', 'Prospect Connects.JFW_IND', 'Prospect Connects.Appointment Date', 'Prospect Connects.Appointment Type Code', 'Prospect Connects.Performance Year Name', 'Prospect Connects.EMP_ID', 'Prospect Connects.EMP_NM'})in    #'Expanded Prospect Connects'"}]},{"name":"Role Level Security","isHidden":false,"storageMode":"Import","columns":[{"name":"EMPLOYEE_TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMPLOYEE_EMAIL","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"REPORT_TO_EMAIL","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"REPORT_TO_TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"WRKR_RPT_HIER_SRC_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTL_DATA_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SFRC_TEAM_PRPS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RSA_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RSA_TEAM_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SFRC_TEAM_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CRET_USER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CRET_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"LST_UPDT_USER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LST_UPDT_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Department Number","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"AD Group","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = PowerBI.Dataflows([]),    #'f7efdfeb-73c5-4a9b-ab78-f9370190eded' = Source{[workspaceId='f7efdfeb-73c5-4a9b-ab78-f9370190eded']}[Data],    #'a9b06e96-a67b-4f28-b939-3e1ca1047bd2' = #'f7efdfeb-73c5-4a9b-ab78-f9370190eded'{[dataflowId='a9b06e96-a67b-4f28-b939-3e1ca1047bd2']}[Data],    #'Role Level Security1' = #'a9b06e96-a67b-4f28-b939-3e1ca1047bd2'{[entity='Role Level Security']}[Data],    #'Filtered Rows' = Table.SelectRows(#'Role Level Security1',  each ([AD Group] = 'PBI_FLD_RPTG_COE' or [AD Group] = 'PBI_FLD_RPTG_FR' or [AD Group] = 'PBI_FLD_RPTG_HO' or [AD Group] = 'PBI_FLD_RPTG_LDR' or [AD Group] = 'PBI_FLD_RPTG_LDRSTF' or [AD Group] = 'PBI_FLD_RPTG_RFOSTF' or [AD Group] = 'PBI_FLD_RPTG_TFGT')),    #'Removed Columns' = Table.RemoveColumns(#'Filtered Rows',{'EMPLOYEE_SK', 'REPORT_TO_SK', 'Department Name', 'HO_Email'}),    #'Add Custom' = Table.AddColumn(#'Removed Columns', 'Custom', each if ([AD Group] = 'PBI_FLD_RPTG_HO' and ([EMPLOYEE_TSID]=[REPORT_TO_TSID])) then 1 else if ([AD Group] = 'PBI_FLD_RPTG_HO' and ([EMPLOYEE_TSID] \u003c\u003e [REPORT_TO_TSID])) then 0else if [AD Group] \u003c\u003e 'PBI_FLD_RPTG_HO' then 1 else 2),    #'Filtered Rows2' = Table.SelectRows(#'Add Custom', each ([Custom] = 1)),    #'Removed Columns1' = Table.RemoveColumns(#'Filtered Rows2',{'Custom'}),    #'Replaced Value' = Table.ReplaceValue(#'Removed Columns1','115','0115',Replacer.ReplaceValue,{'Department Number'}),    #'Replaced Value1' = Table.ReplaceValue(#'Replaced Value','291','0291',Replacer.ReplaceValue,{'Department Number'}),    #'Replaced Value2' = Table.ReplaceValue(#'Replaced Value1','361','0361',Replacer.ReplaceValue,{'Department Number'}),    #'Replaced Value3' = Table.ReplaceValue(#'Replaced Value2','435','0435',Replacer.ReplaceValue,{'Department Number'}),    #'Replaced Value4' = Table.ReplaceValue(#'Replaced Value3','525','0525',Replacer.ReplaceValue,{'Department Number'})in    #'Replaced Value4'"}]},{"name":"Merge Detail (2)","isHidden":false,"storageMode":"Import","columns":[{"name":"PERS_DIM_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CIF_ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"REFERRAL_CLIENT_NAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"REFR_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"REFERRAL_OCCURS","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee Display Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Prospect Connects.ThriventId","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Prospect Connects.ClientName","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Prospect Connects.Worker Appointment Association","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Prospect Connects.Appointment Dimension Surrogate Key","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Prospect Connects.Person Dimension Surrogate Key","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Prospect Connects.appt_occurs","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Prospect Connects.Person Occurs","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Prospect Connects.Membership Type Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Prospect Connects.JFW_IND","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Prospect Connects.Appointment Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Prospect Connects.Appointment Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Prospect Connects.Performance Year Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Prospect Connects.EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Prospect Connects.EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Connect within Incentive Period (2)","dataType":"String","isHidden":false,"expression":"-- ** IMPORTANT ** Update incentive start \u0026 end dates at the beginning of each new round--Round 1: 2/12/24-5/5/24--Round 2: 5/6/24-8/4/24--Round 3: 8/5/24-12/29/24var incentive_start_dt = \u0027Merge Detail (2)\u0027[Incentive Period Start Date (2)]var incentive_end_dt = \u0027Merge Detail (2)\u0027[Incentive Period End Date (2)]var connect_dt = \u0027Merge Detail (2)\u0027[Prospect Connects.Appointment Date]returnif(ISBLANK(connect_dt), '', if(\u0027Merge Detail (2)\u0027[Prospect Connects.Appointment Date] \u003e= incentive_start_dt \u0026\u0026 \u0027Merge Detail (2)\u0027[Prospect Connects.Appointment Date] \u003c= incentive_end_dt, 'Y', 'N'))","columnType":"Calculated"},{"name":"Incentive Period End Date (2)","dataType":"String","isHidden":false,"expression":"-- ** IMPORTANT ** Update incentive start \u0026 end dates at the beginning of each new round--Round 1: 2/12/24-5/5/24--Round 2: 5/6/24-8/4/24--Round 3: 8/5/24-12/29/24date(2024,5,5)","columnType":"Calculated"},{"name":"Incentive Period Start Date (2)","dataType":"String","isHidden":false,"expression":"-- ** IMPORTANT ** Update incentive start \u0026 end dates at the beginning of each new round--Round 1: 2/12/24-5/5/24--Round 2: 5/6/24-8/4/24--Round 3: 8/5/24-12/29/24date(2024,2,12)","columnType":"Calculated"},{"name":"Min connect date equal to connect date (2)","dataType":"String","isHidden":false,"expression":"if(ISBLANK(\u0027Merge Detail (2)\u0027[Prospect Connects.Appointment Date]), 'Y',if(\u0027Merge Detail (2)\u0027[Prospect Connects.Appointment Date] = [Min connect date (2)], 'Y', 'N'))","columnType":"Calculated"},{"name":"Prior Sunday Date (2)","dataType":"String","isHidden":false,"expression":" LOOKUPVALUE(\u0027Dates (2)\u0027[DTRB_PERF_RPT_WK_END_DT], \u0027Dates (2)\u0027[DTRB_PERF_RPT_WK_TXT], 'Previous')","columnType":"Calculated"},{"name":"Prior Sunday or Before - Connects (2)","dataType":"String","isHidden":false,"expression":"if(\u0027Merge Detail (2)\u0027[Prospect Connects.Appointment Date] \u003e \u0027Merge Detail (2)\u0027[Prior Sunday Date (2)], 'N', 'Y')","columnType":"Calculated"},{"name":"Prior Sunday or Before - Referrals (2)","dataType":"String","isHidden":false,"expression":"if(\u0027Merge Detail (2)\u0027[REFR_DT] \u003e \u0027Merge Detail (2)\u0027[Prior Sunday Date (2)], 'N', 'Y')","columnType":"Calculated"},{"name":"Prior Sunday or before (connect or referral) (2)","dataType":"String","isHidden":false,"expression":"if(or(\u0027Merge Detail (2)\u0027[Prior Sunday or Before - Connects (2)] = 'Y', \u0027Merge Detail (2)\u0027[Prior Sunday or Before - Referrals (2)] = 'Y'), 'Y', 'N') ","columnType":"Calculated"}],"measures":[{"name":"Min connect date (2)","expression":"var CIF_ID = min(\u0027Merge Detail (2)\u0027[Prospect Connects.ThriventId])var min_date =MINX(FILTER(all(\u0027Merge Detail (2)\u0027), \u0027Merge Detail (2)\u0027[Prospect Connects.ThriventId] = CIF_ID), \u0027Merge Detail (2)\u0027[Prospect Connects.Appointment Date])returnIF(ISBLANK(CIF_ID),' ',min_date)","isHidden":false}],"source":[{"expression":"let    Source = Table.NestedJoin(Referrals, {'CIF_ID'}, #'Prospect Connects', {'ThriventId'}, 'Prospect Connects', JoinKind.LeftOuter),    #'Expanded Prospect Connects' = Table.ExpandTableColumn(Source, 'Prospect Connects', {'ThriventId', 'ClientName', 'Worker Appointment Association', 'Appointment Dimension Surrogate Key', 'Person Dimension Surrogate Key', 'appt_occurs', 'Person Occurs', 'Membership Type Description', 'JFW_IND', 'Appointment Date', 'Appointment Type Code', 'Performance Year Name', 'EMP_ID', 'EMP_NM'}, {'Prospect Connects.ThriventId', 'Prospect Connects.ClientName', 'Prospect Connects.Worker Appointment Association', 'Prospect Connects.Appointment Dimension Surrogate Key', 'Prospect Connects.Person Dimension Surrogate Key', 'Prospect Connects.appt_occurs', 'Prospect Connects.Person Occurs', 'Prospect Connects.Membership Type Description', 'Prospect Connects.JFW_IND', 'Prospect Connects.Appointment Date', 'Prospect Connects.Appointment Type Code', 'Prospect Connects.Performance Year Name', 'Prospect Connects.EMP_ID', 'Prospect Connects.EMP_NM'})in    #'Expanded Prospect Connects'"}]},{"name":"Advisors RLS","isHidden":false,"storageMode":"Import","columns":[{"name":"Advisor Name","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"Advisor Group","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"Market","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"MVP","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"Advisor Tenure","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"TAG","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"}],"measures":[],"source":[{"expression":"   SELECTCOLUMNS(\u0027Producer_Snowflake\u0027,'Advisor Name', \u0027Producer_Snowflake\u0027[EMP_NM],                  'EMP_ID',\u0027Producer_Snowflake\u0027[EMP_ID],                  'Advisor Group', \u0027Producer_Snowflake\u0027[Advisor Group],                  'Market', \u0027Producer_Snowflake\u0027[Market with Leader],                  'MVP', \u0027Producer_Snowflake\u0027[MVP with Leader],                  'Advisor Tenure', \u0027Producer_Snowflake\u0027[TENURE_GROUP],                  'TAG', \u0027Producer_Snowflake\u0027[TAG])"}]},{"name":"Producer_Snowflake (2)","isHidden":false,"storageMode":"Import","columns":[{"name":"SALE_HIER_DIM_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EMP_DIM_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SALE_HIER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Advisor Group","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ZONE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MARKET","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FILTER_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MARKET_NUMBER","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MARKET_LEADERS","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP Leader","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RPT_TO_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Report to Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Adjusted Service Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TENURE","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TENURE_GROUP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SFC_FC","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FR_SEGMENT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"GNDR_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LST_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FRST_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MDDL_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ASSIGNED_AFA","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"OP_COUNT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Conference Qualification Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team Purpose Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee Team Role Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Credentials","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"License","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Conference Qualification","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team Purpose Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market with Leader","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP with Leader","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TeamAdvisor_HlthRpt","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team Indicator","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Advisor Group Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Tenure (NFA1-4, Vet) (2)","dataType":"String","isHidden":false,"expression":"if(\u0027Producer_Snowflake (2)\u0027[TAG] = '0383', '',if(\u0027Producer_Snowflake (2)\u0027[TENURE_GROUP] in {'NFR1', 'NFR2', 'NFR3', 'NFR4', 'NFA1', 'NFA2', 'NFA3', 'NFA4'}, 'NFA1-4',if(\u0027Producer_Snowflake (2)\u0027[TENURE_GROUP] in {'VET5', 'VET6', 'VET7', 'VET8+', 'VETFR'}, 'Vet','Other')))","columnType":"Calculated"},{"name":"Advisor Group Name 2 (2)","dataType":"String","isHidden":false,"expression":"if(\u0027Producer_Snowflake (2)\u0027[Advisor Group Name] = '0383-Virtual Advice Leadership', '0383-Virtual Advice', \u0027Producer_Snowflake (2)\u0027[Advisor Group Name])","columnType":"Calculated"}],"measures":[],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'select distinct b.''Sales Hierarchy Dimension Surrogate Key'' as SALE_HIER_DIM_SK,#(lf)       a.''Workforce Dimension Detail Surrogate Key'' as EMP_DIM_SK,#(lf)       a.''Employee Identifier'' as EMP_ID,#(lf)       b.''Sales Hierarchy Identifier'' as SALE_HIER_ID,#(lf)       --a.''Employee Name'' as EMP_NM,#(lf)       case when a.''Employee Name'' = \u0027Johnson,Christopher\u0027 then a.''Last Name''||\u0027,\u0027||a.''Nick Name''#(lf)            when a.''Employee Name'' = \u0027Parker,David\u0027 and a.''Employee Identifier'' = \u0027TS83655\u0027 then a.''Last Name''||\u0027,\u0027||a.''First Name''||\u0027 C.\u0027#(lf)            when a.''Employee Identifier'' = \u0027TS54638\u0027 then a.''Last Name''||\u0027,\u0027||a.''Nick Name''#(lf)            when a.''Employee Identifier'' = \u0027TS11184\u0027 then a.''Last Name''||\u0027,\u0027||a.''Nick Name''#(lf)            when a.''Employee Identifier'' = \u0027TS80048\u0027 then a.''Last Name''||\u0027,\u0027||a.''Nick Name''#(lf)         else a.''Employee Name''#(lf)       end as EMP_NM,       #(lf)       aa.''Job Type Code'' as JOB_TYP_CDE,#(lf)       aa.''Job Type Description'' as JOB_TYP_DSCR,#(lf)       case when a.''Organization Department Code'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027) then \u00270383\u0027#(lf)         else a.''Organization Department Code''#(lf)       end as TAG,#(lf)       case when aa.''Department Identifier'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027) then \u0027Virtual Advice\u0027#(lf)         else aa.''Department Name''#(lf)       end as ''TAG Name'',#(lf)       case when aa.''Department Identifier'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027) then \u00270383-Virtual Advice\u0027#(lf)         else a.''Organization Department Code''||\u0027-\u0027||aa.''Department Name''#(lf)       end as ''Advisor Group'',#(lf)       (substr(b.''Organization Zone Code'',6,2))   AS ZONE,#(lf)       b.''Organization Zone Code'' as Market,#(lf)       case when substr(b.''Organization Zone Code'',9,2) = \u002798\u0027 then \u0027NPG - market 98\u0027#(lf)            when substr(b.''Organization Zone Code'',9,2) = \u002799\u0027 then \u0027NPG - market 99\u0027#(lf)            when substr(b.''Organization Zone Code'',9,2) = \u002759\u0027 then \u0027PMC - market 59\u0027#(lf)            when substr(b.''Organization Zone Code'',9,2) = \u002701\u0027 then \u0027PMC - market 01\u0027#(lf)            when substr(b.''Organization Zone Code'',9,2) = \u002769\u0027 then \u0027GPA - market 69\u0027#(lf)            when Substr(b.''Organization Zone Code'',9,2) = \u002779\u0027 then \u0027GPD - market 79\u0027#(lf)            when substr(b.''Organization Zone Code'',9,2) = \u002789\u0027 then \u0027PPC - market 89\u0027#(lf)       end as Filter_Ind,  #(lf)       substr(b.''Organization Zone Code'',9,2) as Market_Number,               #(lf)       zz4.market_leaders,#(lf)       c.''Sub Department Identifier'' as MVP_ID,#(lf)       zz3.''MVP Leader'', #(lf)       c.''Report to ID'' as RPT_TO_ID,#(lf)       cc.''First Name''||\u0027 \u0027||cc.''Last Name'' as ''Report to Name'',#(lf)       a.''Adjusted Service Date'',#(lf)     --  c.''Financial Professional Tenure'' as Tenure,#(lf)     --  c.''Financial Professional Tenure Group'' as Tenure_Group,#(lf)      case when a.''Organization Department Code'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00270383\u0027) then  datediff(\u0027days\u0027, a.''Employee Service Date'',current_date())/365.25 #(lf)            else c.''Financial Professional Tenure''#(lf)       end as Tenure,     #(lf)       case when zzzz.TENUREGRPxx = \u0027NA\u0027 and zzzz.Tenure \u003e 4 then \u0027VETFR\u0027#(lf)            when zzzz.TENUREGRPxx = \u0027NA\u0027 and (zzzz.Tenure \u003e= 3 and zzzz.Tenure \u003c 4) then \u0027NFA4\u0027#(lf)            when zzzz.TENUREGRPxx = \u0027NA\u0027 and (zzzz.Tenure \u003e= 2 and zzzz.Tenure \u003c 3) then \u0027NFA3\u0027#(lf)            when zzzz.TENUREGRPxx = \u0027NA\u0027 and (zzzz.Tenure \u003e= 1 and zzzz.Tenure \u003c 2) then \u0027NFA2\u0027#(lf)            when zzzz.TENUREGRPxx = \u0027NA\u0027 and (zzzz.Tenure \u003c 1) then \u0027NFA1\u0027#(lf)            else c.''Financial Professional Tenure Group''#(lf)        end as Tenure_Group,#(lf)       case when a.''Senior Financial Consultant Indicator'' = \u0027Y\u0027 then \u0027SFC\u0027#(lf)#(tab)        when a.''Financial Consultant Indicator'' = \u0027Y\u0027 then \u0027FC\u0027#(lf)#(tab)        when a.''Wealth Advisor Indicator'' = \u0027Y\u0027 then \u0027WA\u0027#(lf)#(tab)   end as SFC_FC,#(lf)       (case when a.''Senior Financial Consultant Indicator'' = \u0027Y\u0027 then \u0027SFC\u0027#(lf)             when a.''Financial Consultant Indicator'' = \u0027Y\u0027 then \u0027FC\u0027#(lf)             when a.''Wealth Advisor Indicator'' = \u0027Y\u0027 then \u0027WA\u0027#(lf)             when a.''Job Type Code'' in (\u0027002003\u0027,\u0027002018\u0027,\u0027002019\u0027) then A.''Job Type Description''#(lf)             when a.''Job Type Code'' = \u0027002016\u0027 then a.''Job Type Description''#(lf)             when ((a.''Senior Financial Consultant Indicator'' = \u0027N\u0027 or a.''Financial Consultant Indicator'' = \u0027N\u0027) and #(lf)                    c.''Financial Professional Tenure'' \u003e= 4 and #(lf)                    a.''Job Type Code'' in (\u0027002000\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027003602\u0027,\u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027))#(lf)                      then \u0027VETFR\u0027#(lf)             when c.''Financial Professional Tenure'' \u003e= 3 and c.''Financial Professional Tenure'' \u003c 4  and   #(lf)                  a.''Job Type Code'' in (\u0027002000\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027003602\u0027,\u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027)#(lf)                      then \u0027NFR4\u0027#(lf)             when c.''Financial Professional Tenure'' \u003e= 2 and c.''Financial Professional Tenure'' \u003c 3  and   #(lf)                  a.''Job Type Code'' in (\u0027002000\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027003602\u0027,\u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027)#(lf)                      then \u0027NFR3\u0027#(lf)             when c.''Financial Professional Tenure'' \u003e= 1 and c.''Financial Professional Tenure'' \u003c 2  and   #(lf)                  a.''Job Type Code'' in (\u0027002000\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027003602\u0027,\u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027)#(lf)                      then \u0027NFR2\u0027 #(lf)             when c.''Financial Professional Tenure'' \u003e= 0 and c.''Financial Professional Tenure'' \u003c 1  and   #(lf)                  a.''Job Type Code'' in (\u0027002000\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027003602\u0027,\u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027)#(lf)                      then \u0027NFR1\u0027 #(lf)        end) as FR_SEGMENT,#(lf)        trim(concat_ws(\u0027 \u0027,dd.CHFC_DSGT_CDE,dd.CLF_DSGT_CDE,dd.CLU_DSGT_CDE,dd.CFA_DSGT_CDE,dd.CFP_DSGT_CDE,dd.FIC_DSGT_CDE,dd.FICF_DSGT_CDE,dd.LUTCF_DSGT_CDE)) AS Credentialsxx,#(lf)        concat_ws(\u0027 \u0027,dd.S1_LIC_STS_CDE,dd.S4_LIC_STS_CDE,dd.S6_LIC_STS_CDE,dd.S7_LIC_STS_CDE,dd.S9_LIC_STS_CDE,#(lf)        dd.S10_LIC_STS_CDE,dd.S22_LIC_STS_CDE,dd.S24_LIC_STS_CDE,dd.S26_LIC_STS_CDE,dd.S27_LIC_STS_CDE,#(lf)        dd.S51_LIC_STS_CDE,dd.S53_LIC_STS_CDE,dd.S62_LIC_STS_CDE,dd.S63_LIC_STS_CDE,dd.S65_LIC_STS_CDE,#(lf)        dd.S66_LIC_STS_CDE,dd.S86_LIC_STS_CDE,dd.S87_LIC_STS_CDE) as Licensesxx,  #(lf)          #(lf)       a.''Gender Code'' as GNDR_CDE, #(lf)       a.''Last Name'' as LST_NM, #(lf)       case when a.''Nick Name'' IN (\u0027 \u0027) then a.''First Name''#(lf)         else a.''Nick Name''#(lf)       end as FRST_NM, #(lf)       a.''Middle Name'' as MDDL_NM,#(lf)       xx.assigned_afa,#(lf)       case when zz.opcount is NULL then 0 #(lf)         else zz.opcount#(lf)       end as OP_Count,#(lf)       aa.''Conference Qualification Type Code'',#(lf)       zzz.''Team Identifier'',#(lf)       zzz.''Team Name'',#(lf)       zzz.''Team Purpose Code'',#(lf)       zzz.''Employee Team Role Code''#(lf)       #(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' a inner join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' as aa#(lf)    on (a.''Employee Identifier''=aa.''Source System Key Text'' and aa.''Current Row Indicator'' = \u0027Y\u0027)  left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' b #(lf)    on (a.''Employee Identifier''= b.''Sales Hierarchy Identifier'') left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' c #(lf)    on (a.''Employee Identifier''= c.''Source System Key Text'' AND c.''Current Row Indicator'' = \u0027Y\u0027) left join#(lf)       (select az.''Employee Identifier'',#(lf)               case when az.''Organization Department Code'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00270383\u0027) then  datediff(\u0027days\u0027, az.''Employee Service Date'',current_date())/365.25 #(lf)                    else cz.''Financial Professional Tenure''#(lf)               end as Tenure,#(lf)               cz.''Financial Professional Tenure Group''  as TENUREGRPxx             #(lf)          from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' az inner join#(lf)               ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' cz #(lf)           on (az.''Employee Identifier''= cz.''Source System Key Text'' AND cz.''Current Row Indicator'' = \u0027Y\u0027)) as zzzz#(lf)     on a.''Employee Identifier''=zzzz.''Employee Identifier'' left join     #(lf)   ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' cc #(lf)    on (c.''Report to ID''= cc.''Source System Key Text'' AND cc.''Current Row Indicator'' = \u0027Y\u0027) left join  #(lf)        (select d.''Employee Identifier'',#(lf)                (case when \u0027Y\u0027 = d.''Chartered Financial Consultant Designation Code'' THEN \u0027ChFC\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS CHFC_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Chartered Leadership Fellow Designation Code'' THEN \u0027CLF\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS CLF_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Chartered Life Underwriter Designation Code'' THEN \u0027CLU\u0027#(lf)                   else \u0027 \u0027 #(lf)                 end) AS CLU_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Chartered Financial Analyst Designation Code'' THEN \u0027CFA\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS CFA_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Fraternal Insurance Counselor Designation Code'' THEN \u0027FIC\u0027#(lf)                   else \u0027 \u0027 #(lf)                 end) AS FIC_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Fraternal Insurance Counselor Fellow Designation Code'' THEN \u0027FICF\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS FICF_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Certified Financial Planner Designation Code'' THEN \u0027CFP\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS CFP_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Life Underwriter Training Counsel Fellow Designation Code'' THEN \u0027LUTCF\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS LUTCF_DSGT_CDE,#(lf)                (case when \u0027Y\u0027 = d.''Series One License Status Code'' THEN \u00271\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S1_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Four License Status Code'' THEN \u00274\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S4_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Six License Status Code'' THEN \u00276\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S6_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Seven License Status Code'' THEN \u00277\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S7_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Nine License Status Code'' THEN \u00279\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S9_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Ten License Status Code'' THEN \u002710\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S10_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Twenty-two License Status Code'' THEN \u002722\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S22_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Twenty-four License Status Code'' THEN \u002724\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S24_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Twenty-six License Status Code'' THEN \u002726\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S26_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Twenty-seven License Status Code'' THEN \u002727\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S27_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Fifty-one License Status Code'' THEN \u002751\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S51_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Fifty-three License Status Code'' THEN \u002753\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S53_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Sixty-two License Status Code'' THEN \u002762\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S62_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Sixty-three License Status Code'' THEN \u002763\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S63_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Sixty-five License Status Code'' THEN \u002765\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S65_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Sixty-six License Status Code'' THEN \u002766\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S66_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Eighty-six License Status Code'' THEN \u002786\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S86_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Eighty-seven License Status Code'' THEN \u002787\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S87_LIC_STS_CDE#(lf)              #(lf)           from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' d#(lf)          where d.''Termination Date'' is null   #(lf)            and d.''Current Row Indicator'' = \u0027Y\u0027#(lf)         /*   and d.''Employee Status Type Code'' in (\u0027A\u0027,\u0027L\u0027,\u0027I\u0027)) as dd */#(lf)            and d.''Employee Status Type Code'' in (\u0027A\u0027)) as dd#(lf)#(lf)    on A.''Employee Identifier'' = dd.''Employee Identifier''  left join#(lf)           #(lf)        (select distinct aa.''Source System Key Text'',#(lf)#(tab)            (case when e.emp_count = 1 then f.emp_nm#(lf)                      when e.emp_count \u003e 1 then \u0027Multiple Associates\u0027#(lf)                   else \u0027None\u0027#(lf)                 end) as assigned_afa#(lf)           from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' as aa left join  #(lf)              (select e.''Report to ID'', #(lf)                      count(e.''Organization Dimension Surrogate Key'') as emp_count   #(lf)                 from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' e  #(lf)                where e.''Job Type Code'' in (\u0027002000\u0027,\u0027002010\u0027,\u0027002003\u0027,\u0027002011\u0027,\u0027002012\u0027,\u0027003100\u0027,#(lf)                                            \u0027002017\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027002018\u0027,\u0027002019\u0027,\u0027003500\u0027,#(lf)                                            \u0027002022\u0027,\u0027002024\u0027,\u0027002025\u0027,\u0027002026\u0027,\u0027002027\u0027)#(lf)                  and e.''Employee Status Type Code'' = \u0027A\u0027 #(lf)                  and e.''Current Row Indicator'' = \u0027Y\u0027#(lf)                  and e.''Report to ID'' \u003c\u003e \u0027'' ''\u0027 #(lf)                  and e.''Effective End Date'' = \u00279999-12-31\u0027 #(lf)               group by ''Report to ID'') as e #(lf)             on aa.''Source System Key Text'' = e.''Report to ID'' left join#(lf)         #(lf)              (select f.''Organization Dimension Surrogate Key'',#(lf)                      f.''Last Name''||\u0027, \u0027||f.''First Name'' as EMP_NM, #(lf)                      f.''Report to ID''  #(lf)                 from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' f#(lf)                where (f.''Job Type Code'' in (\u0027002000\u0027,\u0027002010\u0027,\u0027002003\u0027,\u0027002011\u0027,\u0027002012\u0027,\u0027003100\u0027,#(lf)                                             \u0027002017\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027002018\u0027,\u0027002019\u0027,\u0027003500\u0027,#(lf)                                             \u0027002022\u0027,\u0027002024\u0027,\u0027002025\u0027,\u0027002026\u0027,\u0027002027\u0027) or #(lf)                      f.''Department Identifier'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027)) #(lf)                  and f.''Department Identifier'' not in (\u00272410\u0027,\u00273005\u0027,\u00277151\u0027,\u00277152\u0027,\u00279150\u0027,\u00279134\u0027,#(lf)                                                        \u0027NA\u0027,\u00274100\u0027,\u00276053\u0027,\u00276100\u0027,\u00278900\u0027) #(lf)                  and f.''Employee Status Type Code'' = \u0027A\u0027 #(lf)                  and f.''Current Row Indicator'' = \u0027Y\u0027#(lf)                  and f.''Report to ID'' \u003c\u003e \u0027'' ''\u0027 #(lf)                  and f.''Effective End Date'' = \u00279999-12-31\u0027) as f  #(lf)              on e.''Report to ID''=f.''Report to ID''#(lf)          where (aa.''Job Type Code'' in (\u0027002000\u0027,\u0027002010\u0027,\u0027002003\u0027,\u0027002011\u0027,\u0027002012\u0027,\u0027003100\u0027,#(lf)                                        \u0027002017\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027002018\u0027,\u0027002019\u0027,\u0027003500\u0027,#(lf)                                        \u0027002022\u0027,\u0027002024\u0027,\u0027002025\u0027,\u0027002026\u0027,\u0027002027\u0027) or #(lf)                aa.''Department Identifier'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027)) #(lf)            and aa.''Department Identifier'' not in (\u00272410\u0027,\u00273005\u0027,\u00277151\u0027,\u00277152\u0027,\u00279150\u0027,\u00279134\u0027,#(lf)                                                   \u0027NA\u0027,\u00274100\u0027,\u00276053\u0027,\u00276100\u0027,\u00278900\u0027) #(lf)            and aa.''Current Row Indicator'' = \u0027Y\u0027#(lf)            and aa.''Employee Status Type Code'' = \u0027A\u0027 #(lf)            and aa.''Report to ID'' \u003c\u003e \u0027'' ''\u0027 #(lf)            and aa.''Effective End Date'' = \u00279999-12-31\u0027) as xx#(lf) #(lf)    on a.''Employee Identifier''=xx.''Source System Key Text'' left join #(lf)      (select count(z.''Organization Dimension Surrogate Key'') as OPCOUNT,   #(lf)                    z.''Report to ID'' #(lf)         from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' z  #(lf)        where z.''Current Row Indicator'' = \u0027Y\u0027#(lf)          and z.''Field Professional Roles'' in (\u0027Unlicensed Office Professionals\u0027,\u0027Licensed Office Professionals\u0027)#(lf)        /*  and z.''Employee Status Type Code'' in (\u0027A\u0027,\u0027I\u0027,\u0027L\u0027) */#(lf)          and z.''Employee Status Type Code'' in (\u0027A\u0027)#(lf)#(lf)       group by ''Report to ID'') as zz#(lf)         #(lf)    on a.''Employee Identifier'' = zz.''Report to ID''   left join#(lf)#(lf)(select a.''Employee Identifier'',#(lf)        b.''Team Identifier'',#(lf)        b.''Team Name'',#(lf)        b.''Team Purpose Code'',#(lf)        case when a.''Employee Team Role Code'' = \u0027AFLT\u0027 then \u0027Affiliate\u0027#(lf)             when a.''Employee Team Role Code'' = \u0027LEAD\u0027 then \u0027Team Leader\u0027#(lf)             when a.''Employee Team Role Code'' = \u0027MBR\u0027  then \u0027Team Member\u0027#(lf)          else \u0027 \u0027#(lf)        end as ''Employee Team Role Code'',#(lf)        A.''Effective Date''#(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Employee Team Organization Relationship Current Dimension''  a inner join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Team Organization Current Dimension'' b#(lf)    on (a.''Team Identifier Surrogate Key'' = b.''Team Identifier Surrogate Key'')  inner join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' c#(lf)    on (a.''Employee Identifier'' = c.''Employee Identifier'')   #(lf)    #(lf) where b.''Effective Status Code'' = \u0027A\u0027#(lf)   and c.''Employee Status Type Code'' = \u0027A\u0027#(lf)   and c.''Current Row Indicator'' = \u0027Y\u0027#(lf)   and a.''Team Member Action Code'' \u003c\u003e \u0027DROP\u0027#(lf)   and b.''Team Purpose Code'' NOT in (\u0027COAC\u0027,\u0027ENSB\u0027/*,\u0027MKTG\u0027*/) #(lf)   and a.''Effective Date'' = (SELECT MAX(aa.''Effective Date'')#(lf)                                FROM ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Employee Team Organization Relationship Current Dimension''  aa inner join#(lf)                                     ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Team Organization Current Dimension'' bb#(lf)                                  on (aa.''Team Identifier Surrogate Key'' = bb.''Team Identifier Surrogate Key'' and a.''Employee Identifier''= aa.''Employee Identifier'') INNER JOIN#(lf)                                     ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' cc#(lf)                                  on (aa.''Employee Identifier''= cc.''Employee Identifier'')#(lf)#(tab)                           WHERE bb.''Effective Status Code'' = \u0027A\u0027#(lf)                                 AND cc.''Employee Status Type Code'' = \u0027A\u0027  #(lf)                                 and cc.''Current Row Indicator'' = \u0027Y\u0027#(lf)                                 and aa.''Team Member Action Code'' \u003c\u003e \u0027DROP\u0027#(lf)                                 and bb.''Team Purpose Code'' NOT in (\u0027COAC\u0027,\u0027ENSB\u0027/*,\u0027MKTG\u0027*/) #(lf)                                )#(lf)  order by a.''Employee Identifier'') as zzz#(lf)  #(lf)   on a.''Employee Identifier'' = zzz.''Employee Identifier'' left join#(lf)#(lf)#(lf)       (select distinct a2.''Organization Department Code'' as RFO_CDE,#(lf)                        a2.''Organization Sub Department Code'' as MVP_ID,#(lf)                        cc.''Organization Department Description'',#(lf)                        case when cc.''Employee Name'' is null then \u0027Vacant\u0027#(lf)                          else cc.''Employee Name''#(lf)                        end as ''MVP Leader''    #(lf)          from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' a2  left join#(lf)               (Select Distinct aa.''Organization Sub Department Code'',#(lf)                                aa.''Organization Department Description'',#(lf)                                bb.''Employee Identifier'',#(lf)                                bb.''Employee Name'' #(lf)                  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' as aa left join#(lf)                       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' as bb#(lf)                    on aa.''Sales Hierarchy Identifier''=bb.''Employee Identifier''  #(lf)                 where aa.''Current Row Indicator'' = \u0027Y\u0027#(lf)                   and bb.''Employee Status Type Code'' = \u0027A\u0027#(lf)                   and bb.''Current Row Indicator'' = \u0027Y\u0027#(lf)                   and aa.''Effective End Date'' = \u00279999-12-31\u0027#(lf)                   and bb.''Job Type Code'' = \u0027001001\u0027#(lf)                 order by aa.''Organization Sub Department Code'') cc#(lf)             on a2.''Organization Sub Department Code''=cc.''Organization Sub Department Code''  #(lf)          where a2.''Current Row Indicator'' = \u0027Y\u0027#(lf)            and a2.''Effective End Date'' = \u00279999-12-31\u0027#(lf)            and a2.''Organization Zone Code'' \u003c\u003e \u0027UKWN\u0027#(lf)           order by a2.''Organization Sub Department Code''  ) as zz3#(lf)  on c.''Sub Department Identifier''= zz3.''MVP_ID'' left join#(lf)   #(lf)    #(lf)     (SELECT DISTINCT a4.''Organization Department Code'' as RFO_CDE,#(lf)                      a4.''Organization Zone Code'' as TAG_ZONE_NM, #(lf)                      (substring(a4.''Organization Zone Code'',6,5)) as Market_ID,#(lf)                      case when t4.''Employee Name'' is null then \u0027Vacant\u0027#(lf)                        else t4.''Employee Name''#(lf)                      end as Market_Leaders#(lf)#(lf)        from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' a4 left join #(lf)             (select distinct aa4.''Organization Zone Code'',#(lf)                              bb4.''Employee Name''  #(lf)#(lf)                from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' aa4 left join #(lf)                     ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' bb4#(lf)                  on aa4.''Sales Hierarchy Identifier''=bb4.''Employee Identifier''#(lf)               where aa4.''Current Row Indicator'' = \u0027Y\u0027      #(lf)                 and bb4.''Employee Status Type Code'' in (\u0027A\u0027)#(lf)                 and aa4.''Effective End Date'' = \u00279999-12-31\u0027#(lf)                 and bb4.''Current Row Indicator'' = \u0027Y\u0027#(lf)                 and aa4.''Effective End Date'' = \u00279999-12-31\u0027#(lf)                 and (bb4.''Job Type Code'' in (\u0027001002\u0027,\u0027001003\u0027,\u0027001007\u0027) or #(lf)                      bb4.''Employee Identifier'' in (\u0027TS60295\u0027,\u0027TS49431\u0027,\u0027TS22024\u0027,\u0027TS26677\u0027))#(lf)                 and bb4.''Employee Identifier'' not in (\u0027TS62904\u0027,\u0027TS67022\u0027,\u0027TS74827\u0027,\u0027TS73067\u0027,\u0027TS77319\u0027,\u0027TS73124\u0027)) t4 #(lf)          on a4.''Organization Zone Code'' = t4.''Organization Zone Code''#(lf)       where a4.''Current Row Indicator'' = \u0027Y\u0027#(lf)         and a4.''Effective End Date'' = \u00279999-12-31\u0027#(lf)         and substring(a4.''Organization Zone Code'',6,2) \u003c\u003e \u002700\u0027#(lf)         and a4.''Organization Department Code'' \u003c\u003e \u0027UKWN\u0027#(lf)       order by a4.''Organization Zone Code'') zz4#(lf)     #(lf)   on  b.''Organization Zone Code''= zz4.''TAG_ZONE_NM'' #(lf)  #(lf)  #(lf) where a.''Employee Status Type Code'' IN (\u0027A\u0027)#(lf)  /* a.''Employee Status Type Code'' IN (\u0027A\u0027,\u0027I\u0027,\u0027L\u0027) */#(lf)   and (c.''Job Family Code'' LIKE \u0027FLD%\u0027 OR#(lf)        c.''Job Family Code'' =\u0027SALES\u0027 OR#(lf)        c.''TF Job Class Code'' =\u0027FAC\u0027)#(lf)   and a.''Termination Date'' is NULL #(lf)   and (a.''Job Type Code'' in (\u0027002003\u0027,\u0027002010\u0027,\u0027002011\u0027,\u0027002012\u0027,\u0027002016\u0027,\u0027002017\u0027,#(lf)                              \u0027002000\u0027,\u0027002022\u0027,\u0027002024\u0027,\u0027002025\u0027,\u0027002026\u0027,\u0027002027\u0027,#(lf)                              \u0027003100\u0027,\u0027003500\u0027,\u0027003602\u0027,#(lf)                              \u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027) or #(lf)       a.''Organization Department Code'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027)) #(lf)   and c.''Department Identifier'' not in (\u00272410\u0027,\u00273005\u0027,\u00277151\u0027,\u00277152\u0027,\u00279150\u0027,\u00279134\u0027,#(lf)                                         \u0027NA\u0027,\u00274100\u0027,\u00276053\u0027,\u00276100\u0027,\u00278900\u0027) #(lf)   and b.''Effective End Date'' = \u00279999-12-31\u0027 #(lf)   and b.''Current Row Indicator'' = \u0027Y\u0027 #(lf)   and a.''Current Row Indicator'' = \u0027Y\u0027 #(lf)   --and a.''Employee Identifier'' = \u0027TS77676\u0027#(lf)order by a.''Employee Identifier''', null, [EnableFolding=true]),    #'Added Custom' = Table.AddColumn(Source, 'Split_Cred', each Text.Split( [CREDENTIALSXX], ' ' )),    #'Added Custom1' = Table.AddColumn(#'Added Custom', 'Shrink_Cred', each List.Select([Split_Cred], each _ \u003c\u003e '')),    #'Added Custom2' = Table.AddColumn(#'Added Custom1', 'Credentials', each Text.Combine([Shrink_Cred], ' ')),    #'Added Custom3' = Table.AddColumn(#'Added Custom2', 'Split_License', each Text.Split( [LICENSESXX], ' ' )),    #'Added Custom4' = Table.AddColumn(#'Added Custom3', 'Shrink_License', each List.Select([Split_License], each _ \u003c\u003e '')),    #'Added Custom5' = Table.AddColumn(#'Added Custom4', 'License', each Text.Combine([Shrink_License], ' ')),    #'Removed Columns' = Table.RemoveColumns(#'Added Custom5',{'Split_Cred', 'Shrink_Cred', 'Split_License', 'Shrink_License', 'CREDENTIALSXX', 'LICENSESXX'}),    #'Added Custom6' = Table.AddColumn(#'Removed Columns', 'Conference Qualification', each if[Conference Qualification Type Code] = '33' then 'Pinnacle A'  else if[Conference Qualification Type Code] = '32' then 'Pinnacle B'else if[Conference Qualification Type Code] = '31' then 'Pinnacle C'else if[Conference Qualification Type Code] = '29' then 'Summit A'else if[Conference Qualification Type Code] = '28' then 'Summit B'else if[Conference Qualification Type Code] = '27' then 'Summit C'else if[Conference Qualification Type Code] = '22' then 'Sierra A'else if[Conference Qualification Type Code] = '20' then 'Sierra B'else 'Non-Qualified'),    #'Added Custom7' = Table.AddColumn(#'Added Custom6', 'Team Purpose Description', each if [Team Purpose Code] = 'PBP' then 'Professional'else if [Team Purpose Code] = 'PBPS' then 'Professional'else if [Team Purpose Code] = 'FRML' then 'Formal'  else if [Team Purpose Code] = 'FRMS' then 'Formal'else if [Team Purpose Code] = 'ASSC' then 'Association'else if [Team Purpose Code] = 'MKTG' then 'Marketing'else if [Team Purpose Code] = 'SOLO' then 'Solo'else ' '),    #'Added Custom8' = Table.AddColumn(#'Added Custom7', 'Market with Leader', each [MARKET]\u0026' - '\u0026[MARKET_LEADERS]),    #'Added Custom9' = Table.AddColumn(#'Added Custom8', 'MVP with Leader', each [MVP_ID] \u0026 ' - ' \u0026 [MVP Leader]),    #'Replaced Value' = Table.ReplaceValue(#'Added Custom9',null,'',Replacer.ReplaceValue,{'Team Name'}),    #'Replaced Value1' = Table.ReplaceValue(#'Replaced Value',null,'',Replacer.ReplaceValue,{'Team Identifier'}),    #'Added Custom10' = Table.AddColumn(#'Replaced Value1', 'TeamAdvisor_HlthRpt', each if [Team Identifier] = '' then [EMP_NM] else [Team Name]),    #'Added Custom11' = Table.AddColumn(#'Added Custom10', 'Team Indicator', each if([Team Identifier]='') then 0 else 1),    #'Changed Type' = Table.TransformColumnTypes(#'Added Custom11',{{'Team Indicator', Int64.Type}}),    #'Removed Duplicates' = Table.Distinct(#'Changed Type', {'SALE_HIER_DIM_SK'}),    #'Filtered Rows' = Table.SelectRows(#'Removed Duplicates', each true),    #'Added Custom12' = Table.AddColumn(#'Filtered Rows', 'Advisor Group Name', each if([TAG] = '0383') then [Advisor Group] elseText.Start([Advisor Group],Text.Length([Advisor Group])-14))in    #'Added Custom12'"}]},{"name":"Dates (2)","isHidden":false,"storageMode":"Import","columns":[{"name":"CAL_DAY_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_END_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_DAY_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_MTH_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_QTR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_TXT","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = DB2.Database('PODWH021:50000', 'PODWH021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT #(lf)       A.CAL_DAY_DT, #(lf)       A.DTRB_PERF_RPT_WK_END_DT, #(lf)       A.DTRB_PERF_RPT_WK_NBR,#(lf)       A.DTRB_PERF_RPT_YR_NBR,#(lf)       A.DTRB_PERF_RPT_DAY_TXT, #(lf)       A.DTRB_PERF_RPT_MTH_TXT, #(lf)       A.DTRB_PERF_RPT_QTR_TXT, #(lf)       A.DTRB_PERF_RPT_WK_TXT,#(lf)       A.DTRB_PERF_RPT_YR_TXT#(lf)#(lf)FROM COMMON.DTRB_PERF_DATES  AS A#(lf)#(lf)WHERE A.DTRB_PERF_RPT_YR_NBR IN (2024)']),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'CAL_DAY_DT', type date}, {'DTRB_PERF_RPT_WK_END_DT', type date}})in    #'Changed Type'"}]},{"name":"Referrals (2)","isHidden":false,"storageMode":"Import","columns":[{"name":"PERS_DIM_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CIF_ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"REFERRAL_CLIENT_NAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"REFR_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"REFERRAL_OCCURS","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee Display Name","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'select a.''Person Dimension Surrogate Key'' as PERS_DIM_SK,#(lf)       e.''Source System Key Text'' as CIF_ID,#(lf)       e.''First Name''||\u0027 \u0027||e.''Last Name'' as Referral_Client_Name,#(lf)       a.''Referral Date'' as REFR_DT,#(lf)       sum(a.''Occurs'') as Referral_Occurs,#(lf)       c.''Source System Key Text'' as EMP_ID,#(lf)       c.''Last Name''||\u0027, \u0027||c.''First Name'' as ''Employee Display Name''#(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Referral Fact'' a left join #(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Distribution Performance Dates Dimension'' b#(lf)    on a.''Referral Date'' = b.''Calendar Day Date'' left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' c#(lf)    on ((a.''Referral Organization Dimension Surrogate Key'' = c.''Organization Dimension Surrogate Key'' ) and #(lf)        (a.''Referral Organization Dimension Version Number'' = c.''Organization Dimension Version Number'')) left join#(lf)        ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' d#(lf)    on ((d.''Effective Begin Date'' \u003c= a.''Referral Date'') and #(lf)        (a.''Referral Date'' \u003c= dateadd(day,-1,d.''Effective End Date'')) and d.''Current Row Indicator'' = \u0027Y\u0027 and#(lf)        c.''Source System Key Text'' = d.''Sales Hierarchy Identifier'') left join#(lf)        ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Person Dimension'' e#(lf)    on ((a.''Person Dimension Surrogate Key'' = e.''Person Dimension Surrogate Key'') and (a.''Person Dimension Verison Number'' = e.''Person Dimension Version Number''))    #(lf)  where a.''Person Dimension Surrogate Key'' \u003c\u003e 0#(lf)    and d.''Organization Department Code'' in (\u00270115\u0027,\u00270165\u0027,\u00270190\u0027,\u00270240\u0027,\u00270283\u0027,\u00270291\u0027,\u00270361\u0027,\u00270365\u0027,\u00270383\u0027,\u00270384\u0027,\u00270410\u0027,\u00270435\u0027,\u00270475\u0027,\u00270496\u0027,\u00270525\u0027,\u00270529\u0027,\u00270810\u0027)#(lf)    and (c.''Job Type Code'' in (\u0027002000\u0027, \u0027002003\u0027, \u0027002008\u0027, \u0027002010\u0027, \u0027002011\u0027, \u0027002012\u0027, \u0027002016\u0027, \u0027002022\u0027, \u0027002024\u0027, \u0027002025\u0027, \u0027002026\u0027, \u0027002027\u0027, \u0027003100\u0027, \u0027003500\u0027)#(lf)     or  c.''Department Identifier'' in (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027))  #(lf)    and b.''Distribution Performance Reporting Year Number'' in (2024)#(lf)    --and c.''Source System Key Text'' = \u0027TS58326\u0027#(lf)  group by a.''Person Dimension Surrogate Key'',#(lf)           e.''Source System Key Text'',#(lf)           e.''First Name''||\u0027 \u0027||e.''Last Name'',#(lf)           a.''Referral Date'',#(lf)           c.''Source System Key Text'',#(lf)           c.''Last Name''||\u0027, \u0027||c.''First Name''#(lf) having sum(a.''Occurs'') \u003e 0', null, [EnableFolding=true]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'CIF_ID', Int64.Type}}),    #'Sorted Rows' = Table.Buffer(Table.Sort(#'Changed Type',{{'REFR_DT', Order.Descending}})),    #'Removed Duplicates' = Table.Distinct(#'Sorted Rows', {'CIF_ID'})in    #'Removed Duplicates'"}]},{"name":"Prospect Connects (2)","isHidden":false,"storageMode":"Import","columns":[{"name":"ThriventId","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"ClientName","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Worker Appointment Association","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Appointment Dimension Surrogate Key","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Person Dimension Surrogate Key","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"appt_occurs","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Person Occurs","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Membership Type Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JFW_IND","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Appointment Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Appointment Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Performance Year Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Sql.Database('dbedwdwprd', 'enterprisedatamart', [Query='select pers_dim.[Source System Key Text] as ThriventId,#(lf)       pers_dim.[First Name] + \u0027 \u0027 + pers_dim.[Last Name] as ClientName,#(lf)       appt_fct.[Worker Appointment Association],#(lf)       appt_fct.[Appointment Dimension Surrogate Key],#(lf)       appt_fct.[Person Dimension Surrogate Key],#(lf)       sum(appt_fct.[Appointment Occurs]) [appt_occurs],#(lf)       max(appt_fct.[Person Occurs]) [Person Occurs],#(lf)       mbr_dim.[Membership Type Description],#(lf)#(tab)   case when appt_dim.[Field User Count] \u003c\u003e 0 and appt_dim.[Appointment Type Code] in (\u0027Connect\u0027,\u0027Gather Data\u0027,\u0027Take Action\u0027,\u0027Strategy Call/Meeting\u0027,\u0027Review\u0027,\u0027Service\u0027,\u0027Discover\u0027,\u0027Deliver\u0027)#(lf)#(tab)#(tab) then 1#(lf)#(tab)#(tab) else 0#(lf)#(tab)   end [JFW_IND],#(lf)       appt_dim.[Appointment Date],#(lf)       case when appt_dim.[Appointment Type Code] in (\u0027Gather Data\u0027) Then \u0027Discover\u0027#(lf)            when appt_dim.[Appointment Type Code] in (\u0027Take Action\u0027) Then \u0027Deliver\u0027#(lf)            when appt_dim.[Appointment Type Code] not in (\u0027Gather Data\u0027,\u0027Take Action\u0027) then Appt_dim.[Appointment Type Description]#(lf)       end as [Appointment Type Code],#(lf)       date_dim.[Calendar Year Name] as [Performance Year Name],#(lf)       org_dim.[Source System Key Text] [EMP_ID],#(lf)       org_dim.[First Name] + \u0027 \u0027 + org_dim.[Last Name] [EMP_NM]#(lf)#(lf)  from EnterpriseDataMart.DM_01.[Appointment Combine Fact] appt_fct left join #(lf)       EnterpriseDataMart.DM_01.[Person Dimension] as Pers_dim#(lf)    on (appt_fct.[Person Dimension Surrogate Key]=pers_dim.[Person Dimension Surrogate Key] and#(lf)        appt_fct.[Person Dimension Version Number] = pers_dim.[Person Dimension Version Number]) left join#(lf)       EnterpriseDataMart.DM_01.[Membership Type Dimension] mbr_dim#(lf)    on (appt_fct.[Membership Type Dimension Surrogate Key]=mbr_dim.[Membership Type Dimension Surrogate Key]) left join#(lf)#(lf)       EnterpriseDataMart.DM_01.[Appointment Dimension] appt_dim#(lf)    on (appt_fct.[Appointment Dimension Surrogate Key]=appt_dim.[Appointment Dimension Surrogate Key]) left join#(lf)#(lf)       EnterpriseDataMart.DM_01.[Date Dimension] date_dim#(lf)    on (appt_dim.[Appointment Date]=date_dim.[Calendar Date Date]) left join#(lf)#(lf)       EnterpriseDataMart.DM_01.[Organization Dimension] org_dim#(lf)    on ((appt_fct.[Appointment Organization Dimension Surrogate Key]=org_dim.[Organization Dimension Surrogate Key]) and #(lf)       ((org_dim.[Effective Begin Date] \u003c= appt_dim.[Appointment Date]) and (appt_dim.[Appointment Date] \u003c= org_dim.[Effective End Date]))) left join#(lf)#(tab) #(lf)       EnterpriseDataMart.DM_01.[SALE_HIER_DIM] sale_hier_dim#(lf)    on ((org_dim.[Source System Key Text]=sale_hier_dim.[SALE_HIER_ID] and#(lf)#(tab)(sale_hier_dim.EFF_BEG_DT\u003c=appt_dim.[Appointment Date]) and#(lf)#(tab)(appt_dim.[Appointment Date]\u003c= sale_hier_dim.EFF_END_DT) and #(lf)#(tab) sale_hier_dim.CURR_ROW_IND = \u0027Y\u0027))#(lf)#(lf)where appt_dim.[Current Row Indicator] = \u0027Y\u0027#(lf)  and appt_dim.[Appointment Create Date Over 14 Days] = \u0027N\u0027#(lf)  and appt_fct.[Person Dimension Surrogate Key] \u003c\u003e 0#(lf)  and appt_fct.[Appointment Status Name] \u003c\u003e \u0027Declined\u0027#(lf)  and appt_dim.[Appointment Type Code] \u003c\u003e \u0027UNK\u0027#(lf)  and sale_hier_dim.ORZN_DEPT_CDE in (\u00270115\u0027,\u00270165\u0027,\u00270190\u0027,\u00270240\u0027,\u00270283\u0027,\u00270291\u0027,\u00270361\u0027,\u00270365\u0027, \u00270383\u0027,\u00270384\u0027,\u00270410\u0027,\u00270435\u0027,\u00270475\u0027,\u00270496\u0027,\u00270525\u0027,\u00270529\u0027,\u00270810\u0027)#(lf) and (org_dim.[Job Type Code] in (\u0027002000\u0027, \u0027002003\u0027, \u0027002008\u0027, \u0027002010\u0027, \u0027002011\u0027, \u0027002012\u0027, \u0027002016\u0027, \u0027002022\u0027, \u0027002024\u0027, \u0027002025\u0027, \u0027002026\u0027, \u0027002027\u0027, \u0027003100\u0027, \u0027003500\u0027)#(lf)  or  org_dim.[Department Identifier] in (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027)) #(lf)  and appt_dim.[Event Result Description] not in (\u0027No Show\u0027,\u0027Cancelled\u0027)#(lf)  and date_dim.[Calendar Year Name] in (\u00272024\u0027)#(lf) #(lf)group by#(lf)  appt_fct.[Worker Appointment Association],#(lf)  appt_fct.[Appointment Dimension Surrogate Key],#(lf)  appt_fct.[Person Dimension Surrogate Key],#(lf)  mbr_dim.[Membership Type Description],#(lf)  appt_dim.[Field User Count],#(lf)  appt_dim.[Appointment Date],#(lf)  appt_dim.[Appointment Type Code],#(lf)  appt_dim.[Appointment Type Description],#(lf)  date_dim.[Calendar Year Name],#(lf)  org_dim.[Source System Key Text],#(lf)  org_dim.[First Name] + \u0027 \u0027 + org_dim.[Last Name],#(lf)  pers_dim.[Source System Key Text],#(lf)  pers_dim.[First Name] + \u0027 \u0027 + pers_dim.[Last Name] #(lf)#(lf)having #(lf)sum(appt_fct.[Appointment Occurs]) \u003e 0#(lf)']),    #'Filtered Rows1' = Table.SelectRows(Source, each ([Worker Appointment Association] = 'Owner')),    #'Filtered Rows' = Table.SelectRows(#'Filtered Rows1', each ([Appointment Type Code] = 'Connect') and ([Membership Type Description] \u003c\u003e 'Benefit')),    #'Changed Type' = Table.TransformColumnTypes(#'Filtered Rows',{{'Appointment Date', type date}, {'ThriventId', Int64.Type}})in    #'Changed Type'"}]},{"name":"Alert Message","isHidden":false,"storageMode":"Import","columns":[{"name":"What\u0027s New Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Alert Message","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Message_Alert_Text","expression":" var _txt1 = SELECTEDVALUE(\u0027Alert Message\u0027[Alert Message]) return IF(ISBLANK(_txt1),'',_txt1)","isHidden":false},{"name":"ShowHideAlert Background","expression":"IF(ISBLANK(SELECTEDVALUE(\u0027Alert Message\u0027[Alert Message])),'White','White')","isHidden":false},{"name":"ShowHideAlert Border","expression":"IF(ISBLANK(SELECTEDVALUE(\u0027Alert Message\u0027[Alert Message])),'White','#BE1D3D')","isHidden":false},{"name":"ShowHideAlertTitle","expression":" IF(ISBLANK(SELECTEDVALUE(\u0027Alert Message\u0027[Alert Message])),' ','ALERT !')","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//SHARED//Public//DI and BI//Field Reporting//What\u0027s New and Alert Message//What\u0027s New and Alert Message.xlsx'), null, true),    #'Referral Incentive_Sheet' = Source{[Item='Referral Incentive',Kind='Sheet']}[Data],    #'Promoted Headers1' = Table.PromoteHeaders(#'Referral Incentive_Sheet', [PromoteAllScalars=true]),    #'Changed Type1' = Table.TransformColumnTypes(#'Promoted Headers1',{{'What\u0027s New Description', type any}, {'Alert Message', type text}})in    #'Changed Type1'"}]},{"name":"login Table","isHidden":false,"storageMode":"Import","columns":[{"name":"USERID","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"}],"measures":[{"name":"FieldLogon","expression":"CONCATENATE('TS',  LEFT(      RIGHT([USERIDxx],        LEN([USERIDxx])-7),5))","isHidden":false},{"name":"Login_User","expression":"USERPRINCIPALNAME()","isHidden":false},{"name":"Login_DisplayInd","expression":"   IF(\u0027login Table\u0027[Login_DeptID] in {'0115', '0190', '0291', '0361', '0384', '0435', '0525', '0714', '0716', '7173'}, 0, 1)","isHidden":false},{"name":"Login_DeptID","expression":"  var _id = USERPRINCIPALNAME()  var _dept = CALCULATE(SELECTEDVALUE(\u0027Role Level Security\u0027[Department Number]), \u0027Role Level Security\u0027[REPORT_TO_EMAIL] = _id)Return_dept","isHidden":false},{"name":"NEW Message_txt_notdisplayedCC - NOT USED","expression":"if(\u0027login Table\u0027[Login_DeptID] in {'0115', '0190', '0291', '0361', '0384', '0435', '0525', '0714', '0716', '7173'}, '', ' (space) ')","isHidden":false},{"name":"Message_txt_displayed","expression":"if(\u0027login Table\u0027[Login_DeptID] in {'0115', '0190', '0291', '0361', '0384', '0435', '0525', '0714', '0716'}, 'This report is only intended for a pilot group. If you are not part of the pilot group, there will be no information displayed.', '')","isHidden":false},{"name":"NEW ShowHidePilotMsg","expression":"if(    not(\u0027login Table\u0027[Login_DeptID] in {'0115', '0190', '0291', '0361', '0384', '0435', '0525', '0714', '0716'}),'#1C00ff00','White')--if(--not(\u0027login Table\u0027[Login_DeptID] in {'0115', '0190', '0291', '0361', '0384', '0435', '0525', '0714', '0716', '7173'}),--'#1C00ff00',--'White')--if(not(\u0027login Table\u0027[Login_DeptID]) in  {'0115', '0190', '0291', '0361', '0384', '0435', '0525', '0714', '0716', '7173'}, ","isHidden":false},{"name":"USERIDxx","expression":"USERNAME()","isHidden":false},{"name":"Message_txt_blank_displayed - in TAG 0283","expression":"if(\u0027login Table\u0027[Login_DeptID] in {'0283'}, ' ', '')","isHidden":false},{"name":"ShowHidePilotMsg - not in TAG 0283","expression":"if(    not(\u0027login Table\u0027[Login_DeptID] in {'0283'}),'#1C00ff00','White')","isHidden":false},{"name":"ShowHidePilotMsg - not in Virtual Advice","expression":"if(    not(\u0027login Table\u0027[Login_DeptID] in {'0283'}),'#1C00ff00','White')","isHidden":false}],"source":[{"expression":"       ROW('USERID',' ')"}]},{"name":"Min \u0026 Max Connect Dates","isHidden":false,"storageMode":"Import","columns":[{"name":"Person Dimension Surrogate Key","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"CalYr_Connect","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"MaxConnectDt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"MinConnectDt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Date_EarliestConnectOnOrAfterReferral","dataType":"String","isHidden":false,"expression":"--Date on our after referralvar __clientID = \u0027Min \u0026 Max Connect Dates\u0027[Person Dimension Surrogate Key] -- The client ID, stored as a whole number.var __year = VALUE( \u0027Min \u0026 Max Connect Dates\u0027[CalYr_Connect] ) -- The year, stored as a whole number.var __date_LatestRefferalInYear = -- Latest referral date (for the person who was referred) in the year __year and the for the person __clientID.    CALCULATE(        MAX( Referrals[REFR_DT] )        , FILTER(            ALL( Referrals )            , VALUE( Referrals[PERS_DIM_SK] ) = __clientID                \u0026\u0026 YEAR( Referrals[REFR_DT] ) = __year        )    )var __date_EarlestAppointmentAfterReferral = -- Earliest connect appointment date (for the person who was referred) in the year __year, the person __clientID, and on or after __date_LatestReferralInYear.    CALCULATE(        MIN( \u0027Merge Detail\u0027[Prospect Connects.Appointment Date] )        , FILTER(            ALL( \u0027Merge Detail\u0027 )            , VALUE( \u0027Merge Detail\u0027[PERS_DIM_SK] ) = __clientID                \u0026\u0026 YEAR( \u0027Merge Detail\u0027[Prospect Connects.Appointment Date] ) = __year                \u0026\u0026 \u0027Merge Detail\u0027[Prospect Connects.Appointment Date] \u003e= __date_LatestRefferalInYear                \u0026\u0026 NOT(ISBLANK( __date_LatestRefferalInYear ))                \u0026\u0026 \u0027Merge Detail\u0027[Prospect Connects.Appointment Date] \u003e= date(2024,2,12)        )    )return__date_EarlestAppointmentAfterReferral","columnType":"Calculated"},{"name":"Date_LatestConnectBeforeFirstReferral","dataType":"String","isHidden":false,"expression":"--Date of latest connect appointment before referralvar __clientID = \u0027Min \u0026 Max Connect Dates\u0027[Person Dimension Surrogate Key] -- The client ID, stored as a whole number.var __year = VALUE( \u0027Min \u0026 Max Connect Dates\u0027[CalYr_Connect] ) -- The year, stored as a whole number.var __date_LatestRefferalInYear = -- Latest referral date (for the person who was referred) in the year __year and the for the person __clientID.    CALCULATE(        MAX( Referrals[REFR_DT] )        , FILTER(            ALL( Referrals )            , VALUE( Referrals[PERS_DIM_SK] ) = __clientID                \u0026\u0026 YEAR( Referrals[REFR_DT] ) = __year        )    )var __date_LatestAppointmentBeforeReferral = -- Latest connect appointment date (for the person who was referred) in the year __year, the person __clientID, before __date_LatestReferralInYear.    CALCULATE(        MAX( \u0027Merge Detail\u0027[Prospect Connects.Appointment Date] )        , FILTER(            ALL( \u0027Merge Detail\u0027 )            , VALUE( \u0027Merge Detail\u0027[PERS_DIM_SK] ) = __clientID                \u0026\u0026 YEAR( \u0027Merge Detail\u0027[Prospect Connects.Appointment Date] ) = __year                \u0026\u0026 \u0027Merge Detail\u0027[Prospect Connects.Appointment Date] \u003c __date_LatestRefferalInYear                \u0026\u0026 NOT(ISBLANK( __date_LatestRefferalInYear ))        )    )return__date_LatestAppointmentBeforeReferral","columnType":"Calculated"},{"name":"Connect Date to Use","dataType":"String","isHidden":false,"expression":"--If there is a connect after the referral, use the earliest connect on or after referral.  If there is no connect after the referral, use the latest connect before referral.var __date_EarliestConnectOnOrAfterReferral = \u0027Min \u0026 Max Connect Dates\u0027[Date_EarliestConnectOnOrAfterReferral]var __date_LatestConnectBeforeFirstReferral = \u0027Min \u0026 Max Connect Dates\u0027[Date_LatestConnectBeforeFirstReferral]var __date_ConnectDateToUse =    CALCULATE(        if(AND(__date_EarliestConnectOnOrAfterReferral = blank(), __date_LatestConnectBeforeFirstReferral = blank())        , blank()        , if(and(__date_EarliestConnectOnOrAfterReferral \u003c\u003e blank(), __date_LatestConnectBeforeFirstReferral = blank()), __date_EarliestConnectOnOrAfterReferral        , if(and(__date_EarliestConnectOnOrAfterReferral \u003c\u003e blank(), __date_LatestConnectBeforeFirstReferral \u003c\u003e blank()), __date_EarliestConnectOnOrAfterReferral        , if(and(__date_EarliestConnectOnOrAfterReferral = blank(), __date_LatestConnectBeforeFirstReferral \u003c\u003e blank()), __date_LatestConnectBeforeFirstReferral        )        )        )        ))RETURN__date_ConnectDateToUse","columnType":"Calculated"},{"name":"Connect within Incentive Period NEW","dataType":"String","isHidden":false,"expression":"-- ** IMPORTANT ** Update incentive start \u0026 end dates at the beginning of each new round--Round 1: 2/12/24-5/5/24--Round 2: 5/6/24-8/4/24--Round 3: 8/5/24-12/29/24var __date_incentive_start = date(2024,2,12)var __date_incentive_end = date(2024,5,5)var __date_connect = \u0027Min \u0026 Max Connect Dates\u0027[Connect Date to Use]returnif(ISBLANK(__date_connect), ''    , if(__date_connect \u003e= __date_incentive_start \u0026\u0026 __date_connect \u003c= __date_incentive_end, 'Y', 'N'))","columnType":"Calculated"}],"measures":[{"name":"Number of Clients with Connect Date On or AFter Referral Date","expression":"CALCULATE(    DISTINCTCOUNT( \u0027Min \u0026 Max Connect Dates\u0027[Person Dimension Surrogate Key] )    , NOT( ISBLANK( \u0027Min \u0026 Max Connect Dates\u0027[Date_EarliestConnectOnOrAfterReferral] ) ))","isHidden":false},{"name":"Number of Clients with Connect Date Only Before Referral Date","expression":"CALCULATE(    DISTINCTCOUNT( \u0027Min \u0026 Max Connect Dates\u0027[Person Dimension Surrogate Key] )    , NOT( ISBLANK( \u0027Min \u0026 Max Connect Dates\u0027[Date_LatestConnectBeforeFirstReferral] ) )        \u0026\u0026 ISBLANK( \u0027Min \u0026 Max Connect Dates\u0027[Date_EarliestConnectOnOrAfterReferral] ))","isHidden":false}],"source":[{"expression":"let    Source = #'Prospect Connects',    #'Grouped Rows' = Table.Group(Source, {'Person Dimension Surrogate Key', 'CalYr_Connect'}, {{'MaxConnectDt', each List.Max([Appointment Date]), type nullable date}, {'MinConnectDt', each List.Min([Appointment Date]), type nullable date}}),    #'Filtered Rows' = Table.SelectRows(#'Grouped Rows', each true)in    #'Filtered Rows'"}]}],"roles":[{"name":"COE","modelPermission":"Read","members":[{"memberName":"obj:2f621ad2-0668-4906-bf26-4d5ce281db46@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"2f621ad2-0668-4906-bf26-4d5ce281db46","memberType":"Group","identityProvider":"AzureAD"}],"tablePermissions":[{"name":"Role Level Security","filterExpression":"[AD Group] \u003c\u003e 'PBI_FLD_RPTG_COE' "}]},{"name":"Field_TFGT","modelPermission":"Read","members":[{"memberName":"obj:79d35099-a3c2-4a22-8d79-d84cebdf1b38@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"79d35099-a3c2-4a22-8d79-d84cebdf1b38","memberType":"Group","identityProvider":"AzureAD"},{"memberName":"obj:8938cc69-7a18-41b5-a42d-2dce2ea2a893@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"8938cc69-7a18-41b5-a42d-2dce2ea2a893","memberType":"Group","identityProvider":"AzureAD"}],"tablePermissions":[{"name":"Role Level Security","filterExpression":"IFERROR(SEARCH(USERNAME(),[REPORT_TO_EMAIL]),-1)\u003e0"}]},{"name":"Home Office","modelPermission":"Read","members":[{"memberName":"obj:0d216a03-5ecb-4979-be8e-7c3904c3a79e@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"0d216a03-5ecb-4979-be8e-7c3904c3a79e","memberType":"Group","identityProvider":"AzureAD"}],"tablePermissions":[{"name":"Role Level Security","filterExpression":"[AD Group] \u003c\u003e 'PBI_FLD_RPTG_HO'"}]},{"name":"Field Leader RFO","modelPermission":"Read","members":[{"memberName":"obj:de18b88a-5b86-4d5a-bc53-8523bc34bc5c@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"de18b88a-5b86-4d5a-bc53-8523bc34bc5c","memberType":"Group","identityProvider":"AzureAD"},{"memberName":"obj:bc106c61-ca17-4fc1-9713-5893454f8368@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"bc106c61-ca17-4fc1-9713-5893454f8368","memberType":"Group","identityProvider":"AzureAD"},{"memberName":"obj:a9d8eb7f-8e75-4e5e-b329-caf9fcffa9ea@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"a9d8eb7f-8e75-4e5e-b329-caf9fcffa9ea","memberType":"Group","identityProvider":"AzureAD"}],"tablePermissions":[{"name":"Role Level Security","filterExpression":"[Department Number] = lookupvalue([Department Number],[REPORT_TO_EMAIL],username())"}]}],"configuredBy":"xPowerBi_Prod@thrivent.com","configuredById":"5aab6987-e004-43c0-b69a-09c27972e0f9","isEffectiveIdentityRequired":true,"isEffectiveIdentityRolesRequired":true,"refreshSchedule":{"days":["Monday"],"times":["09:00"],"enabled":true,"localTimeZoneId":"Central Standard Time","notifyOption":"MailOnFailure"},"targetStorageMode":"Abf","createdDate":"2024-02-13T21:18:14.723","contentProviderType":"PbixInImportMode"},{"id":"5bf58242-e933-488c-a92f-a944cc7324c1","name":"Financial Advisor and Team Performance Dashboard","tables":[{"name":"Appt_Producer","isHidden":false,"storageMode":"Import","columns":[{"name":"Vital Stats Average Breakout","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Average Appointments Per Customer","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Average Customers Per Appointment","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Total Average Close Rate","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TGR Average Close Rate","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Average TGR Case Size","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Average TGR Contract Efficiency","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Average Appointment Count","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Average Grid Credit Amount","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.NestedJoin(Appointment_Averages, {'Vital Stats Average Breakout'}, Producer_Snowflake, {'TENURE_GROUP'}, 'Producer_Snowflake', JoinKind.LeftOuter),    #'Expanded Producer_Snowflake' = Table.ExpandTableColumn(Source, 'Producer_Snowflake', {'EMP_ID', 'EMP_NM'}, {'EMP_ID', 'EMP_NM'}),    #'Removed Duplicates' = Table.Distinct(#'Expanded Producer_Snowflake', {'EMP_ID'})in    #'Removed Duplicates'"}]},{"name":"SVC_AGMT","isHidden":false,"storageMode":"Import","columns":[{"name":"BEN_CTRC_NBR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"BEN_CTRC_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SVC_AGMT_PLAN_YR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"BEG_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"SVC_AGMT_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CTRC_STS_EFF_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"SVC_AGMT_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CURRENT_STATUS_DESCRIPTION","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SVC_AGMT_GRP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SVC_AGMT_ISS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"APP_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"ACL_DLIV_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"RCD_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Current Active New Plans","expression":"var ActiveNewPlans = CALCULATE(    DISTINCTCOUNT(\u0027SVC_AGMT\u0027[BEN_CTRC_NBR]),\\t\u0027SVC_AGMT\u0027[CURRENT_STATUS_DESCRIPTION] IN { 'Approved' }, SVC_AGMT[SVC_AGMT_PLAN_YR] = 0 || SVC_AGMT[SVC_AGMT_PLAN_YR] = 1 ) RETURNIF(ISBLANK(ActiveNewPlans),0,ActiveNewPlans)    ","isHidden":false},{"name":"First Year Renewal Rate Orig Not Used","expression":"CALCULATE(DISTINCTCOUNT(SVC_AGMT_HST_CURR[BEN_CTRC_NBR]),                           SVC_AGMT_HST_CURR[SVC_AGMT_STS_CDE] = 'Approved',                           FILTER(SVC_AGMT_HST_CURR, YEAR(SVC_AGMT_HST_CURR[BEG_TMSP]) = YEAR(NOW())-1), SVC_AGMT_HST_CURR[SVC_AGMT_PLAN_YR] = 2,                           FILTER(SVC_AGMT_HST_CURR, YEAR(SVC_AGMT_HST_CURR[ACL_DLIV_DT] ) = YEAR(NOW())-1))/CALCULATE(DISTINCTCOUNT(SVC_AGMT_HST_CURR[BEN_CTRC_NBR]), SVC_AGMT_HST_CURR[SVC_AGMT_STS_CDE] = 'Approved',                           FILTER(SVC_AGMT_HST_CURR, YEAR(SVC_AGMT_HST_CURR[BEG_TMSP]) = YEAR(NOW())-2), SVC_AGMT_HST_CURR[SVC_AGMT_PLAN_YR]=1,                           FILTER(SVC_AGMT_HST_CURR, YEAR(SVC_AGMT_HST_CURR[ACL_DLIV_DT] ) = YEAR(NOW())-2)) ","isHidden":false},{"name":"Current Active Renewals","expression":"var ActiveRenewals =CALCULATE(  DISTINCTCOUNT(\u0027SVC_AGMT\u0027[BEN_CTRC_NBR]),\u0027SVC_AGMT\u0027[CURRENT_STATUS_DESCRIPTION] IN { 'Approved' }, SVC_AGMT[SVC_AGMT_PLAN_YR] \u003c\u003e 0 \u0026\u0026 SVC_AGMT[SVC_AGMT_PLAN_YR] \u003c\u003e 1 )RETURNIF(ISBLANK(ActiveRenewals),0,ActiveRenewals)","isHidden":false}],"source":[{"expression":"let    Source = DB2.Database('PODWH021:50000', 'PODWH021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT BEN_CTRC_NBR,#(lf)       BEN_CTRC_TYP_CDE,#(lf)       SVC_AGMT_PLAN_YR,#(lf)       BEG_TMSP,#(lf)       CASE WHEN SVC_AGMT_TYP_CDE = \u0027PTAGM\u0027 THEN \u0027One Time\u0027#(lf)            WHEN SVC_AGMT_TYP_CDE = \u0027OGAGM\u0027 THEN \u0027Ongoing\u0027#(lf)       END AS SVC_AGMT_TYP_CDE,#(lf)       CTRC_STS_EFF_DT,#(lf)       SVC_AGMT_STS_CDE,#(lf)       CASE WHEN SVC_AGMT_STS_CDE = \u0027A \u0027 THEN \u0027Thrivent Cancel\u0027#(lf)            WHEN SVC_AGMT_STS_CDE = \u0027B \u0027 THEN \u0027Amendment Rejected\u0027#(lf)#(tab)    WHEN SVC_AGMT_STS_CDE = \u0027C \u0027 THEN \u0027Amendment Approved\u0027#(lf)    #(tab)    WHEN SVC_AGMT_STS_CDE = \u0027D \u0027 THEN \u0027Cancel Pending\u0027#(lf)            WHEN SVC_AGMT_STS_CDE = \u0027E \u0027 THEN \u0027Death\u0027#(lf)            WHEN SVC_AGMT_STS_CDE = \u0027F \u0027 THEN \u0027Draft\u0027#(lf)            WHEN SVC_AGMT_STS_CDE = \u0027P \u0027 THEN \u0027Pending Renewal\u0027#(lf)    #(tab)    WHEN SVC_AGMT_STS_CDE = \u0027R \u0027 THEN \u0027Rejected\u0027#(lf)    #(tab)    WHEN SVC_AGMT_STS_CDE = \u0027X \u0027 THEN \u0027Pending Cancel\u0027#(lf)    #(tab)    WHEN SVC_AGMT_STS_CDE = \u00271 \u0027 THEN \u0027Pending\u0027#(lf)    #(tab)    WHEN SVC_AGMT_STS_CDE = \u00272 \u0027 THEN \u0027Approved\u0027#(lf)    #(tab)    WHEN SVC_AGMT_STS_CDE = \u00273 \u0027 THEN \u0027Declined\u0027#(lf)    #(tab)    WHEN SVC_AGMT_STS_CDE = \u00275 \u0027 THEN \u0027Fulfilled\u0027#(lf)    #(tab)    WHEN SVC_AGMT_STS_CDE = \u00276 \u0027 THEN \u0027NIGO\u0027#(lf)    #(tab)    WHEN SVC_AGMT_STS_CDE = \u00277 \u0027 THEN \u0027Amendment Pending\u0027#(lf)    #(tab)    WHEN SVC_AGMT_STS_CDE = \u00278 \u0027 THEN \u0027NSF Pending\u0027#(lf)    #(tab)    WHEN SVC_AGMT_STS_CDE = \u00279 \u0027 THEN \u0027Client Cancel\u0027#(lf)   #(tab)END as Current_Status_Description,#(lf)#(tab)CASE WHEN SVC_AGMT_GRP_CDE = \u0027BUSN\u0027 THEN \u0027Business\u0027#(lf)       #(tab)     WHEN SVC_AGMT_GRP_CDE = \u0027MRRY\u0027 THEN \u0027Married\u0027#(lf)#(tab)     WHEN SVC_AGMT_GRP_CDE = \u0027INDIV\u0027 THEN \u0027Individual\u0027#(lf)#(tab)     WHEN SVC_AGMT_GRP_CDE = \u0027DUAL\u0027 THEN \u0027Dual\u0027#(lf)#(tab)     WHEN SVC_AGMT_GRP_CDE = \u0027TRUST\u0027 THEN \u0027Trust\u0027#(lf)        END AS SVC_AGMT_GRP_CDE,#(lf)        SVC_AGMT_ISS_CDE,#(lf)        APP_DT,#(lf)        ACL_DLIV_DT,#(lf)        -- RMDR_SENT_DT,#(lf)        -- SVC_AGMT_ANV_DT,#(lf)        -- SVC_AGMT_TRMN_DT,#(lf)        -- SVAG_TRMN_RSN_CDE,#(lf)        -- SVAG_TRMN_RSN_TXT,#(lf)        -- CTRC_FLMT_EXT_IND,#(lf)         RCD_STS_CDE#(lf)    FROM CONTRACT.SVC_AGMT#(lf)   WHERE (YEAR(BEG_TMSP) \u003e= YEAR(Current Date)-4)']),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'BEG_TMSP', type date}, {'CTRC_STS_EFF_DT', type date}, {'APP_DT', type date}, {'ACL_DLIV_DT', type date}})in    #'Changed Type'"}]},{"name":"SVAG_ADVR_RLTN","isHidden":false,"storageMode":"Import","columns":[{"name":"BEN_CTRC_NBR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SVC_AGMT_PLAN_YR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"SPLIT_CR_AGT_INDIC","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"AGT_SPLT_PCT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"SVAG_ADVR_RLTN_BEG_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"SVAG_ADVR_RLTN_END_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"RCD_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"END_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"YR","dataType":"String","isHidden":false,"expression":"YEAR(SVAG_ADVR_RLTN[SVAG_ADVR_RLTN_BEG_DT])","columnType":"Calculated"}],"measures":[],"source":[{"expression":"let    Source = DB2.Database('PODWH021:50000', 'PODWH021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT A.BEN_CTRC_NBR, #(lf)       A.EMP_ID, #(lf)       A.SVC_AGMT_PLAN_YR, #(lf)       A.SPLIT_CR_AGT_INDIC,#(lf)       A.AGT_SPLT_PCT,#(lf)       A.SVAG_ADVR_RLTN_BEG_DT,#(lf)       A.SVAG_ADVR_RLTN_END_DT,#(lf)       A.RCD_STS_CDE,#(lf)       A.END_TMSP,#(lf)       A.CRET_TMSP,#(lf)       A.LST_UPDT_TMSP#(lf)  FROM CONTRACT.SVAG_ADVR_RLTN A#(lf)   ']),    #'Removed Columns' = Table.RemoveColumns(Source,{'CRET_TMSP', 'LST_UPDT_TMSP'}),    #'Changed Type' = Table.TransformColumnTypes(#'Removed Columns',{{'SVAG_ADVR_RLTN_BEG_DT', type date}, {'SVAG_ADVR_RLTN_END_DT', type date}, {'END_TMSP', type date}})in    #'Changed Type'"}]},{"name":"SVC_AGMT_HST_CURR","isHidden":false,"storageMode":"Import","columns":[{"name":"BEN_CTRC_NBR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"BEG_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"SVC_AGMT_PLAN_YR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"SVC_AGMT_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CTRC_STS_EFF_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"SVC_AGMT_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SVC_AGMT_GRP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SVC_AGMT_ISS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SVC_AGMT_TRMN_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"SVAG_TRMN_RSN_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ACL_DLIV_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"APP_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"CTRC_FLMT_EXT_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Last Status","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Lag_Time","dataType":"DateTime","isHidden":false,"columnType":"Data"}],"measures":[{"name":"First Year Renewal Rate1_TEST","expression":"  CALCULATE(DISTINCTCOUNT(SVC_AGMT_HST_CURR[BEN_CTRC_NBR]),    \u0027SVC_AGMT_HST_CURR\u0027[SVC_AGMT_STS_CDE] = 'Approved',    --\u0027SVC_AGMT_HST_CURR\u0027[SVC_AGMT_PLAN_YR] = 2,   YEAR(\u0027SVC_AGMT_HST_CURR\u0027[BEG_TMSP]) = YEAR(NOW())-1,   YEAR(\u0027SVC_AGMT_HST_CURR\u0027[ACL_DLIV_DT]) = YEAR(NOW())-1, filter(SVC_AGMT_HST_CURR,SVC_AGMT_HST_CURR[SVC_AGMT_PLAN_YR] = 2)  )--CALCULATE(DISTINCTCOUNT(SVC_AGMT_HST_CURR[BEN_CTRC_NBR]), --                          SVC_AGMT_HST_CURR[SVC_AGMT_STS_CDE] = 'Approved', --                          FILTER(SVC_AGMT_HST_CURR, YEAR(SVC_AGMT_HST_CURR[BEG_TMSP]) = YEAR(NOW())-1), SVC_AGMT_HST_CURR[SVC_AGMT_PLAN_YR] = 2, --                          FILTER(SVC_AGMT_HST_CURR, YEAR(SVC_AGMT_HST_CURR[ACL_DLIV_DT] ) = YEAR(NOW())-1))/CALCULATE(DISTINCTCOUNT(SVC_AGMT_HST_CURR[BEN_CTRC_NBR]), SVC_AGMT_HST_CURR[SVC_AGMT_STS_CDE] = 'Approved', --                          FILTER(SVC_AGMT_HST_CURR, YEAR(SVC_AGMT_HST_CURR[BEG_TMSP]) = YEAR(NOW())-2), SVC_AGMT_HST_CURR[SVC_AGMT_PLAN_YR]=1, --                          FILTER(SVC_AGMT_HST_CURR, YEAR(SVC_AGMT_HST_CURR[ACL_DLIV_DT] ) = YEAR(NOW())-2)) ","isHidden":false},{"name":"First Year Renewal Rate2_TEST","expression":"  CALCULATE(DISTINCTCOUNT(SVC_AGMT_HST_CURR[BEN_CTRC_NBR]),    \u0027SVC_AGMT_HST_CURR\u0027[SVC_AGMT_STS_CDE] = 'Approved',    --\u0027SVC_AGMT_HST_CURR\u0027[SVC_AGMT_PLAN_YR] = 2,   YEAR(\u0027SVC_AGMT_HST_CURR\u0027[BEG_TMSP]) = YEAR(NOW())-2,   YEAR(\u0027SVC_AGMT_HST_CURR\u0027[ACL_DLIV_DT]) = YEAR(NOW())-2, filter(SVC_AGMT_HST_CURR,SVC_AGMT_HST_CURR[SVC_AGMT_PLAN_YR] = 1)  )--CALCULATE(DISTINCTCOUNT(SVC_AGMT_HST_CURR[BEN_CTRC_NBR]), --                          SVC_AGMT_HST_CURR[SVC_AGMT_STS_CDE] = 'Approved', --                          FILTER(SVC_AGMT_HST_CURR, YEAR(SVC_AGMT_HST_CURR[BEG_TMSP]) = YEAR(NOW())-1), SVC_AGMT_HST_CURR[SVC_AGMT_PLAN_YR] = 2, --                          FILTER(SVC_AGMT_HST_CURR, YEAR(SVC_AGMT_HST_CURR[ACL_DLIV_DT] ) = YEAR(NOW())-1))/CALCULATE(DISTINCTCOUNT(SVC_AGMT_HST_CURR[BEN_CTRC_NBR]), SVC_AGMT_HST_CURR[SVC_AGMT_STS_CDE] = 'Approved', --                          FILTER(SVC_AGMT_HST_CURR, YEAR(SVC_AGMT_HST_CURR[BEG_TMSP]) = YEAR(NOW())-2), SVC_AGMT_HST_CURR[SVC_AGMT_PLAN_YR]=1, --                          FILTER(SVC_AGMT_HST_CURR, YEAR(SVC_AGMT_HST_CURR[ACL_DLIV_DT] ) = YEAR(NOW())-2)) ","isHidden":false},{"name":"First Year Renewal %","expression":" var FirstYR = DIVIDE(CALCULATE(DISTINCTCOUNT(SVC_AGMT_HST_CURR[BEN_CTRC_NBR]),    \u0027SVC_AGMT_HST_CURR\u0027[SVC_AGMT_STS_CDE] = 'Approved',    YEAR(\u0027SVC_AGMT_HST_CURR\u0027[BEG_TMSP]) = YEAR(NOW())-1,   YEAR(\u0027SVC_AGMT_HST_CURR\u0027[ACL_DLIV_DT]) = YEAR(NOW())-1, filter(SVC_AGMT_HST_CURR,SVC_AGMT_HST_CURR[SVC_AGMT_PLAN_YR] = 2)  ),   CALCULATE(DISTINCTCOUNT(SVC_AGMT_HST_CURR[BEN_CTRC_NBR]),    \u0027SVC_AGMT_HST_CURR\u0027[SVC_AGMT_STS_CDE] = 'Approved',    YEAR(\u0027SVC_AGMT_HST_CURR\u0027[BEG_TMSP]) = YEAR(NOW())-2,   YEAR(\u0027SVC_AGMT_HST_CURR\u0027[ACL_DLIV_DT]) = YEAR(NOW())-2, filter(SVC_AGMT_HST_CURR,SVC_AGMT_HST_CURR[SVC_AGMT_PLAN_YR] = 1)  ))  Return  IF(ISBLANK(FIRSTYR),0,FIRSTYR)","isHidden":false}],"source":[{"expression":"let    Source = DB2.Database('PODWH021:50000', 'PODWH021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT *, #(lf)       LAG(SVC_AGMT_STS_CDE) OVER (PARTITION BY BEN_CTRC_NBR #(lf)       ORDER BY BEG_TMSP, BEN_CTRC_NBR) AS ''Last Status'', #(lf)       LAG(BEG_TMSP) OVER (PARTITION BY BEN_CTRC_NBR #(lf)       ORDER BY BEG_TMSP, BEN_CTRC_NBR) AS ''Lag_Time''#(lf)#(lf)FROM (#(lf)#(lf)SELECT#(lf)#(tab)BEN_CTRC_NBR#(lf)#(tab), BEG_TMSP#(lf)#(tab), SVC_AGMT_PLAN_YR#(lf)#(tab), CASE#(lf)#(tab)#(tab)When SVC_AGMT_TYP_CDE = \u0027PTAGM\u0027 THEN \u0027One Time\u0027#(lf)#(tab)#(tab)When SVC_AGMT_TYP_CDE = \u0027OGAGM\u0027 then \u0027Ongoing\u0027#(lf)#(tab)#(tab)ELSE SVC_AGMT_TYP_CDE#(lf)#(tab)#(tab)END as SVC_AGMT_TYP_CDE#(lf)#(tab), CTRC_STS_EFF_DT#(lf)#(tab), CASE#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u0027A \u0027 THEN \u0027Thrivent Cancel\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u0027B \u0027 THEN \u0027Amendment Rejected\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u0027C \u0027 THEN \u0027Amendment Approved\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u0027D \u0027 THEN \u0027Cancel Pending\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u0027E \u0027 THEN \u0027Death\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u0027F \u0027 THEN \u0027Draft\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u0027P \u0027 THEN \u0027Pending Renewal\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u0027R \u0027 THEN \u0027Rejected\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u0027X \u0027 THEN \u0027Pending Cancel\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u00271 \u0027 THEN \u0027Pending\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u00272 \u0027 THEN \u0027Approved\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u00273 \u0027 THEN \u0027Declined\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u00275 \u0027 THEN \u0027Fulfilled\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u00276 \u0027 THEN \u0027NIGO\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u00277 \u0027 THEN \u0027Amendment Pending\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u00278 \u0027 THEN \u0027NSF Pending\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u00279 \u0027 THEN \u0027Client Cancel\u0027#(lf)#(tab)#(tab)ELSE SVC_AGMT_STS_CDE#(lf)#(tab)#(tab)END as SVC_AGMT_STS_CDE#(lf)#(tab), CASE#(lf)#(tab)#(tab)When SVC_AGMT_GRP_CDE = \u0027BUSN\u0027 then \u0027Business\u0027#(lf)#(tab)#(tab)When SVC_AGMT_GRP_CDE = \u0027MRRY\u0027 then \u0027Married\u0027#(lf)#(tab)#(tab)When SVC_AGMT_GRP_CDE = \u0027INDIV\u0027 then \u0027Individual\u0027#(lf)#(tab)#(tab)When SVC_AGMT_GRP_CDE = \u0027TRUST\u0027 then \u0027Trust\u0027#(lf)#(tab)#(tab)When SVC_AGMT_GRP_CDE = \u0027DUAL\u0027 then \u0027Dual\u0027#(lf)#(tab)#(tab)ELSE SVC_AGMT_GRP_CDE#(lf)#(tab)#(tab)END as SVC_AGMT_GRP_CDE#(lf)#(tab), SVC_AGMT_ISS_CDE#(lf)#(tab), SVC_AGMT_TRMN_DT#(lf)#(tab), SVAG_TRMN_RSN_CDE#(lf)#(tab), ACL_DLIV_DT#(lf)#(tab), APP_DT#(lf)#(tab), CTRC_FLMT_EXT_IND#(lf)#(lf)FROM CONTRACT.SVC_AGMT_HST #(lf)#(lf)UNION ALL #(lf)#(lf)SELECT#(lf)#(tab)  BEN_CTRC_NBR#(lf)#(tab), BEG_TMSP#(lf)#(tab), SVC_AGMT_PLAN_YR#(lf)#(tab), CASE#(lf)#(tab)#(tab)When SVC_AGMT_TYP_CDE = \u0027PTAGM\u0027 THEN \u0027One Time\u0027#(lf)#(tab)#(tab)When SVC_AGMT_TYP_CDE = \u0027OGAGM\u0027 then \u0027Ongoing\u0027#(lf)#(tab)#(tab)ELSE SVC_AGMT_TYP_CDE#(lf)#(tab)#(tab)END as SVC_AGMT_TYP_CDE#(lf)#(tab), CTRC_STS_EFF_DT#(lf)#(tab), CASE#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u0027A \u0027 THEN \u0027Thrivent Cancel\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u0027B \u0027 THEN \u0027Amendment Rejected\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u0027C \u0027 THEN \u0027Amendment Approved\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u0027D \u0027 THEN \u0027Cancel Pending\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u0027E \u0027 THEN \u0027Death\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u0027F \u0027 THEN \u0027Draft\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u0027P \u0027 THEN \u0027Pending Renewal\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u0027R \u0027 THEN \u0027Rejected\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u0027X \u0027 THEN \u0027Pending Cancel\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u00271 \u0027 THEN \u0027Pending\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u00272 \u0027 THEN \u0027Approved\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u00273 \u0027 THEN \u0027Declined\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u00275 \u0027 THEN \u0027Fulfilled\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u00276 \u0027 THEN \u0027NIGO\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u00277 \u0027 THEN \u0027Amendment Pending\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u00278 \u0027 THEN \u0027NSF Pending\u0027#(lf)#(tab)#(tab)When SVC_AGMT_STS_CDE = \u00279 \u0027 THEN \u0027Client Cancel\u0027#(lf)#(tab)#(tab)ELSE SVC_AGMT_STS_CDE#(lf)#(tab)#(tab)END as SVC_AGMT_STS_CDE#(lf)#(tab), CASE#(lf)#(tab)#(tab)When SVC_AGMT_GRP_CDE = \u0027BUSN\u0027 then \u0027Business\u0027#(lf)#(tab)#(tab)When SVC_AGMT_GRP_CDE = \u0027MRRY\u0027 then \u0027Married\u0027#(lf)#(tab)#(tab)When SVC_AGMT_GRP_CDE = \u0027INDIV\u0027 then \u0027Individual\u0027#(lf)#(tab)#(tab)When SVC_AGMT_GRP_CDE = \u0027TRUST\u0027 then \u0027Trust\u0027#(lf)#(tab)#(tab)When SVC_AGMT_GRP_CDE = \u0027DUAL\u0027 then \u0027Dual\u0027#(lf)#(tab)#(tab)ELSE SVC_AGMT_GRP_CDE#(lf)#(tab)#(tab)END as SVC_AGMT_GRP_CDE#(lf)#(tab), SVC_AGMT_ISS_CDE#(lf)#(tab), SVC_AGMT_TRMN_DT#(lf)#(tab), SVAG_TRMN_RSN_CDE#(lf)#(tab), ACL_DLIV_DT#(lf)#(tab), APP_DT#(lf)#(tab), CTRC_FLMT_EXT_IND#(lf)#(lf)FROM CONTRACT.SVC_AGMT)#(lf)#(lf)WHERE YEAR(BEG_TMSP) \u003e= YEAR(current date) - 3#(lf)#(lf)ORDER BY BEN_CTRC_NBR, BEG_TMSP'])in    Source"}]},{"name":"Categories Sort Table","isHidden":false,"storageMode":"Import","columns":[{"name":"Order","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"Category","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"}],"measures":[],"source":[{"expression":"  UNION(      ROW('Category', 'Connect', 'Order', 1),      ROW('Category', 'Discover', 'Order', 2),      ROW('Category', 'Strategy Call/Meeting', 'Order', 3),      ROW('Category', 'Deliver', 'Order', 4),      ROW('Category', 'Review', 'Order', 5),      ROW('Category', 'Service', 'Order', 6),      ROW('Category', 'Other', 'Order', 7)      )"}]},{"name":"login Table","isHidden":false,"storageMode":"Import","columns":[{"name":"USERID","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"}],"measures":[{"name":"USERIDxx","expression":"USERNAME()","isHidden":false},{"name":"FieldLogon","expression":"CONCATENATE('TS',  LEFT(      RIGHT([USERIDxx],        LEN([USERIDxx])-7),5))","isHidden":false},{"name":"Login_AdGroup","expression":"  var _group = CALCULATE(min(\u0027Role Level Security\u0027[AD Group]),FILTER(\u0027Role Level Security\u0027,\u0027Role Level Security\u0027[EMPLOYEE_TSID]=[FieldLogon]))Return_group","isHidden":false},{"name":"Message_PracticeHlthToggle","expression":" IF(\u0027login Table\u0027[Login_DisplayInd] = TRUE, '', ' ')","isHidden":false},{"name":"Login_DisplayInd","expression":"   --IF(\u0027login Table\u0027[Login_AdGroup] = 'PBI_FLD_RPTG_FR' || \u0027login Table\u0027[Login_AdGroup] = 'PBI_FLD_RPTG_RFOSTF' || \u0027login Table\u0027[Login_AdGroup] = 'PBI_FLD_RPTG_TFGT', FALSE, TRUE)    IF(\u0027login Table\u0027[Login_User] in{'Tina.Timmer@Thrivent.com','Ashley.Allen@Thrivent.com','Brian.Houghton@Thrivent.com','Daniel.Syburg@Thrivent.com','Jacob.Huseby@Thrivent.com','Lori.ZovarLanser@Thrivent.com','omkar.ehani@thrivent.com','Thomas.Blackman@Thrivent.com','bridget.ruckdashel@thrivent.com','Jessica.Johnson@thrivent.com','jon.rodriguez@thrivent.com'},1,0)","isHidden":false},{"name":"ShowHidePracticeHlthToggle","expression":"IF(\u0027login Table\u0027[Login_DisplayInd] = TRUE,'#1C00ff00','White')","isHidden":false},{"name":"Login_User","expression":"USERPRINCIPALNAME()","isHidden":false},{"name":"Login_Display_FldLdrRpt","expression":"IF(\u0027login Table\u0027[Login_User] in {'Tina.Timmer@Thrivent.com','mary.steele@thrivent.com','Ashley.Allen@Thrivent.com','Brian.Houghton@Thrivent.com','Daniel.Syburg@Thrivent.com','Jacob.Huseby@Thrivent.com','Lori.ZovarLanser@Thrivent.com','omkar.ehani@thrivent.com','Thomas.Blackman@Thrivent.com'},1,0)","isHidden":false},{"name":"ShowHideFldLdrRPTToggle","expression":"IF(\u0027login Table\u0027[Login_Display_FldLdrRpt] = 1,'#1C00ff00','White')","isHidden":false},{"name":"Message_FldLdrReportingToggle","expression":" IF(\u0027login Table\u0027[Login_Display_FldLdrRpt] = 1, '', ' ')","isHidden":false}],"source":[{"expression":"       ROW('USERID',' ') "}]},{"name":"Appointment_Averages_National","isHidden":false,"storageMode":"Import","columns":[{"name":"Vital Stats Average Breakout","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Average Appointments Per Customer","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Average Customers Per Appointment","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Total Average Close Rate","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TGR Average Close Rate","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Average TGR Case Size","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Average TGR Contract Efficiency","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Average Appointment Count","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Average Grid Credit Amount","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'select \u0027National\u0027 as ''Vital Stats Average Breakout'',#(lf)       cast(avg(''Person Count'') / avg(''Person Appointment Count'') as decimal(11,4)) as ''Average Appointments Per Customer'',#(lf)       cast(avg(''Person Appointment Count'') / avg(''Appointment Count'') as decimal(11,4)) as ''Average Customers Per Appointment'',#(lf)       cast(avg(''Appointment Count'') as decimal(11,4)) as ''Average Appointment Count'',#(lf)       cast(avg(''GRID Credit Amount'') as decimal(11,4)) as ''Average Grid Credit Amount'',#(lf)       cast(avg(''Person Contract Count'') / avg(''Appointment Count'') as decimal(11,4)) as ''Total Average Close Rate'',#(lf)       cast(avg(''Person Contract GRID Credit Count'') / avg(''Appointment Count'') as decimal(11,4)) as ''TGR Average Close Rate'',#(lf)       cast(avg(''GRID Credit Amount'') / avg(''Person Contract GRID Credit Count'') as decimal(11,4)) as ''Average TGR Case Size'',#(lf)       cast(avg(''GRID Credit Contract Count'') / avg(''Person Contract GRID Credit Count'') as decimal(11,4)) as ''Average TGR Contract Efficiency''#(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Vital Stats Summary Fact''', null, [EnableFolding=true])in    Source"}]},{"name":"DTRB_PERF_DATES","isHidden":false,"storageMode":"Import","columns":[{"name":"DT_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CAL_DAY_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_END_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_WK_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_DAY_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_MTH_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_QTR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PrevWkDt","dataType":"String","isHidden":false,"expression":"if(weekday(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT])=7,[CAL_DAY_DT], [CAL_DAY_DT]-(WEEKDAY([CAL_DAY_DT],1))) ","columnType":"Calculated"},{"name":"Prior YR or Before","dataType":"String","isHidden":false,"expression":"if(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT]\u003eNOW()-367,'N','Y')","columnType":"Calculated"},{"name":"Today or Before","dataType":"String","isHidden":false,"expression":"if(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT]\u003eNOW()-1,'N','Y')","columnType":"Calculated"},{"name":"WorkDayIndex","dataType":"String","isHidden":false,"expression":"If([WeekDay]\u003e 1 \u0026\u0026 [WeekDay] \u003c 7, ([WeekNo]-1)*5 + [WeekDay]-1)","columnType":"Calculated"},{"name":"WeekDay","dataType":"String","isHidden":false,"expression":"WeekDay(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT],1)","columnType":"Calculated"},{"name":"WeekNo","dataType":"String","isHidden":false,"expression":"WEEKNUM([CAL_DAY_DT], 1)","columnType":"Calculated"},{"name":"WorkDayIndex_Test","dataType":"String","isHidden":false,"expression":"IF([WeekDay]\u003e 1 \u0026\u0026 [WeekDay] \u003c 7, ([WeekNo]-1)*5 + [WeekDay]-1,                    IF([WeekDay] = 7, ([WeekNo]-1)*5 + [WeekDay]-2,                    IF([WeekDay] = 1, ([WeekNo]-1)*5 + [WeekDay]-1)))","columnType":"Calculated"},{"name":"Advice Date","dataType":"String","isHidden":false,"expression":"--Allego data turned off 10/10/23var _asof = today()  --var _asof=   -- CALCULATE(Max(Allego_perTSid[asOfDt]))return_asof   ","columnType":"Calculated"},{"name":"End of Year Date","dataType":"String","isHidden":false,"expression":"DATE(YEAR(DTRB_PERF_DATES[CAL_DAY_DT]),12,31)","columnType":"Calculated"},{"name":"Selection Date","dataType":"String","isHidden":false,"expression":"if((DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]=YEAR(NOW()) \u0026\u0026 \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT] \u003c= Now() -1) \u0026\u0026 \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT]  \u003e= \u0027DTRB_PERF_DATES\u0027[BegYR Date], 'Y','N')","columnType":"Calculated"},{"name":"BegYR Date","dataType":"String","isHidden":false,"expression":"DATE(YEAR(DTRB_PERF_DATES[CAL_DAY_DT]),1,1)","columnType":"Calculated"},{"name":"Week Start Date","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Week End Date","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Current Year","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PYTD Flag","dataType":"String","isHidden":false,"expression":"if(and(DTRB_PERF_DATES[CAL_DAY_DT] \u003c= DATE(YEAR([Yesterday\u0027s date])-1,MONTH([Yesterday\u0027s date]),DAY([Yesterday\u0027s date])), DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR] = year(today())-1), True, False)","columnType":"Calculated"},{"name":"Yesterday\u0027s date","dataType":"String","isHidden":false,"expression":"today()-1","columnType":"Calculated"}],"measures":[{"name":"Todays_WKDAY","expression":"CALCULATE(var todayno=max(\u0027DTRB_PERF_DATES\u0027[WorkDayIndex])returntodayno, \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT]=TODAY())","isHidden":false},{"name":"Todays_WKDAY_testxx","expression":"CALCULATE(var todayno=max(\u0027DTRB_PERF_DATES\u0027[WorkDayIndex])returntodayno, \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT]=TODAY())","isHidden":false},{"name":"Ashley_Test","expression":"CALCULATE(var todayno=max(\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_WK_NBR])returntodayno, \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT]=TODAY())","isHidden":false},{"name":"Year Selected","expression":"'Year Selected: ' \u0026 SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR])","isHidden":false}],"source":[{"expression":"let    Source = DB2.Database('PODWH021:50000', 'PODWH021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT A.DT_SK, #(lf)       A.CAL_DAY_DT, #(lf)       A.DTRB_PERF_RPT_WK_END_DT, #(lf)       A.DTRB_PERF_RPT_WK_NBR,#(lf)       A.DTRB_PERF_RPT_YR_NBR,#(lf)       A.DTRB_PERF_RPT_YR_WK_NBR,#(lf)      -- A.SRC_SYS_ID, #(lf)      -- A.CRET_TMSP, #(lf)      -- A.LST_UPDT_TMSP, #(lf)      -- A.CRET_USER_ID, #(lf)      -- A.LST_UPDT_USER_ID, #(lf)       A.DTRB_PERF_RPT_DAY_TXT, #(lf)       A.DTRB_PERF_RPT_MTH_TXT, #(lf)       A.DTRB_PERF_RPT_QTR_TXT, #(lf)       A.DTRB_PERF_RPT_WK_TXT,#(lf)       A.DTRB_PERF_RPT_YR_TXT,#(lf)       B.CAL_WK_STRT_DT,#(lf)       B.CAL_WK_END_DT #(lf)  FROM COMMON.DTRB_PERF_DATES  AS A INNER JOIN#(lf)       COMMON.IA_DATES_ITRL AS B#(lf)    ON A.DT_SK=B.DT_SK#(lf) WHERE A.DTRB_PERF_RPT_YR_NBR IN (2022, 2023,2024)#(lf)    #(lf)']),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'CAL_DAY_DT', type date}, {'DTRB_PERF_RPT_WK_END_DT', type date}, {'CAL_WK_STRT_DT', type date}, {'CAL_WK_END_DT', type date}}),    #'Added Custom' = Table.AddColumn(#'Changed Type', 'Week Start Date', each Date.AddDays([CAL_WK_STRT_DT],1)),    #'Added Custom1' = Table.AddColumn(#'Added Custom', 'Week End Date', each Date.AddDays([CAL_WK_END_DT],1)),    #'Removed Columns' = Table.RemoveColumns(#'Added Custom1',{'CAL_WK_STRT_DT', 'CAL_WK_END_DT'}),    #'Added Custom2' = Table.AddColumn(#'Removed Columns', 'Current Year', each if Date.Year(DateTime.LocalNow()) = [DTRB_PERF_RPT_YR_NBR] then 'Current Year' else [DTRB_PERF_RPT_YR_NBR])in    #'Added Custom2'"}]},{"name":"Teams","isHidden":false,"storageMode":"Import","columns":[{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TEAM_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TEAM_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EFF_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"teamind","dataType":"String","isHidden":false,"expression":" IF(ISBLANK(Teams[TEAM_NM]),0,1)","columnType":"Calculated"},{"name":"Team Name-del","dataType":"String","isHidden":false,"expression":"  var _TeamName = Teams[TEAM_NM]return_TeamName -- if(isblank(_TeamName),' ',_TeamName)","columnType":"Calculated"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LICENSE_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SELLING_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_TEAM_ROLE_CDE","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Team Name","expression":"  var _TeamName = SELECTEDVALUE(Teams[TEAM_NM])returnif(ISBLANK(_TeamName),' ',_TeamName)","isHidden":false},{"name":"Message_txtTeams","expression":"IF(  SELECTEDVALUE(Teams[TEAM_NM]) \u003c\u003e ' ','',' ')  ","isHidden":false},{"name":"Display_VitalStats_Teaming","expression":"IF([TeamNmFiltered]=1,'',' ')","isHidden":false},{"name":"ShowHide_TeamVitalStats","expression":"IF([TeamNmFiltered]=1, 'White','#1C00ff00' )","isHidden":false},{"name":"Message_txt_VitalStats_Teams","expression":"IF([TeamNmFiltered]=1,'Team Total','')","isHidden":false},{"name":"ShowHide_TeamTxtVitalStats","expression":"IF([TeamNmFiltered]=1, 'White','#1C00ff00' )","isHidden":false},{"name":"Message_txtTeams_PerfMetric","expression":"IF(  SELECTEDVALUE(Teams[TEAM_NM]) \u003c\u003e '',' ','')  ","isHidden":false},{"name":"ShowHide_TeamTxtPerfMetrics","expression":"IF([TeamNmFiltered]=0, 'White','#1C00ff00' )","isHidden":false},{"name":"Total Team Members","expression":"count(Teams[EMP_ID])+0","isHidden":false},{"name":"Total Team Selling Members","expression":"calculate(count(Teams[EMP_ID])+0,Teams[SELLING_IND] = 'Y')","isHidden":false},{"name":"Total Team Non-Selling Members","expression":"calculate(count(Teams[EMP_ID])+0,Teams[SELLING_IND] = 'N')","isHidden":false},{"name":"Team Total Message","expression":"IF([TeamNmFiltered] = 1, '* Team Totals are distinct totals', ' ')--DisplayFilteredTeam = -- var teamnm = IF([TeamNmFiltered]=1,VALUES(Teams[TEAM_NM]),' ')--var teamnm = IF([TeamNmFiltered]=1,VALUES(Producer_Snowflake[Team Name]),' ') --return-- IF(ISBLANK(teamnm),' ', teamnm)","isHidden":false},{"name":"HH Avg Per Team","expression":"  var _total =  CALCULATE(DIVIDE(\u0027Client_HHLD\u0027[Total Health Households],\u0027Teams\u0027[Total Team Members]))ReturnIF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"HH Avg Per Selling Advisor","expression":"  var _total =  CALCULATE(DIVIDE(\u0027Client_HHLD\u0027[Total Health Households],\u0027Teams\u0027[Total Team Selling Members]))ReturnIF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"Hide Visual","expression":"   IF(      [EmployeeNmFiltered],      1,      0   )","isHidden":false},{"name":"Make Transparent","expression":"      IF(SELECTEDVALUE(\u0027Producer_Snowflake\u0027[Team Indicator]) = 0,        'White',        '#FFFFFF00'  -- returns transparent if Check Filtered is True               )","isHidden":false},{"name":"ShowHidePraticeHealthTeamTitle","expression":"IF(\u0027Teams\u0027[Team Name] = ' ',' ', 'Team')  --\u0027Teams\u0027[Team Name] = ' ' ),' ', 'Team')","isHidden":false},{"name":"ShowHidePracticeHealthTeamBackground","expression":"if(\u0027Producer_Snowflake\u0027[TeamNmFiltered] = 0,'White', '#FFFFFF00')","isHidden":false}],"source":[{"expression":"let    Source = DB2.Database('PODWH021:50000', 'PODWH021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT A.EMP_ID,#(lf)       C.EMP_NM,#(lf)       C.JOB_TYP_CDE,#(lf)       C.JOB_TYP_DSCR,#(lf)       c.orzn_dept_cde as TAG,#(lf)       c.orzn_dept_dscr as TAG_NM,#(lf)       dd.License_IND,#(lf)       dd.Selling_ind,#(lf)       B.TEAM_ID,#(lf)       B.TEAM_NM, #(lf)       A.EMP_TEAM_ROLE_CDE,#(lf)       A.EFF_DT#(lf)  FROM HUMAN_RESOURCES.EMP_TEAM_ORZN_RLTN_CURR_VW A INNER JOIN #(lf)       HUMAN_RESOURCES.TEAM_ORZN_CURR_VW B #(lf)    ON (A.TEAM_ID_SK = B.TEAM_ID_SK) INNER JOIN#(lf)       HUMAN_RESOURCES.CNF_EMP_DIM_DTL_CURR_CFDL C#(lf)    ON (A.EMP_ID=C.EMP_ID) left join#(lf)       (SELECT d.EMP_ID, #(lf)               case when d.S1_LIC_STS_CDE = \u0027Y\u0027 or #(lf)                         d.S4_LIC_STS_CDE = \u0027Y\u0027 or#(lf)#(tab)                 d.S6_LIC_STS_CDE = \u0027Y\u0027 or #(lf)#(tab)#(tab)         d.S7_LIC_STS_CDE = \u0027Y\u0027 or #(lf)#(tab)#(tab)         d.S9_LIC_STS_CDE = \u0027Y\u0027 or #(lf)#(tab)#(tab)         d.S10_LIC_STS_CDE = \u0027Y\u0027 or #(lf)#(tab)#(tab)         d.S22_LIC_STS_CDE = \u0027Y\u0027 or #(lf)#(tab)#(tab)         d.S24_LIC_STS_CDE = \u0027Y\u0027 or #(lf)#(tab)#(tab)         d.S26_LIC_STS_CDE = \u0027Y\u0027 or #(lf)#(tab)#(tab)         d.S27_LIC_STS_CDE = \u0027Y\u0027 or #(lf)#(tab)#(tab)         d.S51_LIC_STS_CDE = \u0027Y\u0027 or #(lf)#(tab)#(tab)         d.S53_LIC_STS_CDE = \u0027Y\u0027 or #(lf)#(tab)#(tab)         d.S62_LIC_STS_CDE = \u0027Y\u0027 or #(lf)#(tab)#(tab)         d.S63_LIC_STS_CDE = \u0027Y\u0027 or #(lf)#(tab)#(tab)         d.S65_LIC_STS_CDE = \u0027Y\u0027 or #(lf)#(tab)#(tab)         d.S66_LIC_STS_CDE = \u0027Y\u0027 or #(lf)#(tab)#(tab)         d.S86_LIC_STS_CDE = \u0027Y\u0027 or #(lf)#(tab)#(tab)         d.S87_LIC_STS_CDE = \u0027Y\u0027  then \u0027Y\u0027#(lf)#(tab)#(tab)    else \u0027N\u0027#(lf)#(tab)#(tab) end as License_IND,#(lf)#(tab)#(tab) case when d.job_typ_cde in (\u0027001000\u0027,\u0027001001\u0027,\u0027001004\u0027,\u0027001005\u0027,\u0027001007\u0027,\u0027001011\u0027,\u0027001700\u0027,\u0027001705\u0027,\u0027001500\u0027,#(lf)#(tab)#(tab)#(tab)#(tab)             \u0027001505\u0027,\u0027001506\u0027,\u0027001507\u0027,\u0027001508\u0027,\u0027001510\u0027,\u0027001511\u0027,\u0027001512\u0027,\u0027003100\u0027,\u0027003500\u0027,#(lf)#(tab)#(tab)#(tab)#(tab)#(tab)     \u0027002010\u0027,\u0027002000\u0027,\u0027002016\u0027,\u0027002003\u0027,\u0027002011\u0027,\u0027002012\u0027,\u0027002024\u0027,\u0027002025\u0027,\u0027002016\u0027,#(lf)                                             \u0027002020\u0027,\u0027002021\u0027,\u0027002022\u0027,\u0027002018\u0027,\u0027002019\u0027) then \u0027Y\u0027#(lf)                    else \u0027N\u0027#(lf)                 end as SELLING_IND  #(lf)          FROM HUMAN_RESOURCES.WKFC_DIM_DTL_ITRL as d#(lf)         WHERE d.CURR_ROW_IND = \u0027Y\u0027 #(lf)           AND d.EMP_STS_TYP_CDE IN (\u0027A\u0027,\u0027I\u0027,\u0027L\u0027)#(lf)           and substr(d.emp_id,1,2)=\u0027TS\u0027) as dd#(lf)#(tab) on a.emp_id = dd.emp_id#(lf) WHERE B.EFF_STS_CDE = \u0027A\u0027#(lf)   AND C.EMP_STS_TYP_CDE = \u0027A\u0027 #(lf)   AND A.TEAM_MBR_ACTN_CDE \u003c\u003e \u0027DROP\u0027 #(lf)   AND b.TEAM_PRPS_CDE NOT in (\u0027COAC\u0027,\u0027ENSB\u0027) #(lf)   AND A.EFF_DT=(SELECT MAX(aa.EFF_DT)#(lf)                   FROM HUMAN_RESOURCES.EMP_TEAM_ORZN_RLTN_CURR_VW AA INNER JOIN #(lf)                        HUMAN_RESOURCES.TEAM_ORZN_CURR_VW BB #(lf)                     ON (AA.TEAM_ID_SK = BB.TEAM_ID_SK AND A.EMP_ID=AA.EMP_ID) INNER JOIN#(lf)#(tab)                HUMAN_RESOURCES.CNF_EMP_DIM_DTL_CURR_CFDL CC#(lf)#(tab)             ON (aa.emp_id=cc.emp_id )       #(lf)                  WHERE bb.EFF_STS_CDE = \u0027A\u0027 #(lf)                    AND CC.EMP_STS_TYP_CDE = \u0027A\u0027#(lf)                    AND AA.TEAM_MBR_ACTN_CDE \u003c\u003e \u0027DROP\u0027 #(lf)                    AND bb.TEAM_PRPS_CDE NOT in (\u0027COAC\u0027,\u0027ENSB\u0027))#(lf)    ORDER BY A.EMP_ID']),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'EFF_DT', type date}}),    #'Capitalized Each Word' = Table.TransformColumns(#'Changed Type',{{'TEAM_NM', Text.Proper, type text}})in    #'Capitalized Each Word'"}]},{"name":"SelectionSwitch","isHidden":false,"storageMode":"Import","columns":[{"name":"SelectedID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Selected_NM","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i45WMlTSUfLMS8ksy0wpTcxRitWJVjICCoWkJuYqxcYCAA==', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [SelectedID = _t, Selected_NM = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'SelectedID', Int64.Type}, {'Selected_NM', type text}})in    #'Changed Type'"}]},{"name":"NFC","isHidden":false,"storageMode":"Import","columns":[{"name":"Financial Customer Point Status Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Financial Customer Point Value","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CUST_LGAL_FMT_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Contract Issue Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Level 3 Product Line Of Business Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Level 3 Product Line Of Business Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TS ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Calendar Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Financial Customer Point Reason Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Financial Customer Point Reason Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Financial Customer Point Relationship Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Financial Customer Point Relationship Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Year Number","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PYTD NFC Flag","dataType":"String","isHidden":false,"expression":" if(and(\u0027NFC\u0027[Calendar Date] \u003c= DATE(YEAR(today())-1,MONTH(today()),DAY(today())), \u0027NFC\u0027[Distribution Performance Reporting Year Number] = YEAR(today())-1), 1, 0)","columnType":"Calculated"},{"name":"YTD NFC Flag","dataType":"String","isHidden":false,"expression":"if(and(\u0027NFC\u0027[Calendar Date] \u003c= DATE(YEAR(today()),MONTH(today()),DAY(today())),YEAR(\u0027NFC\u0027[Calendar Date]) = YEAR(today())), 1, 0)","columnType":"Calculated"},{"name":"PY2TD NFC Flag","dataType":"String","isHidden":false,"expression":" if(and(\u0027NFC\u0027[Calendar Date] \u003c= DATE(YEAR(today())-2,MONTH(today()),DAY(today())), \u0027NFC\u0027[Distribution Performance Reporting Year Number] = YEAR(today())-2), 1, 0)","columnType":"Calculated"},{"name":"PY NFC Flag","dataType":"String","isHidden":false,"expression":"if(NFC[DTRB_PERF_RPT_YR_TXT] = 'Previous', 1,0) ","columnType":"Calculated"},{"name":"PY2 NFC Flag","dataType":"String","isHidden":false,"expression":" var py_start = CALCULATE(MIN(\u0027NFC\u0027[Calendar Date]),ALLEXCEPT(\u0027NFC\u0027,\u0027NFC\u0027[DTRB_PERF_RPT_YR_TXT]),all(\u0027NFC\u0027),\u0027NFC\u0027[DTRB_PERF_RPT_YR_TXT]='Previous') var py_end = CALCULATE(MAX(\u0027NFC\u0027[Calendar Date]),ALLEXCEPT(\u0027NFC\u0027,\u0027NFC\u0027[DTRB_PERF_RPT_YR_TXT]),all(\u0027NFC\u0027),\u0027NFC\u0027[DTRB_PERF_RPT_YR_TXT]='Previous') var py2_start= date(year(py_start)-1,month(py_start),day(py_start)) var py2_end= date(year(py_end)-1,month(py_end),day(py_end)) var flagind = if(\u0027NFC\u0027[Calendar Date] \u003c= py2_end \u0026\u0026 \u0027NFC\u0027[Calendar Date] \u003e= py2_start,1, 0)Returnflagind","columnType":"Calculated"},{"name":"CUST_ID_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"EMPL_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Client Service Group","dataType":"String","isHidden":false,"expression":"related(\u0027ClientServiceGroup\u0027[SERVICEGROUP])","columnType":"Calculated"}],"measures":[{"name":"PY New Clients","expression":"--var _total=CALCULATE(sum(\u0027NFC\u0027[Financial Customer Point Value]), \u0027NFC\u0027[PY NFC Flag] = 1)--var _total=CALCULATE(sum(\u0027NFC\u0027[Financial Customer Point Value]),\u0027NFC\u0027[DTRB_PERF_RPT_YR_TXT]='Previous')--RETURN--if(isblank(_total),0,_total)--Updated 1/26/2022var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT])var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])var _total = calculate(sum(\u0027NFC\u0027[Financial Customer Point Value]),DTRB_PERF_DATES[CAL_DAY_DT] \u003e= (min_date-365),DTRB_PERF_DATES[CAL_DAY_DT] \u003c= (max(\u0027DTRB_PERF_DATES\u0027[End of Year Date])-365))Returnif(isblank(_total),0,_total)","isHidden":false},{"name":"PY2 New Clients","expression":"var _total=CALCULATE(sum(\u0027NFC\u0027[Financial Customer Point Value]), \u0027NFC\u0027[PY2 NFC Flag] = 1)RETURNif(isblank(_total),0,_total)","isHidden":false},{"name":"PY2TD New Clients","expression":"var cy_start = CALCULATE(MIN(\u0027NFC\u0027[Calendar Date]),ALLEXCEPT(\u0027NFC\u0027,\u0027NFC\u0027[DTRB_PERF_RPT_YR_TXT]),all(\u0027NFC\u0027),\u0027NFC\u0027[DTRB_PERF_RPT_YR_TXT]='Current')var cy_end = CALCULATE(MAX(\u0027NFC\u0027[Calendar Date]),ALLEXCEPT(\u0027NFC\u0027,\u0027NFC\u0027[DTRB_PERF_RPT_YR_TXT]),all(\u0027NFC\u0027),\u0027NFC\u0027[DTRB_PERF_RPT_YR_TXT]='Current')var py2_start = date(YEAR(cy_start)-2,MONTH(cy_start),DAY(cy_start))var py2_end = DATE(YEAR(cy_end)-2,MONTH(cy_end),DAY(cy_end))var _total = CALCULATE(SUM(\u0027NFC\u0027[Financial Customer Point Value]), \u0027NFC\u0027, \u0027NFC\u0027[Calendar Date] \u003c= py2_end \u0026\u0026 \u0027NFC\u0027[Calendar Date] \u003e= py2_start)RETURNif(isblank(_total),0,_total)","isHidden":false},{"name":"PYTD New Clients","expression":"--var _total=CALCULATE(sum(\u0027NFC\u0027[Financial Customer Point Value]), \u0027NFC\u0027[PYTD NFC Flag] = 1)--var _total=CALCULATE(sum(\u0027NFC\u0027[Financial Customer Point Value]), \u0027NFC\u0027[DTRB_PERF_RPT_YR_TXT]='Previous')--RETURN--if(isblank(_total),0,_total)--Updated 1/26/2022var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT]) var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])var _total = calculate(sum(\u0027NFC\u0027[Financial Customer Point Value]),DTRB_PERF_DATES[CAL_DAY_DT] \u003e= (min_date-365),DTRB_PERF_DATES[CAL_DAY_DT] \u003c= (max_date-365))Returnif(isblank(_total),0,_total)","isHidden":false},{"name":"YOY Change","expression":"  VAR __BASELINE_VALUE = [PYTD New Clients]  VAR __VALUE_TO_COMPARE = [YTD New Clients]  var _total =    IF(        NOT ISBLANK(__VALUE_TO_COMPARE),        DIVIDE(__VALUE_TO_COMPARE - __BASELINE_VALUE, __BASELINE_VALUE)    )Returnif(isblank(_total),0,_total)","isHidden":false},{"name":"YTD New Clients","expression":"--var _total=CALCULATE(sum(\u0027NFC\u0027[Financial Customer Point Value]), \u0027NFC\u0027[YTD NFC Flag] = 1)--var cy_start = CALCULATE(MIN(\u0027NFC\u0027[Calendar Date]),ALLEXCEPT(\u0027NFC\u0027,\u0027NFC\u0027[DTRB_PERF_RPT_YR_TXT]),all(\u0027NFC\u0027),\u0027NFC\u0027[DTRB_PERF_RPT_YR_TXT]='Current')--var cy_end = CALCULATE(MAX(\u0027NFC\u0027[Calendar Date]),ALLEXCEPT(\u0027NFC\u0027,\u0027NFC\u0027[DTRB_PERF_RPT_YR_TXT]),all(\u0027NFC\u0027),\u0027NFC\u0027[DTRB_PERF_RPT_YR_TXT]='Current')--var nfc_sum=calculate(sum(\u0027NFC\u0027[Financial Customer Point Value]), \u0027NFC\u0027[Calendar Date] \u003c= cy_end \u0026\u0026 \u0027NFC\u0027[Calendar Date] \u003e= cy_start)--var _total=CALCULATE(sum(\u0027NFC\u0027[Financial Customer Point Value]), \u0027NFC\u0027[DTRB_PERF_RPT_YR_TXT]='Current')--RETURN--if(isblank(_total),0,_total)--CALCULATE(SUM(NFC[Financial Customer Point Value]), NFC, NFC[Calendar Date] \u003c= cy_end \u0026\u0026 NFC[Calendar Date] \u003e= cy_start)--Updated 1/26/2022 var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT]) var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT]) var _total = calculate(sum(\u0027NFC\u0027[Financial Customer Point Value]),DTRB_PERF_DATES[CAL_DAY_DT] \u003e= min_date,DTRB_PERF_DATES[CAL_DAY_DT] \u003c= max_date)Return IF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"YTD Health New Clients","expression":"  var _total=    CALCULATE    (SUM(NFC[Financial Customer Point Value]),      Year(\u0027NFC\u0027[Calendar Date]) = YEAR(TODAY()))ReturnIF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"YTD Health New Clients PH Comp","expression":"  var _YRSelected = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR])  var _total=    CALCULATE    (SUM(NFC[Financial Customer Point Value]),      Year(\u0027NFC\u0027[Calendar Date]) = SELECTEDVALUE(\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR]))ReturnIF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"Total New Clients","expression":"  var _total =  CALCULATE    (sumx(\u0027NFC\u0027,\u0027NFC\u0027[Financial Customer Point Value]),        --SUMX(DISTINCT(\u0027NFC\u0027[CUST_ID_NBR]), 1),    \u0027DTRB_PERF_DATES\u0027[Today or Before] = 'Y')ReturnIF(ISBLANK(_total),0,_total) ","isHidden":false}],"source":[{"expression":"let    Source = DB2.Database('PODWH021:50000', 'PODWH021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT --IA_DATES_ITRL.DT_SK as ''Date Surrogate Key'',#(lf)      -- TF_FIN_CUST_EVT_FCT_CFDL.CTRC_VRSN_NBR as ''Contract Version Number'',#(lf)      -- TF_FIN_CUST_EVT_FCT_CFDL.WRTG_AGT_VRSN_NBR as ''Writing Agent Version Number'',#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_STS_CDE as ''Financial Customer Point Status Code'',#(lf)      -- TF_FIN_CUST_EVT_FCT_CFDL.CUST_AGE as ''Financial Customer Age'',#(lf)      -- TF_FIN_CUST_EVT_FCT_CFDL.AGE_CLAS_CDE as ''Age Class Code'',#(lf)      -- TF_FIN_CUST_EVT_FCT_CFDL.AGE_CLAS_DSCR as ''Age Class Description'',#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_VLU as ''Financial Customer Point Value'',#(lf)       CNF_CUSTOMER_DIM_CFDL.CUST_ID_NBR,#(lf)       CNF_CUSTOMER_DIM_CFDL.CUST_LGAL_FMT_NM, #(lf)       --CNF_CUSTOMER_DIM_CFDL.CUST_BRTH_DT,#(lf)      -- CNF_CUSTOMER_DIM_CFDL.MBR_TYP_CDE as ''Member Type Code'',#(lf)      -- CNF_CUSTOMER_DIM_CFDL.MBR_TYP_DSCR as ''Member Type Description'',#(lf)      -- CNF_CUSTOMER_DIM_CFDL.RSDL_ST_CDE as ''Residential State Code'',#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.CTRC_ISS_DT as ''Contract Issue Date'', #(lf)      -- CNF_CONTRACT_DIM_DTL_CFDL.L5_PLOB_SGRP_CDE as ''Level 5 Product Line Of Business Subgroup Code'',#(lf)      -- CNF_CONTRACT_DIM_DTL_CFDL.L5_PLOB_SGRP_DSCR as ''Level 5 Product Line Of Business Subgroup Description'',#(lf)      -- CNF_CONTRACT_DIM_DTL_CFDL.L4_PLOB_GRP_CDE as ''Level 4 Product Line Of Business Group Code'',#(lf)      -- CNF_CONTRACT_DIM_DTL_CFDL.L4_PLOB_GRP_DSCR as ''Level 4 Product Line Of Business Group Description'',#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L3_PROD_LOB_CDE as ''Level 3 Product Line Of Business Code'',#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L3_PROD_LOB_DSCR as ''Level 3 Product Line Of Business Description'',#(lf)     --  CNF_CONTRACT_DIM_DTL_CFDL.L2_PROD_CHAR_CDE as ''Level 2 Product Character Code'',#(lf)      -- CNF_CONTRACT_DIM_DTL_CFDL.L2_PROD_CHAR_DSCR as ''Level 2 Product Character Description'',#(lf)      -- AGT_DIM_CURR_CFDL.PARY_DSPL_2_NM as ''Assigned FR'',#(lf)      -- AGT_DIM_CURR_CFDL.FRST_NM as ''Employee First Name'',#(lf)      -- AGT_DIM_CURR_CFDL.MDDL_NM as ''Employee Middle Name'',#(lf)      -- AGT_DIM_CURR_CFDL.LST_NM as ''Employee Last Name'',#(lf)      AGT_DIM_CURR_CFDL.FRST_NM || \u0027 \u0027 || AGT_DIM_CURR_CFDL.LST_NM as EMPL_NM,#(lf)      -- AGT_DIM_CURR_CFDL.ADJ_SVC_DT as ''Adjusted Service Date'',#(lf)       AGT_DIM_CURR_CFDL.EMP_ID as ''TS ID'',#(lf)      -- AGT_DIM_CURR_CFDL.EMP_STS_TYP_CDE as ''Employee Status Type Code'',#(lf)      -- AGT_DIM_CURR_CFDL.EMP_STS_TYP_DSCR as ''Employee Status Type Description'',#(lf)      -- AGT_DIM_CURR_CFDL.JOB_TYP_CDE as ''Job Type Code'',#(lf)      -- AGT_DIM_CURR_CFDL.JOB_TYP_DSCR as ''Job Type Description'',#(lf)      -- AGT_DIM_CURR_CFDL.CURR_ROW_IND as ''Current Row Indicator Sales Hierarchy'',#(lf)       IA_DATES_ITRL.CAL_DAY_DT as ''Calendar Date'',#(lf)       --IA_DATES_ITRL.CAL_MTH_NM,#(lf)      -- IA_DATES_ITRL.CAL_MTH_STRT_DT as ''Calendar Month State Date'',#(lf)      -- IA_DATES_ITRL.CAL_MTH_END_DT as ''Calendar Month End Date'',#(lf)       --IA_DATES_ITRL.CAL_YR_QTR_NBR,#(lf)       --IA_DATES_ITRL.CAL_QTR_NM,#(lf)       --IA_DATES_ITRL.CAL_WK_NM,#(lf)       FIN_CUST_ELIG_DIM_CFDL.FIN_CUST_PNT_RSN_CDE as ''Financial Customer Point Reason Code'',#(lf)       FIN_CUST_ELIG_DIM_CFDL.FIN_CUST_PNT_RSN_DSCR as ''Financial Customer Point Reason Description'',#(lf)       FIN_CUST_ELIG_DIM_CFDL.CTRC_RLTN_TYP_CDE as ''Financial Customer Point Relationship Code'',#(lf)       FIN_CUST_ELIG_DIM_CFDL.CTRC_RLTN_TYP_DSCR as ''Financial Customer Point Relationship Description'',#(lf)      -- CASE#(lf)      --    WHEN (CUST_AGE \u003e= 0) AND (CUST_AGE \u003c= 15) THEN \u00270-15\u0027#(lf)      --    WHEN (CUST_AGE \u003e= 16) AND (CUST_AGE \u003c= 25) THEN \u002716-25\u0027#(lf)      --    WHEN (CUST_AGE \u003e= 26) AND (CUST_AGE \u003c= 35) THEN \u002726-35\u0027#(lf)      --    WHEN (CUST_AGE \u003e= 36) AND (CUST_AGE \u003c= 45) THEN \u002736-45\u0027#(lf)      --    WHEN (CUST_AGE \u003e= 46) AND (CUST_AGE \u003c= 55) THEN \u002746-55\u0027#(lf)      --    WHEN (CUST_AGE \u003e= 56) AND (CUST_AGE \u003c= 65) THEN \u002756-65\u0027#(lf)      --    WHEN (CUST_AGE \u003e= 66) AND (CUST_AGE \u003c= 75) THEN \u002766-75\u0027#(lf)      --    WHEN CUST_AGE \u003e 75 THEN \u002776+\u0027#(lf)      -- END#(lf)      --    AS ''Financial Customer Age Group'',#(lf)      -- integer (floor ( (CURRENT DATE - CUST_BRTH_DT) / 10000)) AS ''Member Age'',#(lf)      -- DTRB_PERF_DATES.DTRB_PERF_RPT_WK_END_DT as ''Distribution Performance Reporting Week End Date'',#(lf)      -- DTRB_PERF_DATES.DTRB_PERF_RPT_WK_NBR as ''Distribution Performance Reporting Week Number'',#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_YR_NBR as ''Distribution Performance Reporting Year Number'',#(lf)      -- DTRB_PERF_DATES.DTRB_PERF_RPT_YR_WK_NBR as ''Distribution Performance Reporting Year Week Number'',#(lf)      -- DTRB_PERF_DATES.DTRB_PERF_RPT_WK_TXT,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_YR_TXT #(lf)     --  DTRB_PERF_DATES.DTRB_PERF_RPT_DAY_TXT,#(lf)     --  DTRB_PERF_DATES.DTRB_PERF_RPT_MTH_TXT,#(lf)     --  DTRB_PERF_DATES.DTRB_PERF_RPT_QTR_TXT,#(lf)     --  SALE_HIER_DIM.SALE_HIER_ID as ''Sales Hierarchy Identifier'' #(lf)      -- SALE_HIER_DIM.EFF_BEG_TMSP as ''Effective Begin Timestamp'',#(lf)      -- SALE_HIER_DIM.EFF_END_TMSP as ''Effective End Timestamp'',#(lf)      -- SALE_HIER_DIM.CURR_ROW_IND as ''Agent Current Row Indicator'',#(lf)      -- SALE_HIER_DIM.PRTR_NM as ''Partner Name'',#(lf)      -- SALE_HIER_DIM.MANP_NM as ''Managing Partner Name'',#(lf)      -- SALE_HIER_DIM.ORZN_ZONE_CDE as ''Market'',#(lf)      -- SALE_HIER_DIM.ORZN_ZONE_DSCR as ''Organization Zone Description'',#(lf)      -- SALE_HIER_DIM.ORZN_DEPT_CDE as ''RFO'',#(lf)      -- SALE_HIER_DIM.ORZN_DEPT_DSCR as ''Organization Department Description'',#(lf)      -- SALE_HIER_DIM.ORZN_DIV_CDE as ''Organization Division Code'',#(lf)      -- SALE_HIER_DIM.ORZN_DIV_DSCR as ''Organization Division Description'',#(lf)      -- SALE_HIER_DIM.SALE_HIER_DIM_SK as ''Sales Hierarchy Dimension Surrogate Key''#(lf)#(lf)  FROM ((((((COMMON.IA_DATES_ITRL IA_DATES_ITRL INNER JOIN#(lf)             COMMON.DTRB_PERF_DATES DTRB_PERF_DATES#(lf)          ON (IA_DATES_ITRL.DT_SK = DTRB_PERF_DATES.DT_SK)) LEFT OUTER JOIN#(lf)             SALES.TF_FIN_CUST_EVT_FCT_CFDL TF_FIN_CUST_EVT_FCT_CFDL#(lf)          ON (IA_DATES_ITRL.DT_SK = TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_CRNG_DT_SK)) RIGHT OUTER JOIN#(lf)             HUMAN_RESOURCES.SALE_HIER_DIM SALE_HIER_DIM#(lf)          ON (SALE_HIER_DIM.SALE_HIER_DIM_SK = TF_FIN_CUST_EVT_FCT_CFDL.SLHR_DIM_CURR_CRNG_AGT_SK)) LEFT OUTER JOIN#(lf)             MEMBER.CNF_CUSTOMER_DIM_CFDL CNF_CUSTOMER_DIM_CFDL#(lf)          ON (CNF_CUSTOMER_DIM_CFDL.CUST_SK = TF_FIN_CUST_EVT_FCT_CFDL.CUST_SK)) LEFT OUTER JOIN#(lf)             HUMAN_RESOURCES.AGT_DIM_CURR_CFDL AGT_DIM_CURR_CFDL#(lf)          ON (AGT_DIM_CURR_CFDL.AGT_DIM_SK = TF_FIN_CUST_EVT_FCT_CFDL.CRNG_AGT_SK)) RIGHT OUTER JOIN#(lf)             SALES.FIN_CUST_ELIG_DIM_CFDL FIN_CUST_ELIG_DIM_CFDL#(lf)          ON (FIN_CUST_ELIG_DIM_CFDL.FIN_CUST_PNT_ELIG_DIM_SK = TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_ELIG_DIM_SK)) LEFT OUTER JOIN#(lf)             CONTRACT.CNF_CONTRACT_DIM_DTL_CFDL CNF_CONTRACT_DIM_DTL_CFDL#(lf)          ON (CNF_CONTRACT_DIM_DTL_CFDL.CTRC_SK = TF_FIN_CUST_EVT_FCT_CFDL.CTRC_SK) and #(lf)             (CNF_CONTRACT_DIM_DTL_CFDL.VRSN_NBR = TF_FIN_CUST_EVT_FCT_CFDL.CTRC_VRSN_NBR)#(lf)                     #(lf) WHERE (AGT_DIM_CURR_CFDL.CURR_ROW_IND = \u0027Y\u0027)#(lf)   AND (SALE_HIER_DIM.CURR_ROW_IND = \u0027Y\u0027)#(lf)   AND (sale_hier_dim.ORZN_DEPT_CDE in (\u00270001\u0027, \u00270115\u0027,\u00270165\u0027,\u00270190\u0027,\u00270240\u0027,\u00270283\u0027,\u00270291\u0027,\u00270361\u0027,\u00270365\u0027,\u00270384\u0027,\u00270410\u0027,\u00270435\u0027,\u00270475\u0027,\u00270496\u0027,\u00270525\u0027,\u00270529\u0027,\u00270810\u0027)#(lf)    or AGT_DIM_CURR_CFDL.ORZN_DEPT_CDE in (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027))  #(lf)AND DTRB_PERF_DATES.DTRB_PERF_RPT_YR_NBR in (\u00272022\u0027,\u00272023\u0027,\u00272024\u0027)#(lf)   AND substring(SALE_HIER_DIM.SALE_HIER_ID,1,2)=\u0027TS\u0027#(lf)   and TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_VLU \u003c\u003e 0']),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Contract Issue Date', type date}, {'Calendar Date', type date}})in    #'Changed Type'"}]},{"name":"AUMAUA","isHidden":false,"storageMode":"Import","columns":[{"name":"vaaum","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"anaum","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"mfaum","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"soaum","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"immaum","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"vulcv","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"ulcv","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"tradcv","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"totwrapaum","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"tottrstaua","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TOTAL AUM","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TOTAL AUA","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TOTAL","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"tsid","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"np_brkgaua","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"AUM \u0026 AUA Sort Order","dataType":"String","isHidden":false,"expression":"Related(AUMAUA_Sort[Order])","columnType":"Calculated"}],"measures":[{"name":"Message_txt_AUA","expression":"IF(SUM(\u0027AUMAUA\u0027[TOTAL AUA]) \u003e 0,  '',  'No Clients with AUA Products')","isHidden":false},{"name":"ShowHideCC_AUA","expression":"IF(SUM(\u0027AUMAUA\u0027[TOTAL AUA]) \u003e 0, '#1C00ff00','White')","isHidden":false},{"name":"Message_txt_AUM","expression":"IF(SUM(\u0027AUMAUA\u0027[TOTAL AUM]) \u003e 0,  '',  'No Clients with AUM Products')","isHidden":false},{"name":"ShowHideCC_AUM","expression":"IF(SUM(\u0027AUMAUA\u0027[TOTAL AUM]) \u003e 0, '#1C00ff00','White')","isHidden":false},{"name":"TOTAL AUM \u0026 AUA","expression":" var _total =  CALCULATE(sum(\u0027AUMAUA\u0027[TOTAL]))Returnif(isblank(_total),0,_total)   ","isHidden":false},{"name":"Test_Measure","expression":"  var _selected = VALUE(ISFILTERED(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]))Return_selected","isHidden":false},{"name":"TOTAL AUM PH","expression":" var _total = calculate(sum(\u0027AUMAUA\u0027[TOTAL AUM]))ReturnIF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"TOTAL AUA PH","expression":" var _total = calculate(sum(\u0027AUMAUA\u0027[TOTAL AUA]))ReturnIF(ISBLANK(_total),0,_total)","isHidden":false}],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////pnfiles002b//fp_cifs_7834_sas$//marketanalysis//fieldreporting//pbi data//aumaua//AUMAUA.csv'),[Delimiter=',', Columns=21, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Removed Columns' = Table.RemoveColumns(#'Promoted Headers',{'', '_1', '_2', '_3', '_4', '_5', '_6', '_7'}),    #'Changed Type' = Table.TransformColumnTypes(#'Removed Columns',{{'tsid', type text}, {'Product', type text}, {'vaaum', type number}, {'anaum', type number}, {'mfaum', type number}, {'soaum', type number}, {'immaum', type number}, {'vulcv', type number}, {'ulcv', type number}, {'tradcv', type number}, {'totwrapaum', type number}, {'tottrstaua', type number},{'np_brkgaua', type number}}),    #'Added Custom' = Table.AddColumn(#'Changed Type', 'TOTAL AUM', each [anaum] + [soaum] + [immaum] + [mfaum] +[vaaum] + [vulcv] + [ulcv] + [tradcv] + [np_brkgaua]),    #'Added Custom1' = Table.AddColumn(#'Added Custom', 'TOTAL AUA', each [totwrapaum]),    #'Added Custom2' = Table.AddColumn(#'Added Custom1', 'TOTAL', each [anaum] +[immaum] +[mfaum] + [soaum] + [vaaum] +[vulcv] +[ulcv] + [tradcv] +[totwrapaum] +[np_brkgaua])in    #'Added Custom2'"}]},{"name":"AUMAUA_Sort","isHidden":false,"storageMode":"Import","columns":[{"name":"Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Order","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('NY47D8IgFEb/imHuYH071kHTRKbqRDoQuVoi0oaHif/ey726cU4+4CglGu+zTR9RiVr0lRIyp6zd7Ji9iSgXJM/2DghLgkMYnxD0o5gVmca8bRwD8pq4Awe3hLhhbCWet/+p9okv78icwEO05a89rwcLzpSe+Y9hGiCQ4cT2NWl6vua6q2wKcF3HwGGXkCMNsav/Ag==', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Product = _t, Order = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Product', type text}, {'Order', Int64.Type}})in    #'Changed Type'"}]},{"name":"Client_HHLD","isHidden":false,"storageMode":"Import","columns":[{"name":"CUST_ID_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"CUST_GRP_ID_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"EMP_ORZN_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MBRTYPE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FUTUREVALUE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CUST_LGAL_FMT_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"STP_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CUST_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"FVSortOrder","dataType":"String","isHidden":false,"expression":"RELATED(FVSortOrder[FVOrder])","columnType":"Calculated"},{"name":"Member Sort","dataType":"String","isHidden":false,"expression":"RELATED((\u0027Member Sort\u0027[MBR_ORDER]))","columnType":"Calculated"},{"name":"CUST_LGAL_FRST_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CUST_LGAL_LST_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CUST_GRLN_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"HOH_NAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CLIENT_NAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CLIENT_SERVICE_MODEL","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"New Client Indicator","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"HOH_IND","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Client Service Group","dataType":"String","isHidden":false,"expression":"Client_HHLD[CLIENT_SERVICE_MODEL]","columnType":"Calculated"},{"name":"SERVICEGROUP","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Total Clients","expression":"  var _total = CALCULATE(count(Client_HHLD[CUST_ID_NBR]))ReturnIF(ISBLANK(_total),0,_total)  ","isHidden":false},{"name":"Client_HHLD","expression":"  var _total =    CALCULATE(DISTINCTCOUNT(Client_HHLD[CUST_GRP_ID_NBR]), \u0027Client_HHLD\u0027[CUST_GRP_ID_NBR] \u003e 0,       Client_HHLD[HOH_IND] = 1)ReturnIF(ISBLANK(_total),0,_total)    ","isHidden":false},{"name":"ClientIndvShowMeasure","expression":"IF([Total Clients] \u003e 0, [Total Clients], '0')","isHidden":false},{"name":"ClientHHLDShowMeasure","expression":"IF([Client_HHLD] \u003e 0, [Client_HHLD], '0')","isHidden":false},{"name":"FVShowMeasure","expression":"IF(distinctcount(Client_HHLD[CUST_GRP_ID_NBR])\u003e 0, distinctcount(Client_HHLD[CUST_GRP_ID_NBR]), '0')","isHidden":false},{"name":"ShowHideFV","expression":"IF(DISTINCTCOUNT(\u0027Client_HHLD\u0027[CUST_GRP_ID_NBR]) \u003e 0, '#1C00ff00','White')","isHidden":false},{"name":"Message_txt","expression":"IF(DISTINCTCOUNT(\u0027Client_HHLD\u0027[CUST_GRP_ID_NBR])\u003e0,'','Future ValueNo Clients Assigned')","isHidden":false},{"name":"Total Households","expression":"  var _total = CALCULATE(distinctcount(Client_HHLD[CUST_GRP_ID_NBR]),                \u0027Client_HHLD\u0027[CUST_GRP_ID_NBR] \u003e 0,                 Client_HHLD[HOH_IND] = 1)--, Client_HHLD[HOH_IND]=1)ReturnIF(ISBLANK(_total),0,_total) ","isHidden":false},{"name":"New Client Total","expression":"  var _total = CALCULATE(DISTINCTCOUNT(\u0027Client_HHLD\u0027[CUST_ID_NBR]), \u0027Client_HHLD\u0027[New Client Indicator] = 'Y')return  IF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"Current YR New Clients","expression":" --var _total = calculate(sum(\u0027NFC\u0027[Financial Customer Point Value]), YEAR(DTRB_PERF_DATES[CAL_DAY_DT]) = YEAR(TODAY()))  var _total = calculate(DISTINCTCOUNT(\u0027Client_HHLD\u0027[CUST_ID_NBR]), \u0027Client_HHLD\u0027[New Client Indicator] = 'Y')ReturnIF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"Products Per HH","expression":"  var _total = sum(client_products[totctrcs])/DISTINCTCOUNT(Client_HHLD[CUST_GRP_ID_NBR])ReturnIF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"Total Health Households","expression":"   var _total = CALCULATE(DISTINCTCOUNT(\u0027Client_HHLD\u0027[CUST_GRP_ID_NBR]),                 FILTER(\u0027Client_HHLD\u0027,\u0027Client_HHLD\u0027[MBRTYPE] = 'Benefit'|| \u0027Client_HHLD\u0027[MBRTYPE] = 'Associate' || \u0027Client_HHLD\u0027[MBRTYPE] = 'Non-Member'),                FILTER(\u0027Client_HHLD\u0027,\u0027Client_HHLD\u0027[CUST_GRP_ID_NBR] \u003e 0),                FILTER(\u0027Client_HHLD\u0027,\u0027Client_HHLD\u0027[HOH_IND] = 1)) ReturnIF(ISBLANK(_total),0,_total) ","isHidden":false},{"name":"Total Health Clients","expression":"  var _total = CALCULATE(count(Client_HHLD[CUST_ID_NBR]),                 FILTER(\u0027Client_HHLD\u0027,\u0027Client_HHLD\u0027[MBRTYPE] = 'Benefit'|| \u0027Client_HHLD\u0027[MBRTYPE] = 'Associate' || \u0027Client_HHLD\u0027[MBRTYPE] = 'Non-Member'),                FILTER(\u0027Client_HHLD\u0027,\u0027Client_HHLD\u0027[CUST_GRP_ID_NBR] \u003e 0))ReturnIF(ISBLANK(_total),0,_total) ","isHidden":false},{"name":"ClientServGrpShowMeasure","expression":"IF(distinctcount(Client_HHLD[CUST_GRP_ID_NBR])\u003e 0, distinctcount(Client_HHLD[CUST_GRP_ID_NBR]), '0')","isHidden":false},{"name":"Message_ClientServiceGrouptxt","expression":"IF(DISTINCTCOUNT(\u0027Client_HHLD\u0027[CUST_GRP_ID_NBR])\u003e0,'','Client Service GroupNo Clients Assigned')","isHidden":false},{"name":"ShowHideClientServiceGrp","expression":"IF(DISTINCTCOUNT(\u0027Client_HHLD\u0027[CUST_GRP_ID_NBR]) \u003e 0, '#1C00ff00','White')","isHidden":false}],"source":[{"expression":"let    Source = DB2.Database('PODWH021:50000', 'PODWH021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT A.CUST_SK,#(lf)       A.CUST_ID_NBR,#(lf)       case when xx.HOH_NAMExx \u003c\u003e \u0027\u0027 then xx.HOH_NAMExx#(lf)#(tab)#(tab)     else A.CUST_LGAL_LST_NM||\u0027, \u0027||A.CUST_LGAL_FRST_NM#(lf)#(tab)     end as HOH_NAME,#(lf)       A.CUST_LGAL_LST_NM||\u0027, \u0027||A.CUST_LGAL_FRST_NM as Client_Name,#(lf)       A.CUST_LGAL_FMT_NM,#(lf)       A.CUST_LGAL_FRST_NM,#(lf)       A.CUST_LGAL_LST_NM,#(lf)       A.CUST_GRLN_TYP_CDE,#(lf)       case when a.cust_grln_typ_cde in (\u0027PRIMD\u0027,\u0027PRIM\u0027) then 1#(lf)         else 0#(lf)       end as HOH_IND,#(lf)       A.CUST_GRP_ID_NBR,#(lf)       B.STP_STS_CDE,#(lf)       case when B.fut_vlu_indx_cde = \u0027GOLD\u0027 then \u0027Gold\u0027#(lf)            when B.fut_vlu_indx_cde = \u0027SILVR\u0027 then \u0027Silver\u0027#(lf)            when B.fut_vlu_indx_cde = \u0027BRNZE\u0027 then \u0027Bronze\u0027#(lf)            when B.fut_vlu_indx_cde in (\u0027NA\u0027,\u0027UNK\u0027,\u0027 \u0027 ) then \u0027UNK\u0027#(lf)       end as FutureValue,#(lf)       case when A.mbr_typ_cde = \u0027BEN\u0027 then \u0027Benefit\u0027#(lf)            when A.mbr_typ_cde = \u0027ASSOC\u0027 then \u0027Associate\u0027#(lf)            when A.mbr_typ_cde = \u0027JUV\u0027 then \u0027Juvenile\u0027#(lf)            when A.mbr_typ_cde = \u0027NON\u0027 and A.clas_ctrc_rltn_cde \u003c\u003e \u0027NA\u0027 then \u0027Non-Member\u0027#(lf)            when A.mbr_typ_cde = \u0027NON\u0027 and A.clas_ctrc_rltn_cde = \u0027NA\u0027 then \u0027Prospect\u0027#(lf)       end as MBRTYPE,#(lf)     --  case when A.cust_age \u003c 0 then \u0027UKWN\u0027#(lf)#(tab)--          when A.cust_age \u003c 18 then \u0027\u003c18\u0027#(lf)#(tab)--          when A.cust_age \u003c 25 then \u002718-24\u0027#(lf)#(tab)--          when A.cust_age \u003c 35 then \u002725-34\u0027#(lf)#(tab)--          when A.cust_age \u003c 45 then \u002735-44\u0027#(lf)#(tab)--          when A.cust_age \u003c 55 then \u002745-54\u0027#(lf)#(tab)--          when A.cust_age \u003c 65 then \u002755-64\u0027#(lf)#(tab)--          when A.cust_age \u003c 75 then \u002765-74\u0027#(lf)#(tab)--          when A.cust_age \u003c 85 then \u002775-84\u0027#(lf)#(tab)--          when A.cust_age \u003e= 85 then \u002785+\u0027#(lf)#(tab)--       else \u0027 \u0027 #(lf)       --end as cust_age_grp,#(lf)       --case when A.cust_age \u003c 18 then \u0027\u003c18\u0027#(lf)       --     when A.cust_age \u003e= 18 then \u002718+\u0027#(lf)--#(tab)       else \u0027 \u0027#(lf)    --   end as clnt_age_typ,#(lf)       case when B.fut_vlu_indx_cde = \u0027GOLD\u0027 and B.STP_STS_CDE = \u0027YES\u0027 then \u0027A\u0027#(lf)#(tab)          when B.fut_vlu_indx_cde = \u0027SILVR\u0027 and B.STP_STS_CDE = \u0027YES\u0027 then \u0027B\u0027#(lf)#(tab)#(tab)#(tab)      when B.fut_vlu_indx_cde = \u0027GOLD\u0027 and B.STP_STS_CDE \u003c\u003e \u0027YES\u0027 then \u0027B\u0027#(lf)#(tab)#(tab)#(tab)      when B.fut_vlu_indx_cde = \u0027BRNZE\u0027 and B.STP_STS_CDE = \u0027YES\u0027 then \u0027C\u0027#(lf)#(tab)#(tab)#(tab)      when B.fut_vlu_indx_cde = \u0027SILVR\u0027 and B.STP_STS_CDE \u003c\u003e \u0027YES\u0027 then \u0027C\u0027#(lf)#(tab)#(tab)#(tab)      when B.fut_vlu_indx_cde = \u0027BRNZE\u0027 and B.STP_STS_CDE \u003c\u003e \u0027YES\u0027 then \u0027D\u0027#(lf)         else \u0027 \u0027 #(lf)#(tab)     end as Client_Service_Model,#(lf)       C.EMP_ORZN_ID#(lf)  FROM MEMBER.ITGR_IDVL_ALL_CURR_CFDL A left join#(lf)       MEMBER.CNF_CUST_RESID_MAIL_GRP_DIM_CFDL B#(lf)    ON A.CUST_GRP_SK=B.CUST_GRP_SK inner join #(lf)       CLNT_ASMT_DM.CUST_REPR_ASGN_CURR_CFDL C#(lf)      /* CLNT_ASMT_DM.CUST_SREP_RLTN_CURR_CFDL C */#(lf)      /* CLNT_ASMT_DM.CUST_REPR_COMP_RLTN_CURR_CFDL C */#(lf)    ON A.CUST_SK = C.ACRT_CUST_SK AND#(lf)       A.MBR_TYP_CDE IN (\u0027BEN\u0027,\u0027NON\u0027,\u0027ASSOC\u0027,\u0027JUV\u0027) AND#(lf)       C.EMP_ORZN_ID LIKE \u0027TS%\u0027 left join#(lf)       HUMAN_RESOURCES.CNF_EMP_DIM_DTL_CURR_CFDL d#(lf)    on c.EMP_ORZN_ID=d.emp_id left join#(lf)#(tab)    (select x.CUST_GRP_ID_NBR,#(lf)              x.CUST_LGAL_LST_NM||\u0027, \u0027||x.CUST_LGAL_FRST_NM as HOH_NAMExx#(lf)#(tab)      from MEMBER.ITGR_IDVL_ALL_CURR_CFDL x#(lf)#(tab)#(tab)    where x.CUST_GRLN_TYP_CDE in (\u0027PRIM\u0027,\u0027PRIMD\u0027)) as xx#(lf)   on A.CUST_GRP_ID_NBR=xx.cust_grp_id_nbr #(lf)#(lf) where (a.mbr_typ_cde in (\u0027BEN\u0027,\u0027ASSOC\u0027,\u0027JUV\u0027) or#(lf)        a.mbr_typ_cde = \u0027NON\u0027 and a.clas_ctrc_rltn_cde \u003c\u003e \u0027NA\u0027) #(lf)    and d.orzn_dept_cde not in (\u00270714\u0027,\u00270716\u0027,\u00277151\u0027)#(lf)    and (d.job_typ_cde in (\u0027002000\u0027,\u0027002010\u0027,\u0027002003\u0027,\u0027002011\u0027,\u0027002012\u0027,\u0027003100\u0027,\u0027002017\u0027,#(lf)                           \u0027002020\u0027,\u0027002021\u0027,\u0027002018\u0027,\u0027002019\u0027,\u0027003500\u0027,\u0027002022\u0027,\u0027002024\u0027,#(lf)                           \u0027002025\u0027,\u0027002026\u0027,\u0027002027\u0027,\u0027002030\u0027,\u0027002031\u0027,\u0027002032\u0027) or #(lf)         d.orzn_dept_cde IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027)#(lf)     and d.job_typ_cde not in (\u00271356\u0027,\u00271658\u0027,\u00272598\u0027,\u00273458\u0027)) #(lf)     --and a.cust_age \u003e= 18 #(lf)     and d.emp_sts_typ_cde in (\u0027A\u0027)']),    #'Replaced Value' = Table.ReplaceValue(Source,'','Unknown',Replacer.ReplaceValue,{'FUTUREVALUE'}),    #'Replaced Value4' = Table.ReplaceValue(#'Replaced Value',' ','U',Replacer.ReplaceText,{'CLIENT_SERVICE_MODEL'}),    #'Filtered Rows' = Table.SelectRows(#'Replaced Value4', each true),    #'Replaced Value1' = Table.ReplaceValue(#'Filtered Rows',null,'Unknown',Replacer.ReplaceValue,{'FUTUREVALUE'}),    #'Filtered Rows1' = Table.SelectRows(#'Replaced Value1', each true),    #'Merged Queries' = Table.NestedJoin(#'Filtered Rows1', {'CUST_ID_NBR'}, NFC_Summary, {'CUST_ID_NBR'}, 'NFC_Summary', JoinKind.LeftOuter),    #'Expanded NFC_Summary' = Table.ExpandTableColumn(#'Merged Queries', 'NFC_Summary', {'NFC_Total_Points'}, {'NFC_Total_Points'}),    #'Replaced Value2' = Table.ReplaceValue(#'Expanded NFC_Summary',null,0,Replacer.ReplaceValue,{'NFC_Total_Points'}),    #'Changed Type' = Table.TransformColumnTypes(#'Replaced Value2',{{'NFC_Total_Points', Int64.Type}}),    #'Added Custom' = Table.AddColumn(#'Changed Type', 'New Client Indicator', each if([NFC_Total_Points]) = 1 then 'Y' else 'N'),    #'Removed Columns' = Table.RemoveColumns(#'Added Custom',{'NFC_Total_Points'}),    #'Replaced Value3' = Table.ReplaceValue(#'Removed Columns','Juvenile','Youth',Replacer.ReplaceText,{'MBRTYPE'}),    #'Merged Queries1' = Table.NestedJoin(#'Replaced Value3', {'CUST_ID_NBR'}, ClientServiceGroup, {'Customer Identifier'}, 'ClientServiceGroup', JoinKind.LeftOuter),    #'Expanded ClientServiceGroup' = Table.ExpandTableColumn(#'Merged Queries1', 'ClientServiceGroup', {'SERVICEGROUP'}, {'SERVICEGROUP'}),    #'Removed Duplicates1' = Table.Distinct(#'Expanded ClientServiceGroup', {'CUST_ID_NBR'})in    #'Removed Duplicates1'"}]},{"name":"CONFQUAL","isHidden":false,"storageMode":"Import","columns":[{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CC","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"NM","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"RANK","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"QM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CQ","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"XDAY","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Conf_Qualifer","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Projected Conference Name","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Total Conference Credits","expression":" var _cc=  calculate(sum(\u0027CONFQUAL\u0027[CC])) Return IF(ISBLANK(_cc),0,_cc)","isHidden":false},{"name":"Total New Money","expression":" var _nm=  calculate(sum(\u0027CONFQUAL\u0027[NM])) Return IF(ISBLANK(_nm),0,_nm)","isHidden":false},{"name":"Conference Qualifier","expression":"  var _confQ = SELECTEDVALUE(\u0027CONFQUAL\u0027[Conf_Qualifer])Return IF(ISBLANK(_confQ),'NA',_confQ)","isHidden":false},{"name":"Projected Conference","expression":"  var _ProjConf = SELECTEDVALUE(\u0027CONFQUAL\u0027[Projected Conference Name])Return IF(ISBLANK(_ProjConf),'NA',_ProjConf)","isHidden":false},{"name":"Projected Extra Day","expression":"  var _xday = SELECTEDVALUE(\u0027CONFQUAL\u0027[XDAY])Return IF(ISBLANK(_xday),'NA',_xday)","isHidden":false}],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////VSPUBLIC//CORPSHAR//Project//FRRecognition//recognition.reports//CONFERENCE//CONFQUAL.CSV'),[Delimiter=',', Columns=7, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'TSID', type text}, {'CC', Int64.Type}, {'NM', Int64.Type}, {'RANK', Int64.Type}, {'QM', type text}, {'CQ', Int64.Type}, {'XDAY', type text}}),    #'Added Conditional Column' = Table.AddColumn(#'Changed Type', 'Projected Conference Name', each if [CQ] = 33 then 'Pinnacle A' else if [CQ] = 32 then 'Pinnacle B' else if [CQ] = 31 then 'Pinnacle C' else if [CQ] = 29 then 'Summit A' else if [CQ] = 28 then 'Summit B' else if [CQ] = 27 then 'Summit C' else if [CQ] = 22 then 'Sierra A' else if [CQ] = 20 then 'Sierra B' else if [CQ] = 40 then 'None' else if [CQ] = 41 then 'None' else null),    #'Added Custom' = Table.AddColumn(#'Added Conditional Column', 'Conf_Qualifer', each [QM] \u0026 ' Conf Cr'),    #'Replaced Value' = Table.ReplaceValue(#'Added Custom','N','No',Replacer.ReplaceText,{'XDAY'}),    #'Replaced Value1' = Table.ReplaceValue(#'Replaced Value','Y','Yes',Replacer.ReplaceText,{'XDAY'})in    #'Replaced Value1'"}]},{"name":"FVSortOrder","isHidden":false,"storageMode":"Import","columns":[{"name":"FV","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FVOrder","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i45WUtJRMlWK1YlWCs3LzssvzwPyTcB8p6L8vKpUINcYzA3OzClLLQJyjcBc9/ycFCDHUCk2FgA=', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [FV = _t, FVOrder = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'FV', type text}, {'FVOrder', Int64.Type}})in    #'Changed Type'"}]},{"name":"Member Sort","isHidden":false,"storageMode":"Import","columns":[{"name":"MBR Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MBR_ORDER","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i45W8iotS83LzElV0lEyUYrViVbyy8/T9U3NTUotAgoZg4Uci4vzkzMTS0CKjMAiTql5qWmZJUC+oVJsLAA=', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [#'MBR Type' = _t, MBR_ORDER = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'MBR Type', type text}, {'MBR_ORDER', Int64.Type}})in    #'Changed Type'"}]},{"name":"Producer_Snowflake","isHidden":false,"storageMode":"Import","columns":[{"name":"SALE_HIER_DIM_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EMP_DIM_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ZONE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RPT_TO_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Adjusted Service Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TENURE","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TENURE_GROUP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SFC_FC","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LST_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FRST_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MDDL_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ASSIGNED_AFA","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"OP_COUNT","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Credentials","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"License","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Report to Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Conference Qualification Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Conference Qualification","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MARKET","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MARKET_LEADERS","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP Leader","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team Purpose Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team Purpose Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Advisor Group","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market with Leader","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP with Leader","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TeamAdvisor_HlthRpt","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team Indicator","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"FILTER_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MARKET_NUMBER","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Experience Advisor Sort.Sort","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Employee Team Role Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Advisor Group Full Name","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"DisplayFilteredProducer","expression":" -- IF([EmployeeNmFiltered]=1,VALUES(Producer_Snowflake[EMP_NM]),  -- IF([EmployeeNMFiltered]=0 \u0026\u0026 [EmployeeIdFiltered] = 1, VALUES(Producer_Snowflake[EMP_NM]), ' '))  var _distinct_values_count = DISTINCTCOUNT(\u0027Producer_Snowflake\u0027[EMP_NM])  var _max_values_to_show = 1Return  IF(      _distinct_values_count \u003e _max_values_to_show,      ' ',      CONCATENATEX(          VALUES(\u0027Producer_Snowflake\u0027[EMP_NM]),          \u0027Producer_Snowflake\u0027[EMP_NM],          ', ',          \u0027Producer_Snowflake\u0027[EMP_NM],ASC)    )   ","isHidden":false},{"name":"EmployeeIdFiltered","expression":"IF(ISFILTERED(Producer_Snowflake[EMP_ID]),1,0)","isHidden":false},{"name":"EmployeeNmFiltered","expression":"IF(ISFILTERED(Producer_Snowflake[EMP_NM]),1,0)","isHidden":false},{"name":"TeamNmFiltered","expression":"IF(ISFILTERED(Producer_Snowflake[Team Name]),1,0)--IF(ISFILTERED(Teams[TEAM_NM]),1,0)","isHidden":false},{"name":"DisplayFilteredTenureGrp","expression":"IF([EmployeeNmFiltered]=1,VALUES(Producer_Snowflake[TENURE_GROUP]),'')","isHidden":false},{"name":"DisplayFilteredTeam","expression":"-- var teamnm = IF([TeamNmFiltered]=1,VALUES(Teams[TEAM_NM]),' ')var teamnm = IF([TeamNmFiltered]=1,VALUES(Producer_Snowflake[Team Name]),' ') return IF(ISBLANK(teamnm),' ', teamnm)","isHidden":false},{"name":"ShowHide_TeamPracticeMetrics","expression":" IF(Teams[Team Name] = ' ', 'White','#1C00ff00' )","isHidden":false},{"name":"Message_txtTeamPracticeMetrics","expression":"IF(SELECTEDVALUE(Teams[TEAM_NM]) = ' ','','')","isHidden":false},{"name":"TeamNmDisplay","expression":"IF(ISBLANK(\u0027Teams\u0027[Team Name]),1,0)","isHidden":false},{"name":"teamind_Test","expression":"  var _team = \u0027Teams\u0027[Team Name]Return  _team--IF(ISBLANK(_team),0,_team) --IF(ISBLANK(Teams[TEAM_NM]),0,1)--IF(ISBLANK(_gridtotal_team),0,_gridtotal_team)))))","isHidden":false},{"name":"Hide Measure Check Test2","expression":"IF(SELECTEDVALUE(\u0027Producer_Snowflake\u0027[Team Indicator]) = 1, 1,IF([EmployeeNMFiltered] = 0 \u0026\u0026 [TeamNmFiltered] = 1 \u0026\u0026 SELECTEDVALUE(\u0027Producer_Snowflake\u0027[Team Indicator]) = 1, 1,    --Nothing selectedIF([EmployeeNMFiltered] = 1 \u0026\u0026 [TeamNmFiltered] = 0 \u0026\u0026 SELECTEDVALUE(\u0027Producer_Snowflake\u0027[Team Indicator]) = 0, 0,    --kateIF([EmployeeNMFiltered] = 1 \u0026\u0026 [TeamNmFiltered] = 0 \u0026\u0026 SELECTEDVALUE(\u0027Producer_Snowflake\u0027[Team Indicator]) = 1, 1,    --arnold IF([EmployeeNMFiltered] = 1 \u0026\u0026 [TeamNmFiltered] = 1 \u0026\u0026 SELECTEDVALUE(\u0027Producer_Snowflake\u0027[Team Indicator]) = 1, 1,   --arnold \u0026 teamIF([EmployeeNMFiltered] = 0 \u0026\u0026 [TeamNmFiltered] = 1 \u0026\u0026 SELECTEDVALUE(\u0027Producer_Snowflake\u0027[Team Indicator]) = 1, 1,0)  --team only /*       [EmployeeNMFiltered] = 0, 1,    IF( [EmployeeNMFiltered] = 0 \u0026\u0026        [TeamNmFiltered] = 1 \u0026\u0026 SELECTEDVALUE(\u0027Producer_Snowflake\u0027[Team Indicator]) = 1, 0,    IF(        [EmployeeNMFiltered] = 1 \u0026\u0026 SELECTEDVALUE(\u0027Producer_Snowflake\u0027[Team Indicator]) = 0, 1, --Kate    IF(          [EmployeeNMFiltered] = 1 \u0026\u0026 SELECTEDVALUE(\u0027Producer_Snowflake\u0027[Team Indicator]) = 1, 0)    ))    )*/)))))","isHidden":false},{"name":"Filter Display","expression":"  var _distinct_values_count = DISTINCTCOUNT(\u0027Producer_Snowflake\u0027[EMP_NM])  var _max_values_to_show = 1Return  IF(      _distinct_values_count \u003e _max_values_to_show,      ' ',      CONCATENATEX(          VALUES(\u0027Producer_Snowflake\u0027[EMP_NM]),          \u0027Producer_Snowflake\u0027[EMP_NM],          ', ',          \u0027Producer_Snowflake\u0027[EMP_NM],ASC)    )      ","isHidden":false}],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'select distinct b.''Sales Hierarchy Dimension Surrogate Key'' as SALE_HIER_DIM_SK,#(lf)       a.''Workforce Dimension Detail Surrogate Key'' as EMP_DIM_SK,#(lf)       a.''Employee Identifier'' as EMP_ID,#(lf)      -- b.''Sales Hierarchy Identifier'' as SALE_HIER_ID,#(lf)       --a.''Employee Name'' as EMP_NM,#(lf)       case when a.''Employee Name'' = \u0027Johnson,Christopher\u0027 then a.''Last Name''||\u0027,\u0027||a.''Nick Name''#(lf)            when a.''Employee Name'' = \u0027Parker,David\u0027 and a.''Employee Identifier'' = \u0027TS83655\u0027 then a.''Last Name''||\u0027,\u0027||a.''First Name''||\u0027 C.\u0027#(lf)            when a.''Employee Identifier'' = \u0027TS54638\u0027 then a.''Last Name''||\u0027,\u0027||a.''Nick Name''#(lf)            when a.''Employee Identifier'' = \u0027TS11184\u0027 then a.''Last Name''||\u0027,\u0027||a.''Nick Name''#(lf)            when a.''Employee Identifier'' = \u0027TS80048\u0027 then a.''Last Name''||\u0027,\u0027||a.''Nick Name''#(lf)         else a.''Employee Name''#(lf)       end as EMP_NM,       #(lf)       aa.''Job Type Code'' as JOB_TYP_CDE,#(lf)       aa.''Job Type Description'' as JOB_TYP_DSCR,#(lf)       case when a.''Organization Department Code'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027) then \u00270383\u0027#(lf)         else a.''Organization Department Code''#(lf)       end as TAG,#(lf)       case when aa.''Department Identifier'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027) then \u0027Virtual Advice\u0027#(lf)         else aa.''Department Name''#(lf)       end as ''TAG Name'',#(lf)       case when aa.''Department Identifier'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027) then \u00270383-Virtual Advice\u0027#(lf)         else a.''Organization Department Code''||\u0027-\u0027||aa.''Department Name''#(lf)       end as ''Advisor Group Full Name'',#(lf)       (substr(b.''Organization Zone Code'',6,2))   AS ZONE,#(lf)       b.''Organization Zone Code'' as Market,#(lf)       case when substr(b.''Organization Zone Code'',9,2) = \u002798\u0027 then \u0027NPG - market 98\u0027#(lf)            when substr(b.''Organization Zone Code'',9,2) = \u002799\u0027 then \u0027NPG - market 99\u0027#(lf)            when substr(b.''Organization Zone Code'',9,2) = \u002759\u0027 then \u0027PMC - market 59\u0027#(lf)            when substr(b.''Organization Zone Code'',9,2) = \u002701\u0027 then \u0027PMC - market 01\u0027#(lf)            when substr(b.''Organization Zone Code'',9,2) = \u002769\u0027 then \u0027GPA - market 69\u0027#(lf)            when Substr(b.''Organization Zone Code'',9,2) = \u002779\u0027 then \u0027GPD - market 79\u0027#(lf)            when substr(b.''Organization Zone Code'',9,2) = \u002789\u0027 then \u0027PPC - market 89\u0027#(lf)       end as Filter_Ind,  #(lf)       substr(b.''Organization Zone Code'',9,2) as Market_Number,               #(lf)       zz4.market_leaders,#(lf)       c.''Sub Department Identifier'' as MVP_ID,#(lf)       zz3.''MVP Leader'', #(lf)       c.''Report to ID'' as RPT_TO_ID,#(lf)       cc.''First Name''||\u0027 \u0027||cc.''Last Name'' as ''Report to Name'',#(lf)       a.''Adjusted Service Date'',#(lf)     --  c.''Financial Professional Tenure'' as Tenure,#(lf)     --  c.''Financial Professional Tenure Group'' as Tenure_Group,#(lf)      case when a.''Organization Department Code'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00270383\u0027) then  datediff(\u0027days\u0027, a.''Employee Service Date'',current_date())/365.25 #(lf)            else c.''Financial Professional Tenure''#(lf)       end as Tenure,     #(lf)       case when zzzz.TENUREGRPxx = \u0027NA\u0027 and zzzz.Tenure \u003e 4 then \u0027VETFR\u0027#(lf)            when zzzz.TENUREGRPxx = \u0027NA\u0027 and (zzzz.Tenure \u003e= 3 and zzzz.Tenure \u003c 4) then \u0027NFA4\u0027#(lf)            when zzzz.TENUREGRPxx = \u0027NA\u0027 and (zzzz.Tenure \u003e= 2 and zzzz.Tenure \u003c 3) then \u0027NFA3\u0027#(lf)            when zzzz.TENUREGRPxx = \u0027NA\u0027 and (zzzz.Tenure \u003e= 1 and zzzz.Tenure \u003c 2) then \u0027NFA2\u0027#(lf)            when zzzz.TENUREGRPxx = \u0027NA\u0027 and (zzzz.Tenure \u003c 1) then \u0027NFA1\u0027#(lf)            else c.''Financial Professional Tenure Group''#(lf)        end as Tenure_Group,#(lf)       case when a.''Senior Financial Consultant Indicator'' = \u0027Y\u0027 then \u0027SFC\u0027#(lf)#(tab)        when a.''Financial Consultant Indicator'' = \u0027Y\u0027 then \u0027FC\u0027#(lf)#(tab)        when a.''Wealth Advisor Indicator'' = \u0027Y\u0027 then \u0027WA\u0027#(lf)#(tab)   end as SFC_FC,#(lf)   /*    (case when a.''Senior Financial Consultant Indicator'' = \u0027Y\u0027 then \u0027SFC\u0027#(lf)             when a.''Financial Consultant Indicator'' = \u0027Y\u0027 then \u0027FC\u0027#(lf)             when a.''Wealth Advisor Indicator'' = \u0027Y\u0027 then \u0027WA\u0027#(lf)             when a.''Job Type Code'' in (\u0027002003\u0027,\u0027002018\u0027,\u0027002019\u0027) then A.''Job Type Description''#(lf)             when a.''Job Type Code'' = \u0027002016\u0027 then a.''Job Type Description''#(lf)             when ((a.''Senior Financial Consultant Indicator'' = \u0027N\u0027 or a.''Financial Consultant Indicator'' = \u0027N\u0027) and #(lf)                    c.''Financial Professional Tenure'' \u003e= 4 and #(lf)                    a.''Job Type Code'' in (\u0027002000\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027003602\u0027,\u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027))#(lf)                      then \u0027VETFR\u0027#(lf)             when c.''Financial Professional Tenure'' \u003e= 3 and c.''Financial Professional Tenure'' \u003c 4  and   #(lf)                  a.''Job Type Code'' in (\u0027002000\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027003602\u0027,\u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027)#(lf)                      then \u0027NFR4\u0027#(lf)             when c.''Financial Professional Tenure'' \u003e= 2 and c.''Financial Professional Tenure'' \u003c 3  and   #(lf)                  a.''Job Type Code'' in (\u0027002000\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027003602\u0027,\u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027)#(lf)                      then \u0027NFR3\u0027#(lf)             when c.''Financial Professional Tenure'' \u003e= 1 and c.''Financial Professional Tenure'' \u003c 2  and   #(lf)                  a.''Job Type Code'' in (\u0027002000\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027003602\u0027,\u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027)#(lf)                      then \u0027NFR2\u0027 #(lf)             when c.''Financial Professional Tenure'' \u003e= 0 and c.''Financial Professional Tenure'' \u003c 1  and   #(lf)                  a.''Job Type Code'' in (\u0027002000\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027003602\u0027,\u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027)#(lf)                      then \u0027NFR1\u0027 #(lf)        end) as FR_SEGMENT, */#(lf)        trim(concat_ws(\u0027 \u0027,dd.CHFC_DSGT_CDE,dd.CLF_DSGT_CDE,dd.CLU_DSGT_CDE,dd.CFA_DSGT_CDE,dd.CFP_DSGT_CDE,dd.FIC_DSGT_CDE,dd.FICF_DSGT_CDE,dd.LUTCF_DSGT_CDE)) AS Credentialsxx,#(lf)        concat_ws(\u0027 \u0027,dd.S1_LIC_STS_CDE,dd.S4_LIC_STS_CDE,dd.S6_LIC_STS_CDE,dd.S7_LIC_STS_CDE,dd.S9_LIC_STS_CDE,#(lf)        dd.S10_LIC_STS_CDE,dd.S22_LIC_STS_CDE,dd.S24_LIC_STS_CDE,dd.S26_LIC_STS_CDE,dd.S27_LIC_STS_CDE,#(lf)        dd.S51_LIC_STS_CDE,dd.S53_LIC_STS_CDE,dd.S62_LIC_STS_CDE,dd.S63_LIC_STS_CDE,dd.S65_LIC_STS_CDE,#(lf)        dd.S66_LIC_STS_CDE,dd.S86_LIC_STS_CDE,dd.S87_LIC_STS_CDE) as Licensesxx,  #(lf)          #(lf)    --   a.''Gender Code'' as GNDR_CDE, #(lf)       a.''Last Name'' as LST_NM, #(lf)       case when a.''Nick Name'' IN (\u0027 \u0027) then a.''First Name''#(lf)         else a.''Nick Name''#(lf)       end as FRST_NM, #(lf)       a.''Middle Name'' as MDDL_NM,#(lf)       xx.assigned_afa,#(lf)       case when zz.opcount is NULL then 0 #(lf)         else zz.opcount#(lf)       end as OP_Count,#(lf)       aa.''Conference Qualification Type Code'',#(lf)       zzz.''Team Identifier'',#(lf)       zzz.''Team Name'',#(lf)       zzz.''Team Purpose Code'',#(lf)       zzz.''Employee Team Role Code''#(lf)       #(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' a inner join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' as aa#(lf)    on (a.''Employee Identifier''=aa.''Source System Key Text'' and aa.''Current Row Indicator'' = \u0027Y\u0027)  left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' b #(lf)    on (a.''Employee Identifier''= b.''Sales Hierarchy Identifier'') left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' c #(lf)    on (a.''Employee Identifier''= c.''Source System Key Text'' AND c.''Current Row Indicator'' = \u0027Y\u0027) left join#(lf)       (select az.''Employee Identifier'',#(lf)               case when az.''Organization Department Code'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00270383\u0027) then  datediff(\u0027days\u0027, az.''Employee Service Date'',current_date())/365.25 #(lf)                    else cz.''Financial Professional Tenure''#(lf)               end as Tenure,#(lf)               cz.''Financial Professional Tenure Group''  as TENUREGRPxx             #(lf)          from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' az inner join#(lf)               ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' cz #(lf)           on (az.''Employee Identifier''= cz.''Source System Key Text'' AND cz.''Current Row Indicator'' = \u0027Y\u0027)) as zzzz#(lf)     on a.''Employee Identifier''=zzzz.''Employee Identifier'' left join     #(lf)   ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' cc #(lf)    on (c.''Report to ID''= cc.''Source System Key Text'' AND cc.''Current Row Indicator'' = \u0027Y\u0027) left join  #(lf)        (select d.''Employee Identifier'',#(lf)                (case when \u0027Y\u0027 = d.''Chartered Financial Consultant Designation Code'' THEN \u0027ChFC\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS CHFC_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Chartered Leadership Fellow Designation Code'' THEN \u0027CLF\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS CLF_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Chartered Life Underwriter Designation Code'' THEN \u0027CLU\u0027#(lf)                   else \u0027 \u0027 #(lf)                 end) AS CLU_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Chartered Financial Analyst Designation Code'' THEN \u0027CFA\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS CFA_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Fraternal Insurance Counselor Designation Code'' THEN \u0027FIC\u0027#(lf)                   else \u0027 \u0027 #(lf)                 end) AS FIC_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Fraternal Insurance Counselor Fellow Designation Code'' THEN \u0027FICF\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS FICF_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Certified Financial Planner Designation Code'' THEN \u0027CFP\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS CFP_DSGT_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Life Underwriter Training Counsel Fellow Designation Code'' THEN \u0027LUTCF\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS LUTCF_DSGT_CDE,#(lf)                (case when \u0027Y\u0027 = d.''Series One License Status Code'' THEN \u00271\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S1_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Four License Status Code'' THEN \u00274\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S4_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Six License Status Code'' THEN \u00276\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S6_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Seven License Status Code'' THEN \u00277\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S7_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Nine License Status Code'' THEN \u00279\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S9_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Ten License Status Code'' THEN \u002710\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S10_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Twenty-two License Status Code'' THEN \u002722\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S22_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Twenty-four License Status Code'' THEN \u002724\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S24_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Twenty-six License Status Code'' THEN \u002726\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S26_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Twenty-seven License Status Code'' THEN \u002727\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S27_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Fifty-one License Status Code'' THEN \u002751\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S51_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Fifty-three License Status Code'' THEN \u002753\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S53_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Sixty-two License Status Code'' THEN \u002762\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S62_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Sixty-three License Status Code'' THEN \u002763\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S63_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Sixty-five License Status Code'' THEN \u002765\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S65_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Sixty-six License Status Code'' THEN \u002766\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S66_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Eighty-six License Status Code'' THEN \u002786\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S86_LIC_STS_CDE, #(lf)                (case when \u0027Y\u0027 = d.''Series Eighty-seven License Status Code'' THEN \u002787\u0027#(lf)                   else \u0027 \u0027#(lf)                 end) AS S87_LIC_STS_CDE#(lf)              #(lf)           from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' d#(lf)          where d.''Termination Date'' is null   #(lf)            and d.''Current Row Indicator'' = \u0027Y\u0027#(lf)         /*   and d.''Employee Status Type Code'' in (\u0027A\u0027,\u0027L\u0027,\u0027I\u0027)) as dd */#(lf)            and d.''Employee Status Type Code'' in (\u0027A\u0027)) as dd#(lf)#(lf)    on A.''Employee Identifier'' = dd.''Employee Identifier''  left join#(lf)           #(lf)        (select distinct aa.''Source System Key Text'',#(lf)#(tab)            (case when e.emp_count = 1 then f.emp_nm#(lf)                      when e.emp_count \u003e 1 then \u0027Multiple Associates\u0027#(lf)                   else \u0027None\u0027#(lf)                 end) as assigned_afa#(lf)           from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' as aa left join  #(lf)              (select e.''Report to ID'', #(lf)                      count(e.''Organization Dimension Surrogate Key'') as emp_count   #(lf)                 from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' e  #(lf)                where e.''Job Type Code'' in (\u0027002000\u0027,\u0027002010\u0027,\u0027002003\u0027,\u0027002011\u0027,\u0027002012\u0027,\u0027003100\u0027,#(lf)                                            \u0027002017\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027002018\u0027,\u0027002019\u0027,\u0027003500\u0027,#(lf)                                            \u0027002022\u0027,\u0027002024\u0027,\u0027002025\u0027,\u0027002026\u0027,\u0027002027\u0027,\u0027002030\u0027,#(lf)                                            \u0027002031\u0027,\u0027002032\u0027)#(lf)                  and e.''Employee Status Type Code'' = \u0027A\u0027 #(lf)                  and e.''Current Row Indicator'' = \u0027Y\u0027#(lf)                  and e.''Report to ID'' \u003c\u003e \u0027'' ''\u0027 #(lf)                  and e.''Effective End Date'' = \u00279999-12-31\u0027 #(lf)               group by ''Report to ID'') as e #(lf)             on aa.''Source System Key Text'' = e.''Report to ID'' left join#(lf)         #(lf)              (select f.''Organization Dimension Surrogate Key'',#(lf)                      f.''Last Name''||\u0027, \u0027||f.''First Name'' as EMP_NM, #(lf)                      f.''Report to ID''  #(lf)                 from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' f#(lf)                where (f.''Job Type Code'' in (\u0027002000\u0027,\u0027002010\u0027,\u0027002003\u0027,\u0027002011\u0027,\u0027002012\u0027,\u0027003100\u0027,#(lf)                                             \u0027002017\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027002018\u0027,\u0027002019\u0027,\u0027003500\u0027,#(lf)                                             \u0027002022\u0027,\u0027002024\u0027,\u0027002025\u0027,\u0027002026\u0027,\u0027002027\u0027,\u0027002030\u0027,#(lf)                                             \u0027002031\u0027,\u0027002032\u0027) or #(lf)                      f.''Department Identifier'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027)) #(lf)                  and f.''Department Identifier'' not in (\u00272410\u0027,\u00273005\u0027,\u00277151\u0027,\u00277152\u0027,\u00279150\u0027,\u00279134\u0027,#(lf)                                                        \u0027NA\u0027,\u00274100\u0027,\u00276053\u0027,\u00276100\u0027,\u00278900\u0027) #(lf)                  and f.''Employee Status Type Code'' = \u0027A\u0027 #(lf)                  and f.''Current Row Indicator'' = \u0027Y\u0027#(lf)                  and f.''Report to ID'' \u003c\u003e \u0027'' ''\u0027 #(lf)                  and f.''Effective End Date'' = \u00279999-12-31\u0027) as f  #(lf)              on e.''Report to ID''=f.''Report to ID''#(lf)          where (aa.''Job Type Code'' in (\u0027002000\u0027,\u0027002010\u0027,\u0027002003\u0027,\u0027002011\u0027,\u0027002012\u0027,\u0027003100\u0027,#(lf)                                        \u0027002017\u0027,\u0027002020\u0027,\u0027002021\u0027,\u0027002018\u0027,\u0027002019\u0027,\u0027003500\u0027,#(lf)                                        \u0027002022\u0027,\u0027002024\u0027,\u0027002025\u0027,\u0027002026\u0027,\u0027002027\u0027,\u0027002030\u0027,#(lf)                                        \u0027002031\u0027,\u0027002032\u0027) or #(lf)                aa.''Department Identifier'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027)) #(lf)            and aa.''Department Identifier'' not in (\u00272410\u0027,\u00273005\u0027,\u00277151\u0027,\u00277152\u0027,\u00279150\u0027,\u00279134\u0027,#(lf)                                                   \u0027NA\u0027,\u00274100\u0027,\u00276053\u0027,\u00276100\u0027,\u00278900\u0027) #(lf)            and aa.''Current Row Indicator'' = \u0027Y\u0027#(lf)            and aa.''Employee Status Type Code'' = \u0027A\u0027 #(lf)            and aa.''Report to ID'' \u003c\u003e \u0027'' ''\u0027 #(lf)            and aa.''Effective End Date'' = \u00279999-12-31\u0027) as xx#(lf) #(lf)    on a.''Employee Identifier''=xx.''Source System Key Text'' left join #(lf)      (select count(z.''Organization Dimension Surrogate Key'') as OPCOUNT,   #(lf)                    z.''Report to ID'' #(lf)         from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' z  #(lf)        where z.''Current Row Indicator'' = \u0027Y\u0027#(lf)          and z.''Field Professional Roles'' in (\u0027Unlicensed Office Professionals\u0027,\u0027Licensed Office Professionals\u0027)#(lf)        /*  and z.''Employee Status Type Code'' in (\u0027A\u0027,\u0027I\u0027,\u0027L\u0027) */#(lf)          and z.''Employee Status Type Code'' in (\u0027A\u0027)#(lf)#(lf)       group by ''Report to ID'') as zz#(lf)         #(lf)    on a.''Employee Identifier'' = zz.''Report to ID''   left join#(lf)#(lf)(select a.''Employee Identifier'',#(lf)        b.''Team Identifier'',#(lf)        b.''Team Name'',#(lf)        b.''Team Purpose Code'',#(lf)        case when a.''Employee Team Role Code'' = \u0027AFLT\u0027 then \u0027Affiliate\u0027#(lf)             when a.''Employee Team Role Code'' = \u0027LEAD\u0027 then \u0027Team Leader\u0027#(lf)             when a.''Employee Team Role Code'' = \u0027MBR\u0027  then \u0027Team Member\u0027#(lf)          else \u0027 \u0027#(lf)        end as ''Employee Team Role Code'',#(lf)        A.''Effective Date''#(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Employee Team Organization Relationship Current Dimension''  a inner join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Team Organization Current Dimension'' b#(lf)    on (a.''Team Identifier Surrogate Key'' = b.''Team Identifier Surrogate Key'')  inner join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' c#(lf)    on (a.''Employee Identifier'' = c.''Employee Identifier'')   #(lf)    #(lf) where b.''Effective Status Code'' = \u0027A\u0027#(lf)   and c.''Employee Status Type Code'' = \u0027A\u0027#(lf)   and c.''Current Row Indicator'' = \u0027Y\u0027#(lf)   and a.''Team Member Action Code'' \u003c\u003e \u0027DROP\u0027#(lf)   and b.''Team Purpose Code'' NOT in (\u0027COAC\u0027,\u0027ENSB\u0027) #(lf)   and a.''Effective Date'' = (SELECT MAX(aa.''Effective Date'')#(lf)                                FROM ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Employee Team Organization Relationship Current Dimension''  aa inner join#(lf)                                     ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Team Organization Current Dimension'' bb#(lf)                                  on (aa.''Team Identifier Surrogate Key'' = bb.''Team Identifier Surrogate Key'' and a.''Employee Identifier''= aa.''Employee Identifier'') INNER JOIN#(lf)                                     ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' cc#(lf)                                  on (aa.''Employee Identifier''= cc.''Employee Identifier'')#(lf)#(tab)                           WHERE bb.''Effective Status Code'' = \u0027A\u0027#(lf)                                 AND cc.''Employee Status Type Code'' = \u0027A\u0027  #(lf)                                 and cc.''Current Row Indicator'' = \u0027Y\u0027#(lf)                                 and aa.''Team Member Action Code'' \u003c\u003e \u0027DROP\u0027#(lf)                                 and bb.''Team Purpose Code'' NOT in (\u0027COAC\u0027,\u0027ENSB\u0027) #(lf)                                )#(lf)  order by a.''Employee Identifier'') as zzz#(lf)  #(lf)   on a.''Employee Identifier'' = zzz.''Employee Identifier'' left join#(lf)#(lf)#(lf)       (select distinct a2.''Organization Department Code'' as RFO_CDE,#(lf)                        a2.''Organization Sub Department Code'' as MVP_ID,#(lf)                        cc.''Organization Department Description'',#(lf)                        case when cc.''Employee Name'' is null then \u0027Vacant\u0027#(lf)                          else cc.''Employee Name''#(lf)                        end as ''MVP Leader''    #(lf)          from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' a2  left join#(lf)               (Select Distinct aa.''Organization Sub Department Code'',#(lf)                                aa.''Organization Department Description'',#(lf)                                bb.''Employee Identifier'',#(lf)                                bb.''Employee Name'' #(lf)                  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' as aa left join#(lf)                       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' as bb#(lf)                    on aa.''Sales Hierarchy Identifier''=bb.''Employee Identifier''  #(lf)                 where aa.''Current Row Indicator'' = \u0027Y\u0027#(lf)                   and bb.''Employee Status Type Code'' = \u0027A\u0027#(lf)                   and bb.''Current Row Indicator'' = \u0027Y\u0027#(lf)                   and aa.''Effective End Date'' = \u00279999-12-31\u0027#(lf)                   and bb.''Job Type Code'' = \u0027001001\u0027#(lf)                 order by aa.''Organization Sub Department Code'') cc#(lf)             on a2.''Organization Sub Department Code''=cc.''Organization Sub Department Code''  #(lf)          where a2.''Current Row Indicator'' = \u0027Y\u0027#(lf)            and a2.''Effective End Date'' = \u00279999-12-31\u0027#(lf)            and a2.''Organization Zone Code'' \u003c\u003e \u0027UKWN\u0027#(lf)           order by a2.''Organization Sub Department Code''  ) as zz3#(lf)  on c.''Sub Department Identifier''= zz3.''MVP_ID'' left join#(lf)   #(lf)    #(lf)     (SELECT DISTINCT a4.''Organization Department Code'' as RFO_CDE,#(lf)                      a4.''Organization Zone Code'' as TAG_ZONE_NM, #(lf)                      (substring(a4.''Organization Zone Code'',6,5)) as Market_ID,#(lf)                      case when t4.''Employee Name'' is null then \u0027Vacant\u0027#(lf)                        else t4.''Employee Name''#(lf)                      end as Market_Leaders#(lf)#(lf)        from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' a4 left join #(lf)             (select distinct aa4.''Organization Zone Code'',#(lf)                              bb4.''Employee Name''  #(lf)#(lf)                from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' aa4 left join #(lf)                     ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' bb4#(lf)                  on aa4.''Sales Hierarchy Identifier''=bb4.''Employee Identifier''#(lf)               where aa4.''Current Row Indicator'' = \u0027Y\u0027      #(lf)                 and bb4.''Employee Status Type Code'' in (\u0027A\u0027)#(lf)                 and aa4.''Effective End Date'' = \u00279999-12-31\u0027#(lf)                 and bb4.''Current Row Indicator'' = \u0027Y\u0027#(lf)                 and aa4.''Effective End Date'' = \u00279999-12-31\u0027#(lf)                 and (bb4.''Job Type Code'' in (\u0027001002\u0027,\u0027001003\u0027,\u0027001007\u0027) or #(lf)                      bb4.''Employee Identifier'' in (\u0027TS60295\u0027,\u0027TS49431\u0027,\u0027TS22024\u0027,\u0027TS26677\u0027))#(lf)                 and bb4.''Employee Identifier'' not in (\u0027TS62904\u0027,\u0027TS67022\u0027,\u0027TS74827\u0027,\u0027TS73067\u0027,\u0027TS77319\u0027,\u0027TS73124\u0027)) t4 #(lf)          on a4.''Organization Zone Code'' = t4.''Organization Zone Code''#(lf)       where a4.''Current Row Indicator'' = \u0027Y\u0027#(lf)         and a4.''Effective End Date'' = \u00279999-12-31\u0027#(lf)         and substring(a4.''Organization Zone Code'',6,2) \u003c\u003e \u002700\u0027#(lf)         and a4.''Organization Department Code'' \u003c\u003e \u0027UKWN\u0027#(lf)       order by a4.''Organization Zone Code'') zz4#(lf)     #(lf)   on  b.''Organization Zone Code''= zz4.''TAG_ZONE_NM'' #(lf)  #(lf)  #(lf) where a.''Employee Status Type Code'' IN (\u0027A\u0027)#(lf)  /* a.''Employee Status Type Code'' IN (\u0027A\u0027,\u0027I\u0027,\u0027L\u0027) */#(lf)   and (c.''Job Family Code'' LIKE \u0027FLD%\u0027 OR#(lf)        c.''Job Family Code'' =\u0027SALES\u0027 OR#(lf)        c.''TF Job Class Code'' =\u0027FAC\u0027)#(lf)   and a.''Termination Date'' is NULL #(lf)   and (a.''Job Type Code'' in (\u0027002003\u0027,\u0027002010\u0027,\u0027002011\u0027,\u0027002012\u0027,\u0027002016\u0027,\u0027002017\u0027,#(lf)                              \u0027002000\u0027,\u0027002022\u0027,\u0027002024\u0027,\u0027002025\u0027,\u0027002026\u0027,\u0027002027\u0027,#(lf)                              \u0027002030\u0027,\u0027002031\u0027,\u0027002032\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027003602\u0027,#(lf)                              \u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027) or #(lf)       a.''Organization Department Code'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027)) #(lf)   and c.''Department Identifier'' not in (\u00272410\u0027,\u00273005\u0027,\u00277151\u0027,\u00277152\u0027,\u00279150\u0027,\u00279134\u0027,#(lf)                                         \u0027NA\u0027,\u00274100\u0027,\u00276053\u0027,\u00276100\u0027,\u00278900\u0027) #(lf)   and b.''Effective End Date'' = \u00279999-12-31\u0027 #(lf)   and b.''Current Row Indicator'' = \u0027Y\u0027 #(lf)   and a.''Current Row Indicator'' = \u0027Y\u0027 #(lf)   --and a.''Employee Identifier'' = \u0027TS77676\u0027#(lf)order by a.''Employee Identifier''', null, [EnableFolding=true]),    #'Added Custom' = Table.AddColumn(Source, 'Split_Cred', each Text.Split( [CREDENTIALSXX], ' ' )),    #'Added Custom1' = Table.AddColumn(#'Added Custom', 'Shrink_Cred', each List.Select([Split_Cred], each _ \u003c\u003e '')),    #'Added Custom2' = Table.AddColumn(#'Added Custom1', 'Credentials', each Text.Combine([Shrink_Cred], ' ')),    #'Added Custom3' = Table.AddColumn(#'Added Custom2', 'Split_License', each Text.Split( [LICENSESXX], ' ' )),    #'Added Custom4' = Table.AddColumn(#'Added Custom3', 'Shrink_License', each List.Select([Split_License], each _ \u003c\u003e '')),    #'Added Custom5' = Table.AddColumn(#'Added Custom4', 'License', each Text.Combine([Shrink_License], ' ')),    #'Removed Columns' = Table.RemoveColumns(#'Added Custom5',{'Split_Cred', 'Shrink_Cred', 'Split_License', 'Shrink_License', 'CREDENTIALSXX', 'LICENSESXX'}),    #'Added Custom6' = Table.AddColumn(#'Removed Columns', 'Conference Qualification', each if[Conference Qualification Type Code] = '33' then 'Pinnacle A'  else if[Conference Qualification Type Code] = '32' then 'Pinnacle B'else if[Conference Qualification Type Code] = '31' then 'Pinnacle C'else if[Conference Qualification Type Code] = '29' then 'Summit A'else if[Conference Qualification Type Code] = '28' then 'Summit B'else if[Conference Qualification Type Code] = '27' then 'Summit C'else if[Conference Qualification Type Code] = '22' then 'Sierra A'else if[Conference Qualification Type Code] = '20' then 'Sierra B'else 'Non-Qualified'),    #'Added Custom7' = Table.AddColumn(#'Added Custom6', 'Team Purpose Description', each if [Team Purpose Code] = 'PBP' then 'Professional'else if [Team Purpose Code] = 'PBPS' then 'Professional'else if [Team Purpose Code] = 'FRML' then 'Formal'  else if [Team Purpose Code] = 'FRMS' then 'Formal'else if [Team Purpose Code] = 'ASSC' then 'Association'else if [Team Purpose Code] = 'SOLO' then 'Solo'else if [Team Purpose Code] = 'MKTG' then 'Marketing'else ' '),    #'Added Custom8' = Table.AddColumn(#'Added Custom7', 'Market with Leader', each [MARKET]\u0026' - '\u0026[MARKET_LEADERS]),    #'Added Custom9' = Table.AddColumn(#'Added Custom8', 'MVP with Leader', each [MVP_ID] \u0026 ' - ' \u0026 [MVP Leader]),    #'Replaced Value' = Table.ReplaceValue(#'Added Custom9',null,'',Replacer.ReplaceValue,{'Team Name'}),    #'Replaced Value1' = Table.ReplaceValue(#'Replaced Value',null,'',Replacer.ReplaceValue,{'Team Identifier'}),    #'Added Custom10' = Table.AddColumn(#'Replaced Value1', 'TeamAdvisor_HlthRpt', each if [Team Identifier] = '' then [EMP_NM] else [Team Name]),    #'Added Custom11' = Table.AddColumn(#'Added Custom10', 'Team Indicator', each if([Team Identifier]='') then 0 else 1),    #'Changed Type' = Table.TransformColumnTypes(#'Added Custom11',{{'Team Indicator', Int64.Type}}),    #'Removed Duplicates' = Table.Distinct(#'Changed Type', {'SALE_HIER_DIM_SK'}),    #'Filtered Rows' = Table.SelectRows(#'Removed Duplicates', each true),    #'Merged Queries' = Table.NestedJoin(#'Filtered Rows', {'FILTER_IND'}, #'Experience Advisor Sort', {'Filter_Ind'}, 'Experience Advisor Sort', JoinKind.LeftOuter),    #'Expanded Experience Advisor Sort' = Table.ExpandTableColumn(#'Merged Queries', 'Experience Advisor Sort', {'Sort'}, {'Experience Advisor Sort.Sort'}),    #'Added Custom12' = Table.AddColumn(#'Expanded Experience Advisor Sort', 'Advisor Group', each Text.BeforeDelimiter([Advisor Group Full Name],'Advisor Group'))in    #'Added Custom12'"}]},{"name":"Pending_Applications","isHidden":false,"storageMode":"Import","columns":[{"name":"Financial Services Agreement Surrogate Key","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"RFOCODE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFONAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ZONE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ZONE_NAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CORPORATEEMPLOYEEID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"AgentFullName","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"New Business Application Number","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"BENEFITCONTRACTNUMBER","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PRODUCT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LOB","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CIFOWNERFULLNAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Financial Services Agreement Owner Person Surrogate Key","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"MBR_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ESTIMATEDSALESCREDITAMT","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"BENEFIT_AMOUNT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"DAYS_PENDING","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"TRANSRECEIVEDT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TRANSDESC","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CTRC_PND_CATG_EXCD","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"EstSalesCredit","expression":" var _total = calculate(sum(\u0027Pending_Applications\u0027[ESTIMATEDSALESCREDITAMT])) ReturnIF(ISBLANK(_total),' ',_total)","isHidden":false}],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'select Distinct aa.''Financial Services Agreement Surrogate Key'',#(lf)                c.''Department Identifier'' as RFOCode,#(lf)                c.''Department Name'' as RFOName,#(lf)                substring(c.''RFO Zone Identifier'',6,2) as Zone,#(lf)                substring(c.''RFO Zone Name'',1,18) as Zone_Name,#(lf)                c.''Source System Key Text'' as CorporateEmployeeID,#(lf)                --trim(c.''First Name'') || \u0027 \u0027 || trim(c.''Last Name'') as ''AgentFullName'',#(lf)                trim(c.''Last Name'')||\u0027, \u0027||trim(c.''First Name'') as ''AgentFullName'',#(lf)                aa.''New Business Application Number'' as ''New Business Application Number'',#(lf)                d.''Benefit Contract Number'' as BenefitContractNumber,#(lf)                aa.''Adjusted Level 3 Product Line Of Business Code'' as Product,#(lf)                e.''Benefit Contract Type Description'' as LOB,#(lf)                --trim(f.''First Name'')||\u0027 \u0027|| trim(f.''Last Name'') as CIFOwnerFullName,#(lf)                trim(f.''Last Name'')||\u0027, \u0027||trim(f.''First Name'') as CIFOwnerFullName,#(lf)                aa.''Financial Services Agreement Owner Person Surrogate Key'',#(lf)                h.''Membership Type Description'' as MBR_TYP_CDE,#(lf)                aa.''New Sales Credit Estimated Amount'' as EstimatedSalesCreditAmt,#(lf)                aa.''New Business Application Face Amount'' as Benefit_Amount,#(lf)                aa.''New Business Application Days Pending Count'' as Days_Pending,#(lf)                aa.''Application Receive Date Surrogate Key'' as TransReceiveDT,#(lf)                aa.''New Business Application Type Description'' as TransDesc,#(lf)                aa.''New Business Application Current Pending Category Description'' as CTRC_PND_CATG_EXCD#(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''New Business Applications Summarized'' as aa left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Contract Dimension'' as d#(lf)    on aa.''Financial Services Agreement Surrogate Key''=d.''Contract Dimension Surrogate Key'' left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Conformed Contract Dimension Detail''  as e on#(lf)     (d.''Benefit Contract Number''= e.''Benefit Contract Number''  and d.''Benefit Contract Type Code'' = e.''Benefit Contract Type Code'') left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Person Dimension'' as f#(lf)    on aa.''Financial Services Agreement Owner Person Surrogate Key'' = f.''Person Dimension Surrogate Key'' left join#(lf)       (''ENTERPRISE_EDW''.''PRESENTATION_01''.''Membership Fact'' as g inner join #(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Membership Type Dimension'' as h #(lf)        on g.''Membership Type Dimension Surrogate Key'' = h.''Membership Type Dimension Surrogate Key'' and g.''Effective End Date''=\u00279999-12-31\u0027) #(lf)    on f.''Person Dimension Surrogate Key'' = g.''Person Dimension Surrogate Key''  left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' as c#(lf)    on(aa.''Writing Agent Surrogate Key'' = c.''Organization Dimension Surrogate Key'')   #(lf)  where aa.''New Business Application Current Status Description'' =\u0027Pending\u0027 #(lf)    and c.''Current Row Indicator'' = \u0027Y\u0027#(lf)    and d.''Current Row Indicator'' = \u0027Y\u0027#(lf)    and e.''Current Row Indicator'' = \u0027Y\u0027#(lf)    and f.''Current Row Indicator'' = \u0027Y\u0027', null, [EnableFolding=true]),    #'Replaced Value' = Table.ReplaceValue(Source,'LIFE','Life',Replacer.ReplaceText,{'PRODUCT'}),    #'Replaced Value1' = Table.ReplaceValue(#'Replaced Value','HLTH','Health',Replacer.ReplaceText,{'PRODUCT'}),    #'Replaced Value2' = Table.ReplaceValue(#'Replaced Value1','ANN','Annuity',Replacer.ReplaceText,{'PRODUCT'}),    #'Replaced Value3' = Table.ReplaceValue(#'Replaced Value2',null,0,Replacer.ReplaceValue,{'ESTIMATEDSALESCREDITAMT'}),    #'Replaced Value4' = Table.ReplaceValue(#'Replaced Value3',null,0,Replacer.ReplaceValue,{'BENEFIT_AMOUNT'}),    #'Replaced Value5' = Table.ReplaceValue(#'Replaced Value4','Unknown, Unknown','',Replacer.ReplaceText,{'CIFOWNERFULLNAME'})in    #'Replaced Value5'"}]},{"name":"FldGoals2022","isHidden":false,"storageMode":"Import","columns":[{"name":"CORP_EMP_ID_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"NAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"RFO_Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TITLE_CODE","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"RPT_TO_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Zone_Leader_Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Division_Code","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DIVISION_NAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team_Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"username","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"userTags","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Referrals","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Approaches","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Prospect_Connects_Held","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Appointments","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"NewFinancialCustomers","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"NSC_Goal","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"GDC_Goal","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Total_Gross_Revenue","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"FeeBasedPlanningFees","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"FinancialPlans","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"As_of_Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"As_of_Date - Copy","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Year","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////pnfiles002b//fp_cifs_7834_sas$//MarketAnalysis//FieldReporting//FieldGoals//FldGoals.csv'),[Delimiter=',', Columns=39, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'CORP_EMP_ID_CDE', type text}, {'NAME', type text}, {'RFO', Int64.Type}, {'RFO_Name', type text}, {'JOB_TITLE_CODE', Int64.Type}, {'RPT_TO_ID', type text}, {'Zone_Leader_Name', type text}, {'Division_Code', Int64.Type}, {'DIVISION_NAME', type text}, {'Team_Name', type text}, {'SuccessPro_Name', type text}, {'username', type text}, {'userTags', type text}, {'Referrals', Int64.Type}, {'Approaches', Int64.Type}, {'Prospect_Connects_Held', Int64.Type}, {'Appointments', Int64.Type}, {'NewFinancialCustomers', Int64.Type},  {'NSC_Goal', Int64.Type}, {'GDC_Goal', Int64.Type}, {'Total_Gross_Revenue', Int64.Type}, {'FeeBasedPlanningFees', Int64.Type}, {'FinancialPlans', Int64.Type}, {'As_of_Date', type date}}),    #'Removed Columns' = Table.RemoveColumns(#'Changed Type',{'', '_1', '_2', '_3', '_4', '_5', '_6', '_7', '_8', '_9', '_10', '_11', '_12', '_13', '_14'}),    #'Duplicated Column' = Table.DuplicateColumn(#'Removed Columns', 'As_of_Date', 'As_of_Date - Copy'),    #'Inserted Year' = Table.AddColumn(#'Duplicated Column', 'Year', each Date.Year([#'As_of_Date - Copy']), Int64.Type),    #'Renamed Columns' = Table.RenameColumns(#'Inserted Year',{{'SuccessPro_Name', 'EMP_NM'}})in    #'Renamed Columns'"}]},{"name":"FldGoals","isHidden":false,"storageMode":"Import","columns":[{"name":"CORP_EMP_ID_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"NAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TITLE_CODE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RPT_TO_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Zone_Leader_Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Division_Code","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DIVISION_NAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team_Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"username","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"userTags","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Referrals","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Approaches","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Prospect_Connects_Held","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Appointments","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"NewFinancialCustomers","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"NSC_Goal","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"GDC_Goal","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Total_Gross_Revenue","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"FeeBasedPlanningFees","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"FinancialPlans","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"As_of_Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Year","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"NewMoney","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"GridRevenue","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"FYLHGRID","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"RFO_NAME 2","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DIVISION_CODE 2","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TEAM_NAME 2","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"USERNAME 2","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"USERTAG","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"AS_OF_DATE 2","dataType":"DateTime","isHidden":false,"columnType":"Data"}],"measures":[{"name":"NSC YTD Goal","expression":"--IF(SUM(FldGoals2021[NSC_Goal]) = 0, 0.00001, SUM(FldGoals2021[NSC_Goal]))--Updated 1/25/22  var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT])  Var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT]) --var _goaltotal = calculate(sum(FldGoals[NSC_Goal]),FldGoals[Year] \u003e= year(min_date),FldGoals[Year]  \u003c= year(max_date))  --var _goaltotal = calculate(sum(FldGoals[NSC_Goal]),FldGoals[FldGoals_Year] =year(min_date))  var _goaltotal = calculate(sum(FldGoals[NSC_Goal]),FldGoals[Year] \u003e= year(min_date),FldGoals[Year]  \u003c= year(max_date)) Return --min_date --max_date  --calculate(sum(FldGoals[NSC_Goal]),FldGoals[Year] \u003e= year(min_date),FldGoals[Year]  \u003c= year(max_date))if(ISBLANK(_goaltotal),0,_goaltotal)","isHidden":false},{"name":"Track to Goal","expression":"DIVIDE(\u0027DTRB_PERF_DATES\u0027[Todays_WKDAY], 252)","isHidden":false},{"name":"GDC YTD Goal","expression":"--Updated 1/25/22  var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT])  var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])  var _goaltotal = calculate(sum(FldGoals[GDC_Goal]),FldGoals[Year] \u003e= year(min_date),FldGoals[Year]  \u003c= year(max_date)) Return if(ISBLANK(_goaltotal),0,_goaltotal)","isHidden":false},{"name":"NFC YTD Goal","expression":"--IF(SUM(FldGoals[NewFinancialCustomers]) = 0, 0.00001, SUM(FldGoals[NewFinancialCustomers]))var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT])var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])var _goaltotal = calculate(sum(FldGoals[NewFinancialCustomers]),FldGoals[Year] \u003e= year(min_date),FldGoals[Year]  \u003c= year(max_date))Returnif(ISBLANK(_goaltotal),0,_goaltotal)","isHidden":false},{"name":"NFC Goal %","expression":"--DIVIDE(\u0027NFC\u0027[YTD New Clients], SUM(FldGoals[NewFinancialCustomers]),0)var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT])Var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])var _fldGoalsNFC = calculate(sum(FldGoals[NewFinancialCustomers]), FldGoals[Year] \u003e= year(min_date),FldGoals[Year]\u003c= year(max_date))ReturnDIVIDE(\u0027NFC\u0027[YTD New Clients], _fldGoalsNFC,0)--IF(ISBLANK(_gridtotal),0,_gridtotal)","isHidden":false},{"name":"NFC Tracking","expression":"SWITCH(TRUE(),[NFC Goal %] \u003c= [Track to Goal], UNICHAR(9660),                         [NFC Goal %] \u003e= [Track to Goal], UNICHAR(9650),                         BLANK())","isHidden":false},{"name":"Appt Goal %","expression":"--DIVIDE(\u0027Vital Stats DB Appointment Detail\u0027[YTD Appts], SUM(FldGoals[Appointments]),0)var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT])Var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])var _fldGoalsAppts = calculate(sum(FldGoals[Appointments]), FldGoals[Year] \u003e= year(min_date),FldGoals[Year]\u003c= year(max_date))--var _fldGoalsAppts_Team = calculate(sum(FldGoals[Appointments]), \u0027Sales\u0027[TeamSale_Ind] = 'Y', FldGoals[Year] \u003e= year(min_date),FldGoals[Year]\u003c= year(max_date))ReturnDIVIDE(\u0027Vital Stats DB Appointment Detail\u0027[YTD Appts], _fldGoalsAppts,0)--IF([TeamNmFiltered] = 1, DIVIDE(\u0027Vital Stats DB Appointment Detail\u0027[YTD Appts],  _fldGoalsAppts_Team,0), DIVIDE(\u0027Vital Stats DB Appointment Detail\u0027[YTD Appts],  _fldGoalsAppts,0))--IF(ISBLANK(_gridtotal),0,_gridtotal)","isHidden":false},{"name":"Appt YTD Goal","expression":"--IF(SUM(FldGoals[Appointments]) = 0, 0.00001, SUM(FldGoals[Appointments]))var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT])var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])var _goaltotal = calculate(sum(FldGoals[Appointments]),FldGoals[Year] \u003e= year(min_date),FldGoals[Year]  \u003c= year(max_date))Returnif(ISBLANK(_goaltotal),0,_goaltotal)","isHidden":false},{"name":"Appt_Tracking","expression":"SWITCH(TRUE(),[Appt Goal %] \u003c= [Track to Goal], UNICHAR(9660),                         [Appt Goal %] \u003e= [Track to Goal], UNICHAR(9650),                         BLANK())","isHidden":false},{"name":"Prospect Connect Goal %","expression":"-- DIVIDE(\u0027Vital Stats DB Appointment Detail\u0027[YTD Prospect Connect], SUM(FldGoals[Prospect_Connects_Held]),0)var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT])Var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])var _fldGoalsPC = calculate(sum(FldGoals[Prospect_Connects_Held]), FldGoals[Year] \u003e= year(min_date),FldGoals[Year]\u003c= year(max_date))--var _fldGoalsPC_Team = calculate(sum(FldGoals[Prospect_Connects_Held]), \u0027Sales\u0027[TeamSale_Ind] = 'Y', FldGoals[Year] \u003e= year(min_date),FldGoals[Year]\u003c= year(max_date))ReturnDIVIDE(\u0027Vital Stats DB Appointment Detail\u0027[YTD Prospect Connect], _fldGoalsPC,0)--IF([TeamNmFiltered] = 1, DIVIDE(\u0027Vital Stats DB Appointment Detail\u0027[YTD Prospect Connect],  _fldGoalsPC_Team,0), DIVIDE(\u0027Vital Stats DB Appointment Detail\u0027[YTD Prospect Connect],  _fldGoalsPC,0))","isHidden":false},{"name":"Prospect Connect Tracking","expression":"SWITCH(TRUE(),[Prospect Connect Goal %] \u003c= [Track to Goal], UNICHAR(9660),                         [Prospect Connect Goal %] \u003e= [Track to Goal], UNICHAR(9650),                         BLANK())","isHidden":false},{"name":"Prsp Connect YTD Goal","expression":"--IF(SUM(FldGoals[Prospect_Connects_Held]) = 0, 0.00001, SUM(FldGoals[Prospect_Connects_Held]))var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT])var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])var _goaltotal = calculate(sum(FldGoals[Prospect_Connects_Held]),FldGoals[Year] \u003e= year(min_date),FldGoals[Year]  \u003c= year(max_date))Returnif(ISBLANK(_goaltotal),0,_goaltotal)","isHidden":false},{"name":"TGR Goal %","expression":"var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT])Var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])var _fldGoalsTGR = calculate(sum(FldGoals[GridRevenue]), FldGoals[Year] \u003e= year(min_date),FldGoals[Year]\u003c= year(max_date))var _fldGoalsTGR_Team = calculate(sum(FldGoals[GridRevenue]), \u0027Sales\u0027[TeamSale_Ind] = 'Y', FldGoals[Year] \u003e= year(min_date),FldGoals[Year]\u003c= year(max_date))Return--DIVIDE(\u0027Sales\u0027[YTD Grid Revenue], _fldGoalsTGR,0)IF([TeamNmFiltered] = 1, DIVIDE(\u0027Sales\u0027[YTD Grid Revenue], _fldGoalsTGR_Team,0), DIVIDE(\u0027Sales\u0027[YTD Grid Revenue], _fldGoalsTGR,0))","isHidden":false},{"name":"TGR YTD Goal","expression":"--IF(SUM(FldGoals[Appointments]) = 0, 0.00001, SUM(FldGoals[Appointments]))var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT])var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])var _goaltotal = calculate(sum(FldGoals[GridRevenue]),FldGoals[Year] \u003e= year(min_date),FldGoals[Year]  \u003c= year(max_date))Returnif(ISBLANK(_goaltotal),0,_goaltotal)","isHidden":false},{"name":"TGR_Tracking","expression":"SWITCH(TRUE(),[TGR Goal %] \u003c= [Track to Goal], UNICHAR(9660),                         [TGR Goal %] \u003e= [Track to Goal], UNICHAR(9650),                         BLANK())","isHidden":false},{"name":"FYLHGR Goal %","expression":"var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT])Var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])var _fldGoalsTGR = calculate(sum(FldGoals[FYLHGRID]), FldGoals[Year] \u003e= year(min_date),FldGoals[Year]\u003c= year(max_date))--var _fldGoalsTGR_Team = calculate(sum(FldGoals[FYLHGRID]), \u0027Sales\u0027[TeamSale_Ind] = 'Y', FldGoals[Year] \u003e= year(min_date),FldGoals[Year]\u003c= year(max_date))ReturnDIVIDE(\u0027Sales\u0027[YTD 1st YR Grid Revenue], _fldGoalsTGR,0)--IF([TeamNmFiltered] = 1, DIVIDE(\u0027Sales\u0027[YTD 1st YR Grid Revenue], _fldGoalsTGR_Team,0), DIVIDE(\u0027Sales\u0027[YTD 1st YR Grid Revenue], _fldGoalsTGR,0))","isHidden":false},{"name":"FYLHGR YTD Goal","expression":"--IF(SUM(FldGoals[Appointments]) = 0, 0.00001, SUM(FldGoals[Appointments]))var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT])var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])var _goaltotal = calculate(sum(FldGoals[FYLHGRID]),FldGoals[Year] \u003e= year(min_date),FldGoals[Year]  \u003c= year(max_date))Returnif(ISBLANK(_goaltotal),0,_goaltotal)","isHidden":false},{"name":"FYLHGR_Tracking","expression":"SWITCH(TRUE(),[FYLHGR Goal %] \u003c= [Track to Goal], UNICHAR(9660),                         [FYLHGR Goal %] \u003e= [Track to Goal], UNICHAR(9650),                         BLANK())","isHidden":false},{"name":"test FYLHGR Goal %","expression":"  --var _test = [FYLHGR Goal %]  --var _track = [Track to Goal]  --Track to Goal = DIVIDE(\u0027DTRB_PERF_DATES\u0027[Todays_WKDAY], 252)  --var _test2=\u0027DTRB_PERF_DATES\u0027[Todays_WKDAY]  --var _test3 = divide(72,252)  var _test3 = UNICHAR(9650)RETURN--_test--_track_test3--FYLHGR_Tracking = SWITCH(TRUE(),[FYLHGR Goal %] \u003c= [Track to Goal], UNICHAR(9660),--                         [FYLHGR Goal %] \u003e= [Track to Goal], UNICHAR(9650),--                         BLANK())--test FYLHGR Goal % = --var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT])--Var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])--var _fldGoalsTGR = calculate(sum(FldGoals[FYLHGRID]), FldGoals[Year] \u003e= year(min_date),FldGoals[Year]\u003c= year(max_date))--var _salestotal =\u0027Sales\u0027[YTD 1st YR Grid Revenue]--Return--DIVIDE(\u0027Sales\u0027[YTD 1st YR Grid Revenue], _fldGoalsTGR,0)--Prospect Connect Goal % = -- DIVIDE(\u0027Vital Stats DB Appointment Detail\u0027[YTD Prospect Connect], SUM(FldGoals[Prospect_Connects_Held]),0)--var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT])--Var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])--var _fldGoalsPC = calculate(sum(FldGoals[Prospect_Connects_Held]), FldGoals[Year] \u003e= year(min_date),FldGoals[Year]\u003c= year(max_date))--var _fldGoalsPC_Team = calculate(sum(FldGoals[Prospect_Connects_Held]), \u0027Sales\u0027[TeamSale_Ind] = 'Y', FldGoals[Year] \u003e= year(min_date),FldGoals[Year]\u003c= year(max_date))--Return--DIVIDE(\u0027Vital Stats DB Appointment Detail\u0027[YTD Prospect Connect], _fldGoalsPC,0)","isHidden":false},{"name":"Test Prospect Connect Goal %","expression":"-- DIVIDE(\u0027Vital Stats DB Appointment Detail\u0027[YTD Prospect Connect], SUM(FldGoals[Prospect_Connects_Held]),0)var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT])Var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])var _fldGoalsPC = calculate(sum(FldGoals[Prospect_Connects_Held]), FldGoals[Year] \u003e= year(min_date),FldGoals[Year]\u003c= year(max_date))--var _fldGoalsPC_Team = calculate(sum(FldGoals[Prospect_Connects_Held]), \u0027Sales\u0027[TeamSale_Ind] = 'Y', FldGoals[Year] \u003e= year(min_date),FldGoals[Year]\u003c= year(max_date))Return_fldGoalsPC--DIVIDE(\u0027Vital Stats DB Appointment Detail\u0027[YTD Prospect Connect], _fldGoalsPC,0)","isHidden":false},{"name":"Referrals YTD Goal","expression":"--Updated 1/25/22  var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT])  var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])  var _goaltotal = calculate(sum(FldGoals[Referrals]),FldGoals[Year] \u003e= year(min_date),FldGoals[Year]  \u003c= year(max_date)) Return if(ISBLANK(_goaltotal),0,_goaltotal)","isHidden":false},{"name":"Referrals Goal %","expression":"--DIVIDE(\u0027Vital Stats DB Appointment Detail\u0027[YTD Appts], SUM(FldGoals[Appointments]),0)var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT])Var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])var _fldGoalsAppts = calculate(sum(FldGoals[Referrals]), FldGoals[Year] \u003e= year(min_date),FldGoals[Year]\u003c= year(max_date))--var _fldGoalsAppts_Team = calculate(sum(FldGoals[Appointments]), \u0027Sales\u0027[TeamSale_Ind] = 'Y', FldGoals[Year] \u003e= year(min_date),FldGoals[Year]\u003c= year(max_date))ReturnDIVIDE(\u0027Referrals\u0027[YTD Referrals], _fldGoalsAppts,0)--IF([TeamNmFiltered] = 1, DIVIDE(\u0027Vital Stats DB Appointment Detail\u0027[YTD Appts],  _fldGoalsAppts_Team,0), DIVIDE(\u0027Vital Stats DB Appointment Detail\u0027[YTD Appts],  _fldGoalsAppts,0))--IF(ISBLANK(_gridtotal),0,_gridtotal)","isHidden":false},{"name":"Referrals_Tracking","expression":"SWITCH(TRUE(),[Referrals Goal %] \u003c= [Track to Goal], UNICHAR(9660),                         [Appt Goal %] \u003e= [Track to Goal], UNICHAR(9650),                         BLANK())","isHidden":false}],"source":[{"expression":"let    Source = Table.Combine({FldGoals2022, FldGoals2023, FldGoals2024}),    #'Removed Columns' = Table.RemoveColumns(Source,{'As_of_Date - Copy'})in    #'Removed Columns'"}]},{"name":"Vital Stats Categories","isHidden":false,"storageMode":"Import","columns":[{"name":"Order","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"VitalStats Indicator","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"}],"measures":[],"source":[{"expression":"  Union(Row ('VitalStats Indicator','Last Week','Order',1),        Row('VitalStats Indicator','4 Week Average','Order',2),        Row('VitalStats Indicator','8 Week Average','Order',3),        Row('VitalStats Indicator','13 Week Average','Order',4),        Row('VitalStats Indicator','52 Week Average','Order',5)  )"}]},{"name":"Sales Product Sort","isHidden":false,"storageMode":"Import","columns":[{"name":"Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Sales Product Sort Order","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('bZJLb8IwEIT/ipUzlSBAC8c+BEICgRTaHhAHkyxkVWcT+YHg33dtBymUXr/Z8WZms9sl32WtQCzxCEkvGST73i7JkE7MNhoqdJW4m0jDxCfhGbSR6oaHAX9JjfLAww/6KOhb0NWNjANZ1nQSAb9L7fFzwB9o5AEV2qtYUF5XXnkJygoKzHlUZK5pFFRAlrXJ/fpXIsdeFqZBmOEFig4d9Dt4QQX8kWMNi6riZdJ23xvE/BlYG5eLdWOxJuO1WMJrcUZTaw9GXSDmDgsoPB/f8ZmCi6cxelZCU4IOczHyHAgMhg0xZ6xEzOrcmfjgtP0qBbmvI+3fFkiy8hTu1p62RFDekqZtxkZGy7B9opGaI6urWEliK/eS57Uj6/eno9v1j8jKfxPjtlmSlCPff6MkEf9PXosBV846FmaO2PlkSj5mcMawb7r+Ad1+8+TBkHUMMfTaclt8xDMY6w/ipWHMv9XO+GxDzr7/BQ==', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Product = _t, Order = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Product', type text}, {'Order', Int64.Type}}),    #'Renamed Columns' = Table.RenameColumns(#'Changed Type',{{'Order', 'Sales Product Sort Order'}})in    #'Renamed Columns'"}]},{"name":"Sales Product Category","isHidden":false,"storageMode":"Import","columns":[{"name":"Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Product Category Sort Order","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i45W8slMS1WIKTUwMDJT8EhNzCnJUNJRMlSK1YlWcszLK80sqQTyjcB8z7yy1OKS3NS8kmKgmLFSbCwA', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Product = _t, Order = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Product', type text}, {'Order', Int64.Type}}),    #'Renamed Columns' = Table.RenameColumns(#'Changed Type',{{'Order', 'Product Category Sort Order'}})in    #'Renamed Columns'"}]},{"name":"Sales Event Sort","isHidden":false,"storageMode":"Import","columns":[{"name":"Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Product Event Sort Order","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i45WcsssKi5RiExNLFLSUTJUitWJVgpKzUstT8wpBgoYgQUcU8oyi/OLKhXcUlNBosZg0ZCixLzixOSSzPw8BafE4tQUoIwJRH1xcWoJXMxUKTYWAA==', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Product = _t, Order = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Product', type text}, {'Order', Int64.Type}}),    #'Renamed Columns' = Table.RenameColumns(#'Changed Type',{{'Order', 'Product Event Sort Order'}})in    #'Renamed Columns'"}]},{"name":"Sales","isHidden":false,"storageMode":"Import","columns":[{"name":"Calendar Day Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Report Year Text","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Year Number","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Year Week Number","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Employee Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Rollup Agent Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Compensation Employee Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Compensation Reporting Roll Up Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Compensation Level 5 Product Line Of Business Subgroup Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Reporting Roll Up Product Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Reporting Roll Up Event Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Compensation Level 2 Product Character Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CMPAGT_EQ_ROLLUP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"New Sales Credit Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Gross Dealer Concessions Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Grid Credit Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Product Category","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Product Category Sort Order","dataType":"String","isHidden":false,"expression":"Related(\u0027Sales Product Category\u0027[Product Category Sort Order])","columnType":"Calculated"},{"name":"Product Event Sort Order","dataType":"String","isHidden":false,"expression":"Related(\u0027Sales Event Sort\u0027[Product Event Sort Order])","columnType":"Calculated"},{"name":"Product Sort Order","dataType":"String","isHidden":false,"expression":"Related(\u0027Sales Product Sort\u0027[Sales Product Sort Order])","columnType":"Calculated"},{"name":"MonthNameYR","dataType":"String","isHidden":false,"expression":"FORMAT(\u0027Sales\u0027[Calendar Day Date],'YYYY  MMM')","columnType":"Calculated"},{"name":"Year","dataType":"String","isHidden":false,"expression":"year(\u0027Sales\u0027[Calendar Day Date])","columnType":"Calculated"},{"name":"Year-Week","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Month Number","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SALES_PRODUCT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TeamSale_Ind","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"YTD Grid Revenue","expression":"  var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT])  Var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])  var _gridtotal = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]),DTRB_PERF_DATES[CAL_DAY_DT] \u003e= min_date,DTRB_PERF_DATES[CAL_DAY_DT] \u003c= max_date)  var _gridtotal_team = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027Sales\u0027[TeamSale_Ind] = 'Y',                         DTRB_PERF_DATES[CAL_DAY_DT] \u003e= min_date,DTRB_PERF_DATES[CAL_DAY_DT] \u003c= max_date) ReturnIF([TeamNmFiltered] = 1, IF(ISBLANK(_gridtotal_team),0,_gridtotal_team), IF(ISBLANK(_gridtotal),0,_gridtotal))","isHidden":false},{"name":"PYTD Grid Revenue","expression":"  var min_date =min(DTRB_PERF_DATES[CAL_DAY_DT])  var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])   var _total = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]), DTRB_PERF_DATES[CAL_DAY_DT] \u003e= (min_date-365),DTRB_PERF_DATES[CAL_DAY_DT] \u003c= (max_date-365))  var _total_team = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027Sales\u0027[TeamSale_Ind] = 'Y', DTRB_PERF_DATES[CAL_DAY_DT] \u003e= (min_date-365),DTRB_PERF_DATES[CAL_DAY_DT] \u003c= (max_date-365))ReturnIF([TeamNmFiltered] = 1, IF(ISBLANK(_total_team),0,_total_team), IF(ISBLANK(_total),0,_total))","isHidden":false},{"name":"Prior YR Grid Total","expression":"  var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT])  Var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])  var _total = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]),DTRB_PERF_DATES[CAL_DAY_DT] \u003e= (min_date-365),DTRB_PERF_DATES[CAL_DAY_DT] \u003c= (max(\u0027DTRB_PERF_DATES\u0027[End of Year Date])-365))  var _total_team = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027Sales\u0027[TeamSale_Ind] = 'Y', DTRB_PERF_DATES[CAL_DAY_DT] \u003e= (min_date-365),DTRB_PERF_DATES[CAL_DAY_DT] \u003c= (max(\u0027DTRB_PERF_DATES\u0027[End of Year Date])-365)) Return IF([TeamNmFiltered] = 1, IF(ISBLANK(_total_team),0,_total_team), IF(ISBLANK(_total),0,_total))","isHidden":false},{"name":"YOY Grid","expression":"  var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT])  Var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])  var _ytd_total = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]),DTRB_PERF_DATES[CAL_DAY_DT] \u003e= min_date,DTRB_PERF_DATES[CAL_DAY_DT] \u003c= max_date)  var _pytd_total = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]),DTRB_PERF_DATES[CAL_DAY_DT] \u003e= (min_date-365),DTRB_PERF_DATES[CAL_DAY_DT] \u003c= (max_date-365))  var _ytd_total_team = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027Sales\u0027[TeamSale_Ind] = 'Y', DTRB_PERF_DATES[CAL_DAY_DT] \u003e= min_date,DTRB_PERF_DATES[CAL_DAY_DT] \u003c= max_date)  var _pytd_total_team = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027Sales\u0027[TeamSale_Ind] = 'Y', DTRB_PERF_DATES[CAL_DAY_DT] \u003e= (min_date-365),DTRB_PERF_DATES[CAL_DAY_DT] \u003c= (max_date-365)) Return IF([TeamNmFiltered] = 1, IF((_pytd_total_team) = 0,0, ((_ytd_total_team - _pytd_total_team) / _pytd_total_team )),                            IF((_pytd_total) = 0,0, ((_ytd_total - _pytd_total) / _pytd_total))  )","isHidden":false},{"name":"YTD 1st YR Grid Revenue","expression":"  var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT])  Var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])  var _gridtotal = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]),DTRB_PERF_DATES[CAL_DAY_DT] \u003e= min_date,DTRB_PERF_DATES[CAL_DAY_DT] \u003c= max_date, \u0027Sales\u0027[Product Category] = 'Life \u0026 Health', \u0027Sales\u0027[Reporting Roll Up Event Description] = 'First Year')  var _gridtotal_team = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027Sales\u0027[TeamSale_Ind] = 'Y', \u0027Sales\u0027[Product Category] = 'Life \u0026 Health', \u0027Sales\u0027[Reporting Roll Up Event Description] = 'First Year', DTRB_PERF_DATES[CAL_DAY_DT] \u003e= min_date,DTRB_PERF_DATES[CAL_DAY_DT] \u003c= max_date) Return --IF(ISBLANK(_gridtotal),0,_gridtotal)IF([TeamNmFiltered] = 1, IF(ISBLANK(_gridtotal_team),0,_gridtotal_team), IF(ISBLANK(_gridtotal),0,_gridtotal))","isHidden":false},{"name":"PYTD 1st YR Grid Revenue","expression":"  var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT])  Var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])  var _total = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]),DTRB_PERF_DATES[CAL_DAY_DT] \u003e= (min_date-365),DTRB_PERF_DATES[CAL_DAY_DT] \u003c= (max_date-365), \u0027Sales\u0027[Product Category] = 'Life \u0026 Health', \u0027Sales\u0027[Reporting Roll Up Event Description] = 'First Year')  var _total_team = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027Sales\u0027[TeamSale_Ind] = 'Y', DTRB_PERF_DATES[CAL_DAY_DT] \u003e= (min_date-365),DTRB_PERF_DATES[CAL_DAY_DT] \u003c= (max_date-365), \u0027Sales\u0027[Product Category] = 'Life \u0026 Health', \u0027Sales\u0027[Reporting Roll Up Event Description] = 'First Year') ReturnIF([TeamNmFiltered] = 1, IF(ISBLANK(_total_team),0,_total_team), IF(ISBLANK(_total),0,_total))","isHidden":false},{"name":"Prior YR 1st YR Grid Total","expression":"  var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT])  Var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])  var _total = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]),DTRB_PERF_DATES[CAL_DAY_DT] \u003e= (min_date-365),DTRB_PERF_DATES[CAL_DAY_DT] \u003c= (max(\u0027DTRB_PERF_DATES\u0027[End of Year Date])-365), \u0027Sales\u0027[Product Category] = 'Life \u0026 Health', \u0027Sales\u0027[Reporting Roll Up Event Description] = 'First Year') Return if(isblank(_total),0,_total)","isHidden":false},{"name":"CY Grid Revenue","expression":" var _gridtotal = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027Sales\u0027[Distribution Performance Reporting Year Number] = YEAR(TODAY())) var _gridtotal_team = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027Sales\u0027[TeamSale_Ind] = 'Y',\u0027Sales\u0027[Distribution Performance Reporting Year Number] = YEAR(TODAY()))ReturnIF([TeamNmFiltered] = 1, IF(ISBLANK(_gridtotal_team),0,_gridtotal_team), IF(ISBLANK(_gridtotal),0,_gridtotal))","isHidden":false},{"name":"PY Grid Revenue","expression":"  var _gridtotal = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027Sales\u0027[Distribution Performance Reporting Year Number] = YEAR(TODAY())-1)ReturnIF(ISBLANK(_gridtotal),0,_gridtotal)","isHidden":false},{"name":"PY2 Grid Revenue","expression":"  var _gridtotal = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027Sales\u0027[Distribution Performance Reporting Year Number] = YEAR(TODAY())-2)ReturnIF(ISBLANK(_gridtotal),0,_gridtotal)","isHidden":false},{"name":"PYTD Grid Detail Revenue","expression":"var _total = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027DTRB_PERF_DATES\u0027[PYTD Flag] in {TRUE})var _total_team = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027Sales\u0027[TeamSale_Ind] = 'Y', \u0027DTRB_PERF_DATES\u0027[PYTD Flag] in {TRUE})RETURN IF([TeamNmFiltered] = 1, IF(ISBLANK(_total_team),0,_total_team), IF(ISBLANK(_total),0,_total))","isHidden":false},{"name":"PY2 Detail Grid Revenue","expression":"  var _gridtotal = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027Sales\u0027[Distribution Performance Reporting Year Number] = YEAR(TODAY())-2)  var _gridtotal_team = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027Sales\u0027[TeamSale_Ind] = 'Y',\u0027Sales\u0027[Distribution Performance Reporting Year Number] = YEAR(TODAY())-2)ReturnIF([TeamNmFiltered] = 1, IF(ISBLANK(_gridtotal_team),0,_gridtotal_team), IF(ISBLANK(_gridtotal),0,_gridtotal))","isHidden":false},{"name":"PY Detail Grid Revenue","expression":"  var _gridtotal = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027Sales\u0027[Distribution Performance Reporting Year Number] = YEAR(TODAY())-1)  var _gridtotal_Team = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027Sales\u0027[TeamSale_Ind] = 'Y', \u0027Sales\u0027[Distribution Performance Reporting Year Number] = YEAR(TODAY())-1)ReturnIF([TeamNmFiltered] = 1, IF(ISBLANK(_gridtotal_team),0,_gridtotal_team), IF(ISBLANK(_gridtotal),0,_gridtotal))","isHidden":false},{"name":"YOY Detail Grid","expression":"var _ytd_total = \u0027Sales\u0027[CY Grid Revenue]var _pytd_total = \u0027Sales\u0027[PYTD Grid Detail Revenue] RETURNIF((_pytd_total) = 0,0, ((_ytd_total - _pytd_total) / _pytd_total))  ","isHidden":false},{"name":"M12 Grid Revenue1 - del","expression":"  var min_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])-365  Var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])  var _gridtotal = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]),DTRB_PERF_DATES[CAL_DAY_DT] \u003e= min_date, DTRB_PERF_DATES[CAL_DAY_DT] \u003c= max_date)ReturnIF(ISBLANK(_gridtotal),0,_gridtotal)","isHidden":false},{"name":"M12 Grid Revenue","expression":"  --var min_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])-365  --Var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])  --var min_date = today()-364  var min_date = EOMONTH(TODAY(),-12) +1  var max_date = today()-1  var _gridtotal = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]), DTRB_PERF_DATES[CAL_DAY_DT] \u003e= min_date, DTRB_PERF_DATES[CAL_DAY_DT] \u003c= max_date)  var _gridtotal_team = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027Sales\u0027[TeamSale_Ind] = 'Y', DTRB_PERF_DATES[CAL_DAY_DT] \u003e= min_date, DTRB_PERF_DATES[CAL_DAY_DT] \u003c= max_date)ReturnIF([TeamNmFiltered] = 1, IF(ISBLANK(_gridtotal_team),0,_gridtotal_team), IF(ISBLANK(_gridtotal),0,_gridtotal))","isHidden":false},{"name":"YOY Grid Health Summary","expression":" -- var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT]) -- Var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT]) -- var _ytd_total = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]),DTRB_PERF_DATES[CAL_DAY_DT] \u003e= min_date,DTRB_PERF_DATES[CAL_DAY_DT] \u003c= max_date) -- var _pytd_total = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]),DTRB_PERF_DATES[CAL_DAY_DT] \u003e= (min_date-365),DTRB_PERF_DATES[CAL_DAY_DT] \u003c= (max_date-365))  var _ytd_total =[CY Grid Revenue]  var _pytd_total = [PYTD Grid Detail Revenue - Health Summary] ReturnIF((_pytd_total) = 0,0, ((_ytd_total - _pytd_total) / _pytd_total))  ","isHidden":false},{"name":"PYTD Grid Detail Revenue - Health Summary","expression":"var _total = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027DTRB_PERF_DATES\u0027[PYTD Flag] in {TRUE})var _total_team = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027Sales\u0027[TeamSale_Ind] = 'Y', \u0027DTRB_PERF_DATES\u0027[PYTD Flag] in {TRUE})RETURN IF([TeamNmFiltered] = 1, IF(ISBLANK(_total_team),0,_total_team), IF(ISBLANK(_total),0,_total))","isHidden":false},{"name":"CY FYLH Grid Revenue","expression":"  var _gridtotal = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027Sales\u0027[Distribution Performance Reporting Year Number] = YEAR(TODAY()),\u0027Sales\u0027[Product Category]='Life \u0026 Health',\u0027Sales\u0027[Reporting Roll Up Event Description] = 'First Year')  var _gridtotal_team = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027Sales\u0027[TeamSale_Ind] = 'Y', \u0027Sales\u0027[Distribution Performance Reporting Year Number] = YEAR(TODAY()),\u0027Sales\u0027[Product Category]='Life \u0026 Health',\u0027Sales\u0027[Reporting Roll Up Event Description] = 'First Year')ReturnIF([TeamNmFiltered] = 1, IF(ISBLANK(_gridtotal_team),0,_gridtotal_team), IF(ISBLANK(_gridtotal),0,_gridtotal))","isHidden":false},{"name":"YOY FYLHGR Health Summary","expression":" -- var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT]) -- Var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT]) -- var _ytd_total = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]),DTRB_PERF_DATES[CAL_DAY_DT] \u003e= min_date,DTRB_PERF_DATES[CAL_DAY_DT] \u003c= max_date) -- var _pytd_total = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]),DTRB_PERF_DATES[CAL_DAY_DT] \u003e= (min_date-365),DTRB_PERF_DATES[CAL_DAY_DT] \u003c= (max_date-365))  var _ytd_total =[CY FYLH Grid Revenue]  var _pytd_total = [PYTD FYLH Grid Detail Revenue - Health Summary] ReturnIF((_pytd_total) = 0,0, ((_ytd_total - _pytd_total) / _pytd_total))  ","isHidden":false},{"name":"PYTD FYLH Grid Detail Revenue - Health Summary","expression":"var py_start = CALCULATE(MIN(Sales[Calendar Day Date]),FILTER(DTRB_PERF_DATES,DTRB_PERF_DATES[DTRB_PERF_RPT_YR_TXT]='Previous'))var py_end = today()-365var _total = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]), FILTER(\u0027Sales\u0027,\u0027Sales\u0027[Calendar Day Date] \u003c= today()-365 \u0026\u0026 \u0027Sales\u0027[Calendar Day Date] \u003e= py_start),\u0027Sales\u0027[Product Category]='Life \u0026 Health',\u0027Sales\u0027[Reporting Roll Up Event Description] = 'First Year')var _total_team = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027Sales\u0027[TeamSale_Ind] = 'Y', FILTER(\u0027Sales\u0027,\u0027Sales\u0027[Calendar Day Date] \u003c= today()-365 \u0026\u0026 \u0027Sales\u0027[Calendar Day Date] \u003e= py_start),\u0027Sales\u0027[Product Category]='Life \u0026 Health',\u0027Sales\u0027[Reporting Roll Up Event Description] = 'First Year')RETURN IF([TeamNmFiltered] = 1, IF(ISBLANK(_total_team),0,_total_team), IF(ISBLANK(_total),0,_total))","isHidden":false},{"name":"M12 FYLH Grid Revenue","expression":"  --var min_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])-365  --Var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])  --var min_date = today()-364  var min_date = EOMONTH(TODAY(),-12) +1  var max_date = today()-1  var _gridtotal = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]),DTRB_PERF_DATES[CAL_DAY_DT] \u003e= min_date, DTRB_PERF_DATES[CAL_DAY_DT] \u003c= max_date,\u0027Sales\u0027[Product Category] = 'Life \u0026 Health',\u0027Sales\u0027[Reporting Roll Up Event Description] = 'First Year')ReturnIF(ISBLANK(_gridtotal),0,_gridtotal)","isHidden":false},{"name":"Annuity Product Health Total Sales","expression":"  var _YRSelected = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR])  var _total = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]),\u0027Sales\u0027[SALES_PRODUCT] = 'Annuity')  var _total_team = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027Sales\u0027[TeamSale_Ind] = 'Y', \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]),\u0027Sales\u0027[SALES_PRODUCT] = 'Annuity')RETURNIF([TeamNmFiltered] = 1, IF(ISBLANK(_total_team),0,_total_team), IF(ISBLANK(_total),0,_total))  ","isHidden":false},{"name":"Annuity Product Health Total %","expression":"  var _YRSelected = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR])  --Individual Totals  var _Salestotal = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]))  var _Prodtotal = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]),\u0027Sales\u0027[SALES_PRODUCT] = 'Annuity')  var _total = DIVIDE(_Prodtotal,_Salestotal)  --Team Totals  var _Salestotal_team = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027Sales\u0027[TeamSale_Ind] = 'Y', \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]))  var _Prodtotal_team  = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027Sales\u0027[TeamSale_Ind] = 'Y', \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]),\u0027Sales\u0027[SALES_PRODUCT] = 'Annuity')  var _total_team = DIVIDE(_Prodtotal_team,_Salestotal_team)RETURNIF([TeamNmFiltered] = 1, IF(ISBLANK(_total_team),0,_total_team), IF(ISBLANK(_total),0,_total))  ","isHidden":false},{"name":"Fee Based Plans Product Health Total %","expression":"  var _YRSelected = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR])  --Individual Totals  var _Salestotal = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]))  var _Prodtotal = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]),\u0027Sales\u0027[SALES_PRODUCT] = 'Fee Based Plans')  var _total = DIVIDE(_Prodtotal,_Salestotal)  --Team Totals  var _Salestotal_team = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027Sales\u0027[TeamSale_Ind] = 'Y', \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]))  var _Prodtotal_team  = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027Sales\u0027[TeamSale_Ind] = 'Y', \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]),\u0027Sales\u0027[SALES_PRODUCT] = 'Fee Based Plans')  var _total_team = DIVIDE(_Prodtotal_team,_Salestotal_team)RETURNIF([TeamNmFiltered] = 1, IF(ISBLANK(_total_team),0,_total_team), IF(ISBLANK(_total),0,_total)) ","isHidden":false},{"name":"Fee Based Plans Product Health Total Sales","expression":"--var _total = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = Year(today()),\u0027Sales\u0027[SALES_PRODUCT] = 'Fee Based Plans')    var _YRSelected = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR])  var _total = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]),\u0027Sales\u0027[SALES_PRODUCT] = 'Fee Based Plans') var _total_team = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027Sales\u0027[TeamSale_Ind] = 'Y', \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]),\u0027Sales\u0027[SALES_PRODUCT] = 'Fee Based Plans')RETURNIF([TeamNmFiltered] = 1, IF(ISBLANK(_total_team),0,_total_team), IF(ISBLANK(_total),0,_total))  ","isHidden":false},{"name":"Health Product Health Total Sales","expression":"  --var _total = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = Year(today()),\u0027Sales\u0027[SALES_PRODUCT] = 'Health')  var _YRSelected = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR])  var _total = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]),\u0027Sales\u0027[SALES_PRODUCT] = 'Health')   var _total_team = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027Sales\u0027[TeamSale_Ind] = 'Y', \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]),\u0027Sales\u0027[SALES_PRODUCT] = 'Health')RETURNIF([TeamNmFiltered] = 1, IF(ISBLANK(_total_team),0,_total_team), IF(ISBLANK(_total),0,_total))   ","isHidden":false},{"name":"Managed Accounts Product Health Total Sales","expression":"  --var _total = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = Year(today()),\u0027Sales\u0027[SALES_PRODUCT] = 'Managed Accounts')  var _YRSelected = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR])  var _total = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]),\u0027Sales\u0027[SALES_PRODUCT] = 'Managed Accounts')   var _total_team = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027Sales\u0027[TeamSale_Ind] = 'Y', \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]),\u0027Sales\u0027[SALES_PRODUCT] = 'Managed Accounts')RETURNIF([TeamNmFiltered] = 1, IF(ISBLANK(_total_team),0,_total_team), IF(ISBLANK(_total),0,_total))  ","isHidden":false},{"name":"MF/Brokerage Product Health Total Sales","expression":"  --var _total = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = Year(today()),\u0027Sales\u0027[SALES_PRODUCT] = 'Mutual Funds/Brokerage')  var _YRSelected = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR])  var _total = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]),\u0027Sales\u0027[SALES_PRODUCT] = 'Mutual Funds/Brokerage')  var _total_team = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027Sales\u0027[TeamSale_Ind] = 'Y', \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]),\u0027Sales\u0027[SALES_PRODUCT] = 'Mutual Funds/Brokerage')RETURNIF([TeamNmFiltered] = 1, IF(ISBLANK(_total_team),0,_total_team), IF(ISBLANK(_total),0,_total)) ","isHidden":false},{"name":"Trust Product Health Total Sales","expression":"  --var _total = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = Year(today()),\u0027Sales\u0027[SALES_PRODUCT] = 'Trust')  var _YRSelected = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR])  var _total = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]),\u0027Sales\u0027[SALES_PRODUCT] = 'Trust')  var _total_team = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027Sales\u0027[TeamSale_Ind] = 'Y', \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]),\u0027Sales\u0027[SALES_PRODUCT] = 'Trust')RETURNIF([TeamNmFiltered] = 1, IF(ISBLANK(_total_team),0,_total_team), IF(ISBLANK(_total),0,_total))","isHidden":false},{"name":"Unknown Product Health Total Sales","expression":"  --var _total = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = Year(today()),\u0027Sales\u0027[SALES_PRODUCT] = 'Unknown')  var _YRSelected = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR])  var _total = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]),\u0027Sales\u0027[SALES_PRODUCT] = 'Unknown')  var _total_team = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027Sales\u0027[TeamSale_Ind] = 'Y', \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]),\u0027Sales\u0027[SALES_PRODUCT] = 'Unknown')RETURNIF([TeamNmFiltered] = 1, IF(ISBLANK(_total_team),0,_total_team), IF(ISBLANK(_total),0,_total))  ","isHidden":false},{"name":"Health Product Health Total %","expression":"  --var _Salestotal = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = Year(today()))  --var _Prodtotal = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = Year(today()),\u0027Sales\u0027[SALES_PRODUCT] = 'Health')  var _YRSelected = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR])  --Individual Totals  var _Salestotal = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]))  var _Prodtotal = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]),\u0027Sales\u0027[SALES_PRODUCT] = 'Health')  var _total = DIVIDE(_Prodtotal,_Salestotal)  --Team Totals  var _Salestotal_team = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027Sales\u0027[TeamSale_Ind] = 'Y', \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]))  var _Prodtotal_team  = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027Sales\u0027[TeamSale_Ind] = 'Y', \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]),\u0027Sales\u0027[SALES_PRODUCT] = 'Health')  var _total_team = DIVIDE(_Prodtotal_team,_Salestotal_team)RETURNIF([TeamNmFiltered] = 1, IF(ISBLANK(_total_team),0,_total_team), IF(ISBLANK(_total),0,_total))","isHidden":false},{"name":"Managed Accounts Product Health Total %","expression":"  var _YRSelected = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR])   --Individual Totals  var _Salestotal = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]))  var _Prodtotal = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]),\u0027Sales\u0027[SALES_PRODUCT] = 'Managed Accounts')  var _total = DIVIDE(_Prodtotal,_Salestotal)  --Team Totals  var _Salestotal_team = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027Sales\u0027[TeamSale_Ind] = 'Y', \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]))  var _Prodtotal_team  = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027Sales\u0027[TeamSale_Ind] = 'Y', \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]),\u0027Sales\u0027[SALES_PRODUCT] = 'Managed Accounts')  var _total_team = DIVIDE(_Prodtotal_team,_Salestotal_team)RETURNIF([TeamNmFiltered] = 1, IF(ISBLANK(_total_team),0,_total_team), IF(ISBLANK(_total),0,_total))","isHidden":false},{"name":"MF/Brokerage Product Health Total %","expression":"  var _YRSelected = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR])  --Individual Totals  var _Salestotal = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]))  var _Prodtotal = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]),\u0027Sales\u0027[SALES_PRODUCT] = 'Mutual Funds/Brokerage')  var _total = DIVIDE(_Prodtotal,_Salestotal)  --Team Totals  var _Salestotal_team = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027Sales\u0027[TeamSale_Ind] = 'Y', \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]))  var _Prodtotal_team  = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027Sales\u0027[TeamSale_Ind] = 'Y', \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]),\u0027Sales\u0027[SALES_PRODUCT] = 'Mutual Funds/Brokerage')  var _total_team = DIVIDE(_Prodtotal_team,_Salestotal_team)RETURNIF([TeamNmFiltered] = 1, IF(ISBLANK(_total_team),0,_total_team), IF(ISBLANK(_total),0,_total))","isHidden":false},{"name":"Trust Product Health Total %","expression":"  var _YRSelected = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR])  --Individual Totals  var _Salestotal = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]))  var _Prodtotal = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]),\u0027Sales\u0027[SALES_PRODUCT] = 'Trust')  var _total = DIVIDE(_Prodtotal,_Salestotal)  --Team Totals  var _Salestotal_team = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027Sales\u0027[TeamSale_Ind] = 'Y', \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]))  var _Prodtotal_team  = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027Sales\u0027[TeamSale_Ind] = 'Y', \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]),\u0027Sales\u0027[SALES_PRODUCT] = 'Trust')  var _total_team = DIVIDE(_Prodtotal_team,_Salestotal_team)RETURNIF([TeamNmFiltered] = 1, IF(ISBLANK(_total_team),0,_total_team), IF(ISBLANK(_total),0,_total))","isHidden":false},{"name":"Unknown Product Health Total %","expression":"  var _YRSelected = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR])  --Individual Totals  var _Salestotal = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]))  var _Prodtotal = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]),\u0027Sales\u0027[SALES_PRODUCT] = 'Unknown')  var _total = DIVIDE(_Prodtotal,_Salestotal)  --Team Totals  var _Salestotal_team = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027Sales\u0027[TeamSale_Ind] = 'Y', \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]))  var _Prodtotal_team  = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027Sales\u0027[TeamSale_Ind] = 'Y', \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]),\u0027Sales\u0027[SALES_PRODUCT] = 'Unknown')  var _total_team = DIVIDE(_Prodtotal_team,_Salestotal_team)RETURNIF([TeamNmFiltered] = 1, IF(ISBLANK(_total_team),0,_total_team), IF(ISBLANK(_total),0,_total))","isHidden":false},{"name":"TGR_test","expression":" var _gridtotal = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]))ReturnIF(ISBLANK(_gridtotal),0,_gridtotal)","isHidden":false},{"name":"YOY Grid Health Summary_test","expression":" -- var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT]) -- Var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT]) -- var _ytd_total = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]),DTRB_PERF_DATES[CAL_DAY_DT] \u003e= min_date,DTRB_PERF_DATES[CAL_DAY_DT] \u003c= max_date) -- var _pytd_total = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]),DTRB_PERF_DATES[CAL_DAY_DT] \u003e= (min_date-365),DTRB_PERF_DATES[CAL_DAY_DT] \u003c= (max_date-365))  var _ytd_total =[CY Grid Revenue]  var _pytd_total = [PYTD Grid Detail Revenue - Health Summary] ReturnIF((_pytd_total) = 0,0, ((_ytd_total - _pytd_total) / _pytd_total))","isHidden":false},{"name":"Grid Revenue Selected (CY)- PH Comp","expression":"  var _YRSelected = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR])  var _gridtotal = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]))  var _gridtotal_team = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027Sales\u0027[TeamSale_Ind] = 'Y', \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]))ReturnIF([TeamNmFiltered] = 1, IF(ISBLANK(_gridtotal_team),0,_gridtotal_team), IF(ISBLANK(_gridtotal),0,_gridtotal))","isHidden":false},{"name":"Grid Revenue Selected (YOY) - PH Comp","expression":"  var _YRSelected = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR])  --Current Year Selected - pulls through yesterday and compares previous year to the same time period  var _begdatePY = DATE(SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR])-1, 01,01)  var _enddatePY = DATE(SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR])-1, MONTH(today()), DAY(today()-1))  var _begdateCY = DATE(SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]), 01,01)  var _gridtotalCY1= calculate(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = _YRSelected)  var _gridtotalPY1= calculate(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT] \u003e= _begdatePY, \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT] \u003c= _enddatePY)  var _gridtotalCY1_team= calculate(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027Sales\u0027[TeamSale_Ind] = 'Y', \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = _YRSelected)  var _gridtotalPY1_team = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027Sales\u0027[TeamSale_Ind] = 'Y', \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT] \u003e= _begdatePY, \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT] \u003c= _enddatePY)  var _total = IF([TeamNmFiltered] = 1, IF((_gridtotalPY1_team) = 0,0, ((_gridtotalCY1_team - _gridtotalPY1_team) / _gridtotalPY1_team)),                                        IF((_gridtotalPY1) = 0,0, ((_gridtotalCY1 - _gridtotalPY1) / _gridtotalPY1)))  --Previous Year Selected  var _CYYR = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR])  var _PYYR = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR])-1  var _gridtotalCY2= calculate(sum(\u0027Sales\u0027[Grid Credit Amount]), DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR] = _CYYR)  var _gridtotalPY2= calculate(sum(\u0027Sales\u0027[Grid Credit Amount]), DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR] = _PYYR)  var _gridtotalCY2_team = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027Sales\u0027[TeamSale_Ind] = 'Y', DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR] = _CYYR)  var _gridtotalPY2_team = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027Sales\u0027[TeamSale_Ind] = 'Y', DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR] = _PYYR)    var _total2 = IF([TeamNmFiltered] = 1, IF((_gridtotalPY2_team) = 0,0, ((_gridtotalCY2_team - _gridtotalPY2_team) / _gridtotalPY2_team)),                                        IF((_gridtotalPY2) = 0,0, ((_gridtotalCY2 - _gridtotalPY2) / _gridtotalPY2))) RETURN  IF( _YRSelected = YEAR(TODAY()), _total,     IF(_YRSelected = YEAR(TODAY())-1, _total2))","isHidden":false},{"name":"M12 Grid Revenue PH Comp","expression":"  --var min_date = DATE(SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]),MONTH(today()),DAY(today()))-364  var min_date = EOMONTH(TODAY(),-12) +1  var max_date = DATE(SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]),MONTH(today()),DAY(today()))-1  var _gridtotal = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]),DTRB_PERF_DATES[CAL_DAY_DT] \u003e= min_date, DTRB_PERF_DATES[CAL_DAY_DT] \u003c= max_date)  var _gridtotal_team = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027Sales\u0027[TeamSale_Ind] = 'Y', DTRB_PERF_DATES[CAL_DAY_DT] \u003e= min_date, DTRB_PERF_DATES[CAL_DAY_DT] \u003c= max_date)ReturnIF([TeamNmFiltered] = 1, IF(ISBLANK(_gridtotal_team),0,_gridtotal_team), IF(ISBLANK(_gridtotal),0,_gridtotal))    ","isHidden":false},{"name":"FYLH Grid Revenue Selected (CY) PH Comp","expression":"  --var _gridtotal = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027Sales\u0027[Distribution Performance Reporting Year Number] = YEAR(TODAY()),\u0027Sales\u0027[Product Category]='Life \u0026 Health',\u0027Sales\u0027[Reporting Roll Up Event Description] = 'First Year')  var _YRSelected = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR])  var _gridtotal = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027Sales\u0027[Distribution Performance Reporting Year Number] = SELECTEDVALUE(\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR]),\u0027Sales\u0027[Product Category]='Life \u0026 Health',\u0027Sales\u0027[Reporting Roll Up Event Description] = 'First Year')  var _gridtotal_team = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027Sales\u0027[TeamSale_Ind] = 'Y', \u0027Sales\u0027[Distribution Performance Reporting Year Number] = SELECTEDVALUE(\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR]),\u0027Sales\u0027[Product Category]='Life \u0026 Health',\u0027Sales\u0027[Reporting Roll Up Event Description] = 'First Year')  ReturnIF([TeamNmFiltered] = 1, IF(ISBLANK(_gridtotal_team),0,_gridtotal_team), IF(ISBLANK(_gridtotal),0,_gridtotal))","isHidden":false},{"name":"FYLH Grid Revenue Selected (YOY) - PH Comp","expression":"  var _YRSelected = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR])  var _begdatePY = DATE(SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR])-1, 01,01)  var _enddatePY = DATE(SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR])-1, MONTH(today()), DAY(today()-1))  var _begdateCY = DATE(SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]), 01,01)  --Current Year Selected - pulls through yesterday and compares previous year to the same time period  --Individual  var _gridtotalCY1= calculate(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = _YRSelected, \u0027Sales\u0027[Product Category]='Life \u0026 Health',\u0027Sales\u0027[Reporting Roll Up Event Description] = 'First Year')  var _gridtotalPY1= calculate(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT] \u003e= _begdatePY, \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT] \u003c= _enddatePY,\u0027Sales\u0027[Product Category]='Life \u0026 Health',\u0027Sales\u0027[Reporting Roll Up Event Description] = 'First Year')--Team  var _gridtotalCY1_team= calculate(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027Sales\u0027[TeamSale_Ind] = 'Y', \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = _YRSelected, \u0027Sales\u0027[Product Category]='Life \u0026 Health',\u0027Sales\u0027[Reporting Roll Up Event Description] = 'First Year')  var _gridtotalPY1_team = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027Sales\u0027[TeamSale_Ind] = 'Y', \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT] \u003e= _begdatePY, \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT] \u003c= _enddatePY, \u0027Sales\u0027[Product Category]='Life \u0026 Health',\u0027Sales\u0027[Reporting Roll Up Event Description] = 'First Year')  var _total = IF([TeamNmFiltered] = 1, IF((_gridtotalPY1_team) = 0,0, ((_gridtotalCY1_team - _gridtotalPY1_team) / _gridtotalPY1_team)),                                        IF((_gridtotalPY1) = 0,0, ((_gridtotalCY1 - _gridtotalPY1) / _gridtotalPY1)))--  var _gridtotalCY= calculate(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]),\u0027Sales\u0027[Product Category]='Life \u0026 Health',\u0027Sales\u0027[Reporting Roll Up Event Description] = 'First Year')--  var _gridtotalPY= calculate(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR])-1,\u0027Sales\u0027[Product Category]='Life \u0026 Health',\u0027Sales\u0027[Reporting Roll Up Event Description] = 'First Year') --Previous Year Selected  var _CYYR = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR])  var _PYYR = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR])-1  var _gridtotalCY2= calculate(sum(\u0027Sales\u0027[Grid Credit Amount]), DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR] = _CYYR)  var _gridtotalPY2= calculate(sum(\u0027Sales\u0027[Grid Credit Amount]), DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR] = _PYYR)  var _gridtotalCY2_team = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027Sales\u0027[TeamSale_Ind] = 'Y', DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR] = _CYYR, \u0027Sales\u0027[Product Category]='Life \u0026 Health',\u0027Sales\u0027[Reporting Roll Up Event Description] = 'First Year')  var _gridtotalPY2_team = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027Sales\u0027[TeamSale_Ind] = 'Y', DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR] = _PYYR, \u0027Sales\u0027[Product Category]='Life \u0026 Health',\u0027Sales\u0027[Reporting Roll Up Event Description] = 'First Year')    var _total2 = IF([TeamNmFiltered] = 1, IF((_gridtotalPY2_team) = 0,0, ((_gridtotalCY2_team - _gridtotalPY2_team) / _gridtotalPY2_team)),                                        IF((_gridtotalPY2) = 0,0, ((_gridtotalCY2 - _gridtotalPY2) / _gridtotalPY2)))Return--IF((_gridtotalPY) = 0,0, ((_gridtotalCY - _gridtotalPY) / _gridtotalPY)) IF( _YRSelected = YEAR(TODAY()), _total,     IF(_YRSelected = YEAR(TODAY())-1, _total2))","isHidden":false},{"name":"M12 FYLH Grid Revenue PH Comp","expression":"  var min_date = DATE(SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]),MONTH(today()),DAY(today()))-364  var max_date = DATE(SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]),MONTH(today()),DAY(today()))-1  var _gridtotal = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]),DTRB_PERF_DATES[CAL_DAY_DT] \u003e= min_date, DTRB_PERF_DATES[CAL_DAY_DT] \u003c= max_date, \u0027Sales\u0027[Product Category] = 'Life \u0026 Health',\u0027Sales\u0027[Reporting Roll Up Event Description] = 'First Year')   var _gridtotal_team = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027Sales\u0027[TeamSale_Ind] = 'Y', DTRB_PERF_DATES[CAL_DAY_DT] \u003e= min_date, DTRB_PERF_DATES[CAL_DAY_DT] \u003c= max_date, \u0027Sales\u0027[Product Category] = 'Life \u0026 Health',\u0027Sales\u0027[Reporting Roll Up Event Description] = 'First Year')ReturnIF([TeamNmFiltered] = 1, IF(ISBLANK(_gridtotal_team),0,_gridtotal_team), IF(ISBLANK(_gridtotal),0,_gridtotal))","isHidden":false},{"name":"Life Product Health Total Sales","expression":"  var _YRSelected = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR])  var _total = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]),\u0027Sales\u0027[SALES_PRODUCT] = 'Life')   var _total_team = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027Sales\u0027[TeamSale_Ind] = 'Y', \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]),\u0027Sales\u0027[SALES_PRODUCT] = 'Life')RETURNIF([TeamNmFiltered] = 1, IF(ISBLANK(_total_team),0,_total_team), IF(ISBLANK(_total),0,_total))  ","isHidden":false},{"name":"Life Product Health Total %","expression":"  var _YRSelected = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR])  --Individual Totals  var _Salestotal = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]))  var _Prodtotal = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]),\u0027Sales\u0027[SALES_PRODUCT] = 'Life')  var _total = DIVIDE(_Prodtotal,_Salestotal)  --Team Totals  var _Salestotal_team = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027Sales\u0027[TeamSale_Ind] = 'Y', \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]))  var _Prodtotal_team  = CALCULATE(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027Sales\u0027[TeamSale_Ind] = 'Y', \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR] = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]),\u0027Sales\u0027[SALES_PRODUCT] = 'Life')  var _total_team = DIVIDE(_Prodtotal_team,_Salestotal_team)RETURNIF([TeamNmFiltered] = 1, IF(ISBLANK(_total_team),0,_total_team), IF(ISBLANK(_total),0,_total))","isHidden":false},{"name":"YTD Grid Revenue Team Test","expression":"  var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT])  Var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])  var _gridtotal = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]),DTRB_PERF_DATES[CAL_DAY_DT] \u003e= min_date,DTRB_PERF_DATES[CAL_DAY_DT] \u003c= max_date)  var _gridtotal_team = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027Sales\u0027[TeamSale_Ind] = 'Y',  DTRB_PERF_DATES[CAL_DAY_DT] \u003e= min_date,DTRB_PERF_DATES[CAL_DAY_DT] \u003c= max_date)RETURN  IF([TeamNmFiltered] = 1, IF(ISBLANK(_gridtotal_team),0,_gridtotal_team), IF(ISBLANK(_gridtotal),0,_gridtotal)) ","isHidden":false},{"name":"FYLH Grid Revenue Team Test","expression":"  var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT])  var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])  var _gridtotal = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027Sales\u0027[Distribution Performance Reporting Year Number] = SELECTEDVALUE(\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR]),\u0027Sales\u0027[Product Category]='Life \u0026 Health',\u0027Sales\u0027[Reporting Roll Up Event Description] = 'First Year')  var _gridtotal_team = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027Sales\u0027[TeamSale_Ind] = 'Y', \u0027Sales\u0027[Distribution Performance Reporting Year Number] = SELECTEDVALUE(\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR]),\u0027Sales\u0027[Product Category]='Life \u0026 Health',\u0027Sales\u0027[Reporting Roll Up Event Description] = 'First Year')RETURN  IF([TeamNmFiltered] = 1, IF(ISBLANK(_gridtotal_team),0,_gridtotal_team), IF(ISBLANK(_gridtotal),0,_gridtotal))","isHidden":false},{"name":"Grid Revenue Total","expression":"  var _gridtotal = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]))  var _gridtotal_team = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027Sales\u0027[TeamSale_Ind] = 'Y')RETURN  IF([TeamNmFiltered] = 1, IF(ISBLANK(_gridtotal_team),0,_gridtotal_team), IF(ISBLANK(_gridtotal),0,_gridtotal)) ","isHidden":false},{"name":"FYLHGR Total","expression":"  var _gridtotal = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027Sales\u0027[Product Category]='Life \u0026 Health',\u0027Sales\u0027[Reporting Roll Up Event Description] = 'First Year')  var _gridtotal_team = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027Sales\u0027[TeamSale_Ind] = 'Y',\u0027Sales\u0027[Product Category]='Life \u0026 Health',\u0027Sales\u0027[Reporting Roll Up Event Description] = 'First Year')RETURN  IF([TeamNmFiltered] = 1, IF(ISBLANK(_gridtotal_team),0,_gridtotal_team), IF(ISBLANK(_gridtotal),0,_gridtotal))","isHidden":false},{"name":"M12 Test","expression":"  var min_date = EOMONTH(TODAY(),-12) +1  var max_date = today()-1  var _gridtotal = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]), DTRB_PERF_DATES[CAL_DAY_DT] \u003e= min_date, DTRB_PERF_DATES[CAL_DAY_DT] \u003c= max_date)  var _gridtotal_team = calculate(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027Sales\u0027[TeamSale_Ind] = 'Y', DTRB_PERF_DATES[CAL_DAY_DT] \u003e= min_date, DTRB_PERF_DATES[CAL_DAY_DT] \u003c= max_date)ReturnIF([TeamNmFiltered] = 1, IF(ISBLANK(_gridtotal_team),0,_gridtotal_team), IF(ISBLANK(_gridtotal),0,_gridtotal))","isHidden":false}],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'select b.''Calendar Day Date'',#(lf)       b.''Distribution Performance Report Year Text'',#(lf)       b.''Distribution Performance Reporting Year Number'',#(lf)       b.''Distribution Performance Reporting Year Week Number'',#(lf)       a.''Employee Identifier'',#(lf)       a.''Rollup Agent Identifier'',#(lf)       a.''Employee Identifier'' as ''Compensation Employee Identifier'',#(lf)       a.''Compensation Reporting Roll Up Name'',#(lf)       --c.''Benefit Contract Number'',#(lf)       a.''Compensation Level 5 Product Line Of Business Subgroup Code'',#(lf)       case when a.''Field Reporting Product Level 1 Name'' in (\u0027SPIA\u0027,\u0027FA\u0027,\u0027FIA\u0027,\u0027VA\u0027,\u0027NON PROP ANNUITY\u0027,\u0027SO\u0027) then \u0027Annuity\u0027#(lf)            when a.''Field Reporting Product Level 1 Name'' in (\u0027FEE BASED PLANS\u0027) then \u0027Fee Based Plans\u0027#(lf)            when a.''Field Reporting Product Level 1 Name'' in (\u0027MED PLANS\u0027,\u0027NON PROP HEALTH\u0027,\u0027DI\u0027,\u0027LTC\u0027) then \u0027Health\u0027#(lf)            when a.''Field Reporting Product Level 1 Name'' in (\u0027SPWL\u0027,\u0027TERM\u0027,\u0027VUL\u0027,\u0027NON PROP LIFE\u0027,\u0027UL\u0027,\u0027PERM - RECURRING\u0027) then \u0027Life\u0027#(lf)            when a.''Field Reporting Product Level 1 Name'' in (\u0027ADVISOR\u0027,\u0027SHEPHERD\u0027,\u0027SHIELD\u0027,\u0027IMPACT\u0027,\u0027UMA\u0027,\u0027GENESIS\u0027,\u0027THRIVENT ADVANTAGE\u0027,#(lf)                                                              \u0027SIM\u0027,\u0027SELECT\u0027,\u0027SMA\u0027,\u0027ADVISOR FLEX\u0027) then \u0027Managed Accounts\u0027#(lf)            when a.''Field Reporting Product Level 1 Name'' in (\u0027MF ACCOUNT SERVICE FEE\u0027,\u0027MF 12B1\u0027,\u0027SECURITIES\u0027,\u0027COLLEGE SAVINGS\u0027,\u0027MF SALES\u0027,#(lf)                                                              \u0027MF I-SHARE\u0027) then \u0027Mutual Funds/Brokerage\u0027#(lf)            when a.''Field Reporting Product Level 1 Name'' in (\u0027TRUST\u0027) then \u0027Trust\u0027#(lf)            when a.''Field Reporting Product Level 1 Name'' in (\u0027UNKNOWN\u0027) and a.''Compensation Level 3 Product Line Of Business Code'' = \u0027FEESVCS\u0027 then \u0027Fee Based Plans\u0027#(lf)            when a.''Field Reporting Product Level 1 Name'' in (\u0027UNKNOWN\u0027) and a.''Compensation Level 3 Product Line Of Business Code'' in (\u0027VARANN\u0027,\u0027FIXANN\u0027) then \u0027Annuity\u0027#(lf)            when a.''Field Reporting Product Level 1 Name'' in (\u0027UNKNOWN\u0027) and a.''Compensation Level 3 Product Line Of Business Code'' = \u0027RTLBRKG30\u0027 then \u0027Mutual Funds/Brokerage\u0027#(lf)            when a.''Field Reporting Product Level 1 Name'' in (\u0027UNKNOWN\u0027) and a.''Compensation Level 3 Product Line Of Business Code'' = \u0027HLTH\u0027 then \u0027Health\u0027#(lf)            when a.''Field Reporting Product Level 1 Name'' in (\u0027UNKNOWN\u0027) and a.''Compensation Level 3 Product Line Of Business Code'' = \u0027LIFE\u0027 then \u0027Life\u0027#(lf)            when a.''Field Reporting Product Level 1 Name'' in (\u0027UNKNOWN\u0027) and a.''Compensation Level 3 Product Line Of Business Code'' = \u0027INVADV30\u0027 then \u0027Managed Accounts\u0027#(lf)          else \u0027Unknown\u0027  #(lf)        end as Sales_Product,  #(lf)       a.''Reporting Roll Up Product Description'',#(lf)       a.''Reporting Roll Up Event Description'',#(lf)       a.''Compensation Level 2 Product Character Code'',#(lf)       case when a.''Employee Identifier'' = a.''Rollup Agent Identifier'' then \u0027Y\u0027#(lf)         else \u0027N\u0027#(lf)       end as CMPAGT_EQ_ROLLUP,#(lf)       sum(a.''New Sales Credit Amount'') as ''New Sales Credit Amount'',#(lf)       sum(a.''Gross Dealer Concessions Amount'') as ''Gross Dealer Concessions Amount'',#(lf)       sum(a.''Grid Credit Amount'') as ''Grid Credit Amount''#(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Compensation and Sales Metrics Fact'' as a left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Distribution Performance Dates Dimension'' as b#(lf)    on a.''Distribution Performance Dates Surrogate Key''=b.''Date Surrogate Key''  left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Conformed Contract Dimension Detail'' as c#(lf)    on (a.''Contract Surrogate Key''=c.''Contract Surrogate Key''),#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' as aa    #(lf)  #(lf) where a.''Employee Identifier''= aa.''Employee Identifier'' #(lf)   and b.''Distribution Performance Reporting Year Number'' in (\u00272022\u0027,\u00272023\u0027,\u00272024\u0027)  #(lf)   and ((a.''New Sales Credit Amount'' \u003c 0.00 or a.''New Sales Credit Amount'' \u003e 0.00) or#(lf)        (a.''Gross Dealer Concessions Amount'' \u003c 0.00 or a.''Gross Dealer Concessions Amount'' \u003e 0.00) or#(lf)        (a.''Grid Credit Amount'' is not NULL))#(lf)   and substring(a.''Employee Identifier'',1,2) = \u0027TS\u0027#(lf)   --and a.''Employee Identifier'' in (\u0027TS45118\u0027)#(lf)   --and b.''Calendar Day Date'' \u003e= \u00272022-03-01\u0027 and b.''Calendar Day Date'' \u003c= \u00272022-03-31\u0027#(lf)   and c.''Current Row Indicator'' =\u0027Y\u0027#(lf)   and aa.''Current Row Indicator'' = \u0027Y\u0027#(lf)   and a.''Source System Code Description'' in (\u0027Life and Annuity Trails Fact\u0027,\u0027Sales Metric Transaction\u0027,\u0027Sales Metric Adjustment\u0027)#(lf)#(lf)   and (  aa.''Organization Department Code'' \u003c\u003e \u00270383\u0027   #(lf)     or (a.''Reporting Roll Up Event Code'' \u003c\u003e\u0027REN\u0027#(lf)     and  (a.''Reporting Roll Up Event Code'' \u003c\u003e \u0027AB\u0027 or  ''Compensation Level 2 Product Character Code'' not in (\u0027RISK\u0027, \u0027ANN\u0027))#(lf)     and  a.''Financial Professional Revenue Hierarchy Level 2 Code'' \u003c\u003e (\u0027AB_MF_12B1\u0027)))#(lf)   #(lf)    #(lf) group by b.''Calendar Day Date'', b.''Distribution Performance Report Year Text'', b.''Distribution Performance Reporting Year Number'',#(lf)          b.''Distribution Performance Reporting Year Week Number'', a.''Employee Identifier'', a.''Rollup Agent Identifier'',#(lf)          --c.''Benefit Contract Number'',#(lf)          a.''Compensation Reporting Roll Up Name'',#(lf)          a.''Compensation Level 5 Product Line Of Business Subgroup Code'',#(lf)          a.''Reporting Roll Up Product Description'',#(lf)          a.''Reporting Roll Up Event Description'',#(lf)          a.''Compensation Level 2 Product Character Code'',#(lf)          a.''Field Reporting Product Level 1 Name'',#(lf)          a.''Compensation Level 3 Product Line Of Business Code''           #(lf)UNION#(lf)select b.''Calendar Day Date'',#(lf)       b.''Distribution Performance Report Year Text'',#(lf)       b.''Distribution Performance Reporting Year Number'',#(lf)       b.''Distribution Performance Reporting Year Week Number'',#(lf)       a.''Rollup Agent Identifier'' as ''Employee Identifier'',#(lf)       a.''Rollup Agent Identifier'',#(lf)       a.''Employee Identifier'' as ''Compensation Employee Identifier'',#(lf)       a.''Compensation Reporting Roll Up Name'',#(lf)       --c.''Benefit Contract Number'',#(lf)       a.''Compensation Level 5 Product Line Of Business Subgroup Code'',#(lf)       case when a.''Field Reporting Product Level 1 Name'' in (\u0027SPIA\u0027,\u0027FA\u0027,\u0027FIA\u0027,\u0027VA\u0027,\u0027NON PROP ANNUITY\u0027,\u0027SO\u0027) then \u0027Annuity\u0027#(lf)            when a.''Field Reporting Product Level 1 Name'' in (\u0027FEE BASED PLANS\u0027) then \u0027Fee Based Plans\u0027#(lf)            when a.''Field Reporting Product Level 1 Name'' in (\u0027MED PLANS\u0027,\u0027NON PROP HEALTH\u0027,\u0027DI\u0027,\u0027LTC\u0027) then \u0027Health\u0027#(lf)            when a.''Field Reporting Product Level 1 Name'' in (\u0027SPWL\u0027,\u0027TERM\u0027,\u0027VUL\u0027,\u0027NON PROP LIFE\u0027,\u0027UL\u0027,\u0027PERM - RECURRING\u0027) then \u0027Life\u0027#(lf)            when a.''Field Reporting Product Level 1 Name'' in (\u0027ADVISOR\u0027,\u0027SHEPHERD\u0027,\u0027SHIELD\u0027,\u0027IMPACT\u0027,\u0027UMA\u0027,\u0027GENESIS\u0027,\u0027THRIVENT ADVANTAGE\u0027,#(lf)                                                              \u0027SIM\u0027,\u0027SELECT\u0027,\u0027SMA\u0027,\u0027ADVISOR FLEX\u0027) then \u0027Managed Accounts\u0027#(lf)            when a.''Field Reporting Product Level 1 Name'' in (\u0027MF ACCOUNT SERVICE FEE\u0027,\u0027MF 12B1\u0027,\u0027SECURITIES\u0027,\u0027COLLEGE SAVINGS\u0027,\u0027MF SALES\u0027,#(lf)                                                              \u0027MF I-SHARE\u0027) then \u0027Mutual Funds/Brokerage\u0027#(lf)            when a.''Field Reporting Product Level 1 Name'' in (\u0027TRUST\u0027) then \u0027Trust\u0027#(lf)            when a.''Field Reporting Product Level 1 Name'' in (\u0027UNKNOWN\u0027) and a.''Compensation Level 3 Product Line Of Business Code'' = \u0027FEESVCS\u0027 then \u0027Fee Based Plans\u0027#(lf)            when a.''Field Reporting Product Level 1 Name'' in (\u0027UNKNOWN\u0027) and a.''Compensation Level 3 Product Line Of Business Code'' in (\u0027VARANN\u0027,\u0027FIXANN\u0027) then \u0027Annuity\u0027#(lf)            when a.''Field Reporting Product Level 1 Name'' in (\u0027UNKNOWN\u0027) and a.''Compensation Level 3 Product Line Of Business Code'' = \u0027RTLBRKG30\u0027 then \u0027Mutual Funds/Brokerage\u0027#(lf)            when a.''Field Reporting Product Level 1 Name'' in (\u0027UNKNOWN\u0027) and a.''Compensation Level 3 Product Line Of Business Code'' = \u0027HLTH\u0027 then \u0027Health\u0027#(lf)            when a.''Field Reporting Product Level 1 Name'' in (\u0027UNKNOWN\u0027) and a.''Compensation Level 3 Product Line Of Business Code'' = \u0027LIFE\u0027 then \u0027Life\u0027#(lf)            when a.''Field Reporting Product Level 1 Name'' in (\u0027UNKNOWN\u0027) and a.''Compensation Level 3 Product Line Of Business Code'' = \u0027INVADV30\u0027 then \u0027Managed Accounts\u0027#(lf)          else \u0027Unknown\u0027  #(lf)        end as Sales_Product,  #(lf)       a.''Reporting Roll Up Product Description'',#(lf)       a.''Reporting Roll Up Event Description'',#(lf)       a.''Compensation Level 2 Product Character Code'',#(lf)       case when a.''Employee Identifier'' = a.''Rollup Agent Identifier'' then \u0027Y\u0027#(lf)         else \u0027N\u0027#(lf)       end as CMPAGT_EQ_ROLLUP,#(lf)       sum(a.''New Sales Credit Amount'') as ''New Sales Credit Amount'',#(lf)       sum(a.''Gross Dealer Concessions Amount'') as ''Gross Dealer Concessions Amount'',#(lf)       sum(a.''Grid Credit Amount'') as ''Grid Credit Amount''#(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Compensation and Sales Metrics Fact'' as a left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Distribution Performance Dates Dimension'' as b#(lf)    on a.''Distribution Performance Dates Surrogate Key''=b.''Date Surrogate Key''  left join#(lf)         ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Conformed Contract Dimension Detail'' as c#(lf)    on (a.''Contract Surrogate Key''=c.''Contract Surrogate Key''),#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' as aa    #(lf)    #(lf) where a.''Rollup Agent Identifier'' = aa.''Employee Identifier''#(lf)   and b.''Distribution Performance Reporting Year Number'' in (\u00272022\u0027,\u00272023\u0027,\u00272024\u0027)  #(lf)   and ((a.''New Sales Credit Amount'' \u003c 0.00 or a.''New Sales Credit Amount'' \u003e 0.00) or#(lf)        (a.''Gross Dealer Concessions Amount'' \u003c 0.00 or a.''Gross Dealer Concessions Amount'' \u003e 0.00) or#(lf)        (a.''Grid Credit Amount'' is not NULL))#(lf)   and substring(a.''Employee Identifier'',1,2) = \u0027TS\u0027#(lf)   --and a.''Rollup Agent Identifier'' in (\u0027TS45118\u0027)#(lf)   --and b.''Calendar Day Date'' \u003e= \u00272022-03-01\u0027 and b.''Calendar Day Date'' \u003c= \u00272022-03-31\u0027#(lf)   and c.''Current Row Indicator'' =\u0027Y\u0027#(lf)   and aa.''Current Row Indicator'' = \u0027Y\u0027#(lf)   and a.''Source System Code Description'' in (\u0027Life and Annuity Trails Fact\u0027,\u0027Sales Metric Transaction\u0027,\u0027Sales Metric Adjustment\u0027)#(lf)#(lf)   and (  aa.''Organization Department Code'' \u003c\u003e \u00270383\u0027   #(lf)      or (a.''Reporting Roll Up Event Code'' \u003c\u003e\u0027REN\u0027#(lf)     and  (a.''Reporting Roll Up Event Code'' \u003c\u003e \u0027AB\u0027 or  ''Compensation Level 2 Product Character Code'' not in (\u0027RISK\u0027, \u0027ANN\u0027))#(lf)     and  a.''Financial Professional Revenue Hierarchy Level 2 Code'' \u003c\u003e (\u0027AB_MF_12B1\u0027)))#(lf) #(lf)group by b.''Calendar Day Date'', b.''Distribution Performance Report Year Text'', b.''Distribution Performance Reporting Year Number'',#(lf)          b.''Distribution Performance Reporting Year Week Number'', a.''Employee Identifier'', a.''Rollup Agent Identifier'',#(lf)          --c.''Benefit Contract Number'',#(lf)          a.''Compensation Reporting Roll Up Name'', a.''Compensation Level 5 Product Line Of Business Subgroup Code'',#(lf)          a.''Reporting Roll Up Product Description'',#(lf)          a.''Reporting Roll Up Event Description'',#(lf)          a.''Compensation Level 2 Product Character Code'',#(lf)          a.''Field Reporting Product Level 1 Name'',#(lf)          a.''Compensation Level 3 Product Line Of Business Code''', null, [EnableFolding=true]),    #'Added Conditional Column' = Table.AddColumn(Source, 'Product Category', each if [Compensation Level 2 Product Character Code] = 'ANN' then 'Annuity' else if [Compensation Level 2 Product Character Code] = 'INVEST' then 'Investments' else if [Compensation Level 2 Product Character Code] = 'BANK' then 'Investments' else if [Compensation Level 2 Product Character Code] = 'RISK' then 'Life \u0026 Health' else if [Compensation Level 2 Product Character Code] = 'UKWN' and [Compensation Reporting Roll Up Name] = 'Fixed Indexed Annuity' then 'Annuity'else if [Compensation Level 2 Product Character Code] = 'UKWN' and [Compensation Reporting Roll Up Name] = 'Variable Annuity' then 'Annuity'else if [Compensation Level 2 Product Character Code] = 'UKWN' and [Compensation Reporting Roll Up Name] = 'Term Life' then 'Life \u0026 Health'else if [Compensation Level 2 Product Character Code] = 'UKWN' and [Compensation Reporting Roll Up Name] = 'Universal Life' then 'Life \u0026 Health'else if [Compensation Level 2 Product Character Code] = 'UKWN' and [Compensation Reporting Roll Up Name] = 'Whole Life' then 'Life \u0026 Health'else if [Compensation Level 2 Product Character Code] = 'UKWN' and [Compensation Reporting Roll Up Name] = 'Variable Universal Life' then 'Life \u0026 Health'  else null),    #'Duplicated Column' = Table.DuplicateColumn(#'Added Conditional Column', 'Distribution Performance Reporting Year Number', 'Distribution Performance Reporting Year Number - Copy'),    #'Added Custom' = Table.AddColumn(#'Duplicated Column', 'Month Number', each Text.PadStart(Text.From([Distribution Performance Reporting Year Week Number]),2,'0')),    #'Inserted Merged Column' = Table.AddColumn(#'Added Custom', 'Year-Week', each Text.Combine({Text.From([#'Distribution Performance Reporting Year Number - Copy'], 'en-US'), [Month Number]}, '-'), type text),    #'Removed Columns' = Table.RemoveColumns(#'Inserted Merged Column',{'Distribution Performance Reporting Year Number - Copy'}),    #'Added Custom1' = Table.AddColumn(#'Removed Columns', 'TeamSale_Ind', each if [Employee Identifier] = [Compensation Employee Identifier] then 'Y' else 'N')in    #'Added Custom1'"}]},{"name":"RFO_PENDING_DETAIL","isHidden":false,"storageMode":"Import","columns":[{"name":"ORZN_ZONE_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_SUB_DEPT_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_UNIT_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP_NAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CorporateEmployeeID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"AgentFullName","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LOB","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MBR_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"BenefitContractNumber","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EstimatedSalesCreditAmt","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Benefit_Amount","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Days_Pending","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"TransReceiveDt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TransDesc","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CTRC_PND_CATG_EXCD","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Product_Desc","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CIFOwnerFullName","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"EstimatedSalesCredit","expression":"  var _total = CALCULATE(sum(\u0027RFO_PENDING_DETAIL\u0027[EstimatedSalesCreditAmt]))ReturnIF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"Message_txtPending","expression":"IF(Sum(\u0027RFO_PENDING_DETAIL\u0027[EstimatedSalesCreditAmt]) \u003e 0,'',' ')","isHidden":false},{"name":"ShowHidePending","expression":"IF(SUM(\u0027RFO_PENDING_DETAIL\u0027[EstimatedSalesCreditAmt]) \u003e 0, '#1C00ff00','White')","isHidden":false},{"name":"YTD Pending Contracts","expression":"--var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT])--Var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])var _total=  CALCULATE    (SUMX(DISTINCT(\u0027RFO_PENDING_DETAIL\u0027[BenefitContractNumber]), 1),     Year(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT]) = YEAR(TODAY()),    --DTRB_PERF_DATES[CAL_DAY_DT] \u003e= min_date,    --DTRB_PERF_DATES[CAL_DAY_DT] \u003c= max_date,    \u0027DTRB_PERF_DATES\u0027[Today or Before] = 'Y')ReturnIF(ISBLANK(_total),0,_total)  ","isHidden":false},{"name":"YTD Pending Contracts PH Comp","expression":"--var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT])--Var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])var _YRSelected = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR])var _total=  CALCULATE    (SUMX(DISTINCT(\u0027RFO_PENDING_DETAIL\u0027[BenefitContractNumber]), 1),     Year(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT]) = SELECTEDVALUE(\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR]),    --DTRB_PERF_DATES[CAL_DAY_DT] \u003e= min_date,    --DTRB_PERF_DATES[CAL_DAY_DT] \u003c= max_date,    \u0027DTRB_PERF_DATES\u0027[Today or Before] = 'Y')ReturnIF(ISBLANK(_total),0,_total)  ","isHidden":false},{"name":"Pending Estimated Sales Credits Title","expression":"'Pending Estimated Sales Credits: ' \u0026 FORMAT(\u0027RFO_PENDING_DETAIL\u0027[EstimatedSalesCredit], '###,###,###')","isHidden":false}],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////pnfiles002b//fp_cifs_7834_sas$//MarketAnalysis//FieldReporting//SMIS//RFO_PENDING_DETAIL.csv'),[Delimiter=',', Columns=22, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'RFOCode', Int64.Type}, {'RFOName', type text}, {'Zone', Int64.Type}, {'Zone_Name', type text}, {'CorporateEmployeeID', type text}, {'AgentFullName', type text}, {'Product', type text}, {'LOB', type text}, {'CIFOwnerFullName', type text}, {'MBR_TYP_CDE', type text}, {'BenefitContractNumber', type text}, {'EstimatedSalesCreditAmt', Int64.Type}, {'Benefit_Amount', Int64.Type}, {'Days_Pending', Int64.Type}, {'TransReceiveDt', type date}, {'TransDesc', type text}, {'CTRC_PND_CATG_EXCD', type text}, {'Count', Int64.Type}}),    #'Removed Columns' = Table.RemoveColumns(#'Changed Type',{'RFOCode', 'RFOName', 'Zone', 'Zone_Name', 'Count'}),    #'Filtered Rows' = Table.SelectRows(#'Removed Columns', each Text.StartsWith([CorporateEmployeeID], 'TS')),    #'Added Custom' = Table.AddColumn(#'Filtered Rows', 'Product_Desc', each if [Product] = 'SO' then 'ANNUITY' else if [Product] = 'WLLTC' then 'HEALTH' else [Product]),    #'Filtered Rows1' = Table.SelectRows(#'Added Custom', each true),    #'Added Custom1' = Table.AddColumn(#'Filtered Rows1', 'CIFOwnerFullName.1', each if [CIFOwnerFullName] =',' then 'Unknown'  else [CIFOwnerFullName]),    #'Removed Columns1' = Table.RemoveColumns(#'Added Custom1',{'CIFOwnerFullName'}),    #'Renamed Columns' = Table.RenameColumns(#'Removed Columns1',{{'CIFOwnerFullName.1', 'CIFOwnerFullName'}})in    #'Renamed Columns'"}]},{"name":"NFC_Summary","isHidden":false,"storageMode":"Import","columns":[{"name":"CUST_ID_NBR","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"NFC_Total_Points","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = DB2.Database('PODWH021:50000', 'PODWH021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT --IA_DATES_ITRL.DT_SK as ''Date Surrogate Key'',#(lf)      -- TF_FIN_CUST_EVT_FCT_CFDL.CTRC_VRSN_NBR as ''Contract Version Number'',#(lf)      -- TF_FIN_CUST_EVT_FCT_CFDL.WRTG_AGT_VRSN_NBR as ''Writing Agent Version Number'',#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_STS_CDE as ''Financial Customer Point Status Code'',#(lf)      -- TF_FIN_CUST_EVT_FCT_CFDL.CUST_AGE as ''Financial Customer Age'',#(lf)      -- TF_FIN_CUST_EVT_FCT_CFDL.AGE_CLAS_CDE as ''Age Class Code'',#(lf)      -- TF_FIN_CUST_EVT_FCT_CFDL.AGE_CLAS_DSCR as ''Age Class Description'',#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_VLU as ''Financial Customer Point Value'',#(lf)       CNF_CUSTOMER_DIM_CFDL.CUST_ID_NBR,#(lf)       CNF_CUSTOMER_DIM_CFDL.CUST_LGAL_FMT_NM, #(lf)       --CNF_CUSTOMER_DIM_CFDL.CUST_BRTH_DT,#(lf)      -- CNF_CUSTOMER_DIM_CFDL.MBR_TYP_CDE as ''Member Type Code'',#(lf)      -- CNF_CUSTOMER_DIM_CFDL.MBR_TYP_DSCR as ''Member Type Description'',#(lf)      -- CNF_CUSTOMER_DIM_CFDL.RSDL_ST_CDE as ''Residential State Code'',#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.CTRC_ISS_DT as ''Contract Issue Date'', #(lf)      -- CNF_CONTRACT_DIM_DTL_CFDL.L5_PLOB_SGRP_CDE as ''Level 5 Product Line Of Business Subgroup Code'',#(lf)      -- CNF_CONTRACT_DIM_DTL_CFDL.L5_PLOB_SGRP_DSCR as ''Level 5 Product Line Of Business Subgroup Description'',#(lf)      -- CNF_CONTRACT_DIM_DTL_CFDL.L4_PLOB_GRP_CDE as ''Level 4 Product Line Of Business Group Code'',#(lf)      -- CNF_CONTRACT_DIM_DTL_CFDL.L4_PLOB_GRP_DSCR as ''Level 4 Product Line Of Business Group Description'',#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L3_PROD_LOB_CDE as ''Level 3 Product Line Of Business Code'',#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L3_PROD_LOB_DSCR as ''Level 3 Product Line Of Business Description'',#(lf)     --  CNF_CONTRACT_DIM_DTL_CFDL.L2_PROD_CHAR_CDE as ''Level 2 Product Character Code'',#(lf)      -- CNF_CONTRACT_DIM_DTL_CFDL.L2_PROD_CHAR_DSCR as ''Level 2 Product Character Description'',#(lf)      -- AGT_DIM_CURR_CFDL.PARY_DSPL_2_NM as ''Assigned FR'',#(lf)      -- AGT_DIM_CURR_CFDL.FRST_NM as ''Employee First Name'',#(lf)      -- AGT_DIM_CURR_CFDL.MDDL_NM as ''Employee Middle Name'',#(lf)      -- AGT_DIM_CURR_CFDL.LST_NM as ''Employee Last Name'',#(lf)      AGT_DIM_CURR_CFDL.FRST_NM || \u0027 \u0027 || AGT_DIM_CURR_CFDL.LST_NM as EMPL_NM,#(lf)      -- AGT_DIM_CURR_CFDL.ADJ_SVC_DT as ''Adjusted Service Date'',#(lf)       AGT_DIM_CURR_CFDL.EMP_ID as ''TS ID'',#(lf)      -- AGT_DIM_CURR_CFDL.EMP_STS_TYP_CDE as ''Employee Status Type Code'',#(lf)      -- AGT_DIM_CURR_CFDL.EMP_STS_TYP_DSCR as ''Employee Status Type Description'',#(lf)      -- AGT_DIM_CURR_CFDL.JOB_TYP_CDE as ''Job Type Code'',#(lf)      -- AGT_DIM_CURR_CFDL.JOB_TYP_DSCR as ''Job Type Description'',#(lf)      -- AGT_DIM_CURR_CFDL.CURR_ROW_IND as ''Current Row Indicator Sales Hierarchy'',#(lf)       IA_DATES_ITRL.CAL_DAY_DT as ''Calendar Date'',#(lf)       --IA_DATES_ITRL.CAL_MTH_NM,#(lf)      -- IA_DATES_ITRL.CAL_MTH_STRT_DT as ''Calendar Month State Date'',#(lf)      -- IA_DATES_ITRL.CAL_MTH_END_DT as ''Calendar Month End Date'',#(lf)       --IA_DATES_ITRL.CAL_YR_QTR_NBR,#(lf)       --IA_DATES_ITRL.CAL_QTR_NM,#(lf)       --IA_DATES_ITRL.CAL_WK_NM,#(lf)       FIN_CUST_ELIG_DIM_CFDL.FIN_CUST_PNT_RSN_CDE as ''Financial Customer Point Reason Code'',#(lf)       FIN_CUST_ELIG_DIM_CFDL.FIN_CUST_PNT_RSN_DSCR as ''Financial Customer Point Reason Description'',#(lf)       FIN_CUST_ELIG_DIM_CFDL.CTRC_RLTN_TYP_CDE as ''Financial Customer Point Relationship Code'',#(lf)       FIN_CUST_ELIG_DIM_CFDL.CTRC_RLTN_TYP_DSCR as ''Financial Customer Point Relationship Description'',#(lf)      -- CASE#(lf)      --    WHEN (CUST_AGE \u003e= 0) AND (CUST_AGE \u003c= 15) THEN \u00270-15\u0027#(lf)      --    WHEN (CUST_AGE \u003e= 16) AND (CUST_AGE \u003c= 25) THEN \u002716-25\u0027#(lf)      --    WHEN (CUST_AGE \u003e= 26) AND (CUST_AGE \u003c= 35) THEN \u002726-35\u0027#(lf)      --    WHEN (CUST_AGE \u003e= 36) AND (CUST_AGE \u003c= 45) THEN \u002736-45\u0027#(lf)      --    WHEN (CUST_AGE \u003e= 46) AND (CUST_AGE \u003c= 55) THEN \u002746-55\u0027#(lf)      --    WHEN (CUST_AGE \u003e= 56) AND (CUST_AGE \u003c= 65) THEN \u002756-65\u0027#(lf)      --    WHEN (CUST_AGE \u003e= 66) AND (CUST_AGE \u003c= 75) THEN \u002766-75\u0027#(lf)      --    WHEN CUST_AGE \u003e 75 THEN \u002776+\u0027#(lf)      -- END#(lf)      --    AS ''Financial Customer Age Group'',#(lf)      -- integer (floor ( (CURRENT DATE - CUST_BRTH_DT) / 10000)) AS ''Member Age'',#(lf)      -- DTRB_PERF_DATES.DTRB_PERF_RPT_WK_END_DT as ''Distribution Performance Reporting Week End Date'',#(lf)      -- DTRB_PERF_DATES.DTRB_PERF_RPT_WK_NBR as ''Distribution Performance Reporting Week Number'',#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_YR_NBR as ''Distribution Performance Reporting Year Number'',#(lf)      -- DTRB_PERF_DATES.DTRB_PERF_RPT_YR_WK_NBR as ''Distribution Performance Reporting Year Week Number'',#(lf)      -- DTRB_PERF_DATES.DTRB_PERF_RPT_WK_TXT,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_YR_TXT #(lf)     --  DTRB_PERF_DATES.DTRB_PERF_RPT_DAY_TXT,#(lf)     --  DTRB_PERF_DATES.DTRB_PERF_RPT_MTH_TXT,#(lf)     --  DTRB_PERF_DATES.DTRB_PERF_RPT_QTR_TXT,#(lf)     --  SALE_HIER_DIM.SALE_HIER_ID as ''Sales Hierarchy Identifier'' #(lf)      -- SALE_HIER_DIM.EFF_BEG_TMSP as ''Effective Begin Timestamp'',#(lf)      -- SALE_HIER_DIM.EFF_END_TMSP as ''Effective End Timestamp'',#(lf)      -- SALE_HIER_DIM.CURR_ROW_IND as ''Agent Current Row Indicator'',#(lf)      -- SALE_HIER_DIM.PRTR_NM as ''Partner Name'',#(lf)      -- SALE_HIER_DIM.MANP_NM as ''Managing Partner Name'',#(lf)      -- SALE_HIER_DIM.ORZN_ZONE_CDE as ''Market'',#(lf)      -- SALE_HIER_DIM.ORZN_ZONE_DSCR as ''Organization Zone Description'',#(lf)      -- SALE_HIER_DIM.ORZN_DEPT_CDE as ''RFO'',#(lf)      -- SALE_HIER_DIM.ORZN_DEPT_DSCR as ''Organization Department Description'',#(lf)      -- SALE_HIER_DIM.ORZN_DIV_CDE as ''Organization Division Code'',#(lf)      -- SALE_HIER_DIM.ORZN_DIV_DSCR as ''Organization Division Description'',#(lf)      -- SALE_HIER_DIM.SALE_HIER_DIM_SK as ''Sales Hierarchy Dimension Surrogate Key''#(lf)#(lf)  FROM ((((((COMMON.IA_DATES_ITRL IA_DATES_ITRL INNER JOIN#(lf)             COMMON.DTRB_PERF_DATES DTRB_PERF_DATES#(lf)          ON (IA_DATES_ITRL.DT_SK = DTRB_PERF_DATES.DT_SK)) LEFT OUTER JOIN#(lf)             SALES.TF_FIN_CUST_EVT_FCT_CFDL TF_FIN_CUST_EVT_FCT_CFDL#(lf)          ON (IA_DATES_ITRL.DT_SK = TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_CRNG_DT_SK)) RIGHT OUTER JOIN#(lf)             HUMAN_RESOURCES.SALE_HIER_DIM SALE_HIER_DIM#(lf)          ON (SALE_HIER_DIM.SALE_HIER_DIM_SK = TF_FIN_CUST_EVT_FCT_CFDL.SLHR_DIM_CURR_CRNG_AGT_SK)) LEFT OUTER JOIN#(lf)             MEMBER.CNF_CUSTOMER_DIM_CFDL CNF_CUSTOMER_DIM_CFDL#(lf)          ON (CNF_CUSTOMER_DIM_CFDL.CUST_SK = TF_FIN_CUST_EVT_FCT_CFDL.CUST_SK)) LEFT OUTER JOIN#(lf)             HUMAN_RESOURCES.AGT_DIM_CURR_CFDL AGT_DIM_CURR_CFDL#(lf)          ON (AGT_DIM_CURR_CFDL.AGT_DIM_SK = TF_FIN_CUST_EVT_FCT_CFDL.CRNG_AGT_SK)) RIGHT OUTER JOIN#(lf)             SALES.FIN_CUST_ELIG_DIM_CFDL FIN_CUST_ELIG_DIM_CFDL#(lf)          ON (FIN_CUST_ELIG_DIM_CFDL.FIN_CUST_PNT_ELIG_DIM_SK = TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_ELIG_DIM_SK)) LEFT OUTER JOIN#(lf)             CONTRACT.CNF_CONTRACT_DIM_DTL_CFDL CNF_CONTRACT_DIM_DTL_CFDL#(lf)          ON (CNF_CONTRACT_DIM_DTL_CFDL.CTRC_SK = TF_FIN_CUST_EVT_FCT_CFDL.CTRC_SK) and #(lf)             (CNF_CONTRACT_DIM_DTL_CFDL.VRSN_NBR = TF_FIN_CUST_EVT_FCT_CFDL.CTRC_VRSN_NBR)#(lf)                     #(lf) WHERE (AGT_DIM_CURR_CFDL.CURR_ROW_IND = \u0027Y\u0027)#(lf)   AND (SALE_HIER_DIM.CURR_ROW_IND = \u0027Y\u0027)#(lf)   AND (sale_hier_dim.ORZN_DEPT_CDE in (\u00270001\u0027, \u00270115\u0027,\u00270165\u0027,\u00270190\u0027,\u00270240\u0027,\u00270283\u0027,\u00270291\u0027,\u00270361\u0027,\u00270365\u0027,\u00270384\u0027,\u00270410\u0027,\u00270435\u0027,\u00270475\u0027,\u00270496\u0027,\u00270525\u0027,\u00270529\u0027,\u00270810\u0027)#(lf)    or AGT_DIM_CURR_CFDL.ORZN_DEPT_CDE in (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027))  #(lf)AND DTRB_PERF_DATES.DTRB_PERF_RPT_YR_NBR in (\u00272020\u0027,\u00272021\u0027,\u00272022\u0027,\u00272023\u0027)#(lf)   AND substring(SALE_HIER_DIM.SALE_HIER_ID,1,2)=\u0027TS\u0027#(lf)   and TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_VLU \u003c\u003e 0']),    #'Filtered Rows1' = Table.SelectRows(Source, each ([DTRB_PERF_RPT_YR_TXT] = 'CURRENT')),    #'Changed Type' = Table.TransformColumnTypes(#'Filtered Rows1',{{'Contract Issue Date', type date}, {'Calendar Date', type date}}),    #'Grouped Rows' = Table.Group(#'Changed Type', {'CUST_ID_NBR'}, {{'NFC_Total_Points', each List.Sum([Financial Customer Point Value]), type nullable number}}),    #'Filtered Rows' = Table.SelectRows(#'Grouped Rows', each ([NFC_Total_Points] = 1))in    #'Filtered Rows'"}]},{"name":"Change Log","isHidden":false,"storageMode":"Import","columns":[{"name":"Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Version","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Author","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Description","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//SHARED//Public//DI and BI//Field Reporting//Change Log//Change Log.xlsx'), null, true),    #'FA _Sheet' = Source{[Item='FA ',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'FA _Sheet', [PromoteAllScalars=true]),    #'Changed Type1' = Table.TransformColumnTypes(#'Promoted Headers',{{'Date', type date}, {'Version', type number}, {'Author', type text}, {'Description', type text}}),    #'Replaced Value' = Table.ReplaceValue(#'Changed Type1',3.1,3.1,Replacer.ReplaceValue,{'Version'})in    #'Replaced Value'"}]},{"name":"Appointment_Averages_ConfQual","isHidden":false,"storageMode":"Import","columns":[{"name":"Average Appointments Per Customer","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Average Customers Per Appointment","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Total Average Close Rate","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TGR Average Close Rate","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Average TGR Case Size","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Average TGR Contract Efficiency","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Conference Qualification Sort Order","dataType":"String","isHidden":false,"expression":"Related(\u0027Conf_Qual_Sort\u0027[Order])","columnType":"Calculated"},{"name":"Conference","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Average Appointment Count","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Average Grid Credit Amount","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'select \u0027Conf Qual National\u0027 as ''Conference'',#(lf)         cast(avg(''Person Count'') / avg(''Person Appointment Count'') as decimal(11,4)) as ''Average Appointments Per Customer'',#(lf)        cast(avg(''Person Appointment Count'') / avg(''Appointment Count'') as decimal(11,4)) as ''Average Customers Per Appointment'',#(lf)        cast(avg(''Appointment Count'') as decimal(11,4)) as ''Average Appointment Count'',#(lf)        cast(avg(''GRID Credit Amount'') as decimal(11,4)) as ''Average Grid Credit Amount'',#(lf)        cast(avg(''Person Contract Count'') / avg(''Appointment Count'') as decimal(11,4)) as ''Total Average Close Rate'',#(lf)        cast(avg(''Person Contract GRID Credit Count'') / avg(''Appointment Count'') as decimal(11,4)) as ''TGR Average Close Rate'',#(lf)        cast(avg(''GRID Credit Amount'') / avg(''Person Contract GRID Credit Count'')  as decimal(11,4))as ''Average TGR Case Size'',#(lf)        cast(avg(''GRID Credit Contract Count'') / avg(''Person Contract GRID Credit Count'') as decimal(11,4)) as ''Average TGR Contract Efficiency''  #(lf)   from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Vital Stats Summary Fact'' inner join#(lf)        ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Appointment Organization Dimension''#(lf)     on ''Vital Stats Summary Fact''.''Appointment Organization Dimension Surrogate Key''=''Appointment Organization Dimension''.''Appointment Organization Dimension Surrogate Key''#(lf)  where ''Appointment Organization Dimension''.''Current Row Indicator'' = \u0027Y\u0027#(lf)    and ''Appointment Organization Dimension''.''Conference Qualification Type Code'' is not null#(lf)             #(lf)union all#(lf)#(lf)select \u0027Pinnacle\u0027 as ''Conference'',#(lf)        cast(avg(''Person Count'') / avg(''Person Appointment Count'') as decimal(11,4)) as ''Average Appointments Per Customer'',#(lf)        cast(avg(''Person Appointment Count'') / avg(''Appointment Count'') as decimal(11,4)) as ''Average Customers Per Appointment'',#(lf)        cast(avg(''Appointment Count'') as decimal(11,4)) as ''Average Appointment Count'',#(lf)        cast(avg(''GRID Credit Amount'') as decimal(11,4)) as ''Average Grid Credit Amount'',#(lf)        cast(avg(''Person Contract Count'') / avg(''Appointment Count'') as decimal(11,4)) as ''Total Average Close Rate'',#(lf)        cast(avg(''Person Contract GRID Credit Count'') / avg(''Appointment Count'') as decimal(11,4)) as ''TGR Average Close Rate'',#(lf)        cast(avg(''GRID Credit Amount'') / avg(''Person Contract GRID Credit Count'')  as decimal(11,4))as ''Average TGR Case Size'',#(lf)        cast(avg(''GRID Credit Contract Count'') / avg(''Person Contract GRID Credit Count'') as decimal(11,4)) as ''Average TGR Contract Efficiency''#(lf)   from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Vital Stats Summary Fact'' inner join#(lf)        ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Appointment Organization Dimension''#(lf)     on ''Vital Stats Summary Fact''.''Appointment Organization Dimension Surrogate Key''=''Appointment Organization Dimension''.''Appointment Organization Dimension Surrogate Key''#(lf)  where ''Appointment Organization Dimension''.''Current Row Indicator'' = \u0027Y\u0027#(lf)    and ''Appointment Organization Dimension''.''Conference Qualification Type Code'' in (\u002733\u0027,\u002732\u0027,\u002731\u0027)#(lf)#(lf)union all#(lf)#(lf)select \u0027Summit\u0027 as ''Conference'',#(lf)        cast(avg(''Person Count'') / avg(''Person Appointment Count'') as decimal(11,4)) as ''Average Appointments Per Customer'',#(lf)        cast(avg(''Person Appointment Count'') / avg(''Appointment Count'') as decimal(11,4)) as ''Average Customers Per Appointment'',#(lf)        cast(avg(''Appointment Count'') as decimal(11,4)) as ''Average Appointment Count'',#(lf)        cast(avg(''GRID Credit Amount'') as decimal(11,4)) as ''Average Grid Credit Amount'',#(lf)        cast(avg(''Person Contract Count'') / avg(''Appointment Count'') as decimal(11,4)) as ''Total Average Close Rate'',#(lf)        cast(avg(''Person Contract GRID Credit Count'') / avg(''Appointment Count'') as decimal(11,4)) as ''TGR Average Close Rate'',#(lf)        cast(avg(''GRID Credit Amount'') / avg(''Person Contract GRID Credit Count'')  as decimal(11,4))as ''Average TGR Case Size'',#(lf)        cast(avg(''GRID Credit Contract Count'') / avg(''Person Contract GRID Credit Count'') as decimal(11,4)) as ''Average TGR Contract Efficiency''#(lf)   from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Vital Stats Summary Fact'' inner join#(lf)        ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Appointment Organization Dimension''#(lf)     on ''Vital Stats Summary Fact''.''Appointment Organization Dimension Surrogate Key''=''Appointment Organization Dimension''.''Appointment Organization Dimension Surrogate Key''#(lf)  where ''Appointment Organization Dimension''.''Current Row Indicator'' = \u0027Y\u0027#(lf)    and ''Appointment Organization Dimension''.''Conference Qualification Type Code'' in (\u002729\u0027,\u002728\u0027,\u002727\u0027)#(lf)#(lf)union all#(lf)#(lf)select \u0027Sierra\u0027 as ''Conference'',#(lf)        cast(avg(''Person Count'') / avg(''Person Appointment Count'') as decimal(11,4)) as ''Average Appointments Per Customer'',#(lf)        cast(avg(''Person Appointment Count'') / avg(''Appointment Count'') as decimal(11,4)) as ''Average Customers Per Appointment'',#(lf)        cast(avg(''Appointment Count'') as decimal(11,4)) as ''Average Appointment Count'',#(lf)        cast(avg(''GRID Credit Amount'') as decimal(11,4)) as ''Average Grid Credit Amount'',#(lf)        cast(avg(''Person Contract Count'') / avg(''Appointment Count'') as decimal(11,4)) as ''Total Average Close Rate'',#(lf)        cast(avg(''Person Contract GRID Credit Count'') / avg(''Appointment Count'') as decimal(11,4)) as ''TGR Average Close Rate'',#(lf)        cast(avg(''GRID Credit Amount'') / avg(''Person Contract GRID Credit Count'')  as decimal(11,4))as ''Average TGR Case Size'',#(lf)        cast(avg(''GRID Credit Contract Count'') / avg(''Person Contract GRID Credit Count'') as decimal(11,4)) as ''Average TGR Contract Efficiency''#(lf)   from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Vital Stats Summary Fact'' inner join#(lf)        ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Appointment Organization Dimension''#(lf)     on ''Vital Stats Summary Fact''.''Appointment Organization Dimension Surrogate Key''=''Appointment Organization Dimension''.''Appointment Organization Dimension Surrogate Key''#(lf)  where ''Appointment Organization Dimension''.''Current Row Indicator'' = \u0027Y\u0027#(lf)    and ''Appointment Organization Dimension''.''Conference Qualification Type Code'' in (\u002722\u0027,\u002720\u0027)#(lf)#(lf)union all#(lf) #(lf)select \u0027Non-Qualified\u0027 as ''Conference'',#(lf)        cast(avg(''Person Count'') / avg(''Person Appointment Count'') as decimal(11,4)) as ''Average Appointments Per Customer'',#(lf)        cast(avg(''Person Appointment Count'') / avg(''Appointment Count'') as decimal(11,4)) as ''Average Customers Per Appointment'',#(lf)        cast(avg(''Appointment Count'') as decimal(11,4)) as ''Average Appointment Count'',#(lf)        cast(avg(''GRID Credit Amount'') as decimal(11,4)) as ''Average Grid Credit Amount'',#(lf)        cast(avg(''Person Contract Count'') / avg(''Appointment Count'') as decimal(11,4)) as ''Total Average Close Rate'',#(lf)        cast(avg(''Person Contract GRID Credit Count'') / avg(''Appointment Count'') as decimal(11,4)) as ''TGR Average Close Rate'',#(lf)        cast(avg(''GRID Credit Amount'') / avg(''Person Contract GRID Credit Count'')  as decimal(11,4))as ''Average TGR Case Size'',#(lf)        cast(avg(''GRID Credit Contract Count'') / avg(''Person Contract GRID Credit Count'') as decimal(11,4)) as ''Average TGR Contract Efficiency''#(lf)   from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Vital Stats Summary Fact'' inner join#(lf)        ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Appointment Organization Dimension''#(lf)     on ''Vital Stats Summary Fact''.''Appointment Organization Dimension Surrogate Key''=''Appointment Organization Dimension''.''Appointment Organization Dimension Surrogate Key''#(lf)  where ''Appointment Organization Dimension''.''Current Row Indicator'' = \u0027Y\u0027#(lf)    and ''Appointment Organization Dimension''.''Conference Qualification Type Code'' = \u0027U\u0027', null, [EnableFolding=true])in    Source"}]},{"name":"Future Appointments","isHidden":false,"storageMode":"Import","columns":[{"name":"Appointment Dimension Surrogate Key","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Person Dimension Surrogate Key","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"appt_occurs","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Person Occurs","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Membership Type Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JFW_IND","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Appointment Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Appointment Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Performance Year Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Life Segment Value Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_DATES.Week Start Date","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_DATES.Week End Date","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Today\u0027s Date","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Days to Appointment","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Future Appointment Week","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Conference Qualification Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Conference Qualification","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Future Appt Sort","dataType":"String","isHidden":false,"expression":"RELATED(FutureAppts_SortOrder[Order])","columnType":"Calculated"},{"name":"THRIVENTID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"CLIENTNAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ADVISOR_NAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Attendees","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Household ID","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Future Appts Wk1","expression":"CALCULATE(DISTINCTCOUNT(\u0027Future Appointments\u0027[Appointment Dimension Surrogate Key])+0,  \u0027Future Appointments\u0027[Future Appointment Week] = 'Next 7 days')","isHidden":false},{"name":"Future Appts Wk2","expression":"CALCULATE(DISTINCTCOUNT(\u0027Future Appointments\u0027[Appointment Dimension Surrogate Key])+0,  \u0027Future Appointments\u0027[Future Appointment Week] = 'Next 8-14 days')","isHidden":false},{"name":"Future Appts Wk3","expression":"CALCULATE(DISTINCTCOUNT(\u0027Future Appointments\u0027[Appointment Dimension Surrogate Key])+0,  \u0027Future Appointments\u0027[Future Appointment Week] = 'Next 15-21 days')","isHidden":false},{"name":"Future Appts Wk4","expression":"CALCULATE(DISTINCTCOUNT(\u0027Future Appointments\u0027[Appointment Dimension Surrogate Key])+0,  \u0027Future Appointments\u0027[Future Appointment Week] = 'Next 22-28 days')","isHidden":false},{"name":"JFW Wk1","expression":"CALCULATE(DISTINCTCOUNT(\u0027Future Appointments\u0027[Appointment Dimension Surrogate Key])+0,  \u0027Future Appointments\u0027[Future Appointment Week] = 'Next 7 days',  \u0027Future Appointments\u0027[JFW_IND]=1)","isHidden":false},{"name":"JFW Wk2","expression":"CALCULATE(DISTINCTCOUNT(\u0027Future Appointments\u0027[Appointment Dimension Surrogate Key])+0,  \u0027Future Appointments\u0027[Future Appointment Week] = 'Next 8-14 days',  \u0027Future Appointments\u0027[JFW_IND]=1)","isHidden":false},{"name":"JFW Wk3","expression":"CALCULATE(DISTINCTCOUNT(\u0027Future Appointments\u0027[Appointment Dimension Surrogate Key])+0,  \u0027Future Appointments\u0027[Future Appointment Week] = 'Next 15-21 days',  \u0027Future Appointments\u0027[JFW_IND]=1)","isHidden":false},{"name":"JFW Wk4","expression":"CALCULATE(DISTINCTCOUNT(\u0027Future Appointments\u0027[Appointment Dimension Surrogate Key])+0,  \u0027Future Appointments\u0027[Future Appointment Week] = 'Next 22-28 days',  \u0027Future Appointments\u0027[JFW_IND]=1)","isHidden":false},{"name":"Total JFW Appointments","expression":"CALCULATE(DISTINCTCOUNT(\u0027Future Appointments\u0027[Appointment Dimension Surrogate Key]),  \u0027Future Appointments\u0027[JFW_IND]=1)","isHidden":false},{"name":"Message_txtFutureAppts","expression":"if(ISBLANK(DISTINCTCOUNT(\u0027Future Appointments\u0027[Appointment Dimension Surrogate Key])), 'There are no future appointments scheduled','')--IF(--DISTINCTCOUNT(\u0027Future Appointments\u0027[Appointment Dimension Surrogate Key]) \u003e 0, --'','There are no future appointments scheduled'--)","isHidden":false},{"name":"ShowHideFutureAppts","expression":"IF(DISTINCTCOUNT(\u0027Future Appointments\u0027[Appointment Dimension Surrogate Key]) \u003e 0,'#1C00ff00','White')--if(ISBLANK(DISTINCTCOUNT(\u0027Future Appointments\u0027[Appointment Dimension Surrogate Key])), 'There are no future appointments scheduled','')--IF(--SUM(\u0027ConfCredits\u0027[Conference Credit Amount]) \u003e 0, --'#1C00ff00',--'White'--)","isHidden":false},{"name":"No data","expression":"if(ISBLANK(DISTINCTCOUNT(\u0027Future Appointments\u0027[Appointment Dimension Surrogate Key])), 'There are no future appointments scheduled','')--if(ISBLANK(    --   DISTINCTCOUNT(\u0027Future Appointments\u0027[Appointment Dimension Surrogate Key]) \u003e 0,      --   SUM(FactInternetSales[SalesAmount])),'No data for the selected criteria','')","isHidden":false},{"name":"Total Future Appointments","expression":"CALCULATE(DISTINCTCOUNT(\u0027Future Appointments\u0027[Appointment Dimension Surrogate Key]))","isHidden":false},{"name":"ShowHideFutureApptsTitle","expression":" IF(\u0027Future Appointments\u0027[Total Future Appointments] \u003e 0, 'Future Appointments', ' ') ","isHidden":false},{"name":"ShowHideFuturePCTitle","expression":" IF(\u0027Future Prospect Connects\u0027[Total Future Prospect Connect] \u003e 0, 'Future Prospect Connects', ' ') ","isHidden":false}],"source":[{"expression":"let    Source = #'Vital Stats DB Appointment Detail',    #'Merged Queries' = Table.NestedJoin(Source, {'Appointment Date'}, DTRB_PERF_DATES, {'CAL_DAY_DT'}, 'DTRB_PERF_DATES', JoinKind.Inner),    #'Expanded DTRB_PERF_DATES' = Table.ExpandTableColumn(#'Merged Queries', 'DTRB_PERF_DATES', {'Week Start Date', 'Week End Date'}, {'DTRB_PERF_DATES.Week Start Date', 'DTRB_PERF_DATES.Week End Date'}),    #'Filtered Rows' = Table.SelectRows(#'Expanded DTRB_PERF_DATES', each Date.IsInNextNDays([Appointment Date], 28)),    #'Added Custom1' = Table.AddColumn(#'Filtered Rows', 'Today\u0027s Date', each Date.From(DateTime.LocalNow())),    #'Added Custom' = Table.AddColumn(#'Added Custom1', 'Days to Appointment', each Duration.Days([Appointment Date] - [#'Today\u0027s Date'])),    #'Added Custom2' = Table.AddColumn(#'Added Custom', 'Future Appointment Week', each if[Days to Appointment] \u003e= 0 and [Days to Appointment] \u003c= 7 then 'Next 7 days'else if [Days to Appointment] \u003e= 8 and [Days to Appointment] \u003c= 14 then 'Next 8-14 days'else if [Days to Appointment] \u003e= 15 and [Days to Appointment] \u003c= 21 then 'Next 15-21 days'else if [Days to Appointment] \u003e= 22 and [Days to Appointment] \u003c= 28 then 'Next 22-28 days'else '')in    #'Added Custom2'"}]},{"name":"Conf_Qual_Sort","isHidden":false,"storageMode":"Import","columns":[{"name":"Order","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Conference","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i45WCsjMy0tMzklV0lEyVIrViVYKLs3NzSwBco0g3MzUoqJEBSDfGMz3y8/TDSxNzMlMy0xNAYqagEWd8/PSFEDCCn6JJZn5eYk5QClTpdhYAA==', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Conference = _t, Order = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Conference', type text}, {'Order', Int64.Type}})in    #'Changed Type'"}]},{"name":"Referrals_VitalStats","isHidden":false,"storageMode":"Import","columns":[{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"VitalStats Indicator","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Total","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Employee Display Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TYPE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Avg","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'WITH fp_referrals as (#(lf)SELECT distinct \u0027Referrals\u0027 as Type,#(lf)       \u0027         \u0027 as ''VitalStats Indicator'',#(lf)       ref_fct.''Person Dimension Surrogate Key'',#(lf)       ref_fct.''Referral Date'',#(lf)       CURRENT_DATE - ''Referral Date'' as ''Days since Referral'',#(lf)     --sum(ref_fct.''Occurs'') as Referral_Occurs,#(lf)       count(distinct(ref_fct.''Person Dimension Surrogate Key'')) as Referral_Occurs,#(lf)       org_dim.''Source System Key Text'' as EMP_ID,#(lf)       org_dim.''Last Name''||\u0027, \u0027||org_dim.''First Name'' as ''Employee Display Name'',#(lf)       date_dim.''Distribution Performance Reporting Week Text'',#(lf)       ROW_NUMBER() OVER (PARTITION BY ref_fct.''Person Dimension Surrogate Key'' ORDER BY ref_fct.''Person Dimension Surrogate Key'',  ref_fct.''Referral Date'' desc) AS rn#(lf)     #(lf)#(lf)  FROM ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Referral Fact'' ref_fct LEFT JOIN#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Distribution Performance Dates Dimension'' as date_dim#(lf)    on (ref_fct.''Referral Date'' = date_dim.''Calendar Day Date'') LEFT JOIN#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' org_dim#(lf)   on ((ref_fct.''Referral Organization Dimension Surrogate Key''=org_dim.''Organization Dimension Surrogate Key'') and#(lf)       (ref_fct.''Referral Organization Dimension Version Number''=org_dim.''Organization Dimension Version Number'')) LEFT JOIN#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' sale_hier_dim#(lf)   on ((sale_hier_dim.''Effective Begin Date'' \u003c= ref_fct.''Referral Date'') and#(lf)       (ref_fct.''Referral Date'' \u003c= DATEADD(day,-1,sale_hier_dim.''Effective End Date'')) and  #(lf)           sale_hier_dim.''Current Row Indicator'' = \u0027Y\u0027 and #(lf)     org_dim.''Source System Key Text''=sale_hier_dim.''Sales Hierarchy Identifier'')#(lf)#(lf)where ref_fct.''Person Dimension Surrogate Key'' \u003c\u003e 0#(lf)  and sale_hier_dim.''Organization Department Code'' in (\u00270115\u0027,\u00270165\u0027,\u00270190\u0027,\u00270240\u0027,\u00270283\u0027,\u00270291\u0027,\u00270361\u0027,\u00270365\u0027,\u00270383\u0027,\u00270384\u0027,\u00270410\u0027,\u00270435\u0027,\u00270475\u0027,\u00270496\u0027,\u00270525\u0027,\u00270529\u0027,\u00270810\u0027)#(lf)  and (org_dim.''Job Type Code'' in (\u0027002000\u0027, \u0027002003\u0027, \u0027002008\u0027, \u0027002010\u0027, \u0027002011\u0027, \u0027002012\u0027, \u0027002016\u0027, \u0027002022\u0027, \u0027002024\u0027, \u0027002025\u0027, \u0027002026\u0027, \u0027002027\u0027, \u0027002030\u0027, \u0027002031\u0027, \u0027002032\u0027, \u0027003100\u0027, \u0027003500\u0027)#(lf)   or  org_dim.''Department Identifier'' in (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027))  #(lf)  and date_dim.''Distribution Performance Reporting Year Number'' in (2022,2023,2024)#(lf)  --and org_dim.''Source System Key Text'' = \u0027TS82553\u0027#(lf)  --and ref_fct.''Referral Date'' \u003c= Current_Date-1#(lf)#(lf)  #(lf)group by ref_fct.''Person Dimension Surrogate Key'',#(lf)    ref_fct.''Referral Date'',#(lf)    org_dim.''Source System Key Text'',#(lf)    org_dim.''Last Name''||\u0027, \u0027||org_dim.''First Name'',#(lf)    date_dim.''Distribution Performance Reporting Week Text'' #(lf)      #(lf)#(lf)#(lf)having --ref_fct.''Occurs'' \u003e 0#(lf)sum(ref_fct.''Occurs'') \u003e 0#(lf))#(lf)#(lf)  (Select EMP_ID,#(lf)          ''Employee Display Name'',#(lf)          ''TYPE'',#(lf)          sum(Referral_Occurs) as ''Total'',#(lf)          sum(Referral_Occurs)+0 as ''Avg'',#(lf)          \u0027Last Week\u0027 as ''VitalStats Indicator''#(lf)     from (#(lf)          select EMP_ID,#(lf)                 ''Employee Display Name'',#(lf)                 ''TYPE'',#(lf)                 case when ''Distribution Performance Reporting Week Text'' = \u0027PREVIOUS\u0027#(lf)                   then Referral_Occurs#(lf)                   else 0#(lf)                 end as Referral_Occurs#(lf)            from fp_referrals#(lf)           where rn = 1#(lf)         )#(lf)   group by EMP_ID, ''Employee Display Name'', ''TYPE'', ''VitalStats Indicator''#(lf)   ) #(lf)#(lf)union#(lf)  (select EMP_ID,#(lf)          ''Employee Display Name'',#(lf)          ''TYPE'',#(lf)          sum(Referral_Occurs) as ''Total'',#(lf)          sum(Referral_Occurs)/4 as ''Avg'',#(lf)          \u00274 Week Average\u0027 as ''VitalStats Indicator''#(lf)     from (#(lf)          select EMP_ID,#(lf)                 ''Employee Display Name'',#(lf)                 ''TYPE'',#(lf)                 case when ''Days since Referral'' \u003e= 1 and ''Days since Referral'' \u003c 28#(lf)                   then Referral_Occurs#(lf)                   else 0#(lf)                 end as Referral_Occurs#(lf)            from fp_referrals#(lf)           where rn = 1#(lf)         )#(lf)   group by EMP_ID,''Employee Display Name'', ''TYPE'', ''VitalStats Indicator''#(lf)) #(lf)#(lf)UNION#(lf)  (select EMP_ID,#(lf)          ''Employee Display Name'',#(lf)          ''TYPE'',#(lf)          sum(Referral_Occurs) as ''Total'',#(lf)          sum(Referral_Occurs)/8 as ''Avg'',#(lf)          \u00278 Week Average\u0027 as ''VitalStats Indicator''#(lf)     from (#(lf)          select EMP_ID,#(lf)                 ''Employee Display Name'',#(lf)                 ''TYPE'',#(lf)                 case when ''Days since Referral'' \u003e= 1 and ''Days since Referral'' \u003c 56#(lf)                   then Referral_Occurs#(lf)                   else 0#(lf)                 end as Referral_Occurs#(lf)            from fp_referrals#(lf)           where rn = 1#(lf)         )#(lf)   group by EMP_ID,''Employee Display Name'', ''TYPE'', ''VitalStats Indicator'' #(lf) ) #(lf)#(lf)UNION#(lf)  (select EMP_ID,#(lf)          ''Employee Display Name'',#(lf)          ''TYPE'',#(lf)          sum(Referral_Occurs) as ''Total'',#(lf)          sum(Referral_Occurs)/13 as ''Avg'',#(lf)          \u002713 Week Average\u0027 as ''VitalStats Indicator''#(lf)     from (#(lf)          select EMP_ID,#(lf)                 ''Employee Display Name'',#(lf)                 ''TYPE'',#(lf)                 case when ''Days since Referral'' \u003e= 1 and ''Days since Referral'' \u003c 91#(lf)                   then Referral_Occurs#(lf)                   else 0#(lf)                 end as Referral_Occurs#(lf)            from fp_referrals#(lf)           where rn = 1#(lf)         )#(lf)   group by EMP_ID,''Employee Display Name'', ''TYPE'', ''VitalStats Indicator'' #(lf) ) #(lf) #(lf) UNION#(lf)  (select EMP_ID,#(lf)          ''Employee Display Name'',#(lf)          ''TYPE'',#(lf)          sum(Referral_Occurs) as ''Total'',#(lf)          sum(Referral_Occurs)/52 as ''Avg'',#(lf)          \u002752 Week Average\u0027 as ''VitalStats Indicator''#(lf)     from (#(lf)          select EMP_ID,#(lf)                 ''Employee Display Name'',#(lf)                 ''TYPE'',#(lf)                 case when ''Days since Referral'' \u003e= 1 and ''Days since Referral'' \u003c 365#(lf)                   then Referral_Occurs#(lf)                   else 0#(lf)                 end as Referral_Occurs#(lf)            from fp_referrals#(lf)           where rn = 1#(lf)         )#(lf)   group by EMP_ID,''Employee Display Name'', ''TYPE'', ''VitalStats Indicator'' #(lf) )', null, [EnableFolding=true])in    Source"}]},{"name":"Appts_VitalStats_Agg","isHidden":false,"storageMode":"Import","columns":[{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee Display Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TYPE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Total","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Avg","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"VitalStats Indicator","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'WITH fp_Appointments as (#(lf)SELECT DISTINCT#(tab)\u0027Appointments\u0027 as Type,#(lf)        \u0027         \u0027 as ''VitalStats Indicator'',#(lf)        appt_fct.''Appointment Dimension Surrogate Key'',#(lf)        appt_dim.''Appointment Date'',#(lf)        CURRENT_DATE - ''Appointment Date'' as ''Days since Appointment'',#(lf)        date_dim.''Distribution Performance Reporting Week Text'', #(lf)        org_dim.''Source System Key Text'' as ''EMP_ID'',#(lf)        org_dim.''First Name''||\u0027 \u0027 ||org_dim.''Last Name'' as ''Employee Display Name''#(lf)#(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Appointment Combine Fact'' appt_fct left join #(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Person Dimension'' as Pers_dim#(lf)    on (appt_fct.''Person Dimension Surrogate Key''=pers_dim.''Person Dimension Surrogate Key'' and#(lf)        appt_fct.''Person Dimension Version Number'' = pers_dim.''Person Dimension Version Number'') left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Membership Type Dimension'' mbr_dim#(lf)    on (appt_fct.''Membership Type Dimension Surrogate Key''=mbr_dim.''Membership Type Dimension Surrogate Key'') left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Appointment Dimension'' appt_dim#(lf)    on (appt_fct.''Appointment Dimension Surrogate Key''=appt_dim.''Appointment Dimension Surrogate Key'') left join#(lf)        ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Distribution Performance Dates Dimension'' as date_dim#(lf)    on (appt_dim.''Appointment Date''=date_dim.''Calendar Day Date'') left join   #(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' org_dim#(lf)    on ((appt_fct.''Appointment Organization Dimension Surrogate Key''=org_dim.''Organization Dimension Surrogate Key'') and #(lf)       ((org_dim.''Effective Begin Date'' \u003c= appt_dim.''Appointment Date'') and (appt_dim.''Appointment Date'' \u003c= org_dim.''Effective End Date''))) left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' sale_hier_dim#(lf)    on ((org_dim.''Source System Key Text''=sale_hier_dim.''Sales Hierarchy Identifier'' and#(lf)#(tab)    (sale_hier_dim.''Effective Begin Date''\u003c=appt_dim.''Appointment Date'') and#(lf)#(tab)    (appt_dim.''Appointment Date''\u003c= sale_hier_dim.''Effective End Date'') and #(lf)#(tab)     sale_hier_dim.''Current Row Indicator'' = \u0027Y\u0027))#(lf)#(lf)where appt_dim.''Current Row Indicator'' = \u0027Y\u0027#(lf)  and appt_dim.''Appointment Create Date Over 14 Days'' = \u0027N\u0027#(lf)  and appt_fct.''Person Dimension Surrogate Key'' \u003c\u003e 0#(lf)  and appt_fct.''Appointment Status Name'' \u003c\u003e \u0027Declined\u0027#(lf)  and appt_dim.''Appointment Type Code'' \u003c\u003e \u0027UNK\u0027#(lf)  --and appt_dim.''Appointment Type Code'' in (\u0027Connect\u0027,\u0027Gather Data\u0027,\u0027Take Action\u0027,\u0027Strategy Call/Meeting\u0027,\u0027Review\u0027,\u0027Service\u0027,\u0027Discover\u0027,\u0027Deliver\u0027)#(lf)  and sale_hier_dim.''Organization Department Code'' in (\u00270115\u0027,\u00270165\u0027,\u00270190\u0027,\u00270240\u0027,\u00270283\u0027,\u00270291\u0027,\u00270361\u0027,\u00270365\u0027, \u00270383\u0027,\u00270384\u0027,\u00270410\u0027,\u00270435\u0027,\u00270475\u0027,\u00270496\u0027,\u00270525\u0027,\u00270529\u0027,\u00270810\u0027)#(lf)  and (org_dim.''Job Type Code'' in (\u0027002000\u0027, \u0027002003\u0027, \u0027002008\u0027, \u0027002010\u0027, \u0027002011\u0027, \u0027002012\u0027, \u0027002016\u0027, \u0027002022\u0027, \u0027002024\u0027, \u0027002025\u0027, \u0027002026\u0027, \u0027002027\u0027, \u0027002030\u0027, \u0027002031\u0027, \u0027002032\u0027, \u0027003100\u0027, \u0027003500\u0027)#(lf)   or  org_dim.''Department Identifier'' in (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027)) #(lf)  and appt_dim.''Event Result Description'' not in (\u0027No Show\u0027,\u0027Cancelled\u0027)#(lf)  and date_dim.''Distribution Performance Reporting Year Number'' \u003e= Year(CURRENT_DATE) - 2#(lf) -- and org_dim.''Source System Key Text'' = \u0027TS11113\u0027#(lf) -- and appt_dim.''Appointment Date'' \u003c= Current_Date-1#(lf)#(lf)#(lf)group by#(lf)  appt_fct.''Appointment Dimension Surrogate Key'',#(lf)  appt_dim.''Appointment Date'',#(lf)  org_dim.''Source System Key Text'',#(lf)  org_dim.''First Name''||\u0027 \u0027||org_dim.''Last Name'',#(lf)  pers_dim.''Source System Key Text'',#(lf)  date_dim.''Distribution Performance Reporting Week Text''#(lf)having #(lf)sum(appt_fct.''Appointment Occurs'')\u003e0#(lf)  #(lf)) #(lf)(Select EMP_ID,#(lf)          ''Employee Display Name'',#(lf)          ''TYPE'',#(lf)          sum(Appointment_Count) as ''Total'',#(lf)          sum(Appointment_Count)+0 as ''Avg'',#(lf)          \u0027Last Week\u0027 as ''VitalStats Indicator''#(lf)    from (#(lf)          Select EMP_ID,#(lf)                 ''Employee Display Name'',#(lf)                 ''TYPE'',#(lf)                 case when ''Distribution Performance Reporting Week Text'' = \u0027PREVIOUS\u0027#(lf)                   then count(distinct(''Appointment Dimension Surrogate Key''))#(lf)                     else 0#(lf)                 end as Appointment_Count#(lf)            from fp_appointments#(lf)          group by EMP_ID, ''Employee Display Name'', ''TYPE'', ''Distribution Performance Reporting Week Text''#(lf)          )#(lf)      #(lf)   group by EMP_ID, ''Employee Display Name'', ''TYPE'', ''VitalStats Indicator''#(lf)   ) #(lf) #(lf)union#(lf)  (select EMP_ID,#(lf)          ''Employee Display Name'',#(lf)          ''TYPE'',#(lf)          sum(Appointment_Count) as ''Total'',#(lf)          sum(Appointment_Count)/4 as ''Avg'',#(lf)          \u00274 Week Average\u0027 as ''VitalStats Indicator''#(lf)    from (#(lf)          Select EMP_ID,#(lf)                 ''Employee Display Name'',#(lf)                 ''TYPE'',#(lf)                  case when ''Days since Appointment'' \u003e= 1 and ''Days since Appointment'' \u003c 28#(lf)                     then count(distinct(''Appointment Dimension Surrogate Key''))#(lf)                       else 0#(lf)                  end as Appointment_Count#(lf)             from fp_Appointments#(lf)         group by EMP_ID,''Employee Display Name'', ''TYPE'', ''VitalStats Indicator'', ''Days since Appointment''#(lf) )  #(lf)    group by EMP_ID, ''Employee Display Name'', ''TYPE'', ''VitalStats Indicator''#(lf)   ) #(lf) union#(lf)  (select EMP_ID,#(lf)          ''Employee Display Name'',#(lf)          ''TYPE'',#(lf)          sum(Appointment_Count) as ''Total'',#(lf)          sum(Appointment_Count)/8 as ''Avg'',#(lf)          \u00278 Week Average\u0027 as ''VitalStats Indicator''#(lf)    from (#(lf)          Select EMP_ID,#(lf)                 ''Employee Display Name'',#(lf)                 ''TYPE'',#(lf)                  case when ''Days since Appointment'' \u003e= 1 and ''Days since Appointment'' \u003c 56#(lf)                     then count(distinct(''Appointment Dimension Surrogate Key''))#(lf)                       else 0#(lf)                  end as Appointment_Count#(lf)             from fp_Appointments#(lf)         group by EMP_ID,''Employee Display Name'', ''TYPE'', ''VitalStats Indicator'', ''Days since Appointment''#(lf) )  #(lf)    group by EMP_ID, ''Employee Display Name'', ''TYPE'', ''VitalStats Indicator''#(lf)   ) #(lf) union#(lf)  (select EMP_ID,#(lf)          ''Employee Display Name'',#(lf)          ''TYPE'',#(lf)          sum(Appointment_Count) as ''Total'',#(lf)          sum(Appointment_Count)/13 as ''Avg'',#(lf)          \u002713 Week Average\u0027 as ''VitalStats Indicator''#(lf)    from (#(lf)          Select EMP_ID,#(lf)                 ''Employee Display Name'',#(lf)                 ''TYPE'',#(lf)                  case when ''Days since Appointment'' \u003e= 1 and ''Days since Appointment'' \u003c 91#(lf)                     then count(distinct(''Appointment Dimension Surrogate Key''))#(lf)                       else 0#(lf)                  end as Appointment_Count#(lf)             from fp_Appointments#(lf)         group by EMP_ID,''Employee Display Name'', ''TYPE'', ''VitalStats Indicator'', ''Days since Appointment''#(lf) )  #(lf)    group by EMP_ID, ''Employee Display Name'', ''TYPE'', ''VitalStats Indicator''#(lf)   ) #(lf) union#(lf)  (select EMP_ID,#(lf)          ''Employee Display Name'',#(lf)          ''TYPE'',#(lf)          sum(Appointment_Count) as ''Total'',#(lf)          sum(Appointment_Count)/52 as ''Avg'',#(lf)          \u002752 Week Average\u0027 as ''VitalStats Indicator''#(lf)    from (#(lf)          Select EMP_ID,#(lf)                 ''Employee Display Name'',#(lf)                 ''TYPE'',#(lf)                  case when ''Days since Appointment'' \u003e= 1 and ''Days since Appointment'' \u003c 365#(lf)                     then count(distinct(''Appointment Dimension Surrogate Key''))#(lf)                       else 0#(lf)                  end as Appointment_Count#(lf)             from fp_Appointments#(lf)         group by EMP_ID,''Employee Display Name'', ''TYPE'', ''VitalStats Indicator'', ''Days since Appointment''#(lf) )  #(lf)    group by EMP_ID, ''Employee Display Name'', ''TYPE'', ''VitalStats Indicator''#(lf)   )', null, [EnableFolding=true])in    Source"}]},{"name":"PC_VitalStats_Agg","isHidden":false,"storageMode":"Import","columns":[{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee Display Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TYPE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Total","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Avg","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"VitalStats Indicator","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'WITH fp_ProspectConnects as (#(lf)SELECT DISTINCT#(tab)\u0027Prospect Connects\u0027 as Type,#(lf)        \u0027         \u0027 as ''VitalStats Indicator'',#(lf)        appt_fct.''Appointment Dimension Surrogate Key'',#(lf)        appt_dim.''Appointment Date'',#(lf)        date_dim.''Distribution Performance Reporting Week Text'',#(lf)        CURRENT_DATE - ''Appointment Date'' as ''Days since Connect'',#(lf)       -- appt_dim.''Appointment Type Description'' as ''Appointment Type Code'',#(lf)        org_dim.''Source System Key Text'' as ''EMP_ID'',#(lf)        org_dim.''First Name''||\u0027 \u0027 ||org_dim.''Last Name'' as ''Employee Display Name''#(lf)#(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Appointment Combine Fact'' appt_fct left join #(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Person Dimension'' as Pers_dim#(lf)    on (appt_fct.''Person Dimension Surrogate Key''=pers_dim.''Person Dimension Surrogate Key'' and#(lf)        appt_fct.''Person Dimension Version Number'' = pers_dim.''Person Dimension Version Number'') left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Membership Type Dimension'' mbr_dim#(lf)    on (appt_fct.''Membership Type Dimension Surrogate Key''=mbr_dim.''Membership Type Dimension Surrogate Key'') left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Appointment Dimension'' appt_dim#(lf)    on (appt_fct.''Appointment Dimension Surrogate Key''=appt_dim.''Appointment Dimension Surrogate Key'') left join#(lf)        ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Distribution Performance Dates Dimension'' as date_dim#(lf)    on (appt_dim.''Appointment Date''=date_dim.''Calendar Day Date'') left join   #(lf)        ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' org_dim#(lf)    on ((appt_fct.''Appointment Organization Dimension Surrogate Key''=org_dim.''Organization Dimension Surrogate Key'') and #(lf)       ((org_dim.''Effective Begin Date'' \u003c= appt_dim.''Appointment Date'') and (appt_dim.''Appointment Date'' \u003c= org_dim.''Effective End Date''))) left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' sale_hier_dim#(lf)    on ((org_dim.''Source System Key Text''=sale_hier_dim.''Sales Hierarchy Identifier'' and#(lf)#(tab)(sale_hier_dim.''Effective Begin Date''\u003c=appt_dim.''Appointment Date'') and#(lf)#(tab)(appt_dim.''Appointment Date''\u003c= sale_hier_dim.''Effective End Date'') and #(lf)#(tab) sale_hier_dim.''Current Row Indicator'' = \u0027Y\u0027))#(lf)#(lf)where appt_dim.''Current Row Indicator'' = \u0027Y\u0027#(lf)  and appt_dim.''Appointment Create Date Over 14 Days'' = \u0027N\u0027#(lf)  and appt_fct.''Person Dimension Surrogate Key'' \u003c\u003e 0#(lf)  and appt_dim.''Appointment Type Description'' = \u0027Connect\u0027#(lf)  and  mbr_dim.''Membership Type Description'' \u003c\u003e \u0027Benefit\u0027#(lf)  and appt_fct.''Appointment Status Name'' \u003c\u003e \u0027Declined\u0027#(lf)  and appt_dim.''Appointment Type Code'' \u003c\u003e \u0027UNK\u0027#(lf)  and sale_hier_dim.''Organization Department Code'' in (\u00270115\u0027,\u00270165\u0027,\u00270190\u0027,\u00270240\u0027,\u00270283\u0027,\u00270291\u0027,\u00270361\u0027,\u00270365\u0027, \u00270383\u0027,\u00270384\u0027,\u00270410\u0027,\u00270435\u0027,\u00270475\u0027,\u00270496\u0027,\u00270525\u0027,\u00270529\u0027,\u00270810\u0027)#(lf)  and (org_dim.''Job Type Code'' in (\u0027002000\u0027, \u0027002003\u0027, \u0027002008\u0027, \u0027002010\u0027, \u0027002011\u0027, \u0027002012\u0027, \u0027002016\u0027, \u0027002022\u0027, \u0027002024\u0027, \u0027002025\u0027, \u0027002026\u0027, \u0027002027\u0027, \u0027002030\u0027, \u0027002031\u0027, \u0027002032\u0027, \u0027003100\u0027, \u0027003500\u0027)#(lf)   or  org_dim.''Department Identifier'' in (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027)) #(lf)  and appt_dim.''Event Result Description'' not in (\u0027No Show\u0027,\u0027Cancelled\u0027)#(lf)  and date_dim.''Distribution Performance Reporting Year Number'' \u003e= Year(CURRENT_DATE) - 2#(lf)  --and appt_dim.''Appointment Date'' \u003c= Current_Date-1#(lf)  --and org_dim.''Source System Key Text'' = \u0027TS1113\u0027#(lf)#(lf)group by#(lf)  appt_fct.''Appointment Dimension Surrogate Key'',#(lf)  appt_dim.''Appointment Date'',#(lf)  date_dim.''Distribution Performance Reporting Week Text'',#(lf)  org_dim.''Source System Key Text'',#(lf)  org_dim.''First Name''||\u0027 \u0027||org_dim.''Last Name'',#(lf)  pers_dim.''First Name''||\u0027 \u0027||pers_dim.''Last Name'' #(lf)  #(lf)having sum(appt_fct.''Appointment Occurs'')\u003e0#(lf) #(lf)) #(lf)#(lf)#(lf)(Select EMP_ID,#(lf)          ''Employee Display Name'',#(lf)          ''TYPE'',#(lf)          sum(Appointment_Count) as ''Total'',#(lf)          sum(Appointment_Count)+0 as ''Avg'',#(lf)          \u0027Last Week\u0027 as ''VitalStats Indicator''#(lf)    from (#(lf)          Select EMP_ID,#(lf)                 ''Employee Display Name'',#(lf)                 ''TYPE'',#(lf)                 case when ''Distribution Performance Reporting Week Text'' = \u0027PREVIOUS\u0027#(lf)                   then count(distinct(''Appointment Dimension Surrogate Key''))#(lf)                     else 0#(lf)                 end as Appointment_Count#(lf)            from fp_ProspectConnects#(lf)          group by EMP_ID, ''Employee Display Name'', ''TYPE'', ''Distribution Performance Reporting Week Text''#(lf)          )#(lf)      #(lf)   group by EMP_ID, ''Employee Display Name'', ''TYPE'', ''VitalStats Indicator''#(lf)   ) #(lf) #(lf) #(lf)union#(lf)  (select EMP_ID,#(lf)          ''Employee Display Name'',#(lf)          ''TYPE'',#(lf)          sum(Appointment_Count) as ''Total'',#(lf)          sum(Appointment_Count)/4 as ''Avg'',#(lf)          \u00274 Week Average\u0027 as ''VitalStats Indicator''#(lf)    from (#(lf)          Select EMP_ID,#(lf)                 ''Employee Display Name'',#(lf)                 ''TYPE'',#(lf)                  case when ''Days since Connect'' \u003e= 1 and ''Days since Connect'' \u003c 28#(lf)                     then count(distinct(''Appointment Dimension Surrogate Key''))#(lf)                       else 0#(lf)                  end as Appointment_Count#(lf)             from fp_ProspectConnects#(lf)         group by EMP_ID,''Employee Display Name'', ''TYPE'', ''VitalStats Indicator'', ''Days since Connect''#(lf) )  #(lf)    group by EMP_ID, ''Employee Display Name'', ''TYPE'', ''VitalStats Indicator''#(lf)   ) #(lf)   #(lf) #(lf) union#(lf)  (select EMP_ID,#(lf)          ''Employee Display Name'',#(lf)          ''TYPE'',#(lf)          sum(Appointment_Count) as ''Total'',#(lf)          sum(Appointment_Count)/8 as ''Avg'',#(lf)          \u00278 Week Average\u0027 as ''VitalStats Indicator''#(lf)    from (#(lf)          Select EMP_ID,#(lf)                 ''Employee Display Name'',#(lf)                 ''TYPE'',#(lf)                  case when ''Days since Connect'' \u003e= 1 and ''Days since Connect'' \u003c 56#(lf)                     then count(distinct(''Appointment Dimension Surrogate Key''))#(lf)                       else 0#(lf)                  end as Appointment_Count#(lf)             from fp_ProspectConnects#(lf)         group by EMP_ID,''Employee Display Name'', ''TYPE'', ''VitalStats Indicator'', ''Days since Connect''#(lf) )  #(lf)    group by EMP_ID, ''Employee Display Name'', ''TYPE'', ''VitalStats Indicator''#(lf)   ) #(lf) union#(lf)  (select EMP_ID,#(lf)          ''Employee Display Name'',#(lf)          ''TYPE'',#(lf)          sum(Appointment_Count) as ''Total'',#(lf)          sum(Appointment_Count)/13 as ''Avg'',#(lf)          \u002713 Week Average\u0027 as ''VitalStats Indicator''#(lf)    from (#(lf)          Select EMP_ID,#(lf)                 ''Employee Display Name'',#(lf)                 ''TYPE'',#(lf)                  case when ''Days since Connect'' \u003e= 1 and ''Days since Connect'' \u003c 91#(lf)                     then count(distinct(''Appointment Dimension Surrogate Key''))#(lf)                       else 0#(lf)                  end as Appointment_Count#(lf)             from fp_ProspectConnects#(lf)         group by EMP_ID,''Employee Display Name'', ''TYPE'', ''VitalStats Indicator'', ''Days since Connect''#(lf) )  #(lf)    group by EMP_ID, ''Employee Display Name'', ''TYPE'', ''VitalStats Indicator''#(lf)   ) #(lf) union#(lf)  (select EMP_ID,#(lf)          ''Employee Display Name'',#(lf)          ''TYPE'',#(lf)          sum(Appointment_Count) as ''Total'',#(lf)          sum(Appointment_Count)/52 as ''Avg'',#(lf)          \u002752 Week Average\u0027 as ''VitalStats Indicator''#(lf)    from (#(lf)          Select EMP_ID,#(lf)                 ''Employee Display Name'',#(lf)                 ''TYPE'',#(lf)                  case when ''Days since Connect'' \u003e= 1 and ''Days since Connect'' \u003c 365#(lf)                     then count(distinct(''Appointment Dimension Surrogate Key''))#(lf)                       else 0#(lf)                  end as Appointment_Count#(lf)             from fp_ProspectConnects#(lf)         group by EMP_ID,''Employee Display Name'', ''TYPE'', ''VitalStats Indicator'', ''Days since Connect''#(lf) )  #(lf)    group by EMP_ID, ''Employee Display Name'', ''TYPE'', ''VitalStats Indicator''#(lf)   )', null, [EnableFolding=true])in    Source"}]},{"name":"VitalStats_Aggregate","isHidden":false,"storageMode":"Import","columns":[{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee Display Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TYPE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Total","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Avg","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"VitalStats Indicator","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"VitalStats Sort","dataType":"String","isHidden":false,"expression":"RELATED((\u0027Vital Stats Categories\u0027[Order]))","columnType":"Calculated"}],"measures":[],"source":[{"expression":"let    Source = Table.Combine({Appts_VitalStats_Agg, PC_VitalStats_Agg, Referrals_VitalStats}),    #'Filtered Rows' = Table.SelectRows(Source, each true)in    #'Filtered Rows'"}]},{"name":"RECD_PEND_COMPL","isHidden":false,"storageMode":"Import","columns":[{"name":"ContractNumber","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"BenefitContractNumber","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TransDesc","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TransReceiveDt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TransCreateDt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TransCloseDt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ProdType","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LOBCode","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LOBSubType","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EstimatedSalesCreditAmt","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"ActualSalesCreditAmt","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CAPTransmissionNumber","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CorporateEmployeeID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFOCode","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFOName","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Received","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Pending","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Retired","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Declined","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Issued","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Cancelled","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"ContractFaceAmount","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"STATUS","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"YR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ReceivedYear","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Written_Test","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"YTD Written Contracts","expression":"var _total=  CALCULATE    (SUMX(DISTINCT(\u0027RECD_PEND_COMPL\u0027[BenefitContractNumber]), 1),    Year(\u0027RECD_PEND_COMPL\u0027[TransReceiveDt]) = YEAR(TODAY()),    \u0027DTRB_PERF_DATES\u0027[Today or Before] = 'Y')ReturnIF(ISBLANK(_total),0,_total)  ","isHidden":false},{"name":"YTD Written Contracts PH Comp","expression":"var _YRSelected = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR])var _total=  CALCULATE    (SUMX(DISTINCT(\u0027RECD_PEND_COMPL\u0027[BenefitContractNumber]), 1),    Year(\u0027RECD_PEND_COMPL\u0027[TransReceiveDt]) = SELECTEDVALUE(\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR]),    \u0027DTRB_PERF_DATES\u0027[Today or Before] = 'Y')ReturnIF(ISBLANK(_total),0,_total) ","isHidden":false}],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////pnfiles002b//fp_cifs_7834_sas$//MarketAnalysis//FieldReporting//SMIS//RECD_PEND_COMPL.csv'),[Delimiter=',', Columns=34, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Week_Ending', type date}, {'Week_Nbr', Int64.Type}, {'ContractNumber', type text}, {'BenefitContractNumber', type text}, {'FileCode', type text}, {'TransCode', Int64.Type}, {'TransDesc', type text}, {'TransReceiveDt', type date}, {'TransCreateDt', type date}, {'TransCloseDt', type date}, {'TransSeqNumber', Int64.Type}, {'Product', type text}, {'ProdType', type text}, {'LOBCode', type text}, {'LOBSubType', type text}, {'SMISLOBCode', type text}, {'SMISPlanCode', Int64.Type}, {'EstimatedSalesCreditAmt', type number}, {'ActualSalesCreditAmt', type number}, {'CAPTransmissionNumber', type text}, {'CorporateEmployeeID', type text}, {'RFOCode', type text}, {'RFOName', type text}, {'AgentCode', type text}, {'SMISTRANSKEY', type text}, {'Received', Int64.Type}, {'Pending', Int64.Type}, {'Retired', Int64.Type}, {'Declined', Int64.Type}, {'Issued', Int64.Type}, {'Cancelled', Int64.Type}, {'STATUS', type text}}),    #'Duplicated Column' = Table.DuplicateColumn(#'Changed Type', 'TransReceiveDt', 'TransReceiveDt - Copy'),    #'Extracted Year' = Table.TransformColumns(#'Duplicated Column',{{'TransReceiveDt - Copy', Date.Year, Int64.Type}}),    #'Renamed Columns' = Table.RenameColumns(#'Extracted Year',{{'TransReceiveDt - Copy', 'ReceivedYear'}}),    #'Added Custom' = Table.AddColumn(#'Renamed Columns', 'Written_Test', each if (Date.Year([TransReceiveDt]) \u003e=  2022 and [Received] = 1) then 1 else 0),    #'Filtered Rows' = Table.SelectRows(#'Added Custom', each ([ReceivedYear] \u003e= 2022) and ([Written_Test] = 1)),    #'Removed Columns' = Table.RemoveColumns(#'Filtered Rows',{'Week_Ending', 'Week_Nbr', 'FileCode', 'TransCode', 'TransSeqNumber', 'SMISLOBCode', 'SMISPlanCode', 'AgentCode', 'SMISTRANSKEY'})in    #'Removed Columns'"}]},{"name":"Role Level Security","isHidden":false,"storageMode":"Import","columns":[{"name":"EMPLOYEE_TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMPLOYEE_EMAIL","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"REPORT_TO_EMAIL","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"REPORT_TO_TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"WRKR_RPT_HIER_SRC_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTL_DATA_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CRET_USER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CRET_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"LST_UPDT_USER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LST_UPDT_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Department Number","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"AD Group","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SFRC_TEAM_PRPS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RSA_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RSA_TEAM_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SFRC_TEAM_ID","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = PowerBI.Dataflows([]),    #'f7efdfeb-73c5-4a9b-ab78-f9370190eded' = Source{[workspaceId='f7efdfeb-73c5-4a9b-ab78-f9370190eded']}[Data],    #'a9b06e96-a67b-4f28-b939-3e1ca1047bd2' = #'f7efdfeb-73c5-4a9b-ab78-f9370190eded'{[dataflowId='a9b06e96-a67b-4f28-b939-3e1ca1047bd2']}[Data],    #'Role Level Security1' = #'a9b06e96-a67b-4f28-b939-3e1ca1047bd2'{[entity='Role Level Security']}[Data],    #'Filtered Rows' = Table.SelectRows(#'Role Level Security1',  each ([AD Group] = 'PBI_FLD_RPTG_COE' or [AD Group] = 'PBI_FLD_RPTG_FR' or [AD Group] = 'PBI_FLD_RPTG_HO' or [AD Group] = 'PBI_FLD_RPTG_LDR' or [AD Group] = 'PBI_FLD_RPTG_LDRSTF' or [AD Group] = 'PBI_FLD_RPTG_RFOSTF' or [AD Group] = 'PBI_FLD_RPTG_TFGT')),    #'Removed Columns' = Table.RemoveColumns(#'Filtered Rows',{'EMPLOYEE_SK', 'REPORT_TO_SK', 'Department Name', 'HO_Email'}),    #'Add Custom' = Table.AddColumn(#'Removed Columns', 'Custom', each if ([AD Group] = 'PBI_FLD_RPTG_HO' and ([EMPLOYEE_TSID]=[REPORT_TO_TSID])) then 1 else if ([AD Group] = 'PBI_FLD_RPTG_HO' and ([EMPLOYEE_TSID] \u003c\u003e [REPORT_TO_TSID])) then 0else if [AD Group] \u003c\u003e 'PBI_FLD_RPTG_HO' then 1 else 2),    #'Filtered Rows2' = Table.SelectRows(#'Add Custom', each ([Custom] = 1)),    #'Removed Columns1' = Table.RemoveColumns(#'Filtered Rows2',{'Custom'}),    #'Replaced Value' = Table.ReplaceValue(#'Removed Columns1','115','0115',Replacer.ReplaceValue,{'Department Number'}),    #'Replaced Value1' = Table.ReplaceValue(#'Replaced Value','291','0291',Replacer.ReplaceValue,{'Department Number'}),    #'Replaced Value2' = Table.ReplaceValue(#'Replaced Value1','361','0361',Replacer.ReplaceValue,{'Department Number'}),    #'Replaced Value3' = Table.ReplaceValue(#'Replaced Value2','435','0435',Replacer.ReplaceValue,{'Department Number'}),    #'Replaced Value4' = Table.ReplaceValue(#'Replaced Value3','525','0525',Replacer.ReplaceValue,{'Department Number'})in    #'Replaced Value4'"}]},{"name":"client_products","isHidden":false,"storageMode":"Import","columns":[{"name":"cifidnbr","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"VA","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"FA","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"IMM","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"SO","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Term","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"TRAD","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"UL","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"VUL","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"LTC","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DI","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"MedSup","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"MF","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"bank","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"wrapown","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"totctrcs","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"grpidnbr","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////pnfiles002b//fp_cifs_7834_sas$//marketanalysis//fieldreporting//PBI Data//Clients//client_products.csv'),[Delimiter=',', Columns=17, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'cifidnbr', Int64.Type}, {'VA', Int64.Type}, {'FA', Int64.Type}, {'IMM', Int64.Type}, {'SO', Int64.Type}, {'Term', Int64.Type}, {'TRAD', Int64.Type}, {'UL', Int64.Type}, {'VUL', Int64.Type}, {'LTC', Int64.Type}, {'DI', Int64.Type}, {'MedSup', Int64.Type}, {'MF', Int64.Type}, {'bank', Int64.Type}, {'wrapown', Int64.Type}, {'totctrcs', Int64.Type}})in    #'Changed Type'"}]},{"name":"FldGoals2023","isHidden":false,"storageMode":"Import","columns":[{"name":"CORP_EMP_ID_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"NAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"RFO_Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TITLE_CODE","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"RPT_TO_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Zone_Leader_Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Division_Code","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DIVISION_NAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team_Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"username","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"userTags","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Referrals","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Appointments","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"NewFinancialCustomers","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"NewMoney","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"GridRevenue","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"FYLHGRID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"As_of_Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Year","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Prospect_Connects_Held","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////pnfiles002b//fp_cifs_7834_sas$//MarketAnalysis//FieldReporting//FieldGoals//FldGoals23.csv'),[Delimiter=',', Columns=22, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'CORP_EMP_ID_CDE', type text}, {'NAME', type text}, {'RFO', Int64.Type}, {'RFO_Name', type text}, {'JOB_TITLE_CODE', Int64.Type}, {'RPT_TO_ID', type text}, {'Zone_Leader_Name', type text}, {'Division_Code', Int64.Type}, {'DIVISION_NAME', type text}, {'Team_Name', type text}, {'username', type text}, {'UserTags', type text}, {'Referrals', Int64.Type},  {'Prospect_Connects_Held', Int64.Type}, {'Appointments', Int64.Type}, {'NewFinancialCustomers', Int64.Type},  {'NewMoney', Int64.Type},  {'GridRevenue', Int64.Type}, {'FYLHGRID', Int64.Type}, {'As_of_Date', type date}, {'Year', Int64.Type}}),    #'Renamed Columns1' = Table.RenameColumns(#'Changed Type',{{'UserTags', 'userTags'}})in    #'Renamed Columns1'"}]},{"name":"Referrals","isHidden":false,"storageMode":"Import","columns":[{"name":"PERS_DIM_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CIF_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"REFERRAL_CLIENT_NAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"REFR_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"REFERRAL_OCCURS","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee Display Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Membership Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"REFERRER_NAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"REFERRER_CIFID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Column","dataType":"String","isHidden":false,"columnType":"Calculated"},{"name":"Referral Client Service Group","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Referrer Client Service Group","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"13 wk Referral Avg","expression":"  var _today_13 =LOOKUPVALUE(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], today()-91)RETURNCALCULATE((DISTINCTCOUNT(\u0027Referrals\u0027[CIF_ID])/13)+0, \u0027Referrals\u0027[REFR_DT] \u003e= _today_13, \u0027Referrals\u0027[REFR_DT] \u003c today())","isHidden":false},{"name":"4 wk Referral Avg","expression":"  var _today_4 =LOOKUPVALUE(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], today()-28)RETURNCALCULATE((DISTINCTCOUNT(\u0027Referrals\u0027[CIF_ID])/4)+0, \u0027Referrals\u0027[REFR_DT] \u003e= _today_4, \u0027Referrals\u0027[REFR_DT] \u003c today())","isHidden":false},{"name":"52 wk Referral Avg","expression":"  var _today_52 =LOOKUPVALUE(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], today()-364)RETURNCALCULATE((DISTINCTCOUNT(\u0027Referrals\u0027[CIF_ID])/52)+0, \u0027Referrals\u0027[REFR_DT] \u003e= _today_52, \u0027Referrals\u0027[REFR_DT] \u003c today())--CALCULATE((SUM(\u0027Referrals\u0027[REFERRAL_OCCURS])/52)+0, \u0027Referrals\u0027[REFR_DT] \u003e= _today_52, \u0027Referrals\u0027[REFR_DT] \u003c today())","isHidden":false},{"name":"8 wk Referral Avg","expression":"  var _today_8 =LOOKUPVALUE(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], today()-56)RETURNCALCULATE((DISTINCTCOUNT(\u0027Referrals\u0027[CIF_ID])/8)+0, \u0027Referrals\u0027[REFR_DT] \u003e= _today_8, \u0027Referrals\u0027[REFR_DT] \u003c today())","isHidden":false},{"name":"Last Week Referral","expression":"CALCULATE(DISTINCTCOUNT(\u0027Referrals\u0027[CIF_ID])+0,\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_WK_TXT] = 'PREVIOUS',\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'CURRENT')","isHidden":false},{"name":"Last Week Referralxx","expression":"  var _today_7 =LOOKUPVALUE(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], today()-7)RETURNCALCULATE((DISTINCTCOUNT(\u0027Referrals\u0027[CIF_ID]))+0, \u0027Referrals\u0027[REFR_DT] \u003e= _today_7, \u0027Referrals\u0027[REFR_DT] \u003c today())","isHidden":false},{"name":"YTD Health Referrals","expression":"var _total=  CALCULATE    (DISTINCTCOUNT(\u0027Referrals\u0027[CIF_ID]),     Year(\u0027Referrals\u0027[REFR_DT]) = YEAR(TODAY()),     \u0027DTRB_PERF_DATES\u0027[Today or Before] = 'Y')  ReturnIF(ISBLANK(_total),0,_total) ","isHidden":false},{"name":"YTD Health Referrals PH Comp","expression":"var _YRSelected = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR])var _total=  CALCULATE    (DISTINCTCOUNT(\u0027Referrals\u0027[CIF_ID]),     Year(\u0027Referrals\u0027[REFR_DT]) = SELECTEDVALUE(\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR]),     \u0027DTRB_PERF_DATES\u0027[Today or Before] = 'Y')ReturnIF(ISBLANK(_total),0,_total) ","isHidden":false},{"name":"YTD Referrals","expression":"var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT])Var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])var _total=  CALCULATE    (DISTINCTCOUNT(\u0027Referrals\u0027[CIF_ID]),    DTRB_PERF_DATES[CAL_DAY_DT] \u003e= min_date,    DTRB_PERF_DATES[CAL_DAY_DT] \u003c= max_date,    \u0027DTRB_PERF_DATES\u0027[Today or Before] = 'Y')--CALCULATE--    (SUM(\u0027Referrals\u0027[Referral_Occurs]),--    DTRB_PERF_DATES[CAL_DAY_DT] \u003e= min_date,--    DTRB_PERF_DATES[CAL_DAY_DT] \u003c= max_date,--    \u0027DTRB_PERF_DATES\u0027[Today or Before] = 'Y')ReturnIF(ISBLANK(_total),0,_total)    ","isHidden":false},{"name":"PYTD Referrals","expression":"  var min_date = min(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT])  var max_date = Max(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT])  var _total =  CALCULATE     (sumx(DISTINCT(\u0027Referrals\u0027[CIF_ID]),1),           DTRB_PERF_DATES[CAL_DAY_DT] \u003e= (min_date-365),           DTRB_PERF_DATES[CAL_DAY_DT] \u003c= (max_date-365),           \u0027DTRB_PERF_DATES\u0027[Prior YR or Before] = 'Y')Returnif(isblank(_total),0,_total) ","isHidden":false},{"name":"Prior YR Referrals Total","expression":"var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT])var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT]) var _total =   CALCULATE    (SUMX(DISTINCT(\u0027Referrals\u0027[CIF_ID]),1),     DTRB_PERF_DATES[CAL_DAY_DT] \u003e= (min_date-365),     DTRB_PERF_DATES[CAL_DAY_DT] \u003c= (max(\u0027DTRB_PERF_DATES\u0027[End of Year Date])-365))Returnif(isblank(_total),0,_total) ","isHidden":false},{"name":"YOY Referrals","expression":"IF (([PYTD Referrals]) =0,0, ((\u0027Referrals\u0027[YTD Referrals] - \u0027Referrals\u0027[PYTD Referrals]) / \u0027Referrals\u0027[PYTD Referrals]))","isHidden":false},{"name":"Total Referrals","expression":"  var _total =  CALCULATE    (SUMX(DISTINCT(\u0027Referrals\u0027[CIF_ID]), 1),     \u0027DTRB_PERF_DATES\u0027[Today or Before] = 'Y')ReturnIF(ISBLANK(_total),0,_total) ","isHidden":false}],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'select a.''Person Dimension Surrogate Key'' as PERS_DIM_SK,#(lf)       e.''Source System Key Text'' as CIF_ID,#(lf)       e2.''Source System Key Text'' as Referrer_CIFID,#(lf)       e2.''First Name''||\u0027 \u0027||e2.''Last Name'' as Referrer_Name,#(lf)       case when f.''Membership Type Code'' = \u0027NON\u0027 and f.''Classification Contractual Relationship Code'' \u003c\u003e \u0027NA\u0027 then \u0027Non-Member\u0027#(lf)            when f.''Membership Type Code'' = \u0027NON\u0027 and f.''Classification Contractual Relationship Code'' = \u0027NA\u0027 then \u0027Prospect\u0027#(lf)            when f.''Membership Type Code'' in (\u0027BEN\u0027,\u0027ASSOC\u0027,\u0027JUV\u0027) then f.''Membership Type Description''#(lf)       end as ''Membership Type'',    #(lf)       e.''First Name''||\u0027 \u0027||e.''Last Name'' as Referral_Client_Name,#(lf)       a.''Referral Date'' as REFR_DT,#(lf)       sum(a.''Occurs'') as Referral_Occurs, #(lf)       c.''Source System Key Text'' as EMP_ID,#(lf)       c.''Last Name''||\u0027, \u0027||c.''First Name'' as ''Employee Display Name''#(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Referral Fact'' a left join #(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Person Dimension'' e#(lf)    on (a.''Person Dimension Surrogate Key'' = e.''Person Dimension Surrogate Key'')  inner join #(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Conformed Customer Dimension Detail''  f #(lf)    on try_to_number(e.''Source System Key Text'')=f.''Customer Identification Number'' and e.''Current Row Indicator'' = \u0027Y\u0027  left join #(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Person Dimension'' e2#(lf)    on ''Referral Person Dimension Surrogate Key''=e2.''Person Dimension Surrogate Key'' left join   #(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Distribution Performance Dates Dimension'' b#(lf)    on a.''Referral Date'' = b.''Calendar Day Date'' left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' c#(lf)    on ((a.''Referral Organization Dimension Surrogate Key'' = c.''Organization Dimension Surrogate Key'' ) and #(lf)        (a.''Referral Organization Dimension Version Number'' = c.''Organization Dimension Version Number'')) left join#(lf)        ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' d#(lf)    on ((d.''Effective Begin Date'' \u003c= a.''Referral Date'') and #(lf)        (a.''Referral Date'' \u003c= dateadd(day,-1,d.''Effective End Date'')) and d.''Current Row Indicator'' = \u0027Y\u0027 and#(lf)        c.''Source System Key Text'' = d.''Sales Hierarchy Identifier'')  #(lf)      #(lf)  where a.''Person Dimension Surrogate Key'' \u003c\u003e 0#(lf)    and e.''Current Row Indicator''=\u0027Y\u0027#(lf)    and e2.''Current Row Indicator'' = \u0027Y\u0027#(lf)    and f.''Current Row Indicator'' = \u0027Y\u0027#(lf)    and d.''Organization Department Code'' in (\u00270115\u0027,\u00270165\u0027,\u00270190\u0027,\u00270240\u0027,\u00270283\u0027,\u00270291\u0027,\u00270361\u0027,\u00270365\u0027,\u00270383\u0027,\u00270384\u0027,\u00270410\u0027,\u00270435\u0027,\u00270475\u0027,\u00270496\u0027,\u00270525\u0027,\u00270529\u0027,\u00270810\u0027)#(lf)    and (c.''Job Type Code'' in (\u0027002000\u0027, \u0027002003\u0027, \u0027002008\u0027, \u0027002010\u0027, \u0027002011\u0027, \u0027002012\u0027, \u0027002016\u0027, \u0027002022\u0027, \u0027002024\u0027, \u0027002025\u0027, \u0027002026\u0027, \u0027002027\u0027, \u0027002030\u0027, \u0027002031\u0027, \u0027002032\u0027, \u0027003100\u0027, \u0027003500\u0027)#(lf)     or  c.''Department Identifier'' in (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027))  #(lf)    and b.''Distribution Performance Reporting Year Number'' in (2022,2023,2024)  #(lf)       #(lf)   #(lf)  group by a.''Person Dimension Surrogate Key'',#(lf)           e.''Source System Key Text'',#(lf)           e2.''Source System Key Text'',#(lf)           e.''First Name''||\u0027 \u0027||e.''Last Name'',#(lf)           e2.''First Name''||\u0027 \u0027||e2.''Last Name'',#(lf)           a.''Referral Date'', #(lf)           c.''Source System Key Text'',#(lf)           c.''Last Name''||\u0027, \u0027||c.''First Name'', #(lf)           f.''Membership Type Code'',#(lf)           f.''Classification Contractual Relationship Code'', #(lf)           f.''Membership Type Description'' #(lf) having sum(a.''Occurs'') \u003e 0', null, [EnableFolding=true]),    #'Replaced Value' = Table.ReplaceValue(Source,'Unknown','',Replacer.ReplaceText,{'REFERRER_CIFID'}),    #'Replaced Value1' = Table.ReplaceValue(#'Replaced Value','Unknown Unknown','',Replacer.ReplaceText,{'REFERRER_NAME'}),    #'Duplicated Column' = Table.DuplicateColumn(#'Replaced Value1', 'CIF_ID', 'CIF_ID - Copy'),    #'Renamed Columns2' = Table.RenameColumns(#'Duplicated Column',{{'CIF_ID - Copy', 'CIF_ID2'}}),    #'Changed Type' = Table.TransformColumnTypes(#'Renamed Columns2',{{'CIF_ID2', Int64.Type}}),    #'Duplicated Column1' = Table.DuplicateColumn(#'Changed Type', 'REFERRER_CIFID', 'REFERRER_CIFID - Copy'),    #'Renamed Columns3' = Table.RenameColumns(#'Duplicated Column1',{{'REFERRER_CIFID - Copy', 'REFERRER_CIFID2'}}),    #'Changed Type1' = Table.TransformColumnTypes(#'Renamed Columns3',{{'REFERRER_CIFID2', Int64.Type}}),    #'Merged Queries' = Table.NestedJoin(#'Changed Type1', {'CIF_ID2'}, ClientServiceGroup, {'Customer Identifier'}, 'ClientServiceGroup', JoinKind.LeftOuter),    #'Expanded ClientServiceGroup' = Table.ExpandTableColumn(#'Merged Queries', 'ClientServiceGroup', {'SERVICEGROUP'}, {'SERVICEGROUP'}),    #'Renamed Columns' = Table.RenameColumns(#'Expanded ClientServiceGroup',{{'SERVICEGROUP', 'Referral Client Service Group'}}),    #'Merged Queries1' = Table.NestedJoin(#'Renamed Columns', {'REFERRER_CIFID2'}, ClientServiceGroup, {'Customer Identifier'}, 'ClientServiceGroup', JoinKind.LeftOuter),    #'Expanded ClientServiceGroup1' = Table.ExpandTableColumn(#'Merged Queries1', 'ClientServiceGroup', {'SERVICEGROUP'}, {'SERVICEGROUP'}),    #'Renamed Columns1' = Table.RenameColumns(#'Expanded ClientServiceGroup1',{{'SERVICEGROUP', 'Referrer Client Service Group'}}),    #'Removed Columns' = Table.RemoveColumns(#'Renamed Columns1',{'CIF_ID2', 'REFERRER_CIFID2'})in    #'Removed Columns'"}]},{"name":"RECD_PEND_COMPL_FA","isHidden":false,"storageMode":"Import","columns":[{"name":"CUST_ID_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"CUST_LGAL_FMT_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MBR_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"BEN_CTRC_NBR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"BEN_CTRC_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CTRC_STS_DTL_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CTRC_STS_DTL_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LOBCode","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EstimatedSalesCreditAmt","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"ActualSalesCreditAmt","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"TransReceiveDt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TransDesc","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFOCode","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFOName","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CorporateEmployeeID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TransYR","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[{"name":"YTD Written Contracts FA","expression":"var _total=  CALCULATE    (SUMX(DISTINCT(\u0027RECD_PEND_COMPL_FA\u0027[BEN_CTRC_NBR]), 1),    Year(\u0027RECD_PEND_COMPL_FA\u0027[TransReceiveDt]) = YEAR(TODAY()),    \u0027DTRB_PERF_DATES\u0027[Today or Before] = 'Y')ReturnIF(ISBLANK(_total),0,_total)  ","isHidden":false},{"name":"YTD Written Contracts FA PH Comp","expression":"var _YRSelected = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR])var _total=  CALCULATE    (SUMX(DISTINCT(\u0027RECD_PEND_COMPL_FA\u0027[BEN_CTRC_NBR]), 1),    Year(\u0027RECD_PEND_COMPL_FA\u0027[TransReceiveDt]) = SELECTEDVALUE(\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR]),    \u0027DTRB_PERF_DATES\u0027[Today or Before] = 'Y')ReturnIF(ISBLANK(_total),0,_total)","isHidden":false}],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////pnfiles002b//fp_cifs_7834_sas$//MarketAnalysis//FieldReporting//SMIS//RECD_PEND_COMPL_FA.csv'),[Delimiter=',', Columns=17, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'CUST_ID_NBR', Int64.Type}, {'CUST_LGAL_FMT_NM', type text}, {'MBR_TYP_CDE', type text}, {'BEN_CTRC_NBR', type text}, {'BEN_CTRC_TYP_CDE', type text}, {'CTRC_STS_DTL_CDE', type text}, {'CTRC_STS_DTL_DSCR', type text}, {'Product', type text}, {'LOBCode', type text}, {'EstimatedSalesCreditAmt', Int64.Type}, {'ActualSalesCreditAmt', Int64.Type}, {'TransReceiveDt', type date}, {'TransDesc', type text}, {'RFOCode', type text}, {'RFOName', type text}, {'CorporateEmployeeID', type text}, {'TransYR', Int64.Type}}),    #'Replaced Value' = Table.ReplaceValue(#'Changed Type','CAREFORWARD','LTC',Replacer.ReplaceText,{'LOBCode'})in    #'Replaced Value'"}]},{"name":"_Measures","isHidden":false,"storageMode":"Import","columns":[],"measures":[{"name":"Message_txtCC","expression":"IF(DISTINCTCOUNT(\u0027Client_HHLD\u0027[CUST_GRP_ID_NBR])\u003e0,'',' ')","isHidden":false},{"name":"Message_txtCC_Rptdt","expression":" --today()var _enddate = date(2024,02,01)return IF(today() \u003c= _enddate,   '** FY LHGR, New Money and Conference Qualification information above is as of 12/31/23. Please refer to the Conference \u0026 Recognition report for 2024 information.  Changes to this page will be coming in the future.', ' '   --'**These Conference Credit Report totals has been paused until mid-February from being refreshed', ' '   ) ","isHidden":false},{"name":"ShowHideCC","expression":"--SUM(\u0027ConferenceCredits\u0027[Conference Credit Amount]) \u003e 0,  IF(SUM(\u0027CONFQUAL\u0027[CC]) \u003e 0,'#1C00ff00','White')","isHidden":false},{"name":"ShowHideCC_Rptdt","expression":"IF(today() \u003e= 02/21/2022, '#1C00ff00','White')","isHidden":false},{"name":"Dummy Bar Char Column","expression":"0","isHidden":false},{"name":"Dummy Bar Char Column2","expression":"0","isHidden":false},{"name":"Dummy Bar Char Column3","expression":"0","isHidden":false},{"name":"Dummy Bar Char Column4","expression":"0","isHidden":false},{"name":"TGR Switch Measure","expression":"SUMX (\u0027Axis Table\u0027,SWITCH ([Id],1, [YTD Grid Revenue],2, [TGR YTD Goal],3, [PYTD Grid Revenue],4, [Prior YR Grid Total]))","isHidden":false},{"name":"FYLH Switch Measure","expression":"SUMX (\u0027Axis Table\u0027,SWITCH ([Id],1, [YTD 1st YR Grid Revenue],2, [FYLHGR YTD Goal],3, [PYTD 1st YR Grid Revenue],4, [Prior YR 1st YR Grid Total]))","isHidden":false},{"name":"New Client Switch Measure","expression":"SUMX (\u0027Axis Table\u0027,SWITCH ([Id],1, [YTD New Clients],2, [NFC YTD Goal],3, [PYTD New Clients],4, [PY New Clients]))","isHidden":false},{"name":"Appointments Switch Measure EDW","expression":"SUMX (\u0027Axis Table\u0027,SWITCH ([Id],1, \u0027Vital Stats DB Appointment Detail_EDW\u0027[YTD Appts EDW],2, [Appt YTD Goal],3, \u0027Vital Stats DB Appointment Detail_EDW\u0027[PYTD Appts EDW],4, \u0027Vital Stats DB Appointment Detail_EDW\u0027[Prior Appt Total EDW]))","isHidden":false},{"name":"Prospect Connect Switch Measure","expression":"SUMX (\u0027Axis Table\u0027,SWITCH ([Id],1, \u0027Vital Stats DB Appointment Detail\u0027[YTD Prospect Connect],2, \u0027FldGoals\u0027[Prsp Connect YTD Goal],3, \u0027Vital Stats DB Appointment Detail\u0027[PYTD Prospect Connects],4, \u0027Vital Stats DB Appointment Detail\u0027[Prior YR Prospect Connects Totals]))","isHidden":false},{"name":"Referrals Switch Measure","expression":"SUMX (\u0027Axis Table\u0027,SWITCH ([Id],1, \u0027Referrals\u0027[YTD Referrals],2, \u0027FldGoals\u0027[Referrals YTD Goal],3, \u0027Referrals\u0027[PYTD Referrals],4, \u0027Referrals\u0027[Prior YR Referrals Total]))","isHidden":false},{"name":"Legend ICON","expression":"SWITCH(SELECTEDVALUE(\u0027Axis Table\u0027[Axis]),      'YTD', UNICHAR(128308), --'🟡 '     'Y', UNICHAR(128994), --'🟢'     'X', UNICHAR(128993)  --'🟡')","isHidden":false},{"name":"ICON Test","expression":"  var _YTD = FORMAT('YTD','[[#2E66FF]] \u0027\u0027') -- var _bullet = FORMAT(UNICHAR(8226),'[[#2E66FF]] \u0027\u0027')return_YTD","isHidden":false},{"name":"blank","expression":"' '","isHidden":false},{"name":"Selling Members Text","expression":"'\u003cb\u003e Selling Members \u003c/b\u003e' \u0026 ' - Total Number of team members in a selling role.'","isHidden":false},{"name":"Blinking Text","expression":"'\u003cblink\u003e' \u0026 'ALERT !' \u0026 '\u003c/blink\u003e'/*'\u003c!DOCTYPE\u003e\u003chtml\u003e    \u003chead\u003e        \u003ctitle\u003e blinking effect in text using HTML\u003c/title\u003e        \u003clink rel=\u0027stylesheet\u0027 href=\u0027cssstyle.css\u0027 /\u003e    \u003c/head\u003e    \u003cbody\u003e             \u003cblink\u003e ALERT ! \u003c/blink\u003e  \\t\\t    \u003c/body\u003e\u003c/html\u003eCode language: HTML, XML (xml)body {color: green;}blink {color: red;  font-size: 30px}' */","isHidden":false},{"name":"Blink","expression":"VAR Flag = 1VAR __color = 'Red'VAR __lineColor = 'Black'VAR __lineThickness = 1VAR __radius = 9VAR __opacity = 1VAR __rand = RAND()VAR __header = /* 'data\u0026colon;image/svg+xml;utf8,' \u0026 */              '\u003csvg                 xmlns:dc=\u0027http://purl.org/dc/elements/1.1/\u0027                xmlns:cc=\u0027http://creativecommons.org/ns#\u0027                xmlns:svg=\u0027http://www.w3.org/2000/svg\u0027                xmlns=\u0027http://www.w3.org/2000/svg\u0027                width=\u0027100%\u0027 height=\u0027100%\u0027\u003e'VAR __footer = '\u003c/svg\u003e'--VAR _text = 'ALERT !'VAR __shapeTextCircle = '\u003ccircle cx=\u002710\u0027 cy=\u002720\u0027 r=\u0027' \u0026 __radius \u0026 '\u0027 fill=\u0027' \u0026 __color \u0026 '\u0027 fill-opacity=\u0027' \u0026 __opacity \u0026 '\u0027 stroke=\u0027' \u0026 __lineColor \u0026 '\u0027 stroke-width=\u0027' \u0026 __lineThickness \u0026 '\u0027\u003e ' \u0026 '\u003canimate attributeName=\u0027opacity\u0027 from=\u00271\u0027 to=\u00270\u0027 dur=\u00271s\u0027 begin=\u00270s\u0027 repeatCount=\u0027indefinite\u0027/\u003e\u003c/circle\u003e'  RETURN IF(Flag,__header \u0026 __shapeTextCircle \u0026 __footer,'')","isHidden":false},{"name":"Appointments Switch Measure","expression":"SUMX (\u0027Axis Table\u0027,SWITCH ([Id],1, \u0027Vital Stats DB Appointment Detail\u0027[YTD Appts],2, [Appt YTD Goal],3, \u0027Vital Stats DB Appointment Detail\u0027[PYTD Appts],4, \u0027Vital Stats DB Appointment Detail\u0027[Prior Appt Total]))","isHidden":false},{"name":"ShowHide PH Comp Button Title","expression":"  IF(\u0027login Table\u0027[Login_DisplayInd]=0,' ', 'Practice Health Comparison')","isHidden":false}],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i44FAA==', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Column1 = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Column1', type text}}),    #'Removed Columns' = Table.RemoveColumns(#'Changed Type',{'Column1'})in    #'Removed Columns'"}]},{"name":"ClientServiceGroup","isHidden":false,"storageMode":"Import","columns":[{"name":"Customer Identifier","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"SERVICEGROUP","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'WITH CTE AS (  #(lf)   select distinct A.''Customer Identifier'',#(lf)                   A.''Service Group Code'' as servicegroup,#(lf)                   A.''Source System Sequence Number'',#(lf)                   ROW_NUMBER() OVER (PARTITION BY a.''Customer Identifier'' ORDER BY A.''Source System Sequence Number'' desc) AS rn#(lf)              #(lf)     from ''ENTERPRISE_INTERACTION_CUST''.''PRESENTATION_01''.''Individual Account Confidential'' a  #(lf)    where  A.''Service Group Code'' in (\u0027A\u0027,\u0027B\u0027,\u0027C\u0027,\u0027D\u0027,\u0027E\u0027,\u0027Natural Market\u0027,\u0027Prospect - Green\u0027,\u0027Prospect - Yellow\u0027,\u0027Prospect - Red\u0027,\u0027Other\u0027)    #(lf)group by A.''Customer Identifier'', A.''Service Group Code'', A.''Source System Sequence Number'' #(lf)    order by A.''Customer Identifier'', A.''Source System Sequence Number'', A.''Service Group Code'')#(lf)#(lf)#(lf)SELECT ''Customer Identifier'',#(lf)       servicegroup#(lf)FROM cte#(lf)WHERE rn = 1', null, [EnableFolding=true]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Customer Identifier', Int64.Type}})in    #'Changed Type'"}]},{"name":"ClientServiceGroupSort","isHidden":false,"storageMode":"Import","columns":[{"name":"ServiceGroup","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Order","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i45WclTSUTJUitWJVnICsozALGcgyxjMcgGyTMAsVyDLFMzySywpLUrMUfBNLMpOLQEKm4GFA4ryiwtSk0sUdBXci1JT84AS5ugSkak5OfnlQBkLdJmg1BSgsCVY2L8kI7UI5CwDpdhYAA==', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [ServiceGroup = _t, Order = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'ServiceGroup', type text}, {'Order', Int64.Type}})in    #'Changed Type'"}]},{"name":"FutureAppts_SortOrder","isHidden":false,"storageMode":"Import","columns":[{"name":"Future Appointment Week","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Order","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i45W8kutKFEwV0hJrCxW0lEyVIrVgYpZ6BqawISNEMKGprpGhjBxY4S4kZGukQVM3EQpNhYA', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Description = _t, Order = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Description', type text}, {'Order', Int64.Type}}),    #'Renamed Columns' = Table.RenameColumns(#'Changed Type',{{'Description', 'Future Appointment Week'}})in    #'Renamed Columns'"}]},{"name":"Axis Table","isHidden":false,"storageMode":"Import","columns":[{"name":"Axis","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ID","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i45WigxxUdJRMlSK1YlWcszLK03MUXDPT8wBihmBxQIgCowhnKLM/CKFyNTEIoWQ/BKgUqCMiVJsLAA=', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Axis = _t, ID = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Axis', type text}, {'ID', Int64.Type}})in    #'Changed Type'"}]},{"name":"FYLH Axis Table","isHidden":false,"storageMode":"Import","columns":[{"name":"Axis","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ID","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i45WigxxUdJRMlSK1YlWcszLK03MUXDPT8wBihmBxQIgCowhnKLM/CKFyNTEIoWQ/BKwKhOl2FgA', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Axis = _t, ID = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Axis', type text}, {'ID', Int64.Type}})in    #'Changed Type'"}]},{"name":"FldGoals2024","isHidden":false,"storageMode":"Import","columns":[{"name":"CORP_EMP_ID_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"NAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_NAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TITLE_CODE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RPT_TO_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Zone_Leader_Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DIVISION_CODE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DIVISION_NAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TEAM_NAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"USERNAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"USERTAG","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Referrals","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Prospect_Connects_Held","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Appointments","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"NewFinancialCustomers","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"AS_OF_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Year","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"NewMoney","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"GridRevenue","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"FYLHGRID","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'select distinct  a.''Employee Identifier'' as CORP_EMP_ID_CDE,#(lf)        a.''Employee Name'' as NAME,#(lf)        a.''Organization Department Code'' as RFO,#(lf)        a.''Organization Department Description'' as RFO_NAME,#(lf)        a.''Job Type Code'' as JOB_TITLE_CODE,#(lf)        b.''Report to ID'' as RPT_TO_ID,#(lf)        c.''Employee Name'' as ''Zone_Leader_Name'',#(lf)        substring(a.''Organization Division Code'',4,2) as Division_Code, #(lf)        CASE WHEN A.''Organization Division Code'' = \u0027RFO01\u0027 THEN \u0027Established\u0027#(lf)             WHEN A.''Organization Division Code'' = \u0027RFO02\u0027 THEN \u0027Growth\u0027#(lf)             WHEN A.''Organization Division Code'' = \u0027RFO03\u0027 THEN \u0027Invest\u0027#(lf)               ELSE \u0027Unknown\u0027#(lf)        END as DIVISION_NAME,#(lf)        zzz.''Team Name'' as Team_name,#(lf)        case when a.''Employee Name'' = \u0027Johnson,Christopher\u0027 then a.''Nick Name'' ||\u0027 \u0027||a.''Last Name'' #(lf)             when a.''Employee Name'' = \u0027Parker,David\u0027 and a.''Employee Identifier'' = \u0027TS83655\u0027 then a.''First Name''||\u0027 C. \u0027||a.''Last Name''#(lf)             when a.''Employee Identifier'' = \u0027TS54638\u0027 then a.''Nick Name''||\u0027 \u0027||a.''Last Name''#(lf)             when a.''Nick Name'' in (\u0027 \u0027) then a.''First Name''||\u0027 \u0027||a.''Last Name''#(lf)               else a.''Nick Name''||\u0027 \u0027||a.''Last Name''#(lf)        end as EMP_NM, #(lf)        a.''Employee Electronic Mail Address Text'' as userName,#(lf)        b.''Financial Professional Tenure Group'' as UserTag,#(lf)        xx.''Referrals'',#(lf)        xx.''Prospect Connects'' as ''Prospect_Connects_Held'',#(lf)        xx.''Appointments'',#(lf)        xx.''New Clients'' as ''NewFinancialCustomers'',#(lf)        Current_Date  as As_of_Date,#(lf)        xx.''Year'',#(lf)        0 as ''NewMoney'',#(lf)        xx.''Total Grid Revenue'' as ''GridRevenue'', #(lf)        xx.''First Year Life and Health Grid Revenue'' as ''FYLHGRID''   #(lf)   #(lf)   from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' a inner join#(lf)        ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' as b#(lf)     on (a.''Employee Identifier''=b.''Source System Key Text'' and b.''Current Row Indicator'' = \u0027Y\u0027)  left join #(lf)        #(lf)        ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' c #(lf)     on (b.''Report to ID''= c.''Employee Identifier'' AND c.''Current Row Indicator'' = \u0027Y\u0027) left join#(lf) #(lf)        (select distinct aa.''Worker Id'',#(lf)                         aa.''Year'',#(lf)                         aa.''Created Date'',#(lf)                         aa1.''Total Grid Revenue'', #(lf)                         aa2.''Referrals'',#(lf)                         aa3.''Prospect Connects'',#(lf)                         aa4.''New Clients'',#(lf)                         aa5.''First Year Life and Health Grid Revenue'',#(lf)                         aa6.''Appointments''   #(lf)      #(lf)           from ''SALESFORCE_B2C_ODS''.''PRESENTATION_01''.''Salesforce Dataready Advisorgoals Confidential'' aa inner join#(lf)                (select Distinct a1.''Worker Id'', #(lf)                                 a1.''Year'',#(lf)                                 a1.''Last Modified Date'',#(lf)                                 a1.''Amount'' as ''Total Grid Revenue'',#(lf)                                 ROW_NUMBER() OVER (PARTITION BY a1.''Worker Id'', a1.''Year'', a1.''TYPE Descriptions'' ORDER BY a1.''Last Modified Date'' desc) AS rn#(lf)                   from ''SALESFORCE_B2C_ODS''.''PRESENTATION_01''.''Salesforce Dataready Advisorgoals Confidential'' a1#(lf)                  where a1.''TYPE Descriptions'' = \u0027Total Grid Revenue\u0027#(lf)                 group by a1.''Worker Id'', a1.''Year'', a1.''TYPE Descriptions'', a1.''Amount'', a1.''Last Modified Date'' ) aa1#(lf)              on aa.''Worker Id'' = aa1.''Worker Id'' and aa.''Year''=aa1.''Year'' and aa1.rn=1  inner join #(lf)    #(lf)               (select Distinct a2.''Worker Id'', #(lf)                                a2.''Year'',#(lf)                                a2.''Last Modified Date'',#(lf)                                a2.''Amount'' as ''Referrals'',#(lf)                                ROW_NUMBER() OVER (PARTITION BY a2.''Worker Id'', a2.''Year'', a2.''TYPE Descriptions'' ORDER BY a2.''Last Modified Date'' desc) AS rn#(lf)                  from ''SALESFORCE_B2C_ODS''.''PRESENTATION_01''.''Salesforce Dataready Advisorgoals Confidential'' a2#(lf)                 where a2.''TYPE Descriptions'' = \u0027Referrals\u0027#(lf)                group by a2.''Worker Id'', a2.''Year'', a2.''TYPE Descriptions'', a2.''Amount'', a2.''Last Modified Date'' )aa2#(lf)             on aa.''Worker Id'' = aa2.''Worker Id'' and aa.''Year''=aa2.''Year'' and aa2.rn=1 inner join#(lf)      #(lf)               (select Distinct a3.''Worker Id'', #(lf)                                a3.''Year'',#(lf)                                a3.''Last Modified Date'',#(lf)                                a3.''Amount'' as ''Prospect Connects'',#(lf)                                ROW_NUMBER() OVER (PARTITION BY a3.''Worker Id'', a3.''Year'', a3.''TYPE Descriptions'' ORDER BY a3.''Last Modified Date'' desc) AS rn#(lf)                  from ''SALESFORCE_B2C_ODS''.''PRESENTATION_01''.''Salesforce Dataready Advisorgoals Confidential'' a3#(lf)                 where a3.''TYPE Descriptions'' = \u0027Prospect Connects\u0027#(lf)                group by a3.''Worker Id'', a3.''Year'', a3.''TYPE Descriptions'', a3.''Amount'', a3.''Last Modified Date'') aa3#(lf)             on aa.''Worker Id'' = aa3.''Worker Id'' and aa.''Year''=aa3.''Year'' and aa3.rn=1  inner join#(lf)     #(lf)               (select Distinct a4.''Worker Id'', #(lf)                                a4.''Year'',#(lf)                        a4.''Last Modified Date'',#(lf)                        a4.''Amount'' as ''New Clients'',#(lf)                        ROW_NUMBER() OVER (PARTITION BY a4.''Worker Id'', a4.''Year'', a4.''TYPE Descriptions'' ORDER BY a4.''Last Modified Date'' desc) AS rn#(lf)          from ''SALESFORCE_B2C_ODS''.''PRESENTATION_01''.''Salesforce Dataready Advisorgoals Confidential'' a4#(lf)         where a4.''TYPE Descriptions'' = \u0027New Clients\u0027#(lf)         group by a4.''Worker Id'', a4.''Year'', a4.''TYPE Descriptions'', a4.''Amount'', a4.''Last Modified Date'') aa4#(lf)    on aa.''Worker Id'' = aa4.''Worker Id'' and aa.''Year''=aa4.''Year'' and aa4.rn=1  inner join#(lf)    #(lf)       (select Distinct a5.''Worker Id'', #(lf)                        a5.''Year'',#(lf)                        a5.''Last Modified Date'',#(lf)                        a5.''Amount'' as ''First Year Life and Health Grid Revenue'',#(lf)                        ROW_NUMBER() OVER (PARTITION BY a5.''Worker Id'', a5.''Year'', a5.''TYPE Descriptions'' ORDER BY a5.''Last Modified Date'' desc) AS rn#(lf)          from ''SALESFORCE_B2C_ODS''.''PRESENTATION_01''.''Salesforce Dataready Advisorgoals Confidential'' a5#(lf)         where a5.''TYPE Descriptions'' = \u0027First Year Life and Health Grid Revenue\u0027#(lf)         group by a5.''Worker Id'', a5.''Year'', a5.''TYPE Descriptions'', a5.''Amount'', a5.''Last Modified Date'') aa5#(lf)    on aa.''Worker Id'' = aa5.''Worker Id'' and aa.''Year''=aa5.''Year'' and aa5.rn=1 inner join#(lf)#(lf)       (select Distinct a6.''Worker Id'', #(lf)                        a6.''Year'',#(lf)                        a6.''Last Modified Date'',#(lf)                        a6.''Amount'' as ''Appointments'',#(lf)                        ROW_NUMBER() OVER (PARTITION BY a6.''Worker Id'', a6.''Year'', a6.''TYPE Descriptions'' ORDER BY a6.''Last Modified Date'' desc) AS rn#(lf)          from ''SALESFORCE_B2C_ODS''.''PRESENTATION_01''.''Salesforce Dataready Advisorgoals Confidential'' a6#(lf)         where a6.''TYPE Descriptions'' = \u0027Appointments\u0027#(lf)         group by a6.''Worker Id'', a6.''Year'', a6.''TYPE Descriptions'', a6.''Amount'', a6.''Last Modified Date'') aa6#(lf)    on aa.''Worker Id'' = aa6.''Worker Id'' and aa.''Year''=aa6.''Year'' and aa6.rn=1#(lf)  where aa.''Year'' = 2024#(lf)  group by aa.''Worker Id'', aa.''Year'', aa.''Created Date'', aa1.''Total Grid Revenue'', aa2.''Referrals'', aa3.''Prospect Connects'', aa4.''New Clients'', #(lf)           aa5.''First Year Life and Health Grid Revenue'',  aa6.''Appointments'' ) xx#(lf)#(lf) on a.''Employee Identifier'' = xx.''Worker Id''      left join#(lf) #(lf)        (select a1.''Employee Identifier'',#(lf)                b1.''Team Identifier'',#(lf)                b1.''Team Name'',#(lf)                A1.''Effective Date''#(lf)           from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Employee Team Organization Relationship Current Dimension''  a1 inner join#(lf)                ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Team Organization Current Dimension'' b1#(lf)             on (a1.''Team Identifier Surrogate Key'' = b1.''Team Identifier Surrogate Key'')  inner join#(lf)                ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' c1#(lf)             on (a1.''Employee Identifier'' = c1.''Employee Identifier'')   #(lf)    #(lf)          where b1.''Effective Status Code'' = \u0027A\u0027#(lf)            and c1.''Employee Status Type Code'' = \u0027A\u0027#(lf)            and c1.''Current Row Indicator'' = \u0027Y\u0027#(lf)            and a1.''Team Member Action Code'' \u003c\u003e \u0027DROP\u0027#(lf)            and b1.''Team Purpose Code'' NOT in (\u0027COAC\u0027,\u0027ENSB\u0027) #(lf)            and a1.''Effective Date'' = (select MAX(aa.''Effective Date'')#(lf)                                         from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Employee Team Organization Relationship Current Dimension''  aa inner join#(lf)                                              ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Team Organization Current Dimension'' bb#(lf)                                           on (aa.''Team Identifier Surrogate Key'' = bb.''Team Identifier Surrogate Key'' and a1.''Employee Identifier''= aa.''Employee Identifier'') inner join#(lf)                                              ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' cc#(lf)                                           on (aa.''Employee Identifier''= cc.''Employee Identifier'')#(lf)#(tab)                                where bb.''Effective Status Code'' = \u0027A\u0027#(lf)                                          and cc.''Employee Status Type Code'' = \u0027A\u0027  #(lf)                                          and cc.''Current Row Indicator'' = \u0027Y\u0027#(lf)                                          and aa.''Team Member Action Code'' \u003c\u003e \u0027DROP\u0027#(lf)                                          and bb.''Team Purpose Code'' NOT in (\u0027COAC\u0027,\u0027ENSB\u0027)) #(lf)         order by a1.''Employee Identifier'') as zzz#(lf)  #(lf)     on a.''Employee Identifier'' = zzz.''Employee Identifier'' #(lf) #(lf)#(lf)where a.''Employee Status Type Code'' IN (\u0027A\u0027)     #(lf)  and a.''Termination Date'' is NULL    #(lf)  and b.''Effective End Date'' = \u00279999-12-31\u0027 #(lf)  and b.''Current Row Indicator'' = \u0027Y\u0027 #(lf)  and a.''Current Row Indicator'' = \u0027Y\u0027 #(lf)  and (b.''Job Family Code'' LIKE \u0027FLD%\u0027 OR#(lf)        b.''Job Family Code'' =\u0027SALES\u0027 OR#(lf)        b.''TF Job Class Code'' =\u0027FAC\u0027)#(lf)   and a.''Termination Date'' is NULL #(lf)   and (a.''Job Type Code'' in (\u0027002003\u0027,\u0027002010\u0027,\u0027002011\u0027,\u0027002012\u0027,\u0027002016\u0027,\u0027002017\u0027,#(lf)                              \u0027002000\u0027,\u0027002022\u0027,\u0027002024\u0027,\u0027002025\u0027,\u0027002026\u0027,\u0027002027\u0027,#(lf)                              \u0027002030\u0027,\u0027002031\u0027,\u0027002032\u0027,\u0027003100\u0027,\u0027003500\u0027,\u0027003602\u0027,#(lf)                              \u0027003604\u0027,\u0027003605\u0027,\u0027003606\u0027,\u0027003607\u0027,\u0027003608\u0027) or #(lf)       a.''Organization Department Code'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027)) #(lf)   and b.''Department Identifier'' not in (\u00272410\u0027,\u00273005\u0027,\u00277151\u0027,\u00277152\u0027,\u00279150\u0027,\u00279134\u0027,#(lf)                                         \u0027NA\u0027,\u00274100\u0027,\u00276053\u0027,\u00276100\u0027,\u00278900\u0027)', null, [EnableFolding=true]),    #'Replaced Value' = Table.ReplaceValue(Source,null,0,Replacer.ReplaceValue,{'Referrals', 'Prospect_Connects_Held', 'Appointments', 'NewFinancialCustomers'}),    #'Replaced Value1' = Table.ReplaceValue(#'Replaced Value',null,0,Replacer.ReplaceValue,{'NewMoney', 'GridRevenue', 'FYLHGRID'}),    #'Replaced Value2' = Table.ReplaceValue(#'Replaced Value1',null,'2024',Replacer.ReplaceValue,{'Year'}),    #'Changed Type' = Table.TransformColumnTypes(#'Replaced Value2',{{'Year', Int64.Type}})in    #'Changed Type'"}]},{"name":"Advisor Job Codes","isHidden":false,"storageMode":"Import","columns":[{"name":"Job Code","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Job Code Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Column #","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('fZPNbsIwEIRfxcqZgx0ItEcEokKCClHUC+JgJQu1GmxkO/T1u/m3DeG42S+zs2P7eIwoZZTSaBR9aFXcyLdIgew0GJGBtPiZRadRQzEst1z/gn2JTbBcCcgzshQaUqu03096mSXcIVc3CIiZQzyTYKwbsQGegSZCkoPmQgp5ccnE2WyneWpL28Pek8pbgD9zkNDpIzg3RqWCW/DJNyw7Zsslv8AV55KFkqbILQ8ssNJxO5OoMzkAv9ZrxT3EKlF1BmOEkjzvXXiyzh8xlo3UADNrw/qzP48hOVgZ0ie3wWAnp5aN65u1EpJLTCYn8+wuTIiMsXSz61tVFl2L7OGGhtAOzr4HZBnIF6SFFlaAIQN6ZQhr3F2jHxiCph6EKWdFWt3Qcc+Uh9osQzabhd9891y32HrtUTF1JIIWc1tBL/YCbd2FChNvBwwuBJJHwCXGrDq5/nCdh9ox9evaw6W+Cc2LrV9kzZ3+AQ==', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [#'Job Code' = _t, #'Job Code Description' = _t, #'Column #' = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Job Code', Int64.Type}, {'Job Code Description', type text}, {'Column #', Int64.Type}})in    #'Changed Type'"}]},{"name":"Appt_Advisor_Attendees","isHidden":false,"storageMode":"Import","columns":[{"name":"Appointment Dimension Surrogate Key","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Attendees","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Attendee Filter","expression":"var _selected = SELECTEDVALUE(\u0027Producer_Snowflake\u0027[EMP_NM])ReturnINT(CONTAINSSTRING(SELECTEDVALUE(\u0027Appt_Advisor_Attendees\u0027[Attendees]),_selected))","isHidden":false}],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'WITH Appts as (#(lf)select distinct  appt_fct.''Appointment Dimension Surrogate Key'',#(lf)                 org_dim.''First Name''||\u0027 \u0027||org_dim.''Last Name'' as ''Advisor Name'',#(lf)                 case when appt_dim.''Field User Count'' \u003c\u003e 0 and #(lf)                           appt_dim.''Appointment Type Code'' in (\u0027Connect\u0027,\u0027Gather Data\u0027,\u0027Take Action\u0027,\u0027Strategy Call/Meeting\u0027,\u0027Review\u0027,\u0027Service\u0027,\u0027Discover\u0027,\u0027Deliver\u0027) then 1#(lf)                   else 0#(lf)                 end as ''JFW_IND''#(lf)#(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Appointment Combine Fact'' appt_fct left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Appointment Dimension'' appt_dim#(lf)    on (appt_fct.''Appointment Dimension Surrogate Key'' = appt_dim.''Appointment Dimension Surrogate Key'') left join      #(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' org_dim#(lf)    on ((appt_fct.''Appointment Organization Dimension Surrogate Key'' = org_dim.''Organization Dimension Surrogate Key'') and#(lf)       ((org_dim.''Effective Begin Date'' \u003c= appt_dim.''Appointment Date'') and (appt_dim.''Appointment Date'' \u003c= org_dim.''Effective End Date''))) left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Date Dimension'' date_dim#(lf)    on (appt_dim.''Appointment Date'' = date_dim.''Calendar Date Date'')#(lf)       #(lf)       #(lf)where appt_dim.''Current Row Indicator'' = \u0027Y\u0027#(lf)  and appt_dim.''Appointment Create Date Over 14 Days'' = \u0027N\u0027#(lf)  and appt_fct.''Person Dimension Surrogate Key'' \u003c\u003e 0#(lf)  and appt_fct.''Appointment Status Name'' \u003c\u003e \u0027Declined\u0027#(lf)  and appt_dim.''Appointment Type Code'' \u003c\u003e \u0027UNK\u0027#(lf)  and appt_dim.''Event Result Description'' not in (\u0027No Show\u0027,\u0027Cancelled\u0027)#(lf)  and date_dim.''Calendar Year Name'' in (\u00272020\u0027,\u00272021\u0027,\u00272022\u0027,\u00272023\u0027,\u00272024\u0027)#(lf)  --and appt_fct.''Appointment Dimension Surrogate Key'' = 16079767007#(lf) -- and appt_fct.''Appointment Dimension Surrogate Key'' = 13360242007#(lf)  --and appt_fct.''Appointment Dimension Surrogate Key'' = 22072844007#(lf)#(lf)group by appt_fct.''Appointment Dimension Surrogate Key'', #(lf)         org_dim.''First Name''||\u0027 \u0027||org_dim.''Last Name'',#(lf)         ''JFW_IND''#(lf) #(lf))#(lf)(select ''Appointment Dimension Surrogate Key'',#(lf)         listagg(''Advisor Name'', \u0027, \u0027 ) WITHIN GROUP(ORDER BY ''Advisor Name'') as ''Attendees'' #(lf)   from Appts#(lf)  where JFW_IND = 1#(lf)   group by ''Appointment Dimension Surrogate Key'')', null, [EnableFolding=true])in    Source"}]},{"name":"Vital Stats DB Appointment Detail","isHidden":false,"storageMode":"Import","columns":[{"name":"THRIVENTID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"CLIENTNAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Appointment Dimension Surrogate Key","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Person Dimension Surrogate Key","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"appt_occurs","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Person Occurs","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Membership Type Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JFW_IND","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Appointment Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Appointment Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Performance Year Name","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Conference Qualification Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Life Segment Value Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Conference Qualification","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Attendees","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Client Service Group","dataType":"String","isHidden":false,"expression":"RELATED(ClientServiceGroup[SERVICEGROUP])","columnType":"Calculated"},{"name":"Month","dataType":"String","isHidden":false,"expression":"month(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date])","columnType":"Calculated"},{"name":"PYTD Flag","dataType":"String","isHidden":false,"expression":"if(and(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c= DATE(YEAR(today())-1, MONTH(today()), DAY(today()-1)), \u0027Vital Stats DB Appointment Detail\u0027[Performance Year Name] = year(today())-1), 1, 0)--if(and(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c= DATE(2019, 12, 15), \u0027Vital Stats DB Appointment Detail\u0027[Performance Year Name] = 2019), TRUE, FALSE)","columnType":"Calculated"},{"name":"PYTD PC Flag","dataType":"String","isHidden":false,"expression":"if(and(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c= DATE(YEAR(today())-1, MONTH(today()), DAY(today()-1)), \u0027Vital Stats DB Appointment Detail\u0027[Performance Year Name] = YEAR(today())-1), 1, 0)--if(and(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c= DATE(2019, 12, 15), \u0027Vital Stats DB Appointment Detail\u0027[Performance Year Name] = 2019), True, False)","columnType":"Calculated"},{"name":"Reporting Year","dataType":"String","isHidden":false,"expression":"\u0027Vital Stats DB Appointment Detail\u0027[Performance Year Name]","columnType":"Calculated"},{"name":"YTD Flag","dataType":"String","isHidden":false,"expression":"if(and(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c= today()-1, \u0027Vital Stats DB Appointment Detail\u0027[Performance Year Name] = year(today())), True, False)--if(and(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c= DATE(2020, 12, 15), \u0027Vital Stats DB Appointment Detail\u0027[Performance Year Name] = 2020), True, False)","columnType":"Calculated"},{"name":"YTD PC Flag","dataType":"String","isHidden":false,"expression":"if(and(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c= today(), \u0027Vital Stats DB Appointment Detail\u0027[Performance Year Name] = YEAR(today())), 1, 0)","columnType":"Calculated"},{"name":"ADVISOR_NAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Household ID","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Appointment Count","expression":"distinctcount([Appointment Dimension Surrogate Key])+0","isHidden":false},{"name":"Client Count","expression":"distinctcount([ThriventId])+0","isHidden":false},{"name":"12 Month Appointments","expression":"  var _today_52 =LOOKUPVALUE(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], today()-364)RETURNCALCULATE(distinctcount(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key])+0, \u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003e _today_52, \u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c today())","isHidden":false},{"name":"12 Month Appointments PH Comp","expression":"  var min_date = DATE(SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]),MONTH(today()),DAY(today()))-364  var max_date = DATE(SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR]),MONTH(today()),DAY(today()))-1  var _total = CALCULATE(DISTINCTCOUNT(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key])+0,               DTRB_PERF_DATES[CAL_DAY_DT] \u003e= min_date, DTRB_PERF_DATES[CAL_DAY_DT] \u003c= max_date) RETURNIF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"13 wk Appointment Avg","expression":"  var _today_13 =LOOKUPVALUE(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], today()-91)RETURNCALCULATE((distinctcount(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key])/13)+0,\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003e _today_13, \u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c today())","isHidden":false},{"name":"13 wk Prospect Connect Avg","expression":"  var _today_13=LOOKUPVALUE(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], today()-91)RETURNCALCULATE((distinctcount(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key])/13)+0,\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003e _today_13, \u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c today(),\u0027Vital Stats DB Appointment Detail\u0027[Membership Type Description] \u003c\u003e  'Benefit',\u0027Vital Stats DB Appointment Detail\u0027[Appointment Type Code] = 'Connect')","isHidden":false},{"name":"4 wk Appointment Avg","expression":"  var _today_4 =LOOKUPVALUE(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], today()-28)RETURNCALCULATE((distinctcount(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key])/4)+0, \u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003e _today_4, \u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c today())","isHidden":false},{"name":"4 wk Prospect Connect Avg","expression":"  var _today_4=LOOKUPVALUE(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], today()-28)RETURNCALCULATE((distinctcount(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key])/4)+0,\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003e _today_4, \u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c today(),\u0027Vital Stats DB Appointment Detail\u0027[Membership Type Description] \u003c\u003e  'Benefit',\u0027Vital Stats DB Appointment Detail\u0027[Appointment Type Code] = 'Connect')","isHidden":false},{"name":"52 wk Appointment Avg","expression":"  var _today_52 =LOOKUPVALUE(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], today()-364)RETURNCALCULATE((distinctcount(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key])/52)+0, \u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003e _today_52, \u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c today())","isHidden":false},{"name":"52 wk Appointment Test","expression":"  var _today_52 =LOOKUPVALUE(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], today()-364)RETURN_today_52--CALCULATE((distinctcount(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key])/52)+0, --\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003e _today_52, \u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c today())","isHidden":false},{"name":"52 wk Prospect Connect Avg","expression":"  var _today_52=LOOKUPVALUE(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], today()-364)RETURNCALCULATE((distinctcount(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key])/52)+0,\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003e _today_52, \u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c today(),\u0027Vital Stats DB Appointment Detail\u0027[Membership Type Description] \u003c\u003e  'Benefit',\u0027Vital Stats DB Appointment Detail\u0027[Appointment Type Code] = 'Connect')","isHidden":false},{"name":"8 wk Prospect Connect Avg","expression":"  var _today_8=LOOKUPVALUE(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], today()-56)RETURNCALCULATE((distinctcount(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key])/8)+0,\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003e _today_8, \u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c today(),\u0027Vital Stats DB Appointment Detail\u0027[Membership Type Description] \u003c\u003e  'Benefit',\u0027Vital Stats DB Appointment Detail\u0027[Appointment Type Code] = 'Connect')","isHidden":false},{"name":"8 wk Appointment Avg","expression":"  var _today_8 =LOOKUPVALUE(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], today()-56)RETURNCALCULATE((distinctcount(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key])/8)+0, \u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003e _today_8, \u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c today())","isHidden":false},{"name":"Appts_to_Goal","expression":"CALCULATE(var wkday = [Todays_WKDAY]var goal_yr = [Appt YTD Goal]var ApptTotal = (sumx(DISTINCT(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key]),1))return ApptTotal/((goal_yr/261)*WKDAY),\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'CURRENT',\u0027DTRB_PERF_DATES\u0027[Today or Before]='Y' )","isHidden":false},{"name":"Last Week Appointment","expression":"--  var _today_7 =LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT], DTRB_PERF_DATES[CAL_DAY_DT], today()-7)--RETURN--CALCULATE((distinctcount(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key]))+0,\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003e _today_7, \u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c today())CALCULATE(DISTINCTCOUNT(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key])+0,\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_WK_TXT] = 'PREVIOUS',\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'CURRENT')","isHidden":false},{"name":"YTD Appts","expression":"var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT])Var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])var _total=  CALCULATE    (SUMX(DISTINCT(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key]), 1),    DTRB_PERF_DATES[CAL_DAY_DT] \u003e= min_date,    DTRB_PERF_DATES[CAL_DAY_DT] \u003c= max_date,    \u0027DTRB_PERF_DATES\u0027[Today or Before] = 'Y')ReturnIF(ISBLANK(_total),0,_total)   ","isHidden":false},{"name":"Last Week Prospect Connect","expression":"--  var _today_7 =LOOKUPVALUE(DTRB_PERF_DATES[CAL_DAY_DT], DTRB_PERF_DATES[CAL_DAY_DT], today()-7)--RETURN--CALCULATE((distinctcount(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key]))+0,\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003e _today_7, \u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c today())CALCULATE(DISTINCTCOUNT(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key])+0,\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_WK_TXT] = 'PREVIOUS',\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'CURRENT', \u0027Vital Stats DB Appointment Detail\u0027[Membership Type Description] \u003c\u003e  'Benefit',\u0027Vital Stats DB Appointment Detail\u0027[Appointment Type Code] = 'Connect')","isHidden":false},{"name":"Message_txt_Appts","expression":"IF(DISTINCTCOUNT(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key]) \u003e 0,    '',  'No Appointments for Current Year')","isHidden":false},{"name":"PC_to_Goal","expression":"CALCULATE(IF(ISBLANK(DIVIDE((SUMX(DISTINCT(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key]), 1)),([Prsp Connect YTD Goal]/261)*[Todays_WKDAY])),0,           DIVIDE((SUMX(DISTINCT(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key]), 1)),([Prsp Connect YTD Goal]/261)*[Todays_WKDAY])),     \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'CURRENT',     \u0027DTRB_PERF_DATES\u0027[Today or Before]='Y',      \u0027Vital Stats DB Appointment Detail\u0027[Membership Type Description] \u003c\u003e 'Benefit',      \u0027Vital Stats DB Appointment Detail\u0027[Appointment Type Code] = 'Connect' )  ","isHidden":false},{"name":"Prior Appt Total","expression":"var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT])var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT]) var _total =   CALCULATE    (SUMX(DISTINCT(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key]), 1),    DTRB_PERF_DATES[CAL_DAY_DT] \u003e= (min_date-365),    DTRB_PERF_DATES[CAL_DAY_DT] \u003c= (max(\u0027DTRB_PERF_DATES\u0027[End of Year Date])-365))Returnif(isblank(_total),0,_total)  ","isHidden":false},{"name":"Prior YR Prospect Connects Totals","expression":"var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT])var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT]) var _total=   CALCULATE    (SUMX(DISTINCT(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key]), 1),    \u0027Vital Stats DB Appointment Detail\u0027[Membership Type Description] \u003c\u003e 'Benefit',    \u0027Vital Stats DB Appointment Detail\u0027[Appointment Type Code] = 'Connect',     DTRB_PERF_DATES[CAL_DAY_DT] \u003e= (min_date-365),     DTRB_PERF_DATES[CAL_DAY_DT] \u003c= (max(\u0027DTRB_PERF_DATES\u0027[End of Year Date])-365)) Returnif(isblank(_total),0,_total)  ","isHidden":false},{"name":"Prospect Connect Appointment Count","expression":"var _total =   CALCULATE(SUMX(DISTINCT(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key]), 1),  \u0027DTRB_PERF_DATES\u0027[Today or Before] = 'Y',  \u0027Vital Stats DB Appointment Detail\u0027[Membership Type Description] \u003c\u003e  'Benefit',  \u0027Vital Stats DB Appointment Detail\u0027[Appointment Type Code] = 'Connect'  )  Return  IF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"Prospect Connect Client Count","expression":"var _total =   CALCULATE(SUMX(DISTINCT(\u0027Vital Stats DB Appointment Detail\u0027[ThriventId]), 1),  \u0027Vital Stats DB Appointment Detail\u0027[Membership Type Description] \u003c\u003e  'Benefit',  \u0027Vital Stats DB Appointment Detail\u0027[Appointment Type Code] = 'Connect'  )  Return  IF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"PYTD Appts","expression":"var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT])var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])  var _total =  CALCULATE    (SUMX(DISTINCT(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key]), 1),    DTRB_PERF_DATES[CAL_DAY_DT] \u003e= (min_date-365),    DTRB_PERF_DATES[CAL_DAY_DT] \u003c= (max_date-365),   \u0027DTRB_PERF_DATES\u0027[Prior YR or Before] = 'Y')Returnif(isblank(_total),0,_total) ","isHidden":false},{"name":"PYTD Prospect Connects","expression":"var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT])var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT]) var _total =CALCULATE(    DISTINCTCOUNT(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key]),                   DTRB_PERF_DATES[CAL_DAY_DT] \u003e= (min_date-365),                   DTRB_PERF_DATES[CAL_DAY_DT] \u003c= (max_date-365),                   \u0027DTRB_PERF_DATES\u0027[Prior YR or Before] = 'Y',                   \u0027Vital Stats DB Appointment Detail\u0027[Membership Type Description] \u003c\u003e 'Benefit',                   \u0027Vital Stats DB Appointment Detail\u0027[Appointment Type Code] = 'Connect')ReturnIF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"ShowHideCC_Appts","expression":"IF(DISTINCTCOUNT(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key]) \u003e 0, '#1C00ff00','White')","isHidden":false},{"name":"Total Appointments","expression":"var _total=  CALCULATE    (SUMX(DISTINCT(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key]), 1),     \u0027DTRB_PERF_DATES\u0027[Today or Before] = 'Y')ReturnIF(ISBLANK(_total),0,_total) ","isHidden":false},{"name":"YOY Appts","expression":"IF (([PYTD Appts]) =0,0, ((\u0027Vital Stats DB Appointment Detail\u0027[YTD Appts] - \u0027Vital Stats DB Appointment Detail\u0027[PYTD Appts]) / \u0027Vital Stats DB Appointment Detail\u0027[PYTD Appts]))","isHidden":false},{"name":"YOY Prospect Connects","expression":"IF(([PYTD Prospect Connects]) = 0,0, (([YTD Prospect Connect] - [PYTD Prospect Connects])/[PYTD Prospect Connects]))","isHidden":false},{"name":"YTD Health Appointments","expression":"  var _total=    CALCULATE    (SUMX(DISTINCT(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key]), 1),     Year(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date]) = YEAR(TODAY()))ReturnIF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"YTD Health Appointments PH Comp","expression":"  var _YRSelected = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR])  var _total=    CALCULATE    (SUMX(DISTINCT(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key]), 1),     Year(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date]) = SELECTEDVALUE(\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR]))ReturnIF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"YTD Health JFW Appts","expression":"var _total=  CALCULATE    (SUMX(DISTINCT(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key]), 1),    \u0027Vital Stats DB Appointment Detail\u0027[JFW_IND] = 1,    Year(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date]) = YEAR(TODAY()),    \u0027DTRB_PERF_DATES\u0027[Today or Before] = 'Y')ReturnIF(ISBLANK(_total),0,_total) ","isHidden":false},{"name":"YTD Health JFW Appts PH Comp","expression":"var _YRSelected = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR])var _total=  CALCULATE    (SUMX(DISTINCT(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key]), 1),    \u0027Vital Stats DB Appointment Detail\u0027[JFW_IND] = 1,    Year(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date]) = SELECTEDVALUE(\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR]),    \u0027DTRB_PERF_DATES\u0027[Today or Before] = 'Y')ReturnIF(ISBLANK(_total),0,_total) ","isHidden":false},{"name":"YTD Health Prospect Connect","expression":"var _total =   CALCULATE(SUMX(DISTINCT(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key]), 1),  Year(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date]) = YEAR(TODAY()),  \u0027DTRB_PERF_DATES\u0027[Today or Before] = 'Y',  \u0027Vital Stats DB Appointment Detail\u0027[Membership Type Description] \u003c\u003e  'Benefit',  \u0027Vital Stats DB Appointment Detail\u0027[Appointment Type Code] = 'Connect'  )  Return  IF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"YTD Health Prospect Connect PH Comp","expression":"var _YRSelected = SELECTEDVALUE(DTRB_PERF_DATES[DTRB_PERF_RPT_YR_NBR])var _total =   CALCULATE(SUMX(DISTINCT(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key]), 1),  Year(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date]) = SELECTEDVALUE(\u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_NBR]),  \u0027DTRB_PERF_DATES\u0027[Today or Before] = 'Y',  \u0027Vital Stats DB Appointment Detail\u0027[Membership Type Description] \u003c\u003e  'Benefit',  \u0027Vital Stats DB Appointment Detail\u0027[Appointment Type Code] = 'Connect'  )  Return  IF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"YTD JFW Appts","expression":"var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT])Var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])var _total=  CALCULATE    (SUMX(DISTINCT(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key]), 1),    \u0027Vital Stats DB Appointment Detail\u0027[JFW_IND] = 1,    DTRB_PERF_DATES[CAL_DAY_DT] \u003e= min_date,    DTRB_PERF_DATES[CAL_DAY_DT] \u003c= max_date,    \u0027DTRB_PERF_DATES\u0027[Today or Before] = 'Y')ReturnIF(ISBLANK(_total),0,_total) ","isHidden":false},{"name":"YTD Prospect Connect","expression":"var min_date = min(DTRB_PERF_DATES[CAL_DAY_DT])Var max_date = Max(DTRB_PERF_DATES[CAL_DAY_DT])var _total =   CALCULATE(SUMX(DISTINCT(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key]), 1),  DTRB_PERF_DATES[CAL_DAY_DT] \u003e= min_date,  DTRB_PERF_DATES[CAL_DAY_DT] \u003c= max_date,  \u0027DTRB_PERF_DATES\u0027[Today or Before] = 'Y',  \u0027Vital Stats DB Appointment Detail\u0027[Membership Type Description] \u003c\u003e  'Benefit',  \u0027Vital Stats DB Appointment Detail\u0027[Appointment Type Code] = 'Connect'  )  Return  IF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"Exits","expression":"SEARCH(     SelectedValue(\u0027Teams\u0027[EMP_NM]),     SelectedValue(\u0027Vital Stats DB Appointment Detail\u0027[Attendees]), -1)","isHidden":false},{"name":"Household Count","expression":"distinctcount([Household ID])+0","isHidden":false}],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'select pers_dim.''Source System Key Text'' as ThriventId,#(lf)       xx.''Household ID'',#(lf)       pers_dim.''First Name''|| \u0027 \u0027 || pers_dim.''Last Name'' as ClientName,#(lf)       appt_fct.''Appointment Dimension Surrogate Key'',#(lf)       appt_fct.''Person Dimension Surrogate Key'',#(lf)       sum(appt_fct.''Appointment Occurs'') ''appt_occurs'',#(lf)       max(appt_fct.''Person Occurs'') ''Person Occurs'',#(lf)       mbr_dim.''Membership Type Description'',#(lf)#(tab)   case when appt_dim.''Field User Count'' \u003c\u003e 0 and appt_dim.''Appointment Type Code'' in (\u0027Connect\u0027,\u0027Gather Data\u0027,\u0027Take Action\u0027,\u0027Strategy Call/Meeting\u0027,\u0027Review\u0027,\u0027Service\u0027,\u0027Discover\u0027,\u0027Deliver\u0027)#(lf)#(tab)#(tab) then 1#(lf)#(tab)#(tab) else 0#(lf)#(tab)   end ''JFW_IND'',#(lf)       appt_dim.''Appointment Date'',#(lf)       case when appt_dim.''Appointment Type Code'' in (\u0027Gather Data\u0027) Then \u0027Discover\u0027#(lf)            when appt_dim.''Appointment Type Code'' in (\u0027Take Action\u0027) Then \u0027Deliver\u0027#(lf)            when appt_dim.''Appointment Type Code'' not in (\u0027Gather Data\u0027,\u0027Take Action\u0027) then Appt_dim.''Appointment Type Description''#(lf)       end as ''Appointment Type Code'',#(lf)       --appt_dim.''Appointment Type Description'' ''Appointment Type Code'',#(lf)       --date_dim.''Performance Year Name'',#(lf)#(tab)   date_dim.''Calendar Year Name'' as ''Performance Year Name'',#(lf)       org_dim.''Source System Key Text'' ''EMP_ID'',#(lf)       org_dim.''Conference Qualification Type Code'',#(lf)       org_dim.''First Name'' || \u0027 \u0027 || org_dim.''Last Name'' as Advisor_Name,#(lf)       (Select max(A.''Life Segment Value Description'')#(lf)          from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Person Dimension'' A#(lf)         where appt_fct.''Person Dimension Surrogate Key''=A.''Person Dimension Surrogate Key''#(lf)           and A.''Current Row Indicator'' = \u0027Y\u0027) as ''Life Segment Value Description'' #(lf)#(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Appointment Combine Fact'' appt_fct left join #(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Person Dimension'' as Pers_dim#(lf)    on (appt_fct.''Person Dimension Surrogate Key''=pers_dim.''Person Dimension Surrogate Key'' and#(lf)        appt_fct.''Person Dimension Version Number'' = pers_dim.''Person Dimension Version Number'') left join#(lf)       #(lf)         #(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Membership Type Dimension'' mbr_dim#(lf)    on (appt_fct.''Membership Type Dimension Surrogate Key''=mbr_dim.''Membership Type Dimension Surrogate Key'') left join#(lf)#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Appointment Dimension'' appt_dim#(lf)    on (appt_fct.''Appointment Dimension Surrogate Key''=appt_dim.''Appointment Dimension Surrogate Key'') left join#(lf)#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Date Dimension'' date_dim#(lf)    on (appt_dim.''Appointment Date''=date_dim.''Calendar Date Date'') left join#(lf)#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' org_dim#(lf)    on ((appt_fct.''Appointment Organization Dimension Surrogate Key''=org_dim.''Organization Dimension Surrogate Key'') and #(lf)       ((org_dim.''Effective Begin Date'' \u003c= appt_dim.''Appointment Date'') and (appt_dim.''Appointment Date'' \u003c= org_dim.''Effective End Date''))) left join#(lf)#(tab) #(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' sale_hier_dim#(lf)    on ((org_dim.''Source System Key Text''=sale_hier_dim.''Sales Hierarchy Identifier'' and#(lf)#(tab)(sale_hier_dim.''Effective Begin Date''\u003c=appt_dim.''Appointment Date'') and#(lf)#(tab)(appt_dim.''Appointment Date''\u003c= sale_hier_dim.''Effective End Date'') and #(lf)#(tab) sale_hier_dim.''Current Row Indicator''= \u0027Y\u0027))   left join#(lf)       (select x.''Customer Identification Number'',#(lf)               x.''Customer Group Identification Number'' as ''Household ID''#(lf)          from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Conformed Customer Dimension Detail'' x#(lf)         where x.''Current Row Indicator''= \u0027Y\u0027) xx#(lf)    on try_to_number(Pers_dim.''Source System Key Text'') = xx.''Customer Identification Number''   #(lf)#(lf)where appt_dim.''Current Row Indicator'' = \u0027Y\u0027#(lf)  and appt_dim.''Appointment Create Date Over 14 Days'' = \u0027N\u0027#(lf)  and appt_fct.''Person Dimension Surrogate Key'' \u003c\u003e 0#(lf)  and appt_fct.''Appointment Status Name'' \u003c\u003e \u0027Declined\u0027#(lf)  and appt_dim.''Appointment Type Code'' \u003c\u003e \u0027UNK\u0027#(lf)  and sale_hier_dim.''Organization Department Code'' in (\u00270115\u0027,\u00270190\u0027,\u00270283\u0027,\u00270291\u0027,\u00270361\u0027,\u00270383\u0027,\u00270384\u0027,\u00270435\u0027,\u00270525\u0027)#(lf)  and (org_dim.''Job Type Code'' in (\u0027002000\u0027, \u0027002003\u0027, \u0027002008\u0027, \u0027002010\u0027, \u0027002011\u0027, \u0027002012\u0027, \u0027002016\u0027, \u0027002022\u0027, \u0027002024\u0027, \u0027002025\u0027, \u0027002026\u0027, \u0027002027\u0027, \u0027002030\u0027, \u0027002031\u0027, \u0027002032\u0027, \u0027003100\u0027, \u0027003500\u0027)#(lf)  or  org_dim.''Department Identifier'' in (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027)) #(lf)  and appt_dim.''Event Result Description'' not in (\u0027No Show\u0027,\u0027Cancelled\u0027)#(lf)  and date_dim.''Calendar Year Name'' in (\u00272020\u0027,\u00272021\u0027,\u00272022\u0027,\u00272023\u0027,\u00272024\u0027)#(lf) #(lf) #(lf)group by#(lf)  appt_fct.''Appointment Dimension Surrogate Key'',#(lf)  appt_fct.''Person Dimension Surrogate Key'',#(lf)  mbr_dim.''Membership Type Description'',#(lf)  appt_dim.''Field User Count'',#(lf)  appt_dim.''Appointment Date'',#(lf)  appt_dim.''Appointment Type Code'',#(lf)  appt_dim.''Appointment Type Description'',#(lf)  --date_dim.[Performance Year Name],#(lf)  date_dim.''Calendar Year Name'',#(lf)  org_dim.''Source System Key Text'',#(lf)  org_dim.''Conference Qualification Type Code'',#(lf)  org_dim.''First Name'' || \u0027 \u0027 || org_dim.''Last Name'',#(lf)  pers_dim.''Source System Key Text'',#(lf)  pers_dim.''First Name'' || \u0027 \u0027 || pers_dim.''Last Name'',#(lf)  xx.''Household ID''#(lf)#(lf)having #(lf)sum(appt_fct.''Appointment Occurs'')\u003e0', null, [EnableFolding=true]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'THRIVENTID', Int64.Type}}),    #'Added Custom' = Table.AddColumn(#'Changed Type', 'Conference Qualification', each if [Conference Qualification Type Code] = '33' then 'Pinnacle A' else if [Conference Qualification Type Code] = '32' then 'Pinnacle B' else if [Conference Qualification Type Code] = '31' then 'Pinnacle C' else if [Conference Qualification Type Code] = '29' then 'Summit A' else if [Conference Qualification Type Code] = '28' then 'Summit B' else if [Conference Qualification Type Code] = '27' then 'Summit C' else if [Conference Qualification Type Code] = '22' then 'Sierra A' else if [Conference Qualification Type Code] = '20' then 'Sierra B' else 'Non-Qualified'),    #'Merged Queries' = Table.NestedJoin(#'Added Custom', {'Appointment Dimension Surrogate Key'}, Appt_Advisor_Attendees, {'Appointment Dimension Surrogate Key'}, 'Appt_Advisor_Attendees', JoinKind.LeftOuter),    #'Expanded Appt_Advisor_Attendees' = Table.ExpandTableColumn(#'Merged Queries', 'Appt_Advisor_Attendees', {'Attendees'}, {'Attendees'})in    #'Expanded Appt_Advisor_Attendees'"}]},{"name":"DM_01 Vital Stats Summary Fact","isHidden":false,"storageMode":"Import","columns":[{"name":"Appointment Count","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Appointment Organization Dimension Surrogate Key","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Appointment Organization Version Number","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Contract Count","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"GRID Credit Amount","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"GRID Credit Contract Count","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Person Appointment Count","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Person Contract Count","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Person Contract GRID Credit Count","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Person Count","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Referral count","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Vital Stats Calculation Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Appointments_Per_Customer","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Total Close Rate","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Total Grid Per Appt","expression":"  var total_grid = Calculate(sum(\u0027Sales\u0027[Grid Credit Amount]),\u0027Sales\u0027[Distribution Performance Reporting Year Number] = year(today()))  var total_grid_team = Calculate(sum(\u0027Sales\u0027[Grid Credit Amount]), \u0027Sales\u0027[TeamSale_Ind] = 'Y', \u0027Sales\u0027[Distribution Performance Reporting Year Number] = year(today()))  var ytd_appts = calculate(DISTINCTCOUNT(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Dimension Surrogate Key]), YEAR(\u0027Vital Stats DB Appointment Detail\u0027[Appointment Date]) = YEAR(TODAY()), \u0027Vital Stats DB Appointment Detail\u0027[Appointment Date] \u003c today())  --var _total = total_grid/ytd_appts  var _indvtotal = total_grid/ytd_appts  var _teamtotal = total_grid_team/ytd_apptsReturn--Divide(total_grid,ytd_appts,0)+0IF([TeamNmFiltered] = 1, IF(ISBLANK(_teamtotal),0,_teamtotal), IF(ISBLANK(_indvtotal),0,_indvtotal))","isHidden":false},{"name":"Avg Appt Total","expression":"  var _avgtotal = AVERAGE([Appointment Count]) +0Return_avgtotal--IF(ISBLANK(_avgtotal),0,_avgtotal)","isHidden":false},{"name":"Clients Per Appt","expression":"  var _pastyr =LOOKUPVALUE(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT], today()-366)RETURNCALCULATE(sum(\u0027DM_01 Vital Stats Summary Fact\u0027[Person Appointment Count]) / sum(\u0027DM_01 Vital Stats Summary Fact\u0027[Appointment Count]), \u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT] \u003e _pastyr)","isHidden":false},{"name":"TGR Case Size","expression":"  var _TGRamt =SUM(\u0027DM_01 Vital Stats Summary Fact\u0027[GRID Credit Amount])  var _TGRCtrcCount =SUM(\u0027DM_01 Vital Stats Summary Fact\u0027[GRID Credit Contract Count])  var _total = DIVIDE(_TGRamt,_TGRCtrcCount,0)RETURNIF(ISBLANK(_total),0,_total) ","isHidden":false},{"name":"TGR Contract Efficiency","expression":"  var _TGRContractCount =SUM(\u0027DM_01 Vital Stats Summary Fact\u0027[GRID Credit Contract Count])  var _PersonContractCount = SUM(\u0027DM_01 Vital Stats Summary Fact\u0027[Person Contract Grid Credit Count])RETURNDIVIDE(_TGRContractCount,_PersonContractCount,0)","isHidden":false},{"name":"TGR Total Close Rate","expression":"  var _TGR_Person_Count = SUM(\u0027DM_01 Vital Stats Summary Fact\u0027[Person Contract Grid Credit Count])  var _PersonCount = SUM(\u0027DM_01 Vital Stats Summary Fact\u0027[Person Count])  var _total = Divide(_TGR_Person_Count,_PersonCount,0)ReturnIF(ISBLANK(_total),0,_total)  ","isHidden":false}],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'Select a.''Appointment Count'',#(lf)       a.''Appointment Organization Dimension Surrogate Key'',#(lf)       a.''Appointment Organization Version Number'',#(lf)       a.''Contract Count'',#(lf)       a.''GRID Credit Amount'',#(lf)       a.''GRID Credit Contract Count'',#(lf)       a.''Person Appointment Count'',#(lf)       a.''Person Contract Count'',#(lf)       a.''Person Contract GRID Credit Count'',#(lf)       a.''Person Count'',#(lf)       a.''Referral count'',#(lf)       a.''Vital Stats Calculation Date'',#(lf)       b.''Source System Key Text'' as EMP_ID#(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Vital Stats Summary Fact'' a left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' b#(lf)    on a.''Appointment Organization Dimension Surrogate Key'' = b.''Organization Dimension Surrogate Key'' and#(lf)       b.''Current Row Indicator'' = \u0027Y\u0027', null, [EnableFolding=true]),    #'Added Custom' = Table.AddColumn(Source, 'Appointments_Per_Customer', each [Person Count]/[Person Appointment Count]),    #'Changed Type' = Table.TransformColumnTypes(#'Added Custom',{{'Appointments_Per_Customer', type number}}),    #'Added Custom1' = Table.AddColumn(#'Changed Type', 'Total Close Rate', each [Person Contract Count] / [Person Count]),    #'Change Type1' = Table.TransformColumnTypes(#'Added Custom1',{{'Total Close Rate', type number}})in    #'Change Type1'"}]},{"name":"Appointment_Averages","isHidden":false,"storageMode":"Import","columns":[{"name":"Vital Stats Average Breakout","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Average Appointments Per Customer","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Average Customers Per Appointment","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Average Appointment Count","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Average Grid Credit Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Total Average Close Rate","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TGR Average Close Rate","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Average TGR Case Size","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Average TGR Contract Efficiency","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'select \u0027National\u0027 as ''Vital Stats Average Breakout''#(lf)              , avg(''Person Count'') / avg(''Person Appointment Count'') as ''Average Appointments Per Customer''#(lf)              , avg(''Person Appointment Count'') / avg(''Appointment Count'') as ''Average Customers Per Appointment''#(lf)              , avg(''Appointment Count'') as ''Average Appointment Count''#(lf)              , avg(''GRID Credit Amount'') as ''Average Grid Credit Amount'' #(lf)              , avg(''Person Contract Count'') / avg(''Appointment Count'') as ''Total Average Close Rate''#(lf)              , avg(''Person Contract GRID Credit Count'') / avg(''Appointment Count'') as ''TGR Average Close Rate''#(lf)              , avg(''GRID Credit Amount'') / avg(''Person Contract GRID Credit Count'') as ''Average TGR Case Size''#(lf)              , avg(''GRID Credit Contract Count'') / avg(''Person Contract GRID Credit Count'') as ''Average TGR Contract Efficiency''#(lf)from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Vital Stats Summary Fact''#(lf)#(lf)UNION ALL#(lf)#(lf)select \u0027NFR1\u0027 as ''Vital Stats Average Breakout''#(lf)              , avg(a.''Person Count'') / avg(a.''Person Appointment Count'') as ''Average Appointments Per Customer''#(lf)              , avg(a.''Person Appointment Count'') / avg(a.''Appointment Count'') as ''Average Customers Per Appointment''#(lf)              , avg(a.''Appointment Count'') as ''Average Appointment Count''#(lf)              , avg(a.''GRID Credit Amount'') as ''Average Grid Credit Amount'' #(lf)              , avg(a.''Person Contract Count'') / avg(a.''Appointment Count'') as ''Total Average Close Rate''#(lf)              , avg(a.''Person Contract GRID Credit Count'') / avg(a.''Appointment Count'') as ''TGR Average Close Rate''#(lf)              , avg(a.''GRID Credit Amount'') / avg(a.''Person Contract GRID Credit Count'') as ''Average TGR Case Size''#(lf)              , avg(a.''GRID Credit Contract Count'') / avg(a.''Person Contract GRID Credit Count'') as ''Average TGR Contract Efficiency''#(lf)from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Vital Stats Summary Fact'' a inner join#(lf)     ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Appointment Organization Dimension'' b#(lf)  on a.''Appointment Organization Dimension Surrogate Key'' = b.''Appointment Organization Dimension Surrogate Key''#(lf)where b.''Current Row Indicator'' = \u0027Y\u0027#(lf)  and b.''Financial Professional Tenure Group'' = \u0027NFR1\u0027#(lf)#(lf)UNION ALL#(lf)#(lf)select \u0027NFR2\u0027 as ''Vital Stats Average Breakout''#(lf)              , avg(a.''Person Count'') / avg(a.''Person Appointment Count'') as ''Average Appointments Per Customer''#(lf)              , avg(a.''Person Appointment Count'') / avg(a.''Appointment Count'') as ''Average Customers Per Appointment''#(lf)              , avg(a.''Appointment Count'') as ''Average Appointment Count''#(lf)              , avg(a.''GRID Credit Amount'') as ''Average Grid Credit Amount'' #(lf)              , avg(a.''Person Contract Count'') / avg(a.''Appointment Count'') as ''Total Average Close Rate''#(lf)              , avg(a.''Person Contract GRID Credit Count'') / avg(a.''Appointment Count'') as ''TGR Average Close Rate''#(lf)              , avg(a.''GRID Credit Amount'') / avg(a.''Person Contract GRID Credit Count'') as ''Average TGR Case Size''#(lf)              , avg(a.''GRID Credit Contract Count'') / avg(a.''Person Contract GRID Credit Count'') as ''Average TGR Contract Efficiency''#(lf)from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Vital Stats Summary Fact'' a inner join#(lf)     ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Appointment Organization Dimension'' b#(lf)  on a.''Appointment Organization Dimension Surrogate Key'' = b.''Appointment Organization Dimension Surrogate Key''#(lf)where b.''Current Row Indicator'' = \u0027Y\u0027#(lf)  and b.''Financial Professional Tenure Group'' = \u0027NFR2\u0027#(lf)#(lf)UNION ALL#(lf)#(lf)select \u0027NFR3\u0027 as ''Vital Stats Average Breakout''#(lf)              , avg(a.''Person Count'') / avg(a.''Person Appointment Count'') as ''Average Appointments Per Customer''#(lf)              , avg(a.''Person Appointment Count'') / avg(a.''Appointment Count'') as ''Average Customers Per Appointment''#(lf)              , avg(a.''Appointment Count'') as ''Average Appointment Count''#(lf)              , avg(a.''GRID Credit Amount'') as ''Average Grid Credit Amount'' #(lf)              , avg(a.''Person Contract Count'') / avg(a.''Appointment Count'') as ''Total Average Close Rate''#(lf)              , avg(a.''Person Contract GRID Credit Count'') / avg(a.''Appointment Count'') as ''TGR Average Close Rate''#(lf)              , avg(a.''GRID Credit Amount'') / avg(a.''Person Contract GRID Credit Count'') as ''Average TGR Case Size''#(lf)              , avg(a.''GRID Credit Contract Count'') / avg(a.''Person Contract GRID Credit Count'') as ''Average TGR Contract Efficiency''#(lf)from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Vital Stats Summary Fact'' a inner join#(lf)     ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Appointment Organization Dimension'' b#(lf)  on a.''Appointment Organization Dimension Surrogate Key'' = b.''Appointment Organization Dimension Surrogate Key''#(lf)where b.''Current Row Indicator'' = \u0027Y\u0027#(lf)  and b.''Financial Professional Tenure Group'' = \u0027NFR3\u0027#(lf)  #(lf)#(lf)UNION ALL#(lf)#(lf)select \u0027NFR4\u0027 as ''Vital Stats Average Breakout''#(lf)              , avg(a.''Person Count'') / avg(a.''Person Appointment Count'') as ''Average Appointments Per Customer''#(lf)              , avg(a.''Person Appointment Count'') / avg(a.''Appointment Count'') as ''Average Customers Per Appointment''#(lf)              , avg(a.''Appointment Count'') as ''Average Appointment Count''#(lf)              , avg(a.''GRID Credit Amount'') as ''Average Grid Credit Amount'' #(lf)              , avg(a.''Person Contract Count'') / avg(a.''Appointment Count'') as ''Total Average Close Rate''#(lf)              , avg(a.''Person Contract GRID Credit Count'') / avg(a.''Appointment Count'') as ''TGR Average Close Rate''#(lf)              , avg(a.''GRID Credit Amount'') / avg(a.''Person Contract GRID Credit Count'') as ''Average TGR Case Size''#(lf)              , avg(a.''GRID Credit Contract Count'') / avg(a.''Person Contract GRID Credit Count'') as ''Average TGR Contract Efficiency''#(lf)from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Vital Stats Summary Fact'' a inner join#(lf)     ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Appointment Organization Dimension'' b#(lf)  on a.''Appointment Organization Dimension Surrogate Key'' = b.''Appointment Organization Dimension Surrogate Key''#(lf)where b.''Current Row Indicator'' = \u0027Y\u0027#(lf)  and b.''Financial Professional Tenure Group'' = \u0027NFR4\u0027#(lf)#(lf)UNION ALL#(lf)#(lf)select \u0027VET5\u0027 as ''Vital Stats Average Breakout''#(lf)              , avg(a.''Person Count'') / avg(a.''Person Appointment Count'') as ''Average Appointments Per Customer''#(lf)              , avg(a.''Person Appointment Count'') / avg(a.''Appointment Count'') as ''Average Customers Per Appointment''#(lf)              , avg(a.''Appointment Count'') as ''Average Appointment Count''#(lf)              , avg(a.''GRID Credit Amount'') as ''Average Grid Credit Amount'' #(lf)              , avg(a.''Person Contract Count'') / avg(a.''Appointment Count'') as ''Total Average Close Rate''#(lf)              , avg(a.''Person Contract GRID Credit Count'') / avg(a.''Appointment Count'') as ''TGR Average Close Rate''#(lf)              , avg(a.''GRID Credit Amount'') / avg(a.''Person Contract GRID Credit Count'') as ''Average TGR Case Size''#(lf)              , avg(a.''GRID Credit Contract Count'') / avg(a.''Person Contract GRID Credit Count'') as ''Average TGR Contract Efficiency''#(lf)from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Vital Stats Summary Fact'' a inner join#(lf)     ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Appointment Organization Dimension'' b#(lf)  on a.''Appointment Organization Dimension Surrogate Key'' = b.''Appointment Organization Dimension Surrogate Key''#(lf)where b.''Current Row Indicator'' = \u0027Y\u0027#(lf)  and b.''Financial Professional Tenure Group'' = \u0027VET5\u0027#(lf)#(lf)UNION ALL#(lf)#(lf)select \u0027VET6\u0027 as ''Vital Stats Average Breakout''#(lf)              , avg(a.''Person Count'') / avg(a.''Person Appointment Count'') as ''Average Appointments Per Customer''#(lf)              , avg(a.''Person Appointment Count'') / avg(a.''Appointment Count'') as ''Average Customers Per Appointment''#(lf)              , avg(a.''Appointment Count'') as ''Average Appointment Count''#(lf)              , avg(a.''GRID Credit Amount'') as ''Average Grid Credit Amount'' #(lf)              , avg(a.''Person Contract Count'') / avg(a.''Appointment Count'') as ''Total Average Close Rate''#(lf)              , avg(a.''Person Contract GRID Credit Count'') / avg(a.''Appointment Count'') as ''TGR Average Close Rate''#(lf)              , avg(a.''GRID Credit Amount'') / avg(a.''Person Contract GRID Credit Count'') as ''Average TGR Case Size''#(lf)              , avg(a.''GRID Credit Contract Count'') / avg(a.''Person Contract GRID Credit Count'') as ''Average TGR Contract Efficiency''#(lf)from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Vital Stats Summary Fact'' a inner join#(lf)     ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Appointment Organization Dimension'' b#(lf)  on a.''Appointment Organization Dimension Surrogate Key'' = b.''Appointment Organization Dimension Surrogate Key''#(lf)where b.''Current Row Indicator'' = \u0027Y\u0027#(lf)  and b.''Financial Professional Tenure Group'' = \u0027VET6\u0027#(lf)#(lf)UNION ALL#(lf)#(lf)select \u0027VET7\u0027 as ''Vital Stats Average Breakout''#(lf)              , avg(a.''Person Count'') / avg(a.''Person Appointment Count'') as ''Average Appointments Per Customer''#(lf)              , avg(a.''Person Appointment Count'') / avg(a.''Appointment Count'') as ''Average Customers Per Appointment''#(lf)              , avg(a.''Appointment Count'') as ''Average Appointment Count''#(lf)              , avg(a.''GRID Credit Amount'') as ''Average Grid Credit Amount'' #(lf)              , avg(a.''Person Contract Count'') / avg(a.''Appointment Count'') as ''Total Average Close Rate''#(lf)              , avg(a.''Person Contract GRID Credit Count'') / avg(a.''Appointment Count'') as ''TGR Average Close Rate''#(lf)              , avg(a.''GRID Credit Amount'') / avg(a.''Person Contract GRID Credit Count'') as ''Average TGR Case Size''#(lf)              , avg(a.''GRID Credit Contract Count'') / avg(a.''Person Contract GRID Credit Count'') as ''Average TGR Contract Efficiency''#(lf)from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Vital Stats Summary Fact'' a inner join#(lf)     ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Appointment Organization Dimension'' b#(lf)  on a.''Appointment Organization Dimension Surrogate Key'' = b.''Appointment Organization Dimension Surrogate Key''#(lf)where b.''Current Row Indicator'' = \u0027Y\u0027#(lf)  and b.''Financial Professional Tenure Group'' = \u0027VET7\u0027#(lf)#(lf)UNION ALL#(lf)#(lf)select \u0027VET8+\u0027 as ''Vital Stats Average Breakout''#(lf)              , avg(a.''Person Count'') / avg(a.''Person Appointment Count'') as ''Average Appointments Per Customer''#(lf)              , avg(a.''Person Appointment Count'') / avg(a.''Appointment Count'') as ''Average Customers Per Appointment''#(lf)              , avg(a.''Appointment Count'') as ''Average Appointment Count''#(lf)              , avg(a.''GRID Credit Amount'') as ''Average Grid Credit Amount'' #(lf)              , avg(a.''Person Contract Count'') / avg(a.''Appointment Count'') as ''Total Average Close Rate''#(lf)              , avg(a.''Person Contract GRID Credit Count'') / avg(a.''Appointment Count'') as ''TGR Average Close Rate''#(lf)              , avg(a.''GRID Credit Amount'') / avg(a.''Person Contract GRID Credit Count'') as ''Average TGR Case Size''#(lf)              , avg(a.''GRID Credit Contract Count'') / avg(a.''Person Contract GRID Credit Count'') as ''Average TGR Contract Efficiency''#(lf)from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Vital Stats Summary Fact'' a inner join#(lf)     ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Appointment Organization Dimension'' b#(lf)  on a.''Appointment Organization Dimension Surrogate Key'' = b.''Appointment Organization Dimension Surrogate Key''#(lf)where b.''Current Row Indicator'' = \u0027Y\u0027#(lf)  and b.''Financial Professional Tenure Group'' = \u0027VET8+\u0027', null, [EnableFolding=true]),    #'Change Type' = Table.TransformColumnTypes(Source,{{'Average Appointments Per Customer', type number}}),    #'Change Type2' = Table.TransformColumnTypes(#'Change Type',{{'Total Average Close Rate', Percentage.Type}, {'Average Appointments Per Customer', type number}, {'Average Customers Per Appointment', Currency.Type}})in    #'Change Type2'"}]},{"name":"Future Prospect Connects","isHidden":false,"storageMode":"Import","columns":[{"name":"THRIVENTID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"CLIENTNAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Appointment Dimension Surrogate Key","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Person Dimension Surrogate Key","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"appt_occurs","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Person Occurs","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Membership Type Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JFW_IND","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Appointment Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Appointment Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Performance Year Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Conference Qualification Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ADVISOR_NAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Life Segment Value Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Conference Qualification","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Attendees","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_DATES.Week Start Date","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_DATES.Week End Date","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Today\u0027s Date","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Days to Appointment","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Future Prospect Connect Week","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Future Prospect Connect Sort","dataType":"String","isHidden":false,"expression":"RELATED(FutureProspectConnect_SortOrder[Order])","columnType":"Calculated"},{"name":"Household ID","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Total Future Prospect Connect","expression":"CALCULATE(DISTINCTCOUNT(\u0027Future Prospect Connects\u0027[Appointment Dimension Surrogate Key]))","isHidden":false},{"name":"Future PC Wk1","expression":"CALCULATE(DISTINCTCOUNT(\u0027Future Prospect Connects\u0027[Appointment Dimension Surrogate Key])+0,  \u0027Future Prospect Connects\u0027[Future Prospect Connect Week] = 'Next 7 days')","isHidden":false},{"name":"Future PC Wk2","expression":"CALCULATE(DISTINCTCOUNT(\u0027Future Prospect Connects\u0027[Appointment Dimension Surrogate Key])+0,  \u0027Future Prospect Connects\u0027[Future Prospect Connect Week] = 'Next 8-14 days')","isHidden":false},{"name":"Future PC Wk3","expression":"CALCULATE(DISTINCTCOUNT(\u0027Future Prospect Connects\u0027[Appointment Dimension Surrogate Key])+0,  \u0027Future Prospect Connects\u0027[Future Prospect Connect Week] = 'Next 15-21 days')","isHidden":false},{"name":"Future PC Wk4","expression":"CALCULATE(DISTINCTCOUNT(\u0027Future Prospect Connects\u0027[Appointment Dimension Surrogate Key])+0,  \u0027Future Prospect Connects\u0027[Future Prospect Connect Week] = 'Next 22-28 days')","isHidden":false},{"name":"Message_txtPCAppts","expression":"if(ISBLANK(DISTINCTCOUNT(\u0027Future Prospect Connects\u0027[Appointment Dimension Surrogate Key])), 'There are no future prospect connect appointments scheduled','')","isHidden":false},{"name":"ShowHideFuturePCAppts","expression":"IF(DISTINCTCOUNT(\u0027Future Prospect Connects\u0027[Appointment Dimension Surrogate Key]) \u003e 0,'#1C00ff00','White')","isHidden":false},{"name":"ShowHide Future PC Title","expression":"  IF(CALCULATE(DISTINCTCOUNT(\u0027Future Prospect Connects\u0027[Appointment Dimension Surrogate Key])=0),' ', 'Future Prospect Connects')","isHidden":false}],"source":[{"expression":"let    Source = #'Vital Stats DB Appointment Detail',    #'Filtered Rows1' = Table.SelectRows(Source, each ([Membership Type Description] \u003c\u003e 'Benefit') and ([Appointment Type Code] = 'Connect')),    #'Merged Queries' = Table.NestedJoin(#'Filtered Rows1', {'Appointment Date'}, DTRB_PERF_DATES, {'CAL_DAY_DT'}, 'DTRB_PERF_DATES', JoinKind.Inner),    #'Expanded DTRB_PERF_DATES' = Table.ExpandTableColumn(#'Merged Queries', 'DTRB_PERF_DATES', {'Week Start Date', 'Week End Date'}, {'DTRB_PERF_DATES.Week Start Date', 'DTRB_PERF_DATES.Week End Date'}),    #'Filtered Rows' = Table.SelectRows(#'Expanded DTRB_PERF_DATES', each Date.IsInNextNDays([Appointment Date], 28)),    #'Added Custom1' = Table.AddColumn(#'Filtered Rows', 'Today\u0027s Date', each Date.From(DateTime.LocalNow())),    #'Added Custom' = Table.AddColumn(#'Added Custom1', 'Days to Appointment', each Duration.Days([Appointment Date] - [#'Today\u0027s Date'])),    #'Added Custom2' = Table.AddColumn(#'Added Custom', 'Future Prospect Connect Week', each if[Days to Appointment] \u003e= 0 and [Days to Appointment] \u003c= 7 then 'Next 7 days'else if [Days to Appointment] \u003e= 8 and [Days to Appointment] \u003c= 14 then 'Next 8-14 days'else if [Days to Appointment] \u003e= 15 and [Days to Appointment] \u003c= 21 then 'Next 15-21 days'else if [Days to Appointment] \u003e= 22 and [Days to Appointment] \u003c= 28 then 'Next 22-28 days'else '')in    #'Added Custom2'"}]},{"name":"FutureProspectConnect_SortOrder","isHidden":false,"storageMode":"Import","columns":[{"name":"Future Prospect Connect Week","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Order","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i45W8kutKFEwV0hJrCxW0lEyVIrVgYpZ6BqawISNEMKGprpGhjBxY4S4kZGukQVM3EQpNhYA', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Description = _t, Order = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Description', type text}, {'Order', Int64.Type}}),    #'Renamed Columns' = Table.RenameColumns(#'Changed Type',{{'Description', 'Future Prospect Connect Week'}})in    #'Renamed Columns'"}]},{"name":"Parameter","isHidden":false,"storageMode":"Import","columns":[{"name":"Parameter","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"Parameter Fields","dataType":"String","isHidden":true,"columnType":"CalculatedTableColumn"},{"name":"Parameter Order","dataType":"String","isHidden":true,"columnType":"CalculatedTableColumn"}],"measures":[],"source":[{"expression":"{    ('EMP_NM', NAMEOF(\u0027Producer_Snowflake\u0027[EMP_NM]), 0)}"}]},{"name":"AttendeesFilter","isHidden":false,"storageMode":"Import","columns":[{"name":"AttendeesFilter","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"AttendeesFilter Fields","dataType":"String","isHidden":true,"columnType":"CalculatedTableColumn"},{"name":"AttendeesFilter Order","dataType":"String","isHidden":true,"columnType":"CalculatedTableColumn"}],"measures":[],"source":[{"expression":"{    ('EMP_NM', NAMEOF(\u0027Producer_Snowflake\u0027[EMP_NM]), 0)}"}]},{"name":"Conference Credits","isHidden":false,"storageMode":"Import","columns":[{"name":"UNIQ_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"COMP_PYEE_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PROC_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"CONF_YR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CONF_QUAL_TEAM_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TEAM_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"NEW_MONY_CONF_CR_AMT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"NEW_MONY_AFA_CONF_CR_AMT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"NEW_MONY_ADJ_CONF_CR_AMT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"NEW_MONY_TOT_CONF_CR_AMT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"LF_HLH_CONF_CR_AMT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"LF_HLH_AFA_CONF_CR_AMT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"LH_HLH_MISC_CONF_CR_AMT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"FRNT_LINE_LEAD_CONF_CR_AMT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"LF_HLH_TOT_CONF_CR_AMT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"NLCP_YTD_VLU","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"NLCP_CONF_CR_YTD_VLU","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TEAM_AVG_NEW_MONY_CONF_CR_AMT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TEAM_AVG_LF_HLH_CONF_CR_AMT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TEAM_AVG_NLCP_VLU","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TEAM_AVG_NLCP_CONF_CR_VLU","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"ON_TRGT_NEW_MONY_CONF_RQMT_AMT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"ON_TRGT_LF_HLH_CONF_RQMT_AMT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"ON_TRGT_CONF_IDVL_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ATT_CONF_IDVL_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ON_TRGT_CONF_IDVL_CNT","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"CONF_QUAL_IDVL_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"IDVL_CONF_RANK_VLU","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"CONF_PTS_VLU","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"ON_TRGT_CONF_TEAM_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ATT_CONF_TEAM_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CONF_QUAL_TEAM_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CONF_QUAL_PGM_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"IDVL_QUAL_MTHD_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TEAM_QUAL_MTHD_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EXTR_DAY_IDVL_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EXTR_DAY_QUAL_IDVL_METH_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EXTR_DAY_TEAM_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EXTR_DAY_QUAL_TEAM_METH_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"THRI_CHTY_RANK_VLU","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"CRET_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"LST_UPDT_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"CRET_USER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LST_UPDT_USER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TargetConference","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"On Target Conference","expression":"  var _conf = max(\u0027Conference Credits\u0027[TargetConference])returnIF(ISBLANK(_conf),'Not on Target ', _conf)","isHidden":false},{"name":"Extra Day","expression":"SWITCH(   max(\u0027Conference Credits\u0027[EXTR_DAY_IDVL_IND]),    'Y', 'Yes',    'N', 'No',    ' ', 'NA'    )","isHidden":false},{"name":"Extra Day Display","expression":"  var _day = IF(max(\u0027Conference Credits\u0027[EXTR_DAY_IDVL_IND]) = 'Y', 'Yes',  IF(max(\u0027Conference Credits\u0027[EXTR_DAY_IDVL_IND]) = 'N', 'Not on Target'))returnIF(ISBLANK(_day),'Not on Target', _day)","isHidden":false}],"source":[{"expression":"let    Source = Sql.Database('dbcareercompensationprd', 'CareerCompensation', [Query='select * #(lf)  from COMP.CONF_QUAL_DTL#(lf) where PROC_DT = (select max(PROC_DT)#(lf)                    from COMP.CONF_QUAL_DTL)']),    #'Duplicated Column' = Table.DuplicateColumn(Source, 'ON_TRGT_CONF_IDVL_CDE', 'ON_TRGT_CONF_IDVL_CDE - Copy'),    #'Renamed Columns' = Table.RenameColumns(#'Duplicated Column',{{'ON_TRGT_CONF_IDVL_CDE - Copy', 'TargetConference'}}),    #'Replaced Value' = Table.ReplaceValue(#'Renamed Columns','NOT QUALIFIED','Not on Target',Replacer.ReplaceText,{'TargetConference'}),    #'Replaced Value1' = Table.ReplaceValue(#'Replaced Value','PINNACLE A','Pinnacle A',Replacer.ReplaceText,{'TargetConference'}),    #'Replaced Value2' = Table.ReplaceValue(#'Replaced Value1','PINNACLE B','Pinnacle B',Replacer.ReplaceText,{'TargetConference'}),    #'Replaced Value3' = Table.ReplaceValue(#'Replaced Value2','PINNACLE C','Pinnacle C',Replacer.ReplaceText,{'TargetConference'}),    #'Replaced Value4' = Table.ReplaceValue(#'Replaced Value3','SIERRA A','Sierra A',Replacer.ReplaceText,{'TargetConference'}),    #'Replaced Value5' = Table.ReplaceValue(#'Replaced Value4','SIERRA B','Sierra B',Replacer.ReplaceText,{'TargetConference'}),    #'Replaced Value6' = Table.ReplaceValue(#'Replaced Value5','SUMMIT A','Summit A',Replacer.ReplaceText,{'TargetConference'}),    #'Replaced Value7' = Table.ReplaceValue(#'Replaced Value6','SUMMIT B','Summit B',Replacer.ReplaceText,{'TargetConference'}),    #'Replaced Value8' = Table.ReplaceValue(#'Replaced Value7','SUMMIT C','Summit C',Replacer.ReplaceText,{'TargetConference'}),    #'Filtered Rows' = Table.SelectRows(#'Replaced Value8', each true)in    #'Filtered Rows'"}]},{"name":"Whats New_ Alert Msg","isHidden":false,"storageMode":"Import","columns":[{"name":"Message Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Message","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"End Date","dataType":"DateTime","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Alert Msg","expression":"  var _alertmsg = LOOKUPVALUE(\u0027Whats New_ Alert Msg\u0027[Message],\u0027Whats New_ Alert Msg\u0027[Message Description],'ALERT!')RETURNif(_alertmsg \u003c\u003e BLANK(), _alertmsg,'')  ","isHidden":false},{"name":"Show Alert Msg Box","expression":"  var _alertmsg = LOOKUPVALUE(\u0027Whats New_ Alert Msg\u0027[Message],\u0027Whats New_ Alert Msg\u0027[Message Description],'ALERT!')RETURNif(_alertmsg\u003c\u003eBLANK(),1,0)","isHidden":false},{"name":"Show What\u0027s New Msg Box","expression":"  var _enddate = LOOKUPVALUE(\u0027Whats New_ Alert Msg\u0027[End Date],\u0027Whats New_ Alert Msg\u0027[Message Description],'What\u0027s New')RETURNif(today() \u003c= _enddate,1,0)","isHidden":false},{"name":"What\u0027s New Msg","expression":"  var _enddate = LOOKUPVALUE(\u0027Whats New_ Alert Msg\u0027[End Date],\u0027Whats New_ Alert Msg\u0027[Message Description],'What\u0027s New')RETURN if(today() \u003c= _enddate,LOOKUPVALUE(\u0027Whats New_ Alert Msg\u0027[Message],\u0027Whats New_ Alert Msg\u0027[Message Description],'What\u0027s New'),'')","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//SHARED//Public//DI and BI//Field Reporting//What\u0027s New and Alert Message//What\u0027s New and Alert Message.xlsx'), null, true),    OAT_Rpt_Sheet = Source{[Item='FA',Kind='Sheet']}[Data],    #'Promoted Headers1' = Table.PromoteHeaders(OAT_Rpt_Sheet, [PromoteAllScalars=true]),    #'Changed Type2' = Table.TransformColumnTypes(#'Promoted Headers1',{{'Message Description', type text}, {'Message', type text}, {'End Date', type date}})in    #'Changed Type2'"}]}],"expressions":[{"name":"Query1","expression":"let    Source = DB2.Database('PODWH021:50000', 'PODWH021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='WITH fp_metrics as (#(lf)#(lf)select#(lf)  CAD.EMP_ID,#(lf)  DT.CAL_DAY_DT,#(lf)  sum(SF.NEW_SC_AMT) as NSC,#(lf)  sum(SF.GDC_AMT) as GDC#(lf)  #(lf)from SEMANTIC.SALES_TRANSACTION_FACT SF#(lf)  inner join SEMANTIC.COMPENSATION_AGENT_DIMENSION CAD on (CAD.CAGT_DIM_SK = SF.CAGT_DIM_CURR_SK)#(lf)  inner join COMMON.DTRB_PERF_DATES DT on (DT.DT_SK = SF.PROC_DT_SK)#(lf)where#(lf)  --CAD.EMP_ID in (\u0027TS66982\u0027,\u0027TS11113\u0027)#(lf)  year(DT.CAL_DAY_DT) \u003e= Year(current_date) -1#(lf)group by#(lf)  CAD.EMP_ID,#(lf)  DT.CAL_DAY_DT#(lf)order by DT.CAL_DAY_DT desc#(lf))#(lf)#(lf)  select #(lf)  x.EMP_ID,#(lf)  x.CAL_DAY_DT,#(lf)  x.NSC,#(lf)  x.GDC,#(lf)  x.NSC_YTD,#(lf)  y.NSC_PY_YTD,#(lf)  x.GDC_YTD,#(lf)  y.GDC_PY_YTD,#(lf)  x.NSC_YR_TOT,#(lf)  x.GDC_YR_TOT,#(lf)  y.NSC_PY_TOT,#(lf)  y.GDC_PY_TOT#(lf)  from #(lf)  (#(lf)  Select#(lf)    EMP_ID,#(lf)    CAL_DAY_DT,#(lf)    NSC,#(lf)    GDC,#(lf)    sum(NSC) over (partition by year(CAL_DAY_DT),EMP_ID order by EMP_ID,CAL_DAY_DT) as NSC_YTD,#(lf)    sum(NSC) over(Partition by EMP_ID, year(CAL_DAY_DT)) as NSC_YR_TOT,#(lf)    sum(GDC) over (partition by year(CAL_DAY_DT),EMP_ID order by EMP_ID,CAL_DAY_DT) as GDC_YTD,#(lf)    sum(GDC) over(Partition by EMP_ID, year(CAL_DAY_DT)) as GDC_YR_TOT#(lf)  FROM fp_metrics#(lf)  WHERE year(CAL_DAY_DT) = year(current_date)#(lf))x#(lf)inner join #(lf)(#(lf)  Select#(lf)    EMP_ID,#(lf)    CAL_DAY_DT,#(lf)    NSC,#(lf)    GDC,#(lf)    sum(NSC) over (partition by year(CAL_DAY_DT),EMP_ID order by EMP_ID,CAL_DAY_DT) as NSC_PY_YTD,#(lf)    sum(NSC) over(Partition by EMP_ID, year(CAL_DAY_DT)) as NSC_PY_TOT,#(lf)    sum(GDC) over (partition by year(CAL_DAY_DT),EMP_ID order by EMP_ID,CAL_DAY_DT) as GDC_PY_YTD,#(lf)    sum(GDC) over(Partition by EMP_ID, year(CAL_DAY_DT)) as GDC_PY_TOT#(lf)  FROM fp_metrics#(lf)WHERE year(CAL_DAY_DT) = year(current_date)-1#(lf))#(lf)y on (x.EMP_ID = y.EMP_ID and month(x.CAL_DAY_DT) = month(y.CAL_DAY_DT) and day(x.CAL_DAY_DT) = day(y.CAL_DAY_DT))'])in    Source"},{"name":"Experience Advisor Sort","expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i45WUtJRMlSK1YlWCvB1VtBVyE0syk4tUTAwBIobYYqbWgLFjcHi7gGOCHEzkLgJVNwFIW4OEjcFi/sFuCPELS2A4mZYxEHqzZViYwE=', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Filter_Ind = _t, Sort = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Filter_Ind', type text}, {'Sort', Int64.Type}})in    #'Changed Type'"},{"name":"ConferenceCredits","expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'select a.''Compensation Payee Agent Surrogate Key'',#(lf)       a.''Compensation Agent Version Number'',#(lf)       a.''Sponsoring Compensation Recipient Surrogate Key'',#(lf)       a.''Sponsoring Agent Version Number'',#(lf)       a.''Contract Surrogate Key'',#(lf)       a.''Process Date'',#(lf)       a.''Proprietary Product Indicator'',#(lf)       a.''Customer Identification Number'',#(lf)       a.''Conference Credit Amount'',#(lf)       a.''Agent Split Percent'',#(lf)       a.''Metric Type Code'',#(lf)       a.''Benefit Contract Number'',#(lf)       a.''Benefit Contract Type Code'',#(lf)       a.''Compensation Reporting Roll Up Name'',#(lf)       a.''Sponsoring Compensation Recipient Identifier'',#(lf)       b.''Employee Identifier'' as ''Comp Employee Identifier'',#(lf)       b.''Employee Identifier'',#(lf)      -- b.''Employee Name'',#(lf)      -- b.''Workforce Dimension Detail Surrogate Key'',#(lf)       c.''Date Surrogate Key'',#(lf)       c.''Calendar Day Date'',#(lf)       c.''Distribution Performance Reporting Year Number'',#(lf)       c.''Distribution Performance Reporting Year Week Number'',#(lf)       c.''Distribution Performance Report Year Text'',#(lf)       \u0027N\u0027 as Rollup_Ind,#(lf)       a.''Compensated Job Title Code''              #(lf)       #(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sales Metrics Transactions'' as a left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Distribution Performance Dates Dimension'' as c#(lf)    on a.''Process Date''= c.''Calendar Day Date'', #(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' as b#(lf)    #(lf) where a.''Compensation Payee Agent Surrogate Key''=b.''Workforce Dimension Detail Surrogate Key''#(tab)#(lf)   and b.''Current Row Indicator'' = \u0027Y\u0027#(lf)   and a.''Conference Credit Amount'' IS NOT NULL#(lf)  -- and a.''Conference Credit Amount'' \u003e 0#(lf)   and c.''Distribution Performance Report Year Text'' = \u0027CURRENT\u0027#(lf)   and substring(b.''Employee Identifier'',1,2)=\u0027TS\u0027#(lf)#(lf)Union ALL#(lf)select a.''Compensation Payee Agent Surrogate Key'',#(lf)       a.''Compensation Agent Version Number'',#(lf)       a.''Sponsoring Compensation Recipient Surrogate Key'',#(lf)       a.''Sponsoring Agent Version Number'',#(lf)       a.''Contract Surrogate Key'',#(lf)       a.''Process Date'',#(lf)       a.''Proprietary Product Indicator'',#(lf)       a.''Customer Identification Number'',#(lf)       a.''Conference Credit Amount'',#(lf)       a.''Agent Split Percent'',#(lf)       a.''Metric Type Code'',#(lf)       a.''Benefit Contract Number'',#(lf)       a.''Benefit Contract Type Code'',#(lf)       a.''Compensation Reporting Roll Up Name'',#(lf)       a.''Sponsoring Compensation Recipient Identifier'',#(lf)       b.''Employee Identifier'' as ''Comp Employee Identifier'',#(lf)       a.''Sponsoring Compensation Recipient Identifier'' as EMP_ID,#(lf)      -- b.''Employee Name'',#(lf)      -- b.''Workforce Dimension Detail Surrogate Key'',#(lf)       c.''Date Surrogate Key'',#(lf)       c.''Calendar Day Date'',#(lf)       c.''Distribution Performance Reporting Year Number'',#(lf)       c.''Distribution Performance Reporting Year Week Number'',#(lf)       c.''Distribution Performance Report Year Text'',#(lf)       \u0027Y\u0027 as Rollup_Ind,#(lf)       a.''Compensated Job Title Code''#(lf)         #(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sales Metrics Transactions'' as a left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Distribution Performance Dates Dimension'' as c#(lf)    on a.''Process Date''= c.''Calendar Day Date'', #(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' as b#(lf)    #(lf) where a.''Sponsoring Compensation Recipient Surrogate Key''= b.''Workforce Dimension Detail Surrogate Key''#(lf)   and b.''Current Row Indicator'' = \u0027Y\u0027#(lf)   and a.''Conference Credit Amount'' IS NOT NULL#(lf)   --and a.''Conference Credit Amount'' \u003e 0#(lf)   and c.''Distribution Performance Report Year Text'' = \u0027CURRENT\u0027#(lf)   and substring(b.''Employee Identifier'',1,2)=\u0027TS\u0027#(lf)   and b.''Employee Identifier'' \u003c\u003e a.''Sponsoring Compensation Recipient Identifier''', null, [EnableFolding=true])in    Source"},{"name":"Allego_perTSid","expression":"let    Source = Csv.Document(File.Contents('////VSSHR//SHARED//Public//DI and BI//Field Reporting//Allego//ForDB//Allego_perTSid_R3.csv'),[Delimiter=',', Columns=19, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Removed Columns' = Table.RemoveColumns(#'Promoted Headers',{'', '_1', '_2', '_3', '_4', '_5', '_6', '_7', '_8', '_9', '_10'}),    #'Replaced Value' = Table.ReplaceValue(#'Removed Columns','InProgr','In Progress',Replacer.ReplaceText,{'trained_sts'}),    #'Replaced Value1' = Table.ReplaceValue(#'Replaced Value','NotStart','Not Started',Replacer.ReplaceText,{'trained_sts'}),    #'Changed Type' = Table.TransformColumnTypes(#'Replaced Value1',{{'asOfDt', type date}})in    #'Changed Type'"},{"name":"MGP_KPIs_detail","expression":"let    Source = Csv.Document(File.Contents('////VSSHR//SHARED//Public//DI and BI//Field Reporting//MGP//MGP_KPIs_detail.csv'),[Delimiter=',', Columns=16, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'asOfDt', type date}, {'TSid_DshBd', type text}, {'MGP_hhld_id', Int64.Type}, {'prim_cifid', Int64.Type}, {'co_cifid', Int64.Type}, {'cnt_cyr_FFind', Int64.Type}, {'mgp_hhld_crdt', type date}, {'mgp_hhld_updt', type date}, {'cnt_cyr_rcmdFP_updt', Int64.Type}, {'rcmdPlan_crdt', type date}, {'rcmdPlan_updt', type date}, {'cnt_cyr_rpt', Int64.Type}, {'max_rpt_crdt', type date}, {'TSid_MGP', type text}, {'TSid_SREP', type text}, {'record_updt', type date}}),    #'Merged Queries' = Table.NestedJoin(#'Changed Type', {'prim_cifid'}, Client_HHLD, {'CUST_ID_NBR'}, 'Client_HHLD', JoinKind.LeftOuter),    #'Expanded Client_HHLD' = Table.ExpandTableColumn(#'Merged Queries', 'Client_HHLD', {'CUST_LGAL_FMT_NM'}, {'CUST_LGAL_FMT_NM'}),    #'Renamed Columns2' = Table.RenameColumns(#'Expanded Client_HHLD',{{'CUST_LGAL_FMT_NM', 'Prim_Name'}}),    #'Merged Queries1' = Table.NestedJoin(#'Renamed Columns2', {'co_cifid'}, Client_HHLD, {'CUST_ID_NBR'}, 'Client_HHLD', JoinKind.LeftOuter),    #'Expanded Client_HHLD1' = Table.ExpandTableColumn(#'Merged Queries1', 'Client_HHLD', {'CUST_LGAL_FMT_NM'}, {'CUST_LGAL_FMT_NM'}),    #'Renamed Columns1' = Table.RenameColumns(#'Expanded Client_HHLD1',{{'CUST_LGAL_FMT_NM', 'CO_Name'}})in    #'Renamed Columns1'"},{"name":"Prospect Connects EDW","expression":"let    Source = Sql.Database('dbedwdwprd', 'enterprisedatamart', [Query='select pers_dim.[Source System Key Text] as ThriventId,#(lf)   -- appt_fct.[Worker Appointment Association],#(lf)      appt_fct.[Appointment Dimension Surrogate Key],#(lf)      appt_fct.[Person Dimension Surrogate Key],#(lf)   -- appt_fct.[Appointment Organization Dimension Key],#(lf)   -- appt_fct.[Appointment Organization Dimension Surrogate Key],#(lf)      sum(appt_fct.[Appointment Occurs]) [appt_occurs],#(lf)      max(appt_fct.[Person Occurs]) [Person Occurs],#(lf)      mbr_dim.[Membership Type Description],#(lf)      appt_dim.[Appointment Date],#(lf)      appt_dim.[Appointment Type Description] [Appointment Type Code],#(lf)      date_dim.[Performance Year Name],#(lf)      org_dim.[Source System Key Text] [EMP_ID],#(lf)    --sale_hier_dim.ORZN_DEPT_CDE [RFO Zone Name],#(lf)    --sale_hier_dim.ORZN_ZONE_CDE [RFO Zone Identifier],#(lf)      org_dim.[First Name] + \u0027 \u0027 + org_dim.[Last Name],#(lf)      (Select max(A.[Life Segment Value Description])#(lf)         from EnterpriseDataMart.DM_01.[Person Dimension] A#(lf)        where appt_fct.[Person Dimension Surrogate Key]=A.[Person Dimension Surrogate Key]#(lf)        and A.[Current Row Indicator] = \u0027Y\u0027) as [Life Segment Value Description] #(lf)#(lf)  from EnterpriseDataMart.DM_01.[Appointment Combine Fact] appt_fct left join #(lf)       EnterpriseDataMart.DM_01.[Person Dimension] as Pers_dim#(lf)    on (appt_fct.[Person Dimension Surrogate Key]=pers_dim.[Person Dimension Surrogate Key] and#(lf)        appt_fct.[Person Dimension Version Number] = pers_dim.[Person Dimension Version Number]) left join#(lf)       EnterpriseDataMart.DM_01.[Membership Type Dimension] mbr_dim#(lf)    on (appt_fct.[Membership Type Dimension Surrogate Key]=mbr_dim.[Membership Type Dimension Surrogate Key]) left join#(lf)#(lf)       EnterpriseDataMart.DM_01.[Appointment Dimension] appt_dim#(lf)    on (appt_fct.[Appointment Dimension Surrogate Key]=appt_dim.[Appointment Dimension Surrogate Key]) left join#(lf)#(lf)       EnterpriseDataMart.DM_01.[Date Dimension] date_dim#(lf)    on (appt_dim.[Appointment Date]=date_dim.[Calendar Date Date]) left join#(lf)#(lf)       EnterpriseDataMart.DM_01.[Organization Dimension] org_dim#(lf)    on ((appt_fct.[Appointment Organization Dimension Surrogate Key]=org_dim.[Organization Dimension Surrogate Key]) and #(lf)       ((org_dim.[Effective Begin Date] \u003c= appt_dim.[Appointment Date]) and (appt_dim.[Appointment Date] \u003c= org_dim.[Effective End Date]))) left join#(lf)#(tab) #(lf)       EnterpriseDataMart.DM_01.[SALE_HIER_DIM] sale_hier_dim#(lf)    on ((org_dim.[Source System Key Text]=sale_hier_dim.[SALE_HIER_ID] and#(lf)#(tab)(sale_hier_dim.EFF_BEG_DT\u003c=appt_dim.[Appointment Date]) and#(lf)#(tab)(appt_dim.[Appointment Date]\u003c= sale_hier_dim.EFF_END_DT) and #(lf)#(tab) sale_hier_dim.CURR_ROW_IND = \u0027Y\u0027))#(lf)#(lf)where appt_dim.[Current Row Indicator] = \u0027Y\u0027#(lf)  and appt_dim.[Appointment Create Date Over 14 Days] = \u0027N\u0027#(lf)  and appt_fct.[Person Dimension Surrogate Key] \u003c\u003e 0#(lf)  and appt_fct.[Appointment Status Name] \u003c\u003e \u0027Declined\u0027#(lf)  and appt_dim.[Appointment Type Code] \u003c\u003e \u0027UNK\u0027#(lf)  and sale_hier_dim.ORZN_DEPT_CDE in (\u00270115\u0027,\u00270165\u0027,\u00270190\u0027,\u00270240\u0027,\u00270283\u0027,\u00270291\u0027,\u00270361\u0027,\u00270365\u0027, \u00270383\u0027,\u00270384\u0027,\u00270410\u0027,\u00270435\u0027,\u00270475\u0027,\u00270496\u0027,\u00270525\u0027,\u00270529\u0027,\u00270810\u0027)#(lf) and (org_dim.[Job Type Code] in (\u0027002000\u0027, \u0027002003\u0027, \u0027002008\u0027, \u0027002010\u0027, \u0027002011\u0027, \u0027002012\u0027, \u0027002016\u0027, \u0027002022\u0027, \u0027002024\u0027, \u0027002025\u0027, \u0027002026\u0027, \u0027002027\u0027, \u0027002030\u0027, \u0027002031\u0027, \u0027002032\u0027, \u0027003100\u0027, \u0027003500\u0027)#(lf)  or  org_dim.[Department Identifier] in (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027)) #(lf)  and appt_dim.[Event Result Description] not in (\u0027No Show\u0027,\u0027Cancelled\u0027)#(lf)  --and date_dim.[Performance Year Name] in (\u00272020\u0027,\u00272021\u0027,\u00272022\u0027,\u00272023\u0027)#(lf)  and date_dim.[Calendar Year Name] in (\u00272020\u0027,\u00272021\u0027,\u00272022\u0027,\u00272023\u0027)#(lf)#(lf)group by#(lf)--appt_fct.[Worker Appointment Association],#(lf)  appt_fct.[Appointment Dimension Surrogate Key],#(lf)  appt_fct.[Person Dimension Surrogate Key],#(lf)  mbr_dim.[Membership Type Description],#(lf)  appt_dim.[Appointment Date],#(lf)  appt_dim.[Appointment Type Description],#(lf)  date_dim.[Performance Year Name],#(lf)--sale_hier_dim.ORZN_DEPT_CDE,#(lf)--sale_hier_dim.ORZN_ZONE_CDE,#(lf)  org_dim.[Source System Key Text],#(lf)  org_dim.[First Name] + \u0027 \u0027 + org_dim.[Last Name],#(lf)  pers_dim.[Source System Key Text] #(lf)--appt_fct.[Appointment Organization Dimension Key],#(lf)--appt_fct.[Appointment Organization Dimension Surrogate Key]#(tab) #(lf)#(lf)having #(lf)sum(appt_fct.[Appointment Occurs])\u003e0']),    #'Filtered Rows' = Table.SelectRows(Source, each ([Appointment Type Code] = 'Connect') and ([Membership Type Description] \u003c\u003e 'Benefit')),    #'Changed Type' = Table.TransformColumnTypes(#'Filtered Rows',{{'Appointment Date', type date}}),    Custom1 = Table.AddColumn(#'Changed Type', 'Tasks Days from Today', each Duration.Days (DateTime.Date(DateTime.LocalNow()) - [Appointment Date] )),    Custom2 = Table.AddColumn(#'Custom1', 'Type', each 'Prospect Connects'),    Custom3 = Table.AddColumn(#'Custom2', 'Start of Week', each Date.StartOfWeek([#'Appointment Date'],1)),    Custom4 = Table.AddColumn(#'Custom3', 'VitalStats Week', each if( [Tasks Days from Today] \u003e= 358 and [Tasks Days from Today] \u003c= 364) then '52'else if( [Tasks Days from Today] \u003e= 57 and [Tasks Days from Today] \u003c= 91) then '13'else if( [Tasks Days from Today] \u003e= 29 and [Tasks Days from Today] \u003c= 56) then '8'else if( [Tasks Days from Today] \u003e= 8 and [Tasks Days from Today] \u003c= 28) then '4'else if ([Tasks Days from Today] \u003e= 0 and [Tasks Days from Today] \u003c= 7) then 'Last Week'else ' '),    Custom5 = Table.SelectRows(#'Custom4', each ([VitalStats Week] \u003c\u003e ' ')),    #'Renamed Columns' = Table.RenameColumns(Custom5,{{'', 'FP Name'}}),    #'Grouped Rows' = Table.Group(#'Renamed Columns', {'EMP_ID', 'Type', 'VitalStats Week'}, {{'Total', each List.Sum([appt_occurs]), type nullable number}}),    #'Added Custom' = Table.AddColumn(#'Grouped Rows', '4 week avg', each if[VitalStats Week] = '4' then ([Total]/4) else null),    Custom6 = Table.AddColumn(#'Added Custom', '8 week avg', each if[VitalStats Week] = '8' then ([Total]/8) else null),    Custom7 = Table.AddColumn(#'Custom6', '13 week avg', each if[VitalStats Week] = '13' then ([Total]/13) else null),    Custom8 = Table.AddColumn(#'Custom7', '52 week avg', each if[VitalStats Week] = '52' then ([Total]/52) else null),    #'Added Custom1' = Table.AddColumn(Custom8, 'Last Week', each if [VitalStats Week] = 'Last Week' then [Total] else null),    #'Replaced Value' = Table.ReplaceValue(#'Added Custom1',null,0,Replacer.ReplaceValue,{'4 week avg', '8 week avg', '13 week avg', '52 week avg', 'Last Week'}),    #'Added Custom2' = Table.AddColumn(#'Replaced Value', 'VitalStats Indicator', each if [VitalStats Week] = 'Last Week' then 'Last Week'else if [VitalStats Week] = '4' then '4 Week'else if [VitalStats Week] = '8' then '8 Week'else if [VitalStats Week] = '13' then '13 Week'else if [VitalStats Week] = '52' then '52 Week'else ' '),    #'Reordered Columns' = Table.ReorderColumns(#'Added Custom2',{'EMP_ID', 'Type', 'VitalStats Indicator', 'VitalStats Week', 'Total', '4 week avg', '8 week avg', '13 week avg', '52 week avg', 'Last Week'}),    #'Removed Columns' = Table.RemoveColumns(#'Reordered Columns',{'VitalStats Week'})in    #'Removed Columns'"},{"name":"Prospect Connect","expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'select pers_dim.''Source System Key Text'' as ThriventId,#(lf)      appt_fct.''Appointment Dimension Surrogate Key'',#(lf)      appt_fct.''Person Dimension Surrogate Key'',#(lf)      sum(appt_fct.''Appointment Occurs'') as ''appt_occurs'',#(lf)      max(appt_fct.''Person Occurs'') as ''Person Occurs'',#(lf)      mbr_dim.''Membership Type Description'',#(lf)      appt_dim.''Appointment Date'',#(lf)      appt_dim.''Appointment Type Description'' as ''Appointment Type Code'',#(lf)      date_dim.''Performance Year Name'',#(lf)      org_dim.''Source System Key Text'' as ''EMP_ID'',#(lf)      org_dim.''First Name'' || \u0027 \u0027 || org_dim.''Last Name'' as Advisor_Name,#(lf)      (Select max(A.''Life Segment Value Description'')#(lf)         from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Person Dimension'' A#(lf)        where appt_fct.''Person Dimension Surrogate Key''=A.''Person Dimension Surrogate Key''#(lf)        and A.''Current Row Indicator'' = \u0027Y\u0027) as ''Life Segment Value Description'' #(lf)#(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Appointment Combine Fact'' appt_fct left join #(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Person Dimension'' as Pers_dim#(lf)    on (appt_fct.''Person Dimension Surrogate Key''=pers_dim.''Person Dimension Surrogate Key'' and#(lf)        appt_fct.''Person Dimension Version Number'' = pers_dim.''Person Dimension Version Number'') left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Membership Type Dimension'' mbr_dim#(lf)    on (appt_fct.''Membership Type Dimension Surrogate Key''=mbr_dim.''Membership Type Dimension Surrogate Key'') left join#(lf)#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Appointment Dimension'' appt_dim#(lf)    on (appt_fct.''Appointment Dimension Surrogate Key''=appt_dim.''Appointment Dimension Surrogate Key'') left join#(lf)#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Date Dimension'' date_dim#(lf)    on (appt_dim.''Appointment Date''=date_dim.''Calendar Date Date'') left join#(lf)#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' org_dim#(lf)    on ((appt_fct.''Appointment Organization Dimension Surrogate Key''=org_dim.''Organization Dimension Surrogate Key'') and #(lf)       ((org_dim.''Effective Begin Date'' \u003c= appt_dim.''Appointment Date'') and (appt_dim.''Appointment Date'' \u003c= org_dim.''Effective End Date''))) left join#(lf)                #(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' sale_hier_dim#(lf)    on ((org_dim.''Source System Key Text''=sale_hier_dim.''Sales Hierarchy Identifier'' and#(lf)                (sale_hier_dim.''Effective Begin Date'' \u003c= appt_dim.''Appointment Date'') and#(lf)                (appt_dim.''Appointment Date''\u003c= sale_hier_dim.''Effective End Date'') and #(lf)                 sale_hier_dim.''Current Row Indicator'' = \u0027Y\u0027))#(lf)#(lf)where appt_dim.''Current Row Indicator'' = \u0027Y\u0027#(lf)  and appt_dim.''Appointment Create Date Over 14 Days'' = \u0027N\u0027#(lf)  and appt_fct.''Person Dimension Surrogate Key'' \u003c\u003e 0#(lf)  and appt_fct.''Appointment Status Name'' \u003c\u003e \u0027Declined\u0027#(lf)  and appt_dim.''Appointment Type Code'' = \u0027Connect\u0027 #(lf)  and mbr_dim.''Membership Type Description'' \u003c\u003e \u0027Benefit\u0027#(lf)  and sale_hier_dim.''Organization Department Code'' in (\u00270115\u0027,\u00270165\u0027,\u00270190\u0027,\u00270240\u0027,\u00270283\u0027,\u00270291\u0027,\u00270361\u0027,\u00270365\u0027, \u00270383\u0027,\u00270384\u0027,\u00270410\u0027,\u00270435\u0027,\u00270475\u0027,\u00270496\u0027,\u00270525\u0027,\u00270529\u0027,\u00270810\u0027)#(lf)and (org_dim.''Job Type Code'' in (\u0027002000\u0027, \u0027002003\u0027, \u0027002008\u0027, \u0027002010\u0027, \u0027002011\u0027, \u0027002012\u0027, \u0027002016\u0027, \u0027002022\u0027, \u0027002024\u0027, \u0027002025\u0027, \u0027002026\u0027, \u0027002027\u0027, \u0027002030\u0027, \u0027002031\u0027, \u0027002032\u0027, \u0027003100\u0027, \u0027003500\u0027)#(lf)  or  org_dim.''Department Identifier'' in (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027)) #(lf)  and appt_dim.''Event Result Description'' not in (\u0027No Show\u0027,\u0027Cancelled\u0027)#(lf)  --and date_dim.''Performance Year Name'' in (\u00272020\u0027,\u00272021\u0027,\u00272022\u0027,\u00272023\u0027)#(lf)  and date_dim.''Calendar Year Name'' in (\u00272020\u0027,\u00272021\u0027,\u00272022\u0027,\u00272023\u0027)#(lf)#(lf)group by#(lf)  appt_fct.''Appointment Dimension Surrogate Key'',#(lf)  appt_fct.''Person Dimension Surrogate Key'',#(lf)  mbr_dim.''Membership Type Description'',#(lf)  appt_dim.''Appointment Date'',#(lf)  appt_dim.''Appointment Type Description'',#(lf)  date_dim.''Performance Year Name'',#(lf)  org_dim.''Source System Key Text'',#(lf)  org_dim.''First Name'' || \u0027 \u0027 || org_dim.''Last Name'',#(lf)  pers_dim.''Source System Key Text''#(lf)             #(lf)#(lf)having #(lf)sum(appt_fct.''Appointment Occurs'')\u003e0', null, [EnableFolding=true]),    Custom1 = Table.AddColumn(#'Source', 'Tasks Days from Today', each Duration.Days (DateTime.Date(DateTime.LocalNow()) - [Appointment Date] )),    Custom2 = Table.AddColumn(#'Custom1', 'Type', each 'Prospect Connects'),    Custom3 = Table.AddColumn(#'Custom2', 'Start of Week', each Date.StartOfWeek([#'Appointment Date'],1)),    Custom4 = Table.AddColumn(#'Custom3', 'VitalStats Week', each if( [Tasks Days from Today] \u003e= 358 and [Tasks Days from Today] \u003c= 364) then '52'else if( [Tasks Days from Today] \u003e= 57 and [Tasks Days from Today] \u003c= 91) then '13'else if( [Tasks Days from Today] \u003e= 29 and [Tasks Days from Today] \u003c= 56) then '8'else if( [Tasks Days from Today] \u003e= 8 and [Tasks Days from Today] \u003c= 28) then '4'else if ([Tasks Days from Today] \u003e= 0 and [Tasks Days from Today] \u003c= 7) then 'Last Week'else ' '),    Custom5 = Table.SelectRows(#'Custom4', each ([VitalStats Week] \u003c\u003e ' ')),    #'Grouped Rows' = Table.Group(#'Custom5', {'EMP_ID', 'Type', 'VitalStats Week'}, {{'Total', each List.Sum([appt_occurs]), type nullable number}}),    #'Added Custom' = Table.AddColumn(#'Grouped Rows', '4 week avg', each if[VitalStats Week] = '4' then ([Total]/4) else null),    Custom6 = Table.AddColumn(#'Added Custom', '8 week avg', each if[VitalStats Week] = '8' then ([Total]/8) else null),    Custom7 = Table.AddColumn(#'Custom6', '13 week avg', each if[VitalStats Week] = '13' then ([Total]/13) else null),    Custom8 = Table.AddColumn(#'Custom7', '52 week avg', each if[VitalStats Week] = '52' then ([Total]/52) else null),    #'Added Custom1' = Table.AddColumn(Custom8, 'Last Week', each if [VitalStats Week] = 'Last Week' then [Total] else null),    #'Replaced Value' = Table.ReplaceValue(#'Added Custom1',null,0,Replacer.ReplaceValue,{'4 week avg', '8 week avg', '13 week avg', '52 week avg', 'Last Week'}),    #'Added Custom2' = Table.AddColumn(#'Replaced Value', 'VitalStats Indicator', each if [VitalStats Week] = 'Last Week' then 'Last Week'else if [VitalStats Week] = '4' then '4 Week'else if [VitalStats Week] = '8' then '8 Week'else if [VitalStats Week] = '13' then '13 Week'else if [VitalStats Week] = '52' then '52 Week'else ' '),    #'Reordered Columns' = Table.ReorderColumns(#'Added Custom2',{'EMP_ID', 'Type', 'VitalStats Indicator', 'VitalStats Week', 'Total', '4 week avg', '8 week avg', '13 week avg', '52 week avg', 'Last Week'}),    #'Removed Columns' = Table.RemoveColumns(#'Reordered Columns',{'VitalStats Week'})in    #'Removed Columns'"},{"name":"Advice_newclient_list","expression":"let    Source = Csv.Document(File.Contents('////VSSHR//SHARED//Public//DI and BI//Field Reporting//MGP//advice_newclient_alllist.csv'),[Delimiter=',', Columns=5, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'TSid', type text}, {'CUST_ID_NBR', Int64.Type}, {'fld_new_clnt_dt', type date}, {'cyr_goal_conv', Int64.Type}, {'clnt_age_typ', type text}}),    #'Added Custom' = Table.AddColumn(#'Changed Type', 'GoalStatus', each if([cyr_goal_conv])= 1 then 'Y'else if([cyr_goal_conv]) = 0 then 'N'  else null)in    #'Added Custom'"},{"name":"MGP_CLIENTS","expression":"let    Source = Csv.Document(File.Contents('////VSSHR//SHARED//Public//DI and BI//Field Reporting//MGP//MGP_CLIENTS.csv'),[Delimiter=',', Columns=14, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'asOfDt', type date}, {'MGP_hhld_id', Int64.Type}, {'cust_id_nbr', Int64.Type}, {'mgp_hhld_crdt', type date}, {'mgp_hhld_updt', type date}, {'max_rpt_crdt', type date}, {'TSid_MGP', type text}, {'ClientType', Int64.Type}, {'tot_goals', Int64.Type}, {'Goals_str', type text}, {'tot_blocks_complete', Int64.Type}, {'cnt_goal_blks_cmplt', Int64.Type}, {'MGP_status_cde', type text}}),    #'Replaced Value' = Table.ReplaceValue(#'Changed Type',null,0,Replacer.ReplaceValue,{'tot_blocks_complete'}),    #'Replaced Value1' = Table.ReplaceValue(#'Replaced Value',null,0,Replacer.ReplaceValue,{'cnt_goal_blks_cmplt'}),    #'Added Conditional Column' = Table.AddColumn(#'Replaced Value1', 'Goals Documented', each if [tot_goals] \u003e 0 then 1 else if [cnt_goal_blks_cmplt] \u003e 0 then 1 else 0),    #'Changed Type1' = Table.TransformColumnTypes(#'Added Conditional Column',{{'cnt_goal_blks_cmplt', Int64.Type}}),    #'Inserted Addition' = Table.AddColumn(#'Changed Type1', 'Addition', each [tot_goals] + [cnt_goal_blks_cmplt], Int64.Type),    #'Renamed Columns' = Table.RenameColumns(#'Inserted Addition',{{'Addition', 'Goals Documented Total'}}),    #'Added Custom' = Table.AddColumn(#'Renamed Columns', 'Goal Indicator', each if([Goals Documented Total]) \u003e 0 then 'Y'  else 'N')in    #'Added Custom'"},{"name":"Vital Stats DB Appointment Detail_EDW","expression":"let    Source = Sql.Database('dbedwdwprd', 'enterprisedatamart', [Query='select pers_dim.[Source System Key Text] as ThriventId,#(lf)       pers_dim.[First Name] + \u0027 \u0027 + pers_dim.[Last Name] as ClientName,#(lf)       appt_fct.[Appointment Dimension Surrogate Key],#(lf)       appt_fct.[Person Dimension Surrogate Key],#(lf)       sum(appt_fct.[Appointment Occurs]) [appt_occurs],#(lf)       max(appt_fct.[Person Occurs]) [Person Occurs],#(lf)       mbr_dim.[Membership Type Description],#(lf)#(tab)   case when appt_dim.[Field User Count] \u003c\u003e 0 and appt_dim.[Appointment Type Code] in (\u0027Connect\u0027,\u0027Gather Data\u0027,\u0027Take Action\u0027,\u0027Strategy Call/Meeting\u0027,\u0027Review\u0027,\u0027Service\u0027,\u0027Discover\u0027,\u0027Deliver\u0027)#(lf)#(tab)#(tab) then 1#(lf)#(tab)#(tab) else 0#(lf)#(tab)   end [JFW_IND],#(lf)       appt_dim.[Appointment Date],#(lf)       case when appt_dim.[Appointment Type Code] in (\u0027Gather Data\u0027) Then \u0027Discover\u0027#(lf)            when appt_dim.[Appointment Type Code] in (\u0027Take Action\u0027) Then \u0027Deliver\u0027#(lf)            when appt_dim.[Appointment Type Code] not in (\u0027Gather Data\u0027,\u0027Take Action\u0027) then Appt_dim.[Appointment Type Description]#(lf)       end as [Appointment Type Code],#(lf)       --appt_dim.[Appointment Type Description] [Appointment Type Code],#(lf)       --date_dim.[Performance Year Name],#(lf)#(tab)   date_dim.[Calendar Year Name] as [Performance Year Name],#(lf)       org_dim.[Source System Key Text] [EMP_ID],#(lf)       org_dim.[Conference Qualification Type Code],#(lf)       org_dim.[First Name] + \u0027 \u0027 + org_dim.[Last Name],#(lf)       (Select max(A.[Life Segment Value Description])#(lf)          from EnterpriseDataMart.DM_01.[Person Dimension] A#(lf)         where appt_fct.[Person Dimension Surrogate Key]=A.[Person Dimension Surrogate Key]#(lf)           and A.[Current Row Indicator] = \u0027Y\u0027) as [Life Segment Value Description] #(lf)#(lf)  from EnterpriseDataMart.DM_01.[Appointment Combine Fact] appt_fct left join #(lf)       EnterpriseDataMart.DM_01.[Person Dimension] as Pers_dim#(lf)    on (appt_fct.[Person Dimension Surrogate Key]=pers_dim.[Person Dimension Surrogate Key] and#(lf)        appt_fct.[Person Dimension Version Number] = pers_dim.[Person Dimension Version Number]) left join#(lf)       EnterpriseDataMart.DM_01.[Membership Type Dimension] mbr_dim#(lf)    on (appt_fct.[Membership Type Dimension Surrogate Key]=mbr_dim.[Membership Type Dimension Surrogate Key]) left join#(lf)#(lf)       EnterpriseDataMart.DM_01.[Appointment Dimension] appt_dim#(lf)    on (appt_fct.[Appointment Dimension Surrogate Key]=appt_dim.[Appointment Dimension Surrogate Key]) left join#(lf)#(lf)       EnterpriseDataMart.DM_01.[Date Dimension] date_dim#(lf)    on (appt_dim.[Appointment Date]=date_dim.[Calendar Date Date]) left join#(lf)#(lf)       EnterpriseDataMart.DM_01.[Organization Dimension] org_dim#(lf)    on ((appt_fct.[Appointment Organization Dimension Surrogate Key]=org_dim.[Organization Dimension Surrogate Key]) and #(lf)       ((org_dim.[Effective Begin Date] \u003c= appt_dim.[Appointment Date]) and (appt_dim.[Appointment Date] \u003c= org_dim.[Effective End Date]))) left join#(lf)#(tab) #(lf)       EnterpriseDataMart.DM_01.[SALE_HIER_DIM] sale_hier_dim#(lf)    on ((org_dim.[Source System Key Text]=sale_hier_dim.[SALE_HIER_ID] and#(lf)#(tab)(sale_hier_dim.EFF_BEG_DT\u003c=appt_dim.[Appointment Date]) and#(lf)#(tab)(appt_dim.[Appointment Date]\u003c= sale_hier_dim.EFF_END_DT) and #(lf)#(tab) sale_hier_dim.CURR_ROW_IND = \u0027Y\u0027))#(lf)#(lf)where appt_dim.[Current Row Indicator] = \u0027Y\u0027#(lf)  and appt_dim.[Appointment Create Date Over 14 Days] = \u0027N\u0027#(lf)  and appt_fct.[Person Dimension Surrogate Key] \u003c\u003e 0#(lf)  and appt_fct.[Appointment Status Name] \u003c\u003e \u0027Declined\u0027#(lf)  and appt_dim.[Appointment Type Code] \u003c\u003e \u0027UNK\u0027#(lf)  and sale_hier_dim.ORZN_DEPT_CDE in (\u00270115\u0027,\u00270190\u0027,\u00270283\u0027,\u00270291\u0027,\u00270361\u0027,\u00270383\u0027,\u00270384\u0027,\u00270435\u0027,\u00270525\u0027)#(lf)--and sale_hier_dim.ORZN_DEPT_CDE in (\u00270115\u0027,\u00270165\u0027,\u00270190\u0027,\u00270240\u0027,\u00270283\u0027,\u00270291\u0027,\u00270361\u0027,\u00270365\u0027, \u00270383\u0027,\u00270384\u0027,\u00270410\u0027,\u00270435\u0027,\u00270475\u0027,\u00270496\u0027,\u00270525\u0027,\u00270529\u0027,\u00270810\u0027)#(lf)#(lf) and (org_dim.[Job Type Code] in (\u0027002000\u0027, \u0027002003\u0027, \u0027002008\u0027, \u0027002010\u0027, \u0027002011\u0027, \u0027002012\u0027, \u0027002016\u0027, \u0027002022\u0027, \u0027002024\u0027, \u0027002025\u0027, \u0027002026\u0027, \u0027002027\u0027, \u0027002030\u0027, \u0027002031\u0027, \u0027002032\u0027, \u0027003100\u0027, \u0027003500\u0027)#(lf)  or  org_dim.[Department Identifier] in (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027)) #(lf)  and appt_dim.[Event Result Description] not in (\u0027No Show\u0027,\u0027Cancelled\u0027)#(lf)  --and date_dim.[Performance Year Name] in (\u00272020\u0027,\u00272021\u0027,\u00272022\u0027,\u00272023\u0027)#(lf)  and date_dim.[Calendar Year Name] in (\u00272020\u0027,\u00272021\u0027,\u00272022\u0027,\u00272023\u0027)#(lf) #(lf)group by#(lf)  appt_fct.[Appointment Dimension Surrogate Key],#(lf)  appt_fct.[Person Dimension Surrogate Key],#(lf)  mbr_dim.[Membership Type Description],#(lf)  appt_dim.[Field User Count],#(lf)  appt_dim.[Appointment Date],#(lf)  appt_dim.[Appointment Type Code],#(lf)  appt_dim.[Appointment Type Description],#(lf)  --date_dim.[Performance Year Name],#(lf)  date_dim.[Calendar Year Name],#(lf)  org_dim.[Source System Key Text],#(lf)  org_dim.[Conference Qualification Type Code],#(lf)  org_dim.[First Name] + \u0027 \u0027 + org_dim.[Last Name],#(lf)  pers_dim.[Source System Key Text],#(lf)  pers_dim.[First Name] + \u0027 \u0027 + pers_dim.[Last Name] #(lf)#(lf)having #(lf)sum(appt_fct.[Appointment Occurs])\u003e0']),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Appointment Date', type date}, {'ThriventId', Int64.Type}}),    #'Added Custom' = Table.AddColumn(#'Changed Type', 'Conference Qualification', each if [Conference Qualification Type Code] = '33' then 'Pinnacle A' else if [Conference Qualification Type Code] = '32' then 'Pinnacle B' else if [Conference Qualification Type Code] = '31' then 'Pinnacle C' else if [Conference Qualification Type Code] = '29' then 'Summit A' else if [Conference Qualification Type Code] = '28' then 'Summit B' else if [Conference Qualification Type Code] = '27' then 'Summit C' else if [Conference Qualification Type Code] = '22' then 'Sierra A' else if [Conference Qualification Type Code] = '20' then 'Sierra B' else 'Non-Qualified')in    #'Added Custom'"},{"name":"Client_HHLD_NON_MGP","expression":"let    Source = DB2.Database('PODWH021:50000', 'PODWH021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT A.CUST_SK,#(lf)       A.CUST_ID_NBR,#(lf)       case when xx.HOH_NAMExx \u003c\u003e \u0027\u0027 then xx.HOH_NAMExx#(lf)#(tab)#(tab)     else A.CUST_LGAL_LST_NM||\u0027, \u0027||A.CUST_LGAL_FRST_NM#(lf)#(tab)     end as HOH_NAME,#(lf)#(tab)     A.CUST_LGAL_LST_NM||\u0027, \u0027||A.CUST_LGAL_FRST_NM as Client_Name,#(lf)#(tab)     A.CUST_LGAL_FMT_NM,#(lf)       A.CUST_LGAL_FRST_NM,#(lf)       A.CUST_LGAL_LST_NM,#(lf)       A.CUST_GRLN_TYP_CDE,#(lf)       case when a.cust_grln_typ_cde in (\u0027PRIMD\u0027,\u0027PRIM\u0027) then 1#(lf)#(tab)     else 0#(lf)#(tab)   end as HOH_IND,#(lf)       A.CUST_GRP_ID_NBR,#(lf)       B.STP_STS_CDE,#(lf)       case when B.fut_vlu_indx_cde = \u0027GOLD\u0027 then \u0027Gold\u0027#(lf)            when B.fut_vlu_indx_cde = \u0027SILVR\u0027 then \u0027Silver\u0027#(lf)            when B.fut_vlu_indx_cde = \u0027BRNZE\u0027 then \u0027Bronze\u0027#(lf)            when B.fut_vlu_indx_cde in (\u0027NA\u0027,\u0027UNK\u0027,\u0027 \u0027 ) then \u0027UNK\u0027#(lf)       end as FutureValue,#(lf)       case when A.mbr_typ_cde = \u0027BEN\u0027 then \u0027Benefit\u0027#(lf)            when A.mbr_typ_cde = \u0027ASSOC\u0027 then \u0027Associate\u0027#(lf)            when A.mbr_typ_cde = \u0027JUV\u0027 then \u0027Juvenile\u0027#(lf)            when A.mbr_typ_cde = \u0027NON\u0027 and A.clas_ctrc_rltn_cde \u003c\u003e \u0027NA\u0027 then \u0027Non-Member\u0027#(lf)            when A.mbr_typ_cde = \u0027NON\u0027 and A.clas_ctrc_rltn_cde = \u0027NA\u0027 then \u0027Prospect\u0027#(lf)       end as MBRTYPE,#(lf)       case when A.cust_age \u003c 0 then \u0027UKWN\u0027#(lf)#(tab)          when A.cust_age \u003c 18 then \u0027\u003c18\u0027#(lf)#(tab)          when A.cust_age \u003c 25 then \u002718-24\u0027#(lf)#(tab)          when A.cust_age \u003c 35 then \u002725-34\u0027#(lf)#(tab)          when A.cust_age \u003c 45 then \u002735-44\u0027#(lf)#(tab)          when A.cust_age \u003c 55 then \u002745-54\u0027#(lf)#(tab)          when A.cust_age \u003c 65 then \u002755-64\u0027#(lf)#(tab)          when A.cust_age \u003c 75 then \u002765-74\u0027#(lf)#(tab)          when A.cust_age \u003c 85 then \u002775-84\u0027#(lf)#(tab)          when A.cust_age \u003e= 85 then \u002785+\u0027#(lf)#(tab)       else \u0027 \u0027 #(lf)       end as cust_age_grp,#(lf)       case when A.cust_age \u003c 18 then \u0027\u003c18\u0027#(lf)            when A.cust_age \u003e= 18 then \u002718+\u0027#(lf)#(tab)       else \u0027 \u0027#(lf)       end as clnt_age_typ,#(lf)       case when B.fut_vlu_indx_cde = \u0027GOLD\u0027 and B.STP_STS_CDE = \u0027YES\u0027 then \u0027A\u0027#(lf)#(tab)          when B.fut_vlu_indx_cde = \u0027SILVR\u0027 and B.STP_STS_CDE = \u0027YES\u0027 then \u0027B\u0027#(lf)#(tab)#(tab)#(tab)      when B.fut_vlu_indx_cde = \u0027GOLD\u0027 and B.STP_STS_CDE \u003c\u003e \u0027YES\u0027 then \u0027B\u0027#(lf)#(tab)#(tab)#(tab)      when B.fut_vlu_indx_cde = \u0027BRNZE\u0027 and B.STP_STS_CDE = \u0027YES\u0027 then \u0027C\u0027#(lf)#(tab)#(tab)#(tab)      when B.fut_vlu_indx_cde = \u0027SILVR\u0027 and B.STP_STS_CDE \u003c\u003e \u0027YES\u0027 then \u0027C\u0027#(lf)#(tab)#(tab)#(tab)      when B.fut_vlu_indx_cde = \u0027BRNZE\u0027 and B.STP_STS_CDE \u003c\u003e \u0027YES\u0027 then \u0027D\u0027#(lf)         else \u0027 \u0027 #(lf)#(tab)     end as Client_Service_Model,#(lf)       C.EMP_ORZN_ID#(lf)  FROM MEMBER.ITGR_IDVL_ALL_CURR_CFDL A left join#(lf)       MEMBER.CNF_CUST_RESID_MAIL_GRP_DIM_CFDL B#(lf)    ON A.CUST_GRP_SK=B.CUST_GRP_SK inner join #(lf)       CLNT_ASMT_DM.CUST_REPR_ASGN_CURR_CFDL C#(lf)     /*  CLNT_ASMT_DM.CUST_REPR_COMP_RLTN_CURR_CFDL C */#(lf)    ON A.CUST_SK = C.ACRT_CUST_SK AND#(lf)       A.MBR_TYP_CDE IN (\u0027NON\u0027) AND#(lf)       C.EMP_ORZN_ID LIKE \u0027TS%\u0027 left join#(lf)       HUMAN_RESOURCES.CNF_EMP_DIM_DTL_CURR_CFDL d#(lf)    on C.EMP_ORZN_ID=d.emp_id left join#(lf)#(tab)    (select x.CUST_GRP_ID_NBR,#(lf)              x.CUST_LGAL_LST_NM||\u0027, \u0027||x.CUST_LGAL_FRST_NM as HOH_NAMExx#(lf)#(tab)      from MEMBER.ITGR_IDVL_ALL_CURR_CFDL x#(lf)#(tab)#(tab)    where x.CUST_GRLN_TYP_CDE in (\u0027PRIM\u0027,\u0027PRIMD\u0027)) as xx#(lf)   on A.CUST_GRP_ID_NBR=xx.cust_grp_id_nbr #(lf)#(lf) where a.mbr_typ_cde = \u0027NON\u0027#(lf)   and a.cust_age \u003e= 18 #(lf)   and d.orzn_dept_cde not in (\u00270714\u0027,\u00270716\u0027,\u00277151\u0027)#(lf)   and (d.job_typ_cde in (\u0027002000\u0027,\u0027002010\u0027,\u0027002003\u0027,\u0027002011\u0027,\u0027002012\u0027,\u0027003100\u0027,\u0027002017\u0027,#(lf)                       \u0027002020\u0027,\u0027002021\u0027,\u0027002018\u0027,\u0027002019\u0027,\u0027003500\u0027,\u0027002022\u0027,\u0027002024\u0027,#(lf)                       \u0027002025\u0027,\u0027002026\u0027,\u0027002027\u0027,\u0027002030\u0027,\u0027002031\u0027,\u0027002032\u0027) or #(lf)        d.orzn_dept_cde IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027) and #(lf)        d.job_typ_cde not in (\u00271356\u0027,\u00271658\u0027,\u00272598\u0027,\u00273458\u0027))    #(lf)and d.emp_sts_typ_cde in (\u0027A\u0027)#(lf)']),    #'Replaced Value' = Table.ReplaceValue(Source,'','Unknown',Replacer.ReplaceValue,{'FUTUREVALUE'}),    #'Replaced Value2' = Table.ReplaceValue(#'Replaced Value',' ','U',Replacer.ReplaceValue,{'CLIENT_SERVICE_MODEL'}),    #'Filtered Rows' = Table.SelectRows(#'Replaced Value2', each true),    #'Replaced Value1' = Table.ReplaceValue(#'Filtered Rows',null,'Unknown',Replacer.ReplaceValue,{'FUTUREVALUE'}),    #'Filtered Rows1' = Table.SelectRows(#'Replaced Value1', each true),    #'Merged Queries' = Table.NestedJoin(#'Filtered Rows1', {'CUST_ID_NBR'}, MGP_CLIENTS, {'cust_id_nbr'}, 'MGP_CLIENTS', JoinKind.Inner),    #'Removed Columns' = Table.RemoveColumns(#'Merged Queries',{'MGP_CLIENTS'}),    #'Removed Duplicates' = Table.Distinct(#'Removed Columns', {'CUST_ID_NBR'})in    #'Removed Duplicates'"},{"name":"Licenses \u0026 Credentials","expression":"let    Source = Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com', 'ENTERPRISE_EDW_PRESENTATION_WH', null),    ENTERPRISE_EDW_Database = Source{[Name='ENTERPRISE_EDW',Kind='Database']}[Data],    PRESENTATION_01_Schema = ENTERPRISE_EDW_Database{[Name='PRESENTATION_01',Kind='Schema']}[Data],    #'Workforce Dimension Detail_View' = PRESENTATION_01_Schema{[Name='Workforce Dimension Detail',Kind='View']}[Data],    #'Filtered Rows' = Table.SelectRows(#'Workforce Dimension Detail_View', each ([Current Row Indicator] = 'Y')),    #'Added Custom' = Table.AddColumn(#'Filtered Rows', 'SelInd', each if [Job Type Code]= '002003' then 1 else if [Job Type Code] = '002010' then 1 else if [Job Type Code] = '002011' then 1 else if [Job Type Code] = '002012' then 1 else if [Job Type Code] = '002016' then 1 else if [Job Type Code] = '002017' then 1 else if [Job Type Code] = '002000' then 1 else if [Job Type Code] = '002022' then 1 else if [Job Type Code] = '002024' then 1 else if [Job Type Code] = '002025' then 1 else if [Job Type Code] = '002026' then 1 else if [Job Type Code] = '002027' then 1 else if [Job Type Code] = '002030' then 1 else if [Job Type Code] = '002031' then 1 else if [Job Type Code] = '002032' then 1 else if [Job Type Code] = '003100' then 1 else if [Job Type Code] = '003500' then 1 else if [Job Type Code] = '003602' then 1 else if [Job Type Code] = '003604' then 1 else if [Job Type Code] = '003605' then 1 else if [Job Type Code] = '003606' then 1 else if [Job Type Code] = '003607' then 1 else if [Job Type Code] = '003608' then 1 else if [Organization Department Code] = '5405' then 1 else if [Organization Department Code] = '5407' then 1 else if [Organization Department Code] = '5408' then 1 else if [Organization Department Code] = '5409' then 1 else if [Organization Department Code] = '6100' then 1 else if [Organization Department Code] = '1701' then 1 else if [Organization Department Code] = '1702' then 1 else if [Organization Department Code] = '1703' then 1   else '0'),    #'Filtered Rows2' = Table.SelectRows(#'Added Custom', each ([Employee Status Type Code] = 'A' or [Employee Status Type Code] = 'I' or [Employee Status Type Code] = 'L') and ([SelInd] = 1)),    #'Removed Columns' = Table.RemoveColumns(#'Filtered Rows2',{'Employee Dimension Effective Begin Timestamp', 'Current Row Indicator', 'Employee Dimension Effective End Timestamp', 'Employee Organization Type Code', 'Gender Code', 'Gender Description', 'Original Hire Date', 'Hire Date', 'Rehire Date', 'Birth Date', 'Marital Status Code', 'Employee Service Date', 'Field Continuous Full Time Service Date', 'Financial Associate Continuous Full Time Service Date', 'Field Total Full Time Service Date', 'Prefix Name', 'Payroll Company Code', 'Payroll Group Code', 'Employee Category Code', 'Address Type Code', 'Preferred Address State Code', 'Preferred Address Country Code', 'Preferred Address Zip 5 Code', 'Preferred Address Zip 4 Code', 'Organization Division Code', 'Product Support Consultant Investment Group Indicator', 'Product Support Consultant Risk Group Indicator', 'Financial Consultant Indicator', 'Senior Financial Consultant Indicator', 'Department Lead Management Indicator', 'Job Title Subtype Code', 'Standard Hours Value', 'Agent Identifier Number', 'Agent Code', 'Wealth Advisor Indicator', 'Broker Dealer Agent Indicator', 'Investment Advisor Representative Indicator', 'General Securities Registration Indicator', 'Financial Representative Deposit Broker Code', 'Employee First Professional Designation Code', 'Employee Second Professional Designation Code', 'Suffix Name', 'Marital Status Description', 'Party Display Two Name', 'Payroll Group Description', 'Employee Category Description', 'Address Type Description', 'Preferred Address Line 1', 'Preferred Address Line 2', 'Preferred Address Line 3', 'Preferred Address City Name', 'Preferred Address State Description', 'Preferred Address County Name', 'Business Telephone Number', 'Home Telephone Number', 'Cellular Telephone Number', 'Fax Telephone Number', 'Toll Free Telephone Number', 'Workforce Dimension Detail Surrogate Key', 'Workforce Dimension Version Number', 'Financial Representative Segment Code', 'Conference Year', 'Conference Level Number', 'Series One License Status Code', 'Series Four License Status Code', 'Series Nine License Status Code', 'Series Ten License Status Code', 'Series Eighty-six License Status Code', 'Series Eighty-seven License Status Code', 'Organization Department Code', 'Termination Date', 'Adjusted Service Date', 'Job Type Code', 'Employee Status Type Code'}),    #'Replaced Value' = Table.ReplaceValue(#'Removed Columns','N','',Replacer.ReplaceText,{'Chartered Financial Consultant Designation Code', 'Chartered Leadership Fellow Designation Code', 'Chartered Life Underwriter Designation Code', 'Chartered Financial Analyst Designation Code', 'Certified Financial Planner Designation Code', 'Fraternal Insurance Counselor Designation Code', 'Fraternal Insurance Counselor Fellow Designation Code', 'Life Underwriter Training Counsel Fellow Designation Code',  'Series Six License Status Code', 'Series Seven License Status Code', 'Series Twenty-two License Status Code', 'Series Twenty-four License Status Code', 'Series Twenty-six License Status Code', 'Series Twenty-seven License Status Code', 'Series Fifty-one License Status Code', 'Series Fifty-three License Status Code', 'Series Sixty-two License Status Code', 'Series Sixty-three License Status Code', 'Series Sixty-five License Status Code', 'Series Sixty-six License Status Code'}),    #'Replaced Value1' = Table.ReplaceValue(#'Replaced Value','Y','CHFC',Replacer.ReplaceText,{'Chartered Financial Consultant Designation Code'}),    #'Replaced Value2' = Table.ReplaceValue(#'Replaced Value1','Y','CLF',Replacer.ReplaceText,{'Chartered Leadership Fellow Designation Code'}),    #'Replaced Value3' = Table.ReplaceValue(#'Replaced Value2','Y','CLU',Replacer.ReplaceText,{'Chartered Life Underwriter Designation Code'}),    #'Replaced Value4' = Table.ReplaceValue(#'Replaced Value3','Y','CFA',Replacer.ReplaceText,{'Chartered Financial Analyst Designation Code'}),    #'Replaced Value5' = Table.ReplaceValue(#'Replaced Value4','Y','FIC',Replacer.ReplaceText,{'Certified Financial Planner Designation Code'}),    #'Replaced Value6' = Table.ReplaceValue(#'Replaced Value5','Y','FICF',Replacer.ReplaceText,{'Fraternal Insurance Counselor Designation Code'}),    #'Replaced Value7' = Table.ReplaceValue(#'Replaced Value6','Y','CFP',Replacer.ReplaceText,{'Fraternal Insurance Counselor Fellow Designation Code'}),    #'Replaced Value8' = Table.ReplaceValue(#'Replaced Value7','Y','LUTCF',Replacer.ReplaceText,{'Life Underwriter Training Counsel Fellow Designation Code'}),    #'Replaced Value9' = Table.ReplaceValue(#'Replaced Value8','Y','6',Replacer.ReplaceText,{'Series Six License Status Code'}),    #'Replaced Value10' = Table.ReplaceValue(#'Replaced Value9','Y','7',Replacer.ReplaceText,{'Series Seven License Status Code'}),    #'Replaced Value11' = Table.ReplaceValue(#'Replaced Value10','Y','22',Replacer.ReplaceText,{'Series Twenty-two License Status Code'}),    #'Replaced Value12' = Table.ReplaceValue(#'Replaced Value11','Y','24',Replacer.ReplaceText,{'Series Twenty-four License Status Code'}),    #'Replaced Value13' = Table.ReplaceValue(#'Replaced Value12','Y','26',Replacer.ReplaceText,{'Series Twenty-six License Status Code'}),    #'Replaced Value14' = Table.ReplaceValue(#'Replaced Value13','Y','27',Replacer.ReplaceText,{'Series Twenty-seven License Status Code'}),    #'Replaced Value15' = Table.ReplaceValue(#'Replaced Value14','Y','51',Replacer.ReplaceText,{'Series Fifty-one License Status Code'}),    #'Replaced Value16' = Table.ReplaceValue(#'Replaced Value15','Y','53',Replacer.ReplaceText,{'Series Fifty-three License Status Code'}),    #'Replaced Value17' = Table.ReplaceValue(#'Replaced Value16','Y','62',Replacer.ReplaceText,{'Series Sixty-two License Status Code'}),    #'Replaced Value18' = Table.ReplaceValue(#'Replaced Value17','Y','63',Replacer.ReplaceText,{'Series Sixty-three License Status Code'}),    #'Replaced Value19' = Table.ReplaceValue(#'Replaced Value18','Y','65',Replacer.ReplaceText,{'Series Sixty-five License Status Code'}),    #'Replaced Value20' = Table.ReplaceValue(#'Replaced Value19','Y','66',Replacer.ReplaceText,{'Series Sixty-six License Status Code'}),    #'Replaced Value21' = Table.ReplaceValue(#'Replaced Value20','UKW','',Replacer.ReplaceText,{'Chartered Financial Consultant Designation Code', 'Chartered Leadership Fellow Designation Code', 'Chartered Life Underwriter Designation Code', 'Chartered Financial Analyst Designation Code', 'Certified Financial Planner Designation Code', 'Fraternal Insurance Counselor Designation Code', 'Fraternal Insurance Counselor Fellow Designation Code', 'Life Underwriter Training Counsel Fellow Designation Code', 'Series Six License Status Code', 'Series Seven License Status Code', 'Series Twenty-two License Status Code', 'Series Twenty-four License Status Code', 'Series Twenty-six License Status Code', 'Series Twenty-seven License Status Code', 'Series Fifty-one License Status Code', 'Series Fifty-three License Status Code', 'Series Sixty-two License Status Code', 'Series Sixty-three License Status Code', 'Series Sixty-five License Status Code', 'Series Sixty-six License Status Code'}),    #'Added Custom1' = Table.AddColumn(#'Replaced Value21', 'Licenses1', each ([Series Six License Status Code] \u0026 ' ' \u0026 [Series Seven License Status Code] \u0026 ' ' \u0026[#'Series Twenty-two License Status Code'] \u0026 ' ' \u0026[#'Series Twenty-four License Status Code'] \u0026 ' ' \u0026[#'Series Twenty-six License Status Code'] \u0026 ' ' \u0026 [#'Series Sixty-two License Status Code'] \u0026 ' ' \u0026 [#'Series Sixty-three License Status Code'] \u0026 ' ' \u0026 [#'Series Sixty-five License Status Code'] \u0026 ' ' \u0026 [#'Series Sixty-six License Status Code'])),    #'Added Custom2' = Table.AddColumn(#'Added Custom1', 'Credentials', each [Chartered Financial Consultant Designation Code]  \u0026 ' ' \u0026[Chartered Leadership Fellow Designation Code] \u0026 ' ' \u0026[Chartered Life Underwriter Designation Code] \u0026 ' ' \u0026[Chartered Financial Analyst Designation Code] \u0026 ' ' \u0026[Certified Financial Planner Designation Code] \u0026 ' ' \u0026[Fraternal Insurance Counselor Designation Code] \u0026 ' ' \u0026[Fraternal Insurance Counselor Fellow Designation Code] \u0026 ' ' \u0026[Life Underwriter Training Counsel Fellow Designation Code]),    #'Trimmed Text' = Table.TransformColumns(#'Added Custom2',{{'Licenses1', Text.Trim, type text}, {'Credentials', Text.Trim, type text}})in    #'Trimmed Text'"},{"name":"FldGoals2020","expression":"let    Source = Csv.Document(File.Contents('////pnfiles002b//fp_cifs_7834_sas$//MarketAnalysis//FieldReporting//FieldGoals//FldGoals_2020.csv'),[Delimiter=',', Columns=39, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'CORP_EMP_ID_CDE', type text}, {'NAME', type text}, {'RFO', Int64.Type}, {'RFO_Name', type text}, {'JOB_TITLE_CODE', Int64.Type}, {'RPT_TO_ID', type text}, {'Zone_Leader_Name', type text}, {'Division_Code', Int64.Type}, {'DIVISION_NAME', type text}, {'Team_Name', type text}, {'SuccessPro_Name', type text}, {'username', type text}, {'userTags', type text}, {'Referrals', Int64.Type}, {'Approaches', Int64.Type}, {'Prospect_Connects_Held', Int64.Type}, {'Appointments', Int64.Type}, {'NewFinancialCustomers', Int64.Type},  {'NSC_Goal', Int64.Type}, {'GDC_Goal', Int64.Type}, {'Total_Gross_Revenue', Int64.Type}, {'FeeBasedPlanningFees', Int64.Type}, {'FinancialPlans', Int64.Type}, {'As_of_Date', type date}}),    #'Removed Columns' = Table.RemoveColumns(#'Changed Type',{'', '_1', '_2', '_3', '_4', '_5', '_6', '_7', '_8', '_9', '_10', '_11', '_12', '_13', '_14'}),    #'Duplicated Column' = Table.DuplicateColumn(#'Removed Columns', 'As_of_Date', 'As_of_Date - Copy'),    #'Inserted Year' = Table.AddColumn(#'Duplicated Column', 'Year', each Date.Year([#'As_of_Date - Copy']), Int64.Type),    #'Renamed Columns' = Table.RenameColumns(#'Inserted Year',{{'SuccessPro_Name', 'EMP_NM'}})in    #'Renamed Columns'"},{"name":"FldGoals2021","expression":"let    Source = Csv.Document(File.Contents('////pnfiles002b//fp_cifs_7834_sas$//MarketAnalysis//FieldReporting//FieldGoals//FldGoals_2021.csv'),[Delimiter=',', Columns=39, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'CORP_EMP_ID_CDE', type text}, {'NAME', type text}, {'RFO', Int64.Type}, {'RFO_Name', type text}, {'JOB_TITLE_CODE', Int64.Type}, {'RPT_TO_ID', type text}, {'Zone_Leader_Name', type text}, {'Division_Code', Int64.Type}, {'DIVISION_NAME', type text}, {'Team_Name', type text}, {'SuccessPro_Name', type text}, {'username', type text}, {'userTags', type text}, {'Referrals', Int64.Type}, {'Approaches', Int64.Type}, {'Prospect_Connects_Held', Int64.Type}, {'Appointments', Int64.Type}, {'NewFinancialCustomers', Int64.Type},  {'NSC_Goal', Int64.Type}, {'GDC_Goal', Int64.Type}, {'Total_Gross_Revenue', Int64.Type}, {'FeeBasedPlanningFees', Int64.Type}, {'FinancialPlans', Int64.Type}, {'As_of_Date', type date}}),    #'Removed Columns' = Table.RemoveColumns(#'Changed Type',{'', '_1', '_2', '_3', '_4', '_5', '_6', '_7', '_8', '_9', '_10', '_11', '_12', '_13', '_14'}),    #'Duplicated Column' = Table.DuplicateColumn(#'Removed Columns', 'As_of_Date', 'As_of_Date - Copy'),    #'Inserted Year' = Table.AddColumn(#'Duplicated Column', 'Year', each Date.Year([#'As_of_Date - Copy']), Int64.Type),    #'Renamed Columns' = Table.RenameColumns(#'Inserted Year',{{'SuccessPro_Name', 'EMP_NM'}})in    #'Renamed Columns'"},{"name":"DM_01 Vital Stats Summary Fact_EDW","expression":"let    Source = Sql.Database('dbedwdwprd', 'enterprisedatamart', [Query='Select A.[Appointment Count],#(lf)       A.[Appointment Organization Dimension Surrogate Key],#(lf)       A.[Appointment Organization Version Number],#(lf)       A.[Contract Count],#(lf)       A.[GRID Credit Amount],#(lf)       A.[GRID Credit Contract Count],#(lf)       A.[Person Appointment Count],#(lf)       A.[Person Contract Count],#(lf)       A.[Person Contract Grid Credit Count],#(lf)       A.[Person Count],#(lf)       A.[Referral count],#(lf)       A.[Vital Stats Calculation Date],#(lf)       B.[Source System Key Text] [EMP_ID]#(lf)#(lf)From EnterpriseDataMart.DM_01.[Vital Stats Summary Fact] as A left join #(lf)     EnterpriseDataMart.DM_01.[Organization Dimension] B#(lf)  on A.[Appointment Organization Dimension Surrogate Key]=B.[Organization Dimension Surrogate Key] and B.[Current Row Indicator] = \u0027Y\u0027#(lf)#(tab)']),    #'Added Custom' = Table.AddColumn(Source, 'Appointments_Per_Customer', each [Person Count]/[Person Appointment Count]),    #'Changed Type' = Table.TransformColumnTypes(#'Added Custom',{{'Appointments_Per_Customer', type number}}),    #'Added Custom1' = Table.AddColumn(#'Changed Type', 'Total Close Rate', each [Person Contract Count] / [Person Count]),    #'Changed Type1' = Table.TransformColumnTypes(#'Added Custom1',{{'Total Close Rate', type number}})in    #'Changed Type1'"},{"name":"FA Performance","expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//SHARED//Public//DI and BI//Field Reporting//What\u0027s New and Alert Message//What\u0027s New and Alert Message.xlsx'), null, true),    #'FA Performance_Sheet' = Source{[Item='FA Performance',Kind='Sheet']}[Data],    #'Changed Type' = Table.TransformColumnTypes(#'FA Performance_Sheet',{{'Column1', type text}, {'Column2', type text}}),    #'Promoted Headers' = Table.PromoteHeaders(#'Changed Type', [PromoteAllScalars=true]),    #'Changed Type1' = Table.TransformColumnTypes(#'Promoted Headers',{{'What\u0027s New Description', type text}, {'Alert Message', type text}})in    #'Changed Type1'"}],"roles":[{"name":"Home Office","modelPermission":"Read","members":[{"memberName":"obj:ee437677-f0b8-4264-8c52-e205c5bc1e2a@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"ee437677-f0b8-4264-8c52-e205c5bc1e2a","memberType":"Group","identityProvider":"AzureAD"},{"memberName":"obj:0d216a03-5ecb-4979-be8e-7c3904c3a79e@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"0d216a03-5ecb-4979-be8e-7c3904c3a79e","memberType":"Group","identityProvider":"AzureAD"},{"memberName":"obj:43bfd34c-d1b3-40a6-9ce6-9d110ae2e6a9@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"43bfd34c-d1b3-40a6-9ce6-9d110ae2e6a9","memberType":"Group","identityProvider":"AzureAD"},{"memberName":"obj:8fda22c8-bc4a-4aba-bdea-045657fd23df@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"8fda22c8-bc4a-4aba-bdea-045657fd23df","memberType":"Group","identityProvider":"AzureAD"}],"tablePermissions":[{"name":"Role Level Security","filterExpression":"[AD Group] \u003c\u003e 'PBI_FLD_RPTG_HO'"}]},{"name":"Field_TFGT_RFO Leader","modelPermission":"Read","members":[{"memberName":"obj:79d35099-a3c2-4a22-8d79-d84cebdf1b38@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"79d35099-a3c2-4a22-8d79-d84cebdf1b38","memberType":"Group","identityProvider":"AzureAD"},{"memberName":"obj:a9d8eb7f-8e75-4e5e-b329-caf9fcffa9ea@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"a9d8eb7f-8e75-4e5e-b329-caf9fcffa9ea","memberType":"Group","identityProvider":"AzureAD"},{"memberName":"obj:de18b88a-5b86-4d5a-bc53-8523bc34bc5c@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"de18b88a-5b86-4d5a-bc53-8523bc34bc5c","memberType":"Group","identityProvider":"AzureAD"},{"memberName":"obj:8938cc69-7a18-41b5-a42d-2dce2ea2a893@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"8938cc69-7a18-41b5-a42d-2dce2ea2a893","memberType":"Group","identityProvider":"AzureAD"}],"tablePermissions":[{"name":"Role Level Security","filterExpression":"IFERROR(SEARCH(USERNAME(),[REPORT_TO_EMAIL]),-1)\u003e0"}]},{"name":"COE","modelPermission":"Read","members":[{"memberName":"obj:2f621ad2-0668-4906-bf26-4d5ce281db46@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"2f621ad2-0668-4906-bf26-4d5ce281db46","memberType":"Group","identityProvider":"AzureAD"}],"tablePermissions":[{"name":"Role Level Security","filterExpression":"[AD Group] \u003c\u003e 'PBI_FLD_RPTG_COE' "}]},{"name":"RFO Support","modelPermission":"Read","members":[{"memberName":"obj:bc106c61-ca17-4fc1-9713-5893454f8368@020546b9-ddfd-459b-89d1-12a53f27a5e2","memberId":"bc106c61-ca17-4fc1-9713-5893454f8368","memberType":"Group","identityProvider":"AzureAD"}],"tablePermissions":[{"name":"Role Level Security","filterExpression":"[Department Number] = lookupvalue([Department Number],[REPORT_TO_EMAIL],username())"}]}],"configuredBy":"xPowerBi_Prod@thrivent.com","configuredById":"5aab6987-e004-43c0-b69a-09c27972e0f9","isEffectiveIdentityRequired":true,"isEffectiveIdentityRolesRequired":true,"refreshSchedule":{"days":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"times":["09:30"],"enabled":true,"localTimeZoneId":"Central Standard Time","notifyOption":"MailOnFailure"},"targetStorageMode":"Abf","createdDate":"2024-03-06T17:16:47.427","contentProviderType":"PbixInImportMode"},{"id":"e63c5f8f-0124-46ba-8291-6984d3a11278","name":"Associate Rep Dashboard","tables":[{"name":"Vital Stats","isHidden":false,"storageMode":"Import","columns":[{"name":"ThriventId","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Appointment Dimension Surrogate Key","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Person Dimension Surrogate Key","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"appt_occurs","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Person Occurs","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Membership Type Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Appointment Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Appointment Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Performance Year Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Column1","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Life Segment Value Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JFW_IND","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Appointment Count","expression":"distinctcount([Appointment Dimension Surrogate Key])","isHidden":false},{"name":"As of","expression":"NOW()-1","isHidden":false}],"source":[{"expression":"let    Source = Sql.Database('dbedwdwprd', 'enterprisedatamart', [Query='select pers_dim.[Source System Key Text] as ThriventId,#(lf)   -- appt_fct.[Worker Appointment Association],#(lf)      appt_fct.[Appointment Dimension Surrogate Key],#(lf)      appt_fct.[Person Dimension Surrogate Key],#(lf)   -- appt_fct.[Appointment Organization Dimension Key],#(lf)   -- appt_fct.[Appointment Organization Dimension Surrogate Key],#(lf)      sum(appt_fct.[Appointment Occurs]) [appt_occurs],#(lf)      max(appt_fct.[Person Occurs]) [Person Occurs],#(lf)      mbr_dim.[Membership Type Description],#(lf)      appt_dim.[Appointment Date],#(lf)      appt_dim.[Appointment Type Description] [Appointment Type Code],#(lf)      date_dim.[Calendar Year Name] [Performance Year Name],#(lf)      org_dim.[Source System Key Text] [EMP_ID],#(lf)    --sale_hier_dim.ORZN_DEPT_CDE [RFO Zone Name],#(lf)    --sale_hier_dim.ORZN_ZONE_CDE [RFO Zone Identifier],#(lf)      org_dim.[First Name] + \u0027 \u0027 + org_dim.[Last Name],#(lf)      (Select max(A.[Life Segment Value Description])#(lf)         from EnterpriseDataMart.DM_01.[Person Dimension] A#(lf)        where appt_fct.[Person Dimension Surrogate Key]=A.[Person Dimension Surrogate Key]#(lf)        and A.[Current Row Indicator] = \u0027Y\u0027) as [Life Segment Value Description],#(lf)case when appt_dim.[Field User Count] \u003c\u003e 0 and appt_dim.[Appointment Type Code] in (\u0027Connect\u0027,\u0027Gather Data\u0027,\u0027Take Action\u0027,\u0027Strategy Call/Meeting\u0027,\u0027Review\u0027,\u0027Service\u0027,\u0027Deliver\u0027,\u0027Discover\u0027)#(lf)                                then 1#(lf)                                else 0#(lf)                               end [JFW_IND]#(lf)#(lf)  from EnterpriseDataMart.DM_01.[Appointment Combine Fact] appt_fct left join #(lf)       EnterpriseDataMart.DM_01.[Person Dimension] as Pers_dim#(lf)    on (appt_fct.[Person Dimension Surrogate Key]=pers_dim.[Person Dimension Surrogate Key] and#(lf)        appt_fct.[Person Dimension Version Number] = pers_dim.[Person Dimension Version Number]) left join#(lf)       EnterpriseDataMart.DM_01.[Membership Type Dimension] mbr_dim#(lf)    on (appt_fct.[Membership Type Dimension Surrogate Key]=mbr_dim.[Membership Type Dimension Surrogate Key]) left join#(lf)#(lf)       EnterpriseDataMart.DM_01.[Appointment Dimension] appt_dim#(lf)    on (appt_fct.[Appointment Dimension Surrogate Key]=appt_dim.[Appointment Dimension Surrogate Key]) left join#(lf)#(lf)       EnterpriseDataMart.DM_01.[Date Dimension] date_dim#(lf)    on (appt_dim.[Appointment Date]=date_dim.[Calendar Date Date]) left join#(lf)#(lf)       EnterpriseDataMart.DM_01.[Organization Dimension] org_dim#(lf)    on ((appt_fct.[Appointment Organization Dimension Surrogate Key]=org_dim.[Organization Dimension Surrogate Key]) and #(lf)       ((org_dim.[Effective Begin Date] \u003c= appt_dim.[Appointment Date]) and (appt_dim.[Appointment Date] \u003c= org_dim.[Effective End Date]))) left join#(lf)#(tab) #(lf)       EnterpriseDataMart.DM_01.[SALE_HIER_DIM] sale_hier_dim#(lf)    on ((org_dim.[Source System Key Text]=sale_hier_dim.[SALE_HIER_ID] and#(lf)#(tab)(sale_hier_dim.EFF_BEG_DT\u003c=appt_dim.[Appointment Date]) and#(lf)#(tab)(appt_dim.[Appointment Date]\u003c= sale_hier_dim.EFF_END_DT) and #(lf)#(tab) sale_hier_dim.CURR_ROW_IND = \u0027Y\u0027))#(lf)#(lf)where appt_dim.[Current Row Indicator] = \u0027Y\u0027#(lf)  and appt_dim.[Appointment Create Date Over 14 Days] = \u0027N\u0027#(lf)  and appt_fct.[Person Dimension Surrogate Key] \u003c\u003e 0#(lf)  and appt_fct.[Appointment Status Name] \u003c\u003e \u0027Declined\u0027#(lf)  and appt_dim.[Appointment Type Code] \u003c\u003e \u0027UNK\u0027#(lf)  and sale_hier_dim.ORZN_DEPT_CDE in (\u00270115\u0027,\u00270165\u0027,\u00270190\u0027,\u00270240\u0027,\u00270283\u0027,\u00270291\u0027,\u00270361\u0027,\u00270365\u0027, \u00270383\u0027,\u00270384\u0027,\u00270410\u0027,\u00270435\u0027,\u00270475\u0027,\u00270496\u0027,\u00270525\u0027,\u00270529\u0027,\u00270810\u0027)#(lf) and (org_dim.[Job Type Code] in (\u0027002000\u0027, \u0027002003\u0027, \u0027002008\u0027, \u0027002010\u0027, \u0027002011\u0027, \u0027002012\u0027, \u0027002016\u0027, \u0027002022\u0027, \u0027002024\u0027, \u0027002025\u0027, \u0027002026\u0027, \u0027002027\u0027, \u0027002030\u0027, \u0027002031\u0027, \u0027002032\u0027, \u0027003100\u0027, \u0027003500\u0027)#(lf)  or  org_dim.[Department Identifier] in (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027)) #(lf)  and appt_dim.[Event Result Description] not in (\u0027No Show\u0027,\u0027Cancelled\u0027)#(lf)  and date_dim.[Calendar Year Name] in (\u00272021\u0027,\u00272022\u0027,\u00272023\u0027,\u00272024\u0027)#(lf)#(lf)group by#(lf)--appt_fct.[Worker Appointment Association],#(lf)  appt_fct.[Appointment Dimension Surrogate Key],#(lf)  appt_fct.[Person Dimension Surrogate Key],#(lf)  mbr_dim.[Membership Type Description],#(lf)  appt_dim.[Appointment Date],#(lf)  appt_dim.[Appointment Type Description],#(lf)  date_dim.[Calendar Year Name],#(lf)--sale_hier_dim.ORZN_DEPT_CDE,#(lf)--sale_hier_dim.ORZN_ZONE_CDE,#(lf)  org_dim.[Source System Key Text],#(lf)  org_dim.[First Name] + \u0027 \u0027 + org_dim.[Last Name],#(lf)  pers_dim.[Source System Key Text], #(lf)--appt_fct.[Appointment Organization Dimension Key],#(lf)--appt_fct.[Appointment Organization Dimension Surrogate Key],#(lf)case when appt_dim.[Field User Count] \u003c\u003e 0 and appt_dim.[Appointment Type Code] in (\u0027Connect\u0027,\u0027Gather Data\u0027,\u0027Take Action\u0027,\u0027Strategy Call/Meeting\u0027,\u0027Review\u0027,\u0027Service\u0027,\u0027Deliver\u0027,\u0027Discover\u0027)#(lf)                                then 1#(lf)                                else 0#(lf)                               end#(lf)#(lf)having #(lf)sum(appt_fct.[Appointment Occurs])\u003e0', CommandTimeout=#duration(69, 10, 39, 0)]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Appointment Date', type date}}),    #'Filtered Rows' = Table.SelectRows(#'Changed Type', each ([Appointment Type Code] \u003c\u003e 'Other'))in    #'Filtered Rows'"}]},{"name":"RR_In_and_Out","isHidden":false,"storageMode":"Import","columns":[{"name":"Division_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Division_Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"RFO_Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP_ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Zone_ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Zone_Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMPL_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Zone_Leader_Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TITLE_CODE_2","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"JOB_TITLE_NM_2","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MGT_RLTN_BEG_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"MGT_RLTN_END_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Days_in_RR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"CNTRCT_HIRE_STATUS","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Recode_CNTRCT_HIRE_STATUS","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CNTRCT_TERMIN_STS","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Term_ASD_Tenure","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Term_ASD_w_BI_Tenure","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Term_Transfer_Status","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ADJ_SVC_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"EMPL_SEX_CODE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMPL_BIRTH_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Contract_Hire_Age","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Contract_Hire_Age_Group","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S6_LIC_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S7_LIC_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S63_LIC_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S65_LIC_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S66_LIC_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"INVS_ADVR_REPR_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S7_65_66","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PREV_TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PREV_JOB","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"PREV_END_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"DIFFERENCE","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"FUTURE_TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FUTURE_JOB","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"FUTURE_BEG_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"FUTURE_DIFFERENCE","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"48 mo check","dataType":"String","isHidden":false,"expression":"IF(RR_In_and_Out[MGT_RLTN_BEG_DATE]\u003e(DATE(YEAR(NOW())-4,MONTH(NOW()),DAY(NOW()))),'Y','N')","columnType":"Calculated"},{"name":"Months Since Red Role","dataType":"String","isHidden":false,"expression":"if(day(RR_In_and_Out[MGT_RLTN_BEG_DATE])\u003eday(Now()),(year(now())-year(RR_In_and_Out[MGT_RLTN_BEG_DATE]))*12+month(now())-month(RR_In_and_Out[MGT_RLTN_BEG_DATE])-1,(year(now())-year(RR_In_and_Out[MGT_RLTN_BEG_DATE]))*12+month(now())-month(RR_In_and_Out[MGT_RLTN_BEG_DATE]))","columnType":"Calculated"},{"name":"Days Since RR Start","dataType":"Int64","isHidden":false,"expression":"NOW()-\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]","columnType":"Calculated"},{"name":"Red Role Tenure","dataType":"String","isHidden":false,"expression":"if(RR_In_and_Out[Year]='CY',if(DATEDIFF(\u0027RR_In_and_Out\u0027[Adj Start Date],Today(),DAY)\u003e119,'13-17 weeks',if(DATEDIFF(\u0027RR_In_and_Out\u0027[Adj Start Date],Today(),DAY)\u003e91,'13-17 weeks',if(DATEDIFF(\u0027RR_In_and_Out\u0027[Adj Start Date],Today(),DAY)\u003e63,'9-13 weeks',if(DATEDIFF(\u0027RR_In_and_Out\u0027[Adj Start Date],Today(),DAY)\u003e35,'5-9 weeks','0-5 weeks')))),if(RR_In_and_Out[Days Since RR Start]\u003e484,'NA',if(RR_In_and_Out[Days Since RR Start]\u003e456,'13-17 weeks',if(RR_In_and_Out[Days Since RR Start]\u003e428,'9-13 weeks',if(RR_In_and_Out[Days Since RR Start]\u003e400,'5-9 weeks','0-5 weeks')))))","columnType":"Calculated"},{"name":"Appointment Status","dataType":"String","isHidden":false,"expression":"if(\u0027RR_In_and_Out\u0027[Year]='CY',if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='0-5 weeks',    if(\u0027Vitals RR48\u0027[Total Appointments]\u003e=32, 'Green',if(\u0027Vitals RR48\u0027[Total Appointments]\u003e=16,'Yellow','Red')),    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='5-9 weeks',    if(\u0027Vitals RR48\u0027[Total Appointments]\u003e=64, 'Green',if(\u0027Vitals RR48\u0027[Total Appointments]\u003e=32,'Yellow','Red')),    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='9-13 weeks',    if(\u0027Vitals RR48\u0027[Total Appointments]\u003e=96, 'Green',if(\u0027Vitals RR48\u0027[Total Appointments]\u003e=48,'Yellow','Red')),    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='13-17 weeks',    if(\u0027Vitals RR48\u0027[Total Appointments]\u003e=128, 'Green',if(\u0027Vitals RR48\u0027[Total Appointments]\u003e=64,'Yellow','Red'))    ,'NA'))))    , if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='0-5 weeks',    if(\u0027Vitals RR48\u0027[Total Appointments - PY]\u003e=32, 'Green',if(\u0027Vitals RR48\u0027[Total Appointments - PY]\u003e=16,'Yellow','Red')),    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='5-9 weeks',    if(\u0027Vitals RR48\u0027[Total Appointments - PY]\u003e=64, 'Green',if(\u0027Vitals RR48\u0027[Total Appointments - PY]\u003e=32,'Yellow','Red')),    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='9-13 weeks',    if(\u0027Vitals RR48\u0027[Total Appointments - PY]\u003e=96, 'Green',if(\u0027Vitals RR48\u0027[Total Appointments - PY]\u003e=48,'Yellow','Red')),    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='13-17 weeks',    if(\u0027Vitals RR48\u0027[Total Appointments - PY]\u003e=128, 'Green',if(\u0027Vitals RR48\u0027[Total Appointments - PY]\u003e=64,'Yellow','Red'))    ,'NA')))))","columnType":"Calculated"},{"name":"Grid Revenue Status","dataType":"String","isHidden":false,"expression":"if(\u0027RR_In_and_Out\u0027[Year]='CY',if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='0-5 weeks',    'Green',    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='5-9 weeks',    if(\u0027GridRevenue - Snowflake_RR48\u0027[New Grid Revenue Total]+\u0027Pending RR48\u0027[Pending Amount Total]\u003e=4000, 'Green',if(\u0027GridRevenue - Snowflake_RR48\u0027[New Grid Revenue Total]+\u0027Pending RR48\u0027[Pending Amount Total]\u003e=1000,'Yellow','Red')),    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='9-13 weeks',    if(\u0027GridRevenue - Snowflake_RR48\u0027[New Grid Revenue Total]\u003e=8000, 'Green',if(\u0027GridRevenue - Snowflake_RR48\u0027[New Grid Revenue Total]+\u0027Pending RR48\u0027[Pending Amount Total]\u003e=2000,'Yellow','Red')),    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='13-17 weeks',    if(\u0027GridRevenue - Snowflake_RR48\u0027[New Grid Revenue Total]\u003e=12000, 'Green',if(\u0027GridRevenue - Snowflake_RR48\u0027[New Grid Revenue Total]\u003e=1000,'Yellow','Red')),    'NA')))),    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='0-5 weeks',    'Green',    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='5-9 weeks',    if(\u0027GridRevenue - Snowflake_RR48\u0027[New Grid Revenue Total-PY]+\u0027Pending RR48\u0027[Pending Amount-PY]\u003e=4000, 'Green',if(\u0027GridRevenue - Snowflake_RR48\u0027[New Grid Revenue Total-PY]+\u0027Pending RR48\u0027[Pending Amount-PY]\u003e=1000,'Yellow','Red')),    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='9-13 weeks',    if(\u0027GridRevenue - Snowflake_RR48\u0027[New Grid Revenue Total-PY]\u003e=8000, 'Green',if(\u0027GridRevenue - Snowflake_RR48\u0027[New Grid Revenue Total-PY]+\u0027Pending RR48\u0027[Pending Amount-PY]\u003e=2000,'Yellow','Red')),    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='13-17 weeks',    if(\u0027GridRevenue - Snowflake_RR48\u0027[New Grid Revenue Total-PY]\u003e=12000, 'Green',if(\u0027GridRevenue - Snowflake_RR48\u0027[New Grid Revenue Total-PY]\u003e=1000,'Yellow','Red')),    'NA')))))","columnType":"Calculated"},{"name":"New Client Status","dataType":"String","isHidden":false,"expression":"if(\u0027RR_In_and_Out\u0027[Year]='CY',if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='0-5 weeks',    'Green',    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='5-9 weeks',    if(\u0027NFC RR48\u0027[Total New Clients]\u003e=5, 'Green',if(\u0027NFC RR48\u0027[Total New Clients]\u003e=1,'Yellow','Red')),    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='9-13 weeks',    if(\u0027NFC RR48\u0027[Total New Clients]\u003e=7.5, 'Green',if(\u0027NFC RR48\u0027[Total New Clients]\u003e=2,'Yellow','Red')),    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='13-17 weeks',    if(\u0027NFC RR48\u0027[Total New Clients]\u003e=10, 'Green',if(\u0027NFC RR48\u0027[Total New Clients]\u003e=4,'Yellow','Red')),    'NA')))),if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='0-5 weeks',    'Green',    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='5-9 weeks',    if(\u0027NFC RR48\u0027[Total New Clients-PY]\u003e=5,'Green',if(\u0027NFC RR48\u0027[Total New Clients-PY]\u003e=1,'Yellow','Red')),    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='9-13 weeks',    if(\u0027NFC RR48\u0027[Total New Clients-PY]\u003e=7.5, 'Green',if(\u0027NFC RR48\u0027[Total New Clients-PY]\u003e=2,'Yellow','Red')),    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='13-17 weeks',    if(\u0027NFC RR48\u0027[Total New Clients-PY]\u003e=10, 'Green',if(\u0027NFC RR48\u0027[Total New Clients-PY]\u003e=4,'Yellow','Red')),    'NA')))))","columnType":"Calculated"},{"name":"Advice Status","dataType":"String","isHidden":false,"expression":"if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='0-5 weeks',    if(\u0027CLIENT_HHLD\u0027[Households with Goals - CIF]\u003e1, 'Green',if(\u0027CLIENT_HHLD\u0027[Households with Goals - CIF]=1,'Yellow','Red')),    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='5-9 weeks',    if(\u0027CLIENT_HHLD\u0027[Households with Goals - CIF]\u003e4, 'Green',if(\u0027CLIENT_HHLD\u0027[Households with Goals - CIF]=4,'Yellow','Red')),    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='9-13 weeks',    if(\u0027CLIENT_HHLD\u0027[Households with Goals - CIF]\u003e6, 'Green',if(\u0027CLIENT_HHLD\u0027[Households with Goals - CIF]=6,'Yellow','Red')),    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='13-17 weeks',    if(\u0027CLIENT_HHLD\u0027[Households with Goals - CIF]\u003e10, 'Green',if(\u0027CLIENT_HHLD\u0027[Households with Goals - CIF]=10,'Yellow','Red'))    ,'NA'))))","columnType":"Calculated"},{"name":"Tenure Week","dataType":"String","isHidden":false,"expression":"if(RR_In_and_Out[Year]='CY',if(CEILING(DATEDIFF(\u0027RR_In_and_Out\u0027[Adj Start Date],Today(),DAY)/7,1)\u003c1,1,CEILING(DATEDIFF(\u0027RR_In_and_Out\u0027[Adj Start Date],Today(),DAY)/7,1)),CEILING((RR_In_and_Out[Days Since RR Start]-365)/7,1))","columnType":"Calculated"},{"name":"Weeks Until Minimum","dataType":"String","isHidden":false,"expression":"if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='0-5 weeks',    5-\u0027RR_In_and_Out\u0027[Tenure Week]+1,    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='5-9 weeks',    9-\u0027RR_In_and_Out\u0027[Tenure Week]+1,    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='9-13 weeks',    13-\u0027RR_In_and_Out\u0027[Tenure Week]+1,    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='13-17 weeks',    17-\u0027RR_In_and_Out\u0027[Tenure Week]+1,    9999))))","columnType":"Calculated"},{"name":"Time Until Minimum","dataType":"String","isHidden":false,"expression":"if(\u0027RR_In_and_Out\u0027[Weeks Until Minimum]=1,'\u003c1 Week',    if(\u0027RR_In_and_Out\u0027[Weeks Until Minimum]=2,'1-2 Weeks',    if(\u0027RR_In_and_Out\u0027[Weeks Until Minimum]=3,'2-3 Weeks',    if(\u0027RR_In_and_Out\u0027[Weeks Until Minimum]=4,'3-4 Weeks',    if(\u0027RR_In_and_Out\u0027[Weeks Until Minimum]=5,'4-5 Weeks',    'NA')))))","columnType":"Calculated"},{"name":"Households w Goals","dataType":"String","isHidden":false,"expression":"\u0027MGP_KPIs_detail_RR48\u0027[Households with Goals]","columnType":"Calculated"},{"name":"Within 17 weeks","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Allego_perTSid_R3.trained_sts","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Training Status","dataType":"String","isHidden":false,"expression":"  var _trainingStatus = If(RR_In_and_Out[Allego_perTSid_R3.trained_sts]='InProgr','In Progress',If(RR_In_and_Out[Allego_perTSid_R3.trained_sts]='NotStart','Not Started',RR_In_and_Out[Allego_perTSid_R3.trained_sts]))return  if(isblank(_trainingStatus),'Not Started',_trainingStatus)","columnType":"Calculated"},{"name":"Year","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Within 17 weeks - PY","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Year-TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Reporting Year","dataType":"String","isHidden":false,"expression":"if(RR_In_and_Out[Year]='CY','Current Year','Prior Year')","columnType":"Calculated"},{"name":"Appointment Min","dataType":"String","isHidden":false,"expression":"if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='0-5 weeks', 16,    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='5-9 weeks', 32,    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='9-13 weeks', 48,    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='13-17 weeks', 64,64))))","columnType":"Calculated"},{"name":"New Client Min","dataType":"String","isHidden":false,"expression":"if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='0-5 weeks',    0,    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='5-9 weeks',1,    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='9-13 weeks',2,     if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='13-17 weeks',4,     4))))","columnType":"Calculated"},{"name":"Prod Min","dataType":"String","isHidden":false,"expression":"if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='0-5 weeks','None',    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='5-9 weeks', '750 (pend/iss)',    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='9-13 weeks', '2,000 (pend/iss)',    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='13-17 weeks', '1,500 (issued)','1,500 (issued)'))))","columnType":"Calculated"},{"name":"Advice Min","dataType":"String","isHidden":false,"expression":"if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='0-5 weeks',1,    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='5-9 weeks', 4,    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='9-13 weeks', 6,    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='13-17 weeks',10,10))))","columnType":"Calculated"},{"name":"Prospect Connects","dataType":"String","isHidden":false,"expression":"var _PC=if(RR_In_and_Out[Year]='CY',[CY Prospect Connect],[PY Prospect Connects])returnif(ISBLANK(_PC),0,_PC)","columnType":"Calculated"},{"name":"JFW","dataType":"String","isHidden":false,"expression":"var _JFW=if(RR_In_and_Out[Year]='CY',[Total JFW],[PY Total JFW])returnif(ISBLANK(_JFW),0,_JFW)","columnType":"Calculated"},{"name":"Referrals","dataType":"String","isHidden":false,"expression":"var _Ref=if(RR_In_and_Out[Year]='CY',[Total Referrals],[PY Total Referrals])returnif(ISBLANK(_Ref),0,_Ref)","columnType":"Calculated"},{"name":"Prospect Status","dataType":"String","isHidden":false,"expression":"if([Prospect Connects]\u003e=50,'50+',if([Prospect Connects]\u003e=30,'30-50',if([Prospect Connects]\u003e=15,'15-30','0-15')))","columnType":"Calculated"},{"name":"Referrals Per Week","dataType":"String","isHidden":false,"expression":"var _ref=[Referrals]returnif(ISBLANK([Referrals]),0,_ref)","columnType":"Calculated"},{"name":"Appointment Color","dataType":"String","isHidden":false,"expression":"if(RR_In_and_Out[Appointment Status]='Green',1,if(RR_In_and_Out[Appointment Status]='Yellow',2,3))","columnType":"Calculated"},{"name":"New Client Color","dataType":"String","isHidden":false,"expression":"if(RR_In_and_Out[New Client Status]='Green',1,if(RR_In_and_Out[New Client Status]='Yellow',2,3))","columnType":"Calculated"},{"name":"Prod Color","dataType":"String","isHidden":false,"expression":"if(RR_In_and_Out[Grid Revenue Status]='Green',1,if(RR_In_and_Out[Grid Revenue Status]='Yellow',2,3))","columnType":"Calculated"},{"name":"Advice Color","dataType":"String","isHidden":false,"expression":"if(RR_In_and_Out[Advice Status]='Green',1,if(RR_In_and_Out[Advice Status]='Yellow',2,3))","columnType":"Calculated"},{"name":"Emp Status","dataType":"String","isHidden":false,"columnType":"Calculated"},{"name":"Employee Status","dataType":"String","isHidden":false,"expression":"if(Sale_Hier_Dim_RR48[Status sum]=1,'Active',if(Sale_Hier_Dim_RR48[Status sum]=2,'Terminated','NA'))","columnType":"Calculated"},{"name":"Sale_Hier_Dim.Employee Status Type Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JFW Status","dataType":"String","isHidden":false,"expression":"var _JFW=if(RR_In_and_Out[Year]='CY',if((\u0027Vitals RR48\u0027[Total JFW]/\u0027Vitals RR48\u0027[Total Appointments])\u003e0.95, 'Green',if((\u0027Vitals RR48\u0027[Total JFW]/\u0027Vitals RR48\u0027[Total Appointments])\u003e0.8,'Yellow','Red')),if((\u0027Vitals RR48\u0027[PY Total JFW]/\u0027Vitals RR48\u0027[Total Appointments - PY])\u003e0.95, 'Green',if((\u0027Vitals RR48\u0027[PY Total JFW]/\u0027Vitals RR48\u0027[Total Appointments - PY])\u003e0.8,'Yellow','Red')))returnif(if(RR_In_and_Out[Year]='CY',\u0027Vitals RR48\u0027[Total Appointments],\u0027Vitals RR48\u0027[Total Appointments - PY])=0,'Red',if(isblank(_JFW),'Red',_JFW))","columnType":"Calculated"},{"name":"JFW Percent","dataType":"String","isHidden":false,"expression":"var _JFW=if(RR_In_and_Out[Year]='CY',\u0027Vitals RR48\u0027[Total JFW],\u0027Vitals RR48\u0027[PY Total JFW])/if(RR_In_and_Out[Year]='CY',\u0027Vitals RR48\u0027[Total Appointments],\u0027Vitals RR48\u0027[Total Appointments - PY])returnif(if(RR_In_and_Out[Year]='CY',\u0027Vitals RR48\u0027[Total Appointments],\u0027Vitals RR48\u0027[Total Appointments - PY])=0,0,if(isblank(_JFW),0,_JFW))","columnType":"Calculated"},{"name":"Tenure Week Sort","dataType":"String","isHidden":false,"expression":"if(RR_In_and_Out[Red Role Tenure]='0-5 weeks',1,if(RR_In_and_Out[Red Role Tenure]='5-9 weeks', 2,if(RR_In_and_Out[Red Role Tenure]='9-13 weeks',3,if(RR_In_and_Out[Red Role Tenure]='13-17 weeks',4,5))))","columnType":"Calculated"},{"name":"Applications Status","dataType":"String","isHidden":false,"expression":"if(RR_In_and_Out[Year]='CY',if([New Pending Applications]\u003e=10,'10+ apps',if([New Pending Applications]\u003e=5,'5-10 apps',if([New Pending Applications]\u003e=0,'0-5 apps','NA'))),if([PY Pending Applications]\u003e=10,'10+ apps',if([PY Pending Applications]\u003e=5,'5-10 apps',if([PY Pending Applications]\u003e=0,'0-5 apps','NA'))))","columnType":"Calculated"},{"name":"Sale_Hier_Dim.Job Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Appointment Target","dataType":"String","isHidden":false,"expression":"if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='0-5 weeks', 32,    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='5-9 weeks', 64,    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='9-13 weeks', 96,    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='13-17 weeks', 128,128))))","columnType":"Calculated"},{"name":"New Client Target","dataType":"String","isHidden":false,"expression":"if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='0-5 weeks',    '0',    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='5-9 weeks','5',    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='9-13 weeks','7.5',     if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='13-17 weeks','10',     '10'))))","columnType":"Calculated"},{"name":"Prod Target","dataType":"String","isHidden":false,"expression":"if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='0-5 weeks','None',    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='5-9 weeks', '4,000 (pend/iss)',    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='9-13 weeks', '6,000 (issued)',    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='13-17 weeks', '9,000 (issued)','9,000 (issued)'))))","columnType":"Calculated"},{"name":"Applications Status (written)","dataType":"String","isHidden":false,"expression":"if(RR_In_and_Out[Year]='CY',if([Written Applications]\u003e=10,'10+ apps',if([Written Applications]\u003e=5,'5-10 apps',if([Written Applications]\u003e=0,'0-5 apps','NA'))),if([Written Applications]\u003e=10,'10+ apps',if([Written Applications]\u003e=5,'5-10 apps',if([Written Applications]\u003e=0,'0-5 apps','NA'))))","columnType":"Calculated"},{"name":"Applications Target","dataType":"String","isHidden":false,"expression":"if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='0-5 weeks','None',    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='5-9 weeks', '8 (pend/iss)',    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='9-13 weeks', '12 (issued)',    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='13-17 weeks', '16 (issued)','16 (issued)'))))","columnType":"Calculated"},{"name":"JOIN VALUE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG_MVP_Mkt","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Year IN","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Year OUT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Hire Sts","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Term Sts","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG","dataType":"String","isHidden":false,"expression":"left(RR_In_and_Out[TAG_MVP_Mkt],4)","columnType":"Calculated"},{"name":"TAG-MVP","dataType":"String","isHidden":false,"expression":"left(RR_In_and_Out[TAG_MVP_Mkt],7)","columnType":"Calculated"},{"name":"Adj Start Date","dataType":"String","isHidden":false,"expression":"if(\u0027RR_In_and_Out\u0027[Date Exceptions.Adj Start Date]=Blank(),if(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003cDATE(2022,2,15),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE],if(AND(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003e=DATE(2022,2,15),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003c=DATE(2022,3,7)),DATE(2022,3,7),if(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003cDATE(2022,3,15),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE],if(AND(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003e=DATE(2022,3,17),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003c=DATE(2022,4,4)),DATE(2022,4,4),if(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003cDATE(2022,4,15),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE],if(AND(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003e=DATE(2022,4,15),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003c=DATE(2022,5,2)),DATE(2022,5,2),if(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003cDATE(2022,5,15),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE],if(AND(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003e=DATE(2022,5,17),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003c=DATE(2022,6,6)),DATE(2022,6,6),if(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003cDATE(2022,6,15),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE],if(AND(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003e=DATE(2022,6,15),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003c=DATE(2022,7,11)),DATE(2022,7,11),if(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003cDATE(2022,7,15),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE],if(AND(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003e=DATE(2022,7,15),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003c=DATE(2022,8,8)),DATE(2022,8,8),if(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003cDATE(2022,8,15),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE],if(AND(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003e=DATE(2022,8,15),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003c=DATE(2022,9,12)),DATE(2022,9,12),if(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003cDATE(2022,9,15),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE],if(AND(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003e=DATE(2022,9,15),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003c=DATE(2022,10,10)),DATE(2022,10,10),if(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003cDATE(2022,10,15),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE],if(AND(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003e=DATE(2022,10,15),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003c=DATE(2022,11,7)),DATE(2022,11,7),if(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003cDATE(2022,11,15),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE],if(AND(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003e=DATE(2022,11,15),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003c=DATE(2022,12,12)),DATE(2022,12,12),if(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003cDATE(2022,12,15),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE],if(AND(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003e=DATE(2022,12,15),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003c=DATE(2023,1,9)),DATE(2023,1,9),if(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003cDATE(2023,1,15),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE],if(AND(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003e=DATE(2023,1,15),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003c=DATE(2023,2,6)),DATE(2023,2,6),if(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003cDATE(2023,2,15),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE],if(AND(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003e=DATE(2023,2,15),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003c=DATE(2023,3,6)),DATE(2023,3,6),if(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003cDATE(2023,3,15),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE],if(AND(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003e=DATE(2023,3,15),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003c=DATE(2023,4,3)),DATE(2023,4,3),if(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003cDATE(2023,4,15),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE],if(AND(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003e=DATE(2023,4,15),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003c=DATE(2023,5,1)),DATE(2023,5,1),if(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003cDATE(2023,5,15),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE],if(AND(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003e=DATE(2023,5,15),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003c=DATE(2023,6,5)),DATE(2023,6,5),if(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003cDATE(2023,6,15),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE],if(AND(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003e=DATE(2023,6,15),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003c=DATE(2023,7,10)),DATE(2023,7,10),if(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003cDATE(2023,7,15),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE],if(AND(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003e=DATE(2023,7,15),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003c=DATE(2023,8,7)),DATE(2023,8,7),if(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003cDATE(2023,8,15),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE],if(AND(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003e=DATE(2023,8,15),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003c=DATE(2023,9,11)),DATE(2023,9,11),if(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003cDATE(2023,9,15),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE],if(AND(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003e=DATE(2023,9,15),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003c=DATE(2023,10,9)),DATE(2023,10,9),if(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003cDATE(2023,10,15),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE],if(AND(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003e=DATE(2023,10,15),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003c=DATE(2023,11,6)),DATE(2023,11,6),if(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003cDATE(2023,11,15),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE],if(AND(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003e=DATE(2023,11,15),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003c=DATE(2023,12,11)),DATE(2023,12,11),if(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003cDATE(2023,12,31),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE],if(AND(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003e=DATE(2024,1,1),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003c=DATE(2024,1,15)),DATE(2024,1,8),if(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003cDATE(2024,1,29),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE],if(AND(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003e=DATE(2024,1,29),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003c=DATE(2024,2,19)),DATE(2024,2,12),if(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003cDATE(2024,2,26),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE],if(AND(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003e=DATE(2024,2,26),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003c=DATE(2024,3,18)),DATE(2024,3,11),if(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003cDATE(2024,3,25),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE],if(AND(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003e=DATE(2024,3,25),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003c=DATE(2024,4,15)),DATE(2024,4,8),if(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003cDATE(2024,4,29),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE],if(AND(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003e=DATE(2024,4,29),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003c=DATE(2024,5,20)),DATE(2024,5,13),if(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003cDATE(2024,5,27),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE],if(AND(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003e=DATE(2024,5,27),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003c=DATE(2024,6,17)),DATE(2024,6,10),if(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003cDATE(2024,7,1),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE],if(AND(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003e=DATE(2024,7,1),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003c=DATE(2024,7,22)),DATE(2024,7,15),if(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003cDATE(2024,7,29),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE],if(AND(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003e=DATE(2024,7,29),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003c=DATE(2024,8,19)),DATE(2024,8,12),if(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003cDATE(2024,8,26),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE],if(AND(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003e=DATE(2024,8,26),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003c=DATE(2024,9,16)),DATE(2024,9,9),if(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003cDATE(2024,9,30),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE],if(AND(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003e=DATE(2024,9,30),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003c=DATE(2024,10,21)),DATE(2024,10,14),if(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003cDATE(2024,10,28),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE],if(AND(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003e=DATE(2024,10,28),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003c=DATE(2024,11,18)),DATE(2024,11,11),if(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003cDATE(2024,11,25),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE],if(AND(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003e=DATE(2024,11,25),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003c=DATE(2024,12,16)),DATE(2024,12,9),if(\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]\u003cDATE(2024,12,31),\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE],\u0027RR_In_and_Out\u0027[MGT_RLTN_BEG_DATE]))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))),[Date Exceptions.Adj Start Date])","columnType":"Calculated"},{"name":"Market Leader Info.RFO_ZONE_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market Leader Info.MARKET_LEADER_NAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Days on RR","dataType":"String","isHidden":false,"expression":"DATEDIFF(\u0027RR_In_and_Out\u0027[Adj Start Date],Today(),DAY)","columnType":"Calculated"},{"name":"Appointments Per Week","dataType":"String","isHidden":false,"expression":"if([Tenure Week]\u003c=5,0,\u0027Vitals RR48\u0027[Total Appointments]/([Tenure Week]-5))","columnType":"Calculated"},{"name":"Advice Min 2023","dataType":"String","isHidden":false,"expression":"if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='0-5 weeks', 'Level 101',    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]= '5-9 weeks', '1',    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]= '9-13 weeks', '4',    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]= '13-17 weeks', '6', '6'))))","columnType":"Calculated"},{"name":"Appointment Min 2023","dataType":"String","isHidden":false,"expression":"if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='0-5 weeks', '16 Sched',    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='5-9 weeks', '16 Held',    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='9-13 weeks', '32 Held',    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='13-17 weeks', '48 Held','48 Held'))))","columnType":"Calculated"},{"name":"Appointment Target 2023","dataType":"String","isHidden":false,"expression":"if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='0-5 weeks', '32 Sched',    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='5-9 weeks', '32 Held',    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='9-13 weeks', '64 Held',    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='13-17 weeks', '96 Held','96 Held'))))","columnType":"Calculated"},{"name":"Appointment Status 2023","dataType":"String","isHidden":false,"expression":"if(\u0027RR_In_and_Out\u0027[Year]='CY',if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='0-5 weeks',    if(\u0027Vitals RR48\u0027[Appointments Scheduled]\u003e=32, 'Green',if(\u0027Vitals RR48\u0027[Appointments Scheduled]\u003e=16,'Yellow','Red')),    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='5-9 weeks',    if(\u0027Vitals RR48\u0027[Total Appointments]\u003e=32, 'Green',if(\u0027Vitals RR48\u0027[Total Appointments]\u003e=16,'Yellow','Red')),    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='9-13 weeks',    if(\u0027Vitals RR48\u0027[Total Appointments]\u003e=64, 'Green',if(\u0027Vitals RR48\u0027[Total Appointments]\u003e=32,'Yellow','Red')),    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='13-17 weeks',    if(\u0027Vitals RR48\u0027[Total Appointments]\u003e=96, 'Green',if(\u0027Vitals RR48\u0027[Total Appointments]\u003e=48,'Yellow','Red'))    ,'NA'))))    , if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='0-5 weeks',    if(\u0027Vitals RR48\u0027[Total Appointments - PY]\u003e=32, 'Green',if(\u0027Vitals RR48\u0027[Total Appointments - PY]\u003e=16,'Yellow','Red')),    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='5-9 weeks',    if(\u0027Vitals RR48\u0027[Total Appointments - PY]\u003e=64, 'Green',if(\u0027Vitals RR48\u0027[Total Appointments - PY]\u003e=32,'Yellow','Red')),    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='9-13 weeks',    if(\u0027Vitals RR48\u0027[Total Appointments - PY]\u003e=96, 'Green',if(\u0027Vitals RR48\u0027[Total Appointments - PY]\u003e=48,'Yellow','Red')),    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='13-17 weeks',    if(\u0027Vitals RR48\u0027[Total Appointments - PY]\u003e=128, 'Green',if(\u0027Vitals RR48\u0027[Total Appointments - PY]\u003e=64,'Yellow','Red'))    ,'NA')))))","columnType":"Calculated"},{"name":"Appointment Color 2023","dataType":"String","isHidden":false,"expression":"if(RR_In_and_Out[Appointment Status 2023]='Green',1,if(RR_In_and_Out[Appointment Status 2023]='Yellow',2,3))","columnType":"Calculated"},{"name":"Advice Status 2023","dataType":"String","isHidden":false,"expression":"if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='0-5 weeks','NA',    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='5-9 weeks',    if(\u0027CLIENT_HHLD\u0027[Households with Goals - CIF]\u003e1, 'Green',if(\u0027CLIENT_HHLD\u0027[Households with Goals - CIF]=1,'Yellow','Red')),    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='9-13 weeks',    if(\u0027CLIENT_HHLD\u0027[Households with Goals - CIF]\u003e4, 'Green',if(\u0027CLIENT_HHLD\u0027[Households with Goals - CIF]=4,'Yellow','Red')),    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='13-17 weeks',    if(\u0027CLIENT_HHLD\u0027[Households with Goals - CIF]\u003e6, 'Green',if(\u0027CLIENT_HHLD\u0027[Households with Goals - CIF]=6,'Yellow','Red'))    ,'NA'))))","columnType":"Calculated"},{"name":"Advice Color 2023","dataType":"String","isHidden":false,"expression":"if(RR_In_and_Out[Advice Status 2023]='NA',0,if(RR_In_and_Out[Advice Status 2023]='Green',1,if(RR_In_and_Out[Advice Status 2023]='Yellow',2,3)))","columnType":"Calculated"},{"name":"Prod Min 2023","dataType":"String","isHidden":false,"expression":"if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='0-5 weeks','None',    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='5-9 weeks', 'None',    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='9-13 weeks', '1,000 issued',    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='13-17 weeks', '2,000 issued','2,000 issued'))))","columnType":"Calculated"},{"name":"Prod Target 2023","dataType":"String","isHidden":false,"expression":"if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='0-5 weeks','None',    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='5-9 weeks', '2,000 issued',    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='9-13 weeks', '4,000 issued',    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='13-17 weeks', '6,000 issued','6,000 issued'))))","columnType":"Calculated"},{"name":"Grid Revenue Status 2023","dataType":"String","isHidden":false,"expression":"if(\u0027RR_In_and_Out\u0027[Year]='CY',if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='0-5 weeks',    'Green',    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='5-9 weeks',    if(\u0027GridRevenue - Snowflake_RR48\u0027[New Grid Revenue Total]\u003e=2000, 'Green','Yellow'),    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='9-13 weeks',    if(\u0027GridRevenue - Snowflake_RR48\u0027[New Grid Revenue Total]\u003e=4000, 'Green',if(\u0027GridRevenue - Snowflake_RR48\u0027[New Grid Revenue Total]\u003e=1000,'Yellow','Red')),    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='13-17 weeks',    if(\u0027GridRevenue - Snowflake_RR48\u0027[New Grid Revenue Total]\u003e=6000, 'Green',if(\u0027GridRevenue - Snowflake_RR48\u0027[New Grid Revenue Total]\u003e=2000,'Yellow','Red')),    'NA')))),    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='0-5 weeks',    'Green',    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='5-9 weeks',    if(\u0027GridRevenue - Snowflake_RR48\u0027[New Grid Revenue Total-PY]+\u0027Pending RR48\u0027[Pending Amount-PY]\u003e=4000, 'Green',if(\u0027GridRevenue - Snowflake_RR48\u0027[New Grid Revenue Total-PY]+\u0027Pending RR48\u0027[Pending Amount-PY]\u003e=1000,'Yellow','Red')),    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='9-13 weeks',    if(\u0027GridRevenue - Snowflake_RR48\u0027[New Grid Revenue Total-PY]\u003e=8000, 'Green',if(\u0027GridRevenue - Snowflake_RR48\u0027[New Grid Revenue Total-PY]+\u0027Pending RR48\u0027[Pending Amount-PY]\u003e=2000,'Yellow','Red')),    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='13-17 weeks',    if(\u0027GridRevenue - Snowflake_RR48\u0027[New Grid Revenue Total-PY]\u003e=12000, 'Green',if(\u0027GridRevenue - Snowflake_RR48\u0027[New Grid Revenue Total-PY]\u003e=1000,'Yellow','Red')),    'NA')))))","columnType":"Calculated"},{"name":"Prod Color 2023","dataType":"String","isHidden":false,"expression":"if(RR_In_and_Out[Grid Revenue Status 2023]='Green',1,if(RR_In_and_Out[Grid Revenue Status 2023]='Yellow',2,3))","columnType":"Calculated"},{"name":"New Client Min 2023","dataType":"String","isHidden":false,"expression":"if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='0-5 weeks',    0,    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='5-9 weeks',0,    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='9-13 weeks',2,     if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='13-17 weeks',4,     4))))","columnType":"Calculated"},{"name":"New Client Target 2023","dataType":"String","isHidden":false,"expression":"if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='0-5 weeks',    0,    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='5-9 weeks',0,    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='9-13 weeks',7,     if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='13-17 weeks',10,     10))))","columnType":"Calculated"},{"name":"New Client Status 2023","dataType":"String","isHidden":false,"expression":"if(\u0027RR_In_and_Out\u0027[Year]='CY',if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='0-5 weeks',    'Green',    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='5-9 weeks',    'Green',    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='9-13 weeks',    if(\u0027NFC RR48\u0027[Total New Clients]\u003e=7, 'Green',if(\u0027NFC RR48\u0027[Total New Clients]\u003e=2,'Yellow','Red')),    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='13-17 weeks',    if(\u0027NFC RR48\u0027[Total New Clients]\u003e=10, 'Green',if(\u0027NFC RR48\u0027[Total New Clients]\u003e=4,'Yellow','Red')),    'NA')))),if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='0-5 weeks',    'Green',    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='5-9 weeks','Green',    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='9-13 weeks',    if(\u0027NFC RR48\u0027[Total New Clients-PY]\u003e=7.5, 'Green',if(\u0027NFC RR48\u0027[Total New Clients-PY]\u003e=2,'Yellow','Red')),    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='13-17 weeks',    if(\u0027NFC RR48\u0027[Total New Clients-PY]\u003e=10, 'Green',if(\u0027NFC RR48\u0027[Total New Clients-PY]\u003e=4,'Yellow','Red')),    'NA')))))","columnType":"Calculated"},{"name":"New Client Color 2023","dataType":"String","isHidden":false,"expression":"if(RR_In_and_Out[New Client Status 2023]='Green',1,if(RR_In_and_Out[New Client Status 2023]='Yellow',2,3))","columnType":"Calculated"},{"name":"Applications Target 2023","dataType":"String","isHidden":false,"expression":"if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='0-5 weeks',0,    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='5-9 weeks', 8,    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='9-13 weeks', 12,    if(\u0027RR_In_and_Out\u0027[Red Role Tenure]='13-17 weeks', 16,16))))","columnType":"Calculated"},{"name":"Attend. Min","dataType":"String","isHidden":false,"expression":"0.85","columnType":"Calculated"},{"name":"Attend. Target","dataType":"String","isHidden":false,"expression":"1","columnType":"Calculated"},{"name":"Appoint Status","dataType":"String","isHidden":false,"expression":"''","columnType":"Calculated"},{"name":"Attendance Color","dataType":"String","isHidden":false,"expression":"if(\u0027RR_In_and_Out\u0027[Attendance Data.Attendance Percentage]=blank(),0,if(\u0027RR_In_and_Out\u0027[Attendance Data.Attendance Percentage]\u003c0.85,3,if(\u0027RR_In_and_Out\u0027[Attendance Data.Attendance Percentage]\u003c1,2,1)))","columnType":"Calculated"},{"name":"Attendance Data.Attendance Percentage","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Date Exceptions.Adj Start Date","dataType":"DateTime","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Appt Green","expression":"var _total=  CALCULATE    (SUMX(DISTINCT(\u0027RR_In_and_Out\u0027[TSID]), 1),    \u0027RR_In_and_Out\u0027[Appointment Status] = 'Green')    var _count=DISTINCTCOUNT(\u0027RR_In_and_Out\u0027[TSID])ReturnIF(ISBLANK(_total),0,_total/_count)","isHidden":false},{"name":"Appt Yellow","expression":"var _total=  CALCULATE    (SUMX(DISTINCT(\u0027RR_In_and_Out\u0027[TSID]), 1),    \u0027RR_In_and_Out\u0027[Appointment Status] = 'Yellow')    var _count=DISTINCTCOUNT(\u0027RR_In_and_Out\u0027[TSID])ReturnIF(ISBLANK(_total),0,_total/_count)","isHidden":false},{"name":"Appt Red","expression":"var _total=  CALCULATE    (SUMX(DISTINCT(\u0027RR_In_and_Out\u0027[TSID]), 1),    \u0027RR_In_and_Out\u0027[Appointment Status] = 'Red')    var _count=DISTINCTCOUNT(\u0027RR_In_and_Out\u0027[TSID])ReturnIF(ISBLANK(_total),0,_total/_count)","isHidden":false},{"name":"Prod Green","expression":"var _total=  CALCULATE    (SUMX(DISTINCT(\u0027RR_In_and_Out\u0027[TSID]), 1),    \u0027RR_In_and_Out\u0027[Grid Revenue Status] = 'Green')    var _count=DISTINCTCOUNT(\u0027RR_In_and_Out\u0027[TSID])ReturnIF(ISBLANK(_total),0,_total/_count)","isHidden":false},{"name":"Prod Yellow","expression":"var _total=  CALCULATE    (SUMX(DISTINCT(\u0027RR_In_and_Out\u0027[TSID]), 1),    \u0027RR_In_and_Out\u0027[Grid Revenue Status] = 'Yellow')    var _count=DISTINCTCOUNT(\u0027RR_In_and_Out\u0027[TSID])ReturnIF(ISBLANK(_total),0,_total/_count)","isHidden":false},{"name":"Prod Red","expression":"var _total=  CALCULATE    (SUMX(DISTINCT(\u0027RR_In_and_Out\u0027[TSID]), 1),    \u0027RR_In_and_Out\u0027[Grid Revenue Status] = 'Red')    var _count=DISTINCTCOUNT(\u0027RR_In_and_Out\u0027[TSID])ReturnIF(ISBLANK(_total),0,_total/_count)","isHidden":false},{"name":"New Client Green","expression":"var _total=  CALCULATE    (SUMX(DISTINCT(\u0027RR_In_and_Out\u0027[TSID]), 1),    \u0027RR_In_and_Out\u0027[New Client Status] = 'Green')    var _count=DISTINCTCOUNT(\u0027RR_In_and_Out\u0027[TSID])ReturnIF(ISBLANK(_total),0,_total/_count)","isHidden":false},{"name":"New Client Yellow","expression":"var _total=  CALCULATE    (SUMX(DISTINCT(\u0027RR_In_and_Out\u0027[TSID]), 1),    \u0027RR_In_and_Out\u0027[New Client Status] = 'Yellow')    var _count=DISTINCTCOUNT(\u0027RR_In_and_Out\u0027[TSID])ReturnIF(ISBLANK(_total),0,_total/_count)","isHidden":false},{"name":"New Client Red","expression":"var _total=  CALCULATE    (SUMX(DISTINCT(\u0027RR_In_and_Out\u0027[TSID]), 1),    \u0027RR_In_and_Out\u0027[New Client Status] = 'Red')    var _count=DISTINCTCOUNT(\u0027RR_In_and_Out\u0027[TSID])ReturnIF(ISBLANK(_total),0,_total/_count)","isHidden":false},{"name":"Advice Green","expression":"var _total=  CALCULATE    (SUMX(DISTINCT(\u0027RR_In_and_Out\u0027[TSID]), 1),    \u0027RR_In_and_Out\u0027[Advice Status] = 'Green')    var _count=DISTINCTCOUNT(\u0027RR_In_and_Out\u0027[TSID])ReturnIF(ISBLANK(_total),0,_total/_count)","isHidden":false},{"name":"Advice Yellow","expression":"var _total=  CALCULATE    (SUMX(DISTINCT(\u0027RR_In_and_Out\u0027[TSID]), 1),    \u0027RR_In_and_Out\u0027[Advice Status] = 'Yellow')    var _count=DISTINCTCOUNT(\u0027RR_In_and_Out\u0027[TSID])ReturnIF(ISBLANK(_total),0,_total/_count)","isHidden":false},{"name":"Advice Red","expression":"var _total=  CALCULATE    (SUMX(DISTINCT(\u0027RR_In_and_Out\u0027[TSID]), 1),    \u0027RR_In_and_Out\u0027[Advice Status] = 'Red')    var _count=DISTINCTCOUNT(\u0027RR_In_and_Out\u0027[TSID])ReturnIF(ISBLANK(_total),0,_total/_count)","isHidden":false},{"name":"Prospect 0-15","expression":"var _total=  CALCULATE    (SUMX(DISTINCT(\u0027RR_In_and_Out\u0027[TSID]), 1),    \u0027RR_In_and_Out\u0027[Prospect Status] = '0-15')    var _count=DISTINCTCOUNT(\u0027RR_In_and_Out\u0027[TSID])ReturnIF(ISBLANK(_total),0,_total/_count)","isHidden":false},{"name":"Prospect 15-30","expression":"var _total=  CALCULATE    (SUMX(DISTINCT(\u0027RR_In_and_Out\u0027[TSID]), 1),    \u0027RR_In_and_Out\u0027[Prospect Status] = '15-30')    var _count=DISTINCTCOUNT(\u0027RR_In_and_Out\u0027[TSID])ReturnIF(ISBLANK(_total),0,_total/_count)","isHidden":false},{"name":"Prospect 30-50","expression":"var _total=  CALCULATE    (SUMX(DISTINCT(\u0027RR_In_and_Out\u0027[TSID]), 1),    \u0027RR_In_and_Out\u0027[Prospect Status] = '30-50')    var _count=DISTINCTCOUNT(\u0027RR_In_and_Out\u0027[TSID])ReturnIF(ISBLANK(_total),0,_total/_count)","isHidden":false},{"name":"Prospect 50+","expression":"var _total=  CALCULATE    (SUMX(DISTINCT(\u0027RR_In_and_Out\u0027[TSID]), 1),    \u0027RR_In_and_Out\u0027[Prospect Status] = '50+')    var _count=DISTINCTCOUNT(\u0027RR_In_and_Out\u0027[TSID])ReturnIF(ISBLANK(_total),0,_total/_count)","isHidden":false},{"name":"JFW Green","expression":"var _total=  CALCULATE    (SUMX(DISTINCT(\u0027RR_In_and_Out\u0027[TSID]), 1),    \u0027RR_In_and_Out\u0027[JFW Status] = 'Green')    var _count=DISTINCTCOUNT(\u0027RR_In_and_Out\u0027[TSID])ReturnIF(ISBLANK(_total),0,_total/_count)","isHidden":false},{"name":"JFW Yellow","expression":"var _total=  CALCULATE    (SUMX(DISTINCT(\u0027RR_In_and_Out\u0027[TSID]), 1),    \u0027RR_In_and_Out\u0027[JFW Status] = 'Yellow')    var _count=DISTINCTCOUNT(\u0027RR_In_and_Out\u0027[TSID])ReturnIF(ISBLANK(_total),0,_total/_count)","isHidden":false},{"name":"JFW Red","expression":"var _total=  CALCULATE    (SUMX(DISTINCT(\u0027RR_In_and_Out\u0027[TSID]), 1),    \u0027RR_In_and_Out\u0027[JFW Status] = 'Red')    var _count=DISTINCTCOUNT(\u0027RR_In_and_Out\u0027[TSID])ReturnIF(ISBLANK(_total),0,_total/_count)","isHidden":false},{"name":"Applications 0-5","expression":"var _total=  CALCULATE    (SUMX(DISTINCT(\u0027RR_In_and_Out\u0027[TSID]), 1),    \u0027RR_In_and_Out\u0027[Applications Status] = '0-5')    var _count=DISTINCTCOUNT(\u0027RR_In_and_Out\u0027[TSID])ReturnIF(ISBLANK(_total),0,_total/_count)","isHidden":false},{"name":"Applications 5-10","expression":"var _total=  CALCULATE    (SUMX(DISTINCT(\u0027RR_In_and_Out\u0027[TSID]), 1),    \u0027RR_In_and_Out\u0027[Applications Status] = '5-10')    var _count=DISTINCTCOUNT(\u0027RR_In_and_Out\u0027[TSID])ReturnIF(ISBLANK(_total),0,_total/_count)","isHidden":false},{"name":"Applications 10+","expression":"var _total=  CALCULATE    (SUMX(DISTINCT(\u0027RR_In_and_Out\u0027[TSID]), 1),    \u0027RR_In_and_Out\u0027[Applications Status] = '10+')    var _count=DISTINCTCOUNT(\u0027RR_In_and_Out\u0027[TSID])ReturnIF(ISBLANK(_total),0,_total/_count)","isHidden":false},{"name":"TSID Count","expression":"    var _count=DISTINCTCOUNT(\u0027RR_In_and_Out\u0027[TSID])ReturnIF(ISBLANK(_count),0,_count)","isHidden":false},{"name":"Appointment Red Count","expression":"    var _count=CALCULATE    (SUMX(DISTINCT(\u0027RR_In_and_Out\u0027[TSID]), 1),    \u0027RR_In_and_Out\u0027[Appointment Status] = 'Red')ReturnIF(ISBLANK(_count),0,_count)","isHidden":false},{"name":"Appointment Yellow Count","expression":"    var _count=CALCULATE    (SUMX(DISTINCT(\u0027RR_In_and_Out\u0027[TSID]), 1),    \u0027RR_In_and_Out\u0027[Appointment Status] = 'Yellow')ReturnIF(ISBLANK(_count),0,_count)","isHidden":false},{"name":"Appointment Green Count","expression":"    var _count=CALCULATE    (SUMX(DISTINCT(\u0027RR_In_and_Out\u0027[TSID]), 1),    \u0027RR_In_and_Out\u0027[Appointment Status] = 'Green')ReturnIF(ISBLANK(_count),0,_count)","isHidden":false},{"name":"Advice Red Count","expression":"    var _count=CALCULATE    (SUMX(DISTINCT(\u0027RR_In_and_Out\u0027[TSID]), 1),    \u0027RR_In_and_Out\u0027[Advice Status] = 'Red')ReturnIF(ISBLANK(_count),0,_count)","isHidden":false},{"name":"Advice Yellow Count","expression":"    var _count=CALCULATE    (SUMX(DISTINCT(\u0027RR_In_and_Out\u0027[TSID]), 1),    \u0027RR_In_and_Out\u0027[Advice Status] = 'Yellow')ReturnIF(ISBLANK(_count),0,_count)","isHidden":false},{"name":"Advice Green Count","expression":"    var _count=CALCULATE    (SUMX(DISTINCT(\u0027RR_In_and_Out\u0027[TSID]), 1),    \u0027RR_In_and_Out\u0027[Advice Status] = 'Green')ReturnIF(ISBLANK(_count),0,_count)","isHidden":false},{"name":"New Client Yellow Count","expression":"    var _count=CALCULATE    (SUMX(DISTINCT(\u0027RR_In_and_Out\u0027[TSID]), 1),    \u0027RR_In_and_Out\u0027[New Client Status] = 'Yellow')ReturnIF(ISBLANK(_count),0,_count)","isHidden":false},{"name":"New Client Red Count","expression":"    var _count=CALCULATE    (SUMX(DISTINCT(\u0027RR_In_and_Out\u0027[TSID]), 1),    \u0027RR_In_and_Out\u0027[New Client Status] = 'Red')ReturnIF(ISBLANK(_count),0,_count)","isHidden":false},{"name":"New Client Green Count","expression":"    var _count=CALCULATE    (SUMX(DISTINCT(\u0027RR_In_and_Out\u0027[TSID]), 1),    \u0027RR_In_and_Out\u0027[New Client Status] = 'Green')ReturnIF(ISBLANK(_count),0,_count)","isHidden":false},{"name":"Prod Yellow Count","expression":"    var _count=CALCULATE    (SUMX(DISTINCT(\u0027RR_In_and_Out\u0027[TSID]), 1),    \u0027RR_In_and_Out\u0027[Grid Revenue Status] = 'Yellow')ReturnIF(ISBLANK(_count),0,_count)","isHidden":false},{"name":"Prod Red Count","expression":"    var _count=CALCULATE    (SUMX(DISTINCT(\u0027RR_In_and_Out\u0027[TSID]), 1),    \u0027RR_In_and_Out\u0027[Grid Revenue Status] = 'Red')ReturnIF(ISBLANK(_count),0,_count)","isHidden":false},{"name":"Prod Green Count","expression":"    var _count=CALCULATE    (SUMX(DISTINCT(\u0027RR_In_and_Out\u0027[TSID]), 1),    \u0027RR_In_and_Out\u0027[Grid Revenue Status] = 'Green')ReturnIF(ISBLANK(_count),0,_count)","isHidden":false},{"name":"JFW Green Count","expression":"    var _count=CALCULATE    (SUMX(DISTINCT(\u0027RR_In_and_Out\u0027[TSID]), 1),    \u0027RR_In_and_Out\u0027[JFW Status] = 'Green')ReturnIF(ISBLANK(_count),0,_count)","isHidden":false},{"name":"JFW Yellow Count","expression":"    var _count=CALCULATE    (SUMX(DISTINCT(\u0027RR_In_and_Out\u0027[TSID]), 1),    \u0027RR_In_and_Out\u0027[JFW Status] = 'Yellow')ReturnIF(ISBLANK(_count),0,_count)","isHidden":false},{"name":"JFW Red Count","expression":"    var _count=CALCULATE    (SUMX(DISTINCT(\u0027RR_In_and_Out\u0027[TSID]), 1),    \u0027RR_In_and_Out\u0027[JFW Status] = 'Red')ReturnIF(ISBLANK(_count),0,_count)","isHidden":false},{"name":"User Selection","expression":"SELECTEDVALUE(\u0027Slicer Table\u0027[Value])","isHidden":false},{"name":"Current Value","expression":"SWITCH(TRUE(),[User Selection]='Appointments',FORMAT(\u0027Vitals RR48\u0027[Total Appointments],'0'),[User Selection]='New Clients',FORMAT(\u0027NFC RR48\u0027[Total New Clients],'0'),[User Selection]='Grid Revenue',FORMAT(\u0027GridRevenue - Snowflake_RR48\u0027[New Grid Revenue Total],'#,0'),[User Selection]='Advice',FORMAT(\u0027CLIENT_HHLD\u0027[Households with Goals - CIF],'0'),'Select a Metric')","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared////Public//DI and BI//Capacity Dashboard//Capacity Dashboard-RR_In_and_Out.xlsx'), null, true),    #'RR_In_and_Out-Raw Data_Sheet' = Source{[Item='RR_In_and_Out-Raw Data',Kind='Sheet']}[Data],    #'Promoted Headers1' = Table.PromoteHeaders(#'RR_In_and_Out-Raw Data_Sheet', [PromoteAllScalars=true]),    #'Changed Type1' = Table.TransformColumnTypes(#'Promoted Headers1',{{'JOIN VALUE', type text}, {'TAG_MVP_Mkt', type text}, {'Year IN', Int64.Type}, {'Year OUT', Int64.Type}, {'Hire Sts', type text}, {'Term Sts', type text}, {'Division_ID', type text}, {'Division_Description', type text}, {'RFO_ID', Int64.Type}, {'RFO_Description', type text}, {'MVP_ID', Int64.Type}, {'Zone_ID', Int64.Type}, {'Zone_Description', type text}, {'TSID', type text}, {'EMPL_NM', type text}, {'Zone_Leader_Name', type text}, {'JOB_TITLE_CODE_2', Int64.Type}, {'JOB_TITLE_NM_2', type text}, {'MGT_RLTN_BEG_DATE', type date}, {'MGT_RLTN_END_DATE', type date}, {'Days_in_RR', Int64.Type}, {'CNTRCT_HIRE_STATUS', Int64.Type}, {'Recode_CNTRCT_HIRE_STATUS', type text}, {'CNTRCT_TERMIN_STS', Int64.Type}, {'Term_ASD_Tenure', type number}, {'Term_ASD_w_BI_Tenure', type number}, {'Term_Transfer_Status', type text}, {'ADJ_SVC_DT', type date}, {'EMPL_SEX_CODE', type text}, {'EMPL_BIRTH_DATE', type date}, {'Contract_Hire_Age', type number}, {'Contract_Hire_Age_Group', type text}, {'S6_LIC_STS_CDE', type text}, {'S7_LIC_STS_CDE', type text}, {'S63_LIC_STS_CDE', type text}, {'S65_LIC_STS_CDE', type text}, {'S66_LIC_STS_CDE', type text}, {'INVS_ADVR_REPR_IND', type text}, {'S7_65_66', type text}, {'PREV_TSID', type text}, {'PREV_JOB', Int64.Type}, {'PREV_END_DATE', type date}, {'DIFFERENCE', Int64.Type}, {'FUTURE_TSID', type text}, {'FUTURE_JOB', Int64.Type}, {'FUTURE_BEG_DATE', type date}, {'FUTURE_DIFFERENCE', Int64.Type}}),    #'Changed Type' = Table.TransformColumnTypes(#'Changed Type1',{{'Division_ID', type text}, {'Division_Description', type text}, {'RFO_ID', Int64.Type}, {'RFO_Description', type text}, {'MVP_ID', Int64.Type}, {'Zone_ID', Int64.Type}, {'Zone_Description', type text}, {'TSID', type text}, {'EMPL_NM', type text}, {'Zone_Leader_Name', type text}, {'JOB_TITLE_CODE_2', Int64.Type}, {'JOB_TITLE_NM_2', type text}, {'MGT_RLTN_BEG_DATE', type date}, {'MGT_RLTN_END_DATE', type date}, {'Days_in_RR', Int64.Type}, {'CNTRCT_HIRE_STATUS', Int64.Type}, {'Recode_CNTRCT_HIRE_STATUS', type text}, {'CNTRCT_TERMIN_STS', Int64.Type}, {'Term_ASD_Tenure', type number}, {'Term_ASD_w_BI_Tenure', type number}, {'Term_Transfer_Status', type text}, {'ADJ_SVC_DT', type date}, {'EMPL_SEX_CODE', type text}, {'EMPL_BIRTH_DATE', type date}, {'Contract_Hire_Age', type number}, {'Contract_Hire_Age_Group', type text}, {'S6_LIC_STS_CDE', type text}, {'S7_LIC_STS_CDE', type text}, {'S63_LIC_STS_CDE', type text}, {'S65_LIC_STS_CDE', type text}, {'S66_LIC_STS_CDE', type text}, {'INVS_ADVR_REPR_IND', type text}, {'S7_65_66', type text}, {'PREV_TSID', type text}, {'PREV_JOB', Int64.Type}, {'PREV_END_DATE', type date}, {'DIFFERENCE', Int64.Type}, {'FUTURE_TSID', type text}, {'FUTURE_JOB', Int64.Type}, {'FUTURE_BEG_DATE', type date}, {'FUTURE_DIFFERENCE', Int64.Type}}),    #'Added Custom' = Table.AddColumn(#'Changed Type', 'Within 17 weeks', each if Date.IsInPreviousNDays([MGT_RLTN_BEG_DATE],119) then 'Y' else 'N'),    #'Filtered Rows1' = Table.SelectRows(#'Added Custom', each [Term Sts] = 'Active Red Role'),    #'Merged Queries' = Table.NestedJoin(#'Filtered Rows1', {'TSID'}, Allego_perTSid_R3, {'tsid'}, 'Allego_perTSid_R3', JoinKind.LeftOuter),    #'Expanded Allego_perTSid_R3' = Table.ExpandTableColumn(#'Merged Queries', 'Allego_perTSid_R3', {'trained_sts'}, {'Allego_perTSid_R3.trained_sts'}),    #'Added Custom1' = Table.AddColumn(#'Expanded Allego_perTSid_R3', 'Year', each 'CY'),    #'Appended Query' = Table.Combine({#'Added Custom1', RR_In_and_Out_PY}),    #'Added Custom2' = Table.AddColumn(#'Appended Query', 'Year-TSID', each [Year]\u0026[TSID]),    #'Merged Queries1' = Table.NestedJoin(#'Added Custom2', {'Year-TSID'}, Sale_Hier_Dim, {'Year-TSID'}, 'Sale_Hier_Dim', JoinKind.LeftOuter),    #'Expanded Sale_Hier_Dim' = Table.ExpandTableColumn(#'Merged Queries1', 'Sale_Hier_Dim', {'Employee Status Type Description', 'Job Type Code'}, {'Sale_Hier_Dim.Employee Status Type Description', 'Sale_Hier_Dim.Job Type Code'}),    #'Merged Queries2' = Table.NestedJoin(#'Expanded Sale_Hier_Dim', {'TAG_MVP_Mkt'}, #'Market Leader Info', {'RFO_ZONE_NM'}, 'Market Leader Info', JoinKind.LeftOuter),    #'Expanded Market Leader Info' = Table.ExpandTableColumn(#'Merged Queries2', 'Market Leader Info', {'RFO_ZONE_NM', 'MARKET_LEADER_NAME'}, {'Market Leader Info.RFO_ZONE_NM', 'Market Leader Info.MARKET_LEADER_NAME'}),    #'Merged Queries3' = Table.NestedJoin(#'Expanded Market Leader Info', {'TSID'}, #'Attendance Data', {'TS'}, 'Attendance Data', JoinKind.LeftOuter),    #'Expanded Attendance Data' = Table.ExpandTableColumn(#'Merged Queries3', 'Attendance Data', {'% Attended Required'}, {'Attendance Data.% Attended Required'}),    #'Renamed Columns' = Table.RenameColumns(#'Expanded Attendance Data',{{'Attendance Data.% Attended Required', 'Attendance Data.Attendance Percentage'}}),    #'Replaced Value' = Table.ReplaceValue(#'Renamed Columns',0,1E-06,Replacer.ReplaceValue,{'Attendance Data.Attendance Percentage'}),    #'Changed Type3' = Table.TransformColumnTypes(#'Replaced Value',{{'Attendance Data.Attendance Percentage', Percentage.Type}}),    #'Merged Queries4' = Table.NestedJoin(#'Changed Type3', {'Year-TSID'}, #'Date Exceptions', {'Year-TSID'}, 'Date Exceptions', JoinKind.LeftOuter),    #'Expanded Date Exceptions' = Table.ExpandTableColumn(#'Merged Queries4', 'Date Exceptions', {'Adj Start Date'}, {'Date Exceptions.Adj Start Date'})in    #'Expanded Date Exceptions'"}]},{"name":"Vitals RR48","isHidden":false,"storageMode":"Import","columns":[{"name":"ThriventId","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Appointment Dimension Surrogate Key","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Person Dimension Surrogate Key","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"appt_occurs","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Person Occurs","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Membership Type Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Appointment Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Appointment Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Performance Year Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Column1","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Life Segment Value Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RR_In_Out.TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MGT_RLTN_BEG_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Within 48 mo","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JFW_IND","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Vital Stats.EMPL_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"After RR Start Flag","dataType":"String","isHidden":false,"expression":"if(\u0027Vitals RR48\u0027[Appointment Date]\u003e=\u0027Vitals RR48\u0027[MGT_RLTN_BEG_DATE],1,0)","columnType":"Calculated"}],"measures":[{"name":"YTD Appts","expression":"var _total=  CALCULATE    (SUMX(DISTINCT(\u0027Vitals RR48\u0027[Appointment Dimension Surrogate Key]), 1),    \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'CURRENT',     \u0027DTRB_PERF_DATES\u0027[Today or Before] = 'Y')ReturnIF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"PYTD Appts","expression":" var _total =  CALCULATE    (SUMX(DISTINCT(\u0027Vitals RR48\u0027[Appointment Dimension Surrogate Key]), 1),    \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'PREVIOUS',    \u0027DTRB_PERF_DATES\u0027[Prior YR or Before] = 'Y')Returnif(isblank(_total),0,_total) ","isHidden":false},{"name":"Prior Appt Total","expression":"var _total =   CALCULATE    (SUMX(DISTINCT(\u0027Vitals RR48\u0027[Appointment Dimension Surrogate Key]), 1),    \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'PREVIOUS',    \u0027DTRB_PERF_DATES\u0027[Today or Before] = 'Y')Returnif(isblank(_total),0,_total) ","isHidden":false},{"name":"Prior YR Prospect Connects Totals","expression":"var _total=   CALCULATE    (SUMX(DISTINCT(\u0027Vitals RR48\u0027[Appointment Dimension Surrogate Key]), 1),    \u0027Vitals RR48\u0027[Membership Type Description] \u003c\u003e 'Benefit',    \u0027Vitals RR48\u0027[Appointment Type Code] = 'Connect',    \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'PREVIOUS')Returnif(isblank(_total),0,_total)   ","isHidden":false},{"name":"PY Prospect Connects","expression":"var _total =CALCULATE(       DISTINCTCOUNT(\u0027Vitals RR48\u0027[Appointment Dimension Surrogate Key]),\u0027DTRB_PERF_DATES\u0027[Prior YR or Before] = 'Y',\u0027Vitals RR48\u0027[Membership Type Description] \u003c\u003e 'Benefit',\u0027Vitals RR48\u0027[Appointment Type Code] = 'Connect')ReturnIF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"CY Prospect Connect","expression":"var _total =   CALCULATE(SUMX(DISTINCT(\u0027Vitals RR48\u0027[Appointment Dimension Surrogate Key]), 1),  \u0027DTRB_PERF_DATES\u0027[Today or Before] = 'Y',  \u0027Vitals RR48\u0027[Membership Type Description] \u003c\u003e  'Benefit',  \u0027Vitals RR48\u0027[Appointment Type Code] = 'Connect'  )  Return  IF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"PY Total JFW","expression":"var _total =CALCULATE(       DISTINCTCOUNT(\u0027Vitals RR48\u0027[Appointment Dimension Surrogate Key]),\u0027DTRB_PERF_DATES\u0027[Prior YR or Before] = 'Y',\u0027Vitals RR48\u0027[JFW_IND] = 1)ReturnIF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"YTD JFW","expression":"var _total =   CALCULATE(SUMX(DISTINCT(\u0027Vitals RR48\u0027[Appointment Dimension Surrogate Key]), 1),  \u0027DTRB_PERF_DATES\u0027[Today or Before] = 'Y',  \u0027Vitals RR48\u0027[JFW_IND] = 1  )  Return  IF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"Prior YR JFW Totals","expression":"var _total=   CALCULATE    (SUMX(DISTINCT(\u0027Vitals RR48\u0027[Appointment Dimension Surrogate Key]), 1),    \u0027Vitals RR48\u0027[JFW_IND] = 1,    \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'PREVIOUS')Returnif(isblank(_total),0,_total)   ","isHidden":false},{"name":"Total Appointments","expression":"var _total=    CALCULATE    (SUMX(DISTINCT(\u0027Vitals RR48\u0027[Appointment Dimension Surrogate Key]), 1),    \u0027DTRB_PERF_DATES\u0027[Today or Before] = 'Y',    \u0027Vitals RR48\u0027[After RR Start Flag]=1)ReturnIF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"Total Prospect Connects","expression":"var _total =   CALCULATE(SUMX(DISTINCT(\u0027Vitals RR48\u0027[Appointment Dimension Surrogate Key]), 1),  \u0027DTRB_PERF_DATES\u0027[Today or Before] = 'Y',  \u0027Vitals RR48\u0027[Membership Type Description] \u003c\u003e  'Benefit',  \u0027Vitals RR48\u0027[Appointment Type Code] = 'Connect',  \u0027Vitals RR48\u0027[After RR Start Flag]=1  )  Return  IF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"Total JFW","expression":"var _total =   CALCULATE(SUMX(DISTINCT(\u0027Vitals RR48\u0027[Appointment Dimension Surrogate Key]), 1),  \u0027DTRB_PERF_DATES\u0027[Today or Before] = 'Y',  AND(\u0027Vitals RR48\u0027[JFW_IND] = 1,\u0027Vitals RR48\u0027[After RR Start Flag]=1)  )  Return  IF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"Total Appointments - PY","expression":"var _total=  CALCULATE    (SUMX(DISTINCT(\u0027Vitals RR48\u0027[Appointment Dimension Surrogate Key]), 1),    \u0027DTRB_PERF_DATES\u0027[PY Today or Before] = 'Y',    \u0027Vitals RR48\u0027[After RR Start Flag]=1)ReturnIF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"Appointments Scheduled","expression":"var _total=    CALCULATE    (SUMX(DISTINCT(\u0027Vitals RR48\u0027[Appointment Dimension Surrogate Key]), 1),    \u0027Vitals RR48\u0027[After RR Start Flag]=1)ReturnIF(ISBLANK(_total),0,_total)","isHidden":false}],"source":[{"expression":"let    Source = Table.NestedJoin(#'Vital Stats', {'EMP_ID'}, RR_In_and_Out, {'TSID'}, 'Vital Stats', JoinKind.Inner),    #'Expanded Vital Stats' = Table.ExpandTableColumn(Source, 'Vital Stats', {'TSID', 'EMPL_NM', 'MGT_RLTN_BEG_DATE', 'Within 48 mo'}, {'Vital Stats.TSID', 'Vital Stats.EMPL_NM', 'Vital Stats.MGT_RLTN_BEG_DATE', 'Vital Stats.Within 48 mo'}),    #'Renamed Columns' = Table.RenameColumns(#'Expanded Vital Stats',{{'Vital Stats.MGT_RLTN_BEG_DATE', 'MGT_RLTN_BEG_DATE'}, {'Vital Stats.Within 48 mo', 'Within 48 mo'}, {'Vital Stats.TSID', 'RR_In_Out.TSID'}})in    #'Renamed Columns'"}]},{"name":"NFC","isHidden":false,"storageMode":"Import","columns":[{"name":"Financial Customer Point Status Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Financial Customer Point Value","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CUST_ID_NBR","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CUST_LGAL_FMT_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Contract Issue Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Level 3 Product Line Of Business Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Level 3 Product Line Of Business Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMPL_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TS ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Calendar Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Financial Customer Point Reason Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Financial Customer Point Reason Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Financial Customer Point Relationship Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Financial Customer Point Relationship Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Year Number","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Trim TSID","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"NC As Of","expression":"Max(\u0027NFC\u0027[Calendar Date])","isHidden":false}],"source":[{"expression":"let    Source = DB2.Database('PODWH021:50000', 'PODWH021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT --IA_DATES_ITRL.DT_SK as ''Date Surrogate Key'',#(lf)      -- TF_FIN_CUST_EVT_FCT_CFDL.CTRC_VRSN_NBR as ''Contract Version Number'',#(lf)      -- TF_FIN_CUST_EVT_FCT_CFDL.WRTG_AGT_VRSN_NBR as ''Writing Agent Version Number'',#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_STS_CDE as ''Financial Customer Point Status Code'',#(lf)      -- TF_FIN_CUST_EVT_FCT_CFDL.CUST_AGE as ''Financial Customer Age'',#(lf)      -- TF_FIN_CUST_EVT_FCT_CFDL.AGE_CLAS_CDE as ''Age Class Code'',#(lf)      -- TF_FIN_CUST_EVT_FCT_CFDL.AGE_CLAS_DSCR as ''Age Class Description'',#(lf)       TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_VLU as ''Financial Customer Point Value'',#(lf)       CNF_CUSTOMER_DIM_CFDL.CUST_ID_NBR,#(lf)       CNF_CUSTOMER_DIM_CFDL.CUST_LGAL_FMT_NM, #(lf)       --CNF_CUSTOMER_DIM_CFDL.CUST_BRTH_DT,#(lf)      -- CNF_CUSTOMER_DIM_CFDL.MBR_TYP_CDE as ''Member Type Code'',#(lf)      -- CNF_CUSTOMER_DIM_CFDL.MBR_TYP_DSCR as ''Member Type Description'',#(lf)      -- CNF_CUSTOMER_DIM_CFDL.RSDL_ST_CDE as ''Residential State Code'',#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.CTRC_ISS_DT as ''Contract Issue Date'', #(lf)      -- CNF_CONTRACT_DIM_DTL_CFDL.L5_PLOB_SGRP_CDE as ''Level 5 Product Line Of Business Subgroup Code'',#(lf)      -- CNF_CONTRACT_DIM_DTL_CFDL.L5_PLOB_SGRP_DSCR as ''Level 5 Product Line Of Business Subgroup Description'',#(lf)      -- CNF_CONTRACT_DIM_DTL_CFDL.L4_PLOB_GRP_CDE as ''Level 4 Product Line Of Business Group Code'',#(lf)      -- CNF_CONTRACT_DIM_DTL_CFDL.L4_PLOB_GRP_DSCR as ''Level 4 Product Line Of Business Group Description'',#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L3_PROD_LOB_CDE as ''Level 3 Product Line Of Business Code'',#(lf)       CNF_CONTRACT_DIM_DTL_CFDL.L3_PROD_LOB_DSCR as ''Level 3 Product Line Of Business Description'',#(lf)     --  CNF_CONTRACT_DIM_DTL_CFDL.L2_PROD_CHAR_CDE as ''Level 2 Product Character Code'',#(lf)      -- CNF_CONTRACT_DIM_DTL_CFDL.L2_PROD_CHAR_DSCR as ''Level 2 Product Character Description'',#(lf)      -- AGT_DIM_CURR_CFDL.PARY_DSPL_2_NM as ''Assigned FR'',#(lf)      -- AGT_DIM_CURR_CFDL.FRST_NM as ''Employee First Name'',#(lf)      -- AGT_DIM_CURR_CFDL.MDDL_NM as ''Employee Middle Name'',#(lf)      -- AGT_DIM_CURR_CFDL.LST_NM as ''Employee Last Name'',#(lf)      AGT_DIM_CURR_CFDL.FRST_NM || \u0027 \u0027 || AGT_DIM_CURR_CFDL.LST_NM as EMPL_NM,#(lf)      -- AGT_DIM_CURR_CFDL.ADJ_SVC_DT as ''Adjusted Service Date'',#(lf)       AGT_DIM_CURR_CFDL.EMP_ID as ''TS ID'',#(lf)      -- AGT_DIM_CURR_CFDL.EMP_STS_TYP_CDE as ''Employee Status Type Code'',#(lf)      -- AGT_DIM_CURR_CFDL.EMP_STS_TYP_DSCR as ''Employee Status Type Description'',#(lf)      -- AGT_DIM_CURR_CFDL.JOB_TYP_CDE as ''Job Type Code'',#(lf)      -- AGT_DIM_CURR_CFDL.JOB_TYP_DSCR as ''Job Type Description'',#(lf)      -- AGT_DIM_CURR_CFDL.CURR_ROW_IND as ''Current Row Indicator Sales Hierarchy'',#(lf)       IA_DATES_ITRL.CAL_DAY_DT as ''Calendar Date'',#(lf)       --IA_DATES_ITRL.CAL_MTH_NM,#(lf)      -- IA_DATES_ITRL.CAL_MTH_STRT_DT as ''Calendar Month State Date'',#(lf)      -- IA_DATES_ITRL.CAL_MTH_END_DT as ''Calendar Month End Date'',#(lf)       --IA_DATES_ITRL.CAL_YR_QTR_NBR,#(lf)       --IA_DATES_ITRL.CAL_QTR_NM,#(lf)       --IA_DATES_ITRL.CAL_WK_NM,#(lf)       FIN_CUST_ELIG_DIM_CFDL.FIN_CUST_PNT_RSN_CDE as ''Financial Customer Point Reason Code'',#(lf)       FIN_CUST_ELIG_DIM_CFDL.FIN_CUST_PNT_RSN_DSCR as ''Financial Customer Point Reason Description'',#(lf)       FIN_CUST_ELIG_DIM_CFDL.CTRC_RLTN_TYP_CDE as ''Financial Customer Point Relationship Code'',#(lf)       FIN_CUST_ELIG_DIM_CFDL.CTRC_RLTN_TYP_DSCR as ''Financial Customer Point Relationship Description'',#(lf)      -- CASE#(lf)      --    WHEN (CUST_AGE \u003e= 0) AND (CUST_AGE \u003c= 15) THEN \u00270-15\u0027#(lf)      --    WHEN (CUST_AGE \u003e= 16) AND (CUST_AGE \u003c= 25) THEN \u002716-25\u0027#(lf)      --    WHEN (CUST_AGE \u003e= 26) AND (CUST_AGE \u003c= 35) THEN \u002726-35\u0027#(lf)      --    WHEN (CUST_AGE \u003e= 36) AND (CUST_AGE \u003c= 45) THEN \u002736-45\u0027#(lf)      --    WHEN (CUST_AGE \u003e= 46) AND (CUST_AGE \u003c= 55) THEN \u002746-55\u0027#(lf)      --    WHEN (CUST_AGE \u003e= 56) AND (CUST_AGE \u003c= 65) THEN \u002756-65\u0027#(lf)      --    WHEN (CUST_AGE \u003e= 66) AND (CUST_AGE \u003c= 75) THEN \u002766-75\u0027#(lf)      --    WHEN CUST_AGE \u003e 75 THEN \u002776+\u0027#(lf)      -- END#(lf)      --    AS ''Financial Customer Age Group'',#(lf)      -- integer (floor ( (CURRENT DATE - CUST_BRTH_DT) / 10000)) AS ''Member Age'',#(lf)      -- DTRB_PERF_DATES.DTRB_PERF_RPT_WK_END_DT as ''Distribution Performance Reporting Week End Date'',#(lf)      -- DTRB_PERF_DATES.DTRB_PERF_RPT_WK_NBR as ''Distribution Performance Reporting Week Number'',#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_YR_NBR as ''Distribution Performance Reporting Year Number'',#(lf)      -- DTRB_PERF_DATES.DTRB_PERF_RPT_YR_WK_NBR as ''Distribution Performance Reporting Year Week Number'',#(lf)      -- DTRB_PERF_DATES.DTRB_PERF_RPT_WK_TXT,#(lf)       DTRB_PERF_DATES.DTRB_PERF_RPT_YR_TXT #(lf)     --  DTRB_PERF_DATES.DTRB_PERF_RPT_DAY_TXT,#(lf)     --  DTRB_PERF_DATES.DTRB_PERF_RPT_MTH_TXT,#(lf)     --  DTRB_PERF_DATES.DTRB_PERF_RPT_QTR_TXT,#(lf)     --  SALE_HIER_DIM.SALE_HIER_ID as ''Sales Hierarchy Identifier'' #(lf)      -- SALE_HIER_DIM.EFF_BEG_TMSP as ''Effective Begin Timestamp'',#(lf)      -- SALE_HIER_DIM.EFF_END_TMSP as ''Effective End Timestamp'',#(lf)      -- SALE_HIER_DIM.CURR_ROW_IND as ''Agent Current Row Indicator'',#(lf)      -- SALE_HIER_DIM.PRTR_NM as ''Partner Name'',#(lf)      -- SALE_HIER_DIM.MANP_NM as ''Managing Partner Name'',#(lf)      -- SALE_HIER_DIM.ORZN_ZONE_CDE as ''Market'',#(lf)      -- SALE_HIER_DIM.ORZN_ZONE_DSCR as ''Organization Zone Description'',#(lf)      -- SALE_HIER_DIM.ORZN_DEPT_CDE as ''RFO'',#(lf)      -- SALE_HIER_DIM.ORZN_DEPT_DSCR as ''Organization Department Description'',#(lf)      -- SALE_HIER_DIM.ORZN_DIV_CDE as ''Organization Division Code'',#(lf)      -- SALE_HIER_DIM.ORZN_DIV_DSCR as ''Organization Division Description'',#(lf)      -- SALE_HIER_DIM.SALE_HIER_DIM_SK as ''Sales Hierarchy Dimension Surrogate Key''#(lf)#(lf)  FROM ((((((COMMON.IA_DATES_ITRL IA_DATES_ITRL INNER JOIN#(lf)             COMMON.DTRB_PERF_DATES DTRB_PERF_DATES#(lf)          ON (IA_DATES_ITRL.DT_SK = DTRB_PERF_DATES.DT_SK)) LEFT OUTER JOIN#(lf)             SALES.TF_FIN_CUST_EVT_FCT_CFDL TF_FIN_CUST_EVT_FCT_CFDL#(lf)          ON (IA_DATES_ITRL.DT_SK = TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_CRNG_DT_SK)) RIGHT OUTER JOIN#(lf)             HUMAN_RESOURCES.SALE_HIER_DIM SALE_HIER_DIM#(lf)          ON (SALE_HIER_DIM.SALE_HIER_DIM_SK = TF_FIN_CUST_EVT_FCT_CFDL.SLHR_DIM_CURR_CRNG_AGT_SK)) LEFT OUTER JOIN#(lf)             MEMBER.CNF_CUSTOMER_DIM_CFDL CNF_CUSTOMER_DIM_CFDL#(lf)          ON (CNF_CUSTOMER_DIM_CFDL.CUST_SK = TF_FIN_CUST_EVT_FCT_CFDL.CUST_SK)) LEFT OUTER JOIN#(lf)             HUMAN_RESOURCES.AGT_DIM_CURR_CFDL AGT_DIM_CURR_CFDL#(lf)          ON (AGT_DIM_CURR_CFDL.AGT_DIM_SK = TF_FIN_CUST_EVT_FCT_CFDL.CRNG_AGT_SK)) RIGHT OUTER JOIN#(lf)             SALES.FIN_CUST_ELIG_DIM_CFDL FIN_CUST_ELIG_DIM_CFDL#(lf)          ON (FIN_CUST_ELIG_DIM_CFDL.FIN_CUST_PNT_ELIG_DIM_SK = TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_ELIG_DIM_SK)) LEFT OUTER JOIN#(lf)             CONTRACT.CNF_CONTRACT_DIM_DTL_CFDL CNF_CONTRACT_DIM_DTL_CFDL#(lf)          ON (CNF_CONTRACT_DIM_DTL_CFDL.CTRC_SK = TF_FIN_CUST_EVT_FCT_CFDL.CTRC_SK) and #(lf)             (CNF_CONTRACT_DIM_DTL_CFDL.VRSN_NBR = TF_FIN_CUST_EVT_FCT_CFDL.CTRC_VRSN_NBR)#(lf)                     #(lf) WHERE (AGT_DIM_CURR_CFDL.CURR_ROW_IND = \u0027Y\u0027)#(lf)   AND (SALE_HIER_DIM.CURR_ROW_IND = \u0027Y\u0027)#(lf)   AND (sale_hier_dim.ORZN_DEPT_CDE in (\u00270001\u0027, \u00270115\u0027,\u00270165\u0027,\u00270190\u0027,\u00270240\u0027,\u00270283\u0027,\u00270291\u0027,\u00270361\u0027,\u00270365\u0027,\u00270384\u0027,\u00270410\u0027,\u00270435\u0027,\u00270475\u0027,\u00270496\u0027,\u00270525\u0027,\u00270529\u0027,\u00270810\u0027)#(lf)    or AGT_DIM_CURR_CFDL.ORZN_DEPT_CDE in (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027))  #(lf)AND DTRB_PERF_DATES.DTRB_PERF_RPT_YR_NBR in (\u00272021\u0027,\u00272022\u0027,\u00272023\u0027,\u00272024\u0027)#(lf)   AND substring(SALE_HIER_DIM.SALE_HIER_ID,1,2)=\u0027TS\u0027#(lf)   and TF_FIN_CUST_EVT_FCT_CFDL.FIN_CUST_PNT_VLU \u003c\u003e 0']),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Calendar Date', type date}, {'Contract Issue Date', type date}}),    #'Added Custom' = Table.AddColumn(#'Changed Type', 'Trim TSID', each Text.Trim([TS ID]))in    #'Added Custom'"}]},{"name":"NFC RR48","isHidden":false,"storageMode":"Import","columns":[{"name":"Financial Customer Point Status Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Financial Customer Point Value","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CUST_ID_NBR","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CUST_LGAL_FMT_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Contract Issue Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Level 3 Product Line Of Business Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Level 3 Product Line Of Business Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMPL_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TS ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Calendar Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Financial Customer Point Reason Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Financial Customer Point Reason Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Financial Customer Point Relationship Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Financial Customer Point Relationship Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Year Number","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Trim TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RR_In_and_Out.EMPL_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RR_In_and_Out.MGT_RLTN_BEG_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"RR_In_and_Out.Within 48 mo","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PY NFC Flag","dataType":"String","isHidden":false,"expression":"if(\u0027NFC RR48\u0027[DTRB_PERF_RPT_YR_TXT] = 'Previous', 1,0)","columnType":"Calculated"},{"name":"YTD NFC Flag","dataType":"String","isHidden":false,"expression":"if(and(\u0027NFC RR48\u0027[Calendar Date] \u003c= DATE(YEAR(today()),MONTH(today()),DAY(today())),YEAR(\u0027NFC RR48\u0027[Calendar Date]) = YEAR(today())), 1, 0)","columnType":"Calculated"},{"name":"PYTD NFC Flag","dataType":"String","isHidden":false,"expression":" if(and(\u0027NFC RR48\u0027[Calendar Date] \u003c= DATE(YEAR(today())-1,MONTH(today()),DAY(today())), \u0027NFC RR48\u0027[Distribution Performance Reporting Year Number] = YEAR(today())-1), 1, 0)","columnType":"Calculated"},{"name":"After RR Start Flag","dataType":"String","isHidden":false,"expression":"if(\u0027NFC RR48\u0027[Calendar Date]\u003e=\u0027NFC RR48\u0027[RR_In_and_Out.MGT_RLTN_BEG_DATE],1,0)","columnType":"Calculated"}],"measures":[{"name":"PY New Clients","expression":"var _total=CALCULATE(sum(\u0027NFC RR48\u0027[Financial Customer Point Value]), \u0027NFC RR48\u0027[PY NFC Flag] = 1)RETURNif(isblank(_total),0,_total)","isHidden":false},{"name":"PYTD New Clients","expression":"var _total=CALCULATE(sum(\u0027NFC RR48\u0027[Financial Customer Point Value]), \u0027NFC RR48\u0027[PYTD NFC Flag] = 1)RETURNif(isblank(_total),0,_total)","isHidden":false},{"name":"YTD New Clients","expression":"var _total=CALCULATE(sum(\u0027NFC\u0027[Financial Customer Point Value]), \u0027NFC\u0027[DTRB_PERF_RPT_YR_TXT]='Current')RETURNif(isblank(_total),0,_total)","isHidden":false},{"name":"Total New Clients","expression":"var _total=CALCULATE(sum(\u0027NFC RR48\u0027[Financial Customer Point Value]),\u0027NFC RR48\u0027[After RR Start Flag]=1)RETURNif(isblank(_total),0,_total)","isHidden":false},{"name":"Total New Clients-PY","expression":"var _total=CALCULATE(sum(\u0027NFC RR48\u0027[Financial Customer Point Value]),\u0027NFC RR48\u0027[After RR Start Flag]=1,\u0027NFC RR48\u0027[Calendar Date]\u003c(NOW()-365))RETURNif(isblank(_total),0,_total)","isHidden":false}],"source":[{"expression":"let    Source = Table.NestedJoin(NFC, {'Trim TSID'}, RR_In_and_Out, {'TSID'}, 'RR_In_and_Out', JoinKind.Inner),    #'Expanded RR_In_and_Out' = Table.ExpandTableColumn(Source, 'RR_In_and_Out', {'EMPL_NM', 'MGT_RLTN_BEG_DATE', 'Within 48 mo'}, {'RR_In_and_Out.EMPL_NM', 'RR_In_and_Out.MGT_RLTN_BEG_DATE', 'RR_In_and_Out.Within 48 mo'})in    #'Expanded RR_In_and_Out'"}]},{"name":"DTRB_PERF_DATES","isHidden":false,"storageMode":"Import","columns":[{"name":"DT_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CAL_DAY_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_END_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_WK_NBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"SRC_SYS_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CRET_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"LST_UPDT_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"CRET_USER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LST_UPDT_USER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_DAY_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_MTH_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_QTR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_WK_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTRB_PERF_RPT_YR_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Today or Before","dataType":"String","isHidden":false,"expression":"if(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT]\u003eNOW()-1,'N','Y')","columnType":"Calculated"},{"name":"Prior YR or Before","dataType":"String","isHidden":false,"expression":"if(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT]\u003eNOW()-366,'N','Y')","columnType":"Calculated"},{"name":"PY Today or Before","dataType":"String","isHidden":false,"expression":"if(\u0027DTRB_PERF_DATES\u0027[CAL_DAY_DT]\u003eNOW()-366,'N','Y')","columnType":"Calculated"}],"measures":[],"source":[{"expression":"let    Source = DB2.Database('PODWH021:50000', 'PODWH021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT DT_SK, #(lf)       CAL_DAY_DT, #(lf)       DTRB_PERF_RPT_WK_END_DT, #(lf)       DTRB_PERF_RPT_WK_NBR,#(lf)       DTRB_PERF_RPT_YR_NBR,#(lf)       DTRB_PERF_RPT_YR_WK_NBR,#(lf)       SRC_SYS_ID, #(lf)       CRET_TMSP, #(lf)       LST_UPDT_TMSP, #(lf)       CRET_USER_ID, #(lf)       LST_UPDT_USER_ID, #(lf)       DTRB_PERF_RPT_DAY_TXT, #(lf)       DTRB_PERF_RPT_MTH_TXT, #(lf)       DTRB_PERF_RPT_QTR_TXT, #(lf)       DTRB_PERF_RPT_WK_TXT,#(lf)       DTRB_PERF_RPT_YR_TXT#(lf)      FROM COMMON.DTRB_PERF_DATES  #(lf)    WHERE DTRB_PERF_RPT_YR_NBR IN (2020,2021, 2022, 2023, 2024)'])in    Source"}]},{"name":"Referrals","isHidden":false,"storageMode":"Import","columns":[{"name":"PERS_DIM_SK","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"REFR_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Referral_Occurs","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee Display Name","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Sql.Database('dbedwdwprd', 'enterprisedatamart', [Query='SELECT#(tab)#(lf)#(tab)ref_fct.PERS_DIM_SK,#(lf)#(tab)ref_fct.REFR_DT,#(lf)#(tab)sum(ref_fct.OCCURS) [Referral_Occurs],#(lf)#(tab)org_dim.[Source System Key Text] AS EMP_ID,#(lf)#(tab)org_dim.[Last Name]+\u0027, \u0027+org_dim.[First Name] as ''Employee Display Name'' #(lf)#(lf)  FROM [EnterpriseDataMart].[DM_01].[REFERRAL_FCT] ref_fct LEFT JOIN#(lf)       EnterpriseDataMart.DM_01.[Date Dimension] date_dim#(lf)   on (ref_fct.[REFR_DT]=date_dim.[Calendar Date Date]) LEFT JOIN#(lf)       EnterpriseDataMart.DM_01.[Organization Dimension] org_dim#(lf)   on ((ref_fct.REFR_ORZN_DIM_SK=org_dim.[Organization Dimension Surrogate Key]) and#(lf)       (ref_fct.REFR_ORZN_DIM_VRSN_NBR=org_dim.[Organization Dimension Version Number])) LEFT JOIN#(lf)       EnterpriseDataMart.DM_01.[SALE_HIER_DIM] sale_hier_dim#(lf)   on ((sale_hier_dim.EFF_BEG_DT \u003c= ref_fct.REFR_DT) and#(lf)       (ref_fct.REFR_DT \u003c= DATEADD(day,-1,sale_hier_dim.EFF_END_DT)) and  #(lf)       #(tab)sale_hier_dim.CURR_ROW_IND = \u0027Y\u0027 and #(lf)#(tab)org_dim.[Source System Key Text]=sale_hier_dim.[SALE_HIER_ID])#(lf)#(lf)where ref_fct.PERS_DIM_SK \u003c\u003e 0#(lf)  and sale_hier_dim.ORZN_DEPT_CDE in (\u00270115\u0027,\u00270165\u0027,\u00270190\u0027,\u00270240\u0027,\u00270283\u0027,\u00270291\u0027,\u00270361\u0027,\u00270365\u0027,\u00270383\u0027,\u00270384\u0027,\u00270410\u0027,\u00270435\u0027,\u00270475\u0027,\u00270496\u0027,\u00270525\u0027,\u00270529\u0027,\u00270810\u0027)#(lf)  and (org_dim.[Job Type Code] in (\u0027002000\u0027, \u0027002003\u0027, \u0027002008\u0027, \u0027002010\u0027, \u0027002011\u0027, \u0027002012\u0027, \u0027002016\u0027, \u0027002022\u0027, \u0027002024\u0027, \u0027002025\u0027, \u0027002026\u0027, \u0027002027\u0027, \u0027002030\u0027, \u0027002031\u0027, \u0027002032\u0027, \u0027003100\u0027, \u0027003500\u0027)#(lf)   or  org_dim.[Department Identifier] in (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027))  and date_dim.[Calendar Year Name] in (\u00272021\u0027,\u00272022\u0027,\u00272023\u0027)#(lf)#(lf)group by#(lf)#(tab)ref_fct.PERS_DIM_SK,#(lf)#(tab)ref_fct.REFR_DT,#(lf)#(tab)org_dim.[Source System Key Text],#(lf)          org_dim.[Last Name]+\u0027, \u0027+org_dim.[First Name]#(lf)having #(lf)sum(ref_fct.OCCURS) \u003e 0'])in    Source"}]},{"name":"Referrals RR48","isHidden":false,"storageMode":"Import","columns":[{"name":"PERS_DIM_SK","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"REFR_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Referral_Occurs","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee Display Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RR_In_and_Out.EMPL_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RR_In_and_Out.MGT_RLTN_BEG_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"RR_In_and_Out.Within 48 mo","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"After RR Start Flag","dataType":"String","isHidden":false,"expression":"if(\u0027Referrals RR48\u0027[REFR_DT]\u003e=\u0027Referrals RR48\u0027[RR_In_and_Out.MGT_RLTN_BEG_DATE],1,0)","columnType":"Calculated"}],"measures":[{"name":"YTD Referrals","expression":"var _total=  CALCULATE    (SUMX(DISTINCT(\u0027Referrals RR48\u0027[PERS_DIM_SK]), 1),    \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'CURRENT',     \u0027DTRB_PERF_DATES\u0027[Today or Before] = 'Y')ReturnIF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"PY Total Referrals","expression":" var _total =  CALCULATE    (SUMX(DISTINCT(\u0027Referrals RR48\u0027[PERS_DIM_SK]), 1),    \u0027DTRB_PERF_DATES\u0027[Prior YR or Before] = 'Y')Returnif(isblank(_total),0,_total) ","isHidden":false},{"name":"Prior Year Referrals","expression":"var _total =   CALCULATE    (SUMX(DISTINCT(\u0027Referrals RR48\u0027[PERS_DIM_SK]), 1),    \u0027DTRB_PERF_DATES\u0027[DTRB_PERF_RPT_YR_TXT] = 'PREVIOUS',    \u0027DTRB_PERF_DATES\u0027[Today or Before] = 'Y')Returnif(isblank(_total),0,_total) ","isHidden":false},{"name":"Total Referrals","expression":"var _total=  CALCULATE    (SUMX(DISTINCT(\u0027Referrals RR48\u0027[PERS_DIM_SK]), 1),    \u0027DTRB_PERF_DATES\u0027[Today or Before] = 'Y',    \u0027Referrals RR48\u0027[After RR Start Flag]=1)ReturnIF(ISBLANK(_total),0,_total)","isHidden":false}],"source":[{"expression":"let    Source = Table.NestedJoin(Referrals, {'EMP_ID'}, RR_In_and_Out, {'TSID'}, 'RR_In_and_Out', JoinKind.Inner),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'REFR_DT', type date}}),    #'Expanded RR_In_and_Out' = Table.ExpandTableColumn(#'Changed Type', 'RR_In_and_Out', {'EMPL_NM', 'MGT_RLTN_BEG_DATE', 'Within 48 mo'}, {'RR_In_and_Out.EMPL_NM', 'RR_In_and_Out.MGT_RLTN_BEG_DATE', 'RR_In_and_Out.Within 48 mo'})in    #'Expanded RR_In_and_Out'"}]},{"name":"Pending","isHidden":false,"storageMode":"Import","columns":[{"name":"Financial Services Agreement Surrogate Key","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"RFOCODE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFONAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ZONE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ZONE_NAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CORPORATEEMPLOYEEID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"AgentFullName","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"New Business Application Number","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"BENEFITCONTRACTNUMBER","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PRODUCT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LOB","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CIFOWNERFULLNAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Financial Services Agreement Owner Person Surrogate Key","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"MBR_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ESTIMATEDSALESCREDITAMT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"BENEFIT_AMOUNT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"DAYS_PENDING","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TRANSRECEIVEDT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TRANSDESC","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CTRC_PND_CATG_EXCD","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'select Distinct aa.''Financial Services Agreement Surrogate Key'',#(lf)                c.''Department Identifier'' as RFOCode,#(lf)                c.''Department Name'' as RFOName,#(lf)                substring(c.''RFO Zone Identifier'',6,2) as Zone,#(lf)                substring(c.''RFO Zone Name'',1,18) as Zone_Name,#(lf)                c.''Source System Key Text'' as CorporateEmployeeID,#(lf)                --trim(c.''First Name'') || \u0027 \u0027 || trim(c.''Last Name'') as ''AgentFullName'',#(lf)                trim(c.''Last Name'')||\u0027, \u0027||trim(c.''First Name'') as ''AgentFullName'',#(lf)                aa.''New Business Application Number'' as ''New Business Application Number'',#(lf)                d.''Benefit Contract Number'' as BenefitContractNumber,#(lf)                aa.''Adjusted Level 3 Product Line Of Business Code'' as Product,#(lf)                e.''Benefit Contract Type Description'' as LOB,#(lf)                --trim(f.''First Name'')||\u0027 \u0027|| trim(f.''Last Name'') as CIFOwnerFullName,#(lf)                trim(f.''Last Name'')||\u0027, \u0027||trim(f.''First Name'') as CIFOwnerFullName,#(lf)                aa.''Financial Services Agreement Owner Person Surrogate Key'',#(lf)                h.''Membership Type Description'' as MBR_TYP_CDE,#(lf)                aa.''New Sales Credit Estimated Amount'' as EstimatedSalesCreditAmt,#(lf)                aa.''New Business Application Face Amount'' as Benefit_Amount,#(lf)                aa.''New Business Application Days Pending Count'' as Days_Pending,#(lf)                aa.''Application Receive Date Surrogate Key'' as TransReceiveDT,#(lf)                aa.''New Business Application Type Description'' as TransDesc,#(lf)                aa.''New Business Application Current Pending Category Description'' as CTRC_PND_CATG_EXCD#(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''New Business Applications Summarized'' as aa left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Contract Dimension'' as d#(lf)    on aa.''Financial Services Agreement Surrogate Key''=d.''Contract Dimension Surrogate Key'' left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Conformed Contract Dimension Detail''  as e on#(lf)     (d.''Benefit Contract Number''= e.''Benefit Contract Number''  and d.''Benefit Contract Type Code'' = e.''Benefit Contract Type Code'') left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Person Dimension'' as f#(lf)    on aa.''Financial Services Agreement Owner Person Surrogate Key'' = f.''Person Dimension Surrogate Key'' left join#(lf)       (''ENTERPRISE_EDW''.''PRESENTATION_01''.''Membership Fact'' as g inner join #(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Membership Type Dimension'' as h #(lf)        on g.''Membership Type Dimension Surrogate Key'' = h.''Membership Type Dimension Surrogate Key'' and g.''Effective End Date''=\u00279999-12-31\u0027) #(lf)    on f.''Person Dimension Surrogate Key'' = g.''Person Dimension Surrogate Key''  left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' as c#(lf)    on(aa.''Writing Agent Surrogate Key'' = c.''Organization Dimension Surrogate Key'')   #(lf)  where aa.''New Business Application Current Status Description'' =\u0027Pending\u0027 #(lf)    and c.''Current Row Indicator'' = \u0027Y\u0027#(lf)    and d.''Current Row Indicator'' = \u0027Y\u0027#(lf)    and e.''Current Row Indicator'' = \u0027Y\u0027#(lf)    and f.''Current Row Indicator'' = \u0027Y\u0027', null, [EnableFolding=true])in    Source"}]},{"name":"Pending RR48","isHidden":false,"storageMode":"Import","columns":[{"name":"CORPORATEEMPLOYEEID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"AgentFullName","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LOB","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MBR_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ESTIMATEDSALESCREDITAMT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TRANSRECEIVEDT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"CTRC_PND_CATG_EXCD","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RR_In_and_Out.EMPL_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RR_In_and_Out.MGT_RLTN_BEG_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"RR_In_and_Out.Within 48 mo","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFOCode","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFOName","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Zone","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Zone_Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_ZONE_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_SUB_DEPT_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_UNIT_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP_NAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CIFOwnerFullName","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"BenefitContractNumber","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Benefit_Amount","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Days_Pending","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"TransDesc","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Count","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"PRODUCT","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Pending Amount Total","expression":"var pendamt = sum(\u0027Pending RR48\u0027[ESTIMATEDSALESCREDITAMT])Returnif(isblank(pendamt),0,pendamt) ","isHidden":false},{"name":"Pending Amount-PY","expression":"var pendamt = calculate(sum(\u0027Pending RR48\u0027[ESTIMATEDSALESCREDITAMT]),\u0027Pending RR48\u0027[TRANSRECEIVEDT]\u003c(NOW()-365))Returnif(isblank(pendamt),0,pendamt) ","isHidden":false},{"name":"Pending Applications","expression":"var pendcount = COUNT(\u0027Pending RR48\u0027[BenefitContractNumber])Returnif(isblank(pendcount),0,pendcount) ","isHidden":false},{"name":"PY Pending Applications","expression":"var pendcount = Calculate(COUNT(\u0027Pending RR48\u0027[BenefitContractNumber]),\u0027Pending RR48\u0027[TRANSRECEIVEDT]\u003c(NOW()-365))Returnif(isblank(pendcount),0,pendcount) ","isHidden":false}],"source":[{"expression":"let    Source = Table.NestedJoin(RFO_PENDING_DETAIL, {'CORPORATEEMPLOYEEID'}, RR_In_and_Out, {'TSID'}, 'RR_In_and_Out', JoinKind.Inner),    #'Expanded RR_In_and_Out' = Table.ExpandTableColumn(Source, 'RR_In_and_Out', {'EMPL_NM', 'MGT_RLTN_BEG_DATE', 'Within 48 mo'}, {'RR_In_and_Out.EMPL_NM', 'RR_In_and_Out.MGT_RLTN_BEG_DATE', 'RR_In_and_Out.Within 48 mo'})in    #'Expanded RR_In_and_Out'"}]},{"name":"MGP_KPIs_detail","isHidden":false,"storageMode":"Import","columns":[{"name":"asOfDt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TSid_DshBd","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MGP_hhld_id","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"prim_cifid","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"co_cifid","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"cnt_cyr_FFind","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"mgp_hhld_crdt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"mgp_hhld_updt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"cnt_cyr_rcmdFP_updt","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"rcmdPlan_crdt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"rcmdPlan_updt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"cnt_cyr_rpt","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"max_rpt_crdt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TSid_MGP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TSid_SREP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"record_updt","dataType":"DateTime","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Fact Finders","expression":"  var FFIND = sum(MGP_KPIs_detail[cnt_cyr_FFind])return  IF(ISBLANK(FFIND),0,FFIND)","isHidden":false}],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////Vsshr//shared//Public//DI and BI//Field Reporting//MGP//MGP_KPIs_detail.csv'),[Delimiter=',', Columns=16, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Use First Row as Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Change Type' = Table.TransformColumnTypes(#'Use First Row as Headers',{{'asOfDt', type date}, {'TSid_DshBd', type text}, {'MGP_hhld_id', Int64.Type}, {'prim_cifid', Int64.Type}, {'co_cifid', Int64.Type}, {'cnt_cyr_FFind', Int64.Type}, {'mgp_hhld_crdt', type date}, {'mgp_hhld_updt', type date}, {'cnt_cyr_rcmdFP_updt', Int64.Type}, {'rcmdPlan_crdt', type date}, {'rcmdPlan_updt', type date}, {'cnt_cyr_rpt', Int64.Type}, {'max_rpt_crdt', type date}, {'TSid_MGP', type text}, {'TSid_SREP', type text}, {'record_updt', type date}})in    #'Change Type'"}]},{"name":"Allego_perTSid_R3","isHidden":false,"storageMode":"Import","columns":[{"name":"wave","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"tsid","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"asOfDt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_CDE","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"fld_jobcde_ind","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"tot_course_cnt","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"pct_complete","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"trained_sts","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////Vsshr//shared//Public//DI and BI//Field Reporting//Allego//ForDB//Allego_perTSid_R3.csv'),[Delimiter=',', Columns=8, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'wave', type text}, {'tsid', type text}, {'asOfDt', type date}, {'JOB_TYP_CDE', Int64.Type}, {'fld_jobcde_ind', Int64.Type}, {'tot_course_cnt', Int64.Type}, {'pct_complete', type text}, {'trained_sts', type text}})in    #'Changed Type'"}]},{"name":"Allego_RR48","isHidden":false,"storageMode":"Import","columns":[{"name":"wave","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"tsid","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"asOfDt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_CDE","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"fld_jobcde_ind","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"tot_course_cnt","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"pct_complete","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"trained_sts","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RR_In_and_Out.EMPL_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RR_In_and_Out.MGT_RLTN_BEG_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"RR_In_and_Out.Within 48 mo","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.NestedJoin(Allego_perTSid_R3, {'tsid'}, RR_In_and_Out, {'TSID'}, 'RR_In_and_Out', JoinKind.Inner),    #'Expanded RR_In_and_Out' = Table.ExpandTableColumn(Source, 'RR_In_and_Out', {'EMPL_NM', 'MGT_RLTN_BEG_DATE', 'Within 48 mo'}, {'RR_In_and_Out.EMPL_NM', 'RR_In_and_Out.MGT_RLTN_BEG_DATE', 'RR_In_and_Out.Within 48 mo'})in    #'Expanded RR_In_and_Out'"}]},{"name":"Sale_Hier_Dim","isHidden":false,"storageMode":"Import","columns":[{"name":"SALE_HIER_DIM_SK","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"SALE_HIER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EFF_BEG_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"EFF_END_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"CURR_ROW_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_ZONE_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_ZONE_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_DIV_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_SUB_DEPT_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee Status Type Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Year-TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Type Code","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Sql.Database('dbedwdwprd', 'enterprisedatamart', [Query='(select #(lf)sale_hier_dim.[SALE_HIER_DIM_SK],#(lf)sale_hier_dim.[SALE_HIER_ID],#(lf)sale_hier_dim.[EFF_BEG_DT],#(lf)sale_hier_dim.[EFF_END_DT],#(lf)sale_hier_dim.[CURR_ROW_IND],#(lf)sale_hier_dim.[ORZN_ZONE_CDE],#(lf)sale_hier_dim.[ORZN_ZONE_DSCR],#(lf)sale_hier_dim.[ORZN_DIV_CDE],#(lf)sale_hier_dim.[ORZN_SUB_DEPT_CDE],#(lf)org_dim.[Employee Status Type Description],#(lf)org_dim.[Job Type Code],#(lf)concat(\u0027CY\u0027,sale_hier_dim.[SALE_HIER_ID]) as \u0027Year-TSID\u0027#(lf)  from EnterpriseDataMart.DM_01.[SALE_HIER_DIM] sale_hier_dim LEFT JOIN#(lf)#(tab)#(tab)EnterpriseDataMart.DM_01.[Organization Dimension] Org_dim ON#(lf)((org_dim.[Source System Key Text]=sale_hier_dim.[SALE_HIER_ID] and#(lf)(sale_hier_dim.EFF_BEG_DT\u003c=CURRENT_TIMESTAMP) and#(lf)(CURRENT_TIMESTAMP\u003c= sale_hier_dim.EFF_END_DT) and #(lf) sale_hier_dim.CURR_ROW_IND = \u0027Y\u0027))#(lf)#(lf)    where sale_hier_dim.CURR_ROW_IND = \u0027Y\u0027 and#(lf)#(tab)(sale_hier_dim.EFF_BEG_DT\u003c=CURRENT_TIMESTAMP) and#(lf)(CURRENT_TIMESTAMP\u003c= sale_hier_dim.EFF_END_DT) and#(lf)((org_dim.[Effective Begin Date] \u003c= CURRENT_TIMESTAMP) and #(lf)(CURRENT_TIMESTAMP \u003c= org_dim.[Effective End Date])))#(lf)UNION ALL#(lf)(select #(lf)sale_hier_dim.[SALE_HIER_DIM_SK],#(lf)sale_hier_dim.[SALE_HIER_ID],#(lf)sale_hier_dim.[EFF_BEG_DT],#(lf)sale_hier_dim.[EFF_END_DT],#(lf)sale_hier_dim.[CURR_ROW_IND],#(lf)sale_hier_dim.[ORZN_ZONE_CDE],#(lf)sale_hier_dim.[ORZN_ZONE_DSCR],#(lf)sale_hier_dim.[ORZN_DIV_CDE],#(lf)sale_hier_dim.[ORZN_SUB_DEPT_CDE],#(lf)org_dim.[Employee Status Type Description],#(lf)org_dim.[Job Type Code],#(lf)concat(\u0027PY\u0027,sale_hier_dim.[SALE_HIER_ID]) as \u0027Year-TSID\u0027#(lf)  from EnterpriseDataMart.DM_01.[SALE_HIER_DIM] sale_hier_dim LEFT JOIN#(lf)#(tab)#(tab)EnterpriseDataMart.DM_01.[Organization Dimension] Org_dim ON#(lf)((org_dim.[Source System Key Text]=sale_hier_dim.[SALE_HIER_ID] and#(lf)(sale_hier_dim.EFF_BEG_DT\u003c=Dateadd(year,-1,CURRENT_TIMESTAMP)) and#(lf)(Dateadd(year,-1,CURRENT_TIMESTAMP)\u003c= sale_hier_dim.EFF_END_DT) and #(lf) sale_hier_dim.CURR_ROW_IND = \u0027Y\u0027))#(lf)#(lf)    where sale_hier_dim.CURR_ROW_IND = \u0027Y\u0027 and#(lf)#(tab)(sale_hier_dim.EFF_BEG_DT\u003c=Dateadd(year,-1,CAST(CURRENT_TIMESTAMP AS DATE))) and#(lf)(Dateadd(year,-1,CAST(CURRENT_TIMESTAMP AS DATE))\u003c= sale_hier_dim.EFF_END_DT) and#(lf)((org_dim.[Effective Begin Date] \u003c= Dateadd(year,-1,CAST(CURRENT_TIMESTAMP AS DATE))) and #(lf)(Dateadd(year,-1,CAST(CURRENT_TIMESTAMP AS DATE)) \u003c= org_dim.[Effective End Date])))']),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'EFF_BEG_DT', type date}, {'EFF_END_DT', type date}})in    #'Changed Type'"}]},{"name":"MGP_KPIs_detail_RR48","isHidden":false,"storageMode":"Import","columns":[{"name":"asOfDt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TSid_DshBd","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MGP_hhld_id","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"prim_cifid","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"co_cifid","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"cnt_cyr_FFind","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"mgp_hhld_crdt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"mgp_hhld_updt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"cnt_cyr_rcmdFP_updt","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"rcmdPlan_crdt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"rcmdPlan_updt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"cnt_cyr_rpt","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"max_rpt_crdt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TSid_MGP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TSid_SREP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"record_updt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"RR_In_and_Out.EMPL_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RR_In_and_Out.MGT_RLTN_BEG_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"RR_In_and_Out.Within 48 mo","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Year-TSID","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Households with Goals","expression":"var hh=sum(\u0027MGP_KPIs_detail_RR48\u0027[cnt_cyr_FFind])returnif(isblank(hh),0,hh)","isHidden":false}],"source":[{"expression":"let    Source = Table.NestedJoin(MGP_KPIs_detail, {'TSid_DshBd'}, RR_In_and_Out, {'TSID'}, 'RR_In_and_Out', JoinKind.Inner),    #'Expanded RR_In_and_Out' = Table.ExpandTableColumn(Source, 'RR_In_and_Out', {'EMPL_NM', 'MGT_RLTN_BEG_DATE', 'Within 48 mo'}, {'RR_In_and_Out.EMPL_NM', 'RR_In_and_Out.MGT_RLTN_BEG_DATE', 'RR_In_and_Out.Within 48 mo'}),    #'Added Custom' = Table.AddColumn(#'Expanded RR_In_and_Out', 'Year-TSID', each 'CY'\u0026[TSid_DshBd])in    #'Added Custom'"}]},{"name":"Sale_Hier_Dim_RR48","isHidden":false,"storageMode":"Import","columns":[{"name":"SALE_HIER_DIM_SK","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"SALE_HIER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EFF_BEG_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"EFF_END_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"CURR_ROW_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_ZONE_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_ZONE_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_DIV_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_SUB_DEPT_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee Status Type Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RR_In_and_Out.EMPL_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RR_In_and_Out.MGT_RLTN_BEG_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"RR_In_and_Out.Within 17 weeks","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG","dataType":"String","isHidden":false,"expression":"LEFT(RIGHT(Sale_Hier_Dim_RR48[ORZN_ZONE_DSCR],LEN(Sale_Hier_Dim_RR48[ORZN_ZONE_DSCR])-4),4)","columnType":"Calculated"},{"name":"MVP","dataType":"String","isHidden":false,"expression":"LEFT(RIGHT(Sale_Hier_Dim_RR48[ORZN_ZONE_DSCR],LEN(Sale_Hier_Dim_RR48[ORZN_ZONE_DSCR])-13),2)","columnType":"Calculated"},{"name":"Market","dataType":"String","isHidden":false,"expression":"LEFT(RIGHT(Sale_Hier_Dim_RR48[ORZN_ZONE_DSCR],LEN(Sale_Hier_Dim_RR48[ORZN_ZONE_DSCR])-23),2)","columnType":"Calculated"},{"name":"Year-TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Status","dataType":"String","isHidden":false,"expression":"if(Sale_Hier_Dim_RR48[Employee Status Type Description]='Active',1,if(Sale_Hier_Dim_RR48[Employee Status Type Description]='Terminated',2,3))","columnType":"Calculated"},{"name":"Job Type Code","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Status sum","expression":"sum(Sale_Hier_Dim_RR48[Status])","isHidden":false}],"source":[{"expression":"let    Source = Table.NestedJoin(Sale_Hier_Dim, {'Year-TSID'}, RR_In_and_Out, {'Year-TSID'}, 'RR_In_and_Out', JoinKind.Inner),    #'Expanded RR_In_and_Out' = Table.ExpandTableColumn(Source, 'RR_In_and_Out', {'EMPL_NM', 'MGT_RLTN_BEG_DATE', 'Within 17 weeks'}, {'RR_In_and_Out.EMPL_NM', 'RR_In_and_Out.MGT_RLTN_BEG_DATE', 'RR_In_and_Out.Within 17 weeks'})in    #'Expanded RR_In_and_Out'"}]},{"name":"RR_In_and_Out_PY","isHidden":false,"storageMode":"Import","columns":[{"name":"Division_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Division_Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"RFO_Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP_ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Zone_ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Zone_Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMPL_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Zone_Leader_Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TITLE_CODE_2","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"JOB_TITLE_NM_2","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MGT_RLTN_BEG_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"MGT_RLTN_END_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Days_in_RR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"CNTRCT_HIRE_STATUS","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Recode_CNTRCT_HIRE_STATUS","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CNTRCT_TERMIN_STS","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Term_ASD_Tenure","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Term_ASD_w_BI_Tenure","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Term_Transfer_Status","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ADJ_SVC_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"EMPL_SEX_CODE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMPL_BIRTH_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Contract_Hire_Age","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Contract_Hire_Age_Group","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S6_LIC_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S7_LIC_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S63_LIC_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S65_LIC_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S66_LIC_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"INVS_ADVR_REPR_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"S7_65_66","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PREV_TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PREV_JOB","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"PREV_END_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"DIFFERENCE","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"FUTURE_TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FUTURE_JOB","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"FUTURE_BEG_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"FUTURE_DIFFERENCE","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Within 17 weeks - PY","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Allego_perTSid_R3.trained_sts","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Year","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOIN VALUE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG_MVP_Mkt","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Year IN","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Year OUT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Hire Sts","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Term Sts","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared////Public//DI and BI//Capacity Dashboard//Capacity Dashboard-RR_In_and_Out.xlsx'), null, true),    #'RR_In_and_Out-Raw Data_Sheet' = Source{[Item='RR_In_and_Out-Raw Data',Kind='Sheet']}[Data],    #'Promoted Headers2' = Table.PromoteHeaders(#'RR_In_and_Out-Raw Data_Sheet', [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers2',{{'Division_ID', type text}, {'Division_Description', type text}, {'RFO_ID', Int64.Type}, {'RFO_Description', type text}, {'MVP_ID', Int64.Type}, {'Zone_ID', Int64.Type}, {'Zone_Description', type text}, {'TSID', type text}, {'EMPL_NM', type text}, {'Zone_Leader_Name', type text}, {'JOB_TITLE_CODE_2', Int64.Type}, {'JOB_TITLE_NM_2', type text}, {'MGT_RLTN_BEG_DATE', type date}, {'MGT_RLTN_END_DATE', type date}, {'Days_in_RR', Int64.Type}, {'CNTRCT_HIRE_STATUS', Int64.Type}, {'Recode_CNTRCT_HIRE_STATUS', type text}, {'CNTRCT_TERMIN_STS', Int64.Type}, {'Term_ASD_Tenure', type number}, {'Term_ASD_w_BI_Tenure', type number}, {'Term_Transfer_Status', type text}, {'ADJ_SVC_DT', type date}, {'EMPL_SEX_CODE', type text}, {'EMPL_BIRTH_DATE', type date}, {'Contract_Hire_Age', type number}, {'Contract_Hire_Age_Group', type text}, {'S6_LIC_STS_CDE', type text}, {'S7_LIC_STS_CDE', type text}, {'S63_LIC_STS_CDE', type text}, {'S65_LIC_STS_CDE', type text}, {'S66_LIC_STS_CDE', type text}, {'INVS_ADVR_REPR_IND', type text}, {'S7_65_66', type text}, {'PREV_TSID', type text}, {'PREV_JOB', Int64.Type}, {'PREV_END_DATE', type date}, {'DIFFERENCE', Int64.Type}, {'FUTURE_TSID', type text}, {'FUTURE_JOB', Int64.Type}, {'FUTURE_BEG_DATE', type date}, {'FUTURE_DIFFERENCE', Int64.Type}}),    Custom1 = #'Changed Type',    #'Filtered Rows1' = Table.SelectRows(Custom1, each [MGT_RLTN_BEG_DATE] \u003c\u003e null and [MGT_RLTN_BEG_DATE] \u003c\u003e ''),    #'Added Custom' = Table.AddColumn(#'Filtered Rows1', 'Within 17 weeks - PY', each if List.AllTrue({if Date.IsInPreviousNDays([MGT_RLTN_BEG_DATE],366) then false else true,Date.IsInPreviousNDays([MGT_RLTN_BEG_DATE],485)}) then 'Y' else 'N'),    #'Filtered Rows' = Table.SelectRows(#'Added Custom', each [#'Within 17 weeks - PY'] = 'Y'),    #'Added Custom1' = Table.AddColumn(#'Filtered Rows', 'Allego_perTSid_R3.trained_sts', each null),    #'Added Custom2' = Table.AddColumn(#'Added Custom1', 'Year', each 'PY'),    #'Filtered Rows2' = Table.SelectRows(#'Added Custom2', each (([TSID] \u003c\u003e 'TS78529') and ([TSID] \u003c\u003e 'TS80782' or [MGT_RLTN_BEG_DATE]\u003c#date(2022, 8, 4)) and ([TSID] \u003c\u003e 'TS75540' or [MGT_RLTN_BEG_DATE]\u003c#date(2022, 11, 3)) and ([TSID] \u003c\u003e 'TS82801' or [MGT_RLTN_BEG_DATE]\u003c#date(2022, 11, 3))))in    #'Filtered Rows2'"}]},{"name":"RFO_PENDING_DETAIL","isHidden":false,"storageMode":"Import","columns":[{"name":"RFOCode","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFOName","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Zone","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Zone_Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_ZONE_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_SUB_DEPT_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_UNIT_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP_NAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CORPORATEEMPLOYEEID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"AgentFullName","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"PRODUCT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LOB","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CIFOwnerFullName","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MBR_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"BenefitContractNumber","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ESTIMATEDSALESCREDITAMT","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Benefit_Amount","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Days_Pending","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"TRANSRECEIVEDT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TransDesc","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CTRC_PND_CATG_EXCD","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Count","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[{"name":"New Pending Applications","expression":"var pendcount = DISTINCTCOUNT(\u0027RFO_PENDING_DETAIL\u0027[BenefitContractNumber])Returnif(isblank(pendcount),0,pendcount) ","isHidden":false}],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////pnfiles002b//fp_cifs_7834_sas$//MarketAnalysis//FieldReporting//SMIS//RFO_PENDING_DETAIL.csv'),[Delimiter=',', Columns=22, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Use First Row as Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Change Type' = Table.TransformColumnTypes(#'Use First Row as Headers',{{'RFOCode', type text}, {'RFOName', type text}, {'Zone', Int64.Type}, {'Zone_Name', type text}, {'ORZN_ZONE_CDE', type text}, {'ORZN_SUB_DEPT_CDE', type text}, {'ORZN_UNIT_DSCR', type text}, {'MVP_NAME', type text}, {'CorporateEmployeeID', type text}, {'AgentFullName', type text}, {'Product', type text}, {'LOB', type text}, {'CIFOwnerFullName', type text}, {'MBR_TYP_CDE', type text}, {'BenefitContractNumber', type text}, {'EstimatedSalesCreditAmt', type number}, {'Benefit_Amount', Int64.Type}, {'Days_Pending', Int64.Type}, {'TransReceiveDt', type date}, {'TransDesc', type text}, {'CTRC_PND_CATG_EXCD', type text}, {'Count', Int64.Type}}),    #'Renamed Columns' = Table.RenameColumns(#'Change Type',{{'CorporateEmployeeID', 'CORPORATEEMPLOYEEID'}, {'TransReceiveDt', 'TRANSRECEIVEDT'}, {'EstimatedSalesCreditAmt', 'ESTIMATEDSALESCREDITAMT'}, {'Product', 'PRODUCT'}})in    #'Renamed Columns'"}]},{"name":"RECD_PEND_COMPL","isHidden":false,"storageMode":"Import","columns":[{"name":"Week_Ending","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Week_Nbr","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"ContractNumber","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"BenefitContractNumber","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FileCode","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TransCode","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"TransDesc","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TransReceiveDt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TransCreateDt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TransCloseDt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TransSeqNumber","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ProdType","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LOBCode","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LOBSubType","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SMISLOBCode","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SMISPlanCode","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"EstimatedSalesCreditAmt","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"ActualSalesCreditAmt","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CAPTransmissionNumber","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"CorporateEmployeeID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFOCode","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFOName","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"AgentCode","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"SMISTRANSKEY","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Received","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Pending","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Retired","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Declined","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Issued","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Cancelled","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"STATUS","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"YR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"RR_In_and_Out.MGT_RLTN_BEG_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"After RR Begin Flag","dataType":"String","isHidden":false,"expression":"if(\u0027RECD_PEND_COMPL\u0027[TransReceiveDt]\u003e=\u0027RECD_PEND_COMPL\u0027[RR_In_and_Out.MGT_RLTN_BEG_DATE],1,0)","columnType":"Calculated"},{"name":"ContractFaceAmount","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Written Applications","expression":"var appcount = CALCULATE(DISTINCTCOUNT(\u0027RECD_PEND_COMPL\u0027[ContractNumber]),\u0027RECD_PEND_COMPL\u0027[Received]=1,\u0027RECD_PEND_COMPL\u0027[After RR Begin Flag]=1)Returnif(isblank(appcount),0,appcount) ","isHidden":false}],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////pnfiles002b//fp_cifs_7834_sas$//MarketAnalysis//FieldReporting//SMIS//RECD_PEND_COMPL.csv'),[Delimiter=',', Columns=34, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Week_Ending', type date}, {'Week_Nbr', Int64.Type}, {'ContractNumber', type text}, {'BenefitContractNumber', type text}, {'FileCode', type text}, {'TransCode', Int64.Type}, {'TransDesc', type text}, {'TransReceiveDt', type date}, {'TransCreateDt', type date}, {'TransCloseDt', type date}, {'TransSeqNumber', Int64.Type}, {'Product', type text}, {'ProdType', type text}, {'LOBCode', type text}, {'LOBSubType', type text}, {'SMISLOBCode', type text}, {'SMISPlanCode', Int64.Type}, {'EstimatedSalesCreditAmt', type number}, {'ActualSalesCreditAmt', type number}, {'CAPTransmissionNumber', Int64.Type}, {'CorporateEmployeeID', type text}, {'RFOCode', type text}, {'RFOName', type text}, {'AgentCode', Int64.Type}, {'SMISTRANSKEY', type text}, {'Received', Int64.Type}, {'Pending', Int64.Type}, {'Retired', Int64.Type}, {'Declined', Int64.Type}, {'Issued', Int64.Type}, {'Cancelled', Int64.Type}, {'STATUS', type text}, {'YR', Int64.Type}}),    #'Merged Queries' = Table.NestedJoin(#'Changed Type', {'CorporateEmployeeID'}, RR_In_and_Out, {'TSID'}, 'RR_In_and_Out', JoinKind.LeftOuter),    #'Expanded RR_In_and_Out' = Table.ExpandTableColumn(#'Merged Queries', 'RR_In_and_Out', {'MGT_RLTN_BEG_DATE'}, {'RR_In_and_Out.MGT_RLTN_BEG_DATE'}),    #'Filtered Rows' = Table.SelectRows(#'Expanded RR_In_and_Out', each [RR_In_and_Out.MGT_RLTN_BEG_DATE] \u003e #date(1900, 1, 1))in    #'Filtered Rows'"}]},{"name":"Market Leader Info","isHidden":false,"storageMode":"Import","columns":[{"name":"MARKET_LEADER_NAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RFO_ZONE_NM","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = DB2.Database('podwh021:50000', 'podwh021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT DISTINCT#(lf)t1.ORZN_DEPT_CDE as RFO_CDE,#(lf)t1.ORZN_ZONE_CDE as RFO_ZONE_NM,#(lf)(SUBSTRING(t1.ORZN_ZONE_CDE,6,5)) AS Market_ID,#(lf)t3.ORZN_DEPT_DSCR,#(lf)trim(t3.EMP_ID) AS EMP_ID,#(lf)t3.EMP_STS_TYP_CDE,#(lf)t3.trmn_dt,#(lf)t3.JOB_TYP_CDE,#(lf)t3.JOB_TYP_DSCR,#(lf)t3.EMP_NM,#(lf)case when t3.emp_nm is null then \u0027Vacant\u0027 Else t3.emp_nm end as market_leaderS,#(lf)CONCAT(t1.ORZN_ZONE_CDE,CONCAT(\u0027-\u0027,case when t3.emp_nm is null then \u0027Vacant\u0027 Else t3.emp_nm end)) as market_leader_name#(lf)FROM SEMANTIC.SALES_HIERARCHY_DIMENSION t1#(lf)left join#(lf)(#(lf)SELECT DISTINCT#(lf)T1.SALE_HIER_ID,#(lf)t1.orzn_zone_cde,#(lf)t1.orzn_dept_dscr,#(lf)t2.orzn_dept_cde,#(lf)t2.EMP_ID,#(lf)t2.EMP_STS_TYP_CDE,#(lf)t2.trmn_dt,#(lf)t2.JOB_TYP_CDE,#(lf)t2.JOB_TYP_DSCR,#(lf)t2.EMP_NM#(lf)FROM#(lf)SEMANTIC.SALES_HIERARCHY_DIMENSION t1#(lf)left JOIN HUMAN_RESOURCES.CNF_EMP_DIM_DTL_CURR_CFDL t2 ON T1.SALE_HIER_ID = T2.emp_id#(lf)where t1.CURR_ROW_IND = \u0027Y\u0027#(lf)and t2.emp_sts_typ_cde in (\u0027A\u0027)#(lf)and t1.EFF_END_TMSP is null#(lf)AND T2.CURR_ROW_IND = \u0027Y\u0027#(lf)and t1.EFF_END_TMSP is null#(lf)and t2.JOB_TYP_CDE IN (\u0027001002\u0027, \u0027001003\u0027, \u0027001007\u0027)#(lf))#(lf)t3#(lf)on t1.orzn_zone_cde = t3.orzn_zone_cde#(lf)where t1.CURR_ROW_IND = \u0027Y\u0027#(lf)and t1.eff_end_tmsp is null#(lf)--and t1.rfo_zone_sts_cde in (\u0027A\u0027)#(lf)and substring(t1.orzn_zone_cde,6,2) \u003c\u003e \u002700\u0027#(lf)and t1.orzn_dept_cde \u003c\u003e \u0027UKWN\u0027#(lf)order BY t1.ORZN_ZONE_CDE']),    #'Merged Queries' = Table.NestedJoin(Source, {'EMP_ID'}, #'Leader Exceptions', {'TSID'}, 'Leader Exceptions', JoinKind.LeftOuter),    #'Expanded Leader Exceptions' = Table.ExpandTableColumn(#'Merged Queries', 'Leader Exceptions', {'TSID'}, {'Leader Exceptions.TSID'}),    #'Added Custom' = Table.AddColumn(#'Expanded Leader Exceptions', 'Group Column', each 'Text'),    #'Removed Columns' = Table.RemoveColumns(#'Added Custom',{'RFO_CDE', 'MARKET_ID', 'ORZN_DEPT_DSCR', 'EMP_ID', 'EMP_STS_TYP_CDE', 'TRMN_DT', 'JOB_TYP_CDE', 'JOB_TYP_DSCR', 'EMP_NM', 'MARKET_LEADERS'}),    #'Renamed Columns' = Table.RenameColumns(#'Removed Columns',{{'Leader Exceptions.TSID', 'LeaderExceptions.TSID'}, {'Group Column', 'GroupColumn'}}),    #'Make Tables' = Table.Group(#'Renamed Columns', {'GroupColumn'}, {{'Tables', each _, type table [RFO_ZONE_NM=nullable text, MARKET_LEADER_NAME=nullable text, LeaderExceptions.TSID=nullable text]}}),    #'Make Tables w Prev and Next Mkt' = Table.AddColumn(#'Make Tables', 'New Tables', each letPrevMktList = {'0'} \u0026 List.RemoveLastN(#'Expanded Leader Exceptions'[RFO_ZONE_NM],1),NextMktList = List.RemoveFirstN(#'Expanded Leader Exceptions'[RFO_ZONE_NM],1) \u0026 {'0'},TableList = Table.ToColumns([Tables]),Headers = Table.ColumnNames([Tables]) \u0026 {'Prev Mkt'} \u0026 {'Next Mkt'},Concat = TableList \u0026 {PrevMktList} \u0026 {NextMktList}inTable.FromColumns(Concat, Headers)),    #'Expanded New Tables' = Table.ExpandTableColumn(#'Make Tables w Prev and Next Mkt', 'New Tables', {'RFO_ZONE_NM', 'MARKET_LEADER_NAME', 'LeaderExceptions.TSID', 'GroupColumn', 'Prev Mkt', 'Next Mkt'}, {'New Tables.RFO_ZONE_NM', 'New Tables.MARKET_LEADER_NAME', 'New Tables.LeaderExceptions.TSID', 'New Tables.GroupColumn', 'New Tables.Prev Mkt', 'New Tables.Next Mkt'}),    #'Removed Columns1' = Table.RemoveColumns(#'Expanded New Tables',{'GroupColumn', 'Tables'}),    #'Added RemoveIndicator' = Table.AddColumn(#'Removed Columns1', 'RemoveIndicator', each if [New Tables.LeaderExceptions.TSID] \u003c\u003e null then (if ([New Tables.RFO_ZONE_NM]=[New Tables.Prev Mkt] or [New Tables.RFO_ZONE_NM]=[New Tables.Next Mkt]) then 'Yes' else 'No') else 'No'),    #'Filtered on RemoveIndicator' = Table.SelectRows(#'Added RemoveIndicator', each ([RemoveIndicator] = 'No')),    #'Removed Other Columns' = Table.SelectColumns(#'Filtered on RemoveIndicator',{'New Tables.MARKET_LEADER_NAME', 'New Tables.RFO_ZONE_NM'}),    #'Renamed Columns1' = Table.RenameColumns(#'Removed Other Columns',{{'New Tables.MARKET_LEADER_NAME', 'MARKET_LEADER_NAME'}, {'New Tables.RFO_ZONE_NM', 'RFO_ZONE_NM'}})in    #'Renamed Columns1'"}]},{"name":"GridRevenue - Snowflake","isHidden":false,"storageMode":"Import","columns":[{"name":"Calendar Day Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Report Year Text","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Year Number","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Employee Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Rollup Agent Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Compensation Employee Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Compensation Reporting Roll Up Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"New Sales Credit Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Gross Dealer Concessions Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Grid Credit Amount","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'select b.''Calendar Day Date'',#(lf)       b.''Distribution Performance Report Year Text'',#(lf)       b.''Distribution Performance Reporting Year Number'',#(lf)       a.''Employee Identifier'',#(lf)       a.''Rollup Agent Identifier'',#(lf)       a.''Employee Identifier'' as ''Compensation Employee Identifier'',#(lf)       a.''Compensation Reporting Roll Up Name'',#(lf)       sum(a.''New Sales Credit Amount'') as ''New Sales Credit Amount'',#(lf)       sum(a.''Gross Dealer Concessions Amount'') as ''Gross Dealer Concessions Amount'',#(lf)       sum(a.''Grid Credit Amount'') as ''Grid Credit Amount''#(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Compensation and Sales Metrics Fact'' as a left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Distribution Performance Dates Dimension'' as b#(lf)    on a.''Distribution Performance Dates Surrogate Key''=b.''Date Surrogate Key''  left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Conformed Contract Dimension Detail'' as c#(lf)    on (a.''Contract Surrogate Key''=c.''Contract Surrogate Key''),#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' as aa      #(lf)    #(lf)  #(lf) where a.''Employee Identifier''= aa.''Employee Identifier'' #(lf)   and b.''Distribution Performance Reporting Year Number'' in (\u00272022\u0027,\u00272023\u0027,\u00272024\u0027)  #(lf)   and ((a.''New Sales Credit Amount'' \u003c 0.00 or a.''New Sales Credit Amount'' \u003e 0.00) or#(lf)        (a.''Gross Dealer Concessions Amount'' \u003c 0.00 or a.''Gross Dealer Concessions Amount'' \u003e 0.00) or#(lf)        (a.''Grid Credit Amount'' is not NULL))#(lf)   and substring(a.''Employee Identifier'',1,2) = \u0027TS\u0027#(lf)   and c.''Current Row Indicator'' =\u0027Y\u0027#(lf)   and aa.''Current Row Indicator'' = \u0027Y\u0027#(lf)#(lf)and (  aa.''Organization Department Code'' \u003c\u003e \u00270383\u0027   #(lf)      or (a.''Reporting Roll Up Event Code'' \u003c\u003e\u0027REN\u0027#(lf)     and  (a.''Reporting Roll Up Event Code'' \u003c\u003e \u0027AB\u0027 or  ''Compensation Level 2 Product Character Code'' not in (\u0027RISK\u0027, \u0027ANN\u0027))#(lf)     and  a.''Financial Professional Revenue Hierarchy Level 2 Code'' \u003c\u003e (\u0027AB_MF_12B1\u0027)))#(lf)#(lf)    #(lf) group by b.''Calendar Day Date'', #(lf)          b.''Distribution Performance Report Year Text'', #(lf)          b.''Distribution Performance Reporting Year Number'',#(lf)          a.''Employee Identifier'', #(lf)          a.''Rollup Agent Identifier'',#(lf)          a.''Compensation Reporting Roll Up Name''', null, [EnableFolding=true])in    Source"}]},{"name":"GridRevenue - Snowflake_RR48","isHidden":false,"storageMode":"Import","columns":[{"name":"Calendar Day Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Report Year Text","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Distribution Performance Reporting Year Number","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Employee Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Rollup Agent Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Compensation Employee Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Compensation Reporting Roll Up Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"New Sales Credit Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Gross Dealer Concessions Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Grid Credit Amount","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"RR_In_and_Out.MGT_RLTN_BEG_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"After RR Start Flag","dataType":"String","isHidden":false,"expression":"if(\u0027GridRevenue - Snowflake_RR48\u0027[Calendar Day Date]\u003e=\u0027GridRevenue - Snowflake_RR48\u0027[RR_In_and_Out.MGT_RLTN_BEG_DATE],1,0)","columnType":"Calculated"}],"measures":[{"name":"New Grid Revenue Total","expression":"var GRamt = CALCULATE(sum(\u0027GridRevenue - Snowflake_RR48\u0027[Grid Credit Amount]),\u0027GridRevenue - Snowflake_RR48\u0027[After RR Start Flag]=1)Returnif(isblank(GRamt),0,GRamt)","isHidden":false},{"name":"New Grid Revenue Total-PY","expression":"var GRamt = CALCULATE(sum(\u0027GridRevenue - Snowflake_RR48\u0027[Grid Credit Amount]),\u0027GridRevenue - Snowflake_RR48\u0027[After RR Start Flag]=1,\u0027GridRevenue - Snowflake_RR48\u0027[Calendar Day Date]\u003c(NOW()-365))Returnif(isblank(GRamt),0,GRamt) ","isHidden":false}],"source":[{"expression":"let    Source = Table.NestedJoin(#'GridRevenue - Snowflake', {'Employee Identifier'}, RR_In_and_Out, {'TSID'}, 'RR_In_and_Out', JoinKind.Inner),    #'Expanded RR_In_and_Out' = Table.ExpandTableColumn(Source, 'RR_In_and_Out', {'MGT_RLTN_BEG_DATE'}, {'RR_In_and_Out.MGT_RLTN_BEG_DATE'})in    #'Expanded RR_In_and_Out'"}]},{"name":"CLIENT_HHLD","isHidden":false,"storageMode":"Import","columns":[{"name":"CUST_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CUST_ID_NBR","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"HOH_NAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CLIENT_NAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CUST_LGAL_FMT_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CUST_LGAL_FRST_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CUST_LGAL_LST_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CUST_GRLN_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CUST_GRP_ID_NBR","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"STP_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FUTUREVALUE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MBRTYPE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CUST_AGE_GRP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CLNT_AGE_TYP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CLIENT_SERVICE_MODEL","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_ORZN_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Year-TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MGP_CLIENTS.asOfDt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"MGP_CLIENTS.TSid_MGP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MGP_CLIENTS.Goals Documented","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MGP_CLIENTS.Goals Documented Total","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"MGP_CLIENTS.Goal Indicator","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Households with Goals - CIF","expression":"var _total=    CALCULATE    (SUMX(DISTINCT(\u0027CLIENT_HHLD\u0027[CUST_GRP_ID_NBR]), 1),    \u0027CLIENT_HHLD\u0027[MGP_CLIENTS.Goal Indicator] = 'Y')ReturnIF(ISBLANK(_total),0,_total)","isHidden":false}],"source":[{"expression":"let    Source = DB2.Database('PODWH021:50000', 'PODWH021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT A.CUST_SK,#(lf)       A.CUST_ID_NBR,#(lf)       case when xx.HOH_NAMExx \u003c\u003e \u0027\u0027 then xx.HOH_NAMExx#(lf)#(tab)#(tab)     else A.CUST_LGAL_LST_NM||\u0027, \u0027||A.CUST_LGAL_FRST_NM#(lf)#(tab)     end as HOH_NAME,#(lf)#(tab)     A.CUST_LGAL_LST_NM||\u0027, \u0027||A.CUST_LGAL_FRST_NM as Client_Name,#(lf)#(tab)     A.CUST_LGAL_FMT_NM,#(lf)       A.CUST_LGAL_FRST_NM,#(lf)       A.CUST_LGAL_LST_NM,#(lf)       A.CUST_GRLN_TYP_CDE,#(lf)       A.CUST_GRP_ID_NBR,#(lf)       B.STP_STS_CDE,#(lf)       case when B.fut_vlu_indx_cde = \u0027GOLD\u0027 then \u0027Gold\u0027#(lf)            when B.fut_vlu_indx_cde = \u0027SILVR\u0027 then \u0027Silver\u0027#(lf)            when B.fut_vlu_indx_cde = \u0027BRNZE\u0027 then \u0027Bronze\u0027#(lf)            when B.fut_vlu_indx_cde in (\u0027NA\u0027,\u0027UNK\u0027,\u0027 \u0027 ) then \u0027Unknown\u0027#(lf)       end as FutureValue,#(lf)       case when A.mbr_typ_cde = \u0027BEN\u0027 then \u0027Benefit\u0027#(lf)            when A.mbr_typ_cde = \u0027ASSOC\u0027 then \u0027Associate\u0027#(lf)            when A.mbr_typ_cde = \u0027JUV\u0027 then \u0027Juvenile\u0027#(lf)            when A.mbr_typ_cde = \u0027NON\u0027 and A.clas_ctrc_rltn_cde \u003c\u003e \u0027NA\u0027 then \u0027Non-Member\u0027#(lf)            when A.mbr_typ_cde = \u0027NON\u0027 and A.clas_ctrc_rltn_cde = \u0027NA\u0027 then \u0027Prospect\u0027#(lf)       end as MBRTYPE,#(lf)       case when A.cust_age \u003c 0 then \u0027UKWN\u0027#(lf)#(tab)          when A.cust_age \u003c 18 then \u0027\u003c18\u0027#(lf)#(tab)          when A.cust_age \u003c 25 then \u002718-24\u0027#(lf)#(tab)          when A.cust_age \u003c 35 then \u002725-34\u0027#(lf)#(tab)          when A.cust_age \u003c 45 then \u002735-44\u0027#(lf)#(tab)          when A.cust_age \u003c 55 then \u002745-54\u0027#(lf)#(tab)          when A.cust_age \u003c 65 then \u002755-64\u0027#(lf)#(tab)          when A.cust_age \u003c 75 then \u002765-74\u0027#(lf)#(tab)          when A.cust_age \u003c 85 then \u002775-84\u0027#(lf)#(tab)          when A.cust_age \u003e= 85 then \u002785+\u0027#(lf)#(tab)       else \u0027 \u0027 #(lf)       end as cust_age_grp,#(lf)       case when A.cust_age \u003c 18 then \u0027\u003c18\u0027#(lf)            when A.cust_age \u003e= 18 then \u002718+\u0027#(lf)#(tab)       else \u0027 \u0027#(lf)       end as clnt_age_typ,#(lf)       case when B.fut_vlu_indx_cde = \u0027GOLD\u0027 and B.STP_STS_CDE = \u0027YES\u0027 then \u0027A\u0027#(lf)#(tab)          when B.fut_vlu_indx_cde = \u0027SILVR\u0027 and B.STP_STS_CDE = \u0027YES\u0027 then \u0027B\u0027#(lf)#(tab)#(tab)#(tab)      when B.fut_vlu_indx_cde = \u0027GOLD\u0027 and B.STP_STS_CDE \u003c\u003e \u0027YES\u0027 then \u0027B\u0027#(lf)#(tab)#(tab)#(tab)      when B.fut_vlu_indx_cde = \u0027BRNZE\u0027 and B.STP_STS_CDE = \u0027YES\u0027 then \u0027C\u0027#(lf)#(tab)#(tab)#(tab)      when B.fut_vlu_indx_cde = \u0027SILVR\u0027 and B.STP_STS_CDE \u003c\u003e \u0027YES\u0027 then \u0027C\u0027#(lf)#(tab)#(tab)#(tab)      when B.fut_vlu_indx_cde = \u0027BRNZE\u0027 and B.STP_STS_CDE \u003c\u003e \u0027YES\u0027 then \u0027D\u0027#(lf)         else \u0027 \u0027 #(lf)#(tab)     end as Client_Service_Model,#(lf)       C.EMP_ORZN_ID#(lf)  FROM MEMBER.ITGR_IDVL_ALL_CURR_CFDL A left join#(lf)       MEMBER.CNF_CUST_RESID_MAIL_GRP_DIM_CFDL B#(lf)    ON A.CUST_GRP_SK=B.CUST_GRP_SK inner join #(lf)       CLNT_ASMT_DM.CUST_REPR_ASGN_CURR_CFDL C#(lf)      /* CLNT_ASMT_DM.CUST_SREP_RLTN_CURR_CFDL C */#(lf)      /* CLNT_ASMT_DM.CUST_REPR_COMP_RLTN_CURR_CFDL C */#(lf)    ON A.CUST_SK = C.ACRT_CUST_SK AND#(lf)       A.MBR_TYP_CDE IN (\u0027BEN\u0027,\u0027NON\u0027,\u0027ASSOC\u0027,\u0027JUV\u0027) AND#(lf)       C.EMP_ORZN_ID LIKE \u0027TS%\u0027 left join#(lf)#(tab)    (select x.CUST_GRP_ID_NBR,#(lf)              x.CUST_LGAL_LST_NM||\u0027, \u0027||x.CUST_LGAL_FRST_NM as HOH_NAMExx#(lf)#(tab)      from MEMBER.ITGR_IDVL_ALL_CURR_CFDL x#(lf)#(tab)#(tab)    where x.CUST_GRLN_TYP_CDE in (\u0027PRIM\u0027,\u0027PRIMD\u0027)) as xx#(lf)   on A.CUST_GRP_ID_NBR=xx.cust_grp_id_nbr #(lf)#(lf) where (a.mbr_typ_cde in (\u0027BEN\u0027,\u0027ASSOC\u0027,\u0027JUV\u0027) or#(lf)        a.mbr_typ_cde = \u0027NON\u0027 and a.clas_ctrc_rltn_cde \u003c\u003e \u0027NA\u0027) ']),    #'Replaced Value' = Table.ReplaceValue(Source,'','Unknown',Replacer.ReplaceValue,{'FUTUREVALUE'}),    #'Replaced Value1' = Table.ReplaceValue(#'Replaced Value',null,'Unknown',Replacer.ReplaceValue,{'FUTUREVALUE'}),    #'Appended Query' = Table.Combine({#'Replaced Value1', CLIENT_HHLD_NON_MGP}),    #'Removed Duplicates' = Table.Distinct(#'Appended Query', {'CUST_ID_NBR'}),    #'Replaced Value2' = Table.ReplaceValue(#'Removed Duplicates','Juvenile','Youth',Replacer.ReplaceText,{'MBRTYPE'}),    #'Added Custom' = Table.AddColumn(#'Replaced Value2', 'Year-TSID', each 'CY'\u0026[EMP_ORZN_ID]),    #'Merged Queries' = Table.NestedJoin(#'Added Custom', {'CUST_ID_NBR'}, MGP_CLIENTS, {'cust_id_nbr'}, 'MGP_CLIENTS', JoinKind.LeftOuter),    #'Expanded MGP_CLIENTS' = Table.ExpandTableColumn(#'Merged Queries', 'MGP_CLIENTS', {'asOfDt', 'TSid_MGP', 'Goals Documented', 'Goals Documented Total', 'Goal Indicator'}, {'MGP_CLIENTS.asOfDt', 'MGP_CLIENTS.TSid_MGP', 'MGP_CLIENTS.Goals Documented', 'MGP_CLIENTS.Goals Documented Total', 'MGP_CLIENTS.Goal Indicator'}),    #'Replaced Value3' = Table.ReplaceValue(#'Expanded MGP_CLIENTS',null,'Unknown',Replacer.ReplaceValue,{'MGP_CLIENTS.TSid_MGP'}),    #'Replaced Value4' = Table.ReplaceValue(#'Replaced Value3',null,0,Replacer.ReplaceValue,{'MGP_CLIENTS.Goals Documented'}),    #'Replaced Value5' = Table.ReplaceValue(#'Replaced Value4',null,0,Replacer.ReplaceValue,{'MGP_CLIENTS.Goals Documented Total'}),    #'Replaced Value6' = Table.ReplaceValue(#'Replaced Value5',null,'N',Replacer.ReplaceValue,{'MGP_CLIENTS.Goal Indicator'})in    #'Replaced Value6'"}]},{"name":"CLIENT_HHLD_NON_MGP","isHidden":false,"storageMode":"Import","columns":[{"name":"CUST_SK","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"CUST_ID_NBR","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"HOH_NAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CLIENT_NAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CUST_LGAL_FMT_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CUST_LGAL_FRST_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CUST_LGAL_LST_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CUST_GRLN_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CUST_GRP_ID_NBR","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"STP_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FUTUREVALUE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MBRTYPE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CUST_AGE_GRP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CLNT_AGE_TYP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CLIENT_SERVICE_MODEL","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_ORZN_ID","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = DB2.Database('PODWH021:50000', 'PODWH021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT A.CUST_SK,#(lf)       A.CUST_ID_NBR,#(lf)       case when xx.HOH_NAMExx \u003c\u003e \u0027\u0027 then xx.HOH_NAMExx#(lf)#(tab)#(tab)     else A.CUST_LGAL_LST_NM||\u0027, \u0027||A.CUST_LGAL_FRST_NM#(lf)#(tab)     end as HOH_NAME,#(lf)#(tab)     A.CUST_LGAL_LST_NM||\u0027, \u0027||A.CUST_LGAL_FRST_NM as Client_Name,#(lf)#(tab)     A.CUST_LGAL_FMT_NM,#(lf)       A.CUST_LGAL_FRST_NM,#(lf)       A.CUST_LGAL_LST_NM,#(lf)       A.CUST_GRLN_TYP_CDE,#(lf)       A.CUST_GRP_ID_NBR,#(lf)       B.STP_STS_CDE,#(lf)       case when B.fut_vlu_indx_cde = \u0027GOLD\u0027 then \u0027Gold\u0027#(lf)            when B.fut_vlu_indx_cde = \u0027SILVR\u0027 then \u0027Silver\u0027#(lf)            when B.fut_vlu_indx_cde = \u0027BRNZE\u0027 then \u0027Bronze\u0027#(lf)            when B.fut_vlu_indx_cde in (\u0027NA\u0027,\u0027UNK\u0027,\u0027 \u0027 ) then \u0027Unknown\u0027#(lf)       end as FutureValue,#(lf)       case when A.mbr_typ_cde = \u0027BEN\u0027 then \u0027Benefit\u0027#(lf)            when A.mbr_typ_cde = \u0027ASSOC\u0027 then \u0027Associate\u0027#(lf)            when A.mbr_typ_cde = \u0027JUV\u0027 then \u0027Juvenile\u0027#(lf)            when A.mbr_typ_cde = \u0027NON\u0027 and A.clas_ctrc_rltn_cde \u003c\u003e \u0027NA\u0027 then \u0027Non-Member\u0027#(lf)            when A.mbr_typ_cde = \u0027NON\u0027 and A.clas_ctrc_rltn_cde = \u0027NA\u0027 then \u0027Prospect\u0027#(lf)       end as MBRTYPE,#(lf)       case when A.cust_age \u003c 0 then \u0027UKWN\u0027#(lf)#(tab)          when A.cust_age \u003c 18 then \u0027\u003c18\u0027#(lf)#(tab)          when A.cust_age \u003c 25 then \u002718-24\u0027#(lf)#(tab)          when A.cust_age \u003c 35 then \u002725-34\u0027#(lf)#(tab)          when A.cust_age \u003c 45 then \u002735-44\u0027#(lf)#(tab)          when A.cust_age \u003c 55 then \u002745-54\u0027#(lf)#(tab)          when A.cust_age \u003c 65 then \u002755-64\u0027#(lf)#(tab)          when A.cust_age \u003c 75 then \u002765-74\u0027#(lf)#(tab)          when A.cust_age \u003c 85 then \u002775-84\u0027#(lf)#(tab)          when A.cust_age \u003e= 85 then \u002785+\u0027#(lf)#(tab)       else \u0027 \u0027 #(lf)       end as cust_age_grp,#(lf)       case when A.cust_age \u003c 18 then \u0027\u003c18\u0027#(lf)            when A.cust_age \u003e= 18 then \u002718+\u0027#(lf)#(tab)       else \u0027 \u0027#(lf)       end as clnt_age_typ,#(lf)       case when B.fut_vlu_indx_cde = \u0027GOLD\u0027 and B.STP_STS_CDE = \u0027YES\u0027 then \u0027A\u0027#(lf)#(tab)          when B.fut_vlu_indx_cde = \u0027SILVR\u0027 and B.STP_STS_CDE = \u0027YES\u0027 then \u0027B\u0027#(lf)#(tab)#(tab)#(tab)      when B.fut_vlu_indx_cde = \u0027GOLD\u0027 and B.STP_STS_CDE \u003c\u003e \u0027YES\u0027 then \u0027B\u0027#(lf)#(tab)#(tab)#(tab)      when B.fut_vlu_indx_cde = \u0027BRNZE\u0027 and B.STP_STS_CDE = \u0027YES\u0027 then \u0027C\u0027#(lf)#(tab)#(tab)#(tab)      when B.fut_vlu_indx_cde = \u0027SILVR\u0027 and B.STP_STS_CDE \u003c\u003e \u0027YES\u0027 then \u0027C\u0027#(lf)#(tab)#(tab)#(tab)      when B.fut_vlu_indx_cde = \u0027BRNZE\u0027 and B.STP_STS_CDE \u003c\u003e \u0027YES\u0027 then \u0027D\u0027#(lf)         else \u0027 \u0027 #(lf)#(tab)     end as Client_Service_Model,#(lf)       C.EMP_ORZN_ID#(lf)  FROM MEMBER.ITGR_IDVL_ALL_CURR_CFDL A left join#(lf)       MEMBER.CNF_CUST_RESID_MAIL_GRP_DIM_CFDL B#(lf)    ON A.CUST_GRP_SK=B.CUST_GRP_SK inner join #(lf)       CLNT_ASMT_DM.CUST_REPR_ASGN_CURR_CFDL C#(lf)     /*  CLNT_ASMT_DM.CUST_REPR_COMP_RLTN_CURR_CFDL C */#(lf)    ON A.CUST_SK = C.ACRT_CUST_SK AND#(lf)       A.MBR_TYP_CDE IN (\u0027NON\u0027) AND#(lf)       C.EMP_ORZN_ID LIKE \u0027TS%\u0027 left join#(lf)#(tab)    (select x.CUST_GRP_ID_NBR,#(lf)              x.CUST_LGAL_LST_NM||\u0027, \u0027||x.CUST_LGAL_FRST_NM as HOH_NAMExx#(lf)#(tab)      from MEMBER.ITGR_IDVL_ALL_CURR_CFDL x#(lf)#(tab)#(tab)    where x.CUST_GRLN_TYP_CDE in (\u0027PRIM\u0027,\u0027PRIMD\u0027)) as xx#(lf)   on A.CUST_GRP_ID_NBR=xx.cust_grp_id_nbr #(lf)#(lf) where a.mbr_typ_cde = \u0027NON\u0027#(lf)']),    #'Replaced Value' = Table.ReplaceValue(Source,'','Unknown',Replacer.ReplaceValue,{'FUTUREVALUE'}),    #'Replaced Value1' = Table.ReplaceValue(#'Replaced Value',null,'Unknown',Replacer.ReplaceValue,{'FUTUREVALUE'}),    #'Merged Queries' = Table.NestedJoin(#'Replaced Value1', {'CUST_ID_NBR'}, MGP_CLIENTS, {'cust_id_nbr'}, 'MGP_CLIENTS', JoinKind.Inner),    #'Removed Columns' = Table.RemoveColumns(#'Merged Queries',{'MGP_CLIENTS'}),    #'Removed Duplicates' = Table.Distinct(#'Removed Columns', {'CUST_ID_NBR'})in    #'Removed Duplicates'"}]},{"name":"MGP_CLIENTS","isHidden":false,"storageMode":"Import","columns":[{"name":"asOfDt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"MGP_hhld_id","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"cust_id_nbr","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"mgp_hhld_crdt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"mgp_hhld_updt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"max_rpt_crdt","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TSid_MGP","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ClientType","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"tot_goals","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Goals_str","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"tot_blocks_complete","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"cnt_goal_blks_cmplt","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"MGP_status_cde","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"goal_src","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Goals Documented","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Goals Documented Total","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Goal Indicator","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Csv.Document(File.Contents('////Vsshr//shared//Public//DI and BI//Field Reporting//MGP//MGP_CLIENTS.csv'),[Delimiter=',', Columns=14, Encoding=1252, QuoteStyle=QuoteStyle.None]),    #'Promoted Headers' = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'asOfDt', type date}, {'MGP_hhld_id', Int64.Type}, {'cust_id_nbr', Int64.Type}, {'mgp_hhld_crdt', type date}, {'mgp_hhld_updt', type date}, {'max_rpt_crdt', type date}, {'TSid_MGP', type text}, {'ClientType', Int64.Type}, {'tot_goals', Int64.Type}, {'Goals_str', type text}, {'tot_blocks_complete', Int64.Type}, {'cnt_goal_blks_cmplt', Int64.Type}, {'MGP_status_cde', type text}, {'goal_src', type text}}),    #'Replaced Value' = Table.ReplaceValue(#'Changed Type',null,0,Replacer.ReplaceValue,{'tot_blocks_complete'}),    #'Replaced Value1' = Table.ReplaceValue(#'Replaced Value',null,0,Replacer.ReplaceValue,{'cnt_goal_blks_cmplt'}),    #'Added Conditional Column' = Table.AddColumn(#'Replaced Value1', 'Goals Documented', each if [tot_goals] \u003e 0 then 1 else if [cnt_goal_blks_cmplt] \u003e 0 then 1 else 0),    #'Inserted Addition' = Table.AddColumn(#'Added Conditional Column', 'Addition', each [tot_goals] + [cnt_goal_blks_cmplt], type number),    #'Renamed Columns' = Table.RenameColumns(#'Inserted Addition',{{'Addition', 'Goals Documented Total'}}),    #'Added Conditional Column1' = Table.AddColumn(#'Renamed Columns', 'Goal Indicator', each if [Goals Documented Total] \u003e 0 then 'Y' else 'N')in    #'Added Conditional Column1'"}]},{"name":"Historical Data","isHidden":false,"storageMode":"Import","columns":[{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMPL_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Job Type Code","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Employee Status Type Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ORZN_SUB_DEPT_CDE1","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Data Type","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Key","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Value","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Iteration","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Custom Week - Ex","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RR_In_and_Out.TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RR_Now","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RR_In_and_Out.Sale_Hier_Dim.Employee Status Type Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RR_In_and_Out.Sale_Hier_Dim.Job Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Sale_Hier_Dim.ORZN_ZONE_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Sale_Hier_Dim.ORZN_SUB_DEPT_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Sale_Hier_Dim.Employee Status Type Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Sale_Hier_Dim.Job Type Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market Leader Info.MARKET_LEADER_NAME","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG","dataType":"String","isHidden":false,"expression":"left(\u0027Historical Data\u0027[ORZN_SUB_DEPT_CDE1],4)","columnType":"Calculated"},{"name":"Max Date","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Custom Week","dataType":"String","isHidden":false,"expression":"(\u0027Historical Data\u0027[Max Date]+7-\u0027Historical Data\u0027[Iteration])/7","columnType":"Calculated"},{"name":"DETAIL_KEY","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Detail","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"1WA - Advice","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Advice',\u0027Historical Data\u0027[Custom Week]=1,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"2WA - Advice","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Advice',\u0027Historical Data\u0027[Custom Week]=2,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"3WA - Advice","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Advice',\u0027Historical Data\u0027[Custom Week]=3,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"4WA - Advice","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Advice',\u0027Historical Data\u0027[Custom Week]=4,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"1WA - Appt","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Appt',\u0027Historical Data\u0027[Custom Week]=1,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"2WA - Appt","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Appt',\u0027Historical Data\u0027[Custom Week]=2,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"3WA - Appt","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Appt',\u0027Historical Data\u0027[Custom Week]=3,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"4WA - Appt","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Appt',\u0027Historical Data\u0027[Custom Week]=4,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"1WA - Grid Rev","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Grid Revenue',\u0027Historical Data\u0027[Custom Week]=1,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"2WA - Grid Rev","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Grid Revenue',\u0027Historical Data\u0027[Custom Week]=2,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM]))","isHidden":false},{"name":"3WA - Grid Rev","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Grid Revenue',\u0027Historical Data\u0027[Custom Week]=3,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"4WA - Grid Rev","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Grid Revenue',\u0027Historical Data\u0027[Custom Week]=4,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"1WA - NFC","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='NFC',\u0027Historical Data\u0027[Custom Week]=1,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"2WA - NFC","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='NFC',\u0027Historical Data\u0027[Custom Week]=2,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"3WA - NFC","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='NFC',\u0027Historical Data\u0027[Custom Week]=3,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"4WA - NFC","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='NFC',\u0027Historical Data\u0027[Custom Week]=4,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"1WA","expression":"SWITCH(TRUE(),[User Selection]='Appointments',FORMAT(\u0027Historical Data\u0027[1WA - Appt],'0'),[User Selection]='New Clients',FORMAT(\u0027Historical Data\u0027[1WA - NFC],'0'),[User Selection]='Grid Revenue',FORMAT(\u0027Historical Data\u0027[1WA - Grid Rev],'#,0'),[User Selection]='Advice',FORMAT(\u0027Historical Data\u0027[1WA - Advice],'0'),'Select a Metric')","isHidden":false},{"name":"2WA","expression":"SWITCH(TRUE(),[User Selection]='Appointments',FORMAT(\u0027Historical Data\u0027[2WA - Appt],'0'),[User Selection]='New Clients',FORMAT(\u0027Historical Data\u0027[2WA - NFC],'0'),[User Selection]='Grid Revenue',FORMAT(\u0027Historical Data\u0027[2WA - Grid Rev],'#,0'),[User Selection]='Advice',FORMAT(\u0027Historical Data\u0027[2WA - Advice],'0'),'Select a Metric')","isHidden":false},{"name":"3WA","expression":"SWITCH(TRUE(),[User Selection]='Appointments',FORMAT(\u0027Historical Data\u0027[3WA - Appt],'0'),[User Selection]='New Clients',FORMAT(\u0027Historical Data\u0027[3WA - NFC],'0'),[User Selection]='Grid Revenue',FORMAT(\u0027Historical Data\u0027[3WA - Grid Rev],'#,0'),[User Selection]='Advice',FORMAT(\u0027Historical Data\u0027[3WA - Advice],'0'),'Select a Metric')","isHidden":false},{"name":"4WA","expression":"SWITCH(TRUE(),[User Selection]='Appointments',FORMAT(\u0027Historical Data\u0027[4WA - Appt],'0'),[User Selection]='New Clients',FORMAT(\u0027Historical Data\u0027[4WA - NFC],'0'),[User Selection]='Grid Revenue',FORMAT(\u0027Historical Data\u0027[4WA - Grid Rev],'#,0'),[User Selection]='Advice',FORMAT(\u0027Historical Data\u0027[4WA - Advice],'0'),'Select a Metric')","isHidden":false},{"name":"Z1WA - Advice","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Advice',filter(ALLEXCEPT(\u0027Historical Data\u0027,\\t\u0027Historical Data\u0027[Data Type],\\t\u0027Historical Data\u0027[Custom Week - Ex],\\t\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\\t\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]),    \u0027Historical Data\u0027[Iteration]=[User Date 1]),ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week - Ex],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]),\u0027Historical Data\u0027[Iteration])","isHidden":false},{"name":"Z1WA - Appt","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Appt',filter(ALLEXCEPT(\u0027Historical Data\u0027,\\t\u0027Historical Data\u0027[Data Type],\\t\u0027Historical Data\u0027[Custom Week - Ex],\\t\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\\t\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]),    \u0027Historical Data\u0027[Iteration]=[User Date 1]),ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week - Ex],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now],\u0027Historical Data\u0027[Iteration]))","isHidden":false},{"name":"Z1WA - Grid Rev","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Grid Revenue',filter(ALLEXCEPT(\u0027Historical Data\u0027,\\t\u0027Historical Data\u0027[Data Type],\\t\u0027Historical Data\u0027[Custom Week - Ex],\\t\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\\t\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]),    \u0027Historical Data\u0027[Iteration]=[User Date 1]),ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week - Ex],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now],\u0027Historical Data\u0027[Iteration]))","isHidden":false},{"name":"Z1WA - NFC","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='NFC',filter(ALLEXCEPT(\u0027Historical Data\u0027,\\t\u0027Historical Data\u0027[Data Type],\\t\u0027Historical Data\u0027[Custom Week - Ex],\\t\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\\t\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]),    \u0027Historical Data\u0027[Iteration]=[User Date 1]),ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week - Ex],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now],\u0027Historical Data\u0027[Iteration]))","isHidden":false},{"name":"Z2WA - Advice","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Advice',filter(ALLEXCEPT(\u0027Historical Data\u0027,\\t\u0027Historical Data\u0027[Data Type],\\t\u0027Historical Data\u0027[Custom Week - Ex],\\t\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\\t\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]),    \u0027Historical Data\u0027[Iteration]=[User Date 2]),ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week - Ex],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now],\u0027Historical Data\u0027[Iteration]))","isHidden":false},{"name":"Z2WA - Appt","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Appt',filter(ALLEXCEPT(\u0027Historical Data\u0027,\\t\u0027Historical Data\u0027[Data Type],\\t\u0027Historical Data\u0027[Custom Week - Ex],\\t\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\\t\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]),    \u0027Historical Data\u0027[Iteration]=[User Date 2]),ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week - Ex],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now],\u0027Historical Data\u0027[Iteration]))","isHidden":false},{"name":"Z2WA - Grid Rev","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Grid Revenue',filter(ALLEXCEPT(\u0027Historical Data\u0027,\\t\u0027Historical Data\u0027[Data Type],\\t\u0027Historical Data\u0027[Custom Week - Ex],\\t\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\\t\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]),    \u0027Historical Data\u0027[Iteration]=[User Date 2]),ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week - Ex],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now],\u0027Historical Data\u0027[Iteration]))","isHidden":false},{"name":"Z2WA - NFC","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='NFC',filter(ALLEXCEPT(\u0027Historical Data\u0027,\\t\u0027Historical Data\u0027[Data Type],\\t\u0027Historical Data\u0027[Custom Week - Ex],\\t\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\\t\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]),    \u0027Historical Data\u0027[Iteration]=[User Date 2]),ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week - Ex],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now],\u0027Historical Data\u0027[Iteration]))","isHidden":false},{"name":"Z3WA - Advice","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Advice',filter(ALLEXCEPT(\u0027Historical Data\u0027,\\t\u0027Historical Data\u0027[Data Type],\\t\u0027Historical Data\u0027[Custom Week - Ex],\\t\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\\t\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]),    \u0027Historical Data\u0027[Iteration]=[User Date 3]),ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week - Ex],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now],\u0027Historical Data\u0027[Iteration]))","isHidden":false},{"name":"Z3WA - Appt","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Appt',filter(ALLEXCEPT(\u0027Historical Data\u0027,\\t\u0027Historical Data\u0027[Data Type],\\t\u0027Historical Data\u0027[Custom Week - Ex],\\t\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\\t\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]),    \u0027Historical Data\u0027[Iteration]=[User Date 3]),ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week - Ex],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now],\u0027Historical Data\u0027[Iteration]))","isHidden":false},{"name":"Z3WA - Grid Rev","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Grid Revenue',filter(ALLEXCEPT(\u0027Historical Data\u0027,\\t\u0027Historical Data\u0027[Data Type],\\t\u0027Historical Data\u0027[Custom Week - Ex],\\t\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\\t\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]),    \u0027Historical Data\u0027[Iteration]=[User Date 3]),ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week - Ex],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now],\u0027Historical Data\u0027[Iteration]))","isHidden":false},{"name":"Z3WA - NFC","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='NFC',filter(ALLEXCEPT(\u0027Historical Data\u0027,\\t\u0027Historical Data\u0027[Data Type],\\t\u0027Historical Data\u0027[Custom Week - Ex],\\t\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\\t\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]),    \u0027Historical Data\u0027[Iteration]=[User Date 3]),ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week - Ex],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now],\u0027Historical Data\u0027[Iteration]))","isHidden":false},{"name":"Z4WA - Advice","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Advice',filter(ALLEXCEPT(\u0027Historical Data\u0027,\\t\u0027Historical Data\u0027[Data Type],\\t\u0027Historical Data\u0027[Custom Week - Ex],\\t\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\\t\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]),    \u0027Historical Data\u0027[Iteration]=[User Date 4]),ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week - Ex],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now],\u0027Historical Data\u0027[Iteration]))","isHidden":false},{"name":"Z4WA - Appt","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Appt',filter(ALLEXCEPT(\u0027Historical Data\u0027,\\t\u0027Historical Data\u0027[Data Type],\\t\u0027Historical Data\u0027[Custom Week - Ex],\\t\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\\t\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]),    \u0027Historical Data\u0027[Iteration]=[User Date 4]),ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week - Ex],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now],\u0027Historical Data\u0027[Iteration]))","isHidden":false},{"name":"Z4WA - Grid Rev","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Grid Revenue',filter(ALLEXCEPT(\u0027Historical Data\u0027,\\t\u0027Historical Data\u0027[Data Type],\\t\u0027Historical Data\u0027[Custom Week - Ex],\\t\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\\t\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]),    \u0027Historical Data\u0027[Iteration]=[User Date 4]),ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week - Ex],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now],\u0027Historical Data\u0027[Iteration]))","isHidden":false},{"name":"Z4WA - NFC","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='NFC',filter(ALLEXCEPT(\u0027Historical Data\u0027,\\t\u0027Historical Data\u0027[Data Type],\\t\u0027Historical Data\u0027[Custom Week - Ex],\\t\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\\t\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]),    \u0027Historical Data\u0027[Iteration]=[User Date 4]),ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week - Ex],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now],\u0027Historical Data\u0027[Iteration]))","isHidden":false},{"name":"Z1WA","expression":"SWITCH(TRUE(),[User Selection]='Appointments',FORMAT(\u0027Historical Data\u0027[Z1WA - Appt],'0'),[User Selection]='New Clients',FORMAT(\u0027Historical Data\u0027[Z1WA - NFC],'0'),[User Selection]='Grid Revenue',FORMAT(\u0027Historical Data\u0027[Z1WA - Grid Rev],'#,0'),[User Selection]='Advice',FORMAT(\u0027Historical Data\u0027[Z1WA - Advice],'0'),'Select a Metric')","isHidden":false},{"name":"Z2WA","expression":"SWITCH(TRUE(),[User Selection]='Appointments',FORMAT(\u0027Historical Data\u0027[Z2WA - Appt],'0'),[User Selection]='New Clients',FORMAT(\u0027Historical Data\u0027[Z2WA - NFC],'0'),[User Selection]='Grid Revenue',FORMAT(\u0027Historical Data\u0027[Z2WA - Grid Rev],'#,0'),[User Selection]='Advice',FORMAT(\u0027Historical Data\u0027[Z1WA],'0'),'Select a Metric')","isHidden":false},{"name":"Z3WA","expression":"SWITCH(TRUE(),[User Selection]='Appointments',FORMAT(\u0027Historical Data\u0027[Z3WA - Appt],'0'),[User Selection]='New Clients',FORMAT(\u0027Historical Data\u0027[Z3WA - NFC],'0'),[User Selection]='Grid Revenue',FORMAT(\u0027Historical Data\u0027[Z3WA - Grid Rev],'#,0'),[User Selection]='Advice',FORMAT(\u0027Historical Data\u0027[Z3WA - Advice],'0'),'Select a Metric')","isHidden":false},{"name":"Z4WA","expression":"SWITCH(TRUE(),[User Selection]='Appointments',FORMAT(\u0027Historical Data\u0027[Z4WA - Appt],'0'),[User Selection]='New Clients',FORMAT(\u0027Historical Data\u0027[Z4WA - NFC],'0'),[User Selection]='Grid Revenue',FORMAT(\u0027Historical Data\u0027[Z4WA - Grid Rev],'#,0'),[User Selection]='Advice',FORMAT(\u0027Historical Data\u0027[Z4WA - Advice],'0'),'Select a Metric')","isHidden":false},{"name":"User Date 1","expression":"SELECTEDVALUE(\u0027Historical Date 1\u0027[Iteration])","isHidden":false},{"name":"User Date 2","expression":"SELECTEDVALUE(\u0027Historical Date 2\u0027[Iteration])","isHidden":false},{"name":"User Date 3","expression":"SELECTEDVALUE(\u0027Historical Date 3\u0027[Iteration])","isHidden":false},{"name":"User Date 4","expression":"SELECTEDVALUE(\u0027Historical Date 4\u0027[Iteration])","isHidden":false},{"name":"Measure 2","expression":"CALCULATE(sum(\u0027Historical Data\u0027[Value]),filter(ALL(\u0027Historical Data\u0027),\u0027Historical Data\u0027[Iteration]=[User Date 1]),\u0027Historical Data\u0027[Data Type]='Appt',ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week - Ex],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now],\u0027Historical Data\u0027[Iteration]))","isHidden":false},{"name":"1WA - Date","expression":"Format(max(\u0027Historical Data\u0027[Iteration]),'m/d')","isHidden":false},{"name":"2WA - Date","expression":"Format(max(\u0027Historical Data\u0027[Iteration])-7,'m/d')","isHidden":false},{"name":"5WA - Advice","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Advice',\u0027Historical Data\u0027[Custom Week]=5,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"6WA - Advice","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Advice',\u0027Historical Data\u0027[Custom Week]=6,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"7WA - Advice","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Advice',\u0027Historical Data\u0027[Custom Week]=7,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"8WA - Advice","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Advice',\u0027Historical Data\u0027[Custom Week]=8,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"9WA - Advice","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Advice',\u0027Historical Data\u0027[Custom Week]=9,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"A10WA - Advice","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Advice',\u0027Historical Data\u0027[Custom Week]=10,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"A11WA - Advice","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Advice',\u0027Historical Data\u0027[Custom Week]=11,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"A12WA - Advice","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Advice',\u0027Historical Data\u0027[Custom Week]=12,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"A13WA - Advice","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Advice',\u0027Historical Data\u0027[Custom Week]=13,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"A14WA - Advice","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Advice',\u0027Historical Data\u0027[Custom Week]=14,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"A15WA - Advice","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Advice',\u0027Historical Data\u0027[Custom Week]=15,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"A16WA - Advice","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Advice',\u0027Historical Data\u0027[Custom Week]=16,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"A17WA - Advice","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Advice',\u0027Historical Data\u0027[Custom Week]=17,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"5WA - Appt","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Appt',\u0027Historical Data\u0027[Custom Week]=5,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"6WA - Appt","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Appt',\u0027Historical Data\u0027[Custom Week]=6,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"7WA - Appt","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Appt',\u0027Historical Data\u0027[Custom Week]=7,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"8WA - Appt","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Appt',\u0027Historical Data\u0027[Custom Week]=8,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"9WA - Appt","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Appt',\u0027Historical Data\u0027[Custom Week]=9,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"A10WA - Appt","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Appt',\u0027Historical Data\u0027[Custom Week]=10,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"A11WA - Appt","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Appt',\u0027Historical Data\u0027[Custom Week]=11,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"A12WA - Appt","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Appt',\u0027Historical Data\u0027[Custom Week]=12,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"A13WA - Appt","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Appt',\u0027Historical Data\u0027[Custom Week]=13,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"A14WA - Appt","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Appt',\u0027Historical Data\u0027[Custom Week]=14,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"A15WA - Appt","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Appt',\u0027Historical Data\u0027[Custom Week]=15,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"A16WA - Appt","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Appt',\u0027Historical Data\u0027[Custom Week]=16,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"A17WA - Appt","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Appt',\u0027Historical Data\u0027[Custom Week]=17,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"5WA - Grid Rev","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Grid Revenue',\u0027Historical Data\u0027[Custom Week]=5,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"6WA - Grid Rev","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Grid Revenue',\u0027Historical Data\u0027[Custom Week]=6,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"7WA - Grid Rev","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Grid Revenue',\u0027Historical Data\u0027[Custom Week]=7,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"8WA - Grid Rev","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Grid Revenue',\u0027Historical Data\u0027[Custom Week]=8,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"9WA - Grid Rev","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Grid Revenue',\u0027Historical Data\u0027[Custom Week]=9,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"A10WA - Grid Rev","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Grid Revenue',\u0027Historical Data\u0027[Custom Week]=10,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"A11WA - Grid Rev","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Grid Revenue',\u0027Historical Data\u0027[Custom Week]=11,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"A12WA - Grid Rev","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Grid Revenue',\u0027Historical Data\u0027[Custom Week]=12,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"A13WA - Grid Rev","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Grid Revenue',\u0027Historical Data\u0027[Custom Week]=13,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"A14WA - Grid Rev","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Grid Revenue',\u0027Historical Data\u0027[Custom Week]=14,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"A15WA - Grid Rev","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Grid Revenue',\u0027Historical Data\u0027[Custom Week]=15,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"A16WA - Grid Rev","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Grid Revenue',\u0027Historical Data\u0027[Custom Week]=16,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"A17WA - Grid Rev","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='Grid Revenue',\u0027Historical Data\u0027[Custom Week]=17,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"5WA - NFC","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='NFC',\u0027Historical Data\u0027[Custom Week]=5,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"6WA - NFC","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='NFC',\u0027Historical Data\u0027[Custom Week]=6,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"7WA - NFC","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='NFC',\u0027Historical Data\u0027[Custom Week]=7,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"8WA - NFC","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='NFC',\u0027Historical Data\u0027[Custom Week]=8,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"9WA - NFC","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='NFC',\u0027Historical Data\u0027[Custom Week]=9,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"A10WA - NFC","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='NFC',\u0027Historical Data\u0027[Custom Week]=10,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"A11WA - NFC","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='NFC',\u0027Historical Data\u0027[Custom Week]=11,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"A12WA - NFC","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='NFC',\u0027Historical Data\u0027[Custom Week]=12,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"A13WA - NFC","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='NFC',\u0027Historical Data\u0027[Custom Week]=13,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"A14WA - NFC","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='NFC',\u0027Historical Data\u0027[Custom Week]=14,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"A15WA - NFC","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='NFC',\u0027Historical Data\u0027[Custom Week]=15,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"A16WA - NFC","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='NFC',\u0027Historical Data\u0027[Custom Week]=16,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"A17WA - NFC","expression":"CALCULATE(SUM(\u0027Historical Data\u0027[VALUE]),\u0027Historical Data\u0027[Data Type]='NFC',\u0027Historical Data\u0027[Custom Week]=17,ALLEXCEPT(\u0027Historical Data\u0027,\u0027Historical Data\u0027[Data Type],\u0027Historical Data\u0027[Custom Week],\u0027Historical Data\u0027[TSID],\u0027Historical Data\u0027[EMPL_NM],\u0027RR_In_and_Out\u0027[EMPL_NM],\u0027Historical Data\u0027[RR_Now]))","isHidden":false},{"name":"5WA","expression":"SWITCH(TRUE(),[User Selection]='Appointments',FORMAT(\u0027Historical Data\u0027[5WA - Appt],'0'),[User Selection]='New Clients',FORMAT(\u0027Historical Data\u0027[5WA - NFC],'0'),[User Selection]='Grid Revenue',FORMAT(\u0027Historical Data\u0027[5WA - Grid Rev],'#,0'),[User Selection]='Advice',FORMAT(\u0027Historical Data\u0027[5WA - Advice],'0'),'Select a Metric')","isHidden":false},{"name":"6WA","expression":"SWITCH(TRUE(),[User Selection]='Appointments',FORMAT(\u0027Historical Data\u0027[6WA - Appt],'0'),[User Selection]='New Clients',FORMAT(\u0027Historical Data\u0027[6WA - NFC],'0'),[User Selection]='Grid Revenue',FORMAT(\u0027Historical Data\u0027[6WA - Grid Rev],'#,0'),[User Selection]='Advice',FORMAT(\u0027Historical Data\u0027[6WA - Advice],'0'),'Select a Metric')","isHidden":false},{"name":"7WA","expression":"SWITCH(TRUE(),[User Selection]='Appointments',FORMAT(\u0027Historical Data\u0027[7WA - Appt],'0'),[User Selection]='New Clients',FORMAT(\u0027Historical Data\u0027[7WA - NFC],'0'),[User Selection]='Grid Revenue',FORMAT(\u0027Historical Data\u0027[7WA - Grid Rev],'#,0'),[User Selection]='Advice',FORMAT(\u0027Historical Data\u0027[7WA - Advice],'0'),'Select a Metric')","isHidden":false},{"name":"8WA","expression":"SWITCH(TRUE(),[User Selection]='Appointments',FORMAT(\u0027Historical Data\u0027[8WA - Appt],'0'),[User Selection]='New Clients',FORMAT(\u0027Historical Data\u0027[8WA - NFC],'0'),[User Selection]='Grid Revenue',FORMAT(\u0027Historical Data\u0027[8WA - Grid Rev],'#,0'),[User Selection]='Advice',FORMAT(\u0027Historical Data\u0027[8WA - Advice],'0'),'Select a Metric')","isHidden":false},{"name":"9WA","expression":"SWITCH(TRUE(),[User Selection]='Appointments',FORMAT(\u0027Historical Data\u0027[9WA - Appt],'0'),[User Selection]='New Clients',FORMAT(\u0027Historical Data\u0027[9WA - NFC],'0'),[User Selection]='Grid Revenue',FORMAT(\u0027Historical Data\u0027[9WA - Grid Rev],'#,0'),[User Selection]='Advice',FORMAT(\u0027Historical Data\u0027[9WA - Advice],'0'),'Select a Metric')","isHidden":false},{"name":"A10WA","expression":"SWITCH(TRUE(),[User Selection]='Appointments',FORMAT(\u0027Historical Data\u0027[A10WA - Appt],'0'),[User Selection]='New Clients',FORMAT(\u0027Historical Data\u0027[A10WA - NFC],'0'),[User Selection]='Grid Revenue',FORMAT(\u0027Historical Data\u0027[A10WA - Grid Rev],'#,0'),[User Selection]='Advice',FORMAT(\u0027Historical Data\u0027[A10WA - Advice],'0'),'Select a Metric')","isHidden":false},{"name":"A11WA","expression":"SWITCH(TRUE(),[User Selection]='Appointments',FORMAT(\u0027Historical Data\u0027[A11WA - Appt],'0'),[User Selection]='New Clients',FORMAT(\u0027Historical Data\u0027[A11WA - NFC],'0'),[User Selection]='Grid Revenue',FORMAT(\u0027Historical Data\u0027[A11WA - Grid Rev],'#,0'),[User Selection]='Advice',FORMAT(\u0027Historical Data\u0027[A11WA - Advice],'0'),'Select a Metric')","isHidden":false},{"name":"A12WA","expression":"SWITCH(TRUE(),[User Selection]='Appointments',FORMAT(\u0027Historical Data\u0027[A12WA - Appt],'0'),[User Selection]='New Clients',FORMAT(\u0027Historical Data\u0027[A12WA - NFC],'0'),[User Selection]='Grid Revenue',FORMAT(\u0027Historical Data\u0027[A12WA - Grid Rev],'#,0'),[User Selection]='Advice',FORMAT(\u0027Historical Data\u0027[A12WA - Advice],'0'),'Select a Metric')","isHidden":false},{"name":"A14WA","expression":"SWITCH(TRUE(),[User Selection]='Appointments',FORMAT(\u0027Historical Data\u0027[A14WA - Appt],'0'),[User Selection]='New Clients',FORMAT(\u0027Historical Data\u0027[A14WA - NFC],'0'),[User Selection]='Grid Revenue',FORMAT(\u0027Historical Data\u0027[A14WA - Grid Rev],'#,0'),[User Selection]='Advice',FORMAT(\u0027Historical Data\u0027[A14WA - Advice],'0'),'Select a Metric')","isHidden":false},{"name":"A15WA","expression":"SWITCH(TRUE(),[User Selection]='Appointments',FORMAT(\u0027Historical Data\u0027[A15WA - Appt],'0'),[User Selection]='New Clients',FORMAT(\u0027Historical Data\u0027[A15WA - NFC],'0'),[User Selection]='Grid Revenue',FORMAT(\u0027Historical Data\u0027[A15WA - Grid Rev],'#,0'),[User Selection]='Advice',FORMAT(\u0027Historical Data\u0027[A15WA - Advice],'0'),'Select a Metric')","isHidden":false},{"name":"A16WA","expression":"SWITCH(TRUE(),[User Selection]='Appointments',FORMAT(\u0027Historical Data\u0027[A16WA - Appt],'0'),[User Selection]='New Clients',FORMAT(\u0027Historical Data\u0027[A16WA - NFC],'0'),[User Selection]='Grid Revenue',FORMAT(\u0027Historical Data\u0027[A16WA - Grid Rev],'#,0'),[User Selection]='Advice',FORMAT(\u0027Historical Data\u0027[A16WA - Advice],'0'),'Select a Metric')","isHidden":false},{"name":"A17WA","expression":"SWITCH(TRUE(),[User Selection]='Appointments',FORMAT(\u0027Historical Data\u0027[A17WA - Appt],'0'),[User Selection]='New Clients',FORMAT(\u0027Historical Data\u0027[A17WA - NFC],'0'),[User Selection]='Grid Revenue',FORMAT(\u0027Historical Data\u0027[A17WA - Grid Rev],'#,0'),[User Selection]='Advice',FORMAT(\u0027Historical Data\u0027[A17WA - Advice],'0'),'Select a Metric')","isHidden":false},{"name":"A13WA","expression":"SWITCH(TRUE(),[User Selection]='Appointments',FORMAT(\u0027Historical Data\u0027[A13WA - Appt],'0'),[User Selection]='New Clients',FORMAT(\u0027Historical Data\u0027[A13WA - NFC],'0'),[User Selection]='Grid Revenue',FORMAT(\u0027Historical Data\u0027[A13WA - Grid Rev],'#,0'),[User Selection]='Advice',FORMAT(\u0027Historical Data\u0027[A13WA - Advice],'0'),'Select a Metric')","isHidden":false},{"name":"3WA - Date","expression":"Format(max(\u0027Historical Data\u0027[Iteration])-14,'m/d')","isHidden":false},{"name":"4WA - Date","expression":"Format(max(\u0027Historical Data\u0027[Iteration])-21,'m/d')","isHidden":false},{"name":"5WA - Date","expression":"Format(max(\u0027Historical Data\u0027[Iteration])-28,'m/d')","isHidden":false},{"name":"6WA - Date","expression":"Format(max(\u0027Historical Data\u0027[Iteration])-35,'m/d')","isHidden":false},{"name":"7WA - Date","expression":"Format(max(\u0027Historical Data\u0027[Iteration])-42,'m/d')","isHidden":false},{"name":"8WA - Date","expression":"Format(max(\u0027Historical Data\u0027[Iteration])-49,'m/d')","isHidden":false},{"name":"9WA - Date","expression":"Format(max(\u0027Historical Data\u0027[Iteration])-56,'m/d')","isHidden":false},{"name":"A10WA - Date","expression":"Format(max(\u0027Historical Data\u0027[Iteration])-63,'m/d')","isHidden":false},{"name":"A11WA - Date","expression":"Format(max(\u0027Historical Data\u0027[Iteration])-70,'m/d')","isHidden":false},{"name":"A12WA - Date","expression":"Format(max(\u0027Historical Data\u0027[Iteration])-77,'m/d')","isHidden":false},{"name":"A13WA - Date","expression":"Format(max(\u0027Historical Data\u0027[Iteration])-84,'m/d')","isHidden":false},{"name":"A14WA - Date","expression":"Format(max(\u0027Historical Data\u0027[Iteration])-91,'m/d')","isHidden":false},{"name":"A15WA - Date","expression":"Format(max(\u0027Historical Data\u0027[Iteration])-98,'m/d')","isHidden":false},{"name":"A16WA - Date","expression":"Format(max(\u0027Historical Data\u0027[Iteration])-105,'m/d')","isHidden":false},{"name":"A17WA - Date","expression":"Format(max(\u0027Historical Data\u0027[Iteration])-112,'m/d')","isHidden":false},{"name":"Advice Flag","expression":"CALCULATE(sum(\u0027Historical Data\u0027[Value]),\u0027Historical Data\u0027[Data Type]='Advice')","isHidden":false},{"name":"Appt Flag","expression":"CALCULATE(sum(\u0027Historical Data\u0027[Value]),\u0027Historical Data\u0027[Data Type]='Appt')","isHidden":false},{"name":"NFC Flag","expression":"CALCULATE(sum(\u0027Historical Data\u0027[Value]),\u0027Historical Data\u0027[Data Type]='NFC')","isHidden":false},{"name":"GR Flag","expression":"CALCULATE(sum(\u0027Historical Data\u0027[Value]),\u0027Historical Data\u0027[Data Type]='Grid Revenue')","isHidden":false},{"name":"Metric Comparison","expression":"SWITCH(TRUE(),AND([User Selection]='Appointments',[Appt Flag]\u003e0),1,AND([User Selection]='New Clients',[NFC Flag]\u003e0),1,AND([User Selection]='Grid Revenue',[GR Flag]\u003e0),1,AND([User Selection]='Advice',[Advice Flag]\u003e0),1,0)","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Launch Dashboard//Launch Dashboard History.xlsm'), null, true),    Data_Sheet = Source{[Item='Data',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Data_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'TSID', type text}, {'EMPL_NM', type text}, {'Job Type Code', Int64.Type}, {'Employee Status Type Description', type text}, {'ORZN_SUB_DEPT_CDE1', type text}, {'Data Type', type text}, {'Key', Int64.Type}, {'Value', Int64.Type}, {'Iteration', type date}}),    #'Added Conditional Column' = Table.AddColumn(#'Changed Type', 'Custom Week - Ex', each if [Iteration] = #date(2022, 10, 24) then 1 else if [Iteration] = #date(2022, 10, 21) then 2 else if [Iteration] = #date(2022, 10, 20) then 3 else if [Iteration] = #date(2022, 10, 19) then 4 else if [Iteration] = #date(2022, 10, 17) then 5 else 999999),    #'Merged Queries' = Table.NestedJoin(#'Added Conditional Column', {'TSID'}, RR_In_and_Out, {'TSID'}, 'RR_In_and_Out', JoinKind.LeftOuter),    #'Expanded RR_In_and_Out' = Table.ExpandTableColumn(#'Merged Queries', 'RR_In_and_Out', {'TSID', 'Sale_Hier_Dim.Employee Status Type Description', 'Sale_Hier_Dim.Job Type Code'}, {'RR_In_and_Out.TSID', 'RR_In_and_Out.Sale_Hier_Dim.Employee Status Type Description', 'RR_In_and_Out.Sale_Hier_Dim.Job Type Code'}),    #'Added Conditional Column1' = Table.AddColumn(#'Expanded RR_In_and_Out', 'RR_Now', each if [RR_In_and_Out.TSID] = null then 'N' else if [RR_In_and_Out.Sale_Hier_Dim.Employee Status Type Description] \u003c\u003e 'Active' then 'N' else if [RR_In_and_Out.Sale_Hier_Dim.Job Type Code] \u003c\u003e '002010' then 'N' else 'Y'),    #'Merged Queries1' = Table.NestedJoin(#'Added Conditional Column1', {'TSID'}, Sale_Hier_Dim, {'SALE_HIER_ID'}, 'Sale_Hier_Dim', JoinKind.LeftOuter),    #'Expanded Sale_Hier_Dim' = Table.ExpandTableColumn(#'Merged Queries1', 'Sale_Hier_Dim', {'ORZN_ZONE_CDE', 'ORZN_SUB_DEPT_CDE', 'Employee Status Type Description', 'Job Type Code'}, {'Sale_Hier_Dim.ORZN_ZONE_CDE', 'Sale_Hier_Dim.ORZN_SUB_DEPT_CDE', 'Sale_Hier_Dim.Employee Status Type Description', 'Sale_Hier_Dim.Job Type Code'}),    #'Merged Queries2' = Table.NestedJoin(#'Expanded Sale_Hier_Dim', {'Sale_Hier_Dim.ORZN_ZONE_CDE'}, #'Market Leader Info', {'RFO_ZONE_NM'}, 'Market Leader Info', JoinKind.LeftOuter),    #'Expanded Market Leader Info' = Table.ExpandTableColumn(#'Merged Queries2', 'Market Leader Info', {'MARKET_LEADER_NAME'}, {'Market Leader Info.MARKET_LEADER_NAME'}),    #'Added Custom' = Table.AddColumn(#'Expanded Market Leader Info', 'Max Date', each List.Max(#'Expanded Market Leader Info'[Iteration])),    #'Added Custom1' = Table.AddColumn(#'Added Custom', 'DETAIL_KEY', each [Data Type]\u0026' '\u0026Number.ToText([Key]))in    #'Added Custom1'"}]},{"name":"Slicer Table","isHidden":false,"storageMode":"Import","columns":[{"name":"Value","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"}],"measures":[],"source":[{"expression":"{'Appointments','New Clients','Grid Revenue','Advice'}"}]},{"name":"Historical Date 1","isHidden":false,"storageMode":"Import","columns":[{"name":"Iteration","dataType":"DateTime","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Launch Dashboard//Launch Dashboard History.xlsm'), null, true),    Data_Sheet = Source{[Item='Data',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Data_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'TSID', type text}, {'EMPL_NM', type text}, {'Job Type Code', Int64.Type}, {'Employee Status Type Description', type text}, {'ORZN_SUB_DEPT_CDE1', type text}, {'Data Type', type text}, {'Key', Int64.Type}, {'Value', Int64.Type}, {'Iteration', type date}}),    #'Removed Other Columns' = Table.SelectColumns(#'Changed Type',{'Iteration'}),    #'Removed Duplicates' = Table.Distinct(#'Removed Other Columns')in    #'Removed Duplicates'"}]},{"name":"Historical Date 2","isHidden":false,"storageMode":"Import","columns":[{"name":"Iteration","dataType":"DateTime","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Launch Dashboard//Launch Dashboard History.xlsm'), null, true),    Data_Sheet = Source{[Item='Data',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Data_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'TSID', type text}, {'EMPL_NM', type text}, {'Job Type Code', Int64.Type}, {'Employee Status Type Description', type text}, {'ORZN_SUB_DEPT_CDE1', type text}, {'Data Type', type text}, {'Key', Int64.Type}, {'Value', Int64.Type}, {'Iteration', type date}}),    #'Removed Other Columns' = Table.SelectColumns(#'Changed Type',{'Iteration'}),    #'Removed Duplicates' = Table.Distinct(#'Removed Other Columns')in    #'Removed Duplicates'"}]},{"name":"Historical Date 3","isHidden":false,"storageMode":"Import","columns":[{"name":"Iteration","dataType":"DateTime","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Launch Dashboard//Launch Dashboard History.xlsm'), null, true),    Data_Sheet = Source{[Item='Data',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Data_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'TSID', type text}, {'EMPL_NM', type text}, {'Job Type Code', Int64.Type}, {'Employee Status Type Description', type text}, {'ORZN_SUB_DEPT_CDE1', type text}, {'Data Type', type text}, {'Key', Int64.Type}, {'Value', Int64.Type}, {'Iteration', type date}}),    #'Removed Other Columns' = Table.SelectColumns(#'Changed Type',{'Iteration'}),    #'Removed Duplicates' = Table.Distinct(#'Removed Other Columns')in    #'Removed Duplicates'"}]},{"name":"Historical Date 4","isHidden":false,"storageMode":"Import","columns":[{"name":"Iteration","dataType":"DateTime","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Launch Dashboard//Launch Dashboard History.xlsm'), null, true),    Data_Sheet = Source{[Item='Data',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Data_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'TSID', type text}, {'EMPL_NM', type text}, {'Job Type Code', Int64.Type}, {'Employee Status Type Description', type text}, {'ORZN_SUB_DEPT_CDE1', type text}, {'Data Type', type text}, {'Key', Int64.Type}, {'Value', Int64.Type}, {'Iteration', type date}}),    #'Removed Other Columns' = Table.SelectColumns(#'Changed Type',{'Iteration'}),    #'Removed Duplicates' = Table.Distinct(#'Removed Other Columns')in    #'Removed Duplicates'"}]},{"name":"Definitions","isHidden":false,"storageMode":"Import","columns":[{"name":"Report","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Category","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Term","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Order","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Definition","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    // Source = SharePoint.Files('https://thrivent.sharepoint.com/sites/SDFieldReportingAnalytics/', [ApiVersion = 15]),    // #'Filtered Rows' = Table.SelectRows(Source, each ([Extension] = '.xlsx') and ([Name] = 'Reporting Data Dictionary.xlsx')),    // #'Reporting Data Dictionary xlsx_https://thrivent sharepoint com/sites/SDFieldReportingAnalytics/Shared Documents/General/' = #'Filtered Rows'{[Name='Reporting Data Dictionary.xlsx',#'Folder Path'='https://thrivent.sharepoint.com/sites/SDFieldReportingAnalytics/Shared Documents/General/']}[Content],    // #'Imported Excel Workbook' = Excel.Workbook(#'Reporting Data Dictionary xlsx_https://thrivent sharepoint com/sites/SDFieldReportingAnalytics/Shared Documents/General/'),    // Sheet1_Sheet = #'Imported Excel Workbook'{[Item='Sheet1',Kind='Sheet']}[Data], Source = Excel.Workbook(Web.Contents('https://thrivent.sharepoint.com/sites/SDFieldReportingAnalytics/Shared Documents/General/Reporting Data Dictionary.xlsx'), null, true),    #'Sheet1_Sheet' = Source{[Item='Sheet1',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Report', type text}, {'Category', type text}, {'Term', type text}, {'Order', Int64.Type}, {'Definition', type text}}),    #'Filtered Rows1' = Table.SelectRows(#'Changed Type', each ([Report] = 'Launch Dashboard'))in    #'Filtered Rows1'"}]},{"name":"Launch Dashboard Ltd History","isHidden":false,"storageMode":"Import","columns":[{"name":"Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Tenure Week","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Total Appointments","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Appoint Minimum","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Appoint Target","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Households with Goals","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Advice Minimum","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Total New Clients","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"New Client Min","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"New Client Target","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Grid Rev Total","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Grid Rev Minimum*","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Grid Rev Target","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Blank","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Name - Relisted","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Tenure Week - Relisted","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Pending Applications","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Written Applications","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Applications Target","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Pending Amount Total","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Referrals","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Total JFW","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Total Appointments - Relisted","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"JFW Percent","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Appts Per Week","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TSID_1","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG_2","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Column31","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Year","dataType":"String","isHidden":false,"expression":"year(\u0027Launch Dashboard Ltd History\u0027[Date])","columnType":"Calculated"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Launch Dashboard//Launch Dashboard History - Ltd.xlsx'), null, true),    Export_Sheet = Source{[Item='Export',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Export_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Name', type text}, {'Tenure Week', Int64.Type}, {'Total Appointments', Int64.Type}, {'Appoint Minimum', Int64.Type}, {'Appoint Target', Int64.Type}, {'Households with Goals', Int64.Type}, {'Advice Minimum', Int64.Type}, {'Total New Clients', Int64.Type}, {'New Client Min', Int64.Type}, {'New Client Target', type number}, {'Grid Rev Total', type number}, {'Grid Rev Minimum*', type text}, {'Grid Rev Target', type text}, {'Blank', type any}, {'Name - Relisted', type text}, {'Tenure Week - Relisted', Int64.Type}, {'Pending Applications', Int64.Type}, {'Written Applications', Int64.Type}, {'Applications Target', type text}, {'Pending Amount Total', type number}, {'Referrals', Int64.Type}, {'Total JFW', Int64.Type}, {'Total Appointments - Relisted', Int64.Type}, {'JFW Percent', type number}, {'Date', type date}}),    #'Filtered Rows' = Table.SelectRows(#'Changed Type', each ([Date] \u003c\u003e #date(2022, 10, 20) and [Date] \u003c\u003e #date(2022, 10, 21)))in    #'Filtered Rows'"}]},{"name":"Attendance Data","isHidden":false,"storageMode":"Import","columns":[{"name":"Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TS","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Attendance Min","dataType":"String","isHidden":false,"expression":"'85%'","columnType":"Calculated"},{"name":"Attendance Target","dataType":"String","isHidden":false,"expression":"'100%'","columnType":"Calculated"},{"name":"Class Month","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"% Attended Required","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(Web.Contents('https://thrivent.sharepoint.com/sites/PRJThriventAdvisorOnboarding/Shared Documents/Logistics - Behind the Scenes/Master Attendance Tracker/Master Attendance Tracker.xlsx'), null, true),    Custom1 = Source{[Item='2023 Master Attendance Tracker',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Custom1, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Name', type text}, {'TS', type text}, {'% Attended Required', Percentage.Type}}),    #'Removed Other Columns' = Table.SelectColumns(#'Changed Type',{'% Attended Required', 'TS', 'Name', 'Class Month'}),    #'Filtered Rows' = Table.SelectRows(#'Removed Other Columns', each ([TS] \u003c\u003e null)),    #'Replaced Errors' = Table.ReplaceErrorValues(#'Filtered Rows', {{'% Attended Required', 0}})in    #'Replaced Errors'"}]},{"name":"Date Exceptions","isHidden":false,"storageMode":"Import","columns":[{"name":"Adj Start Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Year-TSID","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Launch Dashboard//Date Exceptions.xlsx'), null, true),    Sheet1_Sheet = Source{[Item='Sheet1',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Year-TSID', type text}, {'Adj Start Date', type date}, {'Column3', type any}, {'Column4', type any}, {'Column5', type any}, {'Column6', type any}, {'Column7', type any}}),    #'Removed Other Columns' = Table.SelectColumns(#'Changed Type',{'Adj Start Date', 'Year-TSID'})in    #'Removed Other Columns'"}]},{"name":"Leader Exceptions","isHidden":false,"storageMode":"Import","columns":[{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Reason","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared//Public//DI and BI//Launch Dashboard//Market Leader Exceptions.xlsx'), null, true),    Sheet1_Sheet = Source{[Item='Sheet1',Kind='Sheet']}[Data],    #'Changed Type' = Table.TransformColumnTypes(Sheet1_Sheet,{{'Column1', type text}, {'Column2', type text}, {'Column3', type text}}),    #'Promoted Headers' = Table.PromoteHeaders(#'Changed Type', [PromoteAllScalars=true]),    #'Changed Type1' = Table.TransformColumnTypes(#'Promoted Headers',{{'TSID', type text}, {'Name', type text}, {'Reason', type text}})in    #'Changed Type1'"}]},{"name":"Whats New_Alert Messages","isHidden":false,"storageMode":"Import","columns":[{"name":"Message Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Message","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"End Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Start Date","dataType":"DateTime","isHidden":false,"columnType":"Data"}],"measures":[{"name":"Show Alert Msg Box","expression":"VAR AlertMsg = LOOKUPVALUE(\u0027Whats New_Alert Messages\u0027[Message],\u0027Whats New_Alert Messages\u0027[Message Description],'Alert')RETURNIF(AlertMsg\u003c\u003eBLANK(),1,0)","isHidden":false},{"name":"Show What\u0027s New Msg Box","expression":"VAR AlertMsg = LOOKUPVALUE(\u0027Whats New_Alert Messages\u0027[Message],\u0027Whats New_Alert Messages\u0027[Message Description],'What\u0027s New')RETURNIF(AlertMsg\u003c\u003eBLANK(),1,0)","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////vsshr//shared////Public//DI and BI//Field Reporting//What\u0027s New and Alert Message//What\u0027s New and Alert Message.xlsx'), null, true),    #'Distribution DB_Sheet' = Source{[Item='Assoc Rep',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'Distribution DB_Sheet', [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Message Description', type text}, {'Message', type text}, {'End Date', type date}, {'Start Date', type date}}),    #'Filtered Rows' = Table.SelectRows(#'Changed Type', each true)in    #'Filtered Rows'"}]}],"expressions":[{"name":"Parameter1","expression":"#'Sample File' meta [IsParameterQuery=true, BinaryIdentifier=#'Sample File', Type='Binary', IsParameterQueryRequired=true]"},{"name":"Transform Sample File","expression":"let    Source = Excel.Workbook(Parameter1, null, true),    #'2023 Mater Attendance Tracker_Sheet' = Source{[Item='2023 Mater Attendance Tracker',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'2023 Mater Attendance Tracker_Sheet', [PromoteAllScalars=true])in    #'Promoted Headers'"},{"name":"Sample File","expression":"let    Source = SharePoint.Files('https://thrivent.sharepoint.com/sites/PRJThriventAdvisorOnboarding/', [ApiVersion = 15]),    Navigation1 = Source{0}[Content]in    Navigation1"},{"name":"Transform File","expression":"let    Source = (Parameter1 as binary) =\u003e let    Source = Excel.Workbook(Parameter1, null, true),    #'2023 Mater Attendance Tracker_Sheet' = Source{[Item='2023 Mater Attendance Tracker',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(#'2023 Mater Attendance Tracker_Sheet', [PromoteAllScalars=true])in    #'Promoted Headers'in    Source"},{"name":"Errors in RR_In_and_Out","expression":"letSource = RR_In_and_Out,  #'Detected Type Mismatches' = let    tableWithOnlyPrimitiveTypes = Table.SelectColumns(Source, Table.ColumnsOfType(Source, {type nullable number, type nullable text, type nullable logical, type nullable date, type nullable datetime, type nullable datetimezone, type nullable time, type nullable duration})),    recordTypeFields = Type.RecordFields(Type.TableRow(Value.Type(tableWithOnlyPrimitiveTypes))),    fieldNames = Record.FieldNames(recordTypeFields),    fieldTypes = List.Transform(Record.ToList(recordTypeFields), each [Type]),    pairs = List.Transform(List.Positions(fieldNames), (i) =\u003e {fieldNames{i}, (v) =\u003e if v = null or Value.Is(v, fieldTypes{i}) then v else error [Message = 'The type of the value does not match the type of the column.', Detail = v], fieldTypes{i}})in    Table.TransformColumns(Source, pairs),  #'Added Index' = Table.AddIndexColumn(#'Detected Type Mismatches', 'Row Number' ,1),  #'Kept Errors' = Table.SelectRowsWithErrors(#'Added Index', {'JOIN VALUE', 'TAG_MVP_Mkt', 'Year IN', 'Year OUT', 'Hire Sts', 'Term Sts', 'Division_ID', 'Division_Description', 'RFO_ID', 'RFO_Description', 'MVP_ID', 'Zone_ID', 'Zone_Description', 'TSID', 'EMPL_NM', 'Zone_Leader_Name', 'JOB_TITLE_CODE_2', 'JOB_TITLE_NM_2', 'MGT_RLTN_BEG_DATE', 'MGT_RLTN_END_DATE', 'Days_in_RR', 'CNTRCT_HIRE_STATUS', 'Recode_CNTRCT_HIRE_STATUS', 'CNTRCT_TERMIN_STS', 'Term_ASD_Tenure', 'Term_ASD_w_BI_Tenure', 'Term_Transfer_Status', 'ADJ_SVC_DT', 'EMPL_SEX_CODE', 'EMPL_BIRTH_DATE', 'Contract_Hire_Age', 'Contract_Hire_Age_Group', 'S6_LIC_STS_CDE', 'S7_LIC_STS_CDE', 'S63_LIC_STS_CDE', 'S65_LIC_STS_CDE', 'S66_LIC_STS_CDE', 'INVS_ADVR_REPR_IND', 'S7_65_66', 'PREV_TSID', 'PREV_JOB', 'PREV_END_DATE', 'DIFFERENCE', 'FUTURE_TSID', 'FUTURE_JOB', 'FUTURE_BEG_DATE', 'FUTURE_DIFFERENCE', 'Within 17 weeks', 'Allego_perTSid_R3.trained_sts', 'Year', 'Within 17 weeks - PY', 'Year-TSID', 'Sale_Hier_Dim.Employee Status Type Description', 'Sale_Hier_Dim.Job Type Code', 'Market Leader Info.RFO_ZONE_NM', 'Market Leader Info.MARKET_LEADER_NAME', 'Attendance Data.Attendance Percentage', 'Date Exceptions.Adj Start Date'}),  #'Reordered Columns' = Table.ReorderColumns(#'Kept Errors', {'Row Number', 'JOIN VALUE', 'TAG_MVP_Mkt', 'Year IN', 'Year OUT', 'Hire Sts', 'Term Sts', 'Division_ID', 'Division_Description', 'RFO_ID', 'RFO_Description', 'MVP_ID', 'Zone_ID', 'Zone_Description', 'TSID', 'EMPL_NM', 'Zone_Leader_Name', 'JOB_TITLE_CODE_2', 'JOB_TITLE_NM_2', 'MGT_RLTN_BEG_DATE', 'MGT_RLTN_END_DATE', 'Days_in_RR', 'CNTRCT_HIRE_STATUS', 'Recode_CNTRCT_HIRE_STATUS', 'CNTRCT_TERMIN_STS', 'Term_ASD_Tenure', 'Term_ASD_w_BI_Tenure', 'Term_Transfer_Status', 'ADJ_SVC_DT', 'EMPL_SEX_CODE', 'EMPL_BIRTH_DATE', 'Contract_Hire_Age', 'Contract_Hire_Age_Group', 'S6_LIC_STS_CDE', 'S7_LIC_STS_CDE', 'S63_LIC_STS_CDE', 'S65_LIC_STS_CDE', 'S66_LIC_STS_CDE', 'INVS_ADVR_REPR_IND', 'S7_65_66', 'PREV_TSID', 'PREV_JOB', 'PREV_END_DATE', 'DIFFERENCE', 'FUTURE_TSID', 'FUTURE_JOB', 'FUTURE_BEG_DATE', 'FUTURE_DIFFERENCE', 'Within 17 weeks', 'Allego_perTSid_R3.trained_sts', 'Year', 'Within 17 weeks - PY', 'Year-TSID', 'Sale_Hier_Dim.Employee Status Type Description', 'Sale_Hier_Dim.Job Type Code', 'Market Leader Info.RFO_ZONE_NM', 'Market Leader Info.MARKET_LEADER_NAME', 'Attendance Data.Attendance Percentage', 'Date Exceptions.Adj Start Date'}),    #'Attendance Data Attendance Percentage' = #'Reordered Columns'{0}[Attendance Data.Attendance Percentage]in  #'Attendance Data Attendance Percentage'"},{"name":"Errors in RFO_PENDING_DETAIL","expression":"letSource = RFO_PENDING_DETAIL,  #'Detected Type Mismatches' = let    tableWithOnlyPrimitiveTypes = Table.SelectColumns(Source, Table.ColumnsOfType(Source, {type nullable number, type nullable text, type nullable logical, type nullable date, type nullable datetime, type nullable datetimezone, type nullable time, type nullable duration})),    recordTypeFields = Type.RecordFields(Type.TableRow(Value.Type(tableWithOnlyPrimitiveTypes))),    fieldNames = Record.FieldNames(recordTypeFields),    fieldTypes = List.Transform(Record.ToList(recordTypeFields), each [Type]),    pairs = List.Transform(List.Positions(fieldNames), (i) =\u003e {fieldNames{i}, (v) =\u003e if v = null or Value.Is(v, fieldTypes{i}) then v else error [Message = 'The type of the value does not match the type of the column.', Detail = v], fieldTypes{i}})in    Table.TransformColumns(Source, pairs),  #'Added Index' = Table.AddIndexColumn(#'Detected Type Mismatches', 'Row Number' ,1),  #'Kept Errors' = Table.SelectRowsWithErrors(#'Added Index', {'RFOCode', 'RFOName', 'Zone', 'Zone_Name', 'ORZN_ZONE_CDE', 'ORZN_SUB_DEPT_CDE', 'ORZN_UNIT_DSCR', 'MVP_NAME', 'CORPORATEEMPLOYEEID', 'AgentFullName', 'PRODUCT', 'LOB', 'CIFOwnerFullName', 'MBR_TYP_CDE', 'BenefitContractNumber', 'ESTIMATEDSALESCREDITAMT', 'Benefit_Amount', 'Days_Pending', 'TRANSRECEIVEDT', 'TransDesc', 'CTRC_PND_CATG_EXCD', 'Count'}),  #'Reordered Columns' = Table.ReorderColumns(#'Kept Errors', {'Row Number', 'RFOCode', 'RFOName', 'Zone', 'Zone_Name', 'ORZN_ZONE_CDE', 'ORZN_SUB_DEPT_CDE', 'ORZN_UNIT_DSCR', 'MVP_NAME', 'CORPORATEEMPLOYEEID', 'AgentFullName', 'PRODUCT', 'LOB', 'CIFOwnerFullName', 'MBR_TYP_CDE', 'BenefitContractNumber', 'ESTIMATEDSALESCREDITAMT', 'Benefit_Amount', 'Days_Pending', 'TRANSRECEIVEDT', 'TransDesc', 'CTRC_PND_CATG_EXCD', 'Count'})in  #'Reordered Columns'"}],"configuredBy":"Brian.Houghton@Thrivent.com","configuredById":"c23084c3-3890-4d73-8268-c18558782893","isEffectiveIdentityRequired":false,"isEffectiveIdentityRolesRequired":false,"refreshSchedule":{"days":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"times":["09:00"],"enabled":true,"localTimeZoneId":"Central Standard Time","notifyOption":"NoNotification"},"targetStorageMode":"Abf","createdDate":"2024-03-27T20:53:11.287","contentProviderType":"PbixInImportMode"},{"id":"3e323c60-3245-44cc-882a-fed92aa9a21d","name":"Opportunity Analysis Tool (OAT) Report","tables":[{"name":"Producer_Snowflake","isHidden":false,"storageMode":"Import","columns":[{"name":"EMP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMP_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LST_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FRST_NM","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"JOB_TYP_DSCR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TAG Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Advisor Group","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ZONE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MARKET","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"FILTER_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MARKET_LEADERS","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP Leader","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Market with Leader","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"MVP with Leader","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Experience Advisor Sort.Sort","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"TAG Info","dataType":"String","isHidden":false,"expression":"  'Thrivent Advisor Group: ' \u0026 \u0027Producer_Snowflake\u0027[TAG] \u0026 ' - ' \u0026 \u0027Producer_Snowflake\u0027[TAG only Name]","columnType":"Calculated"},{"name":"Team Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team Purpose Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Employee Team Role Code","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team Members","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team Member Names","dataType":"String","isHidden":false,"expression":"'\u003cb\u003e' \u0026 'Team Advisors - ' \u0026 '\u003c/b\u003e' \u0026 \u0027Producer_Snowflake\u0027[Team Members]","columnType":"Calculated"},{"name":"Team Name Display","dataType":"String","isHidden":false,"expression":"'Team ' \u0026 \u0027Producer_Snowflake\u0027[Team Identifier] \u0026 ' - ' \u0026 \u0027Producer_Snowflake\u0027[Team Name]","columnType":"Calculated"},{"name":"TAG only Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Advisor Group Full Name","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[{"name":"DisplayFilteredProducer","expression":"  VAR __DISTINCT_VALUES_COUNT = DISTINCTCOUNT(\u0027Producer_Snowflake\u0027[EMP_NM])VAR __MAX_VALUES_TO_SHOW = 1RETURN\\tIF(\\t\\t__DISTINCT_VALUES_COUNT \u003e __MAX_VALUES_TO_SHOW,\\t\\t' ',\\t\\tCONCATENATEX(\\t\\t\\tVALUES(\u0027Producer_Snowflake\u0027[EMP_NM]),\\t\\t\\t\u0027Producer_Snowflake\u0027[EMP_NM],\\t\\t\\t', ',\\t\\t\\t\u0027Producer_Snowflake\u0027[EMP_NM],\\t\\t\\tASC\\t\\t)\\t)","isHidden":false},{"name":"EmployeeNmFiltered","expression":"IF(ISFILTERED(Producer_Snowflake[EMP_NM]),1,0)","isHidden":false},{"name":"ShowHideAdvisorSelect","expression":"IF([EmployeeNmFiltered] = 1, '#1C00ff00','White')","isHidden":false},{"name":"DisplayFilteredTeam","expression":"-- var teamnm = IF([TeamNmFiltered]=1,VALUES(Teams[TEAM_NM]),' ')--var teamnm = IF([TeamNmFiltered]=1,VALUES(Producer_Snowflake[Team Name]),' ')var teamnm = IF([TeamNmFiltered]=1,VALUES(Producer_Snowflake[Team Name Display]),' ') return IF(ISBLANK(teamnm),' ', teamnm)","isHidden":false},{"name":"TeamNmFiltered","expression":"IF(ISFILTERED(Producer_Snowflake[Team Name]),1,0)--IF(ISFILTERED(Teams[TEAM_NM]),1,0)","isHidden":false},{"name":"DisplayFilteredTeamMembers","expression":"  var team_mbrs = IF([TeamNmFiltered]=1,VALUES(Producer_Snowflake[Team Member Names]),' ')returnIF(ISBLANK(team_mbrs),' ', team_mbrs)","isHidden":false},{"name":"Team Advisor Namexx","expression":"  var _AdvisorName =     CALCULATE(IF(\u0027Producer_Snowflake\u0027[TeamNmFiltered] = 1, SELECTEDVALUE(\u0027ALLMBRS\u0027[Advisor Name]), ' '))Return_AdvisorName","isHidden":false},{"name":"DisplayFilteredTAGInfo","expression":"  VAR __DISTINCT_VALUES_COUNT = DISTINCTCOUNT(\u0027Producer_Snowflake\u0027[EMP_NM])VAR __MAX_VALUES_TO_SHOW = 1RETURN\\tIF(\\t\\t__DISTINCT_VALUES_COUNT \u003e __MAX_VALUES_TO_SHOW,\\t\\t' ',\\t\\tCONCATENATEX(\\t\\t\\tVALUES(\u0027Producer_Snowflake\u0027[TAG Info]),\\t\\t\\t\u0027Producer_Snowflake\u0027[TAG Info],\\t\\t\\t', ',\\t\\t\\t\u0027Producer_Snowflake\u0027[TAG Info],\\t\\t\\tASC\\t\\t)\\t)","isHidden":false}],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'select distinct #(lf)       a.''Employee Identifier'' as EMP_ID,#(lf)       case when a.''Organization Department Code'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027) and substring(a.''Employee Identifier'',1,2) = \u0027DP\u0027 then \u0027TAG 0383-Virtual Advice Orphans\u0027#(lf)           when a.''Organization Department Code'' NOT IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027) and substring(a.''Employee Identifier'',1,2) = \u0027DP\u0027 then \u0027TAG \u0027|| a.''Organization Department Code''||\u0027-\u0027||aa.''Department Name''||\u0027 Orphans\u0027#(lf)           when a.''Employee Name'' = \u0027Johnson,Christopher\u0027 then a.''Last Name''||\u0027,\u0027||a.''Nick Name''#(lf)         else a.''Employee Name''#(lf)       end as EMP_NM,  #(lf)       a.''Last Name'' as LST_NM,#(lf)       case when a.''Nick Name'' IN (\u0027 \u0027) then a.''First Name''#(lf)         else a.''Nick Name''#(lf)       end as FRST_NM, #(lf)       aa.''Job Type Code'' as JOB_TYP_CDE,#(lf)       aa.''Job Type Description'' as JOB_TYP_DSCR,#(lf)       case when a.''Organization Department Code'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027) then \u00270383\u0027#(lf)         else a.''Organization Department Code''#(lf)       end as TAG,#(lf)       case when aa.''Department Identifier'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027) then \u0027Virtual Advice\u0027#(lf)         else aa.''Department Name''#(lf)       end as ''TAG Name'',#(lf)       case when aa.''Department Identifier'' IN (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027) then \u00270383-Virtual Advice\u0027#(lf)         else a.''Organization Department Code''||\u0027-\u0027||aa.''Department Name''#(lf)       end as ''Advisor Group Full Name'',#(lf)       (substr(b.''Organization Zone Code'',6,2))   AS ZONE,#(lf)       b.''Organization Zone Code'' as Market,#(lf)       case when substr(b.''Organization Zone Code'',9,2) = \u002798\u0027 then \u0027NPG - market 98\u0027#(lf)            when substr(b.''Organization Zone Code'',9,2) = \u002799\u0027 then \u0027NPG - market 99\u0027#(lf)            when substr(b.''Organization Zone Code'',9,2) = \u002759\u0027 then \u0027PMC - market 59\u0027#(lf)            when substr(b.''Organization Zone Code'',9,2) = \u002701\u0027 then \u0027PMC - market 01\u0027#(lf)            when substr(b.''Organization Zone Code'',9,2) = \u002769\u0027 then \u0027GPA - market 69\u0027#(lf)            when Substr(b.''Organization Zone Code'',9,2) = \u002779\u0027 then \u0027GPD - market 79\u0027#(lf)            when substr(b.''Organization Zone Code'',9,2) = \u002789\u0027 then \u0027PPC - market 89\u0027#(lf)       end as Filter_Ind, #(lf)       aa.''Sub Department Identifier'' as MVP_ID,#(lf)       zz4.market_leaders,#(lf)       zz3.''MVP Leader'',#(lf)       zzz.''Team Identifier'',#(lf)       zzz.''Team Name'',#(lf)       zzz.''Team Purpose Code'',#(lf)       zzz.''Employee Team Role Code''#(lf)#(lf)       #(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' a inner join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' as aa#(lf)    on ((a.''Employee Identifier''=aa.''Source System Key Text'' and aa.''Current Row Indicator'' = \u0027Y\u0027) or  #(lf)        (\u0027DP0\u0027||aa.''Source System Key Text'' =  a.''Employee Identifier'' and a.''Current Row Indicator'' = \u0027Y\u0027 and aa.''Current Row Indicator'' = \u0027Y\u0027)) left join#(lf)        ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' b #(lf)    on (a.''Employee Identifier''= b.''Sales Hierarchy Identifier'') left join#(lf)#(lf)#(lf)       (select distinct a2.''Organization Department Code'' as RFO_CDE,#(lf)                        a2.''Organization Sub Department Code'' as MVP_ID,#(lf)                        cc.''Organization Department Description'',#(lf)                        case when cc.''Employee Name'' is null then \u0027Vacant\u0027#(lf)                          else cc.''Employee Name''#(lf)                        end as ''MVP Leader''    #(lf)          from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' a2  left join#(lf)               (Select Distinct aa.''Organization Sub Department Code'',#(lf)                                aa.''Organization Department Description'',#(lf)                                bb.''Employee Identifier'',#(lf)                                bb.''Employee Name'' #(lf)                  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' as aa left join#(lf)                       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' as bb#(lf)                    on aa.''Sales Hierarchy Identifier''=bb.''Employee Identifier''  #(lf)                 where aa.''Current Row Indicator'' = \u0027Y\u0027#(lf)                   and bb.''Employee Status Type Code'' = \u0027A\u0027#(lf)                   and bb.''Current Row Indicator'' = \u0027Y\u0027#(lf)                   and aa.''Effective End Date'' = \u00279999-12-31\u0027#(lf)                   and bb.''Job Type Code'' = \u0027001001\u0027#(lf)                 order by aa.''Organization Sub Department Code'') cc#(lf)             on a2.''Organization Sub Department Code''=cc.''Organization Sub Department Code''  #(lf)          where a2.''Current Row Indicator'' = \u0027Y\u0027#(lf)            and a2.''Effective End Date'' = \u00279999-12-31\u0027#(lf)            and a2.''Organization Zone Code'' \u003c\u003e \u0027UKWN\u0027#(lf)           order by a2.''Organization Sub Department Code''  ) as zz3#(lf)  on aa.''Sub Department Identifier''= zz3.''MVP_ID'' left join#(lf)   #(lf)    #(lf)     (SELECT DISTINCT a4.''Organization Department Code'' as RFO_CDE,#(lf)                      a4.''Organization Zone Code'' as TAG_ZONE_NM, #(lf)                      (substring(a4.''Organization Zone Code'',6,5)) as Market_ID,#(lf)                      case when t4.''Employee Name'' is null then \u0027Vacant\u0027#(lf)                        else t4.''Employee Name''#(lf)                      end as Market_Leaders#(lf)#(lf)        from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' a4 left join #(lf)             (select distinct aa4.''Organization Zone Code'',#(lf)                              bb4.''Employee Name''  #(lf)#(lf)                from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' aa4 left join #(lf)                     ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' bb4#(lf)                  on aa4.''Sales Hierarchy Identifier''=bb4.''Employee Identifier''#(lf)               where aa4.''Current Row Indicator'' = \u0027Y\u0027      #(lf)                 and bb4.''Employee Status Type Code'' in (\u0027A\u0027)#(lf)                 and aa4.''Effective End Date'' = \u00279999-12-31\u0027#(lf)                 and bb4.''Current Row Indicator'' = \u0027Y\u0027#(lf)                 and aa4.''Effective End Date'' = \u00279999-12-31\u0027#(lf)                 and (bb4.''Job Type Code'' in (\u0027001002\u0027,\u0027001003\u0027,\u0027001007\u0027) or #(lf)                      bb4.''Employee Identifier'' in (\u0027TS60295\u0027,\u0027TS49431\u0027,\u0027TS22024\u0027,\u0027TS26677\u0027))#(lf)                 and bb4.''Employee Identifier'' not in (\u0027TS62904\u0027,\u0027TS67022\u0027,\u0027TS74827\u0027,\u0027TS73067\u0027,\u0027TS77319\u0027,\u0027TS73124\u0027)) t4 #(lf)#(lf)          on a4.''Organization Zone Code'' = t4.''Organization Zone Code''#(lf)       where a4.''Current Row Indicator'' = \u0027Y\u0027#(lf)         and a4.''Effective End Date'' = \u00279999-12-31\u0027#(lf)         and substring(a4.''Organization Zone Code'',6,2) \u003c\u003e \u002700\u0027#(lf)         and a4.''Organization Department Code'' \u003c\u003e \u0027UKWN\u0027#(lf)       order by a4.''Organization Zone Code'') zz4#(lf)     #(lf)   on  b.''Organization Zone Code''= zz4.''TAG_ZONE_NM'' left join#(lf)   (select a.''Employee Identifier'',#(lf)        b.''Team Identifier'',#(lf)        b.''Team Name'',#(lf)        b.''Team Purpose Code'',#(lf)        case when a.''Employee Team Role Code'' = \u0027AFLT\u0027 then \u0027Affiliate\u0027#(lf)             when a.''Employee Team Role Code'' = \u0027LEAD\u0027 then \u0027Team Leader\u0027#(lf)             when a.''Employee Team Role Code'' = \u0027MBR\u0027  then \u0027Team Member\u0027#(lf)          else \u0027 \u0027#(lf)        end as ''Employee Team Role Code'',#(lf)        A.''Effective Date''#(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Employee Team Organization Relationship Current Dimension''  a inner join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Team Organization Current Dimension'' b#(lf)    on (a.''Team Identifier Surrogate Key'' = b.''Team Identifier Surrogate Key'')  inner join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' c#(lf)    on (a.''Employee Identifier'' = c.''Employee Identifier'')   #(lf)    #(lf) where b.''Effective Status Code'' = \u0027A\u0027#(lf)   and c.''Employee Status Type Code'' = \u0027A\u0027#(lf)   and c.''Current Row Indicator'' = \u0027Y\u0027#(lf)   and a.''Team Member Action Code'' \u003c\u003e \u0027DROP\u0027#(lf)   and b.''Team Purpose Code'' NOT in (\u0027COAC\u0027,\u0027ENSB\u0027) #(lf)   and a.''Effective Date'' = (SELECT MAX(aa.''Effective Date'')#(lf)                                FROM ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Employee Team Organization Relationship Current Dimension''  aa inner join#(lf)                                     ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Team Organization Current Dimension'' bb#(lf)                                  on (aa.''Team Identifier Surrogate Key'' = bb.''Team Identifier Surrogate Key'' and a.''Employee Identifier''= aa.''Employee Identifier'') INNER JOIN#(lf)                                     ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' cc#(lf)                                  on (aa.''Employee Identifier''= cc.''Employee Identifier'')#(lf)#(tab)                           WHERE bb.''Effective Status Code'' = \u0027A\u0027#(lf)                                 AND cc.''Employee Status Type Code'' = \u0027A\u0027  #(lf)                                 and cc.''Current Row Indicator'' = \u0027Y\u0027#(lf)                                 and aa.''Team Member Action Code'' \u003c\u003e \u0027DROP\u0027#(lf)                                 and bb.''Team Purpose Code'' NOT in (\u0027COAC\u0027,\u0027ENSB\u0027) #(lf)                                )#(lf)  order by a.''Employee Identifier'') as zzz#(lf)  #(lf)   on a.''Employee Identifier'' = zzz.''Employee Identifier'' #(lf)  #(lf) where a.''Employee Status Type Code'' IN (\u0027A\u0027,\u0027I\u0027,\u0027L\u0027)#(lf)   and (aa.''Job Family Code'' LIKE \u0027FLD%\u0027 OR#(lf)        aa.''Job Family Code'' =\u0027SALES\u0027 OR#(lf)        aa.''TF Job Class Code'' =\u0027FAC\u0027 or#(lf)        aa.''Source Sub System Text'' = \u0027ORGANIZATION_UNIT\u0027)#(lf)   and a.''Termination Date'' is NULL #(lf)   and a.''Organization Department Code'' not in (\u00277186\u0027,\u00270810\u0027,\u00270529\u0027,\u00270165\u0027,\u00270240\u0027,\u00270365\u0027,\u00270386\u0027,\u00270410\u0027,\u00270475\u0027,\u00270496\u0027,\u00270715\u0027)                                      #(lf)   and aa.''Job Type Code'' not in (\u0027001356\u0027,\u0027001500\u0027,\u0027001505\u0027,\u0027001506\u0027,\u0027001512\u0027,\u0027001658\u0027,\u0027001705\u0027,\u0027001747\u0027,\u0027002598\u0027,\u0027006160\u0027,\u0027009011\u0027,\u0027009015\u0027,\u0027009016\u0027,\u0027009021\u0027)   #(lf)and b.''Effective End Date'' = \u00279999-12-31\u0027 #(lf)   and b.''Current Row Indicator'' = \u0027Y\u0027 #(lf)   and a.''Current Row Indicator'' = \u0027Y\u0027 #(lf)   #(lf)  order by a.''Employee Identifier''', null, [EnableFolding=true]),    #'Removed Duplicates' = Table.Distinct(Source, {'EMP_ID'}),    #'Added Custom8' = Table.AddColumn(#'Removed Duplicates', 'Market with Leader', each [MARKET]\u0026' - '\u0026[MARKET_LEADERS]),    #'Added Custom9' = Table.AddColumn(#'Added Custom8', 'MVP with Leader', each [MVP_ID] \u0026 ' - ' \u0026 [MVP Leader]),    #'Replaced Value' = Table.ReplaceValue(#'Added Custom9',null,'',Replacer.ReplaceValue,{'FILTER_IND'}),    #'Merged Queries' = Table.NestedJoin(#'Replaced Value', {'FILTER_IND'}, #'Experience Advisor Sort', {'Filter_Ind'}, 'Experience Advisor Sort', JoinKind.LeftOuter),    #'Expanded Experience Advisor Sort' = Table.ExpandTableColumn(#'Merged Queries', 'Experience Advisor Sort', {'Sort'}, {'Experience Advisor Sort.Sort'}),    #'Merged Queries1' = Table.NestedJoin(#'Expanded Experience Advisor Sort', {'Team Identifier'}, TeamMembers, {'Team Identifier'}, 'TeamMembers', JoinKind.LeftOuter),    #'Expanded TeamMembers' = Table.ExpandTableColumn(#'Merged Queries1', 'TeamMembers', {'Team Members'}, {'Team Members'}),    #'Added Custom' = Table.AddColumn(#'Expanded TeamMembers', 'TAG only Name', each if [TAG] = '0001' then 'Appleton Home Office' else if [TAG] = '0115' then 'Northeast' else if [TAG] = '0190' then 'Southeast'else if [TAG] = '0283' then 'North Star'else if [TAG] = '0291' then 'Heartland'else if [TAG] = '0361' then 'Great Lakes'else if [TAG] = '0383' then 'Virtual Advice'else if [TAG] = '0384' then 'South Central'else if [TAG] = '0435' then 'Midwest Rockies'else if [TAG] = '0525' then 'West'else [TAG Name]),    #'Advisor Group' = Table.AddColumn(#'Added Custom', 'Advisor Group', each Text.BeforeDelimiter([Advisor Group Full Name],'Advisor Group'))in    #'Advisor Group'"}]},{"name":"Role Level Security","isHidden":false,"storageMode":"Import","columns":[{"name":"EMPLOYEE_TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"EMPLOYEE_EMAIL","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"REPORT_TO_EMAIL","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"REPORT_TO_TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"WRKR_RPT_HIER_SRC_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"DTL_DATA_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SFRC_TEAM_PRPS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RSA_IND","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"RSA_TEAM_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SFRC_TEAM_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CRET_USER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CRET_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"LST_UPDT_USER_ID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"LST_UPDT_TMSP","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Department Number","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"AD Group","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = PowerBI.Dataflows(null),    #'f7efdfeb-73c5-4a9b-ab78-f9370190eded' = Source{[workspaceId='f7efdfeb-73c5-4a9b-ab78-f9370190eded']}[Data],    #'a9b06e96-a67b-4f28-b939-3e1ca1047bd2' = #'f7efdfeb-73c5-4a9b-ab78-f9370190eded'{[dataflowId='a9b06e96-a67b-4f28-b939-3e1ca1047bd2']}[Data],    #'Role Level Security1' = #'a9b06e96-a67b-4f28-b939-3e1ca1047bd2'{[entity='Role Level Security']}[Data],    #'Filtered Rows' = Table.SelectRows(#'Role Level Security1',  each ([AD Group] = 'PBI_FLD_RPTG_COE' or [AD Group] = 'PBI_FLD_RPTG_FR' or [AD Group] = 'PBI_FLD_RPTG_HO' or [AD Group] = 'PBI_FLD_RPTG_LDR' or [AD Group] = 'PBI_FLD_RPTG_LDRSTF' or [AD Group] = 'PBI_FLD_RPTG_RFOSTF' or [AD Group] = 'PBI_FLD_RPTG_TFGT')),    #'Removed Columns' = Table.RemoveColumns(#'Filtered Rows',{'EMPLOYEE_SK', 'REPORT_TO_SK', 'Department Name', 'HO_Email'}),    #'Add Custom' = Table.AddColumn(#'Removed Columns', 'Custom', each if ([AD Group] = 'PBI_FLD_RPTG_HO' and ([EMPLOYEE_TSID]=[REPORT_TO_TSID])) then 1 else if ([AD Group] = 'PBI_FLD_RPTG_HO' and ([EMPLOYEE_TSID] \u003c\u003e [REPORT_TO_TSID])) then 0else if [AD Group] \u003c\u003e 'PBI_FLD_RPTG_HO' then 1 else 2),    #'Filtered Rows2' = Table.SelectRows(#'Add Custom', each ([Custom] = 1)),    #'Removed Columns1' = Table.RemoveColumns(#'Filtered Rows2',{'Custom'}),    #'Replaced Value' = Table.ReplaceValue(#'Removed Columns1','115','0115',Replacer.ReplaceValue,{'Department Number'}),    #'Replaced Value1' = Table.ReplaceValue(#'Replaced Value','291','0291',Replacer.ReplaceValue,{'Department Number'}),    #'Replaced Value2' = Table.ReplaceValue(#'Replaced Value1','361','0361',Replacer.ReplaceValue,{'Department Number'}),    #'Replaced Value3' = Table.ReplaceValue(#'Replaced Value2','435','0435',Replacer.ReplaceValue,{'Department Number'}),    #'Replaced Value4' = Table.ReplaceValue(#'Replaced Value3','525','0525',Replacer.ReplaceValue,{'Department Number'})in    #'Replaced Value4'"}]},{"name":"Change Log","isHidden":false,"storageMode":"Import","columns":[{"name":"Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Version","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Author","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Description","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//SHARED//Public//DI and BI//Field Reporting//Change Log//Change Log.xlsx'), null, true),    OATRpt_Sheet = Source{[Item='OATRpt',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(OATRpt_Sheet, [PromoteAllScalars=true]),    #'Changed Type' = Table.TransformColumnTypes(#'Promoted Headers',{{'Date', type date}, {'Version', type number}, {'Author', type text}, {'Description', type text}}),    #'Replaced Value' = Table.ReplaceValue(#'Changed Type',3.1,3.1,Replacer.ReplaceValue,{'Version'})in    #'Replaced Value'"}]},{"name":"ALLMBRS","isHidden":false,"storageMode":"Import","columns":[{"name":"Client Name","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Dain","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CIFID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"GRPIDNBR","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"MBRTYPE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"AGE","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"FV","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"HHSA","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"HHTOTCTRCS","dataType":"Int64","isHidden":false,"description":"Does not include HHIMMOWN, use Total Contracts instead","columnType":"Data"},{"name":"HHVAOWN","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"HHFAOWN","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"HHSOOWN","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"HHTERMOWN","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"HHTRADOWN","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"HHULOWN","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"HHVULOWN","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"HHLTCOWN","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"HHDIOWN","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"HHMSOWN","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"HHHAOWN","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"HHMFOWN","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"HHBANKOWN","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Last Purchase Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"ORPHAN","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"HHTOTPREM","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"CITY","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"STATE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ZIP5","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"HOH_IND","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Client Service Group","dataType":"String","isHidden":false,"expression":"RELATED(\u0027ClientServiceGroup\u0027[SERVICEGROUP])","columnType":"Calculated"},{"name":"Market Segment","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Privacy","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Advisor Name","dataType":"String","isHidden":false,"expression":"RELATED(\u0027Producer_Snowflake\u0027[EMP_NM])","columnType":"Calculated"},{"name":"Total AUM (with Brkg)","dataType":"Int64","isHidden":false,"expression":"\u0027ALLMBRS\u0027[HHTOTAUM] + \u0027ALLMBRS\u0027[HHTOTCV] + \u0027ALLMBRS\u0027[HHNPBRKGAUA] +0","columnType":"Calculated"},{"name":"HHIMMOWN","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"HHWRAPOWN","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"HHNP_BRKGOWN","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"HHNPBRKGAUA","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"HHNP_OTHRINVST","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Health Owned","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Annuity Owned","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Life Owned","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"MF Owned","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Bank Owned","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"HHMFOWNXX","dataType":"Int64","isHidden":false,"description":"Total MF without including Brokerage total counts","columnType":"Data"},{"name":"Total Contracts","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"HHTRSTAUA","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"TARGET","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"HHETRS_ASSETS","dataType":"Int64","isHidden":false,"description":"This column is the sum of PROPASSETS, TOTWRAPAUM, TOTTRSTAUA and NP_BRKGAUA","columnType":"Data"},{"name":"HHPROPASSETS","dataType":"Int64","isHidden":false,"description":"Household PROPASSETS which is the sum of NETASSET and BNKDEPSNETASSETS is the sum of TOTAUM \u0026 TOTCV","columnType":"Data"},{"name":"Total AUA with Trust","dataType":"Int64","isHidden":false,"description":"Total Wrap AUM + Total Trust AUA","expression":"\u0027ALLMBRS\u0027[HHAUA] +0","columnType":"Calculated"},{"name":"HHAUA","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"HHWRAPAUM","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"HHTOTAUM","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Total AUM \u0026 AUA","dataType":"String","isHidden":false,"expression":"\u0027ALLMBRS\u0027[Total AUM (with Brkg)] + \u0027ALLMBRS\u0027[Total AUA with Trust] ","columnType":"Calculated"},{"name":"HHTOTCV","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"HHBNKDEPS","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"DP_SignDT","dataType":"String","isHidden":false,"expression":" var _dt = RELATED(SVC_AGMT_CURR[SIGN_DATE]) var _PrimAdvisor = RELATED(SVC_AGMT_CURR[PRIMARY_ADVISOR]) var _chk = IF(_PrimAdvisor=\u0027ALLMBRS\u0027[TSID],1, 0) var _blank = blank()RETURNIF(_chk =1, _dt,_blank)","columnType":"Calculated"},{"name":"YTD Total Grid Revenue","dataType":"Int64","isHidden":false,"expression":"  var _sales = RELATED(\u0027Sales\u0027[Sales_CY])RETURNIF(ISBLANK(_sales),0,_sales)  ","columnType":"Calculated"},{"name":"M12 Total Grid Revenue","dataType":"Int64","isHidden":false,"expression":" var _sales = RELATED(\u0027Sales\u0027[M12 Sales])RETURNIF(ISBLANK(_sales),0,_sales) ","columnType":"Calculated"},{"name":"FYLH Total Grid Revenue Last 5yrs","dataType":"Int64","isHidden":false,"expression":"  var _sales = RELATED(\u0027Sales\u0027[Sales_FYLH_5Yrs])RETURNIF(ISBLANK(_sales),0,_sales)  ","columnType":"Calculated"},{"name":"M12 FYLH Total Grid Revenue","dataType":"Int64","isHidden":false,"expression":"  var _sales = RELATED(\u0027Sales\u0027[M12 FYLH Sales])RETURNIF(ISBLANK(_sales),0,_sales)","columnType":"Calculated"},{"name":"Total Grid Revenue Last 5yrs","dataType":"Int64","isHidden":false,"expression":"  var _sales = RELATED(\u0027Sales\u0027[Sales_5yrs])RETURNIF(ISBLANK(_sales),0,_sales)  ","columnType":"Calculated"},{"name":"YTD FYLH Total Grid Revenue","dataType":"Int64","isHidden":false,"expression":"  var _sales = RELATED(\u0027Sales\u0027[Sales_FYLH_CY])RETURNIF(ISBLANK(_sales),0,_sales)","columnType":"Calculated"},{"name":"CIFID_TXT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"NEWMONEY_AMT","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Client Name \u0026 CIF ID","dataType":"String","isHidden":false,"expression":"\u0027ALLMBRS\u0027[CIFID] \u0026 ' - ' \u0026  trim(\u0027ALLMBRS\u0027[Client Name]) ","columnType":"Calculated"},{"name":"Most recent/future Appointment Date","dataType":"String","isHidden":false,"expression":"RELATED(Appointments[Appointment Date])","columnType":"Calculated"},{"name":"Future Appt Indicator","dataType":"String","isHidden":false,"expression":"  var _dt = \u0027ALLMBRS\u0027[Most recent/future Appointment Date]  var _chk = if(_dt\u003e NOW(),1,0)RETURNIF(ISBLANK(_chk),0,_chk) ","columnType":"Calculated"},{"name":"Future Appt Filter","dataType":"String","isHidden":false,"expression":"  var _ind = \u0027ALLMBRS\u0027[Future Appt Indicator]  var _chk = if(_ind = 1, 'Yes', 'No')RETURNIF(ISBLANK(_chk),'No',_chk)  ","columnType":"Calculated"}],"measures":[{"name":"Total Households Display","expression":"  var _total = CALCULATE(distinctcount(ALLMBRS[GRPIDNBR]),                  ALLMBRS[GRPIDNBR] \u003e 0 ) Return'Total Households: ' \u0026 FORMAT(IF(ISBLANK(_total),0,_total),'###,###')","isHidden":false},{"name":"Team Advisor Name","expression":"  var _TeamFilter_chk = [TeamNmFiltered]  var _AdvisorName = SELECTEDVALUE(\u0027ALLMBRS\u0027[Advisor Name])ReturnIF(_TeamFilter_chk = 1, _AdvisorName, IF(_TeamFilter_chk = 0, ' '))/*Adopting Advisors = var _check = CALCULATE(DISTINCTCOUNT(\u0027Producer_Snowflake\u0027[EMP_ID]))  var _total = CALCULATE(DISTINCTCOUNT(\u0027Producer_Snowflake\u0027[EMP_ID]), \u0027Producer_Snowflake\u0027[RULE FA] = 'Y')ReturnIF(_check \u003e 0, IF(ISBLANK(_total),0,_total),BLANK()) */","isHidden":false},{"name":"Total Contracts Display","expression":"  var _total = CALCULATE(sum(\u0027ALLMBRS_Product Totals\u0027[CTRC_TOTAL]),                  ALLMBRS[GRPIDNBR] \u003e 0 ) Return'Total Contracts: ' \u0026 FORMAT(IF(ISBLANK(_total),0,_total),'###,###')","isHidden":false},{"name":"Total AUA","expression":"  var _total = CALCULATE(sum(ALLMBRS[Total AUA with Trust]))ReturnIF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"Total AUM","expression":" var _total = CALCULATE(sum(ALLMBRS[HHTOTAUM]) + sum(\u0027ALLMBRS\u0027[HHTOTCV]) + sum(\u0027ALLMBRS\u0027[HHNPBRKGAUA]))  --var _total = CALCULATE(sum(ALLMBRS[Total AUM (with Brkg)]))ReturnIF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"Total Death Benefit","expression":"  var _total = CALCULATE(sum(ALLMBRS[HHSA]))ReturnIF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"Trust Display","expression":" --var _total = calculate(SUM(\u0027ALLMBRS\u0027[HHTRSTAUA])), --return --IF(_total = 0,'',_total)  IF(SUM(\u0027ALLMBRS\u0027[HHTRSTAUA]) \u003e 0, '', ' ')","isHidden":false},{"name":"ShowHideTrust","expression":"IF(SUM(\u0027ALLMBRS\u0027[HHTRSTAUA]) \u003e 0, '#1C00ff00','White')","isHidden":false},{"name":"Total Households","expression":"  var _total = CALCULATE(distinctcount(ALLMBRS[GRPIDNBR]),                  ALLMBRS[GRPIDNBR] \u003e 0 ) ReturnFORMAT(IF(ISBLANK(_total),0,_total),'###,###')","isHidden":false},{"name":"Total_Contracts","expression":"  var _total = CALCULATE(sum(\u0027ALLMBRS_Product Totals\u0027[CTRC_TOTAL]),                  ALLMBRS[GRPIDNBR] \u003e 0 ) ReturnFORMAT(IF(ISBLANK(_total),0,_total),'###,###')","isHidden":false},{"name":"Total AUM \u0026 AUA Display","expression":" var _total = CALCULATE(sum(ALLMBRS[Total AUM \u0026 AUA]))ReturnIF(ISBLANK(_total),0,_total)--FORMAT(IF(ISBLANK(_total),0,_total),'###,###')","isHidden":false},{"name":"Blank AUM","expression":"' '","isHidden":false},{"name":"Blank AUA","expression":"' '","isHidden":false}],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'select a.''Customer Identification Number'' as CIFID,#(lf)       a.''Customer Identification Number'' as CIFID_txt,#(lf)       a.''Customer Group Identification Number'' as GRPIDNBR,#(lf)       a.''Customer Mailing Last Name''|| \u0027, \u0027||''Customer Mailing First Name'' as ''Client Name'',#(lf)       a.''Customer Group Primary Client Indicator'' as HOH_IND,#(lf)       case when a.''Membership Type Code'' = \u0027BEN\u0027 then \u0027Benefit\u0027#(lf)            when a.''Membership Type Code'' = \u0027ASSOC\u0027 then \u0027Assoc\u0027#(lf)            when a.''Membership Type Code'' = \u0027JUV\u0027 then \u0027Youth\u0027#(lf)            when a.''Membership Type Code'' = \u0027NON\u0027 then \u0027Non\u0027#(lf)       end as MBRTYPE,#(lf)       a.''Customer Group Primary Client Age'' as AGE,#(lf)      -- a.''Life Stage Segment Description'' as LIFE_SGMT,#(lf)       case when a.''Life Stage Segment Description'' = \u0027AFFLUENT FAMILIES\u0027 then \u0027AFF FAMILY\u0027#(lf)            when a.''Life Stage Segment Description'' = \u0027AFFLUENT PRERETIRED\u0027 then \u0027AFF PRERET\u0027#(lf)            when a.''Life Stage Segment Description'' = \u0027AFFLUENT RETIRED COUPLES\u0027 then \u0027AFF RET CPL\u0027#(lf)            when a.''Life Stage Segment Description'' = \u0027AFFLUENT RETIRED SINGLES\u0027 then \u0027AFF RET SNGL\u0027#(lf)            when a.''Life Stage Segment Description'' = \u0027AFFLUENT SINGLES AND COUPLES\u0027 then \u0027AFF S\u0026C\u0027#(lf)            when a.''Life Stage Segment Description'' = \u0027AGE UNKNOWN\u0027 then \u0027AGE UNKNOWN\u0027#(lf)            when a.''Life Stage Segment Description'' = \u0027INSUFFICIENT INCOME\u0027 then \u0027LOW INCOME\u0027 #(lf)            when a.''Life Stage Segment Description'' = \u0027MIDDLE MARKET FAMILIES\u0027 then \u0027MM FAMILY\u0027 #(lf)            when a.''Life Stage Segment Description'' = \u0027MIDDLE MARKET PRERETIRED\u0027 then \u0027MM PRERET\u0027 #(lf)            when a.''Life Stage Segment Description'' = \u0027MIDDLE MARKET RETIRED COUPLES\u0027 then \u0027MM RET CPL\u0027 #(lf)            when a.''Life Stage Segment Description'' = \u0027MIDDLE MARKET RETIRED SINGLES\u0027 then \u0027MM RET SNGL\u0027 #(lf)            when a.''Life Stage Segment Description'' = \u0027MIDDLE MARKET SINGLES AND COUP\u0027 then \u0027MM S\u0026C\u0027#(lf)            when a.''Life Stage Segment Description'' = \u0027UNDER 22\u0027 then \u0027UNDER 22\u0027#(lf)              else \u0027UNKNOWN\u0027  #(lf)       end as ''Market Segment'',#(lf)       --a.''Target Market Segment Description'' as TRGT_SGMT,#(lf)       case when a.''Target Market Segment Description'' = \u0027FAMILES WITH KIDS\u0027 then \u0027Y-FK\u0027#(lf)            when a.''Target Market Segment Description'' = \u0027LOW INCOME WITH IPA\u0027 then \u0027N\u0027#(lf)            when a.''Target Market Segment Description'' = \u0027PRERETIRED\u0027 then \u0027Y-PR\u0027#(lf)            when a.''Target Market Segment Description'' = \u0027RETIRED\u0027 then \u0027Y-R\u0027#(lf)            when a.''Target Market Segment Description'' = \u0027SINGLES \u0026 COUPLES\u0027 then \u0027N\u0027#(lf)            when a.''Target Market Segment Description'' = \u0027VERY YOUNG\u0027 then \u0027N\u0027#(lf)              else \u0027N\u0027#(lf)        end as Target,      #(lf)   #(lf)#(lf)       #(lf)       #(lf)       case when a.''Future Value Index Description'' = \u0027GOLD\u0027 then \u0027Gold\u0027#(lf)            when a.''Future Value Index Description'' = \u0027SILVR\u0027 then \u0027Silver\u0027#(lf)            when a.''Future Value Index Description'' = \u0027BRNZE\u0027 then \u0027Bronze\u0027#(lf)              else \u0027 \u0027#(lf)       end as FV,#(lf)       --a.''Customer Group Total Proprietary Assets Under Management Amount'' as AUM,#(lf)       a.''Customer Group Total Thrivent Assets Under Advisement Amount'' as HHAUA,#(lf)       a.''Customer Group TIMI Managed Account Assets Under Advisement Amount'' as HHWRAPAUM,#(lf)       a.''Customer Group Total Proprietary And Non-Proprietary Assets Under Management and Advisement Amount'' as HHETRS_ASSETS,#(lf)       a.''Customer Group Thrivent Trust Assets Under Advisement Amount'' as HHTRSTAUA,#(lf)       case when a.''Customer Group Do Not Market By Mail Indicator'' = 1 then \u0027M\u0027 else \u0027\u0027#(lf)       end as DNM,#(lf)       case when a.''Customer Group Do Not Market By Email Indicator'' = 1 then \u0027E\u0027 else \u0027\u0027 #(lf)       end as DNE,#(lf)       case when a.''Customer Group Do Not Market By Phone Indicator'' = 1 then \u0027P\u0027 else \u0027\u0027 #(lf)       end as DNC,#(lf)       a.''Customer Group Total Proprietary Life Insurance Face Amount'' as HHSA,#(lf)       a.''Customer Group Total Proprietary and Non-Proprietary Contracts Own Count'' as HHTOTCTRCS,#(lf)       a.''Customer Group Proprietary And Non-Proprietary Variable Deferred Annuity Contracts Own Count'' as HHVAOWN,#(lf)       a.''Customer Group Proprietary And Non-Proprietary Fixed Deferred Annuity Contracts Own Count'' as HHFAOWN,#(lf)       a.''Customer Group Proprietary Settlement Option Contracts Own Count'' as HHSOOWN,#(lf)       a.''Customer Group Proprietary Immediate Annuity Contracts Own Count'' as HHIMMOWN,#(lf)       a.''Customer Group Proprietary And Non-Proprietary Term Life Contracts Own Count'' as HHTERMOWN,#(lf)       a.''Customer Group Proprietary And Non-Proprietary Whole Life Contracts Own Count'' as HHTRADOWN,#(lf)       a.''Customer Group Proprietary And Non-Proprietary Universal Life Contracts Own Count'' as HHULOWN,#(lf)       a.''Customer Group Proprietary And Non-Proprietary Variable Universal Life Contracts Own Count'' as HHVULOWN,#(lf)       a.''Customer Group Proprietary And Non-Proprietary Long Term Care Contracts Own Count'' as HHLTCOWN,#(lf)       a.''Customer Group Proprietary Disability Income Contracts Own Count'' as HHDIOWN,#(lf)       a.''Customer Group Proprietary And Non-Proprietary Medical Supplement Contracts Own Count'' as HHMSOWN,#(lf)       a.''Customer Group Proprietary And Non-Proprietary Health Contracts Own Count'' as HHHAOWN,#(lf)       a.''Customer Group Proprietary And Non-Proprietary Mutual Fund Accounts Own Count'' as HHMFOWN,#(lf)       a.''Customer Group Thrivent Bank Or Credit Union Accounts Own Count'' as HHBANKOWN,#(lf)       a.''Customer Group TIMI Managed Accounts Own Count'' as HHWRAPOWN,#(lf)      -- a.''Customer Group TIMI Managed Account Assets Under Advisement Amount'' as HHWRAPAUA,#(lf)      -- a.''Customer Group Total Proprietary And Non-Proprietary Assets Under Management and Advisement Amount'' as HHETRS_ASSETS,#(lf)       a.''Customer Group Total Proprietary Assets Under Management Amount''as HHPROPASSETS,#(lf)  #(lf)     --  a.''Non-Proprietary Brokerage Assets Under Advisement Amount'' as np_brkgaua,#(lf)      -- a.''Non-Proprietary Other Investment Accounts Own Count'' as OTHRINVST,#(lf)       a.''Last Proprietary Contract Purchased Issue Date'' as ''Last Purchase Date'',#(lf)       case when a.''Customer Group TIMI Managed Accounts Own Count'' \u003e 0 then \u0027Y\u0027 #(lf)         else \u0027N\u0027#(lf)       end as ''Dain'',#(lf)       a.''Relationship Reserved Status Code'' as ORPHAN,#(lf)       a.''Customer Group Total Proprietary And Non-Proprietary Annual Premium Bill Amount'' as HHTOTPREM,#(lf)       xx.HHNP_BRKGOWN,#(lf)       xx.HHNPBRKGAUA,#(lf)       xx.HHNP_OTHRINVST,#(lf)       xx.HHMFOWNxx,#(lf)       xx.HHTOTAUM,#(lf)       xx.HHTOTCV,#(lf)       xx.HHBNKDEPS,#(lf)       xx2.''Health Owned'',#(lf)       xx2.''Annuity Owned'',#(lf)       xx2.''Life Owned'',#(lf)       xx2.''MF Owned'',#(lf)       xx2.''Bank Owned'',#(lf)       xx2.''Total Contracts'',#(lf)       a.''Mailing Address City Name'' as CITY,#(lf)       a.''Mailing State Code'' as STATE,#(lf)       a.''Mailing Zip 5 Code'' as ZIP5,#(lf)       a.''Client Servicing Employee Organization Identifier'' as TSID#(lf)       #(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''All Members Current'' as a left join #(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' as b#(lf)    on a.''Client Servicing Employee Organization Identifier'' = b.''Employee Identifier''  left join#(lf)       (select a1.''Customer Group Identification Number'' as GRPIDNBR,#(lf)              sum(a1.''TIMI Managed Accounts Own Count'') as HHnp_fbown,#(lf)              sum(a1.''Non-Proprietary Brokerage Accounts Own Count'') as HHNP_BRKGOWN,#(lf)              sum(a1.''Non-Proprietary Brokerage Assets Under Advisement Amount'') as HHNPBRKGAUA,#(lf)              sum(a1.''Non-Proprietary Other Investment Accounts Own Count'') as HHNP_OTHRINVST, #(lf)              sum(a1.''Proprietary Mutual Fund Accounts Own Count'') as HHMFOWNxx,#(lf)              sum(a1.''Proprietary Assets Under Management Amount Excluding Bank'') as HHTOTAUM,#(lf)              sum(a1.''Proprietary Life Line of Business Assets Under Management Amount'') as HHTOTCV,#(lf)              sum(a1.''Thrivent Bank Or Credit Union Deposit Balance'') as HHBNKDEPS#(lf) #(lf)         from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''All Members Current'' a1  #(lf)     --   where a1.''Customer Group Identification Number'' in (/*490647*/4661702)#(lf)        group by a1.''Customer Group Identification Number'') as xx#(lf)   on a.''Customer Group Identification Number''=xx.grpidnbr    left join #(lf)       (select a2.''Customer Group Identification Number'' as GRPIDNBR,#(lf)               sum(a2.''Customer Group Proprietary Disability Income Contracts Own Count'') + sum(a2.''Customer Group Proprietary And Non-Proprietary Health Contracts Own Count'') +#(lf)                  sum(a2.''Customer Group Proprietary And Non-Proprietary Long Term Care Contracts Own Count'') + sum(a2.''Customer Group Proprietary And Non-Proprietary Medical Supplement Contracts Own Count'') as ''Health Owned'',#(lf)               sum(a2.''Customer Group Proprietary And Non-Proprietary Fixed Deferred Annuity Contracts Own Count'') + sum(a2.''Customer Group Proprietary Settlement Option Contracts Own Count'') +#(lf)                   sum(a2.''Customer Group Proprietary Immediate Annuity Contracts Own Count'') + sum(a2.''Customer Group Proprietary And Non-Proprietary Variable Deferred Annuity Contracts Own Count'') as ''Annuity Owned'',#(lf)               sum(a2.''Customer Group Proprietary And Non-Proprietary Term Life Contracts Own Count'') + sum(a2.''Customer Group Proprietary And Non-Proprietary Universal Life Contracts Own Count'') +#(lf)                   sum(a2.''Customer Group Proprietary And Non-Proprietary Variable Universal Life Contracts Own Count'' ) + sum(a2.''Customer Group Proprietary And Non-Proprietary Whole Life Contracts Own Count'') as ''Life Owned'',#(lf)               sum(a2.''Customer Group Proprietary And Non-Proprietary Mutual Fund Accounts Own Count'') as ''MF Owned'',#(lf)               sum(a2.''Customer Group Thrivent Bank Or Credit Union Accounts Own Count'') as ''Bank Owned'',#(lf)               sum(a2.''Customer Group Total Proprietary and Non-Proprietary Contracts Own Count'') + sum(a2.''Customer Group Proprietary Immediate Annuity Contracts Own Count'') as ''Total Contracts''#(lf)       #(lf)          from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''All Members Current'' a2 #(lf)         where a2.''Customer Group Primary Client Indicator'' = 1#(lf)     --   where a1.''Customer Group Identification Number'' in (/*490647*/4661702)#(lf)        group by a2.''Customer Group Identification Number'') as xx2#(lf)   on a.''Customer Group Identification Number''=xx2.grpidnbr  #(lf)     #(lf) where a.''Customer Group Primary Client Indicator'' = 1  #(lf) --and a.''Customer Group Identification Number'' in (/*490647*/4661702)#(lf)  and b.''Current Row Indicator'' = \u0027Y\u0027#(lf)  and b.''Organization Department Code'' in (\u00270001\u0027,\u00270115\u0027,\u00270190\u0027,\u00270283\u0027,\u00270291\u0027,\u00270361\u0027,\u00270383\u0027,\u00270384\u0027,\u00270435\u0027,\u00270525\u0027,\u00270708\u0027)#(lf)  and a.''Client Servicing Employee Organization Identifier'' \u003c\u003e \u0027 \u0027', null, [EnableFolding=true]),    #'Changed Type1' = Table.TransformColumnTypes(Source,{{'CIFID_TXT', type text}}),    #'Sorted Rows' = Table.Sort(#'Changed Type1',{{'GRPIDNBR', Order.Ascending}}),    #'Added Custom5' = Table.AddColumn(#'Sorted Rows', 'Privacy', each [DNC]\u0026[DNM]\u0026[DNE]),    #'Trimmed Text' = Table.TransformColumns(#'Added Custom5',{{'Privacy', Text.Trim, type text}}),    #'Removed Columns' = Table.RemoveColumns(#'Trimmed Text',{'DNM', 'DNE', 'DNC'}),    #'Changed Type' = Table.TransformColumnTypes(#'Removed Columns',{{'Last Purchase Date', type date}, {'Total Contracts', Int64.Type}, {'GRPIDNBR', Int64.Type}}),    #'Merged Queries' = Table.NestedJoin(#'Changed Type', {'GRPIDNBR'}, #'New Money', {'CUST_GRP_ID_NBR'}, 'New Money', JoinKind.LeftOuter),    #'Expanded New Money' = Table.ExpandTableColumn(#'Merged Queries', 'New Money', {'NEWMONEY_AMT'}, {'NEWMONEY_AMT'}),    #'Replaced Value' = Table.ReplaceValue(#'Expanded New Money',null,0,Replacer.ReplaceValue,{'NEWMONEY_AMT'})in    #'Replaced Value'"}]},{"name":"Last Refreshed Date","isHidden":false,"storageMode":"Import","columns":[{"name":"Last Refresh Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Last Refresh","dataType":"String","isHidden":false,"expression":"'Last Refresh Date: ' \u0026 \u0027Last Refreshed Date\u0027[Last Refresh Date]","columnType":"Calculated"}],"measures":[],"source":[{"expression":"let    Source = DateTime.LocalNow(),    #'Converted to Table' = #table(1, {{Source}}),    #'Changed Type' = Table.TransformColumnTypes(#'Converted to Table',{{'Column1', type date}}),    #'Renamed Columns' = Table.RenameColumns(#'Changed Type',{{'Column1', 'Last Refresh Date'}})in    #'Renamed Columns'"}]},{"name":"Sales","isHidden":false,"storageMode":"Import","columns":[{"name":"GRPIDNBR","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Sales_5yrs","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Sales_CY","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Sales_FYLH_5Yrs","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"Sales_FYLH_CY","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"M12 FYLH Sales","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"M12 Sales","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[{"name":"YTD Total Grid Revenuexx","expression":"  var _total = CALCULATE(sum(\u0027Sales\u0027[Sales_CY]))RETURN  IF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"M12 Total Grid Revenuexx","expression":"  var _total = CALCULATE(sum(\u0027Sales\u0027[M12 Sales]))RETURN  IF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"Total Grid Revenue Last 5yrs","expression":"  var _total = CALCULATE(sum(\u0027Sales\u0027[Sales_5yrs]))RETURN  IF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"YTD FYLH Total Grid Revenue","expression":"  var _total = CALCULATE(sum(\u0027Sales\u0027[Sales_FYLH_CY]))RETURN  IF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"M12 FYLH Total Grid Revenue","expression":"  var _total = CALCULATE(sum(\u0027Sales\u0027[M12 FYLH Sales]))RETURN  IF(ISBLANK(_total),0,_total)","isHidden":false},{"name":"FYLH Total Grid Revenue Last 5yrsxx","expression":"  var _total = CALCULATE(sum(\u0027Sales\u0027[Sales_FYLH_5Yrs]))RETURN  IF(ISBLANK(_total),0,_total)","isHidden":false}],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'WITH SALES as(#(lf)select a.''Customer ID Number'' as CIFID, #(lf)       c.''Customer Group Identification Number'' as GRPIDNBR,#(lf)       b.''Distribution Performance Reporting Year Number'',#(lf)       b.''Calendar Day Date'' as Cal_DT,#(lf)       a.''Reporting Roll Up Event Description'',#(lf)       sum(a.''Grid Credit Amount'') as ''Grid Credit Amount'',#(lf)       case when a.''Compensation Level 2 Product Character Code'' = \u0027ANN\u0027 then \u0027Annuity\u0027#(lf)            when a.''Compensation Level 2 Product Character Code'' = \u0027INVEST\u0027 then \u0027Investments\u0027#(lf)            when a.''Compensation Level 2 Product Character Code'' = \u0027BANK\u0027 then \u0027Investments\u0027#(lf)            when a.''Compensation Level 2 Product Character Code'' = \u0027RISK\u0027 then \u0027Life \u0026 Health\u0027#(lf)            when a.''Compensation Level 2 Product Character Code'' = \u0027UKWN\u0027 and a.''Compensation Reporting Roll Up Name'' = \u0027Fixed Indexed Annuity\u0027 then \u0027Annuity\u0027#(lf)            when a.''Compensation Level 2 Product Character Code'' = \u0027UKWN\u0027 and a.''Compensation Reporting Roll Up Name'' = \u0027Variable Annuity\u0027 then \u0027Annuity\u0027#(lf)            when a.''Compensation Level 2 Product Character Code'' = \u0027UKWN\u0027 and a.''Compensation Reporting Roll Up Name'' = \u0027Term Life\u0027 then \u0027Life \u0026 Health\u0027#(lf)            when a.''Compensation Level 2 Product Character Code'' = \u0027UKWN\u0027 and a.''Compensation Reporting Roll Up Name'' = \u0027Universal Life\u0027 then \u0027Life \u0026 Health\u0027#(lf)            when a.''Compensation Level 2 Product Character Code'' = \u0027UKWN\u0027 and a.''Compensation Reporting Roll Up Name'' = \u0027Whole Life\u0027 then \u0027Life \u0026 Health\u0027#(lf)            when a.''Compensation Level 2 Product Character Code'' = \u0027UKWN\u0027 and a.''Compensation Reporting Roll Up Name'' = \u0027Variable Universal Life\u0027 then \u0027Life \u0026 Health\u0027#(lf)             else \u0027 \u0027#(lf)       end as ''Product Category''   #(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Compensation and Sales Metrics Fact'' as a left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Distribution Performance Dates Dimension'' as b#(lf)    on a.''Distribution Performance Dates Surrogate Key''=b.''Date Surrogate Key'' left join#(lf)       ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Conformed Customer Dimension Detail'' c#(lf)    on a.''Customer ID Number'' = c.''Customer Identification Number'' and c.''Current Row Indicator'' = \u0027Y\u0027 #(lf)       #(lf) #(lf) where b.''Distribution Performance Reporting Year Number'' in (\u00272020\u0027,\u00272021\u0027,\u00272022\u0027,\u00272023\u0027,\u00272024\u0027)  #(lf)   and (a.''Grid Credit Amount'' is not NULL) #(lf)     #(lf) group by c.''Customer Group Identification Number'',#(lf)          b.''Distribution Performance Reporting Year Number'',#(lf)          a.''Customer ID Number'', #(lf)          a.''Employee Identifier'', #(lf)          a.''Compensation Reporting Roll Up Name'',#(lf)          a.''Reporting Roll Up Event Description'',#(lf)          a.''Compensation Level 2 Product Character Code'',#(lf)          b.''Calendar Day Date''#(lf) )#(lf) #(lf)  (select GRPIDNBR,#(lf)          Sales, #(lf)          Type#(lf)    #(lf)     from (#(lf)            select grpidnbr,#(lf)                   sum(''Grid Credit Amount'') as Sales, #(lf)                   \u0027Sales_5yrs\u0027 as TYPE#(lf)              from sales#(lf)             where grpidnbr \u003e 0 #(lf)            group by grpidnbr) #(lf)   group by grpidnbr, Type, Sales)     #(lf)#(lf)   UNION#(lf)           (select grpidnbr,#(lf)                   Sales,#(lf)                   Type#(lf)             from (select grpidnbr,#(lf)                          sum(''Grid Credit Amount'') as Sales,#(lf)                          \u0027Sales_CY\u0027 as Type#(lf)                     from SALES#(lf)                    where grpidnbr \u003e 0 #(lf)                and ''Distribution Performance Reporting Year Number'' = 2024#(lf)             group by grpidnbr)  #(lf)   group by grpidnbr, Type, Sales )    #(lf)     #(lf)  UNION#(lf)          (select grpidnbr,#(lf)                  Sales,#(lf)                  Type#(lf)             from (select grpidnbr,#(lf)                          sum(''Grid Credit Amount'') as Sales,#(lf)                          \u0027Sales_FYLH_5Yrs\u0027 as Type#(lf)                     from SALES#(lf)                    where grpidnbr \u003e 0 #(lf)                      and ''Reporting Roll Up Event Description'' = \u0027First Year\u0027#(lf)                      and ''Product Category'' = \u0027Life \u0026 Health\u0027#(lf)              group by grpidnbr)#(lf)   group by grpidnbr, Type, Sales )      #(lf)       #(lf)       #(lf)  UNION#(lf)          (select grpidnbr,#(lf)                  Sales,#(lf)                  Type#(lf)             from (select grpidnbr,#(lf)                          sum(''Grid Credit Amount'') as Sales,#(lf)                          \u0027Sales_FYLH_CY\u0027 as Type#(lf)                     from SALES#(lf)                    where grpidnbr \u003e 0 #(lf)                      and ''Reporting Roll Up Event Description'' = \u0027First Year\u0027#(lf)                      and ''Product Category'' = \u0027Life \u0026 Health\u0027#(lf)                      and ''Distribution Performance Reporting Year Number'' = 2024#(lf)             group by grpidnbr)#(lf)   group by grpidnbr, Type, Sales )#(lf)#(lf) UNION#(lf)      (select grpidnbr,#(lf)              Sales,#(lf)              Type#(lf)         from (Select grpidnbr,#(lf)                      sum(''Grid Credit Amount'') as Sales,#(lf)                      \u0027M12 Sales\u0027 as Type#(lf)                 from SALES#(lf)                where grpidnbr \u003e 0 #(lf)                  and (Cal_DT between dateadd(MONTH,-11, date_trunc(\u0027MONTH\u0027, CURRENT_DATE())) and DATEADD(DAY, -1, DATE_TRUNC(\u0027MONTH\u0027, DATEADD(MONTH,1,CURRENT_DATE())))) #(lf)         group by grpidnbr)#(lf)   group by grpidnbr, Type, Sales  ) #(lf)   #(lf) UNION#(lf)      (select grpidnbr,#(lf)              Sales,#(lf)              Type#(lf)         from (Select grpidnbr,#(lf)                      sum(''Grid Credit Amount'') as Sales,#(lf)                      \u0027M12 FYLH Sales\u0027 as Type#(lf)                 from SALES#(lf)                where grpidnbr \u003e 0 #(lf)                  and ''Reporting Roll Up Event Description'' = \u0027First Year\u0027#(lf)                  and ''Product Category'' = \u0027Life \u0026 Health\u0027#(lf)                  and (Cal_DT between dateadd(MONTH,-11, date_trunc(\u0027MONTH\u0027, CURRENT_DATE())) and DATEADD(DAY, -1, DATE_TRUNC(\u0027MONTH\u0027, DATEADD(MONTH,1,CURRENT_DATE())))) #(lf)         group by grpidnbr)#(lf)   group by grpidnbr, Type, Sales  )', null, [EnableFolding=true]),    #'Unpivoted Columns' = Table.UnpivotOtherColumns(Source, {'GRPIDNBR', 'SALES'}, 'Attribute', 'Value'),    #'Reversed Rows' = Table.ReverseRows(#'Unpivoted Columns'),    #'Pivoted Column' = Table.Pivot(#'Reversed Rows', List.Distinct(#'Reversed Rows'[Value]), 'Value', 'SALES', List.Sum),    #'Removed Columns' = Table.RemoveColumns(#'Pivoted Column',{'Attribute'}),    #'Replaced Value' = Table.ReplaceValue(#'Removed Columns',null,0,Replacer.ReplaceValue,{'Sales_5yrs', 'Sales_CY', 'Sales_FYLH_5Yrs', 'Sales_FYLH_CY', 'M12 Sales', 'M12 FYLH Sales'})in    #'Replaced Value'"}]},{"name":"ClientServiceGroup","isHidden":false,"storageMode":"Import","columns":[{"name":"Customer Identifier","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"SERVICEGROUP","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'WITH CTE AS (  #(lf)   select distinct A.''Customer Identifier'',#(lf)                   A.''Service Group Code'' as servicegroup,#(lf)                   A.''Source System Sequence Number'',#(lf)                   ROW_NUMBER() OVER (PARTITION BY a.''Customer Identifier'' ORDER BY A.''Source System Sequence Number'' desc) AS rn#(lf)              #(lf)     from ''ENTERPRISE_INTERACTION_CUST''.''PRESENTATION_01''.''Individual Account Confidential'' a  #(lf)    where  A.''Service Group Code'' in (\u0027A\u0027,\u0027B\u0027,\u0027C\u0027,\u0027D\u0027,\u0027E\u0027,\u0027Natural Market\u0027,\u0027Prospect - Green\u0027,\u0027Prospect - Yellow\u0027,\u0027Prospect - Red\u0027,\u0027Other\u0027)    #(lf)group by A.''Customer Identifier'', A.''Service Group Code'', A.''Source System Sequence Number'' #(lf)    order by A.''Customer Identifier'', A.''Source System Sequence Number'', A.''Service Group Code'')#(lf)#(lf)#(lf)SELECT ''Customer Identifier'',#(lf)       servicegroup#(lf)FROM cte#(lf)WHERE rn = 1', null, [EnableFolding=true]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Customer Identifier', Int64.Type}})in    #'Changed Type'"}]},{"name":"ClientServiceGroupSort","isHidden":false,"storageMode":"Import","columns":[{"name":"ServiceGroup","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Order","dataType":"Int64","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i45WclTSUTJUitWJVnICsozALGcgyxjMcgGyTMAsVyDLFMzySywpLUrMUfBNLMpOLQEKm4GFA4ryiwtSk0sUdBXci1JT84AS5ugSkak5OfnlQBkLdJmg1BSgsCVY2L8kI7UI5CwDpdhYAA==', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [ServiceGroup = _t, Order = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'ServiceGroup', type text}, {'Order', Int64.Type}})in    #'Changed Type'"}]},{"name":"TeamMembers","isHidden":false,"storageMode":"Import","columns":[{"name":"Team Identifier","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Team Members","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'WITH TEAMS AS(#(lf)  select a1.''Employee Identifier'',#(lf)         c1.''First Name''||\u0027 \u0027||c1.''Last Name'' as ''Advisor Name'',#(lf)                  b1.''Team Identifier'',#(lf)                b1.''Team Name''#(lf)           from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Employee Team Organization Relationship Current Dimension''  a1 inner join#(lf)                ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Team Organization Current Dimension'' b1#(lf)             on (a1.''Team Identifier Surrogate Key'' = b1.''Team Identifier Surrogate Key'')  inner join#(lf)                ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' c1#(lf)             on (a1.''Employee Identifier'' = c1.''Employee Identifier'')   #(lf)    #(lf)          where b1.''Effective Status Code'' = \u0027A\u0027#(lf)            and c1.''Employee Status Type Code'' = \u0027A\u0027#(lf)            and c1.''Current Row Indicator'' = \u0027Y\u0027#(lf)            and substring(c1.''Job Type Code'',1,3) \u003c\u003e \u0027009\u0027#(lf)            and a1.''Team Member Action Code'' \u003c\u003e \u0027DROP\u0027#(lf)            and b1.''Team Purpose Code'' NOT in (\u0027COAC\u0027,\u0027ENSB\u0027) #(lf)            and a1.''Effective Date'' = (select MAX(aa.''Effective Date'')#(lf)                                         from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Employee Team Organization Relationship Current Dimension''  aa inner join#(lf)                                              ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Team Organization Current Dimension'' bb#(lf)                                           on (aa.''Team Identifier Surrogate Key'' = bb.''Team Identifier Surrogate Key'' and a1.''Employee Identifier''= aa.''Employee Identifier'') inner join#(lf)                                              ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Workforce Dimension Detail'' cc#(lf)                                           on (aa.''Employee Identifier''= cc.''Employee Identifier'')#(lf)#(tab)                                where bb.''Effective Status Code'' = \u0027A\u0027#(lf)                                          and cc.''Employee Status Type Code'' = \u0027A\u0027  #(lf)                                          and substring(cc.''Job Type Code'',1,3) \u003c\u003e \u0027009\u0027#(lf)                                          and cc.''Current Row Indicator'' = \u0027Y\u0027#(lf)                                          and aa.''Team Member Action Code'' \u003c\u003e \u0027DROP\u0027#(lf)                                          and bb.''Team Purpose Code'' NOT in (\u0027COAC\u0027,\u0027ENSB\u0027)) #(lf)group by  b1.''Team Identifier'',#(lf)          b1.''Team Name'',#(lf)          a1.''Employee Identifier'',#(lf)          c1.''First Name''||\u0027 \u0027||c1.''Last Name''#(lf) #(lf))#(lf)(select ''Team Identifier'',#(lf)         listagg(''Advisor Name'', \u0027, \u0027 ) WITHIN GROUP(ORDER BY ''Advisor Name'') as ''Team Members'' #(lf)   from TEAMS#(lf)   group by ''Team Identifier'')', null, [EnableFolding=true])in    Source"}]},{"name":"SVC_CUST","isHidden":false,"storageMode":"Import","columns":[{"name":"BEN_CTRC_NBR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CUST_ID_NBR","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TYPE","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = DB2.Database('PODWH021:50000', 'PODWH021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='WITH CTRCS AS (#(lf)  SELECT DISTINCT BEN_CTRC_NBR,#(lf)                  CUST_ID_NBR,  #(lf)#(tab)          PRIM_IND,#(lf)#(tab)#(tab)  RCD_STS_CDE #(lf)  FROM CONTRACT.SVC_AGMT_CUST_RLTN#(lf) WHERE RCD_STS_CDE = \u0027A\u0027#(lf)   --AND BEN_CTRC_NBR = \u002710012912\u0027#(lf)   --AND BEN_CTRC_NBR = \u002710018051\u0027#(lf))#(lf)#(lf)(SELECT BEN_CTRC_NBR,#(lf)        CUST_ID_NBR,#(lf)        TYPE#(lf)   FROM (SELECT BEN_CTRC_NBR,#(lf)                CUST_ID_NBR,#(lf)                \u0027PRIMARY\u0027 AS TYPE#(lf)           FROM CTRCS#(lf)          WHERE PRIM_IND = \u0027Y\u0027#(lf)          GROUP BY BEN_CTRC_NBR, CUST_ID_NBR)#(lf)   GROUP BY BEN_CTRC_NBR, TYPE, CUST_ID_NBR)  #(lf)#(lf)UNION#(lf)#(lf)(SELECT BEN_CTRC_NBR,#(lf)        CUST_ID_NBR,#(lf)        TYPE#(lf)   FROM (SELECT BEN_CTRC_NBR,#(lf)                CUST_ID_NBR,#(lf)                \u0027SECONDARY\u0027 AS TYPE#(lf)           FROM CTRCS#(lf)          WHERE PRIM_IND = \u0027N\u0027#(lf)          GROUP BY BEN_CTRC_NBR, CUST_ID_NBR)#(lf)   GROUP BY BEN_CTRC_NBR, TYPE, CUST_ID_NBR) ']),    #'Sorted Rows' = Table.Sort(Source,{{'BEN_CTRC_NBR', Order.Ascending}})in    #'Sorted Rows'"}]},{"name":"SVC_AGMT_CURR","isHidden":false,"storageMode":"Import","columns":[{"name":"SA_NUMBER","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"SVC_AGMT_STS_CDE","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"STATUS_DESCRIPTION","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"ACL_DLIV_DT","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"SIGN_DATE","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"PRIMARY_ADVISOR","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CUST_ID_NBR","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TYPE","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = DB2.Database('PODWH021:50000', 'PODWH021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT BEN_CTRC_NBR as SA_Number,#(lf)      -- BEN_CTRC_TYP_CDE,#(lf)      -- CASE WHEN SVC_AGMT_PLAN_YR = 0 THEN 1#(lf)#(tab) --  ELSE SVC_AGMT_PLAN_YR#(lf)       --END AS Plan_Year,#(lf)       --BEG_TMSP,#(lf)       --SVC_AGMT_TYP_DESCR as Agreement_Type,#(lf)       --SVC_AGMT_TYP_DESCR as Agreement_Type_New,#(lf)       SVC_AGMT_STS_CDE,#(lf)       SVC_AGMT_STS_DESCR AS Status_Description,#(lf)       ACL_DLIV_DT,#(lf)       APP_DT as Sign_Date,#(lf)       --SVC_AGMT_TRMN_DT as Termination_Date,#(lf)      -- CTRC_FLMT_EXT_IND as Overdue,#(lf)      -- SVC_AGMT_ANV_DT as Plan_Year_Due_Date,#(lf)#(tab)/*#(tab) RCD_STS_CDE, */#(lf)       REPR_RCD_ID as Primary_Advisor#(lf)      -- CASE WHEN SUBSTR(REPR_RCD_ID,1,2) = \u0027TS\u0027 THEN \u0027Primary\u0027#(lf)      --     else \u0027 \u0027#(lf)      -- end as Agent_Indicator, #(lf)     --  CURR_YTD as Total_Agreements,#(lf)      -- PREV_YTD as Total_Agreements_PYTD,#(lf)     --  CURR_AGMT as New_Agreements,#(lf)      -- PREV_AGMT as New_Agreements_PYTD,#(lf)      -- month(APP_DT) as Month#(lf)  FROM CONTRACT.SVC_AGMT_CURR#(lf) WHERE SVC_AGMT_STS_CDE IN (\u00272\u0027,\u00276\u0027,\u0027C\u0027,\u0027X\u0027,\u0027P\u0027)']),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'SIGN_DATE', type date}}),    #'Filtered Rows' = Table.SelectRows(#'Changed Type', each true),    #'Merged Queries' = Table.NestedJoin(#'Filtered Rows', {'SA_NUMBER'}, SVC_CUST, {'BEN_CTRC_NBR'}, 'SVC_CUST', JoinKind.LeftOuter),    #'Expanded SVC_CUST' = Table.ExpandTableColumn(#'Merged Queries', 'SVC_CUST', {'CUST_ID_NBR', 'TYPE'}, {'CUST_ID_NBR', 'TYPE'}),    #'Removed Duplicates' = Table.Distinct(#'Expanded SVC_CUST', {'CUST_ID_NBR'})in    #'Removed Duplicates'"}]},{"name":"OAT Report definitions","isHidden":false,"storageMode":"Import","columns":[{"name":"Column","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Definition Sort Order","dataType":"Int64","isHidden":false,"expression":"RELATED(\u0027Definition Sort Order\u0027[Order])","columnType":"Calculated"}],"measures":[],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//SHARED//Public//DI and BI//Field Reporting//OAT Report//OAT Report Definitions.xlsx'), null, true),    definitions_Sheet = Source{[Item='definitions',Kind='Sheet']}[Data],    #'Promoted Headers' = Table.PromoteHeaders(definitions_Sheet, [PromoteAllScalars=true])in    #'Promoted Headers'"}]},{"name":"Definition Sort Order","isHidden":false,"storageMode":"Import","columns":[{"name":"Column","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Order","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('fVNRb9pADP4rVp46qVIhUNruLSNjRSIUQUCqWB9uiSEnJXfR5ULFv599l2ZsY3uz/fnsz599+32QFkaeUFmY58FtMAzebvfBs24bLHSZw7SUjC1FhYSGDu1iGzQnmSF8M7qtCRw5MMHqB5qmkDWk55ofjV08OrJ97+zZjsyJM1fUXGRn8h+c/5rGkGorSiorc1gjUWsRCH/05YfhFZzgJwdfeboQjYV7OJuGxxv0XWavi+frpYbDvtV/krwW/0j4o+vogtwS3yHRCnnm4fgCWBmsZFtx2MsUNQ3aBrYqRwOJUOKIFQt/E22TT5w2+Tstyk+y6dMil/Zw0YSewvd2MAgnZEaMPl6gMQpbwBdUeJCWwaff+Om8zSwPFHoZl9riZ7AFwkGXpX6X6ggGD0TD6j79bqqVNYIsqAnpT4vLeKF3Ee837ARlUqEXbPPCdqfR13XCnpcmXUcxe16B7YJtP+bOO36qRTplx08Rz/lIB92V5rDxV+s5vNAUhl3PIpmx3V20Uz6HKPPDj8a/XsBcnbBhqUae2NRgLi0tQ2rFUU8wpmAmLBVZlUIp1mkjjwpiinGWp+5uZtWarBAN9lh395owgxkt9u7Q2tYgRHWtpbJu1x/JflJ3BNq4Xws3FkXVgFblma9hTAK8/QQ=', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Column = _t, Order = _t]),    #'Changed Type1' = Table.TransformColumnTypes(Source,{{'Order', Int64.Type}}),    #'Changed Type' = Table.TransformColumnTypes(#'Changed Type1',{{'Column', type text}, {'Order', type text}})in    #'Changed Type'"}]},{"name":"ALLMBRS_Product Totals","isHidden":false,"storageMode":"Import","columns":[{"name":"GRPIDNBR","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"TOTAL","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"PRODUCT","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"CTRC_TOTAL","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"VitalStats Sort","dataType":"String","isHidden":false,"expression":"RELATED((\u0027Product Sort Table\u0027[Order]))","columnType":"Calculated"},{"name":"TSID","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Advisor Name","dataType":"String","isHidden":false,"expression":"RELATED(\u0027Producer_Snowflake\u0027[EMP_NM])","columnType":"Calculated"},{"name":"Product Sort","dataType":"String","isHidden":false,"expression":"RELATED(\u0027Product_Sort_Table\u0027[Order])","columnType":"Calculated"}],"measures":[],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'WITH ALLMBRS as(#(lf)select ''Customer Group Identification Number'' as GRPIDNBR,#(lf)       ''Client Servicing Employee Organization Identifier'' as TSID,#(lf)       ''Thrivent Bank Or Credit Union Deposit Balance'' as BNKDEPS,#(lf)       ''Proprietary Variable Deferred Annuity Assets Under Management Amount'' as VAAUM,#(lf)       ''Proprietary Fixed Deferred Annuity Assets Under Management Amount'' as ANAUM,#(lf)       ''Proprietary Mutual Fund Assets Under Management Amount''  as MFAUM,#(lf)       ''Proprietary Settlement Option Assets Under Management Amount''  as SOAUM,#(lf)       ''Proprietary Immediate Annuity Assets Under Management Amount''  as IMMAUM,#(lf)       ''Proprietary Assets Under Management Amount Excluding Bank''  as TOTAUM,#(lf)       ''Proprietary Variable Universal Life Assets Under Management Amount'' as VULCV,#(lf)       ''Proprietary Universal Life Assets Under Management Amount'' as ULCV,#(lf)       ''Proprietary Whole Life Assets Under Management Amount''  as TRADCV,#(lf)       ''Proprietary Life Line of Business Assets Under Management Amount''  as TOTCV,#(lf)       ''TIMI Managed Account Assets Under Advisement Amount''  as TOTWRAPAUM,#(lf)       ''Thrivent Trust Assets Under Advisement Amount''  as TOTTRSTAUA,#(lf)       ''Non-Proprietary Brokerage Assets Under Advisement Amount''  as NP_BRKGAUA,#(lf)  --Annuity Contracts#(lf)       ''Proprietary Annuity Line of Business Contracts Own Count'' as ANNOWN,#(lf)  --Non-Prop Annuity Contracts#(lf)       ''Non-Proprietary Fixed Deferred Annuity Contracts Own Count'' as np_faown,#(lf)       ''Non-Proprietary Equity Indexed Annuity Contracts Own Count'' as np_eiaown,#(lf)       ''Non-Proprietary Variable Deferred Annuity Contracts Own Count'' as np_vaown,#(lf)  --Life Contracts#(lf)       ''Proprietary Life Line of Business Contracts Own Count'' as LIFEOWN,#(lf)  --Non-Prop Life Contracts#(lf)       ''Non-Proprietary Term Life Contracts Own Count'' as np_tlown,#(lf)       ''Non-Proprietary Universal Life Contracts Own Count'' as np_ulown,#(lf)       ''Non-Proprietary Variable Universal Life Contracts Own Count'' as np_vulown,#(lf)       ''Non-Proprietary Whole Life Contracts Own Count'' as np_wlown,#(lf)  --Health Contracts#(lf)       ''Proprietary Health Line of Business Contracts Own Count'' as HLTHOWN,#(lf)       ''Non-Proprietary Major Medical Contracts Own Count'' as np_mmedown,#(lf)       ''Non-Proprietary Long Term Care Contracts Own Count'' as np_ltcown,#(lf)       ''Non-Proprietary Medical Supplement Contracts Own Count'' as np_msupown,#(lf)  --Mutal Funds#(lf)       ''Proprietary Mutual Fund Accounts Own Count'' as MFOWN,#(lf)  --Brokerage#(lf)       ''Non-Proprietary Brokerage Accounts Own Count'' as NP_BRKGOWN,#(lf)  --Bank Contracts#(lf)       ''Thrivent Bank Or Credit Union Accounts Own Count'' as BANKOWN,#(lf)  --Wrap Contracts#(lf)       ''TIMI Managed Accounts Own Count'' as WRAPOWN #(lf)  #(lf)  #(lf)  #(lf)  from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''All Members Current''#(lf)-- where ''Customer Identification Number'' = 502628669 #(lf)      --    ''Customer Group Identification Number'' = 6111596#(lf)  --490647#(lf)  --''Client Servicing Employee Organization Identifier'' = \u0027TS11113\u0027#(lf)  group by ''Customer Group Identification Number'',#(lf)           ''Proprietary Variable Deferred Annuity Assets Under Management Amount'',#(lf)          ''Proprietary Fixed Deferred Annuity Assets Under Management Amount'',#(lf)          ''Proprietary Mutual Fund Assets Under Management Amount'',#(lf)          ''Proprietary Settlement Option Assets Under Management Amount'',#(lf)          ''Proprietary Immediate Annuity Assets Under Management Amount'',#(lf)          ''Proprietary Assets Under Management Amount Excluding Bank'',#(lf)          ''Proprietary Variable Universal Life Assets Under Management Amount'',#(lf)          ''Proprietary Universal Life Assets Under Management Amount'',#(lf)          ''Proprietary Whole Life Assets Under Management Amount'' ,#(lf)          ''Proprietary Life Line of Business Assets Under Management Amount'',#(lf)          ''TIMI Managed Account Assets Under Advisement Amount'',#(lf)          ''Thrivent Trust Assets Under Advisement Amount'' ,#(lf)          ''Non-Proprietary Brokerage Assets Under Advisement Amount'',#(lf)          ''Proprietary Annuity Line of Business Contracts Own Count'',#(lf)          ''Proprietary Life Line of Business Contracts Own Count'',#(lf)          ''Proprietary Health Line of Business Contracts Own Count'',#(lf)          ''Proprietary Mutual Fund Accounts Own Count'',#(lf)          ''Non-Proprietary Brokerage Accounts Own Count'',#(lf)          ''Thrivent Bank Or Credit Union Accounts Own Count'',#(lf)          ''TIMI Managed Accounts Own Count'',#(lf)          ''Non-Proprietary Fixed Deferred Annuity Contracts Own Count'',#(lf)          ''Non-Proprietary Equity Indexed Annuity Contracts Own Count'',#(lf)          ''Non-Proprietary Variable Deferred Annuity Contracts Own Count'',#(lf)          ''Non-Proprietary Term Life Contracts Own Count'',#(lf)          ''Non-Proprietary Universal Life Contracts Own Count'',#(lf)          ''Non-Proprietary Variable Universal Life Contracts Own Count'',#(lf)          ''Non-Proprietary Whole Life Contracts Own Count'',       #(lf)          ''Non-Proprietary Major Medical Contracts Own Count'',#(lf)          ''Non-Proprietary Long Term Care Contracts Own Count'',#(lf)          ''Non-Proprietary Medical Supplement Contracts Own Count'',#(lf)          ''Client Servicing Employee Organization Identifier'',#(lf)          ''Thrivent Bank Or Credit Union Deposit Balance''#(lf)  #(lf)  #(lf) )#(lf) #(lf) (select GRPIDNBR,#(lf)         Total, #(lf)         CTRC_Total,#(lf)         Product,#(lf)         TSID#(lf)    #(lf)    from (#(lf)          select grpidnbr,#(lf)                 sum(vaaum) + sum(anaum) + sum(soaum) + sum(immaum) as Total, #(lf)                 sum(ANNOWN) + sum(np_faown) + sum(np_eiaown) + sum(np_vaown) as CTRC_Total,#(lf)                 \u0027Annuity     \u0027 as Product,#(lf)                 TSID#(lf)            from ALLMBRS#(lf)           where grpidnbr \u003e 0 #(lf)           group by grpidnbr, TSID) #(lf)   group by grpidnbr, Product, Total, CTRC_Total, TSID) #(lf) #(lf) UNION#(lf) #(lf) (select GRPIDNBR,#(lf)         Total,#(lf)         CTRC_Total,#(lf)         Product,#(lf)         TSID#(lf)    #(lf)    from (#(lf)          select grpidnbr,#(lf)                 sum(vulcv) + sum(tradcv) + sum(ulcv) as Total, #(lf)                 sum(LIFEOWN) + sum(np_tlown) + sum(np_ulown) + sum(np_vulown) + sum(np_wlown) as CTRC_Total,#(lf)                 \u0027Life     \u0027 as Product,#(lf)                 TSID#(lf)            from ALLMBRS#(lf)           where grpidnbr \u003e 0 #(lf)            group by grpidnbr, TSID) #(lf)   group by grpidnbr, Product, Total, CTRC_Total, TSID) #(lf)#(lf)UNION#(lf) #(lf) (select GRPIDNBR,#(lf)         Total,#(lf)         CTRC_Total,#(lf)         Product,#(lf)         TSID#(lf)    #(lf)    from (#(lf)          select grpidnbr,#(lf)                 0 as Total, #(lf)                 sum(HLTHOWN) + sum(np_mmedown) + sum(np_ltcown) + sum(np_msupown) as CTRC_Total,#(lf)                 \u0027Health     \u0027 as Product,#(lf)                 TSID#(lf)            from ALLMBRS#(lf)           where grpidnbr \u003e 0 #(lf)            group by grpidnbr, TSID) #(lf)   group by grpidnbr, Product, Total, CTRC_Total, TSID) #(lf)#(lf)#(lf)#(lf) UNION #(lf)#(lf) (select GRPIDNBR,#(lf)         Total, #(lf)         CTRC_Total,#(lf)         Product,#(lf)         TSID#(lf)    #(lf)    from (#(lf)          select grpidnbr,#(lf)                 sum(MFAUM) as Total, #(lf)                 sum(MFOWN) as CTRC_Total, #(lf)                 \u0027Mutual Funds     \u0027 as Product,#(lf)                 TSID#(lf)            from ALLMBRS#(lf)           where grpidnbr \u003e 0 #(lf)           group by grpidnbr, TSID) #(lf)   group by grpidnbr, Product, Total, CTRC_Total, TSID) #(lf)#(lf) UNION#(lf)#(lf) (select GRPIDNBR,#(lf)         Total, #(lf)         CTRC_Total,#(lf)         Product,#(lf)         TSID#(lf)    #(lf)    from (#(lf)          select grpidnbr,#(lf)                 sum(tottrstaua) as Total, #(lf)                 0 as CTRC_Total,#(lf)                 \u0027Trust     \u0027 as Product,#(lf)                 TSID#(lf)            from ALLMBRS#(lf)           where grpidnbr \u003e 0 #(lf)           group by grpidnbr, TSID) #(lf)   group by grpidnbr, Product, Total, CTRC_Total, TSID) #(lf)#(lf) UNION#(lf)#(lf) (select GRPIDNBR,#(lf)         Total, #(lf)         CTRC_Total,#(lf)         Product,#(lf)         TSID#(lf)    #(lf)    from (#(lf)          select grpidnbr,#(lf)                 sum(np_brkgaua) as Total, #(lf)                 sum(NP_BRKGOWN) as CTRC_Total,#(lf)                 \u0027Brokerage     \u0027 as Product,#(lf)                 TSID#(lf)            from ALLMBRS#(lf)           where grpidnbr \u003e 0 #(lf)           group by grpidnbr, TSID) #(lf)   group by grpidnbr, Product, Total, CTRC_Total, TSID)#(lf)   #(lf)UNION#(lf)#(lf) (select GRPIDNBR,#(lf)         Total, #(lf)         CTRC_TOTAL,#(lf)         Product,#(lf)         TSID#(lf)    #(lf)    from (#(lf)          select grpidnbr,#(lf)                 sum(TOTWRAPAUM) as Total, #(lf)                 sum(WRAPOWN) as CTRC_TOTAL,#(lf)                 \u0027Managed Accts\u0027 as Product,#(lf)                 TSID#(lf)            from ALLMBRS#(lf)           where grpidnbr \u003e 0 #(lf)           group by grpidnbr, TSID) #(lf)   group by grpidnbr, Product, Total, CTRC_Total, TSID)   #(lf)#(lf)UNION#(lf)#(lf) (select GRPIDNBR,#(lf)         Total, #(lf)         CTRC_TOTAL,#(lf)         Product,#(lf)         TSID#(lf)    #(lf)    from (#(lf)          select grpidnbr,#(lf)                 sum(BNKDEPS) as Total, #(lf)                 sum(BANKOWN) as CTRC_TOTAL,#(lf)                 \u0027Credit Union\u0027 as Product,#(lf)                 TSID #(lf)            from ALLMBRS#(lf)           where grpidnbr \u003e 0 #(lf)           group by grpidnbr, TSID) #(lf)   group by grpidnbr, Product, Total, CTRC_Total, TSID)', null, [EnableFolding=true])in    Source"}]},{"name":"Product Sort Table","isHidden":false,"storageMode":"Import","columns":[{"name":"Product","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"},{"name":"Order","dataType":"String","isHidden":false,"columnType":"CalculatedTableColumn"}],"measures":[],"source":[{"expression":"  UNION(      ROW('Product', 'Annuity', 'Order', 1),      ROW('Product', 'Life', 'Order', 2),      ROW('Product', 'Health', 'Order', 3),      ROW('Product', 'Mutual Funds', 'Order', 4),      ROW('Product', 'Brokerage', 'Order', 5),      ROW('Product', 'Wrap', 'Order', 6),      ROW('Product', 'Bank', 'Order', 7),      ROW('Product', 'Trust', 'Order', 8)      )"}]},{"name":"Product_Sort_Table","isHidden":false,"storageMode":"Import","columns":[{"name":"Product","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Order","dataType":"String","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i45W8slMS1XSUTJUitWJVvJITcwpyQByjcBcx7y80sySSiDfGMz3LS0pTcxRcCvNSykGCpqABZ2K8rNTixLTQaaYQpQl5gG5KQqOycklIHVmYNGQotLiEiDPHMxzLkpNySxRCM3LzM8DClooxcYCAA==', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Product = _t, Order = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Product', type text}})in    #'Changed Type'"}]},{"name":"Whats New_ Alert Msg","isHidden":false,"storageMode":"Import","columns":[{"name":"Message Description","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"Message","dataType":"String","isHidden":false,"columnType":"Data"},{"name":"End Date","dataType":"DateTime","isHidden":false,"columnType":"Data"}],"measures":[{"name":"What\u0027s New Msg","expression":"  var _enddate = LOOKUPVALUE(\u0027Whats New_ Alert Msg\u0027[End Date],\u0027Whats New_ Alert Msg\u0027[Message Description],'What\u0027s New')RETURN if(today() \u003c= _enddate,LOOKUPVALUE(\u0027Whats New_ Alert Msg\u0027[Message],\u0027Whats New_ Alert Msg\u0027[Message Description],'What\u0027s New'),'')","isHidden":false},{"name":"Show What\u0027s New Msg Box","expression":"  var _enddate = LOOKUPVALUE(\u0027Whats New_ Alert Msg\u0027[End Date],\u0027Whats New_ Alert Msg\u0027[Message Description],'What\u0027s New')RETURNif(today() \u003c= _enddate,1,0)","isHidden":false},{"name":"Alert Msg","expression":"  var _alertmsg = LOOKUPVALUE(\u0027Whats New_ Alert Msg\u0027[Message],\u0027Whats New_ Alert Msg\u0027[Message Description],'ALERT!')RETURNif(_alertmsg \u003c\u003e BLANK(), _alertmsg,'')  ","isHidden":false},{"name":"Show Alert Msg Box","expression":"  var _alertmsg = LOOKUPVALUE(\u0027Whats New_ Alert Msg\u0027[Message],\u0027Whats New_ Alert Msg\u0027[Message Description],'ALERT!')RETURNif(_alertmsg\u003c\u003eBLANK(),1,0)","isHidden":false}],"source":[{"expression":"let    Source = Excel.Workbook(File.Contents('////VSSHR//SHARED//Public//DI and BI//Field Reporting//What\u0027s New and Alert Message//What\u0027s New and Alert Message.xlsx'), null, true),    OAT_Rpt_Sheet = Source{[Item='OAT_Rpt',Kind='Sheet']}[Data],    #'Promoted Headers1' = Table.PromoteHeaders(OAT_Rpt_Sheet, [PromoteAllScalars=true]),    #'Changed Type2' = Table.TransformColumnTypes(#'Promoted Headers1',{{'Message Description', type text}, {'Message', type text}, {'End Date', type date}})in    #'Changed Type2'"}]},{"name":"New Money","isHidden":false,"storageMode":"Import","columns":[{"name":"CUST_GRP_ID_NBR","dataType":"Double","isHidden":false,"columnType":"Data"},{"name":"NEWMONEY_AMT","dataType":"Double","isHidden":false,"columnType":"Data"}],"measures":[],"source":[{"expression":"let    Source = DB2.Database('PODWH021:50000', 'PODWH021', [HierarchicalNavigation=true, Implementation='Microsoft', Query='SELECT DISTINCT C.CUST_GRP_ID_NBR,#(lf)#(tab)                SUM(A.NEW_MONY_SALE_CR_AMT) AS NewMoney_Amt#(tab)#(tab) #(lf)#(tab)  FROM SALES.NEW_MONY_DTL_FCT AS A LEFT JOIN#(lf)#(tab)       COMMON.DTRB_PERF_DATES B#(lf)#(tab)#(tab)ON A.PROC_DT_SK=B.DT_SK LEFT JOIN#(lf)#(tab)#(tab)   MEMBER.ITGR_IDVL_ALL_CURR_CFDL C#(lf)#(tab)#(tab)ON A.CUST_SK=C.CUST_SK#(lf)#(tab) WHERE YEAR(B.CAL_DAY_DT) = YEAR(CURRENT_DATE)#(lf)#(tab)  GROUP BY C.CUST_GRP_ID_NBR  #(lf)       ORDER BY C.CUST_GRP_ID_NBR ']),    #'Filtered Rows' = Table.SelectRows(Source, each ([NEWMONEY_AMT] \u003c\u003e 0))in    #'Filtered Rows'"}]},{"name":"Appointments","isHidden":false,"storageMode":"Import","columns":[{"name":"HHLD_ID","dataType":"Int64","isHidden":false,"columnType":"Data"},{"name":"Appointment Date","dataType":"DateTime","isHidden":false,"columnType":"Data"},{"name":"Future Appt Indicator","dataType":"String","isHidden":false,"expression":"   var _chk = if(\u0027Appointments\u0027[Appointment Date]\u003eNOW()-1,'Y','N')RETURNIF(ISBLANK(_chk),'N',_chk)  ","columnType":"Calculated"}],"measures":[],"source":[{"expression":"let    Source = Value.NativeQuery(Snowflake.Databases('thrivent.us-east-2.aws.snowflakecomputing.com','ENTERPRISE_EDW_PRESENTATION_WH'){[Name='ENTERPRISE_EDW']}[Data], 'WITH APPTS AS (#(lf)select pers_dim.''Source System Key Text'' as ThriventId,#(lf)       pers_dim.''Household Number'' as HHLD_ID,#(lf)       appt_fct.''Appointment Dimension Surrogate Key'',#(lf)       appt_fct.''Person Dimension Surrogate Key'',#(lf)       appt_dim.''Appointment Date'' #(lf)  #(lf)from ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Appointment Combine Fact'' appt_fct left join#(lf)     ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Person Dimension'' pers_dim#(lf)  on (appt_fct.''Person Dimension Surrogate Key''= pers_dim.''Person Dimension Surrogate Key'' and#(lf)      appt_fct.''Person Dimension Version Number'' = pers_dim.''Person Dimension Version Number'')  left join  #(lf)      ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Appointment Dimension'' appt_dim#(lf)  on (appt_fct.''Appointment Dimension Surrogate Key'' = appt_dim.''Appointment Dimension Surrogate Key'') left join      #(lf)      ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Organization Dimension'' org_dim#(lf)  on ((appt_fct.''Appointment Organization Dimension Surrogate Key'' = org_dim.''Organization Dimension Surrogate Key'') and#(lf)     ((org_dim.''Effective Begin Date'' \u003c= appt_dim.''Appointment Date'') and (appt_dim.''Appointment Date'' \u003c= org_dim.''Effective End Date''))) left join#(lf)     ''ENTERPRISE_EDW''.''PRESENTATION_01''.''Sale Hierarchy Dimension'' sale_hier_dim#(lf)  on ((org_dim.''Source System Key Text'' = sale_hier_dim.''Sales Hierarchy Identifier'' and #(lf)      (sale_hier_dim.''Effective Begin Date'' \u003c= appt_dim.''Appointment Date'') and #(lf)      (appt_dim.''Appointment Date'' \u003c= sale_hier_dim.''Effective End Date'' ) and#(lf)       sale_hier_dim.''Current Row Indicator'' = \u0027Y\u0027))  #(lf)       #(lf)where appt_dim.''Current Row Indicator'' = \u0027Y\u0027#(lf)  and appt_dim.''Appointment Create Date Over 14 Days'' = \u0027N\u0027#(lf)  and appt_fct.''Person Dimension Surrogate Key'' \u003c\u003e 0#(lf)  and appt_fct.''Appointment Status Name'' \u003c\u003e \u0027Declined\u0027#(lf)  and appt_dim.''Appointment Type Code'' \u003c\u003e \u0027UNK\u0027#(lf)  and sale_hier_dim.''Organization Department Code'' in (\u00270115\u0027,\u00270190\u0027,\u00270283\u0027,\u00270291\u0027,\u00270361\u0027,\u00270383\u0027,\u00270384\u0027,\u00270435\u0027,\u00270525\u0027)#(lf)  and (org_dim.''Job Type Code'' in (\u0027002000\u0027,\u0027002003\u0027,\u0027002010\u0027,\u0027002011\u0027,\u0027002012\u0027,\u0027002016\u0027,\u0027002022\u0027,\u0027002024\u0027,\u0027002025\u0027,\u0027002026\u0027,\u0027002027\u0027,\u0027002030\u0027,\u0027002031\u0027,\u0027002032\u0027,\u0027003100\u0027,\u0027003500\u0027) or#(lf)      org_dim.''Department Identifier'' in (\u00275405\u0027,\u00275407\u0027,\u00275408\u0027,\u00275409\u0027,\u00271701\u0027,\u00271702\u0027,\u00271703\u0027,\u00270383\u0027))#(lf)  and appt_dim.''Event Result Description'' not in (\u0027No Show\u0027,\u0027Cancelled\u0027)#(lf)#(lf)group by appt_fct.''Appointment Dimension Surrogate Key'',#(lf)         appt_fct.''Person Dimension Surrogate Key'',#(lf)         pers_dim.''Household Number'', #(lf)         appt_dim.''Appointment Date'', #(lf)         org_dim.''Source System Key Text'', #(lf)         pers_dim.''Source System Key Text'' #(lf)having sum(appt_fct.''Appointment Occurs'' )\u003e 0         #(lf)#(lf))#(lf)(select distinct HHLD_ID,#(lf)                 max(''Appointment Date'') as ''Appointment Date'' #(lf)    from ((select HHLD_ID,#(lf)                 max(''Appointment Date'') as ''Appointment Date'' #(lf)            from APPTS#(lf)          where ''Appointment Date'' \u003c= CURRENT_DATE()#(lf)         group by HHLD_ID  #(lf)        )  #(lf)   union#(lf)     (select HHLD_ID,#(lf)                 min(''Appointment Date'') as ''Appointment Date'' #(lf)            from APPTS#(lf)          where ''Appointment Date'' \u003e CURRENT_DATE()#(lf)         group by HHLD_ID  #(lf)        ))  #(lf)  group by HHLD_ID   #(lf)   #(lf))', null, [EnableFolding=true])in    Source"}]}],"expressions":[{"name":"Experience Advisor Sort","expression":"let    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText('i45WUtJRMlSK1YlWCvB1VtBVyE0syk4tUTAwBIobYYqbWgLFjcHi7gGOCHEzkLgJVNwFIW4OEjcFi/sFuCPELS2A4mZYxEHqzZViYwE=', BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Filter_Ind = _t, Sort = _t]),    #'Changed Type' = Table.TransformColumnTypes(Source,{{'Filter_Ind', type text}, {'Sort', Int64.Type}})in    #'Changed Type'"}],"roles":[{"name":"Field_VirtualAdvice_Leaders","modelPermission":"Read","tablePermissions":[{"name":"Role Level Security","filterExpression":"IFERROR(SEARCH(USERNAME(),[REPORT_TO_EMAIL]),-1)\u003e0"}]},{"name":"TAG Support","modelPermission":"Read","tablePermissions":[{"name":"Role Level Security","filterExpression":"[Department Number] = lookupvalue([Department Number],[REPORT_TO_EMAIL],username())"}]},{"name":"Home Office/COE","modelPermission":"Read"}],"configuredBy":"ravi.sembeti@thrivent.com","configuredById":"79b17600-c299-431a-9821-8fcbd0c38109","isEffectiveIdentityRequired":true,"isEffectiveIdentityRolesRequired":true,"targetStorageMode":"Abf","createdDate":"2024-04-17T16:42:10.32","contentProviderType":"PbixInImportMode"}],"dataflows":[{"objectId":"0b905589-2450-4f3c-9fd8-f4902e4223de","name":"Producer","description":"Dataflow Name: ProducerPurpose: Data that is brought into PowerBI datasets for producer/agent information.Entities: ProducerEnvironment: ProductionBI/Data Team Contact: Jason Devlin,Vasavi KottapalliBusiness Owner: Mary SteeleBusiness Contact: Tom Blackman","configuredBy":"david.bowman@thrivent.com","modifiedBy":"david.bowman@thrivent.com","modifiedDateTime":"2022-04-18T12:52:12.377Z","refreshSchedule":{"days":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"times":["6:00:00"],"enabled":true,"localTimeZoneId":"Central Standard Time","notifyOption":"NoNotification"},"generation":1},{"objectId":"493ce99b-9916-4173-9e29-39441fd944b9","name":"New Client Dataflow","description":"NFC Dataflow","configuredBy":"Vasavi.Kottapalli@Thrivent.com","modifiedBy":"Vasavi.Kottapalli@Thrivent.com","modifiedDateTime":"2023-01-18T16:54:20.067Z","refreshSchedule":{"days":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"times":["6:00:00"],"enabled":true,"localTimeZoneId":"Central Standard Time","notifyOption":"NoNotification"},"generation":1},{"objectId":"e4d9fa5e-afc9-4559-890a-2c0b8f7f5a81","name":"New Business Received, Pending, Issued","description":"Dataflow to report on new business data that has been received, pending, and issued. This dataflow has Resonant data entities, TIW entities.(GIAS resonant app data, TIW contract and app data).","configuredBy":"david.bowman@thrivent.com","modifiedBy":"david.bowman@thrivent.com","modifiedDateTime":"2022-08-08T18:01:02.18Z","refreshSchedule":{"days":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"times":["9:00:00","12:00:00"],"enabled":true,"localTimeZoneId":"Central Standard Time","notifyOption":"NoNotification"},"generation":1}],"datamarts":[]}]}